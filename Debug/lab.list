
lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089ac  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000adc  08008b94  08008b94  00018b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08009670  08009670  00019670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08009674  08009674  00019674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000244  20000000  08009678  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001fac  20000244  080098bc  00020244  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200021f0  080098bc  000221f0  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000f99d  00000000  00000000  0002026d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003388  00000000  00000000  0002fc0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001188  00000000  00000000  00032f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000ff0  00000000  00000000  00034120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   0000d768  00000000  00000000  00035110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    0000476c  00000000  00000000  00042878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .comment      00000050  00000000  00000000  00046fe4  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00004ee8  00000000  00000000  00047034  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000244 	.word	0x20000244
 8000204:	00000000 	.word	0x00000000
 8000208:	08008b7c 	.word	0x08008b7c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000248 	.word	0x20000248
 8000224:	08008b7c 	.word	0x08008b7c

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2uiz>:
 8000ad4:	004a      	lsls	r2, r1, #1
 8000ad6:	d211      	bcs.n	8000afc <__aeabi_d2uiz+0x28>
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000adc:	d211      	bcs.n	8000b02 <__aeabi_d2uiz+0x2e>
 8000ade:	d50d      	bpl.n	8000afc <__aeabi_d2uiz+0x28>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d40e      	bmi.n	8000b08 <__aeabi_d2uiz+0x34>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	fa23 f002 	lsr.w	r0, r3, r2
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d102      	bne.n	8000b0e <__aeabi_d2uiz+0x3a>
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	4770      	bx	lr
 8000b0e:	f04f 0000 	mov.w	r0, #0
 8000b12:	4770      	bx	lr

08000b14 <__aeabi_frsub>:
 8000b14:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b18:	e002      	b.n	8000b20 <__addsf3>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_fsub>:
 8000b1c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b20 <__addsf3>:
 8000b20:	0042      	lsls	r2, r0, #1
 8000b22:	bf1f      	itttt	ne
 8000b24:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b28:	ea92 0f03 	teqne	r2, r3
 8000b2c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b30:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b34:	d06a      	beq.n	8000c0c <__addsf3+0xec>
 8000b36:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b3e:	bfc1      	itttt	gt
 8000b40:	18d2      	addgt	r2, r2, r3
 8000b42:	4041      	eorgt	r1, r0
 8000b44:	4048      	eorgt	r0, r1
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	bfb8      	it	lt
 8000b4a:	425b      	neglt	r3, r3
 8000b4c:	2b19      	cmp	r3, #25
 8000b4e:	bf88      	it	hi
 8000b50:	4770      	bxhi	lr
 8000b52:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b56:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b5e:	bf18      	it	ne
 8000b60:	4240      	negne	r0, r0
 8000b62:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b66:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b6a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b6e:	bf18      	it	ne
 8000b70:	4249      	negne	r1, r1
 8000b72:	ea92 0f03 	teq	r2, r3
 8000b76:	d03f      	beq.n	8000bf8 <__addsf3+0xd8>
 8000b78:	f1a2 0201 	sub.w	r2, r2, #1
 8000b7c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b80:	eb10 000c 	adds.w	r0, r0, ip
 8000b84:	f1c3 0320 	rsb	r3, r3, #32
 8000b88:	fa01 f103 	lsl.w	r1, r1, r3
 8000b8c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b90:	d502      	bpl.n	8000b98 <__addsf3+0x78>
 8000b92:	4249      	negs	r1, r1
 8000b94:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b98:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b9c:	d313      	bcc.n	8000bc6 <__addsf3+0xa6>
 8000b9e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ba2:	d306      	bcc.n	8000bb2 <__addsf3+0x92>
 8000ba4:	0840      	lsrs	r0, r0, #1
 8000ba6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000baa:	f102 0201 	add.w	r2, r2, #1
 8000bae:	2afe      	cmp	r2, #254	; 0xfe
 8000bb0:	d251      	bcs.n	8000c56 <__addsf3+0x136>
 8000bb2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bba:	bf08      	it	eq
 8000bbc:	f020 0001 	biceq.w	r0, r0, #1
 8000bc0:	ea40 0003 	orr.w	r0, r0, r3
 8000bc4:	4770      	bx	lr
 8000bc6:	0049      	lsls	r1, r1, #1
 8000bc8:	eb40 0000 	adc.w	r0, r0, r0
 8000bcc:	3a01      	subs	r2, #1
 8000bce:	bf28      	it	cs
 8000bd0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bd4:	d2ed      	bcs.n	8000bb2 <__addsf3+0x92>
 8000bd6:	fab0 fc80 	clz	ip, r0
 8000bda:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bde:	ebb2 020c 	subs.w	r2, r2, ip
 8000be2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000be6:	bfaa      	itet	ge
 8000be8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bec:	4252      	neglt	r2, r2
 8000bee:	4318      	orrge	r0, r3
 8000bf0:	bfbc      	itt	lt
 8000bf2:	40d0      	lsrlt	r0, r2
 8000bf4:	4318      	orrlt	r0, r3
 8000bf6:	4770      	bx	lr
 8000bf8:	f092 0f00 	teq	r2, #0
 8000bfc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c00:	bf06      	itte	eq
 8000c02:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c06:	3201      	addeq	r2, #1
 8000c08:	3b01      	subne	r3, #1
 8000c0a:	e7b5      	b.n	8000b78 <__addsf3+0x58>
 8000c0c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c10:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c14:	bf18      	it	ne
 8000c16:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1a:	d021      	beq.n	8000c60 <__addsf3+0x140>
 8000c1c:	ea92 0f03 	teq	r2, r3
 8000c20:	d004      	beq.n	8000c2c <__addsf3+0x10c>
 8000c22:	f092 0f00 	teq	r2, #0
 8000c26:	bf08      	it	eq
 8000c28:	4608      	moveq	r0, r1
 8000c2a:	4770      	bx	lr
 8000c2c:	ea90 0f01 	teq	r0, r1
 8000c30:	bf1c      	itt	ne
 8000c32:	2000      	movne	r0, #0
 8000c34:	4770      	bxne	lr
 8000c36:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c3a:	d104      	bne.n	8000c46 <__addsf3+0x126>
 8000c3c:	0040      	lsls	r0, r0, #1
 8000c3e:	bf28      	it	cs
 8000c40:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c44:	4770      	bx	lr
 8000c46:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c4a:	bf3c      	itt	cc
 8000c4c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c50:	4770      	bxcc	lr
 8000c52:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c56:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c5e:	4770      	bx	lr
 8000c60:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c64:	bf16      	itet	ne
 8000c66:	4608      	movne	r0, r1
 8000c68:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c6c:	4601      	movne	r1, r0
 8000c6e:	0242      	lsls	r2, r0, #9
 8000c70:	bf06      	itte	eq
 8000c72:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c76:	ea90 0f01 	teqeq	r0, r1
 8000c7a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c7e:	4770      	bx	lr

08000c80 <__aeabi_ui2f>:
 8000c80:	f04f 0300 	mov.w	r3, #0
 8000c84:	e004      	b.n	8000c90 <__aeabi_i2f+0x8>
 8000c86:	bf00      	nop

08000c88 <__aeabi_i2f>:
 8000c88:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c8c:	bf48      	it	mi
 8000c8e:	4240      	negmi	r0, r0
 8000c90:	ea5f 0c00 	movs.w	ip, r0
 8000c94:	bf08      	it	eq
 8000c96:	4770      	bxeq	lr
 8000c98:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c9c:	4601      	mov	r1, r0
 8000c9e:	f04f 0000 	mov.w	r0, #0
 8000ca2:	e01c      	b.n	8000cde <__aeabi_l2f+0x2a>

08000ca4 <__aeabi_ul2f>:
 8000ca4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f04f 0300 	mov.w	r3, #0
 8000cb0:	e00a      	b.n	8000cc8 <__aeabi_l2f+0x14>
 8000cb2:	bf00      	nop

08000cb4 <__aeabi_l2f>:
 8000cb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb8:	bf08      	it	eq
 8000cba:	4770      	bxeq	lr
 8000cbc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cc0:	d502      	bpl.n	8000cc8 <__aeabi_l2f+0x14>
 8000cc2:	4240      	negs	r0, r0
 8000cc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc8:	ea5f 0c01 	movs.w	ip, r1
 8000ccc:	bf02      	ittt	eq
 8000cce:	4684      	moveq	ip, r0
 8000cd0:	4601      	moveq	r1, r0
 8000cd2:	2000      	moveq	r0, #0
 8000cd4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cd8:	bf08      	it	eq
 8000cda:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cde:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ce2:	fabc f28c 	clz	r2, ip
 8000ce6:	3a08      	subs	r2, #8
 8000ce8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cec:	db10      	blt.n	8000d10 <__aeabi_l2f+0x5c>
 8000cee:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf2:	4463      	add	r3, ip
 8000cf4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cf8:	f1c2 0220 	rsb	r2, r2, #32
 8000cfc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d00:	fa20 f202 	lsr.w	r2, r0, r2
 8000d04:	eb43 0002 	adc.w	r0, r3, r2
 8000d08:	bf08      	it	eq
 8000d0a:	f020 0001 	biceq.w	r0, r0, #1
 8000d0e:	4770      	bx	lr
 8000d10:	f102 0220 	add.w	r2, r2, #32
 8000d14:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d18:	f1c2 0220 	rsb	r2, r2, #32
 8000d1c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d20:	fa21 f202 	lsr.w	r2, r1, r2
 8000d24:	eb43 0002 	adc.w	r0, r3, r2
 8000d28:	bf08      	it	eq
 8000d2a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d2e:	4770      	bx	lr

08000d30 <__aeabi_fmul>:
 8000d30:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d34:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d38:	bf1e      	ittt	ne
 8000d3a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d3e:	ea92 0f0c 	teqne	r2, ip
 8000d42:	ea93 0f0c 	teqne	r3, ip
 8000d46:	d06f      	beq.n	8000e28 <__aeabi_fmul+0xf8>
 8000d48:	441a      	add	r2, r3
 8000d4a:	ea80 0c01 	eor.w	ip, r0, r1
 8000d4e:	0240      	lsls	r0, r0, #9
 8000d50:	bf18      	it	ne
 8000d52:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d56:	d01e      	beq.n	8000d96 <__aeabi_fmul+0x66>
 8000d58:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d5c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d60:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d64:	fba0 3101 	umull	r3, r1, r0, r1
 8000d68:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d6c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d70:	bf3e      	ittt	cc
 8000d72:	0049      	lslcc	r1, r1, #1
 8000d74:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d78:	005b      	lslcc	r3, r3, #1
 8000d7a:	ea40 0001 	orr.w	r0, r0, r1
 8000d7e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d82:	2afd      	cmp	r2, #253	; 0xfd
 8000d84:	d81d      	bhi.n	8000dc2 <__aeabi_fmul+0x92>
 8000d86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d8a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d8e:	bf08      	it	eq
 8000d90:	f020 0001 	biceq.w	r0, r0, #1
 8000d94:	4770      	bx	lr
 8000d96:	f090 0f00 	teq	r0, #0
 8000d9a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d9e:	bf08      	it	eq
 8000da0:	0249      	lsleq	r1, r1, #9
 8000da2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000da6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000daa:	3a7f      	subs	r2, #127	; 0x7f
 8000dac:	bfc2      	ittt	gt
 8000dae:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000db6:	4770      	bxgt	lr
 8000db8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dbc:	f04f 0300 	mov.w	r3, #0
 8000dc0:	3a01      	subs	r2, #1
 8000dc2:	dc5d      	bgt.n	8000e80 <__aeabi_fmul+0x150>
 8000dc4:	f112 0f19 	cmn.w	r2, #25
 8000dc8:	bfdc      	itt	le
 8000dca:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dce:	4770      	bxle	lr
 8000dd0:	f1c2 0200 	rsb	r2, r2, #0
 8000dd4:	0041      	lsls	r1, r0, #1
 8000dd6:	fa21 f102 	lsr.w	r1, r1, r2
 8000dda:	f1c2 0220 	rsb	r2, r2, #32
 8000dde:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de2:	ea5f 0031 	movs.w	r0, r1, rrx
 8000de6:	f140 0000 	adc.w	r0, r0, #0
 8000dea:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dee:	bf08      	it	eq
 8000df0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df4:	4770      	bx	lr
 8000df6:	f092 0f00 	teq	r2, #0
 8000dfa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dfe:	bf02      	ittt	eq
 8000e00:	0040      	lsleq	r0, r0, #1
 8000e02:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e06:	3a01      	subeq	r2, #1
 8000e08:	d0f9      	beq.n	8000dfe <__aeabi_fmul+0xce>
 8000e0a:	ea40 000c 	orr.w	r0, r0, ip
 8000e0e:	f093 0f00 	teq	r3, #0
 8000e12:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e16:	bf02      	ittt	eq
 8000e18:	0049      	lsleq	r1, r1, #1
 8000e1a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e1e:	3b01      	subeq	r3, #1
 8000e20:	d0f9      	beq.n	8000e16 <__aeabi_fmul+0xe6>
 8000e22:	ea41 010c 	orr.w	r1, r1, ip
 8000e26:	e78f      	b.n	8000d48 <__aeabi_fmul+0x18>
 8000e28:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e2c:	ea92 0f0c 	teq	r2, ip
 8000e30:	bf18      	it	ne
 8000e32:	ea93 0f0c 	teqne	r3, ip
 8000e36:	d00a      	beq.n	8000e4e <__aeabi_fmul+0x11e>
 8000e38:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e3c:	bf18      	it	ne
 8000e3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e42:	d1d8      	bne.n	8000df6 <__aeabi_fmul+0xc6>
 8000e44:	ea80 0001 	eor.w	r0, r0, r1
 8000e48:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e4c:	4770      	bx	lr
 8000e4e:	f090 0f00 	teq	r0, #0
 8000e52:	bf17      	itett	ne
 8000e54:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e58:	4608      	moveq	r0, r1
 8000e5a:	f091 0f00 	teqne	r1, #0
 8000e5e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e62:	d014      	beq.n	8000e8e <__aeabi_fmul+0x15e>
 8000e64:	ea92 0f0c 	teq	r2, ip
 8000e68:	d101      	bne.n	8000e6e <__aeabi_fmul+0x13e>
 8000e6a:	0242      	lsls	r2, r0, #9
 8000e6c:	d10f      	bne.n	8000e8e <__aeabi_fmul+0x15e>
 8000e6e:	ea93 0f0c 	teq	r3, ip
 8000e72:	d103      	bne.n	8000e7c <__aeabi_fmul+0x14c>
 8000e74:	024b      	lsls	r3, r1, #9
 8000e76:	bf18      	it	ne
 8000e78:	4608      	movne	r0, r1
 8000e7a:	d108      	bne.n	8000e8e <__aeabi_fmul+0x15e>
 8000e7c:	ea80 0001 	eor.w	r0, r0, r1
 8000e80:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e8c:	4770      	bx	lr
 8000e8e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e92:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e96:	4770      	bx	lr

08000e98 <__aeabi_fdiv>:
 8000e98:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea0:	bf1e      	ittt	ne
 8000ea2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ea6:	ea92 0f0c 	teqne	r2, ip
 8000eaa:	ea93 0f0c 	teqne	r3, ip
 8000eae:	d069      	beq.n	8000f84 <__aeabi_fdiv+0xec>
 8000eb0:	eba2 0203 	sub.w	r2, r2, r3
 8000eb4:	ea80 0c01 	eor.w	ip, r0, r1
 8000eb8:	0249      	lsls	r1, r1, #9
 8000eba:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ebe:	d037      	beq.n	8000f30 <__aeabi_fdiv+0x98>
 8000ec0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ec4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ec8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ecc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ed0:	428b      	cmp	r3, r1
 8000ed2:	bf38      	it	cc
 8000ed4:	005b      	lslcc	r3, r3, #1
 8000ed6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eda:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ede:	428b      	cmp	r3, r1
 8000ee0:	bf24      	itt	cs
 8000ee2:	1a5b      	subcs	r3, r3, r1
 8000ee4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ee8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000eec:	bf24      	itt	cs
 8000eee:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ef6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efa:	bf24      	itt	cs
 8000efc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f00:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f04:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f08:	bf24      	itt	cs
 8000f0a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f0e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f12:	011b      	lsls	r3, r3, #4
 8000f14:	bf18      	it	ne
 8000f16:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1a:	d1e0      	bne.n	8000ede <__aeabi_fdiv+0x46>
 8000f1c:	2afd      	cmp	r2, #253	; 0xfd
 8000f1e:	f63f af50 	bhi.w	8000dc2 <__aeabi_fmul+0x92>
 8000f22:	428b      	cmp	r3, r1
 8000f24:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f28:	bf08      	it	eq
 8000f2a:	f020 0001 	biceq.w	r0, r0, #1
 8000f2e:	4770      	bx	lr
 8000f30:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f34:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f38:	327f      	adds	r2, #127	; 0x7f
 8000f3a:	bfc2      	ittt	gt
 8000f3c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f40:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f44:	4770      	bxgt	lr
 8000f46:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f4a:	f04f 0300 	mov.w	r3, #0
 8000f4e:	3a01      	subs	r2, #1
 8000f50:	e737      	b.n	8000dc2 <__aeabi_fmul+0x92>
 8000f52:	f092 0f00 	teq	r2, #0
 8000f56:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f5a:	bf02      	ittt	eq
 8000f5c:	0040      	lsleq	r0, r0, #1
 8000f5e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f62:	3a01      	subeq	r2, #1
 8000f64:	d0f9      	beq.n	8000f5a <__aeabi_fdiv+0xc2>
 8000f66:	ea40 000c 	orr.w	r0, r0, ip
 8000f6a:	f093 0f00 	teq	r3, #0
 8000f6e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f72:	bf02      	ittt	eq
 8000f74:	0049      	lsleq	r1, r1, #1
 8000f76:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f7a:	3b01      	subeq	r3, #1
 8000f7c:	d0f9      	beq.n	8000f72 <__aeabi_fdiv+0xda>
 8000f7e:	ea41 010c 	orr.w	r1, r1, ip
 8000f82:	e795      	b.n	8000eb0 <__aeabi_fdiv+0x18>
 8000f84:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f88:	ea92 0f0c 	teq	r2, ip
 8000f8c:	d108      	bne.n	8000fa0 <__aeabi_fdiv+0x108>
 8000f8e:	0242      	lsls	r2, r0, #9
 8000f90:	f47f af7d 	bne.w	8000e8e <__aeabi_fmul+0x15e>
 8000f94:	ea93 0f0c 	teq	r3, ip
 8000f98:	f47f af70 	bne.w	8000e7c <__aeabi_fmul+0x14c>
 8000f9c:	4608      	mov	r0, r1
 8000f9e:	e776      	b.n	8000e8e <__aeabi_fmul+0x15e>
 8000fa0:	ea93 0f0c 	teq	r3, ip
 8000fa4:	d104      	bne.n	8000fb0 <__aeabi_fdiv+0x118>
 8000fa6:	024b      	lsls	r3, r1, #9
 8000fa8:	f43f af4c 	beq.w	8000e44 <__aeabi_fmul+0x114>
 8000fac:	4608      	mov	r0, r1
 8000fae:	e76e      	b.n	8000e8e <__aeabi_fmul+0x15e>
 8000fb0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fb4:	bf18      	it	ne
 8000fb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fba:	d1ca      	bne.n	8000f52 <__aeabi_fdiv+0xba>
 8000fbc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fc0:	f47f af5c 	bne.w	8000e7c <__aeabi_fmul+0x14c>
 8000fc4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fc8:	f47f af3c 	bne.w	8000e44 <__aeabi_fmul+0x114>
 8000fcc:	e75f      	b.n	8000e8e <__aeabi_fmul+0x15e>
 8000fce:	bf00      	nop

08000fd0 <__gesf2>:
 8000fd0:	f04f 3cff 	mov.w	ip, #4294967295
 8000fd4:	e006      	b.n	8000fe4 <__cmpsf2+0x4>
 8000fd6:	bf00      	nop

08000fd8 <__lesf2>:
 8000fd8:	f04f 0c01 	mov.w	ip, #1
 8000fdc:	e002      	b.n	8000fe4 <__cmpsf2+0x4>
 8000fde:	bf00      	nop

08000fe0 <__cmpsf2>:
 8000fe0:	f04f 0c01 	mov.w	ip, #1
 8000fe4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fe8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ff0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ff4:	bf18      	it	ne
 8000ff6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ffa:	d011      	beq.n	8001020 <__cmpsf2+0x40>
 8000ffc:	b001      	add	sp, #4
 8000ffe:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001002:	bf18      	it	ne
 8001004:	ea90 0f01 	teqne	r0, r1
 8001008:	bf58      	it	pl
 800100a:	ebb2 0003 	subspl.w	r0, r2, r3
 800100e:	bf88      	it	hi
 8001010:	17c8      	asrhi	r0, r1, #31
 8001012:	bf38      	it	cc
 8001014:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001018:	bf18      	it	ne
 800101a:	f040 0001 	orrne.w	r0, r0, #1
 800101e:	4770      	bx	lr
 8001020:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001024:	d102      	bne.n	800102c <__cmpsf2+0x4c>
 8001026:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800102a:	d105      	bne.n	8001038 <__cmpsf2+0x58>
 800102c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001030:	d1e4      	bne.n	8000ffc <__cmpsf2+0x1c>
 8001032:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001036:	d0e1      	beq.n	8000ffc <__cmpsf2+0x1c>
 8001038:	f85d 0b04 	ldr.w	r0, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <__aeabi_cfrcmple>:
 8001040:	4684      	mov	ip, r0
 8001042:	4608      	mov	r0, r1
 8001044:	4661      	mov	r1, ip
 8001046:	e7ff      	b.n	8001048 <__aeabi_cfcmpeq>

08001048 <__aeabi_cfcmpeq>:
 8001048:	b50f      	push	{r0, r1, r2, r3, lr}
 800104a:	f7ff ffc9 	bl	8000fe0 <__cmpsf2>
 800104e:	2800      	cmp	r0, #0
 8001050:	bf48      	it	mi
 8001052:	f110 0f00 	cmnmi.w	r0, #0
 8001056:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001058 <__aeabi_fcmpeq>:
 8001058:	f84d ed08 	str.w	lr, [sp, #-8]!
 800105c:	f7ff fff4 	bl	8001048 <__aeabi_cfcmpeq>
 8001060:	bf0c      	ite	eq
 8001062:	2001      	moveq	r0, #1
 8001064:	2000      	movne	r0, #0
 8001066:	f85d fb08 	ldr.w	pc, [sp], #8
 800106a:	bf00      	nop

0800106c <__aeabi_fcmplt>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff ffea 	bl	8001048 <__aeabi_cfcmpeq>
 8001074:	bf34      	ite	cc
 8001076:	2001      	movcc	r0, #1
 8001078:	2000      	movcs	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmple>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffe0 	bl	8001048 <__aeabi_cfcmpeq>
 8001088:	bf94      	ite	ls
 800108a:	2001      	movls	r0, #1
 800108c:	2000      	movhi	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmpge>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffd2 	bl	8001040 <__aeabi_cfrcmple>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpgt>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffc8 	bl	8001040 <__aeabi_cfrcmple>
 80010b0:	bf34      	ite	cc
 80010b2:	2001      	movcc	r0, #1
 80010b4:	2000      	movcs	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <Ov7725_Init>:
uint16_t pixels[100][150];
/************************************************
 * Sensor_Init
 ************************************************/
ErrorStatus Ov7725_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	80fb      	strh	r3, [r7, #6]
	uint8_t Sensor_IDCode = 0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	717b      	strb	r3, [r7, #5]

	if (0 == SCCB_WriteByte(0x12, 0x80)) /*reset sensor */
 80010ca:	2180      	movs	r1, #128	; 0x80
 80010cc:	2012      	movs	r0, #18
 80010ce:	f000 f955 	bl	800137c <SCCB_WriteByte>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d101      	bne.n	80010dc <Ov7725_Init+0x20>
	{
		return ERROR;
 80010d8:	2300      	movs	r3, #0
 80010da:	e030      	b.n	800113e <Ov7725_Init+0x82>
	}

	if (0 == SCCB_ReadByte(&Sensor_IDCode, 1, 0x0b)) /* read sensor ID*/
 80010dc:	1d7b      	adds	r3, r7, #5
 80010de:	220b      	movs	r2, #11
 80010e0:	2101      	movs	r1, #1
 80010e2:	4618      	mov	r0, r3
 80010e4:	f000 f979 	bl	80013da <SCCB_ReadByte>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d101      	bne.n	80010f2 <Ov7725_Init+0x36>
	{
		return ERROR;
 80010ee:	2300      	movs	r3, #0
 80010f0:	e025      	b.n	800113e <Ov7725_Init+0x82>
	}
	// DEBUG("Sensor ID is 0x%x", Sensor_IDCode);

	if (Sensor_IDCode == OV7725_ID)
 80010f2:	797b      	ldrb	r3, [r7, #5]
 80010f4:	2b21      	cmp	r3, #33	; 0x21
 80010f6:	d11f      	bne.n	8001138 <Ov7725_Init+0x7c>
	{
		for (i = 0; i < OV7725_REG_NUM; i++)
 80010f8:	2300      	movs	r3, #0
 80010fa:	80fb      	strh	r3, [r7, #6]
 80010fc:	e015      	b.n	800112a <Ov7725_Init+0x6e>
		{
			if (0 == SCCB_WriteByte(Sensor_Config[i].Address, Sensor_Config[i].Value))
 80010fe:	88fb      	ldrh	r3, [r7, #6]
 8001100:	4a11      	ldr	r2, [pc, #68]	; (8001148 <Ov7725_Init+0x8c>)
 8001102:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001106:	b29a      	uxth	r2, r3
 8001108:	88fb      	ldrh	r3, [r7, #6]
 800110a:	490f      	ldr	r1, [pc, #60]	; (8001148 <Ov7725_Init+0x8c>)
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	440b      	add	r3, r1
 8001110:	785b      	ldrb	r3, [r3, #1]
 8001112:	4619      	mov	r1, r3
 8001114:	4610      	mov	r0, r2
 8001116:	f000 f931 	bl	800137c <SCCB_WriteByte>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d101      	bne.n	8001124 <Ov7725_Init+0x68>
			{
				return ERROR;
 8001120:	2300      	movs	r3, #0
 8001122:	e00c      	b.n	800113e <Ov7725_Init+0x82>
		for (i = 0; i < OV7725_REG_NUM; i++)
 8001124:	88fb      	ldrh	r3, [r7, #6]
 8001126:	3301      	adds	r3, #1
 8001128:	80fb      	strh	r3, [r7, #6]
 800112a:	4b08      	ldr	r3, [pc, #32]	; (800114c <Ov7725_Init+0x90>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	b29b      	uxth	r3, r3
 8001130:	88fa      	ldrh	r2, [r7, #6]
 8001132:	429a      	cmp	r2, r3
 8001134:	d3e3      	bcc.n	80010fe <Ov7725_Init+0x42>
 8001136:	e001      	b.n	800113c <Ov7725_Init+0x80>
			}
		}
	}
	else
	{
		return ERROR;
 8001138:	2300      	movs	r3, #0
 800113a:	e000      	b.n	800113e <Ov7725_Init+0x82>
	}

	return SUCCESS;
 800113c:	2301      	movs	r3, #1
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000000 	.word	0x20000000
 800114c:	2000009a 	.word	0x2000009a

08001150 <SCCB_delay>:

#define DEV_ADR  ADDR_OV7725 			 


static void SCCB_delay(void)
{	
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
   uint16_t i = 400; 
 8001156:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800115a:	80fb      	strh	r3, [r7, #6]
   while(i) 
 800115c:	e002      	b.n	8001164 <SCCB_delay+0x14>
   { 
     i--; 
 800115e:	88fb      	ldrh	r3, [r7, #6]
 8001160:	3b01      	subs	r3, #1
 8001162:	80fb      	strh	r3, [r7, #6]
   while(i) 
 8001164:	88fb      	ldrh	r3, [r7, #6]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d1f9      	bne.n	800115e <SCCB_delay+0xe>
   } 
}
 800116a:	bf00      	nop
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr
	...

08001178 <SCCB_Start>:


static int SCCB_Start(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
	SDA_H;
 800117c:	4b13      	ldr	r3, [pc, #76]	; (80011cc <SCCB_Start+0x54>)
 800117e:	2280      	movs	r2, #128	; 0x80
 8001180:	611a      	str	r2, [r3, #16]
	SCL_H;
 8001182:	4b12      	ldr	r3, [pc, #72]	; (80011cc <SCCB_Start+0x54>)
 8001184:	2240      	movs	r2, #64	; 0x40
 8001186:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8001188:	f7ff ffe2 	bl	8001150 <SCCB_delay>
	if(!SDA_read)
 800118c:	2180      	movs	r1, #128	; 0x80
 800118e:	480f      	ldr	r0, [pc, #60]	; (80011cc <SCCB_Start+0x54>)
 8001190:	f004 ff20 	bl	8005fd4 <HAL_GPIO_ReadPin>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d101      	bne.n	800119e <SCCB_Start+0x26>
	return DISABLE;	
 800119a:	2300      	movs	r3, #0
 800119c:	e013      	b.n	80011c6 <SCCB_Start+0x4e>
	SDA_L;
 800119e:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <SCCB_Start+0x54>)
 80011a0:	2280      	movs	r2, #128	; 0x80
 80011a2:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 80011a4:	f7ff ffd4 	bl	8001150 <SCCB_delay>
	if(SDA_read) 
 80011a8:	2180      	movs	r1, #128	; 0x80
 80011aa:	4808      	ldr	r0, [pc, #32]	; (80011cc <SCCB_Start+0x54>)
 80011ac:	f004 ff12 	bl	8005fd4 <HAL_GPIO_ReadPin>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <SCCB_Start+0x42>
	return DISABLE;	
 80011b6:	2300      	movs	r3, #0
 80011b8:	e005      	b.n	80011c6 <SCCB_Start+0x4e>
	SDA_L;
 80011ba:	4b04      	ldr	r3, [pc, #16]	; (80011cc <SCCB_Start+0x54>)
 80011bc:	2280      	movs	r2, #128	; 0x80
 80011be:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 80011c0:	f7ff ffc6 	bl	8001150 <SCCB_delay>
	return ENABLE;
 80011c4:	2301      	movs	r3, #1
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40011000 	.word	0x40011000

080011d0 <SCCB_Stop>:


static void SCCB_Stop(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
	SCL_L;
 80011d4:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <SCCB_Stop+0x30>)
 80011d6:	2240      	movs	r2, #64	; 0x40
 80011d8:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 80011da:	f7ff ffb9 	bl	8001150 <SCCB_delay>
	SDA_L;
 80011de:	4b08      	ldr	r3, [pc, #32]	; (8001200 <SCCB_Stop+0x30>)
 80011e0:	2280      	movs	r2, #128	; 0x80
 80011e2:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 80011e4:	f7ff ffb4 	bl	8001150 <SCCB_delay>
	SCL_H;
 80011e8:	4b05      	ldr	r3, [pc, #20]	; (8001200 <SCCB_Stop+0x30>)
 80011ea:	2240      	movs	r2, #64	; 0x40
 80011ec:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 80011ee:	f7ff ffaf 	bl	8001150 <SCCB_delay>
	SDA_H;
 80011f2:	4b03      	ldr	r3, [pc, #12]	; (8001200 <SCCB_Stop+0x30>)
 80011f4:	2280      	movs	r2, #128	; 0x80
 80011f6:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 80011f8:	f7ff ffaa 	bl	8001150 <SCCB_delay>
}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40011000 	.word	0x40011000

08001204 <SCCB_Ack>:


static void SCCB_Ack(void)
{	
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
	SCL_L;
 8001208:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <SCCB_Ack+0x30>)
 800120a:	2240      	movs	r2, #64	; 0x40
 800120c:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 800120e:	f7ff ff9f 	bl	8001150 <SCCB_delay>
	SDA_L;
 8001212:	4b08      	ldr	r3, [pc, #32]	; (8001234 <SCCB_Ack+0x30>)
 8001214:	2280      	movs	r2, #128	; 0x80
 8001216:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8001218:	f7ff ff9a 	bl	8001150 <SCCB_delay>
	SCL_H;
 800121c:	4b05      	ldr	r3, [pc, #20]	; (8001234 <SCCB_Ack+0x30>)
 800121e:	2240      	movs	r2, #64	; 0x40
 8001220:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8001222:	f7ff ff95 	bl	8001150 <SCCB_delay>
	SCL_L;
 8001226:	4b03      	ldr	r3, [pc, #12]	; (8001234 <SCCB_Ack+0x30>)
 8001228:	2240      	movs	r2, #64	; 0x40
 800122a:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 800122c:	f7ff ff90 	bl	8001150 <SCCB_delay>
}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40011000 	.word	0x40011000

08001238 <SCCB_NoAck>:


static void SCCB_NoAck(void)
{	
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
	SCL_L;
 800123c:	4b0a      	ldr	r3, [pc, #40]	; (8001268 <SCCB_NoAck+0x30>)
 800123e:	2240      	movs	r2, #64	; 0x40
 8001240:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8001242:	f7ff ff85 	bl	8001150 <SCCB_delay>
	SDA_H;
 8001246:	4b08      	ldr	r3, [pc, #32]	; (8001268 <SCCB_NoAck+0x30>)
 8001248:	2280      	movs	r2, #128	; 0x80
 800124a:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 800124c:	f7ff ff80 	bl	8001150 <SCCB_delay>
	SCL_H;
 8001250:	4b05      	ldr	r3, [pc, #20]	; (8001268 <SCCB_NoAck+0x30>)
 8001252:	2240      	movs	r2, #64	; 0x40
 8001254:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8001256:	f7ff ff7b 	bl	8001150 <SCCB_delay>
	SCL_L;
 800125a:	4b03      	ldr	r3, [pc, #12]	; (8001268 <SCCB_NoAck+0x30>)
 800125c:	2240      	movs	r2, #64	; 0x40
 800125e:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8001260:	f7ff ff76 	bl	8001150 <SCCB_delay>
}
 8001264:	bf00      	nop
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40011000 	.word	0x40011000

0800126c <SCCB_WaitAck>:


static int SCCB_WaitAck(void) 	
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
	SCL_L;
 8001270:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <SCCB_WaitAck+0x48>)
 8001272:	2240      	movs	r2, #64	; 0x40
 8001274:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8001276:	f7ff ff6b 	bl	8001150 <SCCB_delay>
	SDA_H;			
 800127a:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <SCCB_WaitAck+0x48>)
 800127c:	2280      	movs	r2, #128	; 0x80
 800127e:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8001280:	f7ff ff66 	bl	8001150 <SCCB_delay>
	SCL_H;
 8001284:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <SCCB_WaitAck+0x48>)
 8001286:	2240      	movs	r2, #64	; 0x40
 8001288:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 800128a:	f7ff ff61 	bl	8001150 <SCCB_delay>
	if(SDA_read)
 800128e:	2180      	movs	r1, #128	; 0x80
 8001290:	4808      	ldr	r0, [pc, #32]	; (80012b4 <SCCB_WaitAck+0x48>)
 8001292:	f004 fe9f 	bl	8005fd4 <HAL_GPIO_ReadPin>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d004      	beq.n	80012a6 <SCCB_WaitAck+0x3a>
	{
      SCL_L;
 800129c:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <SCCB_WaitAck+0x48>)
 800129e:	2240      	movs	r2, #64	; 0x40
 80012a0:	615a      	str	r2, [r3, #20]
      return DISABLE;
 80012a2:	2300      	movs	r3, #0
 80012a4:	e003      	b.n	80012ae <SCCB_WaitAck+0x42>
	}
	SCL_L;
 80012a6:	4b03      	ldr	r3, [pc, #12]	; (80012b4 <SCCB_WaitAck+0x48>)
 80012a8:	2240      	movs	r2, #64	; 0x40
 80012aa:	615a      	str	r2, [r3, #20]
	return ENABLE;
 80012ac:	2301      	movs	r3, #1
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40011000 	.word	0x40011000

080012b8 <SCCB_SendByte>:


static void SCCB_SendByte(uint8_t SendByte) 
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	71fb      	strb	r3, [r7, #7]
    uint8_t i=8;
 80012c2:	2308      	movs	r3, #8
 80012c4:	73fb      	strb	r3, [r7, #15]
    while(i--)
 80012c6:	e019      	b.n	80012fc <SCCB_SendByte+0x44>
    {
        SCL_L;
 80012c8:	4b12      	ldr	r3, [pc, #72]	; (8001314 <SCCB_SendByte+0x5c>)
 80012ca:	2240      	movs	r2, #64	; 0x40
 80012cc:	615a      	str	r2, [r3, #20]
        SCCB_delay();
 80012ce:	f7ff ff3f 	bl	8001150 <SCCB_delay>
      if(SendByte&0x80)
 80012d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	da03      	bge.n	80012e2 <SCCB_SendByte+0x2a>
        SDA_H;  
 80012da:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <SCCB_SendByte+0x5c>)
 80012dc:	2280      	movs	r2, #128	; 0x80
 80012de:	611a      	str	r2, [r3, #16]
 80012e0:	e002      	b.n	80012e8 <SCCB_SendByte+0x30>
      else 
        SDA_L;   
 80012e2:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <SCCB_SendByte+0x5c>)
 80012e4:	2280      	movs	r2, #128	; 0x80
 80012e6:	615a      	str	r2, [r3, #20]
        SendByte<<=1;
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	71fb      	strb	r3, [r7, #7]
        SCCB_delay();
 80012ee:	f7ff ff2f 	bl	8001150 <SCCB_delay>
		SCL_H;
 80012f2:	4b08      	ldr	r3, [pc, #32]	; (8001314 <SCCB_SendByte+0x5c>)
 80012f4:	2240      	movs	r2, #64	; 0x40
 80012f6:	611a      	str	r2, [r3, #16]
        SCCB_delay();
 80012f8:	f7ff ff2a 	bl	8001150 <SCCB_delay>
    while(i--)
 80012fc:	7bfb      	ldrb	r3, [r7, #15]
 80012fe:	1e5a      	subs	r2, r3, #1
 8001300:	73fa      	strb	r2, [r7, #15]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1e0      	bne.n	80012c8 <SCCB_SendByte+0x10>
    }
    SCL_L;
 8001306:	4b03      	ldr	r3, [pc, #12]	; (8001314 <SCCB_SendByte+0x5c>)
 8001308:	2240      	movs	r2, #64	; 0x40
 800130a:	615a      	str	r2, [r3, #20]
}
 800130c:	bf00      	nop
 800130e:	3710      	adds	r7, #16
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40011000 	.word	0x40011000

08001318 <SCCB_ReceiveByte>:


static int SCCB_ReceiveByte(void)  
{ 
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
    uint8_t i=8;
 800131e:	2308      	movs	r3, #8
 8001320:	71fb      	strb	r3, [r7, #7]
    uint8_t ReceiveByte=0;
 8001322:	2300      	movs	r3, #0
 8001324:	71bb      	strb	r3, [r7, #6]

    SDA_H;				
 8001326:	4b14      	ldr	r3, [pc, #80]	; (8001378 <SCCB_ReceiveByte+0x60>)
 8001328:	2280      	movs	r2, #128	; 0x80
 800132a:	611a      	str	r2, [r3, #16]
    while(i--)
 800132c:	e017      	b.n	800135e <SCCB_ReceiveByte+0x46>
    {
      ReceiveByte<<=1;      
 800132e:	79bb      	ldrb	r3, [r7, #6]
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	71bb      	strb	r3, [r7, #6]
      SCL_L;
 8001334:	4b10      	ldr	r3, [pc, #64]	; (8001378 <SCCB_ReceiveByte+0x60>)
 8001336:	2240      	movs	r2, #64	; 0x40
 8001338:	615a      	str	r2, [r3, #20]
      SCCB_delay();
 800133a:	f7ff ff09 	bl	8001150 <SCCB_delay>
	  SCL_H;
 800133e:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <SCCB_ReceiveByte+0x60>)
 8001340:	2240      	movs	r2, #64	; 0x40
 8001342:	611a      	str	r2, [r3, #16]
      SCCB_delay();	
 8001344:	f7ff ff04 	bl	8001150 <SCCB_delay>
      if(SDA_read)
 8001348:	2180      	movs	r1, #128	; 0x80
 800134a:	480b      	ldr	r0, [pc, #44]	; (8001378 <SCCB_ReceiveByte+0x60>)
 800134c:	f004 fe42 	bl	8005fd4 <HAL_GPIO_ReadPin>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d003      	beq.n	800135e <SCCB_ReceiveByte+0x46>
      {
        ReceiveByte|=0x01;
 8001356:	79bb      	ldrb	r3, [r7, #6]
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	71bb      	strb	r3, [r7, #6]
    while(i--)
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	1e5a      	subs	r2, r3, #1
 8001362:	71fa      	strb	r2, [r7, #7]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d1e2      	bne.n	800132e <SCCB_ReceiveByte+0x16>
      }
    }
    SCL_L;
 8001368:	4b03      	ldr	r3, [pc, #12]	; (8001378 <SCCB_ReceiveByte+0x60>)
 800136a:	2240      	movs	r2, #64	; 0x40
 800136c:	615a      	str	r2, [r3, #20]
    return ReceiveByte;
 800136e:	79bb      	ldrb	r3, [r7, #6]
}
 8001370:	4618      	mov	r0, r3
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40011000 	.word	0x40011000

0800137c <SCCB_WriteByte>:

          
int SCCB_WriteByte( uint16_t WriteAddress , uint8_t SendByte )
{		
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	460a      	mov	r2, r1
 8001386:	80fb      	strh	r3, [r7, #6]
 8001388:	4613      	mov	r3, r2
 800138a:	717b      	strb	r3, [r7, #5]
    if(!SCCB_Start())
 800138c:	f7ff fef4 	bl	8001178 <SCCB_Start>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <SCCB_WriteByte+0x1e>
	{
	    return DISABLE;
 8001396:	2300      	movs	r3, #0
 8001398:	e01b      	b.n	80013d2 <SCCB_WriteByte+0x56>
	}
    SCCB_SendByte( DEV_ADR );                
 800139a:	2042      	movs	r0, #66	; 0x42
 800139c:	f7ff ff8c 	bl	80012b8 <SCCB_SendByte>
    if( !SCCB_WaitAck() )
 80013a0:	f7ff ff64 	bl	800126c <SCCB_WaitAck>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d103      	bne.n	80013b2 <SCCB_WriteByte+0x36>
	{
		SCCB_Stop(); 
 80013aa:	f7ff ff11 	bl	80011d0 <SCCB_Stop>
		return DISABLE;
 80013ae:	2300      	movs	r3, #0
 80013b0:	e00f      	b.n	80013d2 <SCCB_WriteByte+0x56>
	}
    SCCB_SendByte((uint8_t)(WriteAddress & 0x00FF));  
 80013b2:	88fb      	ldrh	r3, [r7, #6]
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff ff7e 	bl	80012b8 <SCCB_SendByte>
    SCCB_WaitAck();	
 80013bc:	f7ff ff56 	bl	800126c <SCCB_WaitAck>
    SCCB_SendByte(SendByte);
 80013c0:	797b      	ldrb	r3, [r7, #5]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff ff78 	bl	80012b8 <SCCB_SendByte>
    SCCB_WaitAck();   
 80013c8:	f7ff ff50 	bl	800126c <SCCB_WaitAck>
    SCCB_Stop(); 
 80013cc:	f7ff ff00 	bl	80011d0 <SCCB_Stop>
    return ENABLE;
 80013d0:	2301      	movs	r3, #1
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <SCCB_ReadByte>:

          
int SCCB_ReadByte(uint8_t* pBuffer, uint16_t length, uint8_t ReadAddress)
{	
 80013da:	b580      	push	{r7, lr}
 80013dc:	b082      	sub	sp, #8
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
 80013e2:	460b      	mov	r3, r1
 80013e4:	807b      	strh	r3, [r7, #2]
 80013e6:	4613      	mov	r3, r2
 80013e8:	707b      	strb	r3, [r7, #1]
    if(!SCCB_Start())
 80013ea:	f7ff fec5 	bl	8001178 <SCCB_Start>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d101      	bne.n	80013f8 <SCCB_ReadByte+0x1e>
	{
	    return DISABLE;
 80013f4:	2300      	movs	r3, #0
 80013f6:	e040      	b.n	800147a <SCCB_ReadByte+0xa0>
	}
    SCCB_SendByte( DEV_ADR );       
 80013f8:	2042      	movs	r0, #66	; 0x42
 80013fa:	f7ff ff5d 	bl	80012b8 <SCCB_SendByte>
    if( !SCCB_WaitAck() )
 80013fe:	f7ff ff35 	bl	800126c <SCCB_WaitAck>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d103      	bne.n	8001410 <SCCB_ReadByte+0x36>
	{
		SCCB_Stop(); 
 8001408:	f7ff fee2 	bl	80011d0 <SCCB_Stop>
		return DISABLE;
 800140c:	2300      	movs	r3, #0
 800140e:	e034      	b.n	800147a <SCCB_ReadByte+0xa0>
	}
    SCCB_SendByte( ReadAddress );     
 8001410:	787b      	ldrb	r3, [r7, #1]
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff ff50 	bl	80012b8 <SCCB_SendByte>
    SCCB_WaitAck();	
 8001418:	f7ff ff28 	bl	800126c <SCCB_WaitAck>
    SCCB_Stop(); 
 800141c:	f7ff fed8 	bl	80011d0 <SCCB_Stop>
	
    if(!SCCB_Start())
 8001420:	f7ff feaa 	bl	8001178 <SCCB_Start>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d101      	bne.n	800142e <SCCB_ReadByte+0x54>
	{
		return DISABLE;
 800142a:	2300      	movs	r3, #0
 800142c:	e025      	b.n	800147a <SCCB_ReadByte+0xa0>
	}
    SCCB_SendByte( DEV_ADR + 1 );   
 800142e:	2043      	movs	r0, #67	; 0x43
 8001430:	f7ff ff42 	bl	80012b8 <SCCB_SendByte>
    if(!SCCB_WaitAck())
 8001434:	f7ff ff1a 	bl	800126c <SCCB_WaitAck>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d117      	bne.n	800146e <SCCB_ReadByte+0x94>
	{
		SCCB_Stop(); 
 800143e:	f7ff fec7 	bl	80011d0 <SCCB_Stop>
		return DISABLE;
 8001442:	2300      	movs	r3, #0
 8001444:	e019      	b.n	800147a <SCCB_ReadByte+0xa0>
	}
    while(length)
    {
      *pBuffer = SCCB_ReceiveByte();
 8001446:	f7ff ff67 	bl	8001318 <SCCB_ReceiveByte>
 800144a:	4603      	mov	r3, r0
 800144c:	b2da      	uxtb	r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	701a      	strb	r2, [r3, #0]
      if(length == 1)
 8001452:	887b      	ldrh	r3, [r7, #2]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d102      	bne.n	800145e <SCCB_ReadByte+0x84>
	  {
		  SCCB_NoAck();
 8001458:	f7ff feee 	bl	8001238 <SCCB_NoAck>
 800145c:	e001      	b.n	8001462 <SCCB_ReadByte+0x88>
	  }
      else
	  {
		SCCB_Ack(); 
 800145e:	f7ff fed1 	bl	8001204 <SCCB_Ack>
	  }
      pBuffer++;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	3301      	adds	r3, #1
 8001466:	607b      	str	r3, [r7, #4]
      length--;
 8001468:	887b      	ldrh	r3, [r7, #2]
 800146a:	3b01      	subs	r3, #1
 800146c:	807b      	strh	r3, [r7, #2]
    while(length)
 800146e:	887b      	ldrh	r3, [r7, #2]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d1e8      	bne.n	8001446 <SCCB_ReadByte+0x6c>
    }
    SCCB_Stop();
 8001474:	f7ff feac 	bl	80011d0 <SCCB_Stop>
    return ENABLE;
 8001478:	2301      	movs	r3, #1
}
 800147a:	4618      	mov	r0, r3
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
	...

08001484 <rgb2hsv>:
							 44, 43, 42, 0, 0, 0, 0, 0, 0};
uint16_t midterm_order[12] = {BLUE, RED, GREEN, ORANGE, WHITE, BLACK, BLUE, RED, GREEN, ORANGE, WHITE, BLACK};

// rgb to hsv
void rgb2hsv(uint16_t rgb, float *h, float *s, float *v)
{
 8001484:	b590      	push	{r4, r7, lr}
 8001486:	b089      	sub	sp, #36	; 0x24
 8001488:	af00      	add	r7, sp, #0
 800148a:	60b9      	str	r1, [r7, #8]
 800148c:	607a      	str	r2, [r7, #4]
 800148e:	603b      	str	r3, [r7, #0]
 8001490:	4603      	mov	r3, r0
 8001492:	81fb      	strh	r3, [r7, #14]
	uint16_t r = (rgb >> 11) & 0x1f;
 8001494:	89fb      	ldrh	r3, [r7, #14]
 8001496:	0adb      	lsrs	r3, r3, #11
 8001498:	83fb      	strh	r3, [r7, #30]
	uint16_t g = (rgb >> 5) & 0x3f;
 800149a:	89fb      	ldrh	r3, [r7, #14]
 800149c:	095b      	lsrs	r3, r3, #5
 800149e:	b29b      	uxth	r3, r3
 80014a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014a4:	83bb      	strh	r3, [r7, #28]
	uint16_t b = rgb & 0x1f;
 80014a6:	89fb      	ldrh	r3, [r7, #14]
 80014a8:	f003 031f 	and.w	r3, r3, #31
 80014ac:	837b      	strh	r3, [r7, #26]
	float max = r > g ? r : g;
 80014ae:	8bba      	ldrh	r2, [r7, #28]
 80014b0:	8bfb      	ldrh	r3, [r7, #30]
 80014b2:	4293      	cmp	r3, r2
 80014b4:	bf38      	it	cc
 80014b6:	4613      	movcc	r3, r2
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff fbe4 	bl	8000c88 <__aeabi_i2f>
 80014c0:	4603      	mov	r3, r0
 80014c2:	617b      	str	r3, [r7, #20]
	max = max > b ? max : b;
 80014c4:	8b7b      	ldrh	r3, [r7, #26]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff fbde 	bl	8000c88 <__aeabi_i2f>
 80014cc:	4603      	mov	r3, r0
 80014ce:	4619      	mov	r1, r3
 80014d0:	6978      	ldr	r0, [r7, #20]
 80014d2:	f7ff fde9 	bl	80010a8 <__aeabi_fcmpgt>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <rgb2hsv+0x5c>
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	e004      	b.n	80014ea <rgb2hsv+0x66>
 80014e0:	8b7b      	ldrh	r3, [r7, #26]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff fbd0 	bl	8000c88 <__aeabi_i2f>
 80014e8:	4603      	mov	r3, r0
 80014ea:	617b      	str	r3, [r7, #20]
	float min = r < g ? r : g;
 80014ec:	8bba      	ldrh	r2, [r7, #28]
 80014ee:	8bfb      	ldrh	r3, [r7, #30]
 80014f0:	4293      	cmp	r3, r2
 80014f2:	bf28      	it	cs
 80014f4:	4613      	movcs	r3, r2
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff fbc5 	bl	8000c88 <__aeabi_i2f>
 80014fe:	4603      	mov	r3, r0
 8001500:	613b      	str	r3, [r7, #16]
	min = min < b ? min : b;
 8001502:	8b7b      	ldrh	r3, [r7, #26]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff fbbf 	bl	8000c88 <__aeabi_i2f>
 800150a:	4603      	mov	r3, r0
 800150c:	4619      	mov	r1, r3
 800150e:	6938      	ldr	r0, [r7, #16]
 8001510:	f7ff fdac 	bl	800106c <__aeabi_fcmplt>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <rgb2hsv+0x9a>
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	e004      	b.n	8001528 <rgb2hsv+0xa4>
 800151e:	8b7b      	ldrh	r3, [r7, #26]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff fbb1 	bl	8000c88 <__aeabi_i2f>
 8001526:	4603      	mov	r3, r0
 8001528:	613b      	str	r3, [r7, #16]
	*v = max;
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	697a      	ldr	r2, [r7, #20]
 800152e:	601a      	str	r2, [r3, #0]
	if (max == 0)
 8001530:	f04f 0100 	mov.w	r1, #0
 8001534:	6978      	ldr	r0, [r7, #20]
 8001536:	f7ff fd8f 	bl	8001058 <__aeabi_fcmpeq>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d008      	beq.n	8001552 <rgb2hsv+0xce>
	{
		*s = 0;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f04f 0200 	mov.w	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
		*h = 0;
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	f04f 0200 	mov.w	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
		return;
 8001550:	e080      	b.n	8001654 <rgb2hsv+0x1d0>
	}
	*s = 255 * (max - min) / max;
 8001552:	6939      	ldr	r1, [r7, #16]
 8001554:	6978      	ldr	r0, [r7, #20]
 8001556:	f7ff fae1 	bl	8000b1c <__aeabi_fsub>
 800155a:	4603      	mov	r3, r0
 800155c:	493f      	ldr	r1, [pc, #252]	; (800165c <rgb2hsv+0x1d8>)
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff fbe6 	bl	8000d30 <__aeabi_fmul>
 8001564:	4603      	mov	r3, r0
 8001566:	6979      	ldr	r1, [r7, #20]
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff fc95 	bl	8000e98 <__aeabi_fdiv>
 800156e:	4603      	mov	r3, r0
 8001570:	461a      	mov	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	601a      	str	r2, [r3, #0]
	if (r == max)
 8001576:	8bfb      	ldrh	r3, [r7, #30]
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff fb85 	bl	8000c88 <__aeabi_i2f>
 800157e:	4603      	mov	r3, r0
 8001580:	4619      	mov	r1, r3
 8001582:	6978      	ldr	r0, [r7, #20]
 8001584:	f7ff fd68 	bl	8001058 <__aeabi_fcmpeq>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d01d      	beq.n	80015ca <rgb2hsv+0x146>
	{
		*h = 0 + 43 * (g - b) / (max - min);
 800158e:	8bba      	ldrh	r2, [r7, #28]
 8001590:	8b7b      	ldrh	r3, [r7, #26]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	222b      	movs	r2, #43	; 0x2b
 8001596:	fb02 f303 	mul.w	r3, r2, r3
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff fb74 	bl	8000c88 <__aeabi_i2f>
 80015a0:	4604      	mov	r4, r0
 80015a2:	6939      	ldr	r1, [r7, #16]
 80015a4:	6978      	ldr	r0, [r7, #20]
 80015a6:	f7ff fab9 	bl	8000b1c <__aeabi_fsub>
 80015aa:	4603      	mov	r3, r0
 80015ac:	4619      	mov	r1, r3
 80015ae:	4620      	mov	r0, r4
 80015b0:	f7ff fc72 	bl	8000e98 <__aeabi_fdiv>
 80015b4:	4603      	mov	r3, r0
 80015b6:	f04f 0100 	mov.w	r1, #0
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff fab0 	bl	8000b20 <__addsf3>
 80015c0:	4603      	mov	r3, r0
 80015c2:	461a      	mov	r2, r3
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	e044      	b.n	8001654 <rgb2hsv+0x1d0>
	}
	else if (g == max)
 80015ca:	8bbb      	ldrh	r3, [r7, #28]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff fb5b 	bl	8000c88 <__aeabi_i2f>
 80015d2:	4603      	mov	r3, r0
 80015d4:	4619      	mov	r1, r3
 80015d6:	6978      	ldr	r0, [r7, #20]
 80015d8:	f7ff fd3e 	bl	8001058 <__aeabi_fcmpeq>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d01c      	beq.n	800161c <rgb2hsv+0x198>
	{
		*h = 85 + 43 * (b - r) / (max - min);
 80015e2:	8b7a      	ldrh	r2, [r7, #26]
 80015e4:	8bfb      	ldrh	r3, [r7, #30]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	222b      	movs	r2, #43	; 0x2b
 80015ea:	fb02 f303 	mul.w	r3, r2, r3
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff fb4a 	bl	8000c88 <__aeabi_i2f>
 80015f4:	4604      	mov	r4, r0
 80015f6:	6939      	ldr	r1, [r7, #16]
 80015f8:	6978      	ldr	r0, [r7, #20]
 80015fa:	f7ff fa8f 	bl	8000b1c <__aeabi_fsub>
 80015fe:	4603      	mov	r3, r0
 8001600:	4619      	mov	r1, r3
 8001602:	4620      	mov	r0, r4
 8001604:	f7ff fc48 	bl	8000e98 <__aeabi_fdiv>
 8001608:	4603      	mov	r3, r0
 800160a:	4915      	ldr	r1, [pc, #84]	; (8001660 <rgb2hsv+0x1dc>)
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff fa87 	bl	8000b20 <__addsf3>
 8001612:	4603      	mov	r3, r0
 8001614:	461a      	mov	r2, r3
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	e01b      	b.n	8001654 <rgb2hsv+0x1d0>
	}
	else
	{
		*h = 171 + 43 * (r - g) / (max - min);
 800161c:	8bfa      	ldrh	r2, [r7, #30]
 800161e:	8bbb      	ldrh	r3, [r7, #28]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	222b      	movs	r2, #43	; 0x2b
 8001624:	fb02 f303 	mul.w	r3, r2, r3
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff fb2d 	bl	8000c88 <__aeabi_i2f>
 800162e:	4604      	mov	r4, r0
 8001630:	6939      	ldr	r1, [r7, #16]
 8001632:	6978      	ldr	r0, [r7, #20]
 8001634:	f7ff fa72 	bl	8000b1c <__aeabi_fsub>
 8001638:	4603      	mov	r3, r0
 800163a:	4619      	mov	r1, r3
 800163c:	4620      	mov	r0, r4
 800163e:	f7ff fc2b 	bl	8000e98 <__aeabi_fdiv>
 8001642:	4603      	mov	r3, r0
 8001644:	4907      	ldr	r1, [pc, #28]	; (8001664 <rgb2hsv+0x1e0>)
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff fa6a 	bl	8000b20 <__addsf3>
 800164c:	4603      	mov	r3, r0
 800164e:	461a      	mov	r2, r3
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	601a      	str	r2, [r3, #0]
	}
}
 8001654:	3724      	adds	r7, #36	; 0x24
 8001656:	46bd      	mov	sp, r7
 8001658:	bd90      	pop	{r4, r7, pc}
 800165a:	bf00      	nop
 800165c:	437f0000 	.word	0x437f0000
 8001660:	42aa0000 	.word	0x42aa0000
 8001664:	432b0000 	.word	0x432b0000

08001668 <KNearest_match>:

void KNearest_match(uint16_t square_colors[9], uint16_t real_colors[9], uint8_t times, char *face, uint8_t bt_flags)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08a      	sub	sp, #40	; 0x28
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	603b      	str	r3, [r7, #0]
 8001674:	4613      	mov	r3, r2
 8001676:	71fb      	strb	r3, [r7, #7]
	float h = 0;
 8001678:	f04f 0300 	mov.w	r3, #0
 800167c:	61fb      	str	r3, [r7, #28]
	float s = 0;
 800167e:	f04f 0300 	mov.w	r3, #0
 8001682:	61bb      	str	r3, [r7, #24]
	float v = 0;
 8001684:	f04f 0300 	mov.w	r3, #0
 8001688:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 9; i++)
 800168a:	2300      	movs	r3, #0
 800168c:	627b      	str	r3, [r7, #36]	; 0x24
 800168e:	e093      	b.n	80017b8 <KNearest_match+0x150>
	{
		uint16_t temp = square_colors[i];
 8001690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	68fa      	ldr	r2, [r7, #12]
 8001696:	4413      	add	r3, r2
 8001698:	881b      	ldrh	r3, [r3, #0]
 800169a:	843b      	strh	r3, [r7, #32]
		rgb2hsv(square_colors[i], &h, &s, &v);
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	68fa      	ldr	r2, [r7, #12]
 80016a2:	4413      	add	r3, r2
 80016a4:	8818      	ldrh	r0, [r3, #0]
 80016a6:	f107 0314 	add.w	r3, r7, #20
 80016aa:	f107 0218 	add.w	r2, r7, #24
 80016ae:	f107 011c 	add.w	r1, r7, #28
 80016b2:	f7ff fee7 	bl	8001484 <rgb2hsv>
		uint8_t index = 0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		// red
		if (s < 185 && h > 80)
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	4943      	ldr	r1, [pc, #268]	; (80017cc <KNearest_match+0x164>)
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff fcd3 	bl	800106c <__aeabi_fcmplt>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d00b      	beq.n	80016e4 <KNearest_match+0x7c>
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	4940      	ldr	r1, [pc, #256]	; (80017d0 <KNearest_match+0x168>)
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fce9 	bl	80010a8 <__aeabi_fcmpgt>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d003      	beq.n	80016e4 <KNearest_match+0x7c>
			index = 4;
 80016dc:	2304      	movs	r3, #4
 80016de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80016e2:	e042      	b.n	800176a <KNearest_match+0x102>
		else if (h < 25 || h > 336)
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	493b      	ldr	r1, [pc, #236]	; (80017d4 <KNearest_match+0x16c>)
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff fcbf 	bl	800106c <__aeabi_fcmplt>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d107      	bne.n	8001704 <KNearest_match+0x9c>
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	4938      	ldr	r1, [pc, #224]	; (80017d8 <KNearest_match+0x170>)
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff fcd5 	bl	80010a8 <__aeabi_fcmpgt>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d003      	beq.n	800170c <KNearest_match+0xa4>
			index = 1;
 8001704:	2301      	movs	r3, #1
 8001706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800170a:	e02e      	b.n	800176a <KNearest_match+0x102>
		else if (h < 55)
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	4933      	ldr	r1, [pc, #204]	; (80017dc <KNearest_match+0x174>)
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff fcab 	bl	800106c <__aeabi_fcmplt>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d003      	beq.n	8001724 <KNearest_match+0xbc>
			index = 2;
 800171c:	2302      	movs	r3, #2
 800171e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001722:	e022      	b.n	800176a <KNearest_match+0x102>
		else if (h < 85)
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	492e      	ldr	r1, [pc, #184]	; (80017e0 <KNearest_match+0x178>)
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff fc9f 	bl	800106c <__aeabi_fcmplt>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d003      	beq.n	800173c <KNearest_match+0xd4>
			index = 3;
 8001734:	2303      	movs	r3, #3
 8001736:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800173a:	e016      	b.n	800176a <KNearest_match+0x102>
		else if (h < 110)
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	4929      	ldr	r1, [pc, #164]	; (80017e4 <KNearest_match+0x17c>)
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff fc93 	bl	800106c <__aeabi_fcmplt>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d003      	beq.n	8001754 <KNearest_match+0xec>
			index = 0;
 800174c:	2300      	movs	r3, #0
 800174e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001752:	e00a      	b.n	800176a <KNearest_match+0x102>
		else if (h < 200)
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	4924      	ldr	r1, [pc, #144]	; (80017e8 <KNearest_match+0x180>)
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff fc87 	bl	800106c <__aeabi_fcmplt>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d002      	beq.n	800176a <KNearest_match+0x102>
			index = 5;
 8001764:	2305      	movs	r3, #5
 8001766:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		real_colors[i] = true_colors[index];
 800176a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800176e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	68b9      	ldr	r1, [r7, #8]
 8001774:	440b      	add	r3, r1
 8001776:	491d      	ldr	r1, [pc, #116]	; (80017ec <KNearest_match+0x184>)
 8001778:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800177c:	801a      	strh	r2, [r3, #0]
		if (bt_flags == 1)
 800177e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001782:	2b01      	cmp	r3, #1
 8001784:	d115      	bne.n	80017b2 <KNearest_match+0x14a>
		{
			if (times > 3 && i > 2)
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	2b03      	cmp	r3, #3
 800178a:	d902      	bls.n	8001792 <KNearest_match+0x12a>
 800178c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178e:	2b02      	cmp	r3, #2
 8001790:	dc17      	bgt.n	80017c2 <KNearest_match+0x15a>
				break;
			face[detection_order[times * 9 + i]] = face_colors[index];
 8001792:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8001796:	79fa      	ldrb	r2, [r7, #7]
 8001798:	4613      	mov	r3, r2
 800179a:	00db      	lsls	r3, r3, #3
 800179c:	441a      	add	r2, r3
 800179e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a0:	4413      	add	r3, r2
 80017a2:	4a13      	ldr	r2, [pc, #76]	; (80017f0 <KNearest_match+0x188>)
 80017a4:	5cd3      	ldrb	r3, [r2, r3]
 80017a6:	461a      	mov	r2, r3
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	4413      	add	r3, r2
 80017ac:	4a11      	ldr	r2, [pc, #68]	; (80017f4 <KNearest_match+0x18c>)
 80017ae:	5c52      	ldrb	r2, [r2, r1]
 80017b0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 9; i++)
 80017b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b4:	3301      	adds	r3, #1
 80017b6:	627b      	str	r3, [r7, #36]	; 0x24
 80017b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ba:	2b08      	cmp	r3, #8
 80017bc:	f77f af68 	ble.w	8001690 <KNearest_match+0x28>
		}
	}
}
 80017c0:	e000      	b.n	80017c4 <KNearest_match+0x15c>
				break;
 80017c2:	bf00      	nop
}
 80017c4:	bf00      	nop
 80017c6:	3728      	adds	r7, #40	; 0x28
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	43390000 	.word	0x43390000
 80017d0:	42a00000 	.word	0x42a00000
 80017d4:	41c80000 	.word	0x41c80000
 80017d8:	43a80000 	.word	0x43a80000
 80017dc:	425c0000 	.word	0x425c0000
 80017e0:	42aa0000 	.word	0x42aa0000
 80017e4:	42dc0000 	.word	0x42dc0000
 80017e8:	43480000 	.word	0x43480000
 80017ec:	2000009c 	.word	0x2000009c
 80017f0:	200000b0 	.word	0x200000b0
 80017f4:	200000a8 	.word	0x200000a8

080017f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017fe:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <MX_DMA_Init+0x38>)
 8001800:	695b      	ldr	r3, [r3, #20]
 8001802:	4a0b      	ldr	r2, [pc, #44]	; (8001830 <MX_DMA_Init+0x38>)
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	6153      	str	r3, [r2, #20]
 800180a:	4b09      	ldr	r3, [pc, #36]	; (8001830 <MX_DMA_Init+0x38>)
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	607b      	str	r3, [r7, #4]
 8001814:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001816:	2200      	movs	r2, #0
 8001818:	2100      	movs	r1, #0
 800181a:	200e      	movs	r0, #14
 800181c:	f003 fe25 	bl	800546a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001820:	200e      	movs	r0, #14
 8001822:	f003 fe3e 	bl	80054a2 <HAL_NVIC_EnableIRQ>

}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40021000 	.word	0x40021000

08001834 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b088      	sub	sp, #32
 8001838:	af00      	add	r7, sp, #0
  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800183a:	1d3b      	adds	r3, r7, #4
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]
 8001848:	615a      	str	r2, [r3, #20]
 800184a:	619a      	str	r2, [r3, #24]

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800184c:	4b28      	ldr	r3, [pc, #160]	; (80018f0 <MX_FSMC_Init+0xbc>)
 800184e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001852:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001854:	4b26      	ldr	r3, [pc, #152]	; (80018f0 <MX_FSMC_Init+0xbc>)
 8001856:	4a27      	ldr	r2, [pc, #156]	; (80018f4 <MX_FSMC_Init+0xc0>)
 8001858:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800185a:	4b25      	ldr	r3, [pc, #148]	; (80018f0 <MX_FSMC_Init+0xbc>)
 800185c:	2200      	movs	r2, #0
 800185e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001860:	4b23      	ldr	r3, [pc, #140]	; (80018f0 <MX_FSMC_Init+0xbc>)
 8001862:	2200      	movs	r2, #0
 8001864:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001866:	4b22      	ldr	r3, [pc, #136]	; (80018f0 <MX_FSMC_Init+0xbc>)
 8001868:	2200      	movs	r2, #0
 800186a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800186c:	4b20      	ldr	r3, [pc, #128]	; (80018f0 <MX_FSMC_Init+0xbc>)
 800186e:	2210      	movs	r2, #16
 8001870:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001872:	4b1f      	ldr	r3, [pc, #124]	; (80018f0 <MX_FSMC_Init+0xbc>)
 8001874:	2200      	movs	r2, #0
 8001876:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001878:	4b1d      	ldr	r3, [pc, #116]	; (80018f0 <MX_FSMC_Init+0xbc>)
 800187a:	2200      	movs	r2, #0
 800187c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800187e:	4b1c      	ldr	r3, [pc, #112]	; (80018f0 <MX_FSMC_Init+0xbc>)
 8001880:	2200      	movs	r2, #0
 8001882:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001884:	4b1a      	ldr	r3, [pc, #104]	; (80018f0 <MX_FSMC_Init+0xbc>)
 8001886:	2200      	movs	r2, #0
 8001888:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800188a:	4b19      	ldr	r3, [pc, #100]	; (80018f0 <MX_FSMC_Init+0xbc>)
 800188c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001890:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001892:	4b17      	ldr	r3, [pc, #92]	; (80018f0 <MX_FSMC_Init+0xbc>)
 8001894:	2200      	movs	r2, #0
 8001896:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001898:	4b15      	ldr	r3, [pc, #84]	; (80018f0 <MX_FSMC_Init+0xbc>)
 800189a:	2200      	movs	r2, #0
 800189c:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800189e:	4b14      	ldr	r3, [pc, #80]	; (80018f0 <MX_FSMC_Init+0xbc>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80018a4:	4b12      	ldr	r3, [pc, #72]	; (80018f0 <MX_FSMC_Init+0xbc>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 80018aa:	230f      	movs	r3, #15
 80018ac:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80018ae:	230f      	movs	r3, #15
 80018b0:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80018b2:	23ff      	movs	r3, #255	; 0xff
 80018b4:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80018b6:	230f      	movs	r3, #15
 80018b8:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80018ba:	2310      	movs	r3, #16
 80018bc:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80018be:	2311      	movs	r3, #17
 80018c0:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80018c2:	2300      	movs	r3, #0
 80018c4:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80018c6:	1d3b      	adds	r3, r7, #4
 80018c8:	2200      	movs	r2, #0
 80018ca:	4619      	mov	r1, r3
 80018cc:	4808      	ldr	r0, [pc, #32]	; (80018f0 <MX_FSMC_Init+0xbc>)
 80018ce:	f005 f803 	bl	80068d8 <HAL_SRAM_Init>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 80018d8:	f001 fbb1 	bl	800303e <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 80018dc:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <MX_FSMC_Init+0xc4>)
 80018de:	69db      	ldr	r3, [r3, #28]
 80018e0:	4a05      	ldr	r2, [pc, #20]	; (80018f8 <MX_FSMC_Init+0xc4>)
 80018e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018e6:	61d3      	str	r3, [r2, #28]

}
 80018e8:	bf00      	nop
 80018ea:	3720      	adds	r7, #32
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	20000260 	.word	0x20000260
 80018f4:	a0000104 	.word	0xa0000104
 80018f8:	40010000 	.word	0x40010000

080018fc <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001902:	f107 0308 	add.w	r3, r7, #8
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	605a      	str	r2, [r3, #4]
 800190c:	609a      	str	r2, [r3, #8]
 800190e:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8001910:	4b18      	ldr	r3, [pc, #96]	; (8001974 <HAL_FSMC_MspInit+0x78>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d129      	bne.n	800196c <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8001918:	4b16      	ldr	r3, [pc, #88]	; (8001974 <HAL_FSMC_MspInit+0x78>)
 800191a:	2201      	movs	r2, #1
 800191c:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800191e:	4b16      	ldr	r3, [pc, #88]	; (8001978 <HAL_FSMC_MspInit+0x7c>)
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	4a15      	ldr	r2, [pc, #84]	; (8001978 <HAL_FSMC_MspInit+0x7c>)
 8001924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001928:	6153      	str	r3, [r2, #20]
 800192a:	4b13      	ldr	r3, [pc, #76]	; (8001978 <HAL_FSMC_MspInit+0x7c>)
 800192c:	695b      	ldr	r3, [r3, #20]
 800192e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001932:	607b      	str	r3, [r7, #4]
 8001934:	687b      	ldr	r3, [r7, #4]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001936:	f64f 7380 	movw	r3, #65408	; 0xff80
 800193a:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193c:	2302      	movs	r3, #2
 800193e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001940:	2303      	movs	r3, #3
 8001942:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001944:	f107 0308 	add.w	r3, r7, #8
 8001948:	4619      	mov	r1, r3
 800194a:	480c      	ldr	r0, [pc, #48]	; (800197c <HAL_FSMC_MspInit+0x80>)
 800194c:	f004 f9aa 	bl	8005ca4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001950:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8001954:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001956:	2302      	movs	r3, #2
 8001958:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800195a:	2303      	movs	r3, #3
 800195c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800195e:	f107 0308 	add.w	r3, r7, #8
 8001962:	4619      	mov	r1, r3
 8001964:	4806      	ldr	r0, [pc, #24]	; (8001980 <HAL_FSMC_MspInit+0x84>)
 8001966:	f004 f99d 	bl	8005ca4 <HAL_GPIO_Init>
 800196a:	e000      	b.n	800196e <HAL_FSMC_MspInit+0x72>
    return;
 800196c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800196e:	3718      	adds	r7, #24
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	200002a4 	.word	0x200002a4
 8001978:	40021000 	.word	0x40021000
 800197c:	40011800 	.word	0x40011800
 8001980:	40011400 	.word	0x40011400

08001984 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800198c:	f7ff ffb6 	bl	80018fc <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001990:	bf00      	nop
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08a      	sub	sp, #40	; 0x28
 800199c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199e:	f107 0318 	add.w	r3, r7, #24
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	605a      	str	r2, [r3, #4]
 80019a8:	609a      	str	r2, [r3, #8]
 80019aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019ac:	4b86      	ldr	r3, [pc, #536]	; (8001bc8 <MX_GPIO_Init+0x230>)
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	4a85      	ldr	r2, [pc, #532]	; (8001bc8 <MX_GPIO_Init+0x230>)
 80019b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019b6:	6193      	str	r3, [r2, #24]
 80019b8:	4b83      	ldr	r3, [pc, #524]	; (8001bc8 <MX_GPIO_Init+0x230>)
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019c0:	617b      	str	r3, [r7, #20]
 80019c2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019c4:	4b80      	ldr	r3, [pc, #512]	; (8001bc8 <MX_GPIO_Init+0x230>)
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	4a7f      	ldr	r2, [pc, #508]	; (8001bc8 <MX_GPIO_Init+0x230>)
 80019ca:	f043 0310 	orr.w	r3, r3, #16
 80019ce:	6193      	str	r3, [r2, #24]
 80019d0:	4b7d      	ldr	r3, [pc, #500]	; (8001bc8 <MX_GPIO_Init+0x230>)
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	f003 0310 	and.w	r3, r3, #16
 80019d8:	613b      	str	r3, [r7, #16]
 80019da:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019dc:	4b7a      	ldr	r3, [pc, #488]	; (8001bc8 <MX_GPIO_Init+0x230>)
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	4a79      	ldr	r2, [pc, #484]	; (8001bc8 <MX_GPIO_Init+0x230>)
 80019e2:	f043 0304 	orr.w	r3, r3, #4
 80019e6:	6193      	str	r3, [r2, #24]
 80019e8:	4b77      	ldr	r3, [pc, #476]	; (8001bc8 <MX_GPIO_Init+0x230>)
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	f003 0304 	and.w	r3, r3, #4
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f4:	4b74      	ldr	r3, [pc, #464]	; (8001bc8 <MX_GPIO_Init+0x230>)
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	4a73      	ldr	r2, [pc, #460]	; (8001bc8 <MX_GPIO_Init+0x230>)
 80019fa:	f043 0308 	orr.w	r3, r3, #8
 80019fe:	6193      	str	r3, [r2, #24]
 8001a00:	4b71      	ldr	r3, [pc, #452]	; (8001bc8 <MX_GPIO_Init+0x230>)
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	f003 0308 	and.w	r3, r3, #8
 8001a08:	60bb      	str	r3, [r7, #8]
 8001a0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a0c:	4b6e      	ldr	r3, [pc, #440]	; (8001bc8 <MX_GPIO_Init+0x230>)
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	4a6d      	ldr	r2, [pc, #436]	; (8001bc8 <MX_GPIO_Init+0x230>)
 8001a12:	f043 0320 	orr.w	r3, r3, #32
 8001a16:	6193      	str	r3, [r2, #24]
 8001a18:	4b6b      	ldr	r3, [pc, #428]	; (8001bc8 <MX_GPIO_Init+0x230>)
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	f003 0320 	and.w	r3, r3, #32
 8001a20:	607b      	str	r3, [r7, #4]
 8001a22:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001a24:	2200      	movs	r2, #0
 8001a26:	2107      	movs	r1, #7
 8001a28:	4868      	ldr	r0, [pc, #416]	; (8001bcc <MX_GPIO_Init+0x234>)
 8001a2a:	f004 faea 	bl	8006002 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8, GPIO_PIN_RESET);
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8001a34:	4866      	ldr	r0, [pc, #408]	; (8001bd0 <MX_GPIO_Init+0x238>)
 8001a36:	f004 fae4 	bl	8006002 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	21f0      	movs	r1, #240	; 0xf0
 8001a3e:	4865      	ldr	r0, [pc, #404]	; (8001bd4 <MX_GPIO_Init+0x23c>)
 8001a40:	f004 fadf 	bl	8006002 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_3, GPIO_PIN_RESET);
 8001a44:	2200      	movs	r2, #0
 8001a46:	f241 0108 	movw	r1, #4104	; 0x1008
 8001a4a:	4863      	ldr	r0, [pc, #396]	; (8001bd8 <MX_GPIO_Init+0x240>)
 8001a4c:	f004 fad9 	bl	8006002 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_0;
 8001a50:	2305      	movs	r3, #5
 8001a52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a54:	2301      	movs	r3, #1
 8001a56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a60:	f107 0318 	add.w	r3, r7, #24
 8001a64:	4619      	mov	r1, r3
 8001a66:	4859      	ldr	r0, [pc, #356]	; (8001bcc <MX_GPIO_Init+0x234>)
 8001a68:	f004 f91c 	bl	8005ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a6c:	2308      	movs	r3, #8
 8001a6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a70:	2300      	movs	r3, #0
 8001a72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a78:	f107 0318 	add.w	r3, r7, #24
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4853      	ldr	r0, [pc, #332]	; (8001bcc <MX_GPIO_Init+0x234>)
 8001a80:	f004 f910 	bl	8005ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a84:	2310      	movs	r3, #16
 8001a86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a88:	4b54      	ldr	r3, [pc, #336]	; (8001bdc <MX_GPIO_Init+0x244>)
 8001a8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a90:	f107 0318 	add.w	r3, r7, #24
 8001a94:	4619      	mov	r1, r3
 8001a96:	484d      	ldr	r0, [pc, #308]	; (8001bcc <MX_GPIO_Init+0x234>)
 8001a98:	f004 f904 	bl	8005ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001a9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001aa2:	4b4e      	ldr	r3, [pc, #312]	; (8001bdc <MX_GPIO_Init+0x244>)
 8001aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aaa:	f107 0318 	add.w	r3, r7, #24
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4848      	ldr	r0, [pc, #288]	; (8001bd4 <MX_GPIO_Init+0x23c>)
 8001ab2:	f004 f8f7 	bl	8005ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ab6:	2308      	movs	r3, #8
 8001ab8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001aba:	4b49      	ldr	r3, [pc, #292]	; (8001be0 <MX_GPIO_Init+0x248>)
 8001abc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ac2:	f107 0318 	add.w	r3, r7, #24
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4842      	ldr	r0, [pc, #264]	; (8001bd4 <MX_GPIO_Init+0x23c>)
 8001aca:	f004 f8eb 	bl	8005ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = START_BT_Pin;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ad2:	4b42      	ldr	r3, [pc, #264]	; (8001bdc <MX_GPIO_Init+0x244>)
 8001ad4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(START_BT_GPIO_Port, &GPIO_InitStruct);
 8001ada:	f107 0318 	add.w	r3, r7, #24
 8001ade:	4619      	mov	r1, r3
 8001ae0:	483b      	ldr	r0, [pc, #236]	; (8001bd0 <MX_GPIO_Init+0x238>)
 8001ae2:	f004 f8df 	bl	8005ca4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8;
 8001ae6:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8001aea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aec:	2301      	movs	r3, #1
 8001aee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af0:	2300      	movs	r3, #0
 8001af2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001af4:	2303      	movs	r3, #3
 8001af6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af8:	f107 0318 	add.w	r3, r7, #24
 8001afc:	4619      	mov	r1, r3
 8001afe:	4834      	ldr	r0, [pc, #208]	; (8001bd0 <MX_GPIO_Init+0x238>)
 8001b00:	f004 f8d0 	bl	8005ca4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001b04:	2330      	movs	r3, #48	; 0x30
 8001b06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b10:	2303      	movs	r3, #3
 8001b12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b14:	f107 0318 	add.w	r3, r7, #24
 8001b18:	4619      	mov	r1, r3
 8001b1a:	482e      	ldr	r0, [pc, #184]	; (8001bd4 <MX_GPIO_Init+0x23c>)
 8001b1c:	f004 f8c2 	bl	8005ca4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001b20:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001b24:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b26:	2300      	movs	r3, #0
 8001b28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b2e:	f107 0318 	add.w	r3, r7, #24
 8001b32:	4619      	mov	r1, r3
 8001b34:	482b      	ldr	r0, [pc, #172]	; (8001be4 <MX_GPIO_Init+0x24c>)
 8001b36:	f004 f8b5 	bl	8005ca4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_3;
 8001b3a:	f241 0308 	movw	r3, #4104	; 0x1008
 8001b3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b40:	2301      	movs	r3, #1
 8001b42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b4c:	f107 0318 	add.w	r3, r7, #24
 8001b50:	4619      	mov	r1, r3
 8001b52:	4821      	ldr	r0, [pc, #132]	; (8001bd8 <MX_GPIO_Init+0x240>)
 8001b54:	f004 f8a6 	bl	8005ca4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b58:	23c0      	movs	r3, #192	; 0xc0
 8001b5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001b5c:	2311      	movs	r3, #17
 8001b5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b64:	2303      	movs	r3, #3
 8001b66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b68:	f107 0318 	add.w	r3, r7, #24
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4819      	ldr	r0, [pc, #100]	; (8001bd4 <MX_GPIO_Init+0x23c>)
 8001b70:	f004 f898 	bl	8005ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001b74:	2302      	movs	r3, #2
 8001b76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b80:	2303      	movs	r3, #3
 8001b82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b84:	f107 0318 	add.w	r3, r7, #24
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4810      	ldr	r0, [pc, #64]	; (8001bcc <MX_GPIO_Init+0x234>)
 8001b8c:	f004 f88a 	bl	8005ca4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001b90:	2200      	movs	r2, #0
 8001b92:	2100      	movs	r1, #0
 8001b94:	2006      	movs	r0, #6
 8001b96:	f003 fc68 	bl	800546a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001b9a:	2006      	movs	r0, #6
 8001b9c:	f003 fc81 	bl	80054a2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	2009      	movs	r0, #9
 8001ba6:	f003 fc60 	bl	800546a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001baa:	2009      	movs	r0, #9
 8001bac:	f003 fc79 	bl	80054a2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	200a      	movs	r0, #10
 8001bb6:	f003 fc58 	bl	800546a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001bba:	200a      	movs	r0, #10
 8001bbc:	f003 fc71 	bl	80054a2 <HAL_NVIC_EnableIRQ>

}
 8001bc0:	bf00      	nop
 8001bc2:	3728      	adds	r7, #40	; 0x28
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	40011800 	.word	0x40011800
 8001bd0:	40010800 	.word	0x40010800
 8001bd4:	40011000 	.word	0x40011000
 8001bd8:	40011400 	.word	0x40011400
 8001bdc:	10110000 	.word	0x10110000
 8001be0:	10210000 	.word	0x10210000
 8001be4:	40010c00 	.word	0x40010c00

08001be8 <Delay>:
void LCD_REG_Config(void);
void LCD_FillColor(uint32_t ulAmout_Point, uint16_t usColor);
uint16_t LCD_Read_PixelData(void);

void Delay(__IO uint32_t nCount)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
	for (; nCount != 0; nCount--)
 8001bf0:	e002      	b.n	8001bf8 <Delay+0x10>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	607b      	str	r3, [r7, #4]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1f9      	bne.n	8001bf2 <Delay+0xa>
		;
}
 8001bfe:	bf00      	nop
 8001c00:	bf00      	nop
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bc80      	pop	{r7}
 8001c08:	4770      	bx	lr

08001c0a <LCD_INIT>:

void LCD_INIT(void)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b082      	sub	sp, #8
 8001c0e:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);
 8001c10:	2001      	movs	r0, #1
 8001c12:	f000 f829 	bl	8001c68 <LCD_BackLed_Control>
	LCD_Rst();
 8001c16:	f000 f80f 	bl	8001c38 <LCD_Rst>
	LCD_REG_Config();
 8001c1a:	f000 f85f 	bl	8001cdc <LCD_REG_Config>
	LCD_Clear(0, 0, 240, 320, BACKGROUND);
 8001c1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c22:	9300      	str	r3, [sp, #0]
 8001c24:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001c28:	22f0      	movs	r2, #240	; 0xf0
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	2000      	movs	r0, #0
 8001c2e:	f000 f9e6 	bl	8001ffe <LCD_Clear>
}
 8001c32:	bf00      	nop
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <LCD_Rst>:

void LCD_Rst(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	2102      	movs	r1, #2
 8001c40:	4807      	ldr	r0, [pc, #28]	; (8001c60 <LCD_Rst+0x28>)
 8001c42:	f004 f9de 	bl	8006002 <HAL_GPIO_WritePin>
	Delay(0xAFFf << 2);
 8001c46:	4807      	ldr	r0, [pc, #28]	; (8001c64 <LCD_Rst+0x2c>)
 8001c48:	f7ff ffce 	bl	8001be8 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	2102      	movs	r1, #2
 8001c50:	4803      	ldr	r0, [pc, #12]	; (8001c60 <LCD_Rst+0x28>)
 8001c52:	f004 f9d6 	bl	8006002 <HAL_GPIO_WritePin>
	Delay(0xAFFf << 2);
 8001c56:	4803      	ldr	r0, [pc, #12]	; (8001c64 <LCD_Rst+0x2c>)
 8001c58:	f7ff ffc6 	bl	8001be8 <Delay>
}
 8001c5c:	bf00      	nop
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40011800 	.word	0x40011800
 8001c64:	0002bffc 	.word	0x0002bffc

08001c68 <LCD_BackLed_Control>:

void LCD_BackLed_Control(FunctionalState enumState)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	71fb      	strb	r3, [r7, #7]
	if (enumState)
 8001c72:	79fb      	ldrb	r3, [r7, #7]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d006      	beq.n	8001c86 <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT, LCD_BK_PIN, GPIO_PIN_RESET);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c7e:	4807      	ldr	r0, [pc, #28]	; (8001c9c <LCD_BackLed_Control+0x34>)
 8001c80:	f004 f9bf 	bl	8006002 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT, LCD_BK_PIN, GPIO_PIN_SET);
}
 8001c84:	e005      	b.n	8001c92 <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT, LCD_BK_PIN, GPIO_PIN_SET);
 8001c86:	2201      	movs	r2, #1
 8001c88:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c8c:	4803      	ldr	r0, [pc, #12]	; (8001c9c <LCD_BackLed_Control+0x34>)
 8001c8e:	f004 f9b8 	bl	8006002 <HAL_GPIO_WritePin>
}
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40011400 	.word	0x40011400

08001ca0 <LCD_Write_Cmd>:

void LCD_Write_Cmd(uint16_t usCmd)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	80fb      	strh	r3, [r7, #6]
	*(__IO uint16_t *)(FSMC_Addr_LCD_CMD) = usCmd;
 8001caa:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001cae:	88fb      	ldrh	r3, [r7, #6]
 8001cb0:	8013      	strh	r3, [r2, #0]
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bc80      	pop	{r7}
 8001cba:	4770      	bx	lr

08001cbc <LCD_Write_Data>:

void LCD_Write_Data(uint16_t usData)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	80fb      	strh	r3, [r7, #6]
	*(__IO uint16_t *)(FSMC_Addr_LCD_DATA) = usData;
 8001cc6:	4a04      	ldr	r2, [pc, #16]	; (8001cd8 <LCD_Write_Data+0x1c>)
 8001cc8:	88fb      	ldrh	r3, [r7, #6]
 8001cca:	8013      	strh	r3, [r2, #0]
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bc80      	pop	{r7}
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	60020000 	.word	0x60020000

08001cdc <LCD_REG_Config>:
{
	return (*(__IO uint16_t *)(FSMC_Addr_LCD_DATA));
}

void LCD_REG_Config(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY();
	LCD_Write_Cmd(0xCF);
 8001ce0:	20cf      	movs	r0, #207	; 0xcf
 8001ce2:	f7ff ffdd 	bl	8001ca0 <LCD_Write_Cmd>
	LCD_Write_Data(0x00);
 8001ce6:	2000      	movs	r0, #0
 8001ce8:	f7ff ffe8 	bl	8001cbc <LCD_Write_Data>
	LCD_Write_Data(0x81);
 8001cec:	2081      	movs	r0, #129	; 0x81
 8001cee:	f7ff ffe5 	bl	8001cbc <LCD_Write_Data>
	LCD_Write_Data(0x30);
 8001cf2:	2030      	movs	r0, #48	; 0x30
 8001cf4:	f7ff ffe2 	bl	8001cbc <LCD_Write_Data>

	/*  Power on sequence control (EDh) */
	DEBUG_DELAY();
	LCD_Write_Cmd(0xED);
 8001cf8:	20ed      	movs	r0, #237	; 0xed
 8001cfa:	f7ff ffd1 	bl	8001ca0 <LCD_Write_Cmd>
	LCD_Write_Data(0x64);
 8001cfe:	2064      	movs	r0, #100	; 0x64
 8001d00:	f7ff ffdc 	bl	8001cbc <LCD_Write_Data>
	LCD_Write_Data(0x03);
 8001d04:	2003      	movs	r0, #3
 8001d06:	f7ff ffd9 	bl	8001cbc <LCD_Write_Data>
	LCD_Write_Data(0x12);
 8001d0a:	2012      	movs	r0, #18
 8001d0c:	f7ff ffd6 	bl	8001cbc <LCD_Write_Data>
	LCD_Write_Data(0x81);
 8001d10:	2081      	movs	r0, #129	; 0x81
 8001d12:	f7ff ffd3 	bl	8001cbc <LCD_Write_Data>

	/*  Driver timing control A (E8h) */
	DEBUG_DELAY();
	LCD_Write_Cmd(0xE8);
 8001d16:	20e8      	movs	r0, #232	; 0xe8
 8001d18:	f7ff ffc2 	bl	8001ca0 <LCD_Write_Cmd>
	LCD_Write_Data(0x85);
 8001d1c:	2085      	movs	r0, #133	; 0x85
 8001d1e:	f7ff ffcd 	bl	8001cbc <LCD_Write_Data>
	LCD_Write_Data(0x10);
 8001d22:	2010      	movs	r0, #16
 8001d24:	f7ff ffca 	bl	8001cbc <LCD_Write_Data>
	LCD_Write_Data(0x78);
 8001d28:	2078      	movs	r0, #120	; 0x78
 8001d2a:	f7ff ffc7 	bl	8001cbc <LCD_Write_Data>

	/*  Power control A (CBh) */
	DEBUG_DELAY();
	LCD_Write_Cmd(0xCB);
 8001d2e:	20cb      	movs	r0, #203	; 0xcb
 8001d30:	f7ff ffb6 	bl	8001ca0 <LCD_Write_Cmd>
	LCD_Write_Data(0x39);
 8001d34:	2039      	movs	r0, #57	; 0x39
 8001d36:	f7ff ffc1 	bl	8001cbc <LCD_Write_Data>
	LCD_Write_Data(0x2C);
 8001d3a:	202c      	movs	r0, #44	; 0x2c
 8001d3c:	f7ff ffbe 	bl	8001cbc <LCD_Write_Data>
	LCD_Write_Data(0x00);
 8001d40:	2000      	movs	r0, #0
 8001d42:	f7ff ffbb 	bl	8001cbc <LCD_Write_Data>
	LCD_Write_Data(0x34);
 8001d46:	2034      	movs	r0, #52	; 0x34
 8001d48:	f7ff ffb8 	bl	8001cbc <LCD_Write_Data>
	LCD_Write_Data(0x02);
 8001d4c:	2002      	movs	r0, #2
 8001d4e:	f7ff ffb5 	bl	8001cbc <LCD_Write_Data>

	/* Pump ratio control (F7h) */
	DEBUG_DELAY();
	LCD_Write_Cmd(0xF7);
 8001d52:	20f7      	movs	r0, #247	; 0xf7
 8001d54:	f7ff ffa4 	bl	8001ca0 <LCD_Write_Cmd>
	LCD_Write_Data(0x20);
 8001d58:	2020      	movs	r0, #32
 8001d5a:	f7ff ffaf 	bl	8001cbc <LCD_Write_Data>

	/* Driver timing control B */
	DEBUG_DELAY();
	LCD_Write_Cmd(0xEA);
 8001d5e:	20ea      	movs	r0, #234	; 0xea
 8001d60:	f7ff ff9e 	bl	8001ca0 <LCD_Write_Cmd>
	LCD_Write_Data(0x00);
 8001d64:	2000      	movs	r0, #0
 8001d66:	f7ff ffa9 	bl	8001cbc <LCD_Write_Data>
	LCD_Write_Data(0x00);
 8001d6a:	2000      	movs	r0, #0
 8001d6c:	f7ff ffa6 	bl	8001cbc <LCD_Write_Data>

	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY();
	LCD_Write_Cmd(0xB1);
 8001d70:	20b1      	movs	r0, #177	; 0xb1
 8001d72:	f7ff ff95 	bl	8001ca0 <LCD_Write_Cmd>
	LCD_Write_Data(0x00);
 8001d76:	2000      	movs	r0, #0
 8001d78:	f7ff ffa0 	bl	8001cbc <LCD_Write_Data>
	LCD_Write_Data(0x1B);
 8001d7c:	201b      	movs	r0, #27
 8001d7e:	f7ff ff9d 	bl	8001cbc <LCD_Write_Data>

	/*  Display Function Control (B6h) */
	DEBUG_DELAY();
	LCD_Write_Cmd(0xB6);
 8001d82:	20b6      	movs	r0, #182	; 0xb6
 8001d84:	f7ff ff8c 	bl	8001ca0 <LCD_Write_Cmd>
	LCD_Write_Data(0x0A);
 8001d88:	200a      	movs	r0, #10
 8001d8a:	f7ff ff97 	bl	8001cbc <LCD_Write_Data>
	LCD_Write_Data(0xA2);
 8001d8e:	20a2      	movs	r0, #162	; 0xa2
 8001d90:	f7ff ff94 	bl	8001cbc <LCD_Write_Data>

	/* Power Control 1 (C0h) */
	DEBUG_DELAY();
	LCD_Write_Cmd(0xC0);
 8001d94:	20c0      	movs	r0, #192	; 0xc0
 8001d96:	f7ff ff83 	bl	8001ca0 <LCD_Write_Cmd>
	LCD_Write_Data(0x35);
 8001d9a:	2035      	movs	r0, #53	; 0x35
 8001d9c:	f7ff ff8e 	bl	8001cbc <LCD_Write_Data>

	/* Power Control 2 (C1h) */
	DEBUG_DELAY();
	LCD_Write_Cmd(0xC1);
 8001da0:	20c1      	movs	r0, #193	; 0xc1
 8001da2:	f7ff ff7d 	bl	8001ca0 <LCD_Write_Cmd>
	LCD_Write_Data(0x11);
 8001da6:	2011      	movs	r0, #17
 8001da8:	f7ff ff88 	bl	8001cbc <LCD_Write_Data>

	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd(0xC5);
 8001dac:	20c5      	movs	r0, #197	; 0xc5
 8001dae:	f7ff ff77 	bl	8001ca0 <LCD_Write_Cmd>
	LCD_Write_Data(0x45);
 8001db2:	2045      	movs	r0, #69	; 0x45
 8001db4:	f7ff ff82 	bl	8001cbc <LCD_Write_Data>
	LCD_Write_Data(0x45);
 8001db8:	2045      	movs	r0, #69	; 0x45
 8001dba:	f7ff ff7f 	bl	8001cbc <LCD_Write_Data>

	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd(0xC7);
 8001dbe:	20c7      	movs	r0, #199	; 0xc7
 8001dc0:	f7ff ff6e 	bl	8001ca0 <LCD_Write_Cmd>
	LCD_Write_Data(0xA2);
 8001dc4:	20a2      	movs	r0, #162	; 0xa2
 8001dc6:	f7ff ff79 	bl	8001cbc <LCD_Write_Data>

	/* Enable 3G (F2h) */
	LCD_Write_Cmd(0xF2);
 8001dca:	20f2      	movs	r0, #242	; 0xf2
 8001dcc:	f7ff ff68 	bl	8001ca0 <LCD_Write_Cmd>
	LCD_Write_Data(0x00);
 8001dd0:	2000      	movs	r0, #0
 8001dd2:	f7ff ff73 	bl	8001cbc <LCD_Write_Data>

	/* Gamma Set (26h) */
	LCD_Write_Cmd(0x26);
 8001dd6:	2026      	movs	r0, #38	; 0x26
 8001dd8:	f7ff ff62 	bl	8001ca0 <LCD_Write_Cmd>
	LCD_Write_Data(0x01);
 8001ddc:	2001      	movs	r0, #1
 8001dde:	f7ff ff6d 	bl	8001cbc <LCD_Write_Data>
	DEBUG_DELAY();

	/* Positive Gamma Correction */
	LCD_Write_Cmd(0xE0); // Set Gamma
 8001de2:	20e0      	movs	r0, #224	; 0xe0
 8001de4:	f7ff ff5c 	bl	8001ca0 <LCD_Write_Cmd>
	LCD_Write_Data(0x0F);
 8001de8:	200f      	movs	r0, #15
 8001dea:	f7ff ff67 	bl	8001cbc <LCD_Write_Data>
	LCD_Write_Data(0x26);
 8001dee:	2026      	movs	r0, #38	; 0x26
 8001df0:	f7ff ff64 	bl	8001cbc <LCD_Write_Data>
	LCD_Write_Data(0x24);
 8001df4:	2024      	movs	r0, #36	; 0x24
 8001df6:	f7ff ff61 	bl	8001cbc <LCD_Write_Data>
	LCD_Write_Data(0x0B);
 8001dfa:	200b      	movs	r0, #11
 8001dfc:	f7ff ff5e 	bl	8001cbc <LCD_Write_Data>
	LCD_Write_Data(0x0E);
 8001e00:	200e      	movs	r0, #14
 8001e02:	f7ff ff5b 	bl	8001cbc <LCD_Write_Data>
	LCD_Write_Data(0x09);
 8001e06:	2009      	movs	r0, #9
 8001e08:	f7ff ff58 	bl	8001cbc <LCD_Write_Data>
	LCD_Write_Data(0x54);
 8001e0c:	2054      	movs	r0, #84	; 0x54
 8001e0e:	f7ff ff55 	bl	8001cbc <LCD_Write_Data>
	LCD_Write_Data(0xA8);
 8001e12:	20a8      	movs	r0, #168	; 0xa8
 8001e14:	f7ff ff52 	bl	8001cbc <LCD_Write_Data>
	LCD_Write_Data(0x46);
 8001e18:	2046      	movs	r0, #70	; 0x46
 8001e1a:	f7ff ff4f 	bl	8001cbc <LCD_Write_Data>
	LCD_Write_Data(0x0C);
 8001e1e:	200c      	movs	r0, #12
 8001e20:	f7ff ff4c 	bl	8001cbc <LCD_Write_Data>
	LCD_Write_Data(0x17);
 8001e24:	2017      	movs	r0, #23
 8001e26:	f7ff ff49 	bl	8001cbc <LCD_Write_Data>
	LCD_Write_Data(0x09);
 8001e2a:	2009      	movs	r0, #9
 8001e2c:	f7ff ff46 	bl	8001cbc <LCD_Write_Data>
	LCD_Write_Data(0x0F);
 8001e30:	200f      	movs	r0, #15
 8001e32:	f7ff ff43 	bl	8001cbc <LCD_Write_Data>
	LCD_Write_Data(0x07);
 8001e36:	2007      	movs	r0, #7
 8001e38:	f7ff ff40 	bl	8001cbc <LCD_Write_Data>
	LCD_Write_Data(0x00);
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	f7ff ff3d 	bl	8001cbc <LCD_Write_Data>

	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd(0XE1); // Set Gamma
 8001e42:	20e1      	movs	r0, #225	; 0xe1
 8001e44:	f7ff ff2c 	bl	8001ca0 <LCD_Write_Cmd>
	LCD_Write_Data(0x00);
 8001e48:	2000      	movs	r0, #0
 8001e4a:	f7ff ff37 	bl	8001cbc <LCD_Write_Data>
	LCD_Write_Data(0x19);
 8001e4e:	2019      	movs	r0, #25
 8001e50:	f7ff ff34 	bl	8001cbc <LCD_Write_Data>
	LCD_Write_Data(0x1B);
 8001e54:	201b      	movs	r0, #27
 8001e56:	f7ff ff31 	bl	8001cbc <LCD_Write_Data>
	LCD_Write_Data(0x04);
 8001e5a:	2004      	movs	r0, #4
 8001e5c:	f7ff ff2e 	bl	8001cbc <LCD_Write_Data>
	LCD_Write_Data(0x10);
 8001e60:	2010      	movs	r0, #16
 8001e62:	f7ff ff2b 	bl	8001cbc <LCD_Write_Data>
	LCD_Write_Data(0x07);
 8001e66:	2007      	movs	r0, #7
 8001e68:	f7ff ff28 	bl	8001cbc <LCD_Write_Data>
	LCD_Write_Data(0x2A);
 8001e6c:	202a      	movs	r0, #42	; 0x2a
 8001e6e:	f7ff ff25 	bl	8001cbc <LCD_Write_Data>
	LCD_Write_Data(0x47);
 8001e72:	2047      	movs	r0, #71	; 0x47
 8001e74:	f7ff ff22 	bl	8001cbc <LCD_Write_Data>
	LCD_Write_Data(0x39);
 8001e78:	2039      	movs	r0, #57	; 0x39
 8001e7a:	f7ff ff1f 	bl	8001cbc <LCD_Write_Data>
	LCD_Write_Data(0x03);
 8001e7e:	2003      	movs	r0, #3
 8001e80:	f7ff ff1c 	bl	8001cbc <LCD_Write_Data>
	LCD_Write_Data(0x06);
 8001e84:	2006      	movs	r0, #6
 8001e86:	f7ff ff19 	bl	8001cbc <LCD_Write_Data>
	LCD_Write_Data(0x06);
 8001e8a:	2006      	movs	r0, #6
 8001e8c:	f7ff ff16 	bl	8001cbc <LCD_Write_Data>
	LCD_Write_Data(0x30);
 8001e90:	2030      	movs	r0, #48	; 0x30
 8001e92:	f7ff ff13 	bl	8001cbc <LCD_Write_Data>
	LCD_Write_Data(0x38);
 8001e96:	2038      	movs	r0, #56	; 0x38
 8001e98:	f7ff ff10 	bl	8001cbc <LCD_Write_Data>
	LCD_Write_Data(0x0F);
 8001e9c:	200f      	movs	r0, #15
 8001e9e:	f7ff ff0d 	bl	8001cbc <LCD_Write_Data>

	/* memory access control set */
	DEBUG_DELAY();
	LCD_Write_Cmd(0x36);
 8001ea2:	2036      	movs	r0, #54	; 0x36
 8001ea4:	f7ff fefc 	bl	8001ca0 <LCD_Write_Cmd>
	LCD_Write_Data(0xC8);
 8001ea8:	20c8      	movs	r0, #200	; 0xc8
 8001eaa:	f7ff ff07 	bl	8001cbc <LCD_Write_Data>
	DEBUG_DELAY();

	/* column address control set */
	LCD_Write_Cmd(CMD_Set_COLUMN);
 8001eae:	202a      	movs	r0, #42	; 0x2a
 8001eb0:	f7ff fef6 	bl	8001ca0 <LCD_Write_Cmd>
	LCD_Write_Data(0x00);
 8001eb4:	2000      	movs	r0, #0
 8001eb6:	f7ff ff01 	bl	8001cbc <LCD_Write_Data>
	LCD_Write_Data(0x00);
 8001eba:	2000      	movs	r0, #0
 8001ebc:	f7ff fefe 	bl	8001cbc <LCD_Write_Data>
	LCD_Write_Data(0x00);
 8001ec0:	2000      	movs	r0, #0
 8001ec2:	f7ff fefb 	bl	8001cbc <LCD_Write_Data>
	LCD_Write_Data(0xEF);
 8001ec6:	20ef      	movs	r0, #239	; 0xef
 8001ec8:	f7ff fef8 	bl	8001cbc <LCD_Write_Data>

	/* page address control set */
	DEBUG_DELAY();
	LCD_Write_Cmd(CMD_Set_PAGE);
 8001ecc:	202b      	movs	r0, #43	; 0x2b
 8001ece:	f7ff fee7 	bl	8001ca0 <LCD_Write_Cmd>
	LCD_Write_Data(0x00);
 8001ed2:	2000      	movs	r0, #0
 8001ed4:	f7ff fef2 	bl	8001cbc <LCD_Write_Data>
	LCD_Write_Data(0x00);
 8001ed8:	2000      	movs	r0, #0
 8001eda:	f7ff feef 	bl	8001cbc <LCD_Write_Data>
	LCD_Write_Data(0x01);
 8001ede:	2001      	movs	r0, #1
 8001ee0:	f7ff feec 	bl	8001cbc <LCD_Write_Data>
	LCD_Write_Data(0x3F);
 8001ee4:	203f      	movs	r0, #63	; 0x3f
 8001ee6:	f7ff fee9 	bl	8001cbc <LCD_Write_Data>

	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY();
	LCD_Write_Cmd(0x3a);
 8001eea:	203a      	movs	r0, #58	; 0x3a
 8001eec:	f7ff fed8 	bl	8001ca0 <LCD_Write_Cmd>
	LCD_Write_Data(0x55);
 8001ef0:	2055      	movs	r0, #85	; 0x55
 8001ef2:	f7ff fee3 	bl	8001cbc <LCD_Write_Data>

	/* Sleep Out (11h)  */
	LCD_Write_Cmd(0x11);
 8001ef6:	2011      	movs	r0, #17
 8001ef8:	f7ff fed2 	bl	8001ca0 <LCD_Write_Cmd>
	Delay(0xAFFf << 2);
 8001efc:	4803      	ldr	r0, [pc, #12]	; (8001f0c <LCD_REG_Config+0x230>)
 8001efe:	f7ff fe73 	bl	8001be8 <Delay>
	DEBUG_DELAY();

	/* Display ON (29h) */
	LCD_Write_Cmd(0x29);
 8001f02:	2029      	movs	r0, #41	; 0x29
 8001f04:	f7ff fecc 	bl	8001ca0 <LCD_Write_Cmd>
}
 8001f08:	bf00      	nop
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	0002bffc 	.word	0x0002bffc

08001f10 <LCD_OpenWindow>:

void LCD_OpenWindow(uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight)
{
 8001f10:	b590      	push	{r4, r7, lr}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4604      	mov	r4, r0
 8001f18:	4608      	mov	r0, r1
 8001f1a:	4611      	mov	r1, r2
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	4623      	mov	r3, r4
 8001f20:	80fb      	strh	r3, [r7, #6]
 8001f22:	4603      	mov	r3, r0
 8001f24:	80bb      	strh	r3, [r7, #4]
 8001f26:	460b      	mov	r3, r1
 8001f28:	807b      	strh	r3, [r7, #2]
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd(CMD_Set_COLUMN);
 8001f2e:	202a      	movs	r0, #42	; 0x2a
 8001f30:	f7ff feb6 	bl	8001ca0 <LCD_Write_Cmd>
	LCD_Write_Data(usCOLUMN >> 8);
 8001f34:	88fb      	ldrh	r3, [r7, #6]
 8001f36:	0a1b      	lsrs	r3, r3, #8
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff febe 	bl	8001cbc <LCD_Write_Data>
	LCD_Write_Data(usCOLUMN & 0xff);
 8001f40:	88fb      	ldrh	r3, [r7, #6]
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff feb8 	bl	8001cbc <LCD_Write_Data>
	LCD_Write_Data((usCOLUMN + usWidth - 1) >> 8);
 8001f4c:	88fa      	ldrh	r2, [r7, #6]
 8001f4e:	887b      	ldrh	r3, [r7, #2]
 8001f50:	4413      	add	r3, r2
 8001f52:	3b01      	subs	r3, #1
 8001f54:	121b      	asrs	r3, r3, #8
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff feaf 	bl	8001cbc <LCD_Write_Data>
	LCD_Write_Data((usCOLUMN + usWidth - 1) & 0xff);
 8001f5e:	88fa      	ldrh	r2, [r7, #6]
 8001f60:	887b      	ldrh	r3, [r7, #2]
 8001f62:	4413      	add	r3, r2
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	3b01      	subs	r3, #1
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff fea4 	bl	8001cbc <LCD_Write_Data>

	LCD_Write_Cmd(CMD_Set_PAGE);
 8001f74:	202b      	movs	r0, #43	; 0x2b
 8001f76:	f7ff fe93 	bl	8001ca0 <LCD_Write_Cmd>
	LCD_Write_Data(usPAGE >> 8);
 8001f7a:	88bb      	ldrh	r3, [r7, #4]
 8001f7c:	0a1b      	lsrs	r3, r3, #8
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff fe9b 	bl	8001cbc <LCD_Write_Data>
	LCD_Write_Data(usPAGE & 0xff);
 8001f86:	88bb      	ldrh	r3, [r7, #4]
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff fe95 	bl	8001cbc <LCD_Write_Data>
	LCD_Write_Data((usPAGE + usHeight - 1) >> 8);
 8001f92:	88ba      	ldrh	r2, [r7, #4]
 8001f94:	883b      	ldrh	r3, [r7, #0]
 8001f96:	4413      	add	r3, r2
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	121b      	asrs	r3, r3, #8
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff fe8c 	bl	8001cbc <LCD_Write_Data>
	LCD_Write_Data((usPAGE + usHeight - 1) & 0xff);
 8001fa4:	88ba      	ldrh	r2, [r7, #4]
 8001fa6:	883b      	ldrh	r3, [r7, #0]
 8001fa8:	4413      	add	r3, r2
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	3b01      	subs	r3, #1
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff fe81 	bl	8001cbc <LCD_Write_Data>
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd90      	pop	{r4, r7, pc}

08001fc2 <LCD_FillColor>:

void LCD_FillColor(uint32_t usPoint, uint16_t usColor)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b084      	sub	sp, #16
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
 8001fca:	460b      	mov	r3, r1
 8001fcc:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60fb      	str	r3, [r7, #12]

	/* memory write */
	LCD_Write_Cmd(CMD_SetPixel);
 8001fd2:	202c      	movs	r0, #44	; 0x2c
 8001fd4:	f7ff fe64 	bl	8001ca0 <LCD_Write_Cmd>

	for (i = 0; i < usPoint; i++)
 8001fd8:	2300      	movs	r3, #0
 8001fda:	60fb      	str	r3, [r7, #12]
 8001fdc:	e006      	b.n	8001fec <LCD_FillColor+0x2a>
		LCD_Write_Data(usColor);
 8001fde:	887b      	ldrh	r3, [r7, #2]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff fe6b 	bl	8001cbc <LCD_Write_Data>
	for (i = 0; i < usPoint; i++)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d3f4      	bcc.n	8001fde <LCD_FillColor+0x1c>
}
 8001ff4:	bf00      	nop
 8001ff6:	bf00      	nop
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <LCD_Clear>:

void LCD_Clear(uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor)
{
 8001ffe:	b590      	push	{r4, r7, lr}
 8002000:	b083      	sub	sp, #12
 8002002:	af00      	add	r7, sp, #0
 8002004:	4604      	mov	r4, r0
 8002006:	4608      	mov	r0, r1
 8002008:	4611      	mov	r1, r2
 800200a:	461a      	mov	r2, r3
 800200c:	4623      	mov	r3, r4
 800200e:	80fb      	strh	r3, [r7, #6]
 8002010:	4603      	mov	r3, r0
 8002012:	80bb      	strh	r3, [r7, #4]
 8002014:	460b      	mov	r3, r1
 8002016:	807b      	strh	r3, [r7, #2]
 8002018:	4613      	mov	r3, r2
 800201a:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow(usCOLUMN, usPAGE, usWidth, usHeight);
 800201c:	883b      	ldrh	r3, [r7, #0]
 800201e:	887a      	ldrh	r2, [r7, #2]
 8002020:	88b9      	ldrh	r1, [r7, #4]
 8002022:	88f8      	ldrh	r0, [r7, #6]
 8002024:	f7ff ff74 	bl	8001f10 <LCD_OpenWindow>
	LCD_FillColor(usWidth * usHeight, usColor);
 8002028:	887b      	ldrh	r3, [r7, #2]
 800202a:	883a      	ldrh	r2, [r7, #0]
 800202c:	fb02 f303 	mul.w	r3, r2, r3
 8002030:	461a      	mov	r2, r3
 8002032:	8b3b      	ldrh	r3, [r7, #24]
 8002034:	4619      	mov	r1, r3
 8002036:	4610      	mov	r0, r2
 8002038:	f7ff ffc3 	bl	8001fc2 <LCD_FillColor>
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	bd90      	pop	{r4, r7, pc}

08002044 <LCD_DrawChar>:
		}
	}
}

void LCD_DrawChar(uint16_t usC, uint16_t usP, const char cChar)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	80fb      	strh	r3, [r7, #6]
 800204e:	460b      	mov	r3, r1
 8002050:	80bb      	strh	r3, [r7, #4]
 8002052:	4613      	mov	r3, r2
 8002054:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	ucRelativePositon = cChar - ' ';
 8002056:	78fb      	ldrb	r3, [r7, #3]
 8002058:	3b20      	subs	r3, #32
 800205a:	733b      	strb	r3, [r7, #12]

	LCD_OpenWindow(usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR);
 800205c:	88b9      	ldrh	r1, [r7, #4]
 800205e:	88f8      	ldrh	r0, [r7, #6]
 8002060:	2310      	movs	r3, #16
 8002062:	2208      	movs	r2, #8
 8002064:	f7ff ff54 	bl	8001f10 <LCD_OpenWindow>

	LCD_Write_Cmd(CMD_SetPixel);
 8002068:	202c      	movs	r0, #44	; 0x2c
 800206a:	f7ff fe19 	bl	8001ca0 <LCD_Write_Cmd>

	for (ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage++)
 800206e:	2300      	movs	r3, #0
 8002070:	73bb      	strb	r3, [r7, #14]
 8002072:	e023      	b.n	80020bc <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608[ucRelativePositon][ucPage];
 8002074:	7b3a      	ldrb	r2, [r7, #12]
 8002076:	7bbb      	ldrb	r3, [r7, #14]
 8002078:	4914      	ldr	r1, [pc, #80]	; (80020cc <LCD_DrawChar+0x88>)
 800207a:	0112      	lsls	r2, r2, #4
 800207c:	440a      	add	r2, r1
 800207e:	4413      	add	r3, r2
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	73fb      	strb	r3, [r7, #15]

		for (ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn++)
 8002084:	2300      	movs	r3, #0
 8002086:	737b      	strb	r3, [r7, #13]
 8002088:	e012      	b.n	80020b0 <LCD_DrawChar+0x6c>
		{
			if (ucTemp & 0x01)
 800208a:	7bfb      	ldrb	r3, [r7, #15]
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <LCD_DrawChar+0x58>
				LCD_Write_Data(0x001F);
 8002094:	201f      	movs	r0, #31
 8002096:	f7ff fe11 	bl	8001cbc <LCD_Write_Data>
 800209a:	e003      	b.n	80020a4 <LCD_DrawChar+0x60>

			else
				LCD_Write_Data(0xFFFF);
 800209c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80020a0:	f7ff fe0c 	bl	8001cbc <LCD_Write_Data>

			ucTemp >>= 1;
 80020a4:	7bfb      	ldrb	r3, [r7, #15]
 80020a6:	085b      	lsrs	r3, r3, #1
 80020a8:	73fb      	strb	r3, [r7, #15]
		for (ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn++)
 80020aa:	7b7b      	ldrb	r3, [r7, #13]
 80020ac:	3301      	adds	r3, #1
 80020ae:	737b      	strb	r3, [r7, #13]
 80020b0:	7b7b      	ldrb	r3, [r7, #13]
 80020b2:	2b07      	cmp	r3, #7
 80020b4:	d9e9      	bls.n	800208a <LCD_DrawChar+0x46>
	for (ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage++)
 80020b6:	7bbb      	ldrb	r3, [r7, #14]
 80020b8:	3301      	adds	r3, #1
 80020ba:	73bb      	strb	r3, [r7, #14]
 80020bc:	7bbb      	ldrb	r3, [r7, #14]
 80020be:	2b0f      	cmp	r3, #15
 80020c0:	d9d8      	bls.n	8002074 <LCD_DrawChar+0x30>
		}
	}
}
 80020c2:	bf00      	nop
 80020c4:	bf00      	nop
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	08008c00 	.word	0x08008c00

080020d0 <LCD_DrawString>:

void LCD_DrawString(uint16_t usC, uint16_t usP, const char *pStr)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	603a      	str	r2, [r7, #0]
 80020da:	80fb      	strh	r3, [r7, #6]
 80020dc:	460b      	mov	r3, r1
 80020de:	80bb      	strh	r3, [r7, #4]
	while (*pStr != '\0')
 80020e0:	e01c      	b.n	800211c <LCD_DrawString+0x4c>
	{
		if ((usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR) > LCD_DispWindow_COLUMN)
 80020e2:	88fb      	ldrh	r3, [r7, #6]
 80020e4:	2be8      	cmp	r3, #232	; 0xe8
 80020e6:	d904      	bls.n	80020f2 <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80020e8:	2300      	movs	r3, #0
 80020ea:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 80020ec:	88bb      	ldrh	r3, [r7, #4]
 80020ee:	3310      	adds	r3, #16
 80020f0:	80bb      	strh	r3, [r7, #4]
		}

		if ((usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR) > LCD_DispWindow_PAGE)
 80020f2:	88bb      	ldrh	r3, [r7, #4]
 80020f4:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 80020f8:	d903      	bls.n	8002102 <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80020fa:	2300      	movs	r3, #0
 80020fc:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 80020fe:	2300      	movs	r3, #0
 8002100:	80bb      	strh	r3, [r7, #4]
		}

		LCD_DrawChar(usC, usP, *pStr);
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	781a      	ldrb	r2, [r3, #0]
 8002106:	88b9      	ldrh	r1, [r7, #4]
 8002108:	88fb      	ldrh	r3, [r7, #6]
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff ff9a 	bl	8002044 <LCD_DrawChar>

		pStr++;
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	3301      	adds	r3, #1
 8002114:	603b      	str	r3, [r7, #0]

		usC += WIDTH_EN_CHAR;
 8002116:	88fb      	ldrh	r3, [r7, #6]
 8002118:	3308      	adds	r3, #8
 800211a:	80fb      	strh	r3, [r7, #6]
	while (*pStr != '\0')
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d1de      	bne.n	80020e2 <LCD_DrawString+0x12>
	}
}
 8002124:	bf00      	nop
 8002126:	bf00      	nop
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
	...

08002130 <LCD_DrawEllipse>:

// Task 3
volatile uint8_t ellipse[2 * 75 + 1][2 * 25 + 1];

void LCD_DrawEllipse(uint16_t usC, uint16_t usP, uint16_t SR, uint16_t LR, uint16_t usColor)
{
 8002130:	b590      	push	{r4, r7, lr}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	4604      	mov	r4, r0
 8002138:	4608      	mov	r0, r1
 800213a:	4611      	mov	r1, r2
 800213c:	461a      	mov	r2, r3
 800213e:	4623      	mov	r3, r4
 8002140:	80fb      	strh	r3, [r7, #6]
 8002142:	4603      	mov	r3, r0
 8002144:	80bb      	strh	r3, [r7, #4]
 8002146:	460b      	mov	r3, r1
 8002148:	807b      	strh	r3, [r7, #2]
 800214a:	4613      	mov	r3, r2
 800214c:	803b      	strh	r3, [r7, #0]
	memset(ellipse, 0, sizeof(ellipse));
 800214e:	f641 6215 	movw	r2, #7701	; 0x1e15
 8002152:	2100      	movs	r1, #0
 8002154:	4818      	ldr	r0, [pc, #96]	; (80021b8 <LCD_DrawEllipse+0x88>)
 8002156:	f006 f813 	bl	8008180 <memset>
	uint8_t leftTopY = usC - SR;
 800215a:	88fb      	ldrh	r3, [r7, #6]
 800215c:	b2da      	uxtb	r2, r3
 800215e:	887b      	ldrh	r3, [r7, #2]
 8002160:	b2db      	uxtb	r3, r3
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	73fb      	strb	r3, [r7, #15]
	uint8_t leftTopX = usP - LR;
 8002166:	88bb      	ldrh	r3, [r7, #4]
 8002168:	b2da      	uxtb	r2, r3
 800216a:	883b      	ldrh	r3, [r7, #0]
 800216c:	b2db      	uxtb	r3, r3
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	73bb      	strb	r3, [r7, #14]
	LCD_OpenWindow(leftTopY, leftTopX, 2 * SR, 2 * LR);
 8002172:	7bfb      	ldrb	r3, [r7, #15]
 8002174:	b298      	uxth	r0, r3
 8002176:	7bbb      	ldrb	r3, [r7, #14]
 8002178:	b299      	uxth	r1, r3
 800217a:	887b      	ldrh	r3, [r7, #2]
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	b29a      	uxth	r2, r3
 8002180:	883b      	ldrh	r3, [r7, #0]
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	b29b      	uxth	r3, r3
 8002186:	f7ff fec3 	bl	8001f10 <LCD_OpenWindow>
	uint8_t usWidth = 2 * SR;
 800218a:	887b      	ldrh	r3, [r7, #2]
 800218c:	b2db      	uxtb	r3, r3
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	737b      	strb	r3, [r7, #13]
	uint8_t usHeight = 2 * LR;
 8002192:	883b      	ldrh	r3, [r7, #0]
 8002194:	b2db      	uxtb	r3, r3
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	733b      	strb	r3, [r7, #12]
	LCD_FillColor(usWidth * usHeight, usColor);
 800219a:	7b7b      	ldrb	r3, [r7, #13]
 800219c:	7b3a      	ldrb	r2, [r7, #12]
 800219e:	fb02 f303 	mul.w	r3, r2, r3
 80021a2:	461a      	mov	r2, r3
 80021a4:	8c3b      	ldrh	r3, [r7, #32]
 80021a6:	4619      	mov	r1, r3
 80021a8:	4610      	mov	r0, r2
 80021aa:	f7ff ff0a 	bl	8001fc2 <LCD_FillColor>
}
 80021ae:	bf00      	nop
 80021b0:	3714      	adds	r7, #20
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd90      	pop	{r4, r7, pc}
 80021b6:	bf00      	nop
 80021b8:	200002a8 	.word	0x200002a8

080021bc <LCD_Cam_Gram>:
// This actually shows the image of the to the camera
void LCD_Cam_Gram()
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
	/* memory access control set */
	DEBUG_DELAY();
	LCD_Write_Cmd(0x36);
 80021c0:	2036      	movs	r0, #54	; 0x36
 80021c2:	f7ff fd6d 	bl	8001ca0 <LCD_Write_Cmd>
	LCD_Write_Data(0x68);
 80021c6:	2068      	movs	r0, #104	; 0x68
 80021c8:	f7ff fd78 	bl	8001cbc <LCD_Write_Data>
	DEBUG_DELAY();

	/* column address control set */
	LCD_Write_Cmd(CMD_Set_COLUMN);
 80021cc:	202a      	movs	r0, #42	; 0x2a
 80021ce:	f7ff fd67 	bl	8001ca0 <LCD_Write_Cmd>
	LCD_Write_Data(0x00);
 80021d2:	2000      	movs	r0, #0
 80021d4:	f7ff fd72 	bl	8001cbc <LCD_Write_Data>
	LCD_Write_Data(0x00);
 80021d8:	2000      	movs	r0, #0
 80021da:	f7ff fd6f 	bl	8001cbc <LCD_Write_Data>
	LCD_Write_Data(0x01);
 80021de:	2001      	movs	r0, #1
 80021e0:	f7ff fd6c 	bl	8001cbc <LCD_Write_Data>
	LCD_Write_Data(0x3F);
 80021e4:	203f      	movs	r0, #63	; 0x3f
 80021e6:	f7ff fd69 	bl	8001cbc <LCD_Write_Data>

	/* page address control set */
	DEBUG_DELAY();
	LCD_Write_Cmd(CMD_Set_PAGE);
 80021ea:	202b      	movs	r0, #43	; 0x2b
 80021ec:	f7ff fd58 	bl	8001ca0 <LCD_Write_Cmd>
	LCD_Write_Data(0x00);
 80021f0:	2000      	movs	r0, #0
 80021f2:	f7ff fd63 	bl	8001cbc <LCD_Write_Data>
	LCD_Write_Data(0x00);
 80021f6:	2000      	movs	r0, #0
 80021f8:	f7ff fd60 	bl	8001cbc <LCD_Write_Data>
	LCD_Write_Data(0x00);
 80021fc:	2000      	movs	r0, #0
 80021fe:	f7ff fd5d 	bl	8001cbc <LCD_Write_Data>
	LCD_Write_Data(0xEF);
 8002202:	20ef      	movs	r0, #239	; 0xef
 8002204:	f7ff fd5a 	bl	8001cbc <LCD_Write_Data>

	LCD_Write_Cmd(0x2C);
 8002208:	202c      	movs	r0, #44	; 0x2c
 800220a:	f7ff fd49 	bl	8001ca0 <LCD_Write_Cmd>
}
 800220e:	bf00      	nop
 8002210:	bd80      	pop	{r7, pc}
	...

08002214 <drawCube>:

uint16_t cube_x[18] = {3, 10, 17, 31, 38, 45, 59, 66, 73, 87, 94, 101, 115, 122, 129, 143, 150, 157};
uint16_t cube_y[3] = {10, 17, 24};

void drawCube(char *face)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b088      	sub	sp, #32
 8002218:	af02      	add	r7, sp, #8
 800221a:	6078      	str	r0, [r7, #4]
	for (size_t i = 0; i < 6; i++)
 800221c:	2300      	movs	r3, #0
 800221e:	617b      	str	r3, [r7, #20]
 8002220:	e07e      	b.n	8002320 <drawCube+0x10c>
		for (size_t j = 0; j < 3; j++)
 8002222:	2300      	movs	r3, #0
 8002224:	613b      	str	r3, [r7, #16]
 8002226:	e075      	b.n	8002314 <drawCube+0x100>
			for (size_t k = 0; k < 3; k++)
 8002228:	2300      	movs	r3, #0
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	e06c      	b.n	8002308 <drawCube+0xf4>
			{
				uint16_t color = BLACK;
 800222e:	2300      	movs	r3, #0
 8002230:	817b      	strh	r3, [r7, #10]
				switch (face[i * 9 + j * 3 + 2 - k])
 8002232:	697a      	ldr	r2, [r7, #20]
 8002234:	4613      	mov	r3, r2
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	1899      	adds	r1, r3, r2
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	4613      	mov	r3, r2
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	4413      	add	r3, r2
 8002242:	18ca      	adds	r2, r1, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	3302      	adds	r3, #2
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	4413      	add	r3, r2
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	3b42      	subs	r3, #66	; 0x42
 8002252:	2b13      	cmp	r3, #19
 8002254:	d841      	bhi.n	80022da <drawCube+0xc6>
 8002256:	a201      	add	r2, pc, #4	; (adr r2, 800225c <drawCube+0x48>)
 8002258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800225c:	080022b5 	.word	0x080022b5
 8002260:	080022db 	.word	0x080022db
 8002264:	080022d3 	.word	0x080022d3
 8002268:	080022db 	.word	0x080022db
 800226c:	080022ad 	.word	0x080022ad
 8002270:	080022db 	.word	0x080022db
 8002274:	080022db 	.word	0x080022db
 8002278:	080022db 	.word	0x080022db
 800227c:	080022db 	.word	0x080022db
 8002280:	080022db 	.word	0x080022db
 8002284:	080022bb 	.word	0x080022bb
 8002288:	080022db 	.word	0x080022db
 800228c:	080022db 	.word	0x080022db
 8002290:	080022db 	.word	0x080022db
 8002294:	080022db 	.word	0x080022db
 8002298:	080022db 	.word	0x080022db
 800229c:	080022c3 	.word	0x080022c3
 80022a0:	080022db 	.word	0x080022db
 80022a4:	080022db 	.word	0x080022db
 80022a8:	080022cb 	.word	0x080022cb
				{
				case 'F':
					color = GREEN;
 80022ac:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80022b0:	817b      	strh	r3, [r7, #10]
					break;
 80022b2:	e013      	b.n	80022dc <drawCube+0xc8>
				case 'B':
					color = BLUE;
 80022b4:	231f      	movs	r3, #31
 80022b6:	817b      	strh	r3, [r7, #10]
					break;
 80022b8:	e010      	b.n	80022dc <drawCube+0xc8>
				case 'L':
					color = RED;
 80022ba:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80022be:	817b      	strh	r3, [r7, #10]
					break;
 80022c0:	e00c      	b.n	80022dc <drawCube+0xc8>
				case 'R':
					color = ORANGE;
 80022c2:	f64f 33a0 	movw	r3, #64416	; 0xfba0
 80022c6:	817b      	strh	r3, [r7, #10]
					break;
 80022c8:	e008      	b.n	80022dc <drawCube+0xc8>
				case 'U':
					color = YELLOW;
 80022ca:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80022ce:	817b      	strh	r3, [r7, #10]
					break;
 80022d0:	e004      	b.n	80022dc <drawCube+0xc8>
				case 'D':
					color = WHITE;
 80022d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022d6:	817b      	strh	r3, [r7, #10]
					break;
 80022d8:	e000      	b.n	80022dc <drawCube+0xc8>
				default:
					break;
 80022da:	bf00      	nop
				}
				LCD_DrawEllipse(cube_x[i * 3 + j], cube_y[k], 2, 2, color);
 80022dc:	697a      	ldr	r2, [r7, #20]
 80022de:	4613      	mov	r3, r2
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	441a      	add	r2, r3
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	4413      	add	r3, r2
 80022e8:	4a12      	ldr	r2, [pc, #72]	; (8002334 <drawCube+0x120>)
 80022ea:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 80022ee:	4a12      	ldr	r2, [pc, #72]	; (8002338 <drawCube+0x124>)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80022f6:	897b      	ldrh	r3, [r7, #10]
 80022f8:	9300      	str	r3, [sp, #0]
 80022fa:	2302      	movs	r3, #2
 80022fc:	2202      	movs	r2, #2
 80022fe:	f7ff ff17 	bl	8002130 <LCD_DrawEllipse>
			for (size_t k = 0; k < 3; k++)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	3301      	adds	r3, #1
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2b02      	cmp	r3, #2
 800230c:	d98f      	bls.n	800222e <drawCube+0x1a>
		for (size_t j = 0; j < 3; j++)
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	3301      	adds	r3, #1
 8002312:	613b      	str	r3, [r7, #16]
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	2b02      	cmp	r3, #2
 8002318:	d986      	bls.n	8002228 <drawCube+0x14>
	for (size_t i = 0; i < 6; i++)
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	3301      	adds	r3, #1
 800231e:	617b      	str	r3, [r7, #20]
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	2b05      	cmp	r3, #5
 8002324:	f67f af7d 	bls.w	8002222 <drawCube+0xe>
			}
}
 8002328:	bf00      	nop
 800232a:	bf00      	nop
 800232c:	3718      	adds	r7, #24
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	2000011c 	.word	0x2000011c
 8002338:	20000140 	.word	0x20000140

0800233c <LCD_GramScan>:

void LCD_GramScan(uint8_t ucOption)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	4603      	mov	r3, r0
 8002344:	71fb      	strb	r3, [r7, #7]
	switch (ucOption)
 8002346:	79fb      	ldrb	r3, [r7, #7]
 8002348:	3b01      	subs	r3, #1
 800234a:	2b03      	cmp	r3, #3
 800234c:	f200 80a0 	bhi.w	8002490 <LCD_GramScan+0x154>
 8002350:	a201      	add	r2, pc, #4	; (adr r2, 8002358 <LCD_GramScan+0x1c>)
 8002352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002356:	bf00      	nop
 8002358:	08002369 	.word	0x08002369
 800235c:	080023b3 	.word	0x080023b3
 8002360:	080023fd 	.word	0x080023fd
 8002364:	08002447 	.word	0x08002447

		//		____ x(240)
		//	 |
		//	 |	y(320)

		LCD_Write_Cmd(0x36);
 8002368:	2036      	movs	r0, #54	; 0x36
 800236a:	f7ff fc99 	bl	8001ca0 <LCD_Write_Cmd>
		LCD_Write_Data(0xC8);
 800236e:	20c8      	movs	r0, #200	; 0xc8
 8002370:	f7ff fca4 	bl	8001cbc <LCD_Write_Data>
		LCD_Write_Cmd(0x2A);
 8002374:	202a      	movs	r0, #42	; 0x2a
 8002376:	f7ff fc93 	bl	8001ca0 <LCD_Write_Cmd>
		LCD_Write_Data(0x00); /* x start */
 800237a:	2000      	movs	r0, #0
 800237c:	f7ff fc9e 	bl	8001cbc <LCD_Write_Data>
		LCD_Write_Data(0x00);
 8002380:	2000      	movs	r0, #0
 8002382:	f7ff fc9b 	bl	8001cbc <LCD_Write_Data>
		LCD_Write_Data(0x00); /* x end */
 8002386:	2000      	movs	r0, #0
 8002388:	f7ff fc98 	bl	8001cbc <LCD_Write_Data>
		LCD_Write_Data(0xEF);
 800238c:	20ef      	movs	r0, #239	; 0xef
 800238e:	f7ff fc95 	bl	8001cbc <LCD_Write_Data>

		LCD_Write_Cmd(0x2B);
 8002392:	202b      	movs	r0, #43	; 0x2b
 8002394:	f7ff fc84 	bl	8001ca0 <LCD_Write_Cmd>
		LCD_Write_Data(0x00); /* y start */
 8002398:	2000      	movs	r0, #0
 800239a:	f7ff fc8f 	bl	8001cbc <LCD_Write_Data>
		LCD_Write_Data(0x00);
 800239e:	2000      	movs	r0, #0
 80023a0:	f7ff fc8c 	bl	8001cbc <LCD_Write_Data>
		LCD_Write_Data(0x01); /* y end */
 80023a4:	2001      	movs	r0, #1
 80023a6:	f7ff fc89 	bl	8001cbc <LCD_Write_Data>
		LCD_Write_Data(0x3F);
 80023aa:	203f      	movs	r0, #63	; 0x3f
 80023ac:	f7ff fc86 	bl	8001cbc <LCD_Write_Data>

		break;
 80023b0:	e06e      	b.n	8002490 <LCD_GramScan+0x154>

		//		|x(320)
		//		|
		//		|___ y(240)

		LCD_Write_Cmd(0x36);
 80023b2:	2036      	movs	r0, #54	; 0x36
 80023b4:	f7ff fc74 	bl	8001ca0 <LCD_Write_Cmd>
		LCD_Write_Data(0x68);
 80023b8:	2068      	movs	r0, #104	; 0x68
 80023ba:	f7ff fc7f 	bl	8001cbc <LCD_Write_Data>
		LCD_Write_Cmd(0x2A);
 80023be:	202a      	movs	r0, #42	; 0x2a
 80023c0:	f7ff fc6e 	bl	8001ca0 <LCD_Write_Cmd>
		LCD_Write_Data(0x00);
 80023c4:	2000      	movs	r0, #0
 80023c6:	f7ff fc79 	bl	8001cbc <LCD_Write_Data>
		LCD_Write_Data(0x00);
 80023ca:	2000      	movs	r0, #0
 80023cc:	f7ff fc76 	bl	8001cbc <LCD_Write_Data>
		LCD_Write_Data(0x01);
 80023d0:	2001      	movs	r0, #1
 80023d2:	f7ff fc73 	bl	8001cbc <LCD_Write_Data>
		LCD_Write_Data(0x3F);
 80023d6:	203f      	movs	r0, #63	; 0x3f
 80023d8:	f7ff fc70 	bl	8001cbc <LCD_Write_Data>

		LCD_Write_Cmd(0x2B);
 80023dc:	202b      	movs	r0, #43	; 0x2b
 80023de:	f7ff fc5f 	bl	8001ca0 <LCD_Write_Cmd>
		LCD_Write_Data(0x00);
 80023e2:	2000      	movs	r0, #0
 80023e4:	f7ff fc6a 	bl	8001cbc <LCD_Write_Data>
		LCD_Write_Data(0x00);
 80023e8:	2000      	movs	r0, #0
 80023ea:	f7ff fc67 	bl	8001cbc <LCD_Write_Data>
		LCD_Write_Data(0x00);
 80023ee:	2000      	movs	r0, #0
 80023f0:	f7ff fc64 	bl	8001cbc <LCD_Write_Data>
		LCD_Write_Data(0xEF);
 80023f4:	20ef      	movs	r0, #239	; 0xef
 80023f6:	f7ff fc61 	bl	8001cbc <LCD_Write_Data>

		break;
 80023fa:	e049      	b.n	8002490 <LCD_GramScan+0x154>

		//		           |x(320)
		//		           |
		//		y(240) ____|

		LCD_Write_Cmd(0x36);
 80023fc:	2036      	movs	r0, #54	; 0x36
 80023fe:	f7ff fc4f 	bl	8001ca0 <LCD_Write_Cmd>
		LCD_Write_Data(0x28);
 8002402:	2028      	movs	r0, #40	; 0x28
 8002404:	f7ff fc5a 	bl	8001cbc <LCD_Write_Data>
		LCD_Write_Cmd(0x2A);
 8002408:	202a      	movs	r0, #42	; 0x2a
 800240a:	f7ff fc49 	bl	8001ca0 <LCD_Write_Cmd>
		LCD_Write_Data(0x00);
 800240e:	2000      	movs	r0, #0
 8002410:	f7ff fc54 	bl	8001cbc <LCD_Write_Data>
		LCD_Write_Data(0x00);
 8002414:	2000      	movs	r0, #0
 8002416:	f7ff fc51 	bl	8001cbc <LCD_Write_Data>
		LCD_Write_Data(0x01);
 800241a:	2001      	movs	r0, #1
 800241c:	f7ff fc4e 	bl	8001cbc <LCD_Write_Data>
		LCD_Write_Data(0x3F);
 8002420:	203f      	movs	r0, #63	; 0x3f
 8002422:	f7ff fc4b 	bl	8001cbc <LCD_Write_Data>

		LCD_Write_Cmd(0x2B);
 8002426:	202b      	movs	r0, #43	; 0x2b
 8002428:	f7ff fc3a 	bl	8001ca0 <LCD_Write_Cmd>
		LCD_Write_Data(0x00);
 800242c:	2000      	movs	r0, #0
 800242e:	f7ff fc45 	bl	8001cbc <LCD_Write_Data>
		LCD_Write_Data(0x00);
 8002432:	2000      	movs	r0, #0
 8002434:	f7ff fc42 	bl	8001cbc <LCD_Write_Data>
		LCD_Write_Data(0x00);
 8002438:	2000      	movs	r0, #0
 800243a:	f7ff fc3f 	bl	8001cbc <LCD_Write_Data>
		LCD_Write_Data(0xEF);
 800243e:	20ef      	movs	r0, #239	; 0xef
 8002440:	f7ff fc3c 	bl	8001cbc <LCD_Write_Data>

		break;
 8002444:	e024      	b.n	8002490 <LCD_GramScan+0x154>

		//		|y(320)
		//		|
		//		|___ x(240)

		LCD_Write_Cmd(0x36);
 8002446:	2036      	movs	r0, #54	; 0x36
 8002448:	f7ff fc2a 	bl	8001ca0 <LCD_Write_Cmd>
		LCD_Write_Data(0x48);
 800244c:	2048      	movs	r0, #72	; 0x48
 800244e:	f7ff fc35 	bl	8001cbc <LCD_Write_Data>
		LCD_Write_Cmd(0x2A);
 8002452:	202a      	movs	r0, #42	; 0x2a
 8002454:	f7ff fc24 	bl	8001ca0 <LCD_Write_Cmd>
		LCD_Write_Data(0x00);
 8002458:	2000      	movs	r0, #0
 800245a:	f7ff fc2f 	bl	8001cbc <LCD_Write_Data>
		LCD_Write_Data(0x00);
 800245e:	2000      	movs	r0, #0
 8002460:	f7ff fc2c 	bl	8001cbc <LCD_Write_Data>
		LCD_Write_Data(0x00);
 8002464:	2000      	movs	r0, #0
 8002466:	f7ff fc29 	bl	8001cbc <LCD_Write_Data>
		LCD_Write_Data(0xEF);
 800246a:	20ef      	movs	r0, #239	; 0xef
 800246c:	f7ff fc26 	bl	8001cbc <LCD_Write_Data>

		LCD_Write_Cmd(0x2B);
 8002470:	202b      	movs	r0, #43	; 0x2b
 8002472:	f7ff fc15 	bl	8001ca0 <LCD_Write_Cmd>
		LCD_Write_Data(0x00);
 8002476:	2000      	movs	r0, #0
 8002478:	f7ff fc20 	bl	8001cbc <LCD_Write_Data>
		LCD_Write_Data(0x00);
 800247c:	2000      	movs	r0, #0
 800247e:	f7ff fc1d 	bl	8001cbc <LCD_Write_Data>
		LCD_Write_Data(0x01);
 8002482:	2001      	movs	r0, #1
 8002484:	f7ff fc1a 	bl	8001cbc <LCD_Write_Data>
		LCD_Write_Data(0x3F);
 8002488:	203f      	movs	r0, #63	; 0x3f
 800248a:	f7ff fc17 	bl	8001cbc <LCD_Write_Data>

		break;
 800248e:	bf00      	nop
	}

	/* write gram start */
	LCD_Write_Cmd(0x2C);
 8002490:	202c      	movs	r0, #44	; 0x2c
 8002492:	f7ff fc05 	bl	8001ca0 <LCD_Write_Cmd>
}
 8002496:	bf00      	nop
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop

080024a0 <K>:
extern void rotateInSpdMode(uint8_t ID, uint8_t dir, uint16_t speed);

volatile int rotate_flag = 0;
volatile unsigned char cube[6][9] = {0};
void K()
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af02      	add	r7, sp, #8
    // HAL_Delay(800);
    // rotateInPosMode(3, 0, 90, 1);
    // rotateInPosMode(1, 1, 90, 0);
    ++rotate_flag;
 80024a6:	4b09      	ldr	r3, [pc, #36]	; (80024cc <K+0x2c>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	3301      	adds	r3, #1
 80024ac:	4a07      	ldr	r2, [pc, #28]	; (80024cc <K+0x2c>)
 80024ae:	6013      	str	r3, [r2, #0]
    rotate2InPosMode(1, 3, 1, 0, 90, 1);
 80024b0:	2301      	movs	r3, #1
 80024b2:	9301      	str	r3, [sp, #4]
 80024b4:	235a      	movs	r3, #90	; 0x5a
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	2300      	movs	r3, #0
 80024ba:	2201      	movs	r2, #1
 80024bc:	2103      	movs	r1, #3
 80024be:	2001      	movs	r0, #1
 80024c0:	f000 fe72 	bl	80031a8 <rotate2InPosMode>
    // HAL_Delay(500);
}
 80024c4:	bf00      	nop
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	200020c0 	.word	0x200020c0

080024d0 <K3>:

void K3()
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af02      	add	r7, sp, #8
    // HAL_Delay(800);
    // rotateInPosMode(3, 0, 90, 1);
    // rotateInPosMode(1, 1, 90, 0);
    rotate_flag += 3;
 80024d6:	4b09      	ldr	r3, [pc, #36]	; (80024fc <K3+0x2c>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	3303      	adds	r3, #3
 80024dc:	4a07      	ldr	r2, [pc, #28]	; (80024fc <K3+0x2c>)
 80024de:	6013      	str	r3, [r2, #0]
    rotate2InPosMode(1, 3, 1, 0, 270, 1);
 80024e0:	2301      	movs	r3, #1
 80024e2:	9301      	str	r3, [sp, #4]
 80024e4:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80024e8:	9300      	str	r3, [sp, #0]
 80024ea:	2300      	movs	r3, #0
 80024ec:	2201      	movs	r2, #1
 80024ee:	2103      	movs	r1, #3
 80024f0:	2001      	movs	r0, #1
 80024f2:	f000 fe59 	bl	80031a8 <rotate2InPosMode>
//     HAL_Delay(300);
}
 80024f6:	bf00      	nop
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	200020c0 	.word	0x200020c0

08002500 <C>:

void C()

{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
    rotateInPosMode(2, 1, 114, 1);
 8002504:	2301      	movs	r3, #1
 8002506:	2272      	movs	r2, #114	; 0x72
 8002508:	2101      	movs	r1, #1
 800250a:	2002      	movs	r0, #2
 800250c:	f000 fd9c 	bl	8003048 <rotateInPosMode>
    // HAL_Delay(50);
    rotateInPosMode(2, 0, 24, 1);
 8002510:	2301      	movs	r3, #1
 8002512:	2218      	movs	r2, #24
 8002514:	2100      	movs	r1, #0
 8002516:	2002      	movs	r0, #2
 8002518:	f000 fd96 	bl	8003048 <rotateInPosMode>
}
 800251c:	bf00      	nop
 800251e:	bd80      	pop	{r7, pc}

08002520 <C1>:

void C1()

{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
    rotateInPosMode(2, 0, 121, 1);
 8002524:	2301      	movs	r3, #1
 8002526:	2279      	movs	r2, #121	; 0x79
 8002528:	2100      	movs	r1, #0
 800252a:	2002      	movs	r0, #2
 800252c:	f000 fd8c 	bl	8003048 <rotateInPosMode>
    // HAL_Delay(50);
    rotateInPosMode(2, 1, 31, 1);
 8002530:	2301      	movs	r3, #1
 8002532:	221f      	movs	r2, #31
 8002534:	2101      	movs	r1, #1
 8002536:	2002      	movs	r0, #2
 8002538:	f000 fd86 	bl	8003048 <rotateInPosMode>
}
 800253c:	bf00      	nop
 800253e:	bd80      	pop	{r7, pc}

08002540 <C2>:

void C2()

{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
    rotateInPosMode(2, 0, 211, 1);
 8002544:	2301      	movs	r3, #1
 8002546:	22d3      	movs	r2, #211	; 0xd3
 8002548:	2100      	movs	r1, #0
 800254a:	2002      	movs	r0, #2
 800254c:	f000 fd7c 	bl	8003048 <rotateInPosMode>
    // HAL_Delay(50);
    rotateInPosMode(2, 1, 31, 1);
 8002550:	2301      	movs	r3, #1
 8002552:	221f      	movs	r2, #31
 8002554:	2101      	movs	r1, #1
 8002556:	2002      	movs	r0, #2
 8002558:	f000 fd76 	bl	8003048 <rotateInPosMode>
}
 800255c:	bf00      	nop
 800255e:	bd80      	pop	{r7, pc}

08002560 <b>:

void b()
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
    while (rotate_flag % 4 != 0)
 8002564:	e001      	b.n	800256a <b+0xa>
        K();
 8002566:	f7ff ff9b 	bl	80024a0 <K>
    while (rotate_flag % 4 != 0)
 800256a:	4b07      	ldr	r3, [pc, #28]	; (8002588 <b+0x28>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1f7      	bne.n	8002566 <b+0x6>
    HAL_Delay(500);
 8002576:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800257a:	f002 fe7f 	bl	800527c <HAL_Delay>
    C();
 800257e:	f7ff ffbf 	bl	8002500 <C>
}
 8002582:	bf00      	nop
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	200020c0 	.word	0x200020c0

0800258c <b1>:

void b1()
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
    while (rotate_flag % 4 != 0)
 8002590:	e001      	b.n	8002596 <b1+0xa>
        K();
 8002592:	f7ff ff85 	bl	80024a0 <K>
    while (rotate_flag % 4 != 0)
 8002596:	4b07      	ldr	r3, [pc, #28]	; (80025b4 <b1+0x28>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0303 	and.w	r3, r3, #3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1f7      	bne.n	8002592 <b1+0x6>
    HAL_Delay(500);
 80025a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80025a6:	f002 fe69 	bl	800527c <HAL_Delay>
    C1();
 80025aa:	f7ff ffb9 	bl	8002520 <C1>
}
 80025ae:	bf00      	nop
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	200020c0 	.word	0x200020c0

080025b8 <b2>:

void b2()
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
    while (rotate_flag % 4 != 0)
 80025bc:	e001      	b.n	80025c2 <b2+0xa>
        K();
 80025be:	f7ff ff6f 	bl	80024a0 <K>
    while (rotate_flag % 4 != 0)
 80025c2:	4b07      	ldr	r3, [pc, #28]	; (80025e0 <b2+0x28>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0303 	and.w	r3, r3, #3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1f7      	bne.n	80025be <b2+0x6>
    HAL_Delay(500);
 80025ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80025d2:	f002 fe53 	bl	800527c <HAL_Delay>
    C2();
 80025d6:	f7ff ffb3 	bl	8002540 <C2>
}
 80025da:	bf00      	nop
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	200020c0 	.word	0x200020c0

080025e4 <u>:

void u()
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
    while (rotate_flag % 4 != 1)
 80025e8:	e001      	b.n	80025ee <u+0xa>
        K();
 80025ea:	f7ff ff59 	bl	80024a0 <K>
    while (rotate_flag % 4 != 1)
 80025ee:	4b09      	ldr	r3, [pc, #36]	; (8002614 <u+0x30>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	425a      	negs	r2, r3
 80025f4:	f003 0303 	and.w	r3, r3, #3
 80025f8:	f002 0203 	and.w	r2, r2, #3
 80025fc:	bf58      	it	pl
 80025fe:	4253      	negpl	r3, r2
 8002600:	2b01      	cmp	r3, #1
 8002602:	d1f2      	bne.n	80025ea <u+0x6>
    HAL_Delay(500);
 8002604:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002608:	f002 fe38 	bl	800527c <HAL_Delay>
    C();
 800260c:	f7ff ff78 	bl	8002500 <C>
}
 8002610:	bf00      	nop
 8002612:	bd80      	pop	{r7, pc}
 8002614:	200020c0 	.word	0x200020c0

08002618 <u1>:

void u1()
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
    while (rotate_flag % 4 != 1)
 800261c:	e001      	b.n	8002622 <u1+0xa>
        K();
 800261e:	f7ff ff3f 	bl	80024a0 <K>
    while (rotate_flag % 4 != 1)
 8002622:	4b09      	ldr	r3, [pc, #36]	; (8002648 <u1+0x30>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	425a      	negs	r2, r3
 8002628:	f003 0303 	and.w	r3, r3, #3
 800262c:	f002 0203 	and.w	r2, r2, #3
 8002630:	bf58      	it	pl
 8002632:	4253      	negpl	r3, r2
 8002634:	2b01      	cmp	r3, #1
 8002636:	d1f2      	bne.n	800261e <u1+0x6>
    HAL_Delay(500);
 8002638:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800263c:	f002 fe1e 	bl	800527c <HAL_Delay>
    C1();
 8002640:	f7ff ff6e 	bl	8002520 <C1>
}
 8002644:	bf00      	nop
 8002646:	bd80      	pop	{r7, pc}
 8002648:	200020c0 	.word	0x200020c0

0800264c <u2>:

void u2()
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
    while (rotate_flag % 4 != 1)
 8002650:	e001      	b.n	8002656 <u2+0xa>
        K();
 8002652:	f7ff ff25 	bl	80024a0 <K>
    while (rotate_flag % 4 != 1)
 8002656:	4b09      	ldr	r3, [pc, #36]	; (800267c <u2+0x30>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	425a      	negs	r2, r3
 800265c:	f003 0303 	and.w	r3, r3, #3
 8002660:	f002 0203 	and.w	r2, r2, #3
 8002664:	bf58      	it	pl
 8002666:	4253      	negpl	r3, r2
 8002668:	2b01      	cmp	r3, #1
 800266a:	d1f2      	bne.n	8002652 <u2+0x6>
    HAL_Delay(500);
 800266c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002670:	f002 fe04 	bl	800527c <HAL_Delay>
    C2();
 8002674:	f7ff ff64 	bl	8002540 <C2>
}
 8002678:	bf00      	nop
 800267a:	bd80      	pop	{r7, pc}
 800267c:	200020c0 	.word	0x200020c0

08002680 <f>:

void f()
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
    while (rotate_flag % 4 != 2)
 8002684:	e001      	b.n	800268a <f+0xa>
        K();
 8002686:	f7ff ff0b 	bl	80024a0 <K>
    while (rotate_flag % 4 != 2)
 800268a:	4b09      	ldr	r3, [pc, #36]	; (80026b0 <f+0x30>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	425a      	negs	r2, r3
 8002690:	f003 0303 	and.w	r3, r3, #3
 8002694:	f002 0203 	and.w	r2, r2, #3
 8002698:	bf58      	it	pl
 800269a:	4253      	negpl	r3, r2
 800269c:	2b02      	cmp	r3, #2
 800269e:	d1f2      	bne.n	8002686 <f+0x6>
    HAL_Delay(500);
 80026a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80026a4:	f002 fdea 	bl	800527c <HAL_Delay>
    C();
 80026a8:	f7ff ff2a 	bl	8002500 <C>
}
 80026ac:	bf00      	nop
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	200020c0 	.word	0x200020c0

080026b4 <f1>:

void f1()
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
    while (rotate_flag % 4 != 2)
 80026b8:	e001      	b.n	80026be <f1+0xa>
        K();
 80026ba:	f7ff fef1 	bl	80024a0 <K>
    while (rotate_flag % 4 != 2)
 80026be:	4b09      	ldr	r3, [pc, #36]	; (80026e4 <f1+0x30>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	425a      	negs	r2, r3
 80026c4:	f003 0303 	and.w	r3, r3, #3
 80026c8:	f002 0203 	and.w	r2, r2, #3
 80026cc:	bf58      	it	pl
 80026ce:	4253      	negpl	r3, r2
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d1f2      	bne.n	80026ba <f1+0x6>
    HAL_Delay(500);
 80026d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80026d8:	f002 fdd0 	bl	800527c <HAL_Delay>
    C1();
 80026dc:	f7ff ff20 	bl	8002520 <C1>
}
 80026e0:	bf00      	nop
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	200020c0 	.word	0x200020c0

080026e8 <f2>:

void f2()
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
    while (rotate_flag % 4 != 2)
 80026ec:	e001      	b.n	80026f2 <f2+0xa>
        K();
 80026ee:	f7ff fed7 	bl	80024a0 <K>
    while (rotate_flag % 4 != 2)
 80026f2:	4b09      	ldr	r3, [pc, #36]	; (8002718 <f2+0x30>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	425a      	negs	r2, r3
 80026f8:	f003 0303 	and.w	r3, r3, #3
 80026fc:	f002 0203 	and.w	r2, r2, #3
 8002700:	bf58      	it	pl
 8002702:	4253      	negpl	r3, r2
 8002704:	2b02      	cmp	r3, #2
 8002706:	d1f2      	bne.n	80026ee <f2+0x6>
    HAL_Delay(500);
 8002708:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800270c:	f002 fdb6 	bl	800527c <HAL_Delay>
    C2();
 8002710:	f7ff ff16 	bl	8002540 <C2>
}
 8002714:	bf00      	nop
 8002716:	bd80      	pop	{r7, pc}
 8002718:	200020c0 	.word	0x200020c0

0800271c <d>:

void d()
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
    while (rotate_flag % 4 != 3)
 8002720:	e001      	b.n	8002726 <d+0xa>
        K();
 8002722:	f7ff febd 	bl	80024a0 <K>
    while (rotate_flag % 4 != 3)
 8002726:	4b09      	ldr	r3, [pc, #36]	; (800274c <d+0x30>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	425a      	negs	r2, r3
 800272c:	f003 0303 	and.w	r3, r3, #3
 8002730:	f002 0203 	and.w	r2, r2, #3
 8002734:	bf58      	it	pl
 8002736:	4253      	negpl	r3, r2
 8002738:	2b03      	cmp	r3, #3
 800273a:	d1f2      	bne.n	8002722 <d+0x6>
    HAL_Delay(500);
 800273c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002740:	f002 fd9c 	bl	800527c <HAL_Delay>
    C();
 8002744:	f7ff fedc 	bl	8002500 <C>
}
 8002748:	bf00      	nop
 800274a:	bd80      	pop	{r7, pc}
 800274c:	200020c0 	.word	0x200020c0

08002750 <d1>:

void d1()
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
    while (rotate_flag % 4 != 3)
 8002754:	e001      	b.n	800275a <d1+0xa>
        K();
 8002756:	f7ff fea3 	bl	80024a0 <K>
    while (rotate_flag % 4 != 3)
 800275a:	4b09      	ldr	r3, [pc, #36]	; (8002780 <d1+0x30>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	425a      	negs	r2, r3
 8002760:	f003 0303 	and.w	r3, r3, #3
 8002764:	f002 0203 	and.w	r2, r2, #3
 8002768:	bf58      	it	pl
 800276a:	4253      	negpl	r3, r2
 800276c:	2b03      	cmp	r3, #3
 800276e:	d1f2      	bne.n	8002756 <d1+0x6>
    HAL_Delay(500);
 8002770:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002774:	f002 fd82 	bl	800527c <HAL_Delay>
    C1();
 8002778:	f7ff fed2 	bl	8002520 <C1>
}
 800277c:	bf00      	nop
 800277e:	bd80      	pop	{r7, pc}
 8002780:	200020c0 	.word	0x200020c0

08002784 <d2>:

void d2()
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
    while (rotate_flag % 4 != 3)
 8002788:	e001      	b.n	800278e <d2+0xa>
        K();
 800278a:	f7ff fe89 	bl	80024a0 <K>
    while (rotate_flag % 4 != 3)
 800278e:	4b09      	ldr	r3, [pc, #36]	; (80027b4 <d2+0x30>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	425a      	negs	r2, r3
 8002794:	f003 0303 	and.w	r3, r3, #3
 8002798:	f002 0203 	and.w	r2, r2, #3
 800279c:	bf58      	it	pl
 800279e:	4253      	negpl	r3, r2
 80027a0:	2b03      	cmp	r3, #3
 80027a2:	d1f2      	bne.n	800278a <d2+0x6>
    HAL_Delay(500);
 80027a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80027a8:	f002 fd68 	bl	800527c <HAL_Delay>
    C2();
 80027ac:	f7ff fec8 	bl	8002540 <C2>
}
 80027b0:	bf00      	nop
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	200020c0 	.word	0x200020c0

080027b8 <r>:

void r() { rotateInPosMode(1, 0, 270, 1); }
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	2301      	movs	r3, #1
 80027be:	f44f 7287 	mov.w	r2, #270	; 0x10e
 80027c2:	2100      	movs	r1, #0
 80027c4:	2001      	movs	r0, #1
 80027c6:	f000 fc3f 	bl	8003048 <rotateInPosMode>
 80027ca:	bf00      	nop
 80027cc:	bd80      	pop	{r7, pc}

080027ce <r2>:
void r2() { rotateInPosMode(1, 0, 180, 1); }
 80027ce:	b580      	push	{r7, lr}
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	2301      	movs	r3, #1
 80027d4:	22b4      	movs	r2, #180	; 0xb4
 80027d6:	2100      	movs	r1, #0
 80027d8:	2001      	movs	r0, #1
 80027da:	f000 fc35 	bl	8003048 <rotateInPosMode>
 80027de:	bf00      	nop
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <r1>:
void r1() { rotateInPosMode(1, 0, 90, 1); }
 80027e2:	b580      	push	{r7, lr}
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	2301      	movs	r3, #1
 80027e8:	225a      	movs	r2, #90	; 0x5a
 80027ea:	2100      	movs	r1, #0
 80027ec:	2001      	movs	r0, #1
 80027ee:	f000 fc2b 	bl	8003048 <rotateInPosMode>
 80027f2:	bf00      	nop
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <l>:

void l() { rotateInPosMode(3, 1, 90, 1); }
 80027f6:	b580      	push	{r7, lr}
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	2301      	movs	r3, #1
 80027fc:	225a      	movs	r2, #90	; 0x5a
 80027fe:	2101      	movs	r1, #1
 8002800:	2003      	movs	r0, #3
 8002802:	f000 fc21 	bl	8003048 <rotateInPosMode>
 8002806:	bf00      	nop
 8002808:	bd80      	pop	{r7, pc}

0800280a <l2>:
void l2() { rotateInPosMode(3, 1, 180, 1); }
 800280a:	b580      	push	{r7, lr}
 800280c:	af00      	add	r7, sp, #0
 800280e:	2301      	movs	r3, #1
 8002810:	22b4      	movs	r2, #180	; 0xb4
 8002812:	2101      	movs	r1, #1
 8002814:	2003      	movs	r0, #3
 8002816:	f000 fc17 	bl	8003048 <rotateInPosMode>
 800281a:	bf00      	nop
 800281c:	bd80      	pop	{r7, pc}

0800281e <l1>:
void l1() { rotateInPosMode(3, 1, 270, 1); }
 800281e:	b580      	push	{r7, lr}
 8002820:	af00      	add	r7, sp, #0
 8002822:	2301      	movs	r3, #1
 8002824:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8002828:	2101      	movs	r1, #1
 800282a:	2003      	movs	r0, #3
 800282c:	f000 fc0c 	bl	8003048 <rotateInPosMode>
 8002830:	bf00      	nop
 8002832:	bd80      	pop	{r7, pc}

08002834 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002834:	b590      	push	{r4, r7, lr}
 8002836:	b0eb      	sub	sp, #428	; 0x1ac
 8002838:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800283a:	f002 fcbd 	bl	80051b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800283e:	f000 fbb9 	bl	8002fb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002842:	f7ff f8a9 	bl	8001998 <MX_GPIO_Init>
  MX_DMA_Init();
 8002846:	f7fe ffd7 	bl	80017f8 <MX_DMA_Init>
  MX_FSMC_Init();
 800284a:	f7fe fff3 	bl	8001834 <MX_FSMC_Init>
  MX_USART1_UART_Init();
 800284e:	f002 f801 	bl	8004854 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8002852:	f002 f829 	bl	80048a8 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8002856:	f001 fed3 	bl	8004600 <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  motor_flag = 7;
 800285a:	4b54      	ldr	r3, [pc, #336]	; (80029ac <main+0x178>)
 800285c:	2207      	movs	r2, #7
 800285e:	701a      	strb	r2, [r3, #0]

  HAL_UART_Receive_IT(&huart1, (uint8_t *)&RxBuffer, 3);
 8002860:	2203      	movs	r2, #3
 8002862:	4953      	ldr	r1, [pc, #332]	; (80029b0 <main+0x17c>)
 8002864:	4853      	ldr	r0, [pc, #332]	; (80029b4 <main+0x180>)
 8002866:	f004 ff3a 	bl	80076de <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart3, (uint8_t *)&rx_buffer, 1);
 800286a:	2201      	movs	r2, #1
 800286c:	4952      	ldr	r1, [pc, #328]	; (80029b8 <main+0x184>)
 800286e:	4853      	ldr	r0, [pc, #332]	; (80029bc <main+0x188>)
 8002870:	f004 ff35 	bl	80076de <HAL_UART_Receive_IT>
  // HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_4, DMADataBuf, FRAME_SIZE);
  // stripToDMABuffer(&orange , DMADataBuf, 15);

  LCD_INIT();
 8002874:	f7ff f9c9 	bl	8001c0a <LCD_INIT>
  cube_t cube;
  memset(cube.face, 0, 54);
 8002878:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800287c:	2236      	movs	r2, #54	; 0x36
 800287e:	2100      	movs	r1, #0
 8002880:	4618      	mov	r0, r3
 8002882:	f005 fc7d 	bl	8008180 <memset>
  cube.face[4] = 'U';
 8002886:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800288a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800288e:	2255      	movs	r2, #85	; 0x55
 8002890:	711a      	strb	r2, [r3, #4]
  cube.face[13] = 'R';
 8002892:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002896:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800289a:	2252      	movs	r2, #82	; 0x52
 800289c:	735a      	strb	r2, [r3, #13]
  cube.face[22] = 'F';
 800289e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80028a2:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80028a6:	2246      	movs	r2, #70	; 0x46
 80028a8:	759a      	strb	r2, [r3, #22]
  cube.face[31] = 'D';
 80028aa:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80028ae:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80028b2:	2244      	movs	r2, #68	; 0x44
 80028b4:	77da      	strb	r2, [r3, #31]
  cube.face[40] = 'L';
 80028b6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80028ba:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80028be:	224c      	movs	r2, #76	; 0x4c
 80028c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  cube.face[49] = 'B';
 80028c4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80028c8:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80028cc:	2242      	movs	r2, #66	; 0x42
 80028ce:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  // char line_buffer[54]  = "BBBFULRUBUURFRRRDFDFLUFDLRUUUFFDRLDLRRFLLBBLFDLUBBDDBD";
  // memcpy(cube.face, line_buffer, 54);
  LCD_Clear(50, 80, 140, 70, RED);
 80028d2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80028d6:	9300      	str	r3, [sp, #0]
 80028d8:	2346      	movs	r3, #70	; 0x46
 80028da:	228c      	movs	r2, #140	; 0x8c
 80028dc:	2150      	movs	r1, #80	; 0x50
 80028de:	2032      	movs	r0, #50	; 0x32
 80028e0:	f7ff fb8d 	bl	8001ffe <LCD_Clear>
  LCD_DrawString(75, 100, "PROGRAM START");
 80028e4:	4a36      	ldr	r2, [pc, #216]	; (80029c0 <main+0x18c>)
 80028e6:	2164      	movs	r1, #100	; 0x64
 80028e8:	204b      	movs	r0, #75	; 0x4b
 80028ea:	f7ff fbf1 	bl	80020d0 <LCD_DrawString>
  drawCube(cube.face);
 80028ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7ff fc8e 	bl	8002214 <drawCube>

  HAL_Delay(2000);
 80028f8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80028fc:	f002 fcbe 	bl	800527c <HAL_Delay>
  //  C2();
  while (Ov7725_Init() != SUCCESS)
 8002900:	bf00      	nop
 8002902:	f7fe fbdb 	bl	80010bc <Ov7725_Init>
 8002906:	4603      	mov	r3, r0
 8002908:	2b01      	cmp	r3, #1
 800290a:	d1fa      	bne.n	8002902 <main+0xce>
    ;
  while (!XPT2046_Touch_Calibrate())
 800290c:	bf00      	nop
 800290e:	f002 faed 	bl	8004eec <XPT2046_Touch_Calibrate>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d0fa      	beq.n	800290e <main+0xda>
    ;
  LCD_GramScan(1);
 8002918:	2001      	movs	r0, #1
 800291a:	f7ff fd0f 	bl	800233c <LCD_GramScan>
  Ov7725_vsync = 0;
 800291e:	4b29      	ldr	r3, [pc, #164]	; (80029c4 <main+0x190>)
 8002920:	2200      	movs	r2, #0
 8002922:	701a      	strb	r2, [r3, #0]
  uint8_t cnt = 0;
 8002924:	2300      	movs	r3, #0
 8002926:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
  uint8_t startCam = 0;
 800292a:	2300      	movs	r3, #0
 800292c:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
//  C();
//  K3();
//
//  C();
  while (1 && bt_flags != 4)
 8002930:	e323      	b.n	8002f7a <main+0x746>
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
    ucXPT2046_TouchFlag = 0;
 8002932:	4b25      	ldr	r3, [pc, #148]	; (80029c8 <main+0x194>)
 8002934:	2200      	movs	r2, #0
 8002936:	701a      	strb	r2, [r3, #0]
    if (bt_flags == 2)
 8002938:	4b24      	ldr	r3, [pc, #144]	; (80029cc <main+0x198>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d102      	bne.n	8002948 <main+0x114>
      startCam = 1;
 8002942:	2301      	movs	r3, #1
 8002944:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
    if (startCam)
 8002948:	f897 319e 	ldrb.w	r3, [r7, #414]	; 0x19e
 800294c:	2b00      	cmp	r3, #0
 800294e:	f000 8314 	beq.w	8002f7a <main+0x746>
    {
      if (Ov7725_vsync == 2 && cnt < 12)
 8002952:	4b1c      	ldr	r3, [pc, #112]	; (80029c4 <main+0x190>)
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	b2db      	uxtb	r3, r3
 8002958:	2b02      	cmp	r3, #2
 800295a:	f040 8223 	bne.w	8002da4 <main+0x570>
 800295e:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8002962:	2b0b      	cmp	r3, #11
 8002964:	f200 821e 	bhi.w	8002da4 <main+0x570>
      {
        FIFO_PREPARE;
 8002968:	4b19      	ldr	r3, [pc, #100]	; (80029d0 <main+0x19c>)
 800296a:	2204      	movs	r2, #4
 800296c:	615a      	str	r2, [r3, #20]
 800296e:	4b19      	ldr	r3, [pc, #100]	; (80029d4 <main+0x1a0>)
 8002970:	2220      	movs	r2, #32
 8002972:	615a      	str	r2, [r3, #20]
 8002974:	4b17      	ldr	r3, [pc, #92]	; (80029d4 <main+0x1a0>)
 8002976:	2220      	movs	r2, #32
 8002978:	611a      	str	r2, [r3, #16]
 800297a:	4b15      	ldr	r3, [pc, #84]	; (80029d0 <main+0x19c>)
 800297c:	2204      	movs	r2, #4
 800297e:	611a      	str	r2, [r3, #16]
 8002980:	4b14      	ldr	r3, [pc, #80]	; (80029d4 <main+0x1a0>)
 8002982:	2220      	movs	r2, #32
 8002984:	615a      	str	r2, [r3, #20]
 8002986:	4b13      	ldr	r3, [pc, #76]	; (80029d4 <main+0x1a0>)
 8002988:	2220      	movs	r2, #32
 800298a:	611a      	str	r2, [r3, #16]
        // LCD_Rst();
        uint16_t temp_colors[9];
        uint16_t squareColors[9];
        //	uint16_t x, y;
        uint16_t Camera_Data;
        memset(squareColors, 0, sizeof(squareColors));
 800298c:	463b      	mov	r3, r7
 800298e:	2212      	movs	r2, #18
 8002990:	2100      	movs	r1, #0
 8002992:	4618      	mov	r0, r3
 8002994:	f005 fbf4 	bl	8008180 <memset>
        LCD_Cam_Gram();
 8002998:	f7ff fc10 	bl	80021bc <LCD_Cam_Gram>
        for (int i = 0; i < 240; i++)
 800299c:	2300      	movs	r3, #0
 800299e:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 80029a2:	e0d5      	b.n	8002b50 <main+0x31c>
        {
          for (int j = 0; j < 320; j++)
 80029a4:	2300      	movs	r3, #0
 80029a6:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 80029aa:	e0c6      	b.n	8002b3a <main+0x306>
 80029ac:	200020c6 	.word	0x200020c6
 80029b0:	200020c8 	.word	0x200020c8
 80029b4:	20002158 	.word	0x20002158
 80029b8:	200020c5 	.word	0x200020c5
 80029bc:	20002198 	.word	0x20002198
 80029c0:	08008b94 	.word	0x08008b94
 80029c4:	200020c4 	.word	0x200020c4
 80029c8:	200021d8 	.word	0x200021d8
 80029cc:	20002154 	.word	0x20002154
 80029d0:	40010800 	.word	0x40010800
 80029d4:	40011000 	.word	0x40011000
          {
            READ_FIFO_PIXEL(Camera_Data);
 80029d8:	2300      	movs	r3, #0
 80029da:	f8a7 318e 	strh.w	r3, [r7, #398]	; 0x18e
 80029de:	4bc0      	ldr	r3, [pc, #768]	; (8002ce0 <main+0x4ac>)
 80029e0:	2220      	movs	r2, #32
 80029e2:	615a      	str	r2, [r3, #20]
 80029e4:	4bbf      	ldr	r3, [pc, #764]	; (8002ce4 <main+0x4b0>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80029ee:	f8a7 318e 	strh.w	r3, [r7, #398]	; 0x18e
 80029f2:	4bbb      	ldr	r3, [pc, #748]	; (8002ce0 <main+0x4ac>)
 80029f4:	2220      	movs	r2, #32
 80029f6:	611a      	str	r2, [r3, #16]
 80029f8:	4bb9      	ldr	r3, [pc, #740]	; (8002ce0 <main+0x4ac>)
 80029fa:	2220      	movs	r2, #32
 80029fc:	615a      	str	r2, [r3, #20]
 80029fe:	4bb9      	ldr	r3, [pc, #740]	; (8002ce4 <main+0x4b0>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	0a1b      	lsrs	r3, r3, #8
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	f8b7 318e 	ldrh.w	r3, [r7, #398]	; 0x18e
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	f8a7 318e 	strh.w	r3, [r7, #398]	; 0x18e
 8002a12:	4bb3      	ldr	r3, [pc, #716]	; (8002ce0 <main+0x4ac>)
 8002a14:	2220      	movs	r2, #32
 8002a16:	611a      	str	r2, [r3, #16]
            LCD_Write_Data(Camera_Data);
 8002a18:	f8b7 318e 	ldrh.w	r3, [r7, #398]	; 0x18e
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7ff f94d 	bl	8001cbc <LCD_Write_Data>
            // bottom row
            if (j == 110 && i == 60)
 8002a22:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002a26:	2b6e      	cmp	r3, #110	; 0x6e
 8002a28:	d10a      	bne.n	8002a40 <main+0x20c>
 8002a2a:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8002a2e:	2b3c      	cmp	r3, #60	; 0x3c
 8002a30:	d106      	bne.n	8002a40 <main+0x20c>
              squareColors[0] = Camera_Data;
 8002a32:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002a36:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002a3a:	f8b7 218e 	ldrh.w	r2, [r7, #398]	; 0x18e
 8002a3e:	801a      	strh	r2, [r3, #0]

            if (j == 110 && i == 120)
 8002a40:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002a44:	2b6e      	cmp	r3, #110	; 0x6e
 8002a46:	d10a      	bne.n	8002a5e <main+0x22a>
 8002a48:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8002a4c:	2b78      	cmp	r3, #120	; 0x78
 8002a4e:	d106      	bne.n	8002a5e <main+0x22a>
              squareColors[3] = Camera_Data;
 8002a50:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002a54:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002a58:	f8b7 218e 	ldrh.w	r2, [r7, #398]	; 0x18e
 8002a5c:	80da      	strh	r2, [r3, #6]

            if (j == 110 && i == 170)
 8002a5e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002a62:	2b6e      	cmp	r3, #110	; 0x6e
 8002a64:	d10a      	bne.n	8002a7c <main+0x248>
 8002a66:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8002a6a:	2baa      	cmp	r3, #170	; 0xaa
 8002a6c:	d106      	bne.n	8002a7c <main+0x248>
              squareColors[6] = Camera_Data;
 8002a6e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002a72:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002a76:	f8b7 218e 	ldrh.w	r2, [r7, #398]	; 0x18e
 8002a7a:	819a      	strh	r2, [r3, #12]

            // // middle row
            if (j == 160 && i == 60)
 8002a7c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002a80:	2ba0      	cmp	r3, #160	; 0xa0
 8002a82:	d10a      	bne.n	8002a9a <main+0x266>
 8002a84:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8002a88:	2b3c      	cmp	r3, #60	; 0x3c
 8002a8a:	d106      	bne.n	8002a9a <main+0x266>
              squareColors[1] = Camera_Data;
 8002a8c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002a90:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002a94:	f8b7 218e 	ldrh.w	r2, [r7, #398]	; 0x18e
 8002a98:	805a      	strh	r2, [r3, #2]

            if (j == 160 && i == 120)
 8002a9a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002a9e:	2ba0      	cmp	r3, #160	; 0xa0
 8002aa0:	d10a      	bne.n	8002ab8 <main+0x284>
 8002aa2:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8002aa6:	2b78      	cmp	r3, #120	; 0x78
 8002aa8:	d106      	bne.n	8002ab8 <main+0x284>
              squareColors[4] = Camera_Data;
 8002aaa:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002aae:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002ab2:	f8b7 218e 	ldrh.w	r2, [r7, #398]	; 0x18e
 8002ab6:	811a      	strh	r2, [r3, #8]

            if (j == 160 && i == 170)
 8002ab8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002abc:	2ba0      	cmp	r3, #160	; 0xa0
 8002abe:	d10a      	bne.n	8002ad6 <main+0x2a2>
 8002ac0:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8002ac4:	2baa      	cmp	r3, #170	; 0xaa
 8002ac6:	d106      	bne.n	8002ad6 <main+0x2a2>
              squareColors[7] = Camera_Data;
 8002ac8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002acc:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002ad0:	f8b7 218e 	ldrh.w	r2, [r7, #398]	; 0x18e
 8002ad4:	81da      	strh	r2, [r3, #14]

            // top row

            if (j == 210 && i == 60)
 8002ad6:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002ada:	2bd2      	cmp	r3, #210	; 0xd2
 8002adc:	d10a      	bne.n	8002af4 <main+0x2c0>
 8002ade:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8002ae2:	2b3c      	cmp	r3, #60	; 0x3c
 8002ae4:	d106      	bne.n	8002af4 <main+0x2c0>
              squareColors[2] = Camera_Data;
 8002ae6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002aea:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002aee:	f8b7 218e 	ldrh.w	r2, [r7, #398]	; 0x18e
 8002af2:	809a      	strh	r2, [r3, #4]

            if (j == 210 && i == 120)
 8002af4:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002af8:	2bd2      	cmp	r3, #210	; 0xd2
 8002afa:	d10a      	bne.n	8002b12 <main+0x2de>
 8002afc:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8002b00:	2b78      	cmp	r3, #120	; 0x78
 8002b02:	d106      	bne.n	8002b12 <main+0x2de>
              squareColors[5] = Camera_Data;
 8002b04:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002b08:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002b0c:	f8b7 218e 	ldrh.w	r2, [r7, #398]	; 0x18e
 8002b10:	815a      	strh	r2, [r3, #10]

            if (j == 210 && i == 170)
 8002b12:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002b16:	2bd2      	cmp	r3, #210	; 0xd2
 8002b18:	d10a      	bne.n	8002b30 <main+0x2fc>
 8002b1a:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8002b1e:	2baa      	cmp	r3, #170	; 0xaa
 8002b20:	d106      	bne.n	8002b30 <main+0x2fc>
              squareColors[8] = Camera_Data;
 8002b22:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002b26:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002b2a:	f8b7 218e 	ldrh.w	r2, [r7, #398]	; 0x18e
 8002b2e:	821a      	strh	r2, [r3, #16]
          for (int j = 0; j < 320; j++)
 8002b30:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002b34:	3301      	adds	r3, #1
 8002b36:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8002b3a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002b3e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002b42:	f6ff af49 	blt.w	80029d8 <main+0x1a4>
        for (int i = 0; i < 240; i++)
 8002b46:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8002b50:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8002b54:	2bef      	cmp	r3, #239	; 0xef
 8002b56:	f77f af25 	ble.w	80029a4 <main+0x170>
          }
        }
        uint8_t confirm_flag = 0;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	f887 3193 	strb.w	r3, [r7, #403]	; 0x193

        // j , i
        KNearest_match(squareColors, temp_colors, cnt, cube.face, confirm_flag);
 8002b60:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002b64:	f897 219f 	ldrb.w	r2, [r7, #415]	; 0x19f
 8002b68:	f107 0114 	add.w	r1, r7, #20
 8002b6c:	4638      	mov	r0, r7
 8002b6e:	f897 3193 	ldrb.w	r3, [r7, #403]	; 0x193
 8002b72:	9300      	str	r3, [sp, #0]
 8002b74:	4623      	mov	r3, r4
 8002b76:	f7fe fd77 	bl	8001668 <KNearest_match>

        LCD_DrawEllipse(110, 60, 10, 10, temp_colors[0]);  // 0 bottom left
 8002b7a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002b7e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002b82:	881b      	ldrh	r3, [r3, #0]
 8002b84:	9300      	str	r3, [sp, #0]
 8002b86:	230a      	movs	r3, #10
 8002b88:	220a      	movs	r2, #10
 8002b8a:	213c      	movs	r1, #60	; 0x3c
 8002b8c:	206e      	movs	r0, #110	; 0x6e
 8002b8e:	f7ff facf 	bl	8002130 <LCD_DrawEllipse>
        LCD_DrawEllipse(110, 120, 10, 10, temp_colors[3]); // 1 bottom mid
 8002b92:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002b96:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002b9a:	88db      	ldrh	r3, [r3, #6]
 8002b9c:	9300      	str	r3, [sp, #0]
 8002b9e:	230a      	movs	r3, #10
 8002ba0:	220a      	movs	r2, #10
 8002ba2:	2178      	movs	r1, #120	; 0x78
 8002ba4:	206e      	movs	r0, #110	; 0x6e
 8002ba6:	f7ff fac3 	bl	8002130 <LCD_DrawEllipse>
        LCD_DrawEllipse(110, 170, 10, 10, temp_colors[6]); // 2 bottom right
 8002baa:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002bae:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002bb2:	899b      	ldrh	r3, [r3, #12]
 8002bb4:	9300      	str	r3, [sp, #0]
 8002bb6:	230a      	movs	r3, #10
 8002bb8:	220a      	movs	r2, #10
 8002bba:	21aa      	movs	r1, #170	; 0xaa
 8002bbc:	206e      	movs	r0, #110	; 0x6e
 8002bbe:	f7ff fab7 	bl	8002130 <LCD_DrawEllipse>

        LCD_DrawEllipse(160, 60, 10, 10, temp_colors[1]);  // 3 mid left
 8002bc2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002bc6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002bca:	885b      	ldrh	r3, [r3, #2]
 8002bcc:	9300      	str	r3, [sp, #0]
 8002bce:	230a      	movs	r3, #10
 8002bd0:	220a      	movs	r2, #10
 8002bd2:	213c      	movs	r1, #60	; 0x3c
 8002bd4:	20a0      	movs	r0, #160	; 0xa0
 8002bd6:	f7ff faab 	bl	8002130 <LCD_DrawEllipse>
        LCD_DrawEllipse(160, 120, 10, 10, temp_colors[4]); // 4 center
 8002bda:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002bde:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002be2:	891b      	ldrh	r3, [r3, #8]
 8002be4:	9300      	str	r3, [sp, #0]
 8002be6:	230a      	movs	r3, #10
 8002be8:	220a      	movs	r2, #10
 8002bea:	2178      	movs	r1, #120	; 0x78
 8002bec:	20a0      	movs	r0, #160	; 0xa0
 8002bee:	f7ff fa9f 	bl	8002130 <LCD_DrawEllipse>
        LCD_DrawEllipse(160, 170, 10, 10, temp_colors[7]); // 5 mid right
 8002bf2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002bf6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002bfa:	89db      	ldrh	r3, [r3, #14]
 8002bfc:	9300      	str	r3, [sp, #0]
 8002bfe:	230a      	movs	r3, #10
 8002c00:	220a      	movs	r2, #10
 8002c02:	21aa      	movs	r1, #170	; 0xaa
 8002c04:	20a0      	movs	r0, #160	; 0xa0
 8002c06:	f7ff fa93 	bl	8002130 <LCD_DrawEllipse>

        LCD_DrawEllipse(210, 60, 10, 10, temp_colors[2]);  // 6 top left
 8002c0a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002c0e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002c12:	889b      	ldrh	r3, [r3, #4]
 8002c14:	9300      	str	r3, [sp, #0]
 8002c16:	230a      	movs	r3, #10
 8002c18:	220a      	movs	r2, #10
 8002c1a:	213c      	movs	r1, #60	; 0x3c
 8002c1c:	20d2      	movs	r0, #210	; 0xd2
 8002c1e:	f7ff fa87 	bl	8002130 <LCD_DrawEllipse>
        LCD_DrawEllipse(210, 120, 10, 10, temp_colors[5]); // 7 top mid
 8002c22:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002c26:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002c2a:	895b      	ldrh	r3, [r3, #10]
 8002c2c:	9300      	str	r3, [sp, #0]
 8002c2e:	230a      	movs	r3, #10
 8002c30:	220a      	movs	r2, #10
 8002c32:	2178      	movs	r1, #120	; 0x78
 8002c34:	20d2      	movs	r0, #210	; 0xd2
 8002c36:	f7ff fa7b 	bl	8002130 <LCD_DrawEllipse>
        LCD_DrawEllipse(210, 170, 10, 10, temp_colors[8]); // 8 top right
 8002c3a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002c3e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002c42:	8a1b      	ldrh	r3, [r3, #16]
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	230a      	movs	r3, #10
 8002c48:	220a      	movs	r2, #10
 8002c4a:	21aa      	movs	r1, #170	; 0xaa
 8002c4c:	20d2      	movs	r0, #210	; 0xd2
 8002c4e:	f7ff fa6f 	bl	8002130 <LCD_DrawEllipse>
        HAL_Delay(1500);
 8002c52:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002c56:	f002 fb11 	bl	800527c <HAL_Delay>
        if (ucXPT2046_TouchFlag == 1)
 8002c5a:	4b23      	ldr	r3, [pc, #140]	; (8002ce8 <main+0x4b4>)
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d112      	bne.n	8002c8a <main+0x456>
        {
          bt_flags = 1;
 8002c64:	4b21      	ldr	r3, [pc, #132]	; (8002cec <main+0x4b8>)
 8002c66:	2201      	movs	r2, #1
 8002c68:	701a      	strb	r2, [r3, #0]
          ucXPT2046_TouchFlag = 0;
 8002c6a:	4b1f      	ldr	r3, [pc, #124]	; (8002ce8 <main+0x4b4>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	701a      	strb	r2, [r3, #0]
          HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8002c70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c74:	481e      	ldr	r0, [pc, #120]	; (8002cf0 <main+0x4bc>)
 8002c76:	f003 f9dc 	bl	8006032 <HAL_GPIO_TogglePin>
          HAL_Delay(100);
 8002c7a:	2064      	movs	r0, #100	; 0x64
 8002c7c:	f002 fafe 	bl	800527c <HAL_Delay>
          HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8002c80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c84:	481a      	ldr	r0, [pc, #104]	; (8002cf0 <main+0x4bc>)
 8002c86:	f003 f9d4 	bl	8006032 <HAL_GPIO_TogglePin>
        }
        if (bt_flags == 1)
 8002c8a:	4b18      	ldr	r3, [pc, #96]	; (8002cec <main+0x4b8>)
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d102      	bne.n	8002c9a <main+0x466>
          confirm_flag = 1;
 8002c94:	2301      	movs	r3, #1
 8002c96:	f887 3193 	strb.w	r3, [r7, #403]	; 0x193
        KNearest_match(squareColors, temp_colors, cnt, cube.face, confirm_flag);
 8002c9a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002c9e:	f897 219f 	ldrb.w	r2, [r7, #415]	; 0x19f
 8002ca2:	f107 0114 	add.w	r1, r7, #20
 8002ca6:	4638      	mov	r0, r7
 8002ca8:	f897 3193 	ldrb.w	r3, [r7, #403]	; 0x193
 8002cac:	9300      	str	r3, [sp, #0]
 8002cae:	4623      	mov	r3, r4
 8002cb0:	f7fe fcda 	bl	8001668 <KNearest_match>

        if (confirm_flag == 1)
 8002cb4:	f897 3193 	ldrb.w	r3, [r7, #403]	; 0x193
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d16f      	bne.n	8002d9c <main+0x568>
        {
          bt_flags = 5;
 8002cbc:	4b0b      	ldr	r3, [pc, #44]	; (8002cec <main+0x4b8>)
 8002cbe:	2205      	movs	r2, #5
 8002cc0:	701a      	strb	r2, [r3, #0]
          drawCube(cube.face);
 8002cc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7ff faa4 	bl	8002214 <drawCube>
          cnt++;
 8002ccc:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
          switch (cnt)
 8002cd6:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	e00a      	b.n	8002cf4 <main+0x4c0>
 8002cde:	bf00      	nop
 8002ce0:	40011000 	.word	0x40011000
 8002ce4:	40010c00 	.word	0x40010c00
 8002ce8:	200021d8 	.word	0x200021d8
 8002cec:	20002154 	.word	0x20002154
 8002cf0:	40010800 	.word	0x40010800
 8002cf4:	2b0b      	cmp	r3, #11
 8002cf6:	d84d      	bhi.n	8002d94 <main+0x560>
 8002cf8:	a201      	add	r2, pc, #4	; (adr r2, 8002d00 <main+0x4cc>)
 8002cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cfe:	bf00      	nop
 8002d00:	08002d31 	.word	0x08002d31
 8002d04:	08002d31 	.word	0x08002d31
 8002d08:	08002d31 	.word	0x08002d31
 8002d0c:	08002d37 	.word	0x08002d37
 8002d10:	08002d45 	.word	0x08002d45
 8002d14:	08002d45 	.word	0x08002d45
 8002d18:	08002d45 	.word	0x08002d45
 8002d1c:	08002d5b 	.word	0x08002d5b
 8002d20:	08002d71 	.word	0x08002d71
 8002d24:	08002d71 	.word	0x08002d71
 8002d28:	08002d71 	.word	0x08002d71
 8002d2c:	08002d87 	.word	0x08002d87
          {
          case 1:
          case 2:
          case 3:
            K();
 8002d30:	f7ff fbb6 	bl	80024a0 <K>
            break;
 8002d34:	e02e      	b.n	8002d94 <main+0x560>
          case 4:
            K();
 8002d36:	f7ff fbb3 	bl	80024a0 <K>
            C();
 8002d3a:	f7ff fbe1 	bl	8002500 <C>
            K3();
 8002d3e:	f7ff fbc7 	bl	80024d0 <K3>
            break;
 8002d42:	e027      	b.n	8002d94 <main+0x560>
          case 5:
          case 6:
          case 7:
            K();
 8002d44:	f7ff fbac 	bl	80024a0 <K>
            C1();
 8002d48:	f7ff fbea 	bl	8002520 <C1>
            K();
 8002d4c:	f7ff fba8 	bl	80024a0 <K>
            C();
 8002d50:	f7ff fbd6 	bl	8002500 <C>
            K3();
 8002d54:	f7ff fbbc 	bl	80024d0 <K3>
            break;
 8002d58:	e01c      	b.n	8002d94 <main+0x560>
          case 8:
            K();
 8002d5a:	f7ff fba1 	bl	80024a0 <K>
            C1();
 8002d5e:	f7ff fbdf 	bl	8002520 <C1>
            K();
 8002d62:	f7ff fb9d 	bl	80024a0 <K>
            C1();
 8002d66:	f7ff fbdb 	bl	8002520 <C1>
            K3();
 8002d6a:	f7ff fbb1 	bl	80024d0 <K3>
            break;
 8002d6e:	e011      	b.n	8002d94 <main+0x560>
          case 9:
          case 10:
          case 11:
            K();
 8002d70:	f7ff fb96 	bl	80024a0 <K>
            C();
 8002d74:	f7ff fbc4 	bl	8002500 <C>
            K();
 8002d78:	f7ff fb92 	bl	80024a0 <K>
            C1();
 8002d7c:	f7ff fbd0 	bl	8002520 <C1>
            K3();
 8002d80:	f7ff fba6 	bl	80024d0 <K3>
            break;
 8002d84:	e006      	b.n	8002d94 <main+0x560>
          case 12:
            K();
 8002d86:	f7ff fb8b 	bl	80024a0 <K>
            C();
 8002d8a:	f7ff fbb9 	bl	8002500 <C>
            K();
 8002d8e:	f7ff fb87 	bl	80024a0 <K>
            break;
 8002d92:	bf00      	nop
          }
          HAL_Delay(1000);
 8002d94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d98:	f002 fa70 	bl	800527c <HAL_Delay>
        }
        Ov7725_vsync = 0;
 8002d9c:	4b7d      	ldr	r3, [pc, #500]	; (8002f94 <main+0x760>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	701a      	strb	r2, [r3, #0]
      {
 8002da2:	e0ea      	b.n	8002f7a <main+0x746>
      }
      else if (cnt == 12)
 8002da4:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8002da8:	2b0c      	cmp	r3, #12
 8002daa:	d121      	bne.n	8002df0 <main+0x5bc>
      {
        LCD_Clear(0, 0, 320, 320, CYAN);
 8002dac:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002db0:	9300      	str	r3, [sp, #0]
 8002db2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002db6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002dba:	2100      	movs	r1, #0
 8002dbc:	2000      	movs	r0, #0
 8002dbe:	f7ff f91e 	bl	8001ffe <LCD_Clear>
        LCD_DrawString(80, 100, "DETECTION DONE");
 8002dc2:	4a75      	ldr	r2, [pc, #468]	; (8002f98 <main+0x764>)
 8002dc4:	2164      	movs	r1, #100	; 0x64
 8002dc6:	2050      	movs	r0, #80	; 0x50
 8002dc8:	f7ff f982 	bl	80020d0 <LCD_DrawString>
        HAL_UART_Transmit(&huart3, (uint8_t *)cube.face, 54, 100);
 8002dcc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002dd0:	2364      	movs	r3, #100	; 0x64
 8002dd2:	2236      	movs	r2, #54	; 0x36
 8002dd4:	4871      	ldr	r0, [pc, #452]	; (8002f9c <main+0x768>)
 8002dd6:	f004 fba5 	bl	8007524 <HAL_UART_Transmit>
        drawCube(cube.face);
 8002dda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff fa18 	bl	8002214 <drawCube>
        cnt++;
 8002de4:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8002de8:	3301      	adds	r3, #1
 8002dea:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
 8002dee:	e0c4      	b.n	8002f7a <main+0x746>
      }
      else if (cnt > 12)
 8002df0:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8002df4:	2b0c      	cmp	r3, #12
 8002df6:	f240 80c0 	bls.w	8002f7a <main+0x746>
      {
        if (bt_flags == 3)
 8002dfa:	4b69      	ldr	r3, [pc, #420]	; (8002fa0 <main+0x76c>)
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b03      	cmp	r3, #3
 8002e02:	f040 80ba 	bne.w	8002f7a <main+0x746>
        {
          // char line_buffer[] = "ULUUUURBULRLRRRRRRUUBFFFFFFDDDDDDDDDRFBLLLLLLFUFBBBBBB";
          // memcpy(cube.face, line_buffer, 54);
          LCD_Clear(0, 0, 320, 320, RED);
 8002e06:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002e0a:	9300      	str	r3, [sp, #0]
 8002e0c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002e10:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002e14:	2100      	movs	r1, #0
 8002e16:	2000      	movs	r0, #0
 8002e18:	f7ff f8f1 	bl	8001ffe <LCD_Clear>
          LCD_DrawString(80, 100, "SOLVE BEGIN!");
 8002e1c:	4a61      	ldr	r2, [pc, #388]	; (8002fa4 <main+0x770>)
 8002e1e:	2164      	movs	r1, #100	; 0x64
 8002e20:	2050      	movs	r0, #80	; 0x50
 8002e22:	f7ff f955 	bl	80020d0 <LCD_DrawString>
          // drawCube(cube.face);
          HAL_Delay(50);
 8002e26:	2032      	movs	r0, #50	; 0x32
 8002e28:	f002 fa28 	bl	800527c <HAL_Delay>
          HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8002e2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e30:	485d      	ldr	r0, [pc, #372]	; (8002fa8 <main+0x774>)
 8002e32:	f003 f8fe 	bl	8006032 <HAL_GPIO_TogglePin>
          HAL_Delay(100);
 8002e36:	2064      	movs	r0, #100	; 0x64
 8002e38:	f002 fa20 	bl	800527c <HAL_Delay>
          HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8002e3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e40:	4859      	ldr	r0, [pc, #356]	; (8002fa8 <main+0x774>)
 8002e42:	f003 f8f6 	bl	8006032 <HAL_GPIO_TogglePin>
          solve_Naive(&cube);
 8002e46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f001 f912 	bl	8004074 <solve_Naive>
          LCD_DrawString(80, 150, "finish calculation!");
 8002e50:	4a56      	ldr	r2, [pc, #344]	; (8002fac <main+0x778>)
 8002e52:	2196      	movs	r1, #150	; 0x96
 8002e54:	2050      	movs	r0, #80	; 0x50
 8002e56:	f7ff f93b 	bl	80020d0 <LCD_DrawString>
          for (uint16_t i = 0; i < cube.routeLen; i++)
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	f8a7 3190 	strh.w	r3, [r7, #400]	; 0x190
 8002e60:	e06e      	b.n	8002f40 <main+0x70c>
          {
            switch (cube.route[i])
 8002e62:	f8b7 3190 	ldrh.w	r3, [r7, #400]	; 0x190
 8002e66:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8002e6a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002e6e:	4413      	add	r3, r2
 8002e70:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002e74:	2b11      	cmp	r3, #17
 8002e76:	d85d      	bhi.n	8002f34 <main+0x700>
 8002e78:	a201      	add	r2, pc, #4	; (adr r2, 8002e80 <main+0x64c>)
 8002e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e7e:	bf00      	nop
 8002e80:	08002ec9 	.word	0x08002ec9
 8002e84:	08002ecf 	.word	0x08002ecf
 8002e88:	08002ed5 	.word	0x08002ed5
 8002e8c:	08002edb 	.word	0x08002edb
 8002e90:	08002ee1 	.word	0x08002ee1
 8002e94:	08002ee7 	.word	0x08002ee7
 8002e98:	08002eed 	.word	0x08002eed
 8002e9c:	08002ef3 	.word	0x08002ef3
 8002ea0:	08002ef9 	.word	0x08002ef9
 8002ea4:	08002eff 	.word	0x08002eff
 8002ea8:	08002f05 	.word	0x08002f05
 8002eac:	08002f0b 	.word	0x08002f0b
 8002eb0:	08002f11 	.word	0x08002f11
 8002eb4:	08002f17 	.word	0x08002f17
 8002eb8:	08002f1d 	.word	0x08002f1d
 8002ebc:	08002f23 	.word	0x08002f23
 8002ec0:	08002f29 	.word	0x08002f29
 8002ec4:	08002f2f 	.word	0x08002f2f
            {
            case 0:
              l();
 8002ec8:	f7ff fc95 	bl	80027f6 <l>
              break;
 8002ecc:	e033      	b.n	8002f36 <main+0x702>
            case 1:
              l1();
 8002ece:	f7ff fca6 	bl	800281e <l1>
              break;
 8002ed2:	e030      	b.n	8002f36 <main+0x702>
            case 2:
              l2();
 8002ed4:	f7ff fc99 	bl	800280a <l2>
              break;
 8002ed8:	e02d      	b.n	8002f36 <main+0x702>
            case 3:
              r();
 8002eda:	f7ff fc6d 	bl	80027b8 <r>
              break;
 8002ede:	e02a      	b.n	8002f36 <main+0x702>
            case 4:
              r1();
 8002ee0:	f7ff fc7f 	bl	80027e2 <r1>
              break;
 8002ee4:	e027      	b.n	8002f36 <main+0x702>
            case 5:
              r2();
 8002ee6:	f7ff fc72 	bl	80027ce <r2>
              break;
 8002eea:	e024      	b.n	8002f36 <main+0x702>
            case 6:
              u();
 8002eec:	f7ff fb7a 	bl	80025e4 <u>
              break;
 8002ef0:	e021      	b.n	8002f36 <main+0x702>
            case 7:
              u1();
 8002ef2:	f7ff fb91 	bl	8002618 <u1>
              break;
 8002ef6:	e01e      	b.n	8002f36 <main+0x702>
            case 8:
              u2();
 8002ef8:	f7ff fba8 	bl	800264c <u2>
              break;
 8002efc:	e01b      	b.n	8002f36 <main+0x702>
            case 9:
              d();
 8002efe:	f7ff fc0d 	bl	800271c <d>
              break;
 8002f02:	e018      	b.n	8002f36 <main+0x702>
            case 10:
              d1();
 8002f04:	f7ff fc24 	bl	8002750 <d1>
              break;
 8002f08:	e015      	b.n	8002f36 <main+0x702>
            case 11:
              d2();
 8002f0a:	f7ff fc3b 	bl	8002784 <d2>
              break;
 8002f0e:	e012      	b.n	8002f36 <main+0x702>
            case 12:
              f();
 8002f10:	f7ff fbb6 	bl	8002680 <f>
              break;
 8002f14:	e00f      	b.n	8002f36 <main+0x702>
            case 13:
              f1();
 8002f16:	f7ff fbcd 	bl	80026b4 <f1>
              break;
 8002f1a:	e00c      	b.n	8002f36 <main+0x702>
            case 14:
              f2();
 8002f1c:	f7ff fbe4 	bl	80026e8 <f2>
              break;
 8002f20:	e009      	b.n	8002f36 <main+0x702>
            case 15:
              b();
 8002f22:	f7ff fb1d 	bl	8002560 <b>
              break;
 8002f26:	e006      	b.n	8002f36 <main+0x702>
            case 16:
              b1();
 8002f28:	f7ff fb30 	bl	800258c <b1>
              break;
 8002f2c:	e003      	b.n	8002f36 <main+0x702>
            case 17:
              b2();
 8002f2e:	f7ff fb43 	bl	80025b8 <b2>
              break;
 8002f32:	e000      	b.n	8002f36 <main+0x702>
            default:
              break;
 8002f34:	bf00      	nop
          for (uint16_t i = 0; i < cube.routeLen; i++)
 8002f36:	f8b7 3190 	ldrh.w	r3, [r7, #400]	; 0x190
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	f8a7 3190 	strh.w	r3, [r7, #400]	; 0x190
 8002f40:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002f44:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002f48:	f893 3162 	ldrb.w	r3, [r3, #354]	; 0x162
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	f8b7 2190 	ldrh.w	r2, [r7, #400]	; 0x190
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d385      	bcc.n	8002e62 <main+0x62e>
            }
          }
          LCD_Clear(0, 0, 320, 320, GREEN);
 8002f56:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002f5a:	9300      	str	r3, [sp, #0]
 8002f5c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002f60:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002f64:	2100      	movs	r1, #0
 8002f66:	2000      	movs	r0, #0
 8002f68:	f7ff f849 	bl	8001ffe <LCD_Clear>
          LCD_DrawString(80, 100, "SOLVE DONE!");
 8002f6c:	4a10      	ldr	r2, [pc, #64]	; (8002fb0 <main+0x77c>)
 8002f6e:	2164      	movs	r1, #100	; 0x64
 8002f70:	2050      	movs	r0, #80	; 0x50
 8002f72:	f7ff f8ad 	bl	80020d0 <LCD_DrawString>
          return 0;
 8002f76:	2300      	movs	r3, #0
 8002f78:	e006      	b.n	8002f88 <main+0x754>
  while (1 && bt_flags != 4)
 8002f7a:	4b09      	ldr	r3, [pc, #36]	; (8002fa0 <main+0x76c>)
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2b04      	cmp	r3, #4
 8002f82:	f47f acd6 	bne.w	8002932 <main+0xfe>
 8002f86:	2300      	movs	r3, #0
        }
      }
    }
    /* USER CODE END 3 */
  }
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f507 77d2 	add.w	r7, r7, #420	; 0x1a4
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd90      	pop	{r4, r7, pc}
 8002f92:	bf00      	nop
 8002f94:	200020c4 	.word	0x200020c4
 8002f98:	08008ba4 	.word	0x08008ba4
 8002f9c:	20002198 	.word	0x20002198
 8002fa0:	20002154 	.word	0x20002154
 8002fa4:	08008bb4 	.word	0x08008bb4
 8002fa8:	40010800 	.word	0x40010800
 8002fac:	08008bc4 	.word	0x08008bc4
 8002fb0:	08008bd8 	.word	0x08008bd8

08002fb4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b090      	sub	sp, #64	; 0x40
 8002fb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002fba:	f107 0318 	add.w	r3, r7, #24
 8002fbe:	2228      	movs	r2, #40	; 0x28
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f005 f8dc 	bl	8008180 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002fc8:	1d3b      	adds	r3, r7, #4
 8002fca:	2200      	movs	r2, #0
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	605a      	str	r2, [r3, #4]
 8002fd0:	609a      	str	r2, [r3, #8]
 8002fd2:	60da      	str	r2, [r3, #12]
 8002fd4:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002fda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fde:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002fe8:	2302      	movs	r3, #2
 8002fea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002fec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ff0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002ff2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ff8:	f107 0318 	add.w	r3, r7, #24
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f003 f84b 	bl	8006098 <HAL_RCC_OscConfig>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8003008:	f000 f819 	bl	800303e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800300c:	230f      	movs	r3, #15
 800300e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003010:	2302      	movs	r3, #2
 8003012:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003014:	2300      	movs	r3, #0
 8003016:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003018:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800301c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800301e:	2300      	movs	r3, #0
 8003020:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003022:	1d3b      	adds	r3, r7, #4
 8003024:	2102      	movs	r1, #2
 8003026:	4618      	mov	r0, r3
 8003028:	f003 fa9a 	bl	8006560 <HAL_RCC_ClockConfig>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8003032:	f000 f804 	bl	800303e <Error_Handler>
  }
}
 8003036:	bf00      	nop
 8003038:	3740      	adds	r7, #64	; 0x40
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800303e:	b480      	push	{r7}
 8003040:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003042:	b672      	cpsid	i
}
 8003044:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003046:	e7fe      	b.n	8003046 <Error_Handler+0x8>

08003048 <rotateInPosMode>:
#define WAIT_UNTIL(EXPRESS)                                                                        \
    for (uint32_t startTick = HAL_GetTick(); (EXPRESS) && (HAL_GetTick() - startTick <= TIMEOUT);) \
        HAL_UART_Receive_IT(&huart1, (uint8_t *)&RxBuffer, RXBUFFERSIZE);

void rotateInPosMode(uint8_t ID, uint8_t dir, uint16_t angle, uint8_t wait_flag)
{
 8003048:	b590      	push	{r4, r7, lr}
 800304a:	b08b      	sub	sp, #44	; 0x2c
 800304c:	af00      	add	r7, sp, #0
 800304e:	4604      	mov	r4, r0
 8003050:	4608      	mov	r0, r1
 8003052:	4611      	mov	r1, r2
 8003054:	461a      	mov	r2, r3
 8003056:	4623      	mov	r3, r4
 8003058:	71fb      	strb	r3, [r7, #7]
 800305a:	4603      	mov	r3, r0
 800305c:	71bb      	strb	r3, [r7, #6]
 800305e:	460b      	mov	r3, r1
 8003060:	80bb      	strh	r3, [r7, #4]
 8003062:	4613      	mov	r3, r2
 8003064:	70fb      	strb	r3, [r7, #3]
    uint32_t steps = angle / STEP_DGREE * M_STEP;
 8003066:	88bb      	ldrh	r3, [r7, #4]
 8003068:	4618      	mov	r0, r3
 800306a:	f7fd fa2f 	bl	80004cc <__aeabi_i2d>
 800306e:	a348      	add	r3, pc, #288	; (adr r3, 8003190 <rotateInPosMode+0x148>)
 8003070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003074:	f7fd fbbe 	bl	80007f4 <__aeabi_ddiv>
 8003078:	4602      	mov	r2, r0
 800307a:	460b      	mov	r3, r1
 800307c:	4610      	mov	r0, r2
 800307e:	4619      	mov	r1, r3
 8003080:	f04f 0200 	mov.w	r2, #0
 8003084:	4b44      	ldr	r3, [pc, #272]	; (8003198 <rotateInPosMode+0x150>)
 8003086:	f7fd fa8b 	bl	80005a0 <__aeabi_dmul>
 800308a:	4602      	mov	r2, r0
 800308c:	460b      	mov	r3, r1
 800308e:	4610      	mov	r0, r2
 8003090:	4619      	mov	r1, r3
 8003092:	f7fd fd1f 	bl	8000ad4 <__aeabi_d2uiz>
 8003096:	4603      	mov	r3, r0
 8003098:	627b      	str	r3, [r7, #36]	; 0x24
 800309a:	79fb      	ldrb	r3, [r7, #7]
    uint8_t TxBuffer[9];
    memcpy(TxBuffer, &ID, 1);
 800309c:	733b      	strb	r3, [r7, #12]
    TxBuffer[1] = POS_REG;
 800309e:	23fd      	movs	r3, #253	; 0xfd
 80030a0:	737b      	strb	r3, [r7, #13]
    uint16_t speed = (SPEED | (uint8_t)dir << 15);
 80030a2:	79bb      	ldrb	r3, [r7, #6]
 80030a4:	03db      	lsls	r3, r3, #15
 80030a6:	b21b      	sxth	r3, r3
 80030a8:	f043 033c 	orr.w	r3, r3, #60	; 0x3c
 80030ac:	b21b      	sxth	r3, r3
 80030ae:	847b      	strh	r3, [r7, #34]	; 0x22
    TxBuffer[2] = (uint8_t)(speed >> 8);
 80030b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80030b2:	0a1b      	lsrs	r3, r3, #8
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	73bb      	strb	r3, [r7, #14]
    TxBuffer[3] = (uint8_t)(speed & 0x00FF);
 80030ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	73fb      	strb	r3, [r7, #15]
    TxBuffer[4] = (uint8_t)ACCELERATION;
 80030c0:	23f8      	movs	r3, #248	; 0xf8
 80030c2:	743b      	strb	r3, [r7, #16]
    TxBuffer[5] = (uint8_t)(steps >> 16);
 80030c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c6:	0c1b      	lsrs	r3, r3, #16
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	747b      	strb	r3, [r7, #17]
    TxBuffer[6] = (uint8_t)(steps >> 8);
 80030cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ce:	0a1b      	lsrs	r3, r3, #8
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	74bb      	strb	r3, [r7, #18]
    TxBuffer[7] = (uint8_t)(steps & 0x00FF);
 80030d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	74fb      	strb	r3, [r7, #19]
    TxBuffer[8] = CHECK_BIT;
 80030da:	236b      	movs	r3, #107	; 0x6b
 80030dc:	753b      	strb	r3, [r7, #20]
    HAL_Delay(1);
 80030de:	2001      	movs	r0, #1
 80030e0:	f002 f8cc 	bl	800527c <HAL_Delay>
    WAIT_UNTIL(!(motor_flag & (0x01 << (ID - 1))))
 80030e4:	f002 f8c0 	bl	8005268 <HAL_GetTick>
 80030e8:	61f8      	str	r0, [r7, #28]
 80030ea:	e004      	b.n	80030f6 <rotateInPosMode+0xae>
 80030ec:	2203      	movs	r2, #3
 80030ee:	492b      	ldr	r1, [pc, #172]	; (800319c <rotateInPosMode+0x154>)
 80030f0:	482b      	ldr	r0, [pc, #172]	; (80031a0 <rotateInPosMode+0x158>)
 80030f2:	f004 faf4 	bl	80076de <HAL_UART_Receive_IT>
 80030f6:	4b2b      	ldr	r3, [pc, #172]	; (80031a4 <rotateInPosMode+0x15c>)
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	461a      	mov	r2, r3
 80030fe:	79fb      	ldrb	r3, [r7, #7]
 8003100:	3b01      	subs	r3, #1
 8003102:	fa42 f303 	asr.w	r3, r2, r3
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	2b00      	cmp	r3, #0
 800310c:	d108      	bne.n	8003120 <rotateInPosMode+0xd8>
 800310e:	f002 f8ab 	bl	8005268 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800311c:	4293      	cmp	r3, r2
 800311e:	d9e5      	bls.n	80030ec <rotateInPosMode+0xa4>
    WAIT_UNTIL(wait_flag && motor_flag != 7)
 8003120:	f002 f8a2 	bl	8005268 <HAL_GetTick>
 8003124:	61b8      	str	r0, [r7, #24]
 8003126:	e004      	b.n	8003132 <rotateInPosMode+0xea>
 8003128:	2203      	movs	r2, #3
 800312a:	491c      	ldr	r1, [pc, #112]	; (800319c <rotateInPosMode+0x154>)
 800312c:	481c      	ldr	r0, [pc, #112]	; (80031a0 <rotateInPosMode+0x158>)
 800312e:	f004 fad6 	bl	80076de <HAL_UART_Receive_IT>
 8003132:	78fb      	ldrb	r3, [r7, #3]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00d      	beq.n	8003154 <rotateInPosMode+0x10c>
 8003138:	4b1a      	ldr	r3, [pc, #104]	; (80031a4 <rotateInPosMode+0x15c>)
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b07      	cmp	r3, #7
 8003140:	d008      	beq.n	8003154 <rotateInPosMode+0x10c>
 8003142:	f002 f891 	bl	8005268 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003150:	4293      	cmp	r3, r2
 8003152:	d9e9      	bls.n	8003128 <rotateInPosMode+0xe0>
    HAL_UART_Transmit(&huart1, (uint8_t *)&TxBuffer, 9, 0xFFFF);
 8003154:	f107 010c 	add.w	r1, r7, #12
 8003158:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800315c:	2209      	movs	r2, #9
 800315e:	4810      	ldr	r0, [pc, #64]	; (80031a0 <rotateInPosMode+0x158>)
 8003160:	f004 f9e0 	bl	8007524 <HAL_UART_Transmit>
    motor_flag &= ~(0x01 << (ID - 1));
 8003164:	79fb      	ldrb	r3, [r7, #7]
 8003166:	3b01      	subs	r3, #1
 8003168:	2201      	movs	r2, #1
 800316a:	fa02 f303 	lsl.w	r3, r2, r3
 800316e:	b25b      	sxtb	r3, r3
 8003170:	43db      	mvns	r3, r3
 8003172:	b25a      	sxtb	r2, r3
 8003174:	4b0b      	ldr	r3, [pc, #44]	; (80031a4 <rotateInPosMode+0x15c>)
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	b2db      	uxtb	r3, r3
 800317a:	b25b      	sxtb	r3, r3
 800317c:	4013      	ands	r3, r2
 800317e:	b25b      	sxtb	r3, r3
 8003180:	b2da      	uxtb	r2, r3
 8003182:	4b08      	ldr	r3, [pc, #32]	; (80031a4 <rotateInPosMode+0x15c>)
 8003184:	701a      	strb	r2, [r3, #0]
}
 8003186:	bf00      	nop
 8003188:	372c      	adds	r7, #44	; 0x2c
 800318a:	46bd      	mov	sp, r7
 800318c:	bd90      	pop	{r4, r7, pc}
 800318e:	bf00      	nop
 8003190:	cccccccd 	.word	0xcccccccd
 8003194:	3ffccccc 	.word	0x3ffccccc
 8003198:	40300000 	.word	0x40300000
 800319c:	200020c8 	.word	0x200020c8
 80031a0:	20002158 	.word	0x20002158
 80031a4:	200020c6 	.word	0x200020c6

080031a8 <rotate2InPosMode>:

void rotate2InPosMode(uint8_t ID1, uint8_t ID2, uint8_t dir1, uint8_t dir2, uint16_t angle, uint8_t wait_flag)
{
 80031a8:	b590      	push	{r4, r7, lr}
 80031aa:	b091      	sub	sp, #68	; 0x44
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	4604      	mov	r4, r0
 80031b0:	4608      	mov	r0, r1
 80031b2:	4611      	mov	r1, r2
 80031b4:	461a      	mov	r2, r3
 80031b6:	4623      	mov	r3, r4
 80031b8:	71fb      	strb	r3, [r7, #7]
 80031ba:	4603      	mov	r3, r0
 80031bc:	71bb      	strb	r3, [r7, #6]
 80031be:	460b      	mov	r3, r1
 80031c0:	717b      	strb	r3, [r7, #5]
 80031c2:	4613      	mov	r3, r2
 80031c4:	713b      	strb	r3, [r7, #4]
    uint32_t steps = angle / STEP_DGREE * M_STEP;
 80031c6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7fd f97e 	bl	80004cc <__aeabi_i2d>
 80031d0:	a3ad      	add	r3, pc, #692	; (adr r3, 8003488 <rotate2InPosMode+0x2e0>)
 80031d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d6:	f7fd fb0d 	bl	80007f4 <__aeabi_ddiv>
 80031da:	4602      	mov	r2, r0
 80031dc:	460b      	mov	r3, r1
 80031de:	4610      	mov	r0, r2
 80031e0:	4619      	mov	r1, r3
 80031e2:	f04f 0200 	mov.w	r2, #0
 80031e6:	4baa      	ldr	r3, [pc, #680]	; (8003490 <rotate2InPosMode+0x2e8>)
 80031e8:	f7fd f9da 	bl	80005a0 <__aeabi_dmul>
 80031ec:	4602      	mov	r2, r0
 80031ee:	460b      	mov	r3, r1
 80031f0:	4610      	mov	r0, r2
 80031f2:	4619      	mov	r1, r3
 80031f4:	f7fd fc6e 	bl	8000ad4 <__aeabi_d2uiz>
 80031f8:	4603      	mov	r3, r0
 80031fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031fc:	79fb      	ldrb	r3, [r7, #7]
    uint8_t TxBuffer1[9];
    memcpy(TxBuffer1, &ID1, 1);
 80031fe:	763b      	strb	r3, [r7, #24]
    TxBuffer1[1] = POS_REG;
 8003200:	23fd      	movs	r3, #253	; 0xfd
 8003202:	767b      	strb	r3, [r7, #25]
    uint16_t speed = (SPEED | (uint8_t)dir1 << 15);
 8003204:	797b      	ldrb	r3, [r7, #5]
 8003206:	03db      	lsls	r3, r3, #15
 8003208:	b21b      	sxth	r3, r3
 800320a:	f043 033c 	orr.w	r3, r3, #60	; 0x3c
 800320e:	b21b      	sxth	r3, r3
 8003210:	877b      	strh	r3, [r7, #58]	; 0x3a
    TxBuffer1[2] = (uint8_t)(speed >> 8);
 8003212:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003214:	0a1b      	lsrs	r3, r3, #8
 8003216:	b29b      	uxth	r3, r3
 8003218:	b2db      	uxtb	r3, r3
 800321a:	76bb      	strb	r3, [r7, #26]
    TxBuffer1[3] = (uint8_t)(speed & 0x00FF);
 800321c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800321e:	b2db      	uxtb	r3, r3
 8003220:	76fb      	strb	r3, [r7, #27]
    TxBuffer1[4] = (uint8_t)ACCELERATION;
 8003222:	23f8      	movs	r3, #248	; 0xf8
 8003224:	773b      	strb	r3, [r7, #28]
    TxBuffer1[5] = (uint8_t)(steps >> 16);
 8003226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003228:	0c1b      	lsrs	r3, r3, #16
 800322a:	b2db      	uxtb	r3, r3
 800322c:	777b      	strb	r3, [r7, #29]
    TxBuffer1[6] = (uint8_t)(steps >> 8);
 800322e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003230:	0a1b      	lsrs	r3, r3, #8
 8003232:	b2db      	uxtb	r3, r3
 8003234:	77bb      	strb	r3, [r7, #30]
    TxBuffer1[7] = (uint8_t)(steps & 0x00FF);
 8003236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003238:	b2db      	uxtb	r3, r3
 800323a:	77fb      	strb	r3, [r7, #31]
    TxBuffer1[8] = CHECK_BIT;
 800323c:	236b      	movs	r3, #107	; 0x6b
 800323e:	f887 3020 	strb.w	r3, [r7, #32]
 8003242:	79bb      	ldrb	r3, [r7, #6]

    uint8_t TxBuffer2[9];
    memcpy(TxBuffer2, &ID2, 1);
 8003244:	733b      	strb	r3, [r7, #12]
    TxBuffer2[1] = POS_REG;
 8003246:	23fd      	movs	r3, #253	; 0xfd
 8003248:	737b      	strb	r3, [r7, #13]
    speed = (SPEED | (uint8_t)dir2 << 15);
 800324a:	793b      	ldrb	r3, [r7, #4]
 800324c:	03db      	lsls	r3, r3, #15
 800324e:	b21b      	sxth	r3, r3
 8003250:	f043 033c 	orr.w	r3, r3, #60	; 0x3c
 8003254:	b21b      	sxth	r3, r3
 8003256:	877b      	strh	r3, [r7, #58]	; 0x3a
    TxBuffer2[2] = (uint8_t)(speed >> 8);
 8003258:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800325a:	0a1b      	lsrs	r3, r3, #8
 800325c:	b29b      	uxth	r3, r3
 800325e:	b2db      	uxtb	r3, r3
 8003260:	73bb      	strb	r3, [r7, #14]
    TxBuffer2[3] = (uint8_t)(speed & 0x00FF);
 8003262:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003264:	b2db      	uxtb	r3, r3
 8003266:	73fb      	strb	r3, [r7, #15]
    TxBuffer2[4] = (uint8_t)ACCELERATION;
 8003268:	23f8      	movs	r3, #248	; 0xf8
 800326a:	743b      	strb	r3, [r7, #16]
    TxBuffer2[5] = (uint8_t)(steps >> 16);
 800326c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800326e:	0c1b      	lsrs	r3, r3, #16
 8003270:	b2db      	uxtb	r3, r3
 8003272:	747b      	strb	r3, [r7, #17]
    TxBuffer2[6] = (uint8_t)(steps >> 8);
 8003274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003276:	0a1b      	lsrs	r3, r3, #8
 8003278:	b2db      	uxtb	r3, r3
 800327a:	74bb      	strb	r3, [r7, #18]
    TxBuffer2[7] = (uint8_t)(steps & 0x00FF);
 800327c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800327e:	b2db      	uxtb	r3, r3
 8003280:	74fb      	strb	r3, [r7, #19]
    TxBuffer2[8] = CHECK_BIT;
 8003282:	236b      	movs	r3, #107	; 0x6b
 8003284:	753b      	strb	r3, [r7, #20]
    // while (!(motor_flag & (0x01 << (ID2 - 1))))
    //     ;
    // while (wait_flag && motor_flag != 7)
    //     ;

    WAIT_UNTIL(!(motor_flag & (0x01 << (ID1 - 1))))
 8003286:	f001 ffef 	bl	8005268 <HAL_GetTick>
 800328a:	6378      	str	r0, [r7, #52]	; 0x34
 800328c:	e004      	b.n	8003298 <rotate2InPosMode+0xf0>
 800328e:	2203      	movs	r2, #3
 8003290:	4980      	ldr	r1, [pc, #512]	; (8003494 <rotate2InPosMode+0x2ec>)
 8003292:	4881      	ldr	r0, [pc, #516]	; (8003498 <rotate2InPosMode+0x2f0>)
 8003294:	f004 fa23 	bl	80076de <HAL_UART_Receive_IT>
 8003298:	4b80      	ldr	r3, [pc, #512]	; (800349c <rotate2InPosMode+0x2f4>)
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	b2db      	uxtb	r3, r3
 800329e:	461a      	mov	r2, r3
 80032a0:	79fb      	ldrb	r3, [r7, #7]
 80032a2:	3b01      	subs	r3, #1
 80032a4:	fa42 f303 	asr.w	r3, r2, r3
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d108      	bne.n	80032c2 <rotate2InPosMode+0x11a>
 80032b0:	f001 ffda 	bl	8005268 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80032be:	4293      	cmp	r3, r2
 80032c0:	d9e5      	bls.n	800328e <rotate2InPosMode+0xe6>
    motor_flag |= 0x01 << (ID1 - 1);
 80032c2:	79fb      	ldrb	r3, [r7, #7]
 80032c4:	3b01      	subs	r3, #1
 80032c6:	2201      	movs	r2, #1
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	b25a      	sxtb	r2, r3
 80032ce:	4b73      	ldr	r3, [pc, #460]	; (800349c <rotate2InPosMode+0x2f4>)
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	b25b      	sxtb	r3, r3
 80032d6:	4313      	orrs	r3, r2
 80032d8:	b25b      	sxtb	r3, r3
 80032da:	b2da      	uxtb	r2, r3
 80032dc:	4b6f      	ldr	r3, [pc, #444]	; (800349c <rotate2InPosMode+0x2f4>)
 80032de:	701a      	strb	r2, [r3, #0]
    WAIT_UNTIL(!(motor_flag & (0x01 << (ID2 - 1))))
 80032e0:	f001 ffc2 	bl	8005268 <HAL_GetTick>
 80032e4:	6338      	str	r0, [r7, #48]	; 0x30
 80032e6:	e004      	b.n	80032f2 <rotate2InPosMode+0x14a>
 80032e8:	2203      	movs	r2, #3
 80032ea:	496a      	ldr	r1, [pc, #424]	; (8003494 <rotate2InPosMode+0x2ec>)
 80032ec:	486a      	ldr	r0, [pc, #424]	; (8003498 <rotate2InPosMode+0x2f0>)
 80032ee:	f004 f9f6 	bl	80076de <HAL_UART_Receive_IT>
 80032f2:	4b6a      	ldr	r3, [pc, #424]	; (800349c <rotate2InPosMode+0x2f4>)
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	461a      	mov	r2, r3
 80032fa:	79bb      	ldrb	r3, [r7, #6]
 80032fc:	3b01      	subs	r3, #1
 80032fe:	fa42 f303 	asr.w	r3, r2, r3
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b00      	cmp	r3, #0
 8003308:	d108      	bne.n	800331c <rotate2InPosMode+0x174>
 800330a:	f001 ffad 	bl	8005268 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003318:	4293      	cmp	r3, r2
 800331a:	d9e5      	bls.n	80032e8 <rotate2InPosMode+0x140>
    motor_flag |= 0x01 << (ID2 - 1);
 800331c:	79bb      	ldrb	r3, [r7, #6]
 800331e:	3b01      	subs	r3, #1
 8003320:	2201      	movs	r2, #1
 8003322:	fa02 f303 	lsl.w	r3, r2, r3
 8003326:	b25a      	sxtb	r2, r3
 8003328:	4b5c      	ldr	r3, [pc, #368]	; (800349c <rotate2InPosMode+0x2f4>)
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	b2db      	uxtb	r3, r3
 800332e:	b25b      	sxtb	r3, r3
 8003330:	4313      	orrs	r3, r2
 8003332:	b25b      	sxtb	r3, r3
 8003334:	b2da      	uxtb	r2, r3
 8003336:	4b59      	ldr	r3, [pc, #356]	; (800349c <rotate2InPosMode+0x2f4>)
 8003338:	701a      	strb	r2, [r3, #0]
    WAIT_UNTIL(wait_flag && motor_flag != 7)
 800333a:	f001 ff95 	bl	8005268 <HAL_GetTick>
 800333e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003340:	e004      	b.n	800334c <rotate2InPosMode+0x1a4>
 8003342:	2203      	movs	r2, #3
 8003344:	4953      	ldr	r1, [pc, #332]	; (8003494 <rotate2InPosMode+0x2ec>)
 8003346:	4854      	ldr	r0, [pc, #336]	; (8003498 <rotate2InPosMode+0x2f0>)
 8003348:	f004 f9c9 	bl	80076de <HAL_UART_Receive_IT>
 800334c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00d      	beq.n	8003370 <rotate2InPosMode+0x1c8>
 8003354:	4b51      	ldr	r3, [pc, #324]	; (800349c <rotate2InPosMode+0x2f4>)
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b07      	cmp	r3, #7
 800335c:	d008      	beq.n	8003370 <rotate2InPosMode+0x1c8>
 800335e:	f001 ff83 	bl	8005268 <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800336c:	4293      	cmp	r3, r2
 800336e:	d9e8      	bls.n	8003342 <rotate2InPosMode+0x19a>
  __ASM volatile ("cpsid i" : : : "memory");
 8003370:	b672      	cpsid	i
}
 8003372:	bf00      	nop

    __disable_irq();
    motor_flag &= ~(0x01 << (ID1 - 1));
 8003374:	79fb      	ldrb	r3, [r7, #7]
 8003376:	3b01      	subs	r3, #1
 8003378:	2201      	movs	r2, #1
 800337a:	fa02 f303 	lsl.w	r3, r2, r3
 800337e:	b25b      	sxtb	r3, r3
 8003380:	43db      	mvns	r3, r3
 8003382:	b25a      	sxtb	r2, r3
 8003384:	4b45      	ldr	r3, [pc, #276]	; (800349c <rotate2InPosMode+0x2f4>)
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	b2db      	uxtb	r3, r3
 800338a:	b25b      	sxtb	r3, r3
 800338c:	4013      	ands	r3, r2
 800338e:	b25b      	sxtb	r3, r3
 8003390:	b2da      	uxtb	r2, r3
 8003392:	4b42      	ldr	r3, [pc, #264]	; (800349c <rotate2InPosMode+0x2f4>)
 8003394:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit_IT(&huart1, (uint8_t *)&TxBuffer1, 9);
 8003396:	f107 0318 	add.w	r3, r7, #24
 800339a:	2209      	movs	r2, #9
 800339c:	4619      	mov	r1, r3
 800339e:	483e      	ldr	r0, [pc, #248]	; (8003498 <rotate2InPosMode+0x2f0>)
 80033a0:	f004 f959 	bl	8007656 <HAL_UART_Transmit_IT>
  __ASM volatile ("cpsie i" : : : "memory");
 80033a4:	b662      	cpsie	i
}
 80033a6:	bf00      	nop
    __enable_irq();
    while (huart1.gState != HAL_UART_STATE_READY)
 80033a8:	bf00      	nop
 80033aa:	4b3b      	ldr	r3, [pc, #236]	; (8003498 <rotate2InPosMode+0x2f0>)
 80033ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b20      	cmp	r3, #32
 80033b4:	d1f9      	bne.n	80033aa <rotate2InPosMode+0x202>
        ;
    HAL_Delay(1);
 80033b6:	2001      	movs	r0, #1
 80033b8:	f001 ff60 	bl	800527c <HAL_Delay>
  __ASM volatile ("cpsid i" : : : "memory");
 80033bc:	b672      	cpsid	i
}
 80033be:	bf00      	nop
    __disable_irq();
    motor_flag &= ~(0x01 << (ID2 - 1));
 80033c0:	79bb      	ldrb	r3, [r7, #6]
 80033c2:	3b01      	subs	r3, #1
 80033c4:	2201      	movs	r2, #1
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	b25b      	sxtb	r3, r3
 80033cc:	43db      	mvns	r3, r3
 80033ce:	b25a      	sxtb	r2, r3
 80033d0:	4b32      	ldr	r3, [pc, #200]	; (800349c <rotate2InPosMode+0x2f4>)
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	b25b      	sxtb	r3, r3
 80033d8:	4013      	ands	r3, r2
 80033da:	b25b      	sxtb	r3, r3
 80033dc:	b2da      	uxtb	r2, r3
 80033de:	4b2f      	ldr	r3, [pc, #188]	; (800349c <rotate2InPosMode+0x2f4>)
 80033e0:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit_IT(&huart1, (uint8_t *)&TxBuffer2, 9);
 80033e2:	f107 030c 	add.w	r3, r7, #12
 80033e6:	2209      	movs	r2, #9
 80033e8:	4619      	mov	r1, r3
 80033ea:	482b      	ldr	r0, [pc, #172]	; (8003498 <rotate2InPosMode+0x2f0>)
 80033ec:	f004 f933 	bl	8007656 <HAL_UART_Transmit_IT>
  __ASM volatile ("cpsie i" : : : "memory");
 80033f0:	b662      	cpsie	i
}
 80033f2:	bf00      	nop
    __enable_irq();
    while (huart1.gState != HAL_UART_STATE_READY)
 80033f4:	bf00      	nop
 80033f6:	4b28      	ldr	r3, [pc, #160]	; (8003498 <rotate2InPosMode+0x2f0>)
 80033f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b20      	cmp	r3, #32
 8003400:	d1f9      	bne.n	80033f6 <rotate2InPosMode+0x24e>
        ;

    WAIT_UNTIL(!(motor_flag & (0x01 << (ID1 - 1))))
 8003402:	f001 ff31 	bl	8005268 <HAL_GetTick>
 8003406:	62b8      	str	r0, [r7, #40]	; 0x28
 8003408:	e004      	b.n	8003414 <rotate2InPosMode+0x26c>
 800340a:	2203      	movs	r2, #3
 800340c:	4921      	ldr	r1, [pc, #132]	; (8003494 <rotate2InPosMode+0x2ec>)
 800340e:	4822      	ldr	r0, [pc, #136]	; (8003498 <rotate2InPosMode+0x2f0>)
 8003410:	f004 f965 	bl	80076de <HAL_UART_Receive_IT>
 8003414:	4b21      	ldr	r3, [pc, #132]	; (800349c <rotate2InPosMode+0x2f4>)
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	b2db      	uxtb	r3, r3
 800341a:	461a      	mov	r2, r3
 800341c:	79fb      	ldrb	r3, [r7, #7]
 800341e:	3b01      	subs	r3, #1
 8003420:	fa42 f303 	asr.w	r3, r2, r3
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	2b00      	cmp	r3, #0
 800342a:	d108      	bne.n	800343e <rotate2InPosMode+0x296>
 800342c:	f001 ff1c 	bl	8005268 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800343a:	4293      	cmp	r3, r2
 800343c:	d9e5      	bls.n	800340a <rotate2InPosMode+0x262>
    WAIT_UNTIL(!(motor_flag & (0x01 << (ID2 - 1))))
 800343e:	f001 ff13 	bl	8005268 <HAL_GetTick>
 8003442:	6278      	str	r0, [r7, #36]	; 0x24
 8003444:	e004      	b.n	8003450 <rotate2InPosMode+0x2a8>
 8003446:	2203      	movs	r2, #3
 8003448:	4912      	ldr	r1, [pc, #72]	; (8003494 <rotate2InPosMode+0x2ec>)
 800344a:	4813      	ldr	r0, [pc, #76]	; (8003498 <rotate2InPosMode+0x2f0>)
 800344c:	f004 f947 	bl	80076de <HAL_UART_Receive_IT>
 8003450:	4b12      	ldr	r3, [pc, #72]	; (800349c <rotate2InPosMode+0x2f4>)
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	b2db      	uxtb	r3, r3
 8003456:	461a      	mov	r2, r3
 8003458:	79bb      	ldrb	r3, [r7, #6]
 800345a:	3b01      	subs	r3, #1
 800345c:	fa42 f303 	asr.w	r3, r2, r3
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	2b00      	cmp	r3, #0
 8003466:	d108      	bne.n	800347a <rotate2InPosMode+0x2d2>
 8003468:	f001 fefe 	bl	8005268 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003476:	4293      	cmp	r3, r2
 8003478:	d9e5      	bls.n	8003446 <rotate2InPosMode+0x29e>
}
 800347a:	bf00      	nop
 800347c:	3744      	adds	r7, #68	; 0x44
 800347e:	46bd      	mov	sp, r7
 8003480:	bd90      	pop	{r4, r7, pc}
 8003482:	bf00      	nop
 8003484:	f3af 8000 	nop.w
 8003488:	cccccccd 	.word	0xcccccccd
 800348c:	3ffccccc 	.word	0x3ffccccc
 8003490:	40300000 	.word	0x40300000
 8003494:	200020c8 	.word	0x200020c8
 8003498:	20002158 	.word	0x20002158
 800349c:	200020c6 	.word	0x200020c6

080034a0 <rotateCube>:
    {F2, B2},
    {L, L},
    {B, B}};

void rotateCube(cube_t *c, uint8_t move)
{
 80034a0:	b4f0      	push	{r4, r5, r6, r7}
 80034a2:	b098      	sub	sp, #96	; 0x60
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	460b      	mov	r3, r1
 80034aa:	70fb      	strb	r3, [r7, #3]
    char temp[54];
    memcpy(temp, c->face, 54);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	461c      	mov	r4, r3
 80034b0:	f107 0620 	add.w	r6, r7, #32
 80034b4:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 80034b8:	4635      	mov	r5, r6
 80034ba:	4623      	mov	r3, r4
 80034bc:	6818      	ldr	r0, [r3, #0]
 80034be:	6859      	ldr	r1, [r3, #4]
 80034c0:	689a      	ldr	r2, [r3, #8]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034c6:	3410      	adds	r4, #16
 80034c8:	3610      	adds	r6, #16
 80034ca:	4564      	cmp	r4, ip
 80034cc:	d1f4      	bne.n	80034b8 <rotateCube+0x18>
 80034ce:	4633      	mov	r3, r6
 80034d0:	4622      	mov	r2, r4
 80034d2:	6810      	ldr	r0, [r2, #0]
 80034d4:	6018      	str	r0, [r3, #0]
 80034d6:	8892      	ldrh	r2, [r2, #4]
 80034d8:	809a      	strh	r2, [r3, #4]
    for (int i = 0; i < 54; i++)
 80034da:	2300      	movs	r3, #0
 80034dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034de:	e014      	b.n	800350a <rotateCube+0x6a>
        c->face[i] = temp[transMat[move][i]];
 80034e0:	78fb      	ldrb	r3, [r7, #3]
 80034e2:	4a27      	ldr	r2, [pc, #156]	; (8003580 <rotateCube+0xe0>)
 80034e4:	2136      	movs	r1, #54	; 0x36
 80034e6:	fb01 f303 	mul.w	r3, r1, r3
 80034ea:	441a      	add	r2, r3
 80034ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034ee:	4413      	add	r3, r2
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	3360      	adds	r3, #96	; 0x60
 80034f4:	443b      	add	r3, r7
 80034f6:	f813 1c40 	ldrb.w	r1, [r3, #-64]
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034fe:	4413      	add	r3, r2
 8003500:	460a      	mov	r2, r1
 8003502:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 54; i++)
 8003504:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003506:	3301      	adds	r3, #1
 8003508:	65fb      	str	r3, [r7, #92]	; 0x5c
 800350a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800350c:	2b35      	cmp	r3, #53	; 0x35
 800350e:	dde7      	ble.n	80034e0 <rotateCube+0x40>
    if (move == T)
 8003510:	78fb      	ldrb	r3, [r7, #3]
 8003512:	2b12      	cmp	r3, #18
 8003514:	d11e      	bne.n	8003554 <rotateCube+0xb4>
    {
        uint8_t route_temp[18];
        memcpy(route_temp, route_mask, 18);
 8003516:	4b1b      	ldr	r3, [pc, #108]	; (8003584 <rotateCube+0xe4>)
 8003518:	f107 040c 	add.w	r4, r7, #12
 800351c:	461d      	mov	r5, r3
 800351e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003520:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003522:	682b      	ldr	r3, [r5, #0]
 8003524:	8023      	strh	r3, [r4, #0]
        for (int i = 0; i < 18; i++)
 8003526:	2300      	movs	r3, #0
 8003528:	65bb      	str	r3, [r7, #88]	; 0x58
 800352a:	e00f      	b.n	800354c <rotateCube+0xac>
            route_mask[i] = route_temp[route_trans[i]];
 800352c:	4a16      	ldr	r2, [pc, #88]	; (8003588 <rotateCube+0xe8>)
 800352e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003530:	4413      	add	r3, r2
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	3360      	adds	r3, #96	; 0x60
 8003536:	443b      	add	r3, r7
 8003538:	f813 1c54 	ldrb.w	r1, [r3, #-84]
 800353c:	4a11      	ldr	r2, [pc, #68]	; (8003584 <rotateCube+0xe4>)
 800353e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003540:	4413      	add	r3, r2
 8003542:	460a      	mov	r2, r1
 8003544:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < 18; i++)
 8003546:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003548:	3301      	adds	r3, #1
 800354a:	65bb      	str	r3, [r7, #88]	; 0x58
 800354c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800354e:	2b11      	cmp	r3, #17
 8003550:	ddec      	ble.n	800352c <rotateCube+0x8c>
    }
    else
        c->route[c->routeLen++] = route_mask[move];
}
 8003552:	e00f      	b.n	8003574 <rotateCube+0xd4>
        c->route[c->routeLen++] = route_mask[move];
 8003554:	78fa      	ldrb	r2, [r7, #3]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f893 3162 	ldrb.w	r3, [r3, #354]	; 0x162
 800355c:	1c59      	adds	r1, r3, #1
 800355e:	b2c8      	uxtb	r0, r1
 8003560:	6879      	ldr	r1, [r7, #4]
 8003562:	f881 0162 	strb.w	r0, [r1, #354]	; 0x162
 8003566:	4619      	mov	r1, r3
 8003568:	4b06      	ldr	r3, [pc, #24]	; (8003584 <rotateCube+0xe4>)
 800356a:	5c9a      	ldrb	r2, [r3, r2]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	440b      	add	r3, r1
 8003570:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
}
 8003574:	bf00      	nop
 8003576:	3760      	adds	r7, #96	; 0x60
 8003578:	46bd      	mov	sp, r7
 800357a:	bcf0      	pop	{r4, r5, r6, r7}
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	080091f0 	.word	0x080091f0
 8003584:	20000148 	.word	0x20000148
 8003588:	2000015c 	.word	0x2000015c

0800358c <formular11>:
void formular11(cube_t *c)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b088      	sub	sp, #32
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
    uint8_t n = 0;
 8003594:	2300      	movs	r3, #0
 8003596:	77fb      	strb	r3, [r7, #31]
    for (size_t i = 1; i < 6; i++)
 8003598:	2301      	movs	r3, #1
 800359a:	61bb      	str	r3, [r7, #24]
 800359c:	e038      	b.n	8003610 <formular11+0x84>
    {
        n = 0;
 800359e:	2300      	movs	r3, #0
 80035a0:	77fb      	strb	r3, [r7, #31]
        for (size_t j = 3; j < 6; j += 2)
 80035a2:	2303      	movs	r3, #3
 80035a4:	617b      	str	r3, [r7, #20]
 80035a6:	e02d      	b.n	8003604 <formular11+0x78>
        {
            if (c->face[i * 9 + j] == 'D')
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	4613      	mov	r3, r2
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	441a      	add	r2, r3
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	4413      	add	r3, r2
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	5cd3      	ldrb	r3, [r2, r3]
 80035b8:	2b44      	cmp	r3, #68	; 0x44
 80035ba:	d11d      	bne.n	80035f8 <formular11+0x6c>
            {
                while (c->face[face_index1[i - 1][n]] == 'D')
 80035bc:	e003      	b.n	80035c6 <formular11+0x3a>
                    rotateCube(c, U);
 80035be:	2106      	movs	r1, #6
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f7ff ff6d 	bl	80034a0 <rotateCube>
                while (c->face[face_index1[i - 1][n]] == 'D')
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	1e5a      	subs	r2, r3, #1
 80035ca:	7ffb      	ldrb	r3, [r7, #31]
 80035cc:	4934      	ldr	r1, [pc, #208]	; (80036a0 <formular11+0x114>)
 80035ce:	0052      	lsls	r2, r2, #1
 80035d0:	440a      	add	r2, r1
 80035d2:	4413      	add	r3, r2
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	461a      	mov	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	5c9b      	ldrb	r3, [r3, r2]
 80035dc:	2b44      	cmp	r3, #68	; 0x44
 80035de:	d0ee      	beq.n	80035be <formular11+0x32>
                rotateCube(c, rotate_index1[i - 1][n]);
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	1e5a      	subs	r2, r3, #1
 80035e4:	7ffb      	ldrb	r3, [r7, #31]
 80035e6:	492f      	ldr	r1, [pc, #188]	; (80036a4 <formular11+0x118>)
 80035e8:	0052      	lsls	r2, r2, #1
 80035ea:	440a      	add	r2, r1
 80035ec:	4413      	add	r3, r2
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	4619      	mov	r1, r3
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f7ff ff54 	bl	80034a0 <rotateCube>
            }
            n++;
 80035f8:	7ffb      	ldrb	r3, [r7, #31]
 80035fa:	3301      	adds	r3, #1
 80035fc:	77fb      	strb	r3, [r7, #31]
        for (size_t j = 3; j < 6; j += 2)
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	3302      	adds	r3, #2
 8003602:	617b      	str	r3, [r7, #20]
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	2b05      	cmp	r3, #5
 8003608:	d9ce      	bls.n	80035a8 <formular11+0x1c>
    for (size_t i = 1; i < 6; i++)
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	3301      	adds	r3, #1
 800360e:	61bb      	str	r3, [r7, #24]
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	2b05      	cmp	r3, #5
 8003614:	d9c3      	bls.n	800359e <formular11+0x12>
        }
    }
    for (size_t i = 1; i < 6; i++)
 8003616:	2301      	movs	r3, #1
 8003618:	613b      	str	r3, [r7, #16]
 800361a:	e038      	b.n	800368e <formular11+0x102>
    {
        n = 0;
 800361c:	2300      	movs	r3, #0
 800361e:	77fb      	strb	r3, [r7, #31]
        for (size_t j = 1; j < 8; j += 6)
 8003620:	2301      	movs	r3, #1
 8003622:	60fb      	str	r3, [r7, #12]
 8003624:	e02d      	b.n	8003682 <formular11+0xf6>
        {
            if (c->face[i * 9 + j] == 'D')
 8003626:	693a      	ldr	r2, [r7, #16]
 8003628:	4613      	mov	r3, r2
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	441a      	add	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	4413      	add	r3, r2
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	5cd3      	ldrb	r3, [r2, r3]
 8003636:	2b44      	cmp	r3, #68	; 0x44
 8003638:	d11d      	bne.n	8003676 <formular11+0xea>
            {
                while (c->face[face_index2[i - 1][n]] == 'D')
 800363a:	e003      	b.n	8003644 <formular11+0xb8>
                    rotateCube(c, U);
 800363c:	2106      	movs	r1, #6
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f7ff ff2e 	bl	80034a0 <rotateCube>
                while (c->face[face_index2[i - 1][n]] == 'D')
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	1e5a      	subs	r2, r3, #1
 8003648:	7ffb      	ldrb	r3, [r7, #31]
 800364a:	4917      	ldr	r1, [pc, #92]	; (80036a8 <formular11+0x11c>)
 800364c:	0052      	lsls	r2, r2, #1
 800364e:	440a      	add	r2, r1
 8003650:	4413      	add	r3, r2
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	461a      	mov	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	5c9b      	ldrb	r3, [r3, r2]
 800365a:	2b44      	cmp	r3, #68	; 0x44
 800365c:	d0ee      	beq.n	800363c <formular11+0xb0>
                rotateCube(c, rotate_index2[i - 1][n]);
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1e5a      	subs	r2, r3, #1
 8003662:	7ffb      	ldrb	r3, [r7, #31]
 8003664:	4911      	ldr	r1, [pc, #68]	; (80036ac <formular11+0x120>)
 8003666:	0052      	lsls	r2, r2, #1
 8003668:	440a      	add	r2, r1
 800366a:	4413      	add	r3, r2
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	4619      	mov	r1, r3
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f7ff ff15 	bl	80034a0 <rotateCube>
            }
            n++;
 8003676:	7ffb      	ldrb	r3, [r7, #31]
 8003678:	3301      	adds	r3, #1
 800367a:	77fb      	strb	r3, [r7, #31]
        for (size_t j = 1; j < 8; j += 6)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	3306      	adds	r3, #6
 8003680:	60fb      	str	r3, [r7, #12]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2b07      	cmp	r3, #7
 8003686:	d9ce      	bls.n	8003626 <formular11+0x9a>
    for (size_t i = 1; i < 6; i++)
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	3301      	adds	r3, #1
 800368c:	613b      	str	r3, [r7, #16]
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	2b05      	cmp	r3, #5
 8003692:	d9c3      	bls.n	800361c <formular11+0x90>
        }
    }
}
 8003694:	bf00      	nop
 8003696:	bf00      	nop
 8003698:	3720      	adds	r7, #32
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	20000170 	.word	0x20000170
 80036a4:	2000017c 	.word	0x2000017c
 80036a8:	20000188 	.word	0x20000188
 80036ac:	20000194 	.word	0x20000194

080036b0 <formular12>:
void formular12(cube_t *c)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
    while (c->face[19] != c->face[22] || c->face[7] != 'D')
 80036b8:	e003      	b.n	80036c2 <formular12+0x12>
        rotateCube(c, U);
 80036ba:	2106      	movs	r1, #6
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f7ff feef 	bl	80034a0 <rotateCube>
    while (c->face[19] != c->face[22] || c->face[7] != 'D')
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	7cda      	ldrb	r2, [r3, #19]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	7d9b      	ldrb	r3, [r3, #22]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d1f5      	bne.n	80036ba <formular12+0xa>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	79db      	ldrb	r3, [r3, #7]
 80036d2:	2b44      	cmp	r3, #68	; 0x44
 80036d4:	d1f1      	bne.n	80036ba <formular12+0xa>
    rotateCube(c, F2);
 80036d6:	210e      	movs	r1, #14
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f7ff fee1 	bl	80034a0 <rotateCube>
    while (c->face[46] != c->face[49] || c->face[1] != 'D')
 80036de:	e003      	b.n	80036e8 <formular12+0x38>
        rotateCube(c, U);
 80036e0:	2106      	movs	r1, #6
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f7ff fedc 	bl	80034a0 <rotateCube>
    while (c->face[46] != c->face[49] || c->face[1] != 'D')
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d1f3      	bne.n	80036e0 <formular12+0x30>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	785b      	ldrb	r3, [r3, #1]
 80036fc:	2b44      	cmp	r3, #68	; 0x44
 80036fe:	d1ef      	bne.n	80036e0 <formular12+0x30>
    rotateCube(c, B2);
 8003700:	2111      	movs	r1, #17
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7ff fecc 	bl	80034a0 <rotateCube>
    while (c->face[37] != c->face[40] || c->face[3] != 'D')
 8003708:	e003      	b.n	8003712 <formular12+0x62>
        rotateCube(c, U);
 800370a:	2106      	movs	r1, #6
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f7ff fec7 	bl	80034a0 <rotateCube>
    while (c->face[37] != c->face[40] || c->face[3] != 'D')
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800371e:	429a      	cmp	r2, r3
 8003720:	d1f3      	bne.n	800370a <formular12+0x5a>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	78db      	ldrb	r3, [r3, #3]
 8003726:	2b44      	cmp	r3, #68	; 0x44
 8003728:	d1ef      	bne.n	800370a <formular12+0x5a>
    rotateCube(c, L2);
 800372a:	2102      	movs	r1, #2
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f7ff feb7 	bl	80034a0 <rotateCube>
    while (c->face[10] != c->face[13] || c->face[5] != 'D')
 8003732:	e003      	b.n	800373c <formular12+0x8c>
        rotateCube(c, U);
 8003734:	2106      	movs	r1, #6
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f7ff feb2 	bl	80034a0 <rotateCube>
    while (c->face[10] != c->face[13] || c->face[5] != 'D')
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	7a9a      	ldrb	r2, [r3, #10]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	7b5b      	ldrb	r3, [r3, #13]
 8003744:	429a      	cmp	r2, r3
 8003746:	d1f5      	bne.n	8003734 <formular12+0x84>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	795b      	ldrb	r3, [r3, #5]
 800374c:	2b44      	cmp	r3, #68	; 0x44
 800374e:	d1f1      	bne.n	8003734 <formular12+0x84>
    rotateCube(c, R2);
 8003750:	2105      	movs	r1, #5
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f7ff fea4 	bl	80034a0 <rotateCube>
}
 8003758:	bf00      	nop
 800375a:	3708      	adds	r7, #8
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <formular13>:
void formular13(cube_t *c)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
    rotateCube(c, R);
 8003768:	2103      	movs	r1, #3
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7ff fe98 	bl	80034a0 <rotateCube>
    rotateCube(c, U);
 8003770:	2106      	movs	r1, #6
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f7ff fe94 	bl	80034a0 <rotateCube>
    rotateCube(c, R3);
 8003778:	2104      	movs	r1, #4
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f7ff fe90 	bl	80034a0 <rotateCube>
}
 8003780:	bf00      	nop
 8003782:	3708      	adds	r7, #8
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <formular14>:
void formular14(cube_t *c)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
    rotateCube(c, F3);
 8003790:	210d      	movs	r1, #13
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f7ff fe84 	bl	80034a0 <rotateCube>
    rotateCube(c, U3);
 8003798:	2107      	movs	r1, #7
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f7ff fe80 	bl	80034a0 <rotateCube>
    rotateCube(c, F);
 80037a0:	210c      	movs	r1, #12
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f7ff fe7c 	bl	80034a0 <rotateCube>
}
 80037a8:	bf00      	nop
 80037aa:	3708      	adds	r7, #8
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <formular15>:

void formular15(cube_t *c)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
    if (c->face[29] == c->face[31] && c->face[22] == c->face[26] && c->face[15] == c->face[13])
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	7f5a      	ldrb	r2, [r3, #29]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	7fdb      	ldrb	r3, [r3, #31]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d10b      	bne.n	80037dc <formular15+0x2c>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	7d9a      	ldrb	r2, [r3, #22]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	7e9b      	ldrb	r3, [r3, #26]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d105      	bne.n	80037dc <formular15+0x2c>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	7bda      	ldrb	r2, [r3, #15]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	7b5b      	ldrb	r3, [r3, #13]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d064      	beq.n	80038a6 <formular15+0xf6>
        return;
    size_t i = 0;
 80037dc:	2300      	movs	r3, #0
 80037de:	60fb      	str	r3, [r7, #12]
    for (; i < 4;)
 80037e0:	e055      	b.n	800388e <formular15+0xde>
    {
        if (c->face[8] == c->face[13] && c->face[22] == c->face[20] && c->face[9] == c->face[31])
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	7a1a      	ldrb	r2, [r3, #8]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	7b5b      	ldrb	r3, [r3, #13]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d10f      	bne.n	800380e <formular15+0x5e>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	7d9a      	ldrb	r2, [r3, #22]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	7d1b      	ldrb	r3, [r3, #20]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d109      	bne.n	800380e <formular15+0x5e>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	7a5a      	ldrb	r2, [r3, #9]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	7fdb      	ldrb	r3, [r3, #31]
 8003802:	429a      	cmp	r2, r3
 8003804:	d103      	bne.n	800380e <formular15+0x5e>
        {
            formular13(c);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f7ff ffaa 	bl	8003760 <formular13>
            return;
 800380c:	e04c      	b.n	80038a8 <formular15+0xf8>
        }
        else if (c->face[8] == c->face[31] && c->face[13] == c->face[20] && c->face[9] == c->face[22])
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	7a1a      	ldrb	r2, [r3, #8]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	7fdb      	ldrb	r3, [r3, #31]
 8003816:	429a      	cmp	r2, r3
 8003818:	d119      	bne.n	800384e <formular15+0x9e>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	7b5a      	ldrb	r2, [r3, #13]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	7d1b      	ldrb	r3, [r3, #20]
 8003822:	429a      	cmp	r2, r3
 8003824:	d113      	bne.n	800384e <formular15+0x9e>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	7a5a      	ldrb	r2, [r3, #9]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	7d9b      	ldrb	r3, [r3, #22]
 800382e:	429a      	cmp	r2, r3
 8003830:	d10d      	bne.n	800384e <formular15+0x9e>
        {
            formular13(c);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f7ff ff94 	bl	8003760 <formular13>
            formular13(c);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f7ff ff91 	bl	8003760 <formular13>
            rotateCube(c, U3);
 800383e:	2107      	movs	r1, #7
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f7ff fe2d 	bl	80034a0 <rotateCube>
            formular13(c);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f7ff ff8a 	bl	8003760 <formular13>
            return;
 800384c:	e02c      	b.n	80038a8 <formular15+0xf8>
        }
        else if (c->face[8] == c->face[22] && c->face[20] == c->face[31] && c->face[9] == c->face[13])
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	7a1a      	ldrb	r2, [r3, #8]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	7d9b      	ldrb	r3, [r3, #22]
 8003856:	429a      	cmp	r2, r3
 8003858:	d10f      	bne.n	800387a <formular15+0xca>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	7d1a      	ldrb	r2, [r3, #20]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	7fdb      	ldrb	r3, [r3, #31]
 8003862:	429a      	cmp	r2, r3
 8003864:	d109      	bne.n	800387a <formular15+0xca>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	7a5a      	ldrb	r2, [r3, #9]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	7b5b      	ldrb	r3, [r3, #13]
 800386e:	429a      	cmp	r2, r3
 8003870:	d103      	bne.n	800387a <formular15+0xca>
        {
            formular14(c);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7ff ff88 	bl	8003788 <formular14>
            return;
 8003878:	e016      	b.n	80038a8 <formular15+0xf8>
        }
        else
        {
            if (++i == 4)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	3301      	adds	r3, #1
 800387e:	60fb      	str	r3, [r7, #12]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2b04      	cmp	r3, #4
 8003884:	d007      	beq.n	8003896 <formular15+0xe6>
                break;
            rotateCube(c, U);
 8003886:	2106      	movs	r1, #6
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f7ff fe09 	bl	80034a0 <rotateCube>
    for (; i < 4;)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2b03      	cmp	r3, #3
 8003892:	d9a6      	bls.n	80037e2 <formular15+0x32>
 8003894:	e000      	b.n	8003898 <formular15+0xe8>
                break;
 8003896:	bf00      	nop
        }
    }
    if (i == 4)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2b04      	cmp	r3, #4
 800389c:	d104      	bne.n	80038a8 <formular15+0xf8>
        formular13(c);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f7ff ff5e 	bl	8003760 <formular13>
 80038a4:	e000      	b.n	80038a8 <formular15+0xf8>
        return;
 80038a6:	bf00      	nop
}
 80038a8:	3710      	adds	r7, #16
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}

080038ae <formular21>:
void formular21(cube_t *c)
{
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b082      	sub	sp, #8
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
    rotateCube(c, U3);
 80038b6:	2107      	movs	r1, #7
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f7ff fdf1 	bl	80034a0 <rotateCube>
    rotateCube(c, F3);
 80038be:	210d      	movs	r1, #13
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f7ff fded 	bl	80034a0 <rotateCube>
    rotateCube(c, U);
 80038c6:	2106      	movs	r1, #6
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f7ff fde9 	bl	80034a0 <rotateCube>
    rotateCube(c, F);
 80038ce:	210c      	movs	r1, #12
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f7ff fde5 	bl	80034a0 <rotateCube>
    rotateCube(c, U);
 80038d6:	2106      	movs	r1, #6
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f7ff fde1 	bl	80034a0 <rotateCube>
    rotateCube(c, R);
 80038de:	2103      	movs	r1, #3
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f7ff fddd 	bl	80034a0 <rotateCube>
    rotateCube(c, U3);
 80038e6:	2107      	movs	r1, #7
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f7ff fdd9 	bl	80034a0 <rotateCube>
    rotateCube(c, R3);
 80038ee:	2104      	movs	r1, #4
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f7ff fdd5 	bl	80034a0 <rotateCube>
}
 80038f6:	bf00      	nop
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <formular22>:
void formular22(cube_t *c)
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b082      	sub	sp, #8
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
    rotateCube(c, U);
 8003906:	2106      	movs	r1, #6
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f7ff fdc9 	bl	80034a0 <rotateCube>
    rotateCube(c, R);
 800390e:	2103      	movs	r1, #3
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f7ff fdc5 	bl	80034a0 <rotateCube>
    rotateCube(c, U3);
 8003916:	2107      	movs	r1, #7
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f7ff fdc1 	bl	80034a0 <rotateCube>
    rotateCube(c, R3);
 800391e:	2104      	movs	r1, #4
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f7ff fdbd 	bl	80034a0 <rotateCube>
    rotateCube(c, U3);
 8003926:	2107      	movs	r1, #7
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f7ff fdb9 	bl	80034a0 <rotateCube>
    rotateCube(c, F3);
 800392e:	210d      	movs	r1, #13
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f7ff fdb5 	bl	80034a0 <rotateCube>
    rotateCube(c, U);
 8003936:	2106      	movs	r1, #6
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f7ff fdb1 	bl	80034a0 <rotateCube>
    rotateCube(c, F);
 800393e:	210c      	movs	r1, #12
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f7ff fdad 	bl	80034a0 <rotateCube>
}
 8003946:	bf00      	nop
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <formular23>:
void formular23(cube_t *c)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b084      	sub	sp, #16
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
    if (c->face[23] == c->face[22] && c->face[12] == c->face[13])
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	7dda      	ldrb	r2, [r3, #23]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	7d9b      	ldrb	r3, [r3, #22]
 800395e:	429a      	cmp	r2, r3
 8003960:	d105      	bne.n	800396e <formular23+0x20>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	7b1a      	ldrb	r2, [r3, #12]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	7b5b      	ldrb	r3, [r3, #13]
 800396a:	429a      	cmp	r2, r3
 800396c:	d038      	beq.n	80039e0 <formular23+0x92>
        return;
    size_t i = 0;
 800396e:	2300      	movs	r3, #0
 8003970:	60fb      	str	r3, [r7, #12]
    for (; i < 4;)
 8003972:	e029      	b.n	80039c8 <formular23+0x7a>
    {
        if (c->face[19] == c->face[22] && c->face[7] == c->face[13])
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	7cda      	ldrb	r2, [r3, #19]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	7d9b      	ldrb	r3, [r3, #22]
 800397c:	429a      	cmp	r2, r3
 800397e:	d109      	bne.n	8003994 <formular23+0x46>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	79da      	ldrb	r2, [r3, #7]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	7b5b      	ldrb	r3, [r3, #13]
 8003988:	429a      	cmp	r2, r3
 800398a:	d103      	bne.n	8003994 <formular23+0x46>
        {
            formular22(c);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f7ff ffb6 	bl	80038fe <formular22>
            break;
 8003992:	e01e      	b.n	80039d2 <formular23+0x84>
        }
        else if (c->face[5] == c->face[22] && c->face[10] == c->face[13])
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	795a      	ldrb	r2, [r3, #5]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	7d9b      	ldrb	r3, [r3, #22]
 800399c:	429a      	cmp	r2, r3
 800399e:	d109      	bne.n	80039b4 <formular23+0x66>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	7a9a      	ldrb	r2, [r3, #10]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	7b5b      	ldrb	r3, [r3, #13]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d103      	bne.n	80039b4 <formular23+0x66>
        {
            formular21(c);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f7ff ff7e 	bl	80038ae <formular21>
            break;
 80039b2:	e00e      	b.n	80039d2 <formular23+0x84>
        }
        else
        {
            if (++i == 4)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	3301      	adds	r3, #1
 80039b8:	60fb      	str	r3, [r7, #12]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2b04      	cmp	r3, #4
 80039be:	d007      	beq.n	80039d0 <formular23+0x82>
                break;
            rotateCube(c, U);
 80039c0:	2106      	movs	r1, #6
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f7ff fd6c 	bl	80034a0 <rotateCube>
    for (; i < 4;)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2b03      	cmp	r3, #3
 80039cc:	d9d2      	bls.n	8003974 <formular23+0x26>
 80039ce:	e000      	b.n	80039d2 <formular23+0x84>
                break;
 80039d0:	bf00      	nop
        }
    }
    if (i == 4)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2b04      	cmp	r3, #4
 80039d6:	d104      	bne.n	80039e2 <formular23+0x94>
        formular21(c);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f7ff ff68 	bl	80038ae <formular21>
 80039de:	e000      	b.n	80039e2 <formular23+0x94>
        return;
 80039e0:	bf00      	nop
}
 80039e2:	3710      	adds	r7, #16
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <formular31>:
void formular31(cube_t *c)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
    rotateCube(c, F);
 80039f0:	210c      	movs	r1, #12
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f7ff fd54 	bl	80034a0 <rotateCube>
    rotateCube(c, R);
 80039f8:	2103      	movs	r1, #3
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f7ff fd50 	bl	80034a0 <rotateCube>
    rotateCube(c, U);
 8003a00:	2106      	movs	r1, #6
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f7ff fd4c 	bl	80034a0 <rotateCube>
    rotateCube(c, R3);
 8003a08:	2104      	movs	r1, #4
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f7ff fd48 	bl	80034a0 <rotateCube>
    rotateCube(c, U3);
 8003a10:	2107      	movs	r1, #7
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7ff fd44 	bl	80034a0 <rotateCube>
    rotateCube(c, F3);
 8003a18:	210d      	movs	r1, #13
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7ff fd40 	bl	80034a0 <rotateCube>
}
 8003a20:	bf00      	nop
 8003a22:	3708      	adds	r7, #8
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <formular32>:
void formular32(cube_t *c)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
    if (c->face[1] == c->face[4] && c->face[7] == c->face[4])
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	785a      	ldrb	r2, [r3, #1]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	791b      	ldrb	r3, [r3, #4]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d109      	bne.n	8003a50 <formular32+0x28>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	79da      	ldrb	r2, [r3, #7]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	791b      	ldrb	r3, [r3, #4]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d103      	bne.n	8003a50 <formular32+0x28>
        rotateCube(c, U);
 8003a48:	2106      	movs	r1, #6
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7ff fd28 	bl	80034a0 <rotateCube>
    if (c->face[3] == c->face[4] && c->face[5] == c->face[4])
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	78da      	ldrb	r2, [r3, #3]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	791b      	ldrb	r3, [r3, #4]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d10d      	bne.n	8003a78 <formular32+0x50>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	795a      	ldrb	r2, [r3, #5]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	791b      	ldrb	r3, [r3, #4]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d107      	bne.n	8003a78 <formular32+0x50>
    {
        formular31(c);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f7ff ffbd 	bl	80039e8 <formular31>
        return;
 8003a6e:	e029      	b.n	8003ac4 <formular32+0x9c>
    }
    while (c->face[19] != c->face[4] || c->face[10] != c->face[4])
        rotateCube(c, U);
 8003a70:	2106      	movs	r1, #6
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f7ff fd14 	bl	80034a0 <rotateCube>
    while (c->face[19] != c->face[4] || c->face[10] != c->face[4])
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	7cda      	ldrb	r2, [r3, #19]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	791b      	ldrb	r3, [r3, #4]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d1f5      	bne.n	8003a70 <formular32+0x48>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	7a9a      	ldrb	r2, [r3, #10]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	791b      	ldrb	r3, [r3, #4]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d1ef      	bne.n	8003a70 <formular32+0x48>
    if (c->face[3] == c->face[4] && c->face[1] == c->face[4])
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	78da      	ldrb	r2, [r3, #3]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	791b      	ldrb	r3, [r3, #4]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d109      	bne.n	8003ab0 <formular32+0x88>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	785a      	ldrb	r2, [r3, #1]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	791b      	ldrb	r3, [r3, #4]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d103      	bne.n	8003ab0 <formular32+0x88>
        formular31(c);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f7ff ff9d 	bl	80039e8 <formular31>
 8003aae:	e009      	b.n	8003ac4 <formular32+0x9c>
    else
    {
        formular31(c);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f7ff ff99 	bl	80039e8 <formular31>
        rotateCube(c, U);
 8003ab6:	2106      	movs	r1, #6
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f7ff fcf1 	bl	80034a0 <rotateCube>
        formular31(c);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7ff ff92 	bl	80039e8 <formular31>
    }
}
 8003ac4:	3708      	adds	r7, #8
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <formular41>:
void formular41(cube_t *c)
{
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b082      	sub	sp, #8
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
    rotateCube(c, R3);
 8003ad2:	2104      	movs	r1, #4
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f7ff fce3 	bl	80034a0 <rotateCube>
    rotateCube(c, U2);
 8003ada:	2108      	movs	r1, #8
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f7ff fcdf 	bl	80034a0 <rotateCube>
    rotateCube(c, R);
 8003ae2:	2103      	movs	r1, #3
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f7ff fcdb 	bl	80034a0 <rotateCube>
    rotateCube(c, U);
 8003aea:	2106      	movs	r1, #6
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f7ff fcd7 	bl	80034a0 <rotateCube>
    rotateCube(c, R3);
 8003af2:	2104      	movs	r1, #4
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f7ff fcd3 	bl	80034a0 <rotateCube>
    rotateCube(c, U);
 8003afa:	2106      	movs	r1, #6
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f7ff fccf 	bl	80034a0 <rotateCube>
    rotateCube(c, R);
 8003b02:	2103      	movs	r1, #3
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f7ff fccb 	bl	80034a0 <rotateCube>
}
 8003b0a:	bf00      	nop
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <formular42>:
void formular42(cube_t *c)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b082      	sub	sp, #8
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
    rotateCube(c, U3);
 8003b1a:	2107      	movs	r1, #7
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f7ff fcbf 	bl	80034a0 <rotateCube>
    rotateCube(c, R);
 8003b22:	2103      	movs	r1, #3
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f7ff fcbb 	bl	80034a0 <rotateCube>
    rotateCube(c, U2);
 8003b2a:	2108      	movs	r1, #8
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f7ff fcb7 	bl	80034a0 <rotateCube>
    rotateCube(c, R3);
 8003b32:	2104      	movs	r1, #4
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f7ff fcb3 	bl	80034a0 <rotateCube>
    rotateCube(c, U3);
 8003b3a:	2107      	movs	r1, #7
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f7ff fcaf 	bl	80034a0 <rotateCube>
    rotateCube(c, R);
 8003b42:	2103      	movs	r1, #3
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f7ff fcab 	bl	80034a0 <rotateCube>
    rotateCube(c, U3);
 8003b4a:	2107      	movs	r1, #7
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f7ff fca7 	bl	80034a0 <rotateCube>
    rotateCube(c, R3);
 8003b52:	2104      	movs	r1, #4
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f7ff fca3 	bl	80034a0 <rotateCube>
}
 8003b5a:	bf00      	nop
 8003b5c:	3708      	adds	r7, #8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <formular43>:
void formular43(cube_t *c)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b086      	sub	sp, #24
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
    uint8_t cnt = 0;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	75fb      	strb	r3, [r7, #23]
    for (size_t i = 0; i < 9; i++)
 8003b6e:	2300      	movs	r3, #0
 8003b70:	613b      	str	r3, [r7, #16]
 8003b72:	e00d      	b.n	8003b90 <formular43+0x2e>
    {
        if (c->face[i] == c->face[4])
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	4413      	add	r3, r2
 8003b7a:	781a      	ldrb	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	791b      	ldrb	r3, [r3, #4]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d102      	bne.n	8003b8a <formular43+0x28>
            cnt++;
 8003b84:	7dfb      	ldrb	r3, [r7, #23]
 8003b86:	3301      	adds	r3, #1
 8003b88:	75fb      	strb	r3, [r7, #23]
    for (size_t i = 0; i < 9; i++)
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	613b      	str	r3, [r7, #16]
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	2b08      	cmp	r3, #8
 8003b94:	d9ee      	bls.n	8003b74 <formular43+0x12>
    }
    if (cnt == 6)
 8003b96:	7dfb      	ldrb	r3, [r7, #23]
 8003b98:	2b06      	cmp	r3, #6
 8003b9a:	d142      	bne.n	8003c22 <formular43+0xc0>
    {
        while (1)
        {
            uint8_t case1 = c->face[47] == c->face[4] && c->face[38] == c->face[4] && c->face[11] == c->face[4];
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	791b      	ldrb	r3, [r3, #4]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d10e      	bne.n	8003bc8 <formular43+0x66>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	791b      	ldrb	r3, [r3, #4]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d107      	bne.n	8003bc8 <formular43+0x66>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	7ada      	ldrb	r2, [r3, #11]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	791b      	ldrb	r3, [r3, #4]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d101      	bne.n	8003bc8 <formular43+0x66>
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e000      	b.n	8003bca <formular43+0x68>
 8003bc8:	2300      	movs	r3, #0
 8003bca:	72bb      	strb	r3, [r7, #10]
            uint8_t case2 = c->face[45] == c->face[4] && c->face[36] == c->face[4] && c->face[18] == c->face[4];
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	791b      	ldrb	r3, [r3, #4]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d10e      	bne.n	8003bf8 <formular43+0x96>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	791b      	ldrb	r3, [r3, #4]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d107      	bne.n	8003bf8 <formular43+0x96>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	7c9a      	ldrb	r2, [r3, #18]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	791b      	ldrb	r3, [r3, #4]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d101      	bne.n	8003bf8 <formular43+0x96>
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e000      	b.n	8003bfa <formular43+0x98>
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	727b      	strb	r3, [r7, #9]
            if (case1)
 8003bfc:	7abb      	ldrb	r3, [r7, #10]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d003      	beq.n	8003c0a <formular43+0xa8>
            {
                formular41(c);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f7ff ff61 	bl	8003aca <formular41>
                return;
 8003c08:	e0c2      	b.n	8003d90 <formular43+0x22e>
            }
            else if (case2)
 8003c0a:	7a7b      	ldrb	r3, [r7, #9]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d003      	beq.n	8003c18 <formular43+0xb6>
            {
                formular42(c);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f7ff ff7e 	bl	8003b12 <formular42>
                return;
 8003c16:	e0bb      	b.n	8003d90 <formular43+0x22e>
            }
            else
                rotateCube(c, U);
 8003c18:	2106      	movs	r1, #6
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f7ff fc40 	bl	80034a0 <rotateCube>
        {
 8003c20:	e7bc      	b.n	8003b9c <formular43+0x3a>
        }
    }
    else if (cnt == 5)
 8003c22:	7dfb      	ldrb	r3, [r7, #23]
 8003c24:	2b05      	cmp	r3, #5
 8003c26:	d157      	bne.n	8003cd8 <formular43+0x176>
    {
        while (1)
        {
            uint8_t case3 = c->face[11] == c->face[4] && c->face[36] == c->face[4] && c->face[18] == c->face[4] && c->face[20] == c->face[4];
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	7ada      	ldrb	r2, [r3, #11]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	791b      	ldrb	r3, [r3, #4]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d114      	bne.n	8003c5e <formular43+0xfc>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	791b      	ldrb	r3, [r3, #4]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d10d      	bne.n	8003c5e <formular43+0xfc>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	7c9a      	ldrb	r2, [r3, #18]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	791b      	ldrb	r3, [r3, #4]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d107      	bne.n	8003c5e <formular43+0xfc>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	7d1a      	ldrb	r2, [r3, #20]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	791b      	ldrb	r3, [r3, #4]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d101      	bne.n	8003c5e <formular43+0xfc>
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e000      	b.n	8003c60 <formular43+0xfe>
 8003c5e:	2300      	movs	r3, #0
 8003c60:	733b      	strb	r3, [r7, #12]
            uint8_t case4 = c->face[45] == c->face[4] && c->face[47] == c->face[4] && c->face[18] == c->face[4] && c->face[20] == c->face[4];
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	791b      	ldrb	r3, [r3, #4]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d114      	bne.n	8003c9a <formular43+0x138>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	791b      	ldrb	r3, [r3, #4]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d10d      	bne.n	8003c9a <formular43+0x138>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	7c9a      	ldrb	r2, [r3, #18]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	791b      	ldrb	r3, [r3, #4]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d107      	bne.n	8003c9a <formular43+0x138>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	7d1a      	ldrb	r2, [r3, #20]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	791b      	ldrb	r3, [r3, #4]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d101      	bne.n	8003c9a <formular43+0x138>
 8003c96:	2301      	movs	r3, #1
 8003c98:	e000      	b.n	8003c9c <formular43+0x13a>
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	72fb      	strb	r3, [r7, #11]
            if (case3)
 8003c9e:	7b3b      	ldrb	r3, [r7, #12]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00a      	beq.n	8003cba <formular43+0x158>
            {
                formular41(c);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f7ff ff10 	bl	8003aca <formular41>
                rotateCube(c, U3);
 8003caa:	2107      	movs	r1, #7
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f7ff fbf7 	bl	80034a0 <rotateCube>
                formular41(c);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f7ff ff09 	bl	8003aca <formular41>
                break;
 8003cb8:	e06a      	b.n	8003d90 <formular43+0x22e>
            }
            else if (case4)
 8003cba:	7afb      	ldrb	r3, [r7, #11]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d006      	beq.n	8003cce <formular43+0x16c>
            {
                formular41(c);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f7ff ff02 	bl	8003aca <formular41>
                formular41(c);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f7ff feff 	bl	8003aca <formular41>
                break;
 8003ccc:	e060      	b.n	8003d90 <formular43+0x22e>
            }
            else
                rotateCube(c, U);
 8003cce:	2106      	movs	r1, #6
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f7ff fbe5 	bl	80034a0 <rotateCube>
        {
 8003cd6:	e7a7      	b.n	8003c28 <formular43+0xc6>
        }
    }
    else if (cnt == 7)
 8003cd8:	7dfb      	ldrb	r3, [r7, #23]
 8003cda:	2b07      	cmp	r3, #7
 8003cdc:	d158      	bne.n	8003d90 <formular43+0x22e>
    {
        while (1)
        {
            uint8_t case5 = c->face[18] == c->face[4] && c->face[20] == c->face[4];
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	7c9a      	ldrb	r2, [r3, #18]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	791b      	ldrb	r3, [r3, #4]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d107      	bne.n	8003cfa <formular43+0x198>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	7d1a      	ldrb	r2, [r3, #20]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	791b      	ldrb	r3, [r3, #4]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d101      	bne.n	8003cfa <formular43+0x198>
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e000      	b.n	8003cfc <formular43+0x19a>
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	73fb      	strb	r3, [r7, #15]
            uint8_t case6 = c->face[45] == c->face[4] && c->face[20] == c->face[4];
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	791b      	ldrb	r3, [r3, #4]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d107      	bne.n	8003d1c <formular43+0x1ba>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	7d1a      	ldrb	r2, [r3, #20]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	791b      	ldrb	r3, [r3, #4]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d101      	bne.n	8003d1c <formular43+0x1ba>
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e000      	b.n	8003d1e <formular43+0x1bc>
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	73bb      	strb	r3, [r7, #14]
            uint8_t case7 = c->face[47] == c->face[4] && c->face[9] == c->face[4];
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	791b      	ldrb	r3, [r3, #4]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d107      	bne.n	8003d3e <formular43+0x1dc>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	7a5a      	ldrb	r2, [r3, #9]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	791b      	ldrb	r3, [r3, #4]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d101      	bne.n	8003d3e <formular43+0x1dc>
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e000      	b.n	8003d40 <formular43+0x1de>
 8003d3e:	2300      	movs	r3, #0
 8003d40:	737b      	strb	r3, [r7, #13]
            if (case5)
 8003d42:	7bfb      	ldrb	r3, [r7, #15]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00a      	beq.n	8003d5e <formular43+0x1fc>
            {
                formular42(c);
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f7ff fee2 	bl	8003b12 <formular42>
                rotateCube(c, U2);
 8003d4e:	2108      	movs	r1, #8
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f7ff fba5 	bl	80034a0 <rotateCube>
                formular41(c);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f7ff feb7 	bl	8003aca <formular41>
                return;
 8003d5c:	e018      	b.n	8003d90 <formular43+0x22e>
            }
            else if (case6)
 8003d5e:	7bbb      	ldrb	r3, [r7, #14]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d006      	beq.n	8003d72 <formular43+0x210>
            {
                formular42(c);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f7ff fed4 	bl	8003b12 <formular42>
                formular41(c);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f7ff fead 	bl	8003aca <formular41>
                return;
 8003d70:	e00e      	b.n	8003d90 <formular43+0x22e>
            }
            else if (case7)
 8003d72:	7b7b      	ldrb	r3, [r7, #13]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d006      	beq.n	8003d86 <formular43+0x224>
            {
                formular41(c);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f7ff fea6 	bl	8003aca <formular41>
                formular42(c);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f7ff fec7 	bl	8003b12 <formular42>
                return;
 8003d84:	e004      	b.n	8003d90 <formular43+0x22e>
            }
            else
            {
                rotateCube(c, U);
 8003d86:	2106      	movs	r1, #6
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f7ff fb89 	bl	80034a0 <rotateCube>
        {
 8003d8e:	e7a6      	b.n	8003cde <formular43+0x17c>
            }
        }
    } // printf("case1 = %d, case2 = %d, case3 = %d, case4 = %d, case5 = %d, case6 = %d, case7 = %d\n", case1, case2, case3, case4, case5, case6, case7);
}
 8003d90:	3718      	adds	r7, #24
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <formular51>:
void formular51(cube_t *c)
{
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b082      	sub	sp, #8
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
    rotateCube(c, R);
 8003d9e:	2103      	movs	r1, #3
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f7ff fb7d 	bl	80034a0 <rotateCube>
    rotateCube(c, B3);
 8003da6:	2110      	movs	r1, #16
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f7ff fb79 	bl	80034a0 <rotateCube>
    rotateCube(c, R);
 8003dae:	2103      	movs	r1, #3
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f7ff fb75 	bl	80034a0 <rotateCube>
    rotateCube(c, F2);
 8003db6:	210e      	movs	r1, #14
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f7ff fb71 	bl	80034a0 <rotateCube>
    rotateCube(c, R3);
 8003dbe:	2104      	movs	r1, #4
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f7ff fb6d 	bl	80034a0 <rotateCube>
    rotateCube(c, B);
 8003dc6:	210f      	movs	r1, #15
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f7ff fb69 	bl	80034a0 <rotateCube>
    rotateCube(c, R);
 8003dce:	2103      	movs	r1, #3
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f7ff fb65 	bl	80034a0 <rotateCube>
    rotateCube(c, F2);
 8003dd6:	210e      	movs	r1, #14
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f7ff fb61 	bl	80034a0 <rotateCube>
    rotateCube(c, R2);
 8003dde:	2105      	movs	r1, #5
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f7ff fb5d 	bl	80034a0 <rotateCube>
}
 8003de6:	bf00      	nop
 8003de8:	3708      	adds	r7, #8
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
	...

08003df0 <formular52>:
void formular52(cube_t *c)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b086      	sub	sp, #24
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
    printf("formular52\n");
 8003df8:	4834      	ldr	r0, [pc, #208]	; (8003ecc <formular52+0xdc>)
 8003dfa:	f004 fa37 	bl	800826c <puts>
    if (c->face[18] == c->face[20] && c->face[9] == c->face[11] && c->face[36] == c->face[38])
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	7c9a      	ldrb	r2, [r3, #18]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	7d1b      	ldrb	r3, [r3, #20]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d119      	bne.n	8003e3e <formular52+0x4e>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	7a5a      	ldrb	r2, [r3, #9]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	7adb      	ldrb	r3, [r3, #11]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d113      	bne.n	8003e3e <formular52+0x4e>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d10b      	bne.n	8003e3e <formular52+0x4e>
    {
        while (c->face[18] != c->face[22])
 8003e26:	e003      	b.n	8003e30 <formular52+0x40>
            rotateCube(c, U);
 8003e28:	2106      	movs	r1, #6
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f7ff fb38 	bl	80034a0 <rotateCube>
        while (c->face[18] != c->face[22])
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	7c9a      	ldrb	r2, [r3, #18]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	7d9b      	ldrb	r3, [r3, #22]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d1f5      	bne.n	8003e28 <formular52+0x38>
        return;
 8003e3c:	e042      	b.n	8003ec4 <formular52+0xd4>
    }
    uint8_t routeCnt = 0;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	75fb      	strb	r3, [r7, #23]
    for (size_t i = 0; i < 4; i++)
 8003e42:	2300      	movs	r3, #0
 8003e44:	613b      	str	r3, [r7, #16]
 8003e46:	e00f      	b.n	8003e68 <formular52+0x78>
    {
        if (c->face[18] != c->face[20])
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	7c9a      	ldrb	r2, [r3, #18]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	7d1b      	ldrb	r3, [r3, #20]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d00d      	beq.n	8003e70 <formular52+0x80>
        {
            rotateCube(c, U);
 8003e54:	2106      	movs	r1, #6
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f7ff fb22 	bl	80034a0 <rotateCube>
            routeCnt++;
 8003e5c:	7dfb      	ldrb	r3, [r7, #23]
 8003e5e:	3301      	adds	r3, #1
 8003e60:	75fb      	strb	r3, [r7, #23]
    for (size_t i = 0; i < 4; i++)
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	3301      	adds	r3, #1
 8003e66:	613b      	str	r3, [r7, #16]
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	2b03      	cmp	r3, #3
 8003e6c:	d9ec      	bls.n	8003e48 <formular52+0x58>
 8003e6e:	e000      	b.n	8003e72 <formular52+0x82>
        }
        else
            break;
 8003e70:	bf00      	nop
    }
    formular51(c);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f7ff ff8f 	bl	8003d96 <formular51>
    if (routeCnt == 4)
 8003e78:	7dfb      	ldrb	r3, [r7, #23]
 8003e7a:	2b04      	cmp	r3, #4
 8003e7c:	d11c      	bne.n	8003eb8 <formular52+0xc8>
    {
        for (size_t i = 0; i < 3; i++)
 8003e7e:	2300      	movs	r3, #0
 8003e80:	60fb      	str	r3, [r7, #12]
 8003e82:	e00c      	b.n	8003e9e <formular52+0xae>
        {
            if (c->face[18] != c->face[20])
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	7c9a      	ldrb	r2, [r3, #18]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	7d1b      	ldrb	r3, [r3, #20]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d00a      	beq.n	8003ea6 <formular52+0xb6>
                rotateCube(c, U);
 8003e90:	2106      	movs	r1, #6
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7ff fb04 	bl	80034a0 <rotateCube>
        for (size_t i = 0; i < 3; i++)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	60fb      	str	r3, [r7, #12]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d9ef      	bls.n	8003e84 <formular52+0x94>
 8003ea4:	e000      	b.n	8003ea8 <formular52+0xb8>
            else
                break;
 8003ea6:	bf00      	nop
        }
        formular51(c);
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f7ff ff74 	bl	8003d96 <formular51>
    }
    while (c->face[18] != c->face[22])
 8003eae:	e003      	b.n	8003eb8 <formular52+0xc8>
        rotateCube(c, U);
 8003eb0:	2106      	movs	r1, #6
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f7ff faf4 	bl	80034a0 <rotateCube>
    while (c->face[18] != c->face[22])
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	7c9a      	ldrb	r2, [r3, #18]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	7d9b      	ldrb	r3, [r3, #22]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d1f5      	bne.n	8003eb0 <formular52+0xc0>
}
 8003ec4:	3718      	adds	r7, #24
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	08008be4 	.word	0x08008be4

08003ed0 <formular61>:
void formular61(cube_t *c)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
    rotateCube(c, R);
 8003ed8:	2103      	movs	r1, #3
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f7ff fae0 	bl	80034a0 <rotateCube>
    rotateCube(c, U3);
 8003ee0:	2107      	movs	r1, #7
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f7ff fadc 	bl	80034a0 <rotateCube>
    rotateCube(c, R);
 8003ee8:	2103      	movs	r1, #3
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f7ff fad8 	bl	80034a0 <rotateCube>
    rotateCube(c, U);
 8003ef0:	2106      	movs	r1, #6
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f7ff fad4 	bl	80034a0 <rotateCube>
    rotateCube(c, R);
 8003ef8:	2103      	movs	r1, #3
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f7ff fad0 	bl	80034a0 <rotateCube>
    rotateCube(c, U);
 8003f00:	2106      	movs	r1, #6
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f7ff facc 	bl	80034a0 <rotateCube>
    rotateCube(c, R);
 8003f08:	2103      	movs	r1, #3
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f7ff fac8 	bl	80034a0 <rotateCube>
    rotateCube(c, U3);
 8003f10:	2107      	movs	r1, #7
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f7ff fac4 	bl	80034a0 <rotateCube>
    rotateCube(c, R3);
 8003f18:	2104      	movs	r1, #4
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7ff fac0 	bl	80034a0 <rotateCube>
    rotateCube(c, U3);
 8003f20:	2107      	movs	r1, #7
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f7ff fabc 	bl	80034a0 <rotateCube>
    rotateCube(c, R2);
 8003f28:	2105      	movs	r1, #5
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f7ff fab8 	bl	80034a0 <rotateCube>
}
 8003f30:	bf00      	nop
 8003f32:	3708      	adds	r7, #8
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <formular62>:
void formular62(cube_t *c)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
    while (1)
    {
        if (c->face[19] == c->face[22] && c->face[37] == c->face[40])
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	7cda      	ldrb	r2, [r3, #19]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	7d9b      	ldrb	r3, [r3, #22]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d108      	bne.n	8003f5e <formular62+0x26>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	f000 8086 	beq.w	800406a <formular62+0x132>
        {
            break;
        }
        if (c->face[19] == c->face[13] && c->face[10] == c->face[40] && c->face[37] == c->face[22])
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	7cda      	ldrb	r2, [r3, #19]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	7b5b      	ldrb	r3, [r3, #13]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d111      	bne.n	8003f8e <formular62+0x56>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	7a9a      	ldrb	r2, [r3, #10]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d10a      	bne.n	8003f8e <formular62+0x56>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	7d9b      	ldrb	r3, [r3, #22]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d103      	bne.n	8003f8e <formular62+0x56>
        {
            formular61(c);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f7ff ffa2 	bl	8003ed0 <formular61>
            break;
 8003f8c:	e06e      	b.n	800406c <formular62+0x134>
        }
        else if (c->face[37] == c->face[13] && c->face[19] == c->face[40] && c->face[10] == c->face[22])
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	7b5b      	ldrb	r3, [r3, #13]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d113      	bne.n	8003fc4 <formular62+0x8c>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	7cda      	ldrb	r2, [r3, #19]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d10c      	bne.n	8003fc4 <formular62+0x8c>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	7a9a      	ldrb	r2, [r3, #10]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	7d9b      	ldrb	r3, [r3, #22]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d106      	bne.n	8003fc4 <formular62+0x8c>
        {
            formular61(c);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f7ff ff8a 	bl	8003ed0 <formular61>
            formular61(c);
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f7ff ff87 	bl	8003ed0 <formular61>
            break;
 8003fc2:	e053      	b.n	800406c <formular62+0x134>
        }
        else if (c->face[19] == c->face[49] && c->face[46] == c->face[22] && c->face[37] == c->face[13] && c->face[10] == c->face[40])
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	7cda      	ldrb	r2, [r3, #19]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d11f      	bne.n	8004012 <formular62+0xda>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	7d9b      	ldrb	r3, [r3, #22]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d118      	bne.n	8004012 <formular62+0xda>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	7b5b      	ldrb	r3, [r3, #13]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d111      	bne.n	8004012 <formular62+0xda>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	7a9a      	ldrb	r2, [r3, #10]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d10a      	bne.n	8004012 <formular62+0xda>
        {
            formular61(c);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f7ff ff67 	bl	8003ed0 <formular61>
            rotateCube(c, U);
 8004002:	2106      	movs	r1, #6
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f7ff fa4b 	bl	80034a0 <rotateCube>
            formular61(c);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f7ff ff60 	bl	8003ed0 <formular61>
            break;
 8004010:	e02c      	b.n	800406c <formular62+0x134>
        }
        else if (c->face[19] == c->face[13] && c->face[10] == c->face[22] && c->face[37] == c->face[49] && c->face[46] == c->face[40])
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	7cda      	ldrb	r2, [r3, #19]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	7b5b      	ldrb	r3, [r3, #13]
 800401a:	429a      	cmp	r2, r3
 800401c:	d120      	bne.n	8004060 <formular62+0x128>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	7a9a      	ldrb	r2, [r3, #10]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	7d9b      	ldrb	r3, [r3, #22]
 8004026:	429a      	cmp	r2, r3
 8004028:	d11a      	bne.n	8004060 <formular62+0x128>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004036:	429a      	cmp	r2, r3
 8004038:	d112      	bne.n	8004060 <formular62+0x128>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004046:	429a      	cmp	r2, r3
 8004048:	d10a      	bne.n	8004060 <formular62+0x128>
        {
            formular61(c);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f7ff ff40 	bl	8003ed0 <formular61>
            rotateCube(c, U3);
 8004050:	2107      	movs	r1, #7
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f7ff fa24 	bl	80034a0 <rotateCube>
            formular61(c);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f7ff ff39 	bl	8003ed0 <formular61>
            break;
 800405e:	e005      	b.n	800406c <formular62+0x134>
        }
        else
            rotateCube(c, T);
 8004060:	2112      	movs	r1, #18
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7ff fa1c 	bl	80034a0 <rotateCube>
        if (c->face[19] == c->face[22] && c->face[37] == c->face[40])
 8004068:	e76a      	b.n	8003f40 <formular62+0x8>
            break;
 800406a:	bf00      	nop
    }
}
 800406c:	bf00      	nop
 800406e:	3708      	adds	r7, #8
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <solve_Naive>:
void solve_Naive(cube_t *c)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
    // 1. get the botton face cross
    if (!(c->face[28] == 'D' && c->face[30] == 'D' && c->face[32] == 'D' && c->face[34] == 'D' && c->face[25] == c->face[22] && c->face[16] == c->face[13] && c->face[52] == c->face[49] && c->face[40] == c->face[43]))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	7f1b      	ldrb	r3, [r3, #28]
 8004080:	2b44      	cmp	r3, #68	; 0x44
 8004082:	d12d      	bne.n	80040e0 <solve_Naive+0x6c>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	7f9b      	ldrb	r3, [r3, #30]
 8004088:	2b44      	cmp	r3, #68	; 0x44
 800408a:	d129      	bne.n	80040e0 <solve_Naive+0x6c>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004092:	2b44      	cmp	r3, #68	; 0x44
 8004094:	d124      	bne.n	80040e0 <solve_Naive+0x6c>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800409c:	2b44      	cmp	r3, #68	; 0x44
 800409e:	d11f      	bne.n	80040e0 <solve_Naive+0x6c>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	7e5a      	ldrb	r2, [r3, #25]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	7d9b      	ldrb	r3, [r3, #22]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d119      	bne.n	80040e0 <solve_Naive+0x6c>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	7c1a      	ldrb	r2, [r3, #16]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	7b5b      	ldrb	r3, [r3, #13]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d113      	bne.n	80040e0 <solve_Naive+0x6c>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d10b      	bne.n	80040e0 <solve_Naive+0x6c>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d01e      	beq.n	8004116 <solve_Naive+0xa2>
    {
        while (c->face[1] != 'D' || c->face[3] != 'D' || c->face[5] != 'D' || c->face[7] != 'D')
 80040d8:	e002      	b.n	80040e0 <solve_Naive+0x6c>
            formular11(c);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f7ff fa56 	bl	800358c <formular11>
        while (c->face[1] != 'D' || c->face[3] != 'D' || c->face[5] != 'D' || c->face[7] != 'D')
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	785b      	ldrb	r3, [r3, #1]
 80040e4:	2b44      	cmp	r3, #68	; 0x44
 80040e6:	d1f8      	bne.n	80040da <solve_Naive+0x66>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	78db      	ldrb	r3, [r3, #3]
 80040ec:	2b44      	cmp	r3, #68	; 0x44
 80040ee:	d1f4      	bne.n	80040da <solve_Naive+0x66>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	795b      	ldrb	r3, [r3, #5]
 80040f4:	2b44      	cmp	r3, #68	; 0x44
 80040f6:	d1f0      	bne.n	80040da <solve_Naive+0x66>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	79db      	ldrb	r3, [r3, #7]
 80040fc:	2b44      	cmp	r3, #68	; 0x44
 80040fe:	d1ec      	bne.n	80040da <solve_Naive+0x66>
        formular12(c);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f7ff fad5 	bl	80036b0 <formular12>
    } // 2. get the botton corner
    while (c->face[26] != c->face[22] || c->face[17] != c->face[13] || c->face[53] != c->face[49] || c->face[40] != c->face[44] ||
 8004106:	e006      	b.n	8004116 <solve_Naive+0xa2>
           c->face[24] != c->face[22] || c->face[15] != c->face[13] || c->face[51] != c->face[49] || c->face[40] != c->face[42])
    {
        formular15(c);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f7ff fb51 	bl	80037b0 <formular15>
        rotateCube(c, T);
 800410e:	2112      	movs	r1, #18
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f7ff f9c5 	bl	80034a0 <rotateCube>
    while (c->face[26] != c->face[22] || c->face[17] != c->face[13] || c->face[53] != c->face[49] || c->face[40] != c->face[44] ||
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	7e9a      	ldrb	r2, [r3, #26]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	7d9b      	ldrb	r3, [r3, #22]
 800411e:	429a      	cmp	r2, r3
 8004120:	d1f2      	bne.n	8004108 <solve_Naive+0x94>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	7c5a      	ldrb	r2, [r3, #17]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	7b5b      	ldrb	r3, [r3, #13]
 800412a:	429a      	cmp	r2, r3
 800412c:	d1ec      	bne.n	8004108 <solve_Naive+0x94>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800413a:	429a      	cmp	r2, r3
 800413c:	d1e4      	bne.n	8004108 <solve_Naive+0x94>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800414a:	429a      	cmp	r2, r3
 800414c:	d1dc      	bne.n	8004108 <solve_Naive+0x94>
           c->face[24] != c->face[22] || c->face[15] != c->face[13] || c->face[51] != c->face[49] || c->face[40] != c->face[42])
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	7e1a      	ldrb	r2, [r3, #24]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	7d9b      	ldrb	r3, [r3, #22]
    while (c->face[26] != c->face[22] || c->face[17] != c->face[13] || c->face[53] != c->face[49] || c->face[40] != c->face[44] ||
 8004156:	429a      	cmp	r2, r3
 8004158:	d1d6      	bne.n	8004108 <solve_Naive+0x94>
           c->face[24] != c->face[22] || c->face[15] != c->face[13] || c->face[51] != c->face[49] || c->face[40] != c->face[42])
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	7bda      	ldrb	r2, [r3, #15]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	7b5b      	ldrb	r3, [r3, #13]
 8004162:	429a      	cmp	r2, r3
 8004164:	d1d0      	bne.n	8004108 <solve_Naive+0x94>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004172:	429a      	cmp	r2, r3
 8004174:	d1c8      	bne.n	8004108 <solve_Naive+0x94>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004182:	429a      	cmp	r2, r3
 8004184:	d1c0      	bne.n	8004108 <solve_Naive+0x94>
    }
    while (c->face[23] != c->face[22] || c->face[14] != c->face[13] || c->face[50] != c->face[49] || c->face[40] != c->face[39] ||
 8004186:	e006      	b.n	8004196 <solve_Naive+0x122>
           c->face[21] != c->face[22] || c->face[12] != c->face[13] || c->face[48] != c->face[49] || c->face[40] != c->face[41])
    {
        formular23(c);
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f7ff fbe0 	bl	800394e <formular23>
        rotateCube(c, T);
 800418e:	2112      	movs	r1, #18
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f7ff f985 	bl	80034a0 <rotateCube>
    while (c->face[23] != c->face[22] || c->face[14] != c->face[13] || c->face[50] != c->face[49] || c->face[40] != c->face[39] ||
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	7dda      	ldrb	r2, [r3, #23]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	7d9b      	ldrb	r3, [r3, #22]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d1f2      	bne.n	8004188 <solve_Naive+0x114>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	7b9a      	ldrb	r2, [r3, #14]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	7b5b      	ldrb	r3, [r3, #13]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d1ec      	bne.n	8004188 <solve_Naive+0x114>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d1e4      	bne.n	8004188 <solve_Naive+0x114>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d1dc      	bne.n	8004188 <solve_Naive+0x114>
           c->face[21] != c->face[22] || c->face[12] != c->face[13] || c->face[48] != c->face[49] || c->face[40] != c->face[41])
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	7d5a      	ldrb	r2, [r3, #21]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	7d9b      	ldrb	r3, [r3, #22]
    while (c->face[23] != c->face[22] || c->face[14] != c->face[13] || c->face[50] != c->face[49] || c->face[40] != c->face[39] ||
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d1d6      	bne.n	8004188 <solve_Naive+0x114>
           c->face[21] != c->face[22] || c->face[12] != c->face[13] || c->face[48] != c->face[49] || c->face[40] != c->face[41])
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	7b1a      	ldrb	r2, [r3, #12]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	7b5b      	ldrb	r3, [r3, #13]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d1d0      	bne.n	8004188 <solve_Naive+0x114>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d1c8      	bne.n	8004188 <solve_Naive+0x114>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004202:	429a      	cmp	r2, r3
 8004204:	d1c0      	bne.n	8004188 <solve_Naive+0x114>
    }
    while (c->face[1] != c->face[4] || c->face[3] != c->face[4] || c->face[5] != c->face[4] || c->face[7] != c->face[4])
 8004206:	e002      	b.n	800420e <solve_Naive+0x19a>
    {
        formular32(c);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f7ff fc0d 	bl	8003a28 <formular32>
    while (c->face[1] != c->face[4] || c->face[3] != c->face[4] || c->face[5] != c->face[4] || c->face[7] != c->face[4])
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	785a      	ldrb	r2, [r3, #1]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	791b      	ldrb	r3, [r3, #4]
 8004216:	429a      	cmp	r2, r3
 8004218:	d1f6      	bne.n	8004208 <solve_Naive+0x194>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	78da      	ldrb	r2, [r3, #3]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	791b      	ldrb	r3, [r3, #4]
 8004222:	429a      	cmp	r2, r3
 8004224:	d1f0      	bne.n	8004208 <solve_Naive+0x194>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	795a      	ldrb	r2, [r3, #5]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	791b      	ldrb	r3, [r3, #4]
 800422e:	429a      	cmp	r2, r3
 8004230:	d1ea      	bne.n	8004208 <solve_Naive+0x194>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	79da      	ldrb	r2, [r3, #7]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	791b      	ldrb	r3, [r3, #4]
 800423a:	429a      	cmp	r2, r3
 800423c:	d1e4      	bne.n	8004208 <solve_Naive+0x194>
    }
    formular43(c);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f7ff fc8f 	bl	8003b62 <formular43>
    formular52(c);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f7ff fdd3 	bl	8003df0 <formular52>
    formular62(c);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f7ff fe74 	bl	8003f38 <formular62>
    while (c->face[9] != c->face[13])
 8004250:	e003      	b.n	800425a <solve_Naive+0x1e6>
    {
        rotateCube(c, U);
 8004252:	2106      	movs	r1, #6
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f7ff f923 	bl	80034a0 <rotateCube>
    while (c->face[9] != c->face[13])
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	7a5a      	ldrb	r2, [r3, #9]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	7b5b      	ldrb	r3, [r3, #13]
 8004262:	429a      	cmp	r2, r3
 8004264:	d1f5      	bne.n	8004252 <solve_Naive+0x1de>
    }
}
 8004266:	bf00      	nop
 8004268:	bf00      	nop
 800426a:	3708      	adds	r7, #8
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004276:	4b15      	ldr	r3, [pc, #84]	; (80042cc <HAL_MspInit+0x5c>)
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	4a14      	ldr	r2, [pc, #80]	; (80042cc <HAL_MspInit+0x5c>)
 800427c:	f043 0301 	orr.w	r3, r3, #1
 8004280:	6193      	str	r3, [r2, #24]
 8004282:	4b12      	ldr	r3, [pc, #72]	; (80042cc <HAL_MspInit+0x5c>)
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	60bb      	str	r3, [r7, #8]
 800428c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800428e:	4b0f      	ldr	r3, [pc, #60]	; (80042cc <HAL_MspInit+0x5c>)
 8004290:	69db      	ldr	r3, [r3, #28]
 8004292:	4a0e      	ldr	r2, [pc, #56]	; (80042cc <HAL_MspInit+0x5c>)
 8004294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004298:	61d3      	str	r3, [r2, #28]
 800429a:	4b0c      	ldr	r3, [pc, #48]	; (80042cc <HAL_MspInit+0x5c>)
 800429c:	69db      	ldr	r3, [r3, #28]
 800429e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042a2:	607b      	str	r3, [r7, #4]
 80042a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80042a6:	4b0a      	ldr	r3, [pc, #40]	; (80042d0 <HAL_MspInit+0x60>)
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	60fb      	str	r3, [r7, #12]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80042b2:	60fb      	str	r3, [r7, #12]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80042ba:	60fb      	str	r3, [r7, #12]
 80042bc:	4a04      	ldr	r2, [pc, #16]	; (80042d0 <HAL_MspInit+0x60>)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80042c2:	bf00      	nop
 80042c4:	3714      	adds	r7, #20
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bc80      	pop	{r7}
 80042ca:	4770      	bx	lr
 80042cc:	40021000 	.word	0x40021000
 80042d0:	40010000 	.word	0x40010000

080042d4 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 80042d4:	b480      	push	{r7}
 80042d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80042d8:	e7fe      	b.n	80042d8 <NMI_Handler+0x4>

080042da <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 80042da:	b480      	push	{r7}
 80042dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80042de:	e7fe      	b.n	80042de <HardFault_Handler+0x4>

080042e0 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 80042e0:	b480      	push	{r7}
 80042e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80042e4:	e7fe      	b.n	80042e4 <MemManage_Handler+0x4>

080042e6 <BusFault_Handler>:

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 80042e6:	b480      	push	{r7}
 80042e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80042ea:	e7fe      	b.n	80042ea <BusFault_Handler+0x4>

080042ec <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 80042ec:	b480      	push	{r7}
 80042ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80042f0:	e7fe      	b.n	80042f0 <UsageFault_Handler+0x4>

080042f2 <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 80042f2:	b480      	push	{r7}
 80042f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80042f6:	bf00      	nop
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bc80      	pop	{r7}
 80042fc:	4770      	bx	lr

080042fe <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 80042fe:	b480      	push	{r7}
 8004300:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004302:	bf00      	nop
 8004304:	46bd      	mov	sp, r7
 8004306:	bc80      	pop	{r7}
 8004308:	4770      	bx	lr

0800430a <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 800430a:	b480      	push	{r7}
 800430c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800430e:	bf00      	nop
 8004310:	46bd      	mov	sp, r7
 8004312:	bc80      	pop	{r7}
 8004314:	4770      	bx	lr

08004316 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8004316:	b580      	push	{r7, lr}
 8004318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800431a:	f000 ff93 	bl	8005244 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800431e:	bf00      	nop
 8004320:	bd80      	pop	{r7, pc}
	...

08004324 <EXTI0_IRQHandler>:

/**
 * @brief This function handles EXTI line0 interrupt.
 */
void EXTI0_IRQHandler(void)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_0) != RESET)
 8004328:	4b09      	ldr	r3, [pc, #36]	; (8004350 <EXTI0_IRQHandler+0x2c>)
 800432a:	695b      	ldr	r3, [r3, #20]
 800432c:	f003 0301 	and.w	r3, r3, #1
 8004330:	2b00      	cmp	r3, #0
 8004332:	d008      	beq.n	8004346 <EXTI0_IRQHandler+0x22>
  {
    bt_flags = 2;
 8004334:	4b07      	ldr	r3, [pc, #28]	; (8004354 <EXTI0_IRQHandler+0x30>)
 8004336:	2202      	movs	r2, #2
 8004338:	701a      	strb	r2, [r3, #0]
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 800433a:	4b05      	ldr	r3, [pc, #20]	; (8004350 <EXTI0_IRQHandler+0x2c>)
 800433c:	2201      	movs	r2, #1
 800433e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_PIN_0);
 8004340:	2001      	movs	r0, #1
 8004342:	f001 fe9f 	bl	8006084 <HAL_GPIO_EXTI_Callback>
  }
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8004346:	2001      	movs	r0, #1
 8004348:	f001 fe84 	bl	8006054 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800434c:	bf00      	nop
 800434e:	bd80      	pop	{r7, pc}
 8004350:	40010400 	.word	0x40010400
 8004354:	20002154 	.word	0x20002154

08004358 <EXTI3_IRQHandler>:

/**
 * @brief This function handles EXTI line3 interrupt.
 */
void EXTI3_IRQHandler(void)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_3) != RESET)
 800435c:	4b17      	ldr	r3, [pc, #92]	; (80043bc <EXTI3_IRQHandler+0x64>)
 800435e:	695b      	ldr	r3, [r3, #20]
 8004360:	f003 0308 	and.w	r3, r3, #8
 8004364:	2b00      	cmp	r3, #0
 8004366:	d023      	beq.n	80043b0 <EXTI3_IRQHandler+0x58>
  {
    if (Ov7725_vsync == 0)
 8004368:	4b15      	ldr	r3, [pc, #84]	; (80043c0 <EXTI3_IRQHandler+0x68>)
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d10f      	bne.n	8004390 <EXTI3_IRQHandler+0x38>
    {
      FIFO_WRST_L();
 8004370:	4b14      	ldr	r3, [pc, #80]	; (80043c4 <EXTI3_IRQHandler+0x6c>)
 8004372:	2210      	movs	r2, #16
 8004374:	615a      	str	r2, [r3, #20]
      FIFO_WE_H();
 8004376:	4b14      	ldr	r3, [pc, #80]	; (80043c8 <EXTI3_IRQHandler+0x70>)
 8004378:	2208      	movs	r2, #8
 800437a:	611a      	str	r2, [r3, #16]

      Ov7725_vsync = 1;
 800437c:	4b10      	ldr	r3, [pc, #64]	; (80043c0 <EXTI3_IRQHandler+0x68>)
 800437e:	2201      	movs	r2, #1
 8004380:	701a      	strb	r2, [r3, #0]
      FIFO_WE_H();
 8004382:	4b11      	ldr	r3, [pc, #68]	; (80043c8 <EXTI3_IRQHandler+0x70>)
 8004384:	2208      	movs	r2, #8
 8004386:	611a      	str	r2, [r3, #16]
      FIFO_WRST_H();
 8004388:	4b0e      	ldr	r3, [pc, #56]	; (80043c4 <EXTI3_IRQHandler+0x6c>)
 800438a:	2210      	movs	r2, #16
 800438c:	611a      	str	r2, [r3, #16]
 800438e:	e009      	b.n	80043a4 <EXTI3_IRQHandler+0x4c>
    }
    else if (Ov7725_vsync == 1)
 8004390:	4b0b      	ldr	r3, [pc, #44]	; (80043c0 <EXTI3_IRQHandler+0x68>)
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	2b01      	cmp	r3, #1
 8004396:	d105      	bne.n	80043a4 <EXTI3_IRQHandler+0x4c>
    {
      FIFO_WE_L();
 8004398:	4b0b      	ldr	r3, [pc, #44]	; (80043c8 <EXTI3_IRQHandler+0x70>)
 800439a:	2208      	movs	r2, #8
 800439c:	615a      	str	r2, [r3, #20]
      Ov7725_vsync = 2;
 800439e:	4b08      	ldr	r3, [pc, #32]	; (80043c0 <EXTI3_IRQHandler+0x68>)
 80043a0:	2202      	movs	r2, #2
 80043a2:	701a      	strb	r2, [r3, #0]
    }

    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_3);
 80043a4:	4b05      	ldr	r3, [pc, #20]	; (80043bc <EXTI3_IRQHandler+0x64>)
 80043a6:	2208      	movs	r2, #8
 80043a8:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_PIN_3);
 80043aa:	2008      	movs	r0, #8
 80043ac:	f001 fe6a 	bl	8006084 <HAL_GPIO_EXTI_Callback>
  }
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80043b0:	2008      	movs	r0, #8
 80043b2:	f001 fe4f 	bl	8006054 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80043b6:	bf00      	nop
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	40010400 	.word	0x40010400
 80043c0:	200020c4 	.word	0x200020c4
 80043c4:	40011000 	.word	0x40011000
 80043c8:	40011400 	.word	0x40011400

080043cc <EXTI4_IRQHandler>:

/**
 * @brief This function handles EXTI line4 interrupt.
 */
void EXTI4_IRQHandler(void)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
 80043d0:	4b09      	ldr	r3, [pc, #36]	; (80043f8 <EXTI4_IRQHandler+0x2c>)
 80043d2:	695b      	ldr	r3, [r3, #20]
 80043d4:	f003 0310 	and.w	r3, r3, #16
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d008      	beq.n	80043ee <EXTI4_IRQHandler+0x22>
  {
    ucXPT2046_TouchFlag = 1;
 80043dc:	4b07      	ldr	r3, [pc, #28]	; (80043fc <EXTI4_IRQHandler+0x30>)
 80043de:	2201      	movs	r2, #1
 80043e0:	701a      	strb	r2, [r3, #0]

    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 80043e2:	4b05      	ldr	r3, [pc, #20]	; (80043f8 <EXTI4_IRQHandler+0x2c>)
 80043e4:	2210      	movs	r2, #16
 80043e6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_PIN_4);
 80043e8:	2010      	movs	r0, #16
 80043ea:	f001 fe4b 	bl	8006084 <HAL_GPIO_EXTI_Callback>
  }
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80043ee:	2010      	movs	r0, #16
 80043f0:	f001 fe30 	bl	8006054 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80043f4:	bf00      	nop
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	40010400 	.word	0x40010400
 80043fc:	200021d8 	.word	0x200021d8

08004400 <DMA1_Channel4_IRQHandler>:

/**
 * @brief This function handles DMA1 channel4 global interrupt.
 */
void DMA1_Channel4_IRQHandler(void)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch4_trig_com);
 8004404:	4802      	ldr	r0, [pc, #8]	; (8004410 <DMA1_Channel4_IRQHandler+0x10>)
 8004406:	f001 fa11 	bl	800582c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800440a:	bf00      	nop
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	20002110 	.word	0x20002110

08004414 <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  extern void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart);
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800441a:	481f      	ldr	r0, [pc, #124]	; (8004498 <USART1_IRQHandler+0x84>)
 800441c:	f003 f9f0 	bl	8007800 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  if (__HAL_UART_GET_FLAG(&huart1, UART_IT_IDLE) && huart1.RxXferCount != 0U)
 8004420:	4b1d      	ldr	r3, [pc, #116]	; (8004498 <USART1_IRQHandler+0x84>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	4b1d      	ldr	r3, [pc, #116]	; (800449c <USART1_IRQHandler+0x88>)
 8004428:	4013      	ands	r3, r2
 800442a:	4a1c      	ldr	r2, [pc, #112]	; (800449c <USART1_IRQHandler+0x88>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d123      	bne.n	8004478 <USART1_IRQHandler+0x64>
 8004430:	4b19      	ldr	r3, [pc, #100]	; (8004498 <USART1_IRQHandler+0x84>)
 8004432:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004434:	b29b      	uxth	r3, r3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d01e      	beq.n	8004478 <USART1_IRQHandler+0x64>
  {
    HAL_UART_RxCpltCallback(&huart1);
 800443a:	4817      	ldr	r0, [pc, #92]	; (8004498 <USART1_IRQHandler+0x84>)
 800443c:	f000 fb0a 	bl	8004a54 <HAL_UART_RxCpltCallback>
    /* Disable the IRDA Data Register not empty Interrupt */
    __HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE);
 8004440:	4b15      	ldr	r3, [pc, #84]	; (8004498 <USART1_IRQHandler+0x84>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68da      	ldr	r2, [r3, #12]
 8004446:	4b14      	ldr	r3, [pc, #80]	; (8004498 <USART1_IRQHandler+0x84>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f022 0220 	bic.w	r2, r2, #32
 800444e:	60da      	str	r2, [r3, #12]

    /* Disable the UART Parity Error Interrupt */
    __HAL_UART_DISABLE_IT(&huart1, UART_IT_PE);
 8004450:	4b11      	ldr	r3, [pc, #68]	; (8004498 <USART1_IRQHandler+0x84>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68da      	ldr	r2, [r3, #12]
 8004456:	4b10      	ldr	r3, [pc, #64]	; (8004498 <USART1_IRQHandler+0x84>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800445e:	60da      	str	r2, [r3, #12]
    /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_DISABLE_IT(&huart1, UART_IT_ERR);
 8004460:	4b0d      	ldr	r3, [pc, #52]	; (8004498 <USART1_IRQHandler+0x84>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	695a      	ldr	r2, [r3, #20]
 8004466:	4b0c      	ldr	r3, [pc, #48]	; (8004498 <USART1_IRQHandler+0x84>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f022 0201 	bic.w	r2, r2, #1
 800446e:	615a      	str	r2, [r3, #20]

    /* Rx process is completed, restore huart->RxState to Ready */
    huart1.RxState = HAL_UART_STATE_READY;
 8004470:	4b09      	ldr	r3, [pc, #36]	; (8004498 <USART1_IRQHandler+0x84>)
 8004472:	2220      	movs	r2, #32
 8004474:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  }
  __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 8004478:	2300      	movs	r3, #0
 800447a:	607b      	str	r3, [r7, #4]
 800447c:	4b06      	ldr	r3, [pc, #24]	; (8004498 <USART1_IRQHandler+0x84>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	607b      	str	r3, [r7, #4]
 8004484:	4b04      	ldr	r3, [pc, #16]	; (8004498 <USART1_IRQHandler+0x84>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	607b      	str	r3, [r7, #4]
 800448c:	687b      	ldr	r3, [r7, #4]

  /* USER CODE END USART1_IRQn 1 */
}
 800448e:	bf00      	nop
 8004490:	3708      	adds	r7, #8
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	20002158 	.word	0x20002158
 800449c:	10000010 	.word	0x10000010

080044a0 <USART3_IRQHandler>:

/**
 * @brief This function handles USART3 global interrupt.
 */
void USART3_IRQHandler(void)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80044a4:	4802      	ldr	r0, [pc, #8]	; (80044b0 <USART3_IRQHandler+0x10>)
 80044a6:	f003 f9ab 	bl	8007800 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80044aa:	bf00      	nop
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	20002198 	.word	0x20002198

080044b4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b086      	sub	sp, #24
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044c0:	2300      	movs	r3, #0
 80044c2:	617b      	str	r3, [r7, #20]
 80044c4:	e00a      	b.n	80044dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80044c6:	f3af 8000 	nop.w
 80044ca:	4601      	mov	r1, r0
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	1c5a      	adds	r2, r3, #1
 80044d0:	60ba      	str	r2, [r7, #8]
 80044d2:	b2ca      	uxtb	r2, r1
 80044d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	3301      	adds	r3, #1
 80044da:	617b      	str	r3, [r7, #20]
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	dbf0      	blt.n	80044c6 <_read+0x12>
	}

return len;
 80044e4:	687b      	ldr	r3, [r7, #4]
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3718      	adds	r7, #24
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}

080044ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80044ee:	b580      	push	{r7, lr}
 80044f0:	b086      	sub	sp, #24
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	60f8      	str	r0, [r7, #12]
 80044f6:	60b9      	str	r1, [r7, #8]
 80044f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044fa:	2300      	movs	r3, #0
 80044fc:	617b      	str	r3, [r7, #20]
 80044fe:	e009      	b.n	8004514 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	1c5a      	adds	r2, r3, #1
 8004504:	60ba      	str	r2, [r7, #8]
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	4618      	mov	r0, r3
 800450a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	3301      	adds	r3, #1
 8004512:	617b      	str	r3, [r7, #20]
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	429a      	cmp	r2, r3
 800451a:	dbf1      	blt.n	8004500 <_write+0x12>
	}
	return len;
 800451c:	687b      	ldr	r3, [r7, #4]
}
 800451e:	4618      	mov	r0, r3
 8004520:	3718      	adds	r7, #24
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <_close>:

int _close(int file)
{
 8004526:	b480      	push	{r7}
 8004528:	b083      	sub	sp, #12
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
	return -1;
 800452e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004532:	4618      	mov	r0, r3
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	bc80      	pop	{r7}
 800453a:	4770      	bx	lr

0800453c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800454c:	605a      	str	r2, [r3, #4]
	return 0;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	bc80      	pop	{r7}
 8004558:	4770      	bx	lr

0800455a <_isatty>:

int _isatty(int file)
{
 800455a:	b480      	push	{r7}
 800455c:	b083      	sub	sp, #12
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
	return 1;
 8004562:	2301      	movs	r3, #1
}
 8004564:	4618      	mov	r0, r3
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	bc80      	pop	{r7}
 800456c:	4770      	bx	lr

0800456e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800456e:	b480      	push	{r7}
 8004570:	b085      	sub	sp, #20
 8004572:	af00      	add	r7, sp, #0
 8004574:	60f8      	str	r0, [r7, #12]
 8004576:	60b9      	str	r1, [r7, #8]
 8004578:	607a      	str	r2, [r7, #4]
	return 0;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3714      	adds	r7, #20
 8004580:	46bd      	mov	sp, r7
 8004582:	bc80      	pop	{r7}
 8004584:	4770      	bx	lr
	...

08004588 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b086      	sub	sp, #24
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004590:	4a14      	ldr	r2, [pc, #80]	; (80045e4 <_sbrk+0x5c>)
 8004592:	4b15      	ldr	r3, [pc, #84]	; (80045e8 <_sbrk+0x60>)
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800459c:	4b13      	ldr	r3, [pc, #76]	; (80045ec <_sbrk+0x64>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d102      	bne.n	80045aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80045a4:	4b11      	ldr	r3, [pc, #68]	; (80045ec <_sbrk+0x64>)
 80045a6:	4a12      	ldr	r2, [pc, #72]	; (80045f0 <_sbrk+0x68>)
 80045a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80045aa:	4b10      	ldr	r3, [pc, #64]	; (80045ec <_sbrk+0x64>)
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4413      	add	r3, r2
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d207      	bcs.n	80045c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80045b8:	f003 fdb8 	bl	800812c <__errno>
 80045bc:	4603      	mov	r3, r0
 80045be:	220c      	movs	r2, #12
 80045c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80045c2:	f04f 33ff 	mov.w	r3, #4294967295
 80045c6:	e009      	b.n	80045dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80045c8:	4b08      	ldr	r3, [pc, #32]	; (80045ec <_sbrk+0x64>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80045ce:	4b07      	ldr	r3, [pc, #28]	; (80045ec <_sbrk+0x64>)
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4413      	add	r3, r2
 80045d6:	4a05      	ldr	r2, [pc, #20]	; (80045ec <_sbrk+0x64>)
 80045d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80045da:	68fb      	ldr	r3, [r7, #12]
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3718      	adds	r7, #24
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	20010000 	.word	0x20010000
 80045e8:	00000400 	.word	0x00000400
 80045ec:	200020cc 	.word	0x200020cc
 80045f0:	200021f0 	.word	0x200021f0

080045f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80045f4:	b480      	push	{r7}
 80045f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80045f8:	bf00      	nop
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bc80      	pop	{r7}
 80045fe:	4770      	bx	lr

08004600 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
DMA_HandleTypeDef hdma_tim1_ch4_trig_com;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b094      	sub	sp, #80	; 0x50
 8004604:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004606:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800460a:	2200      	movs	r2, #0
 800460c:	601a      	str	r2, [r3, #0]
 800460e:	605a      	str	r2, [r3, #4]
 8004610:	609a      	str	r2, [r3, #8]
 8004612:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004614:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004618:	2200      	movs	r2, #0
 800461a:	601a      	str	r2, [r3, #0]
 800461c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800461e:	f107 031c 	add.w	r3, r7, #28
 8004622:	2200      	movs	r2, #0
 8004624:	601a      	str	r2, [r3, #0]
 8004626:	605a      	str	r2, [r3, #4]
 8004628:	609a      	str	r2, [r3, #8]
 800462a:	60da      	str	r2, [r3, #12]
 800462c:	611a      	str	r2, [r3, #16]
 800462e:	615a      	str	r2, [r3, #20]
 8004630:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004632:	463b      	mov	r3, r7
 8004634:	2200      	movs	r2, #0
 8004636:	601a      	str	r2, [r3, #0]
 8004638:	605a      	str	r2, [r3, #4]
 800463a:	609a      	str	r2, [r3, #8]
 800463c:	60da      	str	r2, [r3, #12]
 800463e:	611a      	str	r2, [r3, #16]
 8004640:	615a      	str	r2, [r3, #20]
 8004642:	619a      	str	r2, [r3, #24]

  htim1.Instance = TIM1;
 8004644:	4b3c      	ldr	r3, [pc, #240]	; (8004738 <MX_TIM1_Init+0x138>)
 8004646:	4a3d      	ldr	r2, [pc, #244]	; (800473c <MX_TIM1_Init+0x13c>)
 8004648:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800464a:	4b3b      	ldr	r3, [pc, #236]	; (8004738 <MX_TIM1_Init+0x138>)
 800464c:	2200      	movs	r2, #0
 800464e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004650:	4b39      	ldr	r3, [pc, #228]	; (8004738 <MX_TIM1_Init+0x138>)
 8004652:	2200      	movs	r2, #0
 8004654:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 81;
 8004656:	4b38      	ldr	r3, [pc, #224]	; (8004738 <MX_TIM1_Init+0x138>)
 8004658:	2251      	movs	r2, #81	; 0x51
 800465a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800465c:	4b36      	ldr	r3, [pc, #216]	; (8004738 <MX_TIM1_Init+0x138>)
 800465e:	2200      	movs	r2, #0
 8004660:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004662:	4b35      	ldr	r3, [pc, #212]	; (8004738 <MX_TIM1_Init+0x138>)
 8004664:	2200      	movs	r2, #0
 8004666:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004668:	4b33      	ldr	r3, [pc, #204]	; (8004738 <MX_TIM1_Init+0x138>)
 800466a:	2200      	movs	r2, #0
 800466c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800466e:	4832      	ldr	r0, [pc, #200]	; (8004738 <MX_TIM1_Init+0x138>)
 8004670:	f002 f976 	bl	8006960 <HAL_TIM_Base_Init>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800467a:	f7fe fce0 	bl	800303e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800467e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004682:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004684:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004688:	4619      	mov	r1, r3
 800468a:	482b      	ldr	r0, [pc, #172]	; (8004738 <MX_TIM1_Init+0x138>)
 800468c:	f002 fa8e 	bl	8006bac <HAL_TIM_ConfigClockSource>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d001      	beq.n	800469a <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8004696:	f7fe fcd2 	bl	800303e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800469a:	4827      	ldr	r0, [pc, #156]	; (8004738 <MX_TIM1_Init+0x138>)
 800469c:	f002 f98b 	bl	80069b6 <HAL_TIM_PWM_Init>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 80046a6:	f7fe fcca 	bl	800303e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80046aa:	2300      	movs	r3, #0
 80046ac:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80046ae:	2300      	movs	r3, #0
 80046b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80046b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80046b6:	4619      	mov	r1, r3
 80046b8:	481f      	ldr	r0, [pc, #124]	; (8004738 <MX_TIM1_Init+0x138>)
 80046ba:	f002 fea2 	bl	8007402 <HAL_TIMEx_MasterConfigSynchronization>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d001      	beq.n	80046c8 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80046c4:	f7fe fcbb 	bl	800303e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80046c8:	2360      	movs	r3, #96	; 0x60
 80046ca:	61fb      	str	r3, [r7, #28]
  sConfigOC.Pulse = 0;
 80046cc:	2300      	movs	r3, #0
 80046ce:	623b      	str	r3, [r7, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80046d0:	2300      	movs	r3, #0
 80046d2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80046d4:	2304      	movs	r3, #4
 80046d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80046d8:	2300      	movs	r3, #0
 80046da:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80046dc:	2300      	movs	r3, #0
 80046de:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80046e0:	f107 031c 	add.w	r3, r7, #28
 80046e4:	220c      	movs	r2, #12
 80046e6:	4619      	mov	r1, r3
 80046e8:	4813      	ldr	r0, [pc, #76]	; (8004738 <MX_TIM1_Init+0x138>)
 80046ea:	f002 f999 	bl	8006a20 <HAL_TIM_PWM_ConfigChannel>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d001      	beq.n	80046f8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80046f4:	f7fe fca3 	bl	800303e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80046f8:	2300      	movs	r3, #0
 80046fa:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80046fc:	2300      	movs	r3, #0
 80046fe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004700:	2300      	movs	r3, #0
 8004702:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004704:	2300      	movs	r3, #0
 8004706:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004708:	2300      	movs	r3, #0
 800470a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800470c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004710:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004712:	2300      	movs	r3, #0
 8004714:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004716:	463b      	mov	r3, r7
 8004718:	4619      	mov	r1, r3
 800471a:	4807      	ldr	r0, [pc, #28]	; (8004738 <MX_TIM1_Init+0x138>)
 800471c:	f002 fe19 	bl	8007352 <HAL_TIMEx_ConfigBreakDeadTime>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d001      	beq.n	800472a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8004726:	f7fe fc8a 	bl	800303e <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 800472a:	4803      	ldr	r0, [pc, #12]	; (8004738 <MX_TIM1_Init+0x138>)
 800472c:	f000 f85e 	bl	80047ec <HAL_TIM_MspPostInit>

}
 8004730:	bf00      	nop
 8004732:	3750      	adds	r7, #80	; 0x50
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	200020d0 	.word	0x200020d0
 800473c:	40012c00 	.word	0x40012c00

08004740 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a23      	ldr	r2, [pc, #140]	; (80047dc <HAL_TIM_Base_MspInit+0x9c>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d13f      	bne.n	80047d2 <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004752:	4b23      	ldr	r3, [pc, #140]	; (80047e0 <HAL_TIM_Base_MspInit+0xa0>)
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	4a22      	ldr	r2, [pc, #136]	; (80047e0 <HAL_TIM_Base_MspInit+0xa0>)
 8004758:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800475c:	6193      	str	r3, [r2, #24]
 800475e:	4b20      	ldr	r3, [pc, #128]	; (80047e0 <HAL_TIM_Base_MspInit+0xa0>)
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004766:	60fb      	str	r3, [r7, #12]
 8004768:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH4_TRIG_COM Init */
    hdma_tim1_ch4_trig_com.Instance = DMA1_Channel4;
 800476a:	4b1e      	ldr	r3, [pc, #120]	; (80047e4 <HAL_TIM_Base_MspInit+0xa4>)
 800476c:	4a1e      	ldr	r2, [pc, #120]	; (80047e8 <HAL_TIM_Base_MspInit+0xa8>)
 800476e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch4_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004770:	4b1c      	ldr	r3, [pc, #112]	; (80047e4 <HAL_TIM_Base_MspInit+0xa4>)
 8004772:	2210      	movs	r2, #16
 8004774:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 8004776:	4b1b      	ldr	r3, [pc, #108]	; (80047e4 <HAL_TIM_Base_MspInit+0xa4>)
 8004778:	2200      	movs	r2, #0
 800477a:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 800477c:	4b19      	ldr	r3, [pc, #100]	; (80047e4 <HAL_TIM_Base_MspInit+0xa4>)
 800477e:	2280      	movs	r2, #128	; 0x80
 8004780:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004782:	4b18      	ldr	r3, [pc, #96]	; (80047e4 <HAL_TIM_Base_MspInit+0xa4>)
 8004784:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004788:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800478a:	4b16      	ldr	r3, [pc, #88]	; (80047e4 <HAL_TIM_Base_MspInit+0xa4>)
 800478c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004790:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch4_trig_com.Init.Mode = DMA_NORMAL;
 8004792:	4b14      	ldr	r3, [pc, #80]	; (80047e4 <HAL_TIM_Base_MspInit+0xa4>)
 8004794:	2200      	movs	r2, #0
 8004796:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch4_trig_com.Init.Priority = DMA_PRIORITY_LOW;
 8004798:	4b12      	ldr	r3, [pc, #72]	; (80047e4 <HAL_TIM_Base_MspInit+0xa4>)
 800479a:	2200      	movs	r2, #0
 800479c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch4_trig_com) != HAL_OK)
 800479e:	4811      	ldr	r0, [pc, #68]	; (80047e4 <HAL_TIM_Base_MspInit+0xa4>)
 80047a0:	f000 fe9a 	bl	80054d8 <HAL_DMA_Init>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d001      	beq.n	80047ae <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 80047aa:	f7fe fc48 	bl	800303e <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim1_ch4_trig_com);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a0c      	ldr	r2, [pc, #48]	; (80047e4 <HAL_TIM_Base_MspInit+0xa4>)
 80047b2:	631a      	str	r2, [r3, #48]	; 0x30
 80047b4:	4a0b      	ldr	r2, [pc, #44]	; (80047e4 <HAL_TIM_Base_MspInit+0xa4>)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim1_ch4_trig_com);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a09      	ldr	r2, [pc, #36]	; (80047e4 <HAL_TIM_Base_MspInit+0xa4>)
 80047be:	639a      	str	r2, [r3, #56]	; 0x38
 80047c0:	4a08      	ldr	r2, [pc, #32]	; (80047e4 <HAL_TIM_Base_MspInit+0xa4>)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim1_ch4_trig_com);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a06      	ldr	r2, [pc, #24]	; (80047e4 <HAL_TIM_Base_MspInit+0xa4>)
 80047ca:	635a      	str	r2, [r3, #52]	; 0x34
 80047cc:	4a05      	ldr	r2, [pc, #20]	; (80047e4 <HAL_TIM_Base_MspInit+0xa4>)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80047d2:	bf00      	nop
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	40012c00 	.word	0x40012c00
 80047e0:	40021000 	.word	0x40021000
 80047e4:	20002110 	.word	0x20002110
 80047e8:	40020044 	.word	0x40020044

080047ec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b088      	sub	sp, #32
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047f4:	f107 0310 	add.w	r3, r7, #16
 80047f8:	2200      	movs	r2, #0
 80047fa:	601a      	str	r2, [r3, #0]
 80047fc:	605a      	str	r2, [r3, #4]
 80047fe:	609a      	str	r2, [r3, #8]
 8004800:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a10      	ldr	r2, [pc, #64]	; (8004848 <HAL_TIM_MspPostInit+0x5c>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d118      	bne.n	800483e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800480c:	4b0f      	ldr	r3, [pc, #60]	; (800484c <HAL_TIM_MspPostInit+0x60>)
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	4a0e      	ldr	r2, [pc, #56]	; (800484c <HAL_TIM_MspPostInit+0x60>)
 8004812:	f043 0304 	orr.w	r3, r3, #4
 8004816:	6193      	str	r3, [r2, #24]
 8004818:	4b0c      	ldr	r3, [pc, #48]	; (800484c <HAL_TIM_MspPostInit+0x60>)
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	f003 0304 	and.w	r3, r3, #4
 8004820:	60fb      	str	r3, [r7, #12]
 8004822:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004824:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004828:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800482a:	2302      	movs	r3, #2
 800482c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800482e:	2303      	movs	r3, #3
 8004830:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004832:	f107 0310 	add.w	r3, r7, #16
 8004836:	4619      	mov	r1, r3
 8004838:	4805      	ldr	r0, [pc, #20]	; (8004850 <HAL_TIM_MspPostInit+0x64>)
 800483a:	f001 fa33 	bl	8005ca4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800483e:	bf00      	nop
 8004840:	3720      	adds	r7, #32
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	40012c00 	.word	0x40012c00
 800484c:	40021000 	.word	0x40021000
 8004850:	40010800 	.word	0x40010800

08004854 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8004858:	4b11      	ldr	r3, [pc, #68]	; (80048a0 <MX_USART1_UART_Init+0x4c>)
 800485a:	4a12      	ldr	r2, [pc, #72]	; (80048a4 <MX_USART1_UART_Init+0x50>)
 800485c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800485e:	4b10      	ldr	r3, [pc, #64]	; (80048a0 <MX_USART1_UART_Init+0x4c>)
 8004860:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004864:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004866:	4b0e      	ldr	r3, [pc, #56]	; (80048a0 <MX_USART1_UART_Init+0x4c>)
 8004868:	2200      	movs	r2, #0
 800486a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800486c:	4b0c      	ldr	r3, [pc, #48]	; (80048a0 <MX_USART1_UART_Init+0x4c>)
 800486e:	2200      	movs	r2, #0
 8004870:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004872:	4b0b      	ldr	r3, [pc, #44]	; (80048a0 <MX_USART1_UART_Init+0x4c>)
 8004874:	2200      	movs	r2, #0
 8004876:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004878:	4b09      	ldr	r3, [pc, #36]	; (80048a0 <MX_USART1_UART_Init+0x4c>)
 800487a:	220c      	movs	r2, #12
 800487c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800487e:	4b08      	ldr	r3, [pc, #32]	; (80048a0 <MX_USART1_UART_Init+0x4c>)
 8004880:	2200      	movs	r2, #0
 8004882:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004884:	4b06      	ldr	r3, [pc, #24]	; (80048a0 <MX_USART1_UART_Init+0x4c>)
 8004886:	2200      	movs	r2, #0
 8004888:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800488a:	4805      	ldr	r0, [pc, #20]	; (80048a0 <MX_USART1_UART_Init+0x4c>)
 800488c:	f002 fdfd 	bl	800748a <HAL_UART_Init>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d001      	beq.n	800489a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004896:	f7fe fbd2 	bl	800303e <Error_Handler>
  }
}
 800489a:	bf00      	nop
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	20002158 	.word	0x20002158
 80048a4:	40013800 	.word	0x40013800

080048a8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80048ac:	4b11      	ldr	r3, [pc, #68]	; (80048f4 <MX_USART3_UART_Init+0x4c>)
 80048ae:	4a12      	ldr	r2, [pc, #72]	; (80048f8 <MX_USART3_UART_Init+0x50>)
 80048b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80048b2:	4b10      	ldr	r3, [pc, #64]	; (80048f4 <MX_USART3_UART_Init+0x4c>)
 80048b4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80048b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80048ba:	4b0e      	ldr	r3, [pc, #56]	; (80048f4 <MX_USART3_UART_Init+0x4c>)
 80048bc:	2200      	movs	r2, #0
 80048be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80048c0:	4b0c      	ldr	r3, [pc, #48]	; (80048f4 <MX_USART3_UART_Init+0x4c>)
 80048c2:	2200      	movs	r2, #0
 80048c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80048c6:	4b0b      	ldr	r3, [pc, #44]	; (80048f4 <MX_USART3_UART_Init+0x4c>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80048cc:	4b09      	ldr	r3, [pc, #36]	; (80048f4 <MX_USART3_UART_Init+0x4c>)
 80048ce:	220c      	movs	r2, #12
 80048d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80048d2:	4b08      	ldr	r3, [pc, #32]	; (80048f4 <MX_USART3_UART_Init+0x4c>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80048d8:	4b06      	ldr	r3, [pc, #24]	; (80048f4 <MX_USART3_UART_Init+0x4c>)
 80048da:	2200      	movs	r2, #0
 80048dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80048de:	4805      	ldr	r0, [pc, #20]	; (80048f4 <MX_USART3_UART_Init+0x4c>)
 80048e0:	f002 fdd3 	bl	800748a <HAL_UART_Init>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d001      	beq.n	80048ee <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80048ea:	f7fe fba8 	bl	800303e <Error_Handler>
  }
}
 80048ee:	bf00      	nop
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	20002198 	.word	0x20002198
 80048f8:	40004800 	.word	0x40004800

080048fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b08c      	sub	sp, #48	; 0x30
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004904:	f107 031c 	add.w	r3, r7, #28
 8004908:	2200      	movs	r2, #0
 800490a:	601a      	str	r2, [r3, #0]
 800490c:	605a      	str	r2, [r3, #4]
 800490e:	609a      	str	r2, [r3, #8]
 8004910:	60da      	str	r2, [r3, #12]
  if (uartHandle->Instance == USART1)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a49      	ldr	r2, [pc, #292]	; (8004a3c <HAL_UART_MspInit+0x140>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d13a      	bne.n	8004992 <HAL_UART_MspInit+0x96>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800491c:	4b48      	ldr	r3, [pc, #288]	; (8004a40 <HAL_UART_MspInit+0x144>)
 800491e:	699b      	ldr	r3, [r3, #24]
 8004920:	4a47      	ldr	r2, [pc, #284]	; (8004a40 <HAL_UART_MspInit+0x144>)
 8004922:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004926:	6193      	str	r3, [r2, #24]
 8004928:	4b45      	ldr	r3, [pc, #276]	; (8004a40 <HAL_UART_MspInit+0x144>)
 800492a:	699b      	ldr	r3, [r3, #24]
 800492c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004930:	61bb      	str	r3, [r7, #24]
 8004932:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004934:	4b42      	ldr	r3, [pc, #264]	; (8004a40 <HAL_UART_MspInit+0x144>)
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	4a41      	ldr	r2, [pc, #260]	; (8004a40 <HAL_UART_MspInit+0x144>)
 800493a:	f043 0304 	orr.w	r3, r3, #4
 800493e:	6193      	str	r3, [r2, #24]
 8004940:	4b3f      	ldr	r3, [pc, #252]	; (8004a40 <HAL_UART_MspInit+0x144>)
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	f003 0304 	and.w	r3, r3, #4
 8004948:	617b      	str	r3, [r7, #20]
 800494a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800494c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004950:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004952:	2302      	movs	r3, #2
 8004954:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004956:	2303      	movs	r3, #3
 8004958:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800495a:	f107 031c 	add.w	r3, r7, #28
 800495e:	4619      	mov	r1, r3
 8004960:	4838      	ldr	r0, [pc, #224]	; (8004a44 <HAL_UART_MspInit+0x148>)
 8004962:	f001 f99f 	bl	8005ca4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004966:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800496a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800496c:	2300      	movs	r3, #0
 800496e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004970:	2300      	movs	r3, #0
 8004972:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004974:	f107 031c 	add.w	r3, r7, #28
 8004978:	4619      	mov	r1, r3
 800497a:	4832      	ldr	r0, [pc, #200]	; (8004a44 <HAL_UART_MspInit+0x148>)
 800497c:	f001 f992 	bl	8005ca4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004980:	2200      	movs	r2, #0
 8004982:	2100      	movs	r1, #0
 8004984:	2025      	movs	r0, #37	; 0x25
 8004986:	f000 fd70 	bl	800546a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800498a:	2025      	movs	r0, #37	; 0x25
 800498c:	f000 fd89 	bl	80054a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }
}
 8004990:	e050      	b.n	8004a34 <HAL_UART_MspInit+0x138>
  else if (uartHandle->Instance == USART3)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a2c      	ldr	r2, [pc, #176]	; (8004a48 <HAL_UART_MspInit+0x14c>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d14b      	bne.n	8004a34 <HAL_UART_MspInit+0x138>
    __HAL_RCC_USART3_CLK_ENABLE();
 800499c:	4b28      	ldr	r3, [pc, #160]	; (8004a40 <HAL_UART_MspInit+0x144>)
 800499e:	69db      	ldr	r3, [r3, #28]
 80049a0:	4a27      	ldr	r2, [pc, #156]	; (8004a40 <HAL_UART_MspInit+0x144>)
 80049a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049a6:	61d3      	str	r3, [r2, #28]
 80049a8:	4b25      	ldr	r3, [pc, #148]	; (8004a40 <HAL_UART_MspInit+0x144>)
 80049aa:	69db      	ldr	r3, [r3, #28]
 80049ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049b0:	613b      	str	r3, [r7, #16]
 80049b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80049b4:	4b22      	ldr	r3, [pc, #136]	; (8004a40 <HAL_UART_MspInit+0x144>)
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	4a21      	ldr	r2, [pc, #132]	; (8004a40 <HAL_UART_MspInit+0x144>)
 80049ba:	f043 0310 	orr.w	r3, r3, #16
 80049be:	6193      	str	r3, [r2, #24]
 80049c0:	4b1f      	ldr	r3, [pc, #124]	; (8004a40 <HAL_UART_MspInit+0x144>)
 80049c2:	699b      	ldr	r3, [r3, #24]
 80049c4:	f003 0310 	and.w	r3, r3, #16
 80049c8:	60fb      	str	r3, [r7, #12]
 80049ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80049cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049d2:	2302      	movs	r3, #2
 80049d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80049d6:	2303      	movs	r3, #3
 80049d8:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049da:	f107 031c 	add.w	r3, r7, #28
 80049de:	4619      	mov	r1, r3
 80049e0:	481a      	ldr	r0, [pc, #104]	; (8004a4c <HAL_UART_MspInit+0x150>)
 80049e2:	f001 f95f 	bl	8005ca4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80049e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80049ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80049ec:	2300      	movs	r3, #0
 80049ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049f0:	2300      	movs	r3, #0
 80049f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049f4:	f107 031c 	add.w	r3, r7, #28
 80049f8:	4619      	mov	r1, r3
 80049fa:	4814      	ldr	r0, [pc, #80]	; (8004a4c <HAL_UART_MspInit+0x150>)
 80049fc:	f001 f952 	bl	8005ca4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8004a00:	4b13      	ldr	r3, [pc, #76]	; (8004a50 <HAL_UART_MspInit+0x154>)
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a08:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a10:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8004a14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a18:	f043 0310 	orr.w	r3, r3, #16
 8004a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a1e:	4a0c      	ldr	r2, [pc, #48]	; (8004a50 <HAL_UART_MspInit+0x154>)
 8004a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a22:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004a24:	2200      	movs	r2, #0
 8004a26:	2100      	movs	r1, #0
 8004a28:	2027      	movs	r0, #39	; 0x27
 8004a2a:	f000 fd1e 	bl	800546a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004a2e:	2027      	movs	r0, #39	; 0x27
 8004a30:	f000 fd37 	bl	80054a2 <HAL_NVIC_EnableIRQ>
}
 8004a34:	bf00      	nop
 8004a36:	3730      	adds	r7, #48	; 0x30
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	40013800 	.word	0x40013800
 8004a40:	40021000 	.word	0x40021000
 8004a44:	40010800 	.word	0x40010800
 8004a48:	40004800 	.word	0x40004800
 8004a4c:	40011000 	.word	0x40011000
 8004a50:	40010000 	.word	0x40010000

08004a54 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
extern volatile uint8_t bt_flags;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  // UNUSED(huart);
  if (huart == &huart1)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a56      	ldr	r2, [pc, #344]	; (8004bb8 <HAL_UART_RxCpltCallback+0x164>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d153      	bne.n	8004b0c <HAL_UART_RxCpltCallback+0xb8>
  {
    if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE))
 8004a64:	4b54      	ldr	r3, [pc, #336]	; (8004bb8 <HAL_UART_RxCpltCallback+0x164>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0310 	and.w	r3, r3, #16
 8004a6e:	2b10      	cmp	r3, #16
 8004a70:	d103      	bne.n	8004a7a <HAL_UART_RxCpltCallback+0x26>
    {
      HAL_UART_AbortReceive(&huart1);
 8004a72:	4851      	ldr	r0, [pc, #324]	; (8004bb8 <HAL_UART_RxCpltCallback+0x164>)
 8004a74:	f002 fe87 	bl	8007786 <HAL_UART_AbortReceive>
 8004a78:	e02a      	b.n	8004ad0 <HAL_UART_RxCpltCallback+0x7c>
    }
    else
    {
      if (RxBuffer[1] == 0x9f)
 8004a7a:	4b50      	ldr	r3, [pc, #320]	; (8004bbc <HAL_UART_RxCpltCallback+0x168>)
 8004a7c:	785b      	ldrb	r3, [r3, #1]
 8004a7e:	2b9f      	cmp	r3, #159	; 0x9f
 8004a80:	d110      	bne.n	8004aa4 <HAL_UART_RxCpltCallback+0x50>
      {
        motor_flag |= 0x01 << (RxBuffer[0] - 1);
 8004a82:	4b4e      	ldr	r3, [pc, #312]	; (8004bbc <HAL_UART_RxCpltCallback+0x168>)
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	3b01      	subs	r3, #1
 8004a88:	2201      	movs	r2, #1
 8004a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8e:	b25a      	sxtb	r2, r3
 8004a90:	4b4b      	ldr	r3, [pc, #300]	; (8004bc0 <HAL_UART_RxCpltCallback+0x16c>)
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	b25b      	sxtb	r3, r3
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	b25b      	sxtb	r3, r3
 8004a9c:	b2da      	uxtb	r2, r3
 8004a9e:	4b48      	ldr	r3, [pc, #288]	; (8004bc0 <HAL_UART_RxCpltCallback+0x16c>)
 8004aa0:	701a      	strb	r2, [r3, #0]
 8004aa2:	e015      	b.n	8004ad0 <HAL_UART_RxCpltCallback+0x7c>
      }
      else if (RxBuffer[1] == 0x02)
 8004aa4:	4b45      	ldr	r3, [pc, #276]	; (8004bbc <HAL_UART_RxCpltCallback+0x168>)
 8004aa6:	785b      	ldrb	r3, [r3, #1]
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d111      	bne.n	8004ad0 <HAL_UART_RxCpltCallback+0x7c>
      {
        motor_flag &= ~(0x01 << (RxBuffer[0] - 1));
 8004aac:	4b43      	ldr	r3, [pc, #268]	; (8004bbc <HAL_UART_RxCpltCallback+0x168>)
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab8:	b25b      	sxtb	r3, r3
 8004aba:	43db      	mvns	r3, r3
 8004abc:	b25a      	sxtb	r2, r3
 8004abe:	4b40      	ldr	r3, [pc, #256]	; (8004bc0 <HAL_UART_RxCpltCallback+0x16c>)
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	b25b      	sxtb	r3, r3
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	b25b      	sxtb	r3, r3
 8004aca:	b2da      	uxtb	r2, r3
 8004acc:	4b3c      	ldr	r3, [pc, #240]	; (8004bc0 <HAL_UART_RxCpltCallback+0x16c>)
 8004ace:	701a      	strb	r2, [r3, #0]
      }
    }
    memset(RxBuffer, 0, 3);
 8004ad0:	2203      	movs	r2, #3
 8004ad2:	2100      	movs	r1, #0
 8004ad4:	4839      	ldr	r0, [pc, #228]	; (8004bbc <HAL_UART_RxCpltCallback+0x168>)
 8004ad6:	f003 fb53 	bl	8008180 <memset>

    while (HAL_UART_Receive_IT(&huart1, (uint8_t *)&RxBuffer, RXBUFFERSIZE) != HAL_OK)
 8004ada:	e006      	b.n	8004aea <HAL_UART_RxCpltCallback+0x96>
    {
      __HAL_UNLOCK(&huart1);
 8004adc:	4b36      	ldr	r3, [pc, #216]	; (8004bb8 <HAL_UART_RxCpltCallback+0x164>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      HAL_UART_AbortReceive(&huart1);
 8004ae4:	4834      	ldr	r0, [pc, #208]	; (8004bb8 <HAL_UART_RxCpltCallback+0x164>)
 8004ae6:	f002 fe4e 	bl	8007786 <HAL_UART_AbortReceive>
    while (HAL_UART_Receive_IT(&huart1, (uint8_t *)&RxBuffer, RXBUFFERSIZE) != HAL_OK)
 8004aea:	2203      	movs	r2, #3
 8004aec:	4933      	ldr	r1, [pc, #204]	; (8004bbc <HAL_UART_RxCpltCallback+0x168>)
 8004aee:	4832      	ldr	r0, [pc, #200]	; (8004bb8 <HAL_UART_RxCpltCallback+0x164>)
 8004af0:	f002 fdf5 	bl	80076de <HAL_UART_Receive_IT>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d1f0      	bne.n	8004adc <HAL_UART_RxCpltCallback+0x88>
    }
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8004afa:	4b2f      	ldr	r3, [pc, #188]	; (8004bb8 <HAL_UART_RxCpltCallback+0x164>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68da      	ldr	r2, [r3, #12]
 8004b00:	4b2d      	ldr	r3, [pc, #180]	; (8004bb8 <HAL_UART_RxCpltCallback+0x164>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f042 0210 	orr.w	r2, r2, #16
 8004b08:	60da      	str	r2, [r3, #12]
      break;
    default:
      break;
    }
  }
}
 8004b0a:	e050      	b.n	8004bae <HAL_UART_RxCpltCallback+0x15a>
  else if (huart == &huart3)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a2d      	ldr	r2, [pc, #180]	; (8004bc4 <HAL_UART_RxCpltCallback+0x170>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d149      	bne.n	8004ba8 <HAL_UART_RxCpltCallback+0x154>
    while (HAL_UART_GetState(&huart3) == HAL_UART_STATE_BUSY_TX)
 8004b14:	bf00      	nop
 8004b16:	482b      	ldr	r0, [pc, #172]	; (8004bc4 <HAL_UART_RxCpltCallback+0x170>)
 8004b18:	f002 ff7e 	bl	8007a18 <HAL_UART_GetState>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b21      	cmp	r3, #33	; 0x21
 8004b20:	d0f9      	beq.n	8004b16 <HAL_UART_RxCpltCallback+0xc2>
    HAL_UART_Receive_IT(&huart3, (uint8_t *)&rx_buffer, 1);
 8004b22:	2201      	movs	r2, #1
 8004b24:	4928      	ldr	r1, [pc, #160]	; (8004bc8 <HAL_UART_RxCpltCallback+0x174>)
 8004b26:	4827      	ldr	r0, [pc, #156]	; (8004bc4 <HAL_UART_RxCpltCallback+0x170>)
 8004b28:	f002 fdd9 	bl	80076de <HAL_UART_Receive_IT>
    switch (rx_buffer)
 8004b2c:	4b26      	ldr	r3, [pc, #152]	; (8004bc8 <HAL_UART_RxCpltCallback+0x174>)
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	3b62      	subs	r3, #98	; 0x62
 8004b34:	2b11      	cmp	r3, #17
 8004b36:	d839      	bhi.n	8004bac <HAL_UART_RxCpltCallback+0x158>
 8004b38:	a201      	add	r2, pc, #4	; (adr r2, 8004b40 <HAL_UART_RxCpltCallback+0xec>)
 8004b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b3e:	bf00      	nop
 8004b40:	08004b99 	.word	0x08004b99
 8004b44:	08004b89 	.word	0x08004b89
 8004b48:	08004bad 	.word	0x08004bad
 8004b4c:	08004ba1 	.word	0x08004ba1
 8004b50:	08004bad 	.word	0x08004bad
 8004b54:	08004bad 	.word	0x08004bad
 8004b58:	08004bad 	.word	0x08004bad
 8004b5c:	08004bad 	.word	0x08004bad
 8004b60:	08004bad 	.word	0x08004bad
 8004b64:	08004bad 	.word	0x08004bad
 8004b68:	08004bad 	.word	0x08004bad
 8004b6c:	08004bad 	.word	0x08004bad
 8004b70:	08004bad 	.word	0x08004bad
 8004b74:	08004bad 	.word	0x08004bad
 8004b78:	08004bad 	.word	0x08004bad
 8004b7c:	08004bad 	.word	0x08004bad
 8004b80:	08004bad 	.word	0x08004bad
 8004b84:	08004b91 	.word	0x08004b91
      bt_flags = 1;
 8004b88:	4b10      	ldr	r3, [pc, #64]	; (8004bcc <HAL_UART_RxCpltCallback+0x178>)
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	701a      	strb	r2, [r3, #0]
      break;
 8004b8e:	e00e      	b.n	8004bae <HAL_UART_RxCpltCallback+0x15a>
      bt_flags = 2;
 8004b90:	4b0e      	ldr	r3, [pc, #56]	; (8004bcc <HAL_UART_RxCpltCallback+0x178>)
 8004b92:	2202      	movs	r2, #2
 8004b94:	701a      	strb	r2, [r3, #0]
      break;
 8004b96:	e00a      	b.n	8004bae <HAL_UART_RxCpltCallback+0x15a>
      bt_flags = 3;
 8004b98:	4b0c      	ldr	r3, [pc, #48]	; (8004bcc <HAL_UART_RxCpltCallback+0x178>)
 8004b9a:	2203      	movs	r2, #3
 8004b9c:	701a      	strb	r2, [r3, #0]
      break;
 8004b9e:	e006      	b.n	8004bae <HAL_UART_RxCpltCallback+0x15a>
      bt_flags = 4;
 8004ba0:	4b0a      	ldr	r3, [pc, #40]	; (8004bcc <HAL_UART_RxCpltCallback+0x178>)
 8004ba2:	2204      	movs	r2, #4
 8004ba4:	701a      	strb	r2, [r3, #0]
      break;
 8004ba6:	e002      	b.n	8004bae <HAL_UART_RxCpltCallback+0x15a>
  }
 8004ba8:	bf00      	nop
 8004baa:	e000      	b.n	8004bae <HAL_UART_RxCpltCallback+0x15a>
      break;
 8004bac:	bf00      	nop
}
 8004bae:	bf00      	nop
 8004bb0:	3708      	adds	r7, #8
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	20002158 	.word	0x20002158
 8004bbc:	200020c8 	.word	0x200020c8
 8004bc0:	200020c6 	.word	0x200020c6
 8004bc4:	20002198 	.word	0x20002198
 8004bc8:	200020c5 	.word	0x200020c5
 8004bcc:	20002154 	.word	0x20002154

08004bd0 <XPT2046_Calculate_CalibrationFactor>:
}

#endif

static uint8_t XPT2046_Calculate_CalibrationFactor(strType_XPT2046_Coordinate *pDisplayCoordinate, strType_XPT2046_Coordinate *pScreenSample, strType_XPT2046_Calibration *pCalibrationFactor)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b086      	sub	sp, #24
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	607a      	str	r2, [r7, #4]
	uint8_t ucRet = 1;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	75fb      	strb	r3, [r7, #23]

	pCalibrationFactor->Divider = ((pScreenSample[0].x - pScreenSample[2].x) * (pScreenSample[1].y - pScreenSample[2].y)) -
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	881b      	ldrh	r3, [r3, #0]
 8004be4:	461a      	mov	r2, r3
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	3308      	adds	r3, #8
 8004bea:	881b      	ldrh	r3, [r3, #0]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	68ba      	ldr	r2, [r7, #8]
 8004bf0:	3204      	adds	r2, #4
 8004bf2:	8852      	ldrh	r2, [r2, #2]
 8004bf4:	4611      	mov	r1, r2
 8004bf6:	68ba      	ldr	r2, [r7, #8]
 8004bf8:	3208      	adds	r2, #8
 8004bfa:	8852      	ldrh	r2, [r2, #2]
 8004bfc:	1a8a      	subs	r2, r1, r2
 8004bfe:	fb03 f202 	mul.w	r2, r3, r2
								  ((pScreenSample[1].x - pScreenSample[2].x) * (pScreenSample[0].y - pScreenSample[2].y));
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	3304      	adds	r3, #4
 8004c06:	881b      	ldrh	r3, [r3, #0]
 8004c08:	4619      	mov	r1, r3
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	3308      	adds	r3, #8
 8004c0e:	881b      	ldrh	r3, [r3, #0]
 8004c10:	1acb      	subs	r3, r1, r3
 8004c12:	68b9      	ldr	r1, [r7, #8]
 8004c14:	8849      	ldrh	r1, [r1, #2]
 8004c16:	4608      	mov	r0, r1
 8004c18:	68b9      	ldr	r1, [r7, #8]
 8004c1a:	3108      	adds	r1, #8
 8004c1c:	8849      	ldrh	r1, [r1, #2]
 8004c1e:	1a41      	subs	r1, r0, r1
 8004c20:	fb01 f303 	mul.w	r3, r1, r3
	pCalibrationFactor->Divider = ((pScreenSample[0].x - pScreenSample[2].x) * (pScreenSample[1].y - pScreenSample[2].y)) -
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7fb fc50 	bl	80004cc <__aeabi_i2d>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	460b      	mov	r3, r1
 8004c30:	6879      	ldr	r1, [r7, #4]
 8004c32:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	if (pCalibrationFactor->Divider == 0)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8004c3c:	f04f 0200 	mov.w	r2, #0
 8004c40:	f04f 0300 	mov.w	r3, #0
 8004c44:	f7fb ff14 	bl	8000a70 <__aeabi_dcmpeq>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d002      	beq.n	8004c54 <XPT2046_Calculate_CalibrationFactor+0x84>
		ucRet = 0;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	75fb      	strb	r3, [r7, #23]
 8004c52:	e145      	b.n	8004ee0 <XPT2046_Calculate_CalibrationFactor+0x310>

	else
	{

		pCalibrationFactor->An = ((pDisplayCoordinate[0].x - pDisplayCoordinate[2].x) * (pScreenSample[1].y - pScreenSample[2].y)) -
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	881b      	ldrh	r3, [r3, #0]
 8004c58:	461a      	mov	r2, r3
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	3308      	adds	r3, #8
 8004c5e:	881b      	ldrh	r3, [r3, #0]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	68ba      	ldr	r2, [r7, #8]
 8004c64:	3204      	adds	r2, #4
 8004c66:	8852      	ldrh	r2, [r2, #2]
 8004c68:	4611      	mov	r1, r2
 8004c6a:	68ba      	ldr	r2, [r7, #8]
 8004c6c:	3208      	adds	r2, #8
 8004c6e:	8852      	ldrh	r2, [r2, #2]
 8004c70:	1a8a      	subs	r2, r1, r2
 8004c72:	fb03 f202 	mul.w	r2, r3, r2
								 ((pDisplayCoordinate[1].x - pDisplayCoordinate[2].x) * (pScreenSample[0].y - pScreenSample[2].y));
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	3304      	adds	r3, #4
 8004c7a:	881b      	ldrh	r3, [r3, #0]
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	3308      	adds	r3, #8
 8004c82:	881b      	ldrh	r3, [r3, #0]
 8004c84:	1acb      	subs	r3, r1, r3
 8004c86:	68b9      	ldr	r1, [r7, #8]
 8004c88:	8849      	ldrh	r1, [r1, #2]
 8004c8a:	4608      	mov	r0, r1
 8004c8c:	68b9      	ldr	r1, [r7, #8]
 8004c8e:	3108      	adds	r1, #8
 8004c90:	8849      	ldrh	r1, [r1, #2]
 8004c92:	1a41      	subs	r1, r0, r1
 8004c94:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor->An = ((pDisplayCoordinate[0].x - pDisplayCoordinate[2].x) * (pScreenSample[1].y - pScreenSample[2].y)) -
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f7fb fc16 	bl	80004cc <__aeabi_i2d>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	460b      	mov	r3, r1
 8004ca4:	6879      	ldr	r1, [r7, #4]
 8004ca6:	e9c1 2300 	strd	r2, r3, [r1]

		pCalibrationFactor->Bn = ((pScreenSample[0].x - pScreenSample[2].x) * (pDisplayCoordinate[1].x - pDisplayCoordinate[2].x)) -
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	881b      	ldrh	r3, [r3, #0]
 8004cae:	461a      	mov	r2, r3
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	3308      	adds	r3, #8
 8004cb4:	881b      	ldrh	r3, [r3, #0]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	3204      	adds	r2, #4
 8004cbc:	8812      	ldrh	r2, [r2, #0]
 8004cbe:	4611      	mov	r1, r2
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	3208      	adds	r2, #8
 8004cc4:	8812      	ldrh	r2, [r2, #0]
 8004cc6:	1a8a      	subs	r2, r1, r2
 8004cc8:	fb03 f202 	mul.w	r2, r3, r2
								 ((pDisplayCoordinate[0].x - pDisplayCoordinate[2].x) * (pScreenSample[1].x - pScreenSample[2].x));
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	881b      	ldrh	r3, [r3, #0]
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	3308      	adds	r3, #8
 8004cd6:	881b      	ldrh	r3, [r3, #0]
 8004cd8:	1acb      	subs	r3, r1, r3
 8004cda:	68b9      	ldr	r1, [r7, #8]
 8004cdc:	3104      	adds	r1, #4
 8004cde:	8809      	ldrh	r1, [r1, #0]
 8004ce0:	4608      	mov	r0, r1
 8004ce2:	68b9      	ldr	r1, [r7, #8]
 8004ce4:	3108      	adds	r1, #8
 8004ce6:	8809      	ldrh	r1, [r1, #0]
 8004ce8:	1a41      	subs	r1, r0, r1
 8004cea:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor->Bn = ((pScreenSample[0].x - pScreenSample[2].x) * (pDisplayCoordinate[1].x - pDisplayCoordinate[2].x)) -
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7fb fbeb 	bl	80004cc <__aeabi_i2d>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	6879      	ldr	r1, [r7, #4]
 8004cfc:	e9c1 2302 	strd	r2, r3, [r1, #8]

		pCalibrationFactor->Cn = (pScreenSample[2].x * pDisplayCoordinate[1].x - pScreenSample[1].x * pDisplayCoordinate[2].x) * pScreenSample[0].y +
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	3308      	adds	r3, #8
 8004d04:	881b      	ldrh	r3, [r3, #0]
 8004d06:	461a      	mov	r2, r3
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	3304      	adds	r3, #4
 8004d0c:	881b      	ldrh	r3, [r3, #0]
 8004d0e:	fb03 f202 	mul.w	r2, r3, r2
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	3304      	adds	r3, #4
 8004d16:	881b      	ldrh	r3, [r3, #0]
 8004d18:	4619      	mov	r1, r3
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	3308      	adds	r3, #8
 8004d1e:	881b      	ldrh	r3, [r3, #0]
 8004d20:	fb01 f303 	mul.w	r3, r1, r3
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	68ba      	ldr	r2, [r7, #8]
 8004d28:	8852      	ldrh	r2, [r2, #2]
 8004d2a:	fb03 f202 	mul.w	r2, r3, r2
								 (pScreenSample[0].x * pDisplayCoordinate[2].x - pScreenSample[2].x * pDisplayCoordinate[0].x) * pScreenSample[1].y +
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	881b      	ldrh	r3, [r3, #0]
 8004d32:	4619      	mov	r1, r3
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	3308      	adds	r3, #8
 8004d38:	881b      	ldrh	r3, [r3, #0]
 8004d3a:	fb03 f101 	mul.w	r1, r3, r1
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	3308      	adds	r3, #8
 8004d42:	881b      	ldrh	r3, [r3, #0]
 8004d44:	4618      	mov	r0, r3
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	881b      	ldrh	r3, [r3, #0]
 8004d4a:	fb00 f303 	mul.w	r3, r0, r3
 8004d4e:	1acb      	subs	r3, r1, r3
 8004d50:	68b9      	ldr	r1, [r7, #8]
 8004d52:	3104      	adds	r1, #4
 8004d54:	8849      	ldrh	r1, [r1, #2]
 8004d56:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor->Cn = (pScreenSample[2].x * pDisplayCoordinate[1].x - pScreenSample[1].x * pDisplayCoordinate[2].x) * pScreenSample[0].y +
 8004d5a:	441a      	add	r2, r3
								 (pScreenSample[1].x * pDisplayCoordinate[0].x - pScreenSample[0].x * pDisplayCoordinate[1].x) * pScreenSample[2].y;
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	3304      	adds	r3, #4
 8004d60:	881b      	ldrh	r3, [r3, #0]
 8004d62:	4619      	mov	r1, r3
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	881b      	ldrh	r3, [r3, #0]
 8004d68:	fb03 f101 	mul.w	r1, r3, r1
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	881b      	ldrh	r3, [r3, #0]
 8004d70:	4618      	mov	r0, r3
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	3304      	adds	r3, #4
 8004d76:	881b      	ldrh	r3, [r3, #0]
 8004d78:	fb00 f303 	mul.w	r3, r0, r3
 8004d7c:	1acb      	subs	r3, r1, r3
 8004d7e:	68b9      	ldr	r1, [r7, #8]
 8004d80:	3108      	adds	r1, #8
 8004d82:	8849      	ldrh	r1, [r1, #2]
 8004d84:	fb01 f303 	mul.w	r3, r1, r3
								 (pScreenSample[0].x * pDisplayCoordinate[2].x - pScreenSample[2].x * pDisplayCoordinate[0].x) * pScreenSample[1].y +
 8004d88:	4413      	add	r3, r2
		pCalibrationFactor->Cn = (pScreenSample[2].x * pDisplayCoordinate[1].x - pScreenSample[1].x * pDisplayCoordinate[2].x) * pScreenSample[0].y +
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f7fb fb9e 	bl	80004cc <__aeabi_i2d>
 8004d90:	4602      	mov	r2, r0
 8004d92:	460b      	mov	r3, r1
 8004d94:	6879      	ldr	r1, [r7, #4]
 8004d96:	e9c1 2304 	strd	r2, r3, [r1, #16]

		pCalibrationFactor->Dn = ((pDisplayCoordinate[0].y - pDisplayCoordinate[2].y) * (pScreenSample[1].y - pScreenSample[2].y)) -
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	885b      	ldrh	r3, [r3, #2]
 8004d9e:	461a      	mov	r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	3308      	adds	r3, #8
 8004da4:	885b      	ldrh	r3, [r3, #2]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	68ba      	ldr	r2, [r7, #8]
 8004daa:	3204      	adds	r2, #4
 8004dac:	8852      	ldrh	r2, [r2, #2]
 8004dae:	4611      	mov	r1, r2
 8004db0:	68ba      	ldr	r2, [r7, #8]
 8004db2:	3208      	adds	r2, #8
 8004db4:	8852      	ldrh	r2, [r2, #2]
 8004db6:	1a8a      	subs	r2, r1, r2
 8004db8:	fb03 f202 	mul.w	r2, r3, r2
								 ((pDisplayCoordinate[1].y - pDisplayCoordinate[2].y) * (pScreenSample[0].y - pScreenSample[2].y));
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	3304      	adds	r3, #4
 8004dc0:	885b      	ldrh	r3, [r3, #2]
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	3308      	adds	r3, #8
 8004dc8:	885b      	ldrh	r3, [r3, #2]
 8004dca:	1acb      	subs	r3, r1, r3
 8004dcc:	68b9      	ldr	r1, [r7, #8]
 8004dce:	8849      	ldrh	r1, [r1, #2]
 8004dd0:	4608      	mov	r0, r1
 8004dd2:	68b9      	ldr	r1, [r7, #8]
 8004dd4:	3108      	adds	r1, #8
 8004dd6:	8849      	ldrh	r1, [r1, #2]
 8004dd8:	1a41      	subs	r1, r0, r1
 8004dda:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor->Dn = ((pDisplayCoordinate[0].y - pDisplayCoordinate[2].y) * (pScreenSample[1].y - pScreenSample[2].y)) -
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	4618      	mov	r0, r3
 8004de2:	f7fb fb73 	bl	80004cc <__aeabi_i2d>
 8004de6:	4602      	mov	r2, r0
 8004de8:	460b      	mov	r3, r1
 8004dea:	6879      	ldr	r1, [r7, #4]
 8004dec:	e9c1 2306 	strd	r2, r3, [r1, #24]

		pCalibrationFactor->En = ((pScreenSample[0].x - pScreenSample[2].x) * (pDisplayCoordinate[1].y - pDisplayCoordinate[2].y)) -
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	881b      	ldrh	r3, [r3, #0]
 8004df4:	461a      	mov	r2, r3
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	3308      	adds	r3, #8
 8004dfa:	881b      	ldrh	r3, [r3, #0]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	3204      	adds	r2, #4
 8004e02:	8852      	ldrh	r2, [r2, #2]
 8004e04:	4611      	mov	r1, r2
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	3208      	adds	r2, #8
 8004e0a:	8852      	ldrh	r2, [r2, #2]
 8004e0c:	1a8a      	subs	r2, r1, r2
 8004e0e:	fb03 f202 	mul.w	r2, r3, r2
								 ((pDisplayCoordinate[0].y - pDisplayCoordinate[2].y) * (pScreenSample[1].x - pScreenSample[2].x));
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	885b      	ldrh	r3, [r3, #2]
 8004e16:	4619      	mov	r1, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	3308      	adds	r3, #8
 8004e1c:	885b      	ldrh	r3, [r3, #2]
 8004e1e:	1acb      	subs	r3, r1, r3
 8004e20:	68b9      	ldr	r1, [r7, #8]
 8004e22:	3104      	adds	r1, #4
 8004e24:	8809      	ldrh	r1, [r1, #0]
 8004e26:	4608      	mov	r0, r1
 8004e28:	68b9      	ldr	r1, [r7, #8]
 8004e2a:	3108      	adds	r1, #8
 8004e2c:	8809      	ldrh	r1, [r1, #0]
 8004e2e:	1a41      	subs	r1, r0, r1
 8004e30:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor->En = ((pScreenSample[0].x - pScreenSample[2].x) * (pDisplayCoordinate[1].y - pDisplayCoordinate[2].y)) -
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	4618      	mov	r0, r3
 8004e38:	f7fb fb48 	bl	80004cc <__aeabi_i2d>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	460b      	mov	r3, r1
 8004e40:	6879      	ldr	r1, [r7, #4]
 8004e42:	e9c1 2308 	strd	r2, r3, [r1, #32]

		pCalibrationFactor->Fn = (pScreenSample[2].x * pDisplayCoordinate[1].y - pScreenSample[1].x * pDisplayCoordinate[2].y) * pScreenSample[0].y +
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	3308      	adds	r3, #8
 8004e4a:	881b      	ldrh	r3, [r3, #0]
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	3304      	adds	r3, #4
 8004e52:	885b      	ldrh	r3, [r3, #2]
 8004e54:	fb03 f202 	mul.w	r2, r3, r2
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	3304      	adds	r3, #4
 8004e5c:	881b      	ldrh	r3, [r3, #0]
 8004e5e:	4619      	mov	r1, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	3308      	adds	r3, #8
 8004e64:	885b      	ldrh	r3, [r3, #2]
 8004e66:	fb01 f303 	mul.w	r3, r1, r3
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	68ba      	ldr	r2, [r7, #8]
 8004e6e:	8852      	ldrh	r2, [r2, #2]
 8004e70:	fb03 f202 	mul.w	r2, r3, r2
								 (pScreenSample[0].x * pDisplayCoordinate[2].y - pScreenSample[2].x * pDisplayCoordinate[0].y) * pScreenSample[1].y +
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	881b      	ldrh	r3, [r3, #0]
 8004e78:	4619      	mov	r1, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	3308      	adds	r3, #8
 8004e7e:	885b      	ldrh	r3, [r3, #2]
 8004e80:	fb03 f101 	mul.w	r1, r3, r1
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	3308      	adds	r3, #8
 8004e88:	881b      	ldrh	r3, [r3, #0]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	885b      	ldrh	r3, [r3, #2]
 8004e90:	fb00 f303 	mul.w	r3, r0, r3
 8004e94:	1acb      	subs	r3, r1, r3
 8004e96:	68b9      	ldr	r1, [r7, #8]
 8004e98:	3104      	adds	r1, #4
 8004e9a:	8849      	ldrh	r1, [r1, #2]
 8004e9c:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor->Fn = (pScreenSample[2].x * pDisplayCoordinate[1].y - pScreenSample[1].x * pDisplayCoordinate[2].y) * pScreenSample[0].y +
 8004ea0:	441a      	add	r2, r3
								 (pScreenSample[1].x * pDisplayCoordinate[0].y - pScreenSample[0].x * pDisplayCoordinate[1].y) * pScreenSample[2].y;
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	3304      	adds	r3, #4
 8004ea6:	881b      	ldrh	r3, [r3, #0]
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	885b      	ldrh	r3, [r3, #2]
 8004eae:	fb03 f101 	mul.w	r1, r3, r1
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	881b      	ldrh	r3, [r3, #0]
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	3304      	adds	r3, #4
 8004ebc:	885b      	ldrh	r3, [r3, #2]
 8004ebe:	fb00 f303 	mul.w	r3, r0, r3
 8004ec2:	1acb      	subs	r3, r1, r3
 8004ec4:	68b9      	ldr	r1, [r7, #8]
 8004ec6:	3108      	adds	r1, #8
 8004ec8:	8849      	ldrh	r1, [r1, #2]
 8004eca:	fb01 f303 	mul.w	r3, r1, r3
								 (pScreenSample[0].x * pDisplayCoordinate[2].y - pScreenSample[2].x * pDisplayCoordinate[0].y) * pScreenSample[1].y +
 8004ece:	4413      	add	r3, r2
		pCalibrationFactor->Fn = (pScreenSample[2].x * pDisplayCoordinate[1].y - pScreenSample[1].x * pDisplayCoordinate[2].y) * pScreenSample[0].y +
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f7fb fafb 	bl	80004cc <__aeabi_i2d>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	460b      	mov	r3, r1
 8004eda:	6879      	ldr	r1, [r7, #4]
 8004edc:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	}

	return ucRet;
 8004ee0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3718      	adds	r7, #24
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
	...

08004eec <XPT2046_Touch_Calibrate>:

uint8_t XPT2046_Touch_Calibrate(void)
{
 8004eec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004ef0:	b09e      	sub	sp, #120	; 0x78
 8004ef2:	af00      	add	r7, sp, #0
	uint8_t i;

	char cStr[10];

	uint16_t usScreenWidth, usScreenHeigth;
	uint16_t usTest_x = 0, usTest_y = 0, usGap_x = 0, usGap_y = 0;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8004efa:	2300      	movs	r3, #0
 8004efc:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8004f00:	2300      	movs	r3, #0
 8004f02:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 8004f06:	2300      	movs	r3, #0
 8004f08:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70

	char *pStr = 0;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	66fb      	str	r3, [r7, #108]	; 0x6c
	strType_XPT2046_Coordinate strCrossCoordinate[4], strScreenSample[4];

	strType_XPT2046_Calibration CalibrationFactor;

#if (macXPT2046_Coordinate_GramScan == 1) || (macXPT2046_Coordinate_GramScan == 4)
	usScreenWidth = LCD_Default_Max_Width;
 8004f10:	23f0      	movs	r3, #240	; 0xf0
 8004f12:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
	usScreenHeigth = LCD_Default_Max_Heigth;
 8004f16:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8004f1a:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
	usScreenWidth = LCD_Default_Max_Heigth;
	usScreenHeigth = LCD_Default_Max_Width;

#endif

	strCrossCoordinate[0].x = usScreenWidth >> 2;
 8004f1e:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8004f22:	089b      	lsrs	r3, r3, #2
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	strCrossCoordinate[0].y = usScreenHeigth >> 2;
 8004f2a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8004f2e:	089b      	lsrs	r3, r3, #2
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

	strCrossCoordinate[1].x = strCrossCoordinate[0].x;
 8004f36:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004f3a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	strCrossCoordinate[1].y = (usScreenHeigth * 3) >> 2;
 8004f3e:	f8b7 2068 	ldrh.w	r2, [r7, #104]	; 0x68
 8004f42:	4613      	mov	r3, r2
 8004f44:	005b      	lsls	r3, r3, #1
 8004f46:	4413      	add	r3, r2
 8004f48:	109b      	asrs	r3, r3, #2
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

	strCrossCoordinate[2].x = (usScreenWidth * 3) >> 2;
 8004f50:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 8004f54:	4613      	mov	r3, r2
 8004f56:	005b      	lsls	r3, r3, #1
 8004f58:	4413      	add	r3, r2
 8004f5a:	109b      	asrs	r3, r3, #2
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	strCrossCoordinate[2].y = strCrossCoordinate[1].y;
 8004f62:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004f66:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

	strCrossCoordinate[3].x = strCrossCoordinate[2].x;
 8004f6a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004f6e:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	strCrossCoordinate[3].y = strCrossCoordinate[0].y;
 8004f72:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004f76:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

	LCD_GramScan(1);
 8004f7a:	2001      	movs	r0, #1
 8004f7c:	f7fd f9de 	bl	800233c <LCD_GramScan>

	// 	while (!XPT2046_ReadAdc_Smooth_XY(&strScreenSample[i]))
	// 		;
	// }

	XPT2046_Calculate_CalibrationFactor(strCrossCoordinate, strScreenSample, &CalibrationFactor);
 8004f80:	463a      	mov	r2, r7
 8004f82:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8004f86:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7ff fe20 	bl	8004bd0 <XPT2046_Calculate_CalibrationFactor>

	// if (CalibrationFactor.Divider == 0)
	// 	goto Failure;

	usTest_x = ((CalibrationFactor.An * strScreenSample[3].x) + (CalibrationFactor.Bn * strScreenSample[3].y) + CalibrationFactor.Cn) / CalibrationFactor.Divider;
 8004f90:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f94:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f7fb fa97 	bl	80004cc <__aeabi_i2d>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	4620      	mov	r0, r4
 8004fa4:	4629      	mov	r1, r5
 8004fa6:	f7fb fafb 	bl	80005a0 <__aeabi_dmul>
 8004faa:	4602      	mov	r2, r0
 8004fac:	460b      	mov	r3, r1
 8004fae:	4690      	mov	r8, r2
 8004fb0:	4699      	mov	r9, r3
 8004fb2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004fb6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f7fb fa86 	bl	80004cc <__aeabi_i2d>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	4620      	mov	r0, r4
 8004fc6:	4629      	mov	r1, r5
 8004fc8:	f7fb faea 	bl	80005a0 <__aeabi_dmul>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	460b      	mov	r3, r1
 8004fd0:	4640      	mov	r0, r8
 8004fd2:	4649      	mov	r1, r9
 8004fd4:	f7fb f92e 	bl	8000234 <__adddf3>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	460b      	mov	r3, r1
 8004fdc:	4610      	mov	r0, r2
 8004fde:	4619      	mov	r1, r3
 8004fe0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004fe4:	f7fb f926 	bl	8000234 <__adddf3>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	460b      	mov	r3, r1
 8004fec:	4610      	mov	r0, r2
 8004fee:	4619      	mov	r1, r3
 8004ff0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004ff4:	f7fb fbfe 	bl	80007f4 <__aeabi_ddiv>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	4610      	mov	r0, r2
 8004ffe:	4619      	mov	r1, r3
 8005000:	f7fb fd68 	bl	8000ad4 <__aeabi_d2uiz>
 8005004:	4603      	mov	r3, r0
 8005006:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	usTest_y = ((CalibrationFactor.Dn * strScreenSample[3].x) + (CalibrationFactor.En * strScreenSample[3].y) + CalibrationFactor.Fn) / CalibrationFactor.Divider;
 800500a:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800500e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005012:	4618      	mov	r0, r3
 8005014:	f7fb fa5a 	bl	80004cc <__aeabi_i2d>
 8005018:	4602      	mov	r2, r0
 800501a:	460b      	mov	r3, r1
 800501c:	4620      	mov	r0, r4
 800501e:	4629      	mov	r1, r5
 8005020:	f7fb fabe 	bl	80005a0 <__aeabi_dmul>
 8005024:	4602      	mov	r2, r0
 8005026:	460b      	mov	r3, r1
 8005028:	4690      	mov	r8, r2
 800502a:	4699      	mov	r9, r3
 800502c:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005030:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005034:	4618      	mov	r0, r3
 8005036:	f7fb fa49 	bl	80004cc <__aeabi_i2d>
 800503a:	4602      	mov	r2, r0
 800503c:	460b      	mov	r3, r1
 800503e:	4620      	mov	r0, r4
 8005040:	4629      	mov	r1, r5
 8005042:	f7fb faad 	bl	80005a0 <__aeabi_dmul>
 8005046:	4602      	mov	r2, r0
 8005048:	460b      	mov	r3, r1
 800504a:	4640      	mov	r0, r8
 800504c:	4649      	mov	r1, r9
 800504e:	f7fb f8f1 	bl	8000234 <__adddf3>
 8005052:	4602      	mov	r2, r0
 8005054:	460b      	mov	r3, r1
 8005056:	4610      	mov	r0, r2
 8005058:	4619      	mov	r1, r3
 800505a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800505e:	f7fb f8e9 	bl	8000234 <__adddf3>
 8005062:	4602      	mov	r2, r0
 8005064:	460b      	mov	r3, r1
 8005066:	4610      	mov	r0, r2
 8005068:	4619      	mov	r1, r3
 800506a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800506e:	f7fb fbc1 	bl	80007f4 <__aeabi_ddiv>
 8005072:	4602      	mov	r2, r0
 8005074:	460b      	mov	r3, r1
 8005076:	4610      	mov	r0, r2
 8005078:	4619      	mov	r1, r3
 800507a:	f7fb fd2b 	bl	8000ad4 <__aeabi_d2uiz>
 800507e:	4603      	mov	r3, r0
 8005080:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74

	usGap_x = (usTest_x > strCrossCoordinate[3].x) ? (usTest_x - strCrossCoordinate[3].x) : (strCrossCoordinate[3].x - usTest_x);
 8005084:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8005088:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800508c:	429a      	cmp	r2, r3
 800508e:	d906      	bls.n	800509e <XPT2046_Touch_Calibrate+0x1b2>
 8005090:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8005094:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	b29b      	uxth	r3, r3
 800509c:	e005      	b.n	80050aa <XPT2046_Touch_Calibrate+0x1be>
 800509e:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 80050a2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
	usGap_y = (usTest_y > strCrossCoordinate[3].y) ? (usTest_y - strCrossCoordinate[3].y) : (strCrossCoordinate[3].y - usTest_y);
 80050ae:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80050b2:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d906      	bls.n	80050c8 <XPT2046_Touch_Calibrate+0x1dc>
 80050ba:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80050be:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	e005      	b.n	80050d4 <XPT2046_Touch_Calibrate+0x1e8>
 80050c8:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 80050cc:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70

	// if ((usGap_x > 10) || (usGap_y > 10))
		// goto Failure;

	strXPT2046_TouchPara.dX_X = (CalibrationFactor.An * 1.0) / CalibrationFactor.Divider;
 80050d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80050dc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80050e0:	f7fb fb88 	bl	80007f4 <__aeabi_ddiv>
 80050e4:	4602      	mov	r2, r0
 80050e6:	460b      	mov	r3, r1
 80050e8:	491f      	ldr	r1, [pc, #124]	; (8005168 <XPT2046_Touch_Calibrate+0x27c>)
 80050ea:	e9c1 2300 	strd	r2, r3, [r1]
	strXPT2046_TouchPara.dX_Y = (CalibrationFactor.Bn * 1.0) / CalibrationFactor.Divider;
 80050ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80050f2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80050f6:	f7fb fb7d 	bl	80007f4 <__aeabi_ddiv>
 80050fa:	4602      	mov	r2, r0
 80050fc:	460b      	mov	r3, r1
 80050fe:	491a      	ldr	r1, [pc, #104]	; (8005168 <XPT2046_Touch_Calibrate+0x27c>)
 8005100:	e9c1 2302 	strd	r2, r3, [r1, #8]
	strXPT2046_TouchPara.dX = (CalibrationFactor.Cn * 1.0) / CalibrationFactor.Divider;
 8005104:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005108:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800510c:	f7fb fb72 	bl	80007f4 <__aeabi_ddiv>
 8005110:	4602      	mov	r2, r0
 8005112:	460b      	mov	r3, r1
 8005114:	4914      	ldr	r1, [pc, #80]	; (8005168 <XPT2046_Touch_Calibrate+0x27c>)
 8005116:	e9c1 2304 	strd	r2, r3, [r1, #16]

	strXPT2046_TouchPara.dY_X = (CalibrationFactor.Dn * 1.0) / CalibrationFactor.Divider;
 800511a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800511e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005122:	f7fb fb67 	bl	80007f4 <__aeabi_ddiv>
 8005126:	4602      	mov	r2, r0
 8005128:	460b      	mov	r3, r1
 800512a:	490f      	ldr	r1, [pc, #60]	; (8005168 <XPT2046_Touch_Calibrate+0x27c>)
 800512c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	strXPT2046_TouchPara.dY_Y = (CalibrationFactor.En * 1.0) / CalibrationFactor.Divider;
 8005130:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005134:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005138:	f7fb fb5c 	bl	80007f4 <__aeabi_ddiv>
 800513c:	4602      	mov	r2, r0
 800513e:	460b      	mov	r3, r1
 8005140:	4909      	ldr	r1, [pc, #36]	; (8005168 <XPT2046_Touch_Calibrate+0x27c>)
 8005142:	e9c1 2308 	strd	r2, r3, [r1, #32]
	strXPT2046_TouchPara.dY = (CalibrationFactor.Fn * 1.0) / CalibrationFactor.Divider;
 8005146:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800514a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800514e:	f7fb fb51 	bl	80007f4 <__aeabi_ddiv>
 8005152:	4602      	mov	r2, r0
 8005154:	460b      	mov	r3, r1
 8005156:	4904      	ldr	r1, [pc, #16]	; (8005168 <XPT2046_Touch_Calibrate+0x27c>)
 8005158:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	// pStr = "Calibrate Succed";
	// LCD_DrawString_Color((usScreenWidth - strlen(pStr) * WIDTH_EN_CHAR) >> 1, usScreenHeigth >> 1, pStr, BACKGROUND, RED);

	// XPT2046_DelayUS(200000);

	return 1;
 800515c:	2301      	movs	r3, #1
	LCD_DrawString_Color((usScreenWidth - strlen(pStr) * WIDTH_EN_CHAR) >> 1, (usScreenHeigth >> 1) + HEIGHT_EN_CHAR, pStr, BACKGROUND, RED);

	XPT2046_DelayUS(1000000);

	return 0;
}
 800515e:	4618      	mov	r0, r3
 8005160:	3778      	adds	r7, #120	; 0x78
 8005162:	46bd      	mov	sp, r7
 8005164:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005168:	200001a8 	.word	0x200001a8

0800516c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800516c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800516e:	e003      	b.n	8005178 <LoopCopyDataInit>

08005170 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005170:	4b0b      	ldr	r3, [pc, #44]	; (80051a0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8005172:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005174:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8005176:	3104      	adds	r1, #4

08005178 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005178:	480a      	ldr	r0, [pc, #40]	; (80051a4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800517a:	4b0b      	ldr	r3, [pc, #44]	; (80051a8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800517c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800517e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005180:	d3f6      	bcc.n	8005170 <CopyDataInit>
  ldr r2, =_sbss
 8005182:	4a0a      	ldr	r2, [pc, #40]	; (80051ac <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8005184:	e002      	b.n	800518c <LoopFillZerobss>

08005186 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8005186:	2300      	movs	r3, #0
  str r3, [r2], #4
 8005188:	f842 3b04 	str.w	r3, [r2], #4

0800518c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800518c:	4b08      	ldr	r3, [pc, #32]	; (80051b0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800518e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005190:	d3f9      	bcc.n	8005186 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005192:	f7ff fa2f 	bl	80045f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005196:	f002 ffcf 	bl	8008138 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800519a:	f7fd fb4b 	bl	8002834 <main>
  bx lr
 800519e:	4770      	bx	lr
  ldr r3, =_sidata
 80051a0:	08009678 	.word	0x08009678
  ldr r0, =_sdata
 80051a4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80051a8:	20000244 	.word	0x20000244
  ldr r2, =_sbss
 80051ac:	20000244 	.word	0x20000244
  ldr r3, = _ebss
 80051b0:	200021f0 	.word	0x200021f0

080051b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80051b4:	e7fe      	b.n	80051b4 <ADC1_2_IRQHandler>
	...

080051b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80051bc:	4b08      	ldr	r3, [pc, #32]	; (80051e0 <HAL_Init+0x28>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a07      	ldr	r2, [pc, #28]	; (80051e0 <HAL_Init+0x28>)
 80051c2:	f043 0310 	orr.w	r3, r3, #16
 80051c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80051c8:	2003      	movs	r0, #3
 80051ca:	f000 f943 	bl	8005454 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80051ce:	2000      	movs	r0, #0
 80051d0:	f000 f808 	bl	80051e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80051d4:	f7ff f84c 	bl	8004270 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	40022000 	.word	0x40022000

080051e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b082      	sub	sp, #8
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80051ec:	4b12      	ldr	r3, [pc, #72]	; (8005238 <HAL_InitTick+0x54>)
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	4b12      	ldr	r3, [pc, #72]	; (800523c <HAL_InitTick+0x58>)
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	4619      	mov	r1, r3
 80051f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80051fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80051fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005202:	4618      	mov	r0, r3
 8005204:	f000 f95b 	bl	80054be <HAL_SYSTICK_Config>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d001      	beq.n	8005212 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e00e      	b.n	8005230 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2b0f      	cmp	r3, #15
 8005216:	d80a      	bhi.n	800522e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005218:	2200      	movs	r2, #0
 800521a:	6879      	ldr	r1, [r7, #4]
 800521c:	f04f 30ff 	mov.w	r0, #4294967295
 8005220:	f000 f923 	bl	800546a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005224:	4a06      	ldr	r2, [pc, #24]	; (8005240 <HAL_InitTick+0x5c>)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800522a:	2300      	movs	r3, #0
 800522c:	e000      	b.n	8005230 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
}
 8005230:	4618      	mov	r0, r3
 8005232:	3708      	adds	r7, #8
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	200001a0 	.word	0x200001a0
 800523c:	200001dc 	.word	0x200001dc
 8005240:	200001d8 	.word	0x200001d8

08005244 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005244:	b480      	push	{r7}
 8005246:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005248:	4b05      	ldr	r3, [pc, #20]	; (8005260 <HAL_IncTick+0x1c>)
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	461a      	mov	r2, r3
 800524e:	4b05      	ldr	r3, [pc, #20]	; (8005264 <HAL_IncTick+0x20>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4413      	add	r3, r2
 8005254:	4a03      	ldr	r2, [pc, #12]	; (8005264 <HAL_IncTick+0x20>)
 8005256:	6013      	str	r3, [r2, #0]
}
 8005258:	bf00      	nop
 800525a:	46bd      	mov	sp, r7
 800525c:	bc80      	pop	{r7}
 800525e:	4770      	bx	lr
 8005260:	200001dc 	.word	0x200001dc
 8005264:	200021dc 	.word	0x200021dc

08005268 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005268:	b480      	push	{r7}
 800526a:	af00      	add	r7, sp, #0
  return uwTick;
 800526c:	4b02      	ldr	r3, [pc, #8]	; (8005278 <HAL_GetTick+0x10>)
 800526e:	681b      	ldr	r3, [r3, #0]
}
 8005270:	4618      	mov	r0, r3
 8005272:	46bd      	mov	sp, r7
 8005274:	bc80      	pop	{r7}
 8005276:	4770      	bx	lr
 8005278:	200021dc 	.word	0x200021dc

0800527c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005284:	f7ff fff0 	bl	8005268 <HAL_GetTick>
 8005288:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005294:	d005      	beq.n	80052a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005296:	4b0a      	ldr	r3, [pc, #40]	; (80052c0 <HAL_Delay+0x44>)
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	461a      	mov	r2, r3
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	4413      	add	r3, r2
 80052a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80052a2:	bf00      	nop
 80052a4:	f7ff ffe0 	bl	8005268 <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d8f7      	bhi.n	80052a4 <HAL_Delay+0x28>
  {
  }
}
 80052b4:	bf00      	nop
 80052b6:	bf00      	nop
 80052b8:	3710      	adds	r7, #16
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	200001dc 	.word	0x200001dc

080052c4 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f003 0307 	and.w	r3, r3, #7
 80052d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80052d4:	4b0c      	ldr	r3, [pc, #48]	; (8005308 <NVIC_SetPriorityGrouping+0x44>)
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80052da:	68ba      	ldr	r2, [r7, #8]
 80052dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80052e0:	4013      	ands	r3, r2
 80052e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80052ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80052f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80052f6:	4a04      	ldr	r2, [pc, #16]	; (8005308 <NVIC_SetPriorityGrouping+0x44>)
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	60d3      	str	r3, [r2, #12]
}
 80052fc:	bf00      	nop
 80052fe:	3714      	adds	r7, #20
 8005300:	46bd      	mov	sp, r7
 8005302:	bc80      	pop	{r7}
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop
 8005308:	e000ed00 	.word	0xe000ed00

0800530c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800530c:	b480      	push	{r7}
 800530e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005310:	4b04      	ldr	r3, [pc, #16]	; (8005324 <NVIC_GetPriorityGrouping+0x18>)
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	0a1b      	lsrs	r3, r3, #8
 8005316:	f003 0307 	and.w	r3, r3, #7
}
 800531a:	4618      	mov	r0, r3
 800531c:	46bd      	mov	sp, r7
 800531e:	bc80      	pop	{r7}
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	e000ed00 	.word	0xe000ed00

08005328 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	4603      	mov	r3, r0
 8005330:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8005332:	79fb      	ldrb	r3, [r7, #7]
 8005334:	f003 021f 	and.w	r2, r3, #31
 8005338:	4906      	ldr	r1, [pc, #24]	; (8005354 <NVIC_EnableIRQ+0x2c>)
 800533a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800533e:	095b      	lsrs	r3, r3, #5
 8005340:	2001      	movs	r0, #1
 8005342:	fa00 f202 	lsl.w	r2, r0, r2
 8005346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800534a:	bf00      	nop
 800534c:	370c      	adds	r7, #12
 800534e:	46bd      	mov	sp, r7
 8005350:	bc80      	pop	{r7}
 8005352:	4770      	bx	lr
 8005354:	e000e100 	.word	0xe000e100

08005358 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	4603      	mov	r3, r0
 8005360:	6039      	str	r1, [r7, #0]
 8005362:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8005364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005368:	2b00      	cmp	r3, #0
 800536a:	da0b      	bge.n	8005384 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	b2da      	uxtb	r2, r3
 8005370:	490c      	ldr	r1, [pc, #48]	; (80053a4 <NVIC_SetPriority+0x4c>)
 8005372:	79fb      	ldrb	r3, [r7, #7]
 8005374:	f003 030f 	and.w	r3, r3, #15
 8005378:	3b04      	subs	r3, #4
 800537a:	0112      	lsls	r2, r2, #4
 800537c:	b2d2      	uxtb	r2, r2
 800537e:	440b      	add	r3, r1
 8005380:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005382:	e009      	b.n	8005398 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	b2da      	uxtb	r2, r3
 8005388:	4907      	ldr	r1, [pc, #28]	; (80053a8 <NVIC_SetPriority+0x50>)
 800538a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800538e:	0112      	lsls	r2, r2, #4
 8005390:	b2d2      	uxtb	r2, r2
 8005392:	440b      	add	r3, r1
 8005394:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005398:	bf00      	nop
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	bc80      	pop	{r7}
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop
 80053a4:	e000ed00 	.word	0xe000ed00
 80053a8:	e000e100 	.word	0xe000e100

080053ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b089      	sub	sp, #36	; 0x24
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f003 0307 	and.w	r3, r3, #7
 80053be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	f1c3 0307 	rsb	r3, r3, #7
 80053c6:	2b04      	cmp	r3, #4
 80053c8:	bf28      	it	cs
 80053ca:	2304      	movcs	r3, #4
 80053cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	3304      	adds	r3, #4
 80053d2:	2b06      	cmp	r3, #6
 80053d4:	d902      	bls.n	80053dc <NVIC_EncodePriority+0x30>
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	3b03      	subs	r3, #3
 80053da:	e000      	b.n	80053de <NVIC_EncodePriority+0x32>
 80053dc:	2300      	movs	r3, #0
 80053de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053e0:	f04f 32ff 	mov.w	r2, #4294967295
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	fa02 f303 	lsl.w	r3, r2, r3
 80053ea:	43da      	mvns	r2, r3
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	401a      	ands	r2, r3
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80053f4:	f04f 31ff 	mov.w	r1, #4294967295
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	fa01 f303 	lsl.w	r3, r1, r3
 80053fe:	43d9      	mvns	r1, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005404:	4313      	orrs	r3, r2
         );
}
 8005406:	4618      	mov	r0, r3
 8005408:	3724      	adds	r7, #36	; 0x24
 800540a:	46bd      	mov	sp, r7
 800540c:	bc80      	pop	{r7}
 800540e:	4770      	bx	lr

08005410 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	3b01      	subs	r3, #1
 800541c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005420:	d301      	bcc.n	8005426 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005422:	2301      	movs	r3, #1
 8005424:	e00f      	b.n	8005446 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005426:	4a0a      	ldr	r2, [pc, #40]	; (8005450 <SysTick_Config+0x40>)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	3b01      	subs	r3, #1
 800542c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800542e:	210f      	movs	r1, #15
 8005430:	f04f 30ff 	mov.w	r0, #4294967295
 8005434:	f7ff ff90 	bl	8005358 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005438:	4b05      	ldr	r3, [pc, #20]	; (8005450 <SysTick_Config+0x40>)
 800543a:	2200      	movs	r2, #0
 800543c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800543e:	4b04      	ldr	r3, [pc, #16]	; (8005450 <SysTick_Config+0x40>)
 8005440:	2207      	movs	r2, #7
 8005442:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3708      	adds	r7, #8
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	e000e010 	.word	0xe000e010

08005454 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b082      	sub	sp, #8
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f7ff ff31 	bl	80052c4 <NVIC_SetPriorityGrouping>
}
 8005462:	bf00      	nop
 8005464:	3708      	adds	r7, #8
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}

0800546a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800546a:	b580      	push	{r7, lr}
 800546c:	b086      	sub	sp, #24
 800546e:	af00      	add	r7, sp, #0
 8005470:	4603      	mov	r3, r0
 8005472:	60b9      	str	r1, [r7, #8]
 8005474:	607a      	str	r2, [r7, #4]
 8005476:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005478:	2300      	movs	r3, #0
 800547a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800547c:	f7ff ff46 	bl	800530c <NVIC_GetPriorityGrouping>
 8005480:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	68b9      	ldr	r1, [r7, #8]
 8005486:	6978      	ldr	r0, [r7, #20]
 8005488:	f7ff ff90 	bl	80053ac <NVIC_EncodePriority>
 800548c:	4602      	mov	r2, r0
 800548e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005492:	4611      	mov	r1, r2
 8005494:	4618      	mov	r0, r3
 8005496:	f7ff ff5f 	bl	8005358 <NVIC_SetPriority>
}
 800549a:	bf00      	nop
 800549c:	3718      	adds	r7, #24
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}

080054a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b082      	sub	sp, #8
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	4603      	mov	r3, r0
 80054aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80054ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054b0:	4618      	mov	r0, r3
 80054b2:	f7ff ff39 	bl	8005328 <NVIC_EnableIRQ>
}
 80054b6:	bf00      	nop
 80054b8:	3708      	adds	r7, #8
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80054be:	b580      	push	{r7, lr}
 80054c0:	b082      	sub	sp, #8
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f7ff ffa2 	bl	8005410 <SysTick_Config>
 80054cc:	4603      	mov	r3, r0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3708      	adds	r7, #8
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
	...

080054d8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80054d8:	b480      	push	{r7}
 80054da:	b085      	sub	sp, #20
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80054e0:	2300      	movs	r3, #0
 80054e2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d101      	bne.n	80054ee <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e059      	b.n	80055a2 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (STM32F101xE) || defined (STM32F101xG) || defined (STM32F103xE) || defined (STM32F103xG) || defined (STM32F100xE) || defined (STM32F105xC) || defined (STM32F107xC)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	461a      	mov	r2, r3
 80054f4:	4b2d      	ldr	r3, [pc, #180]	; (80055ac <HAL_DMA_Init+0xd4>)
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d80f      	bhi.n	800551a <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	461a      	mov	r2, r3
 8005500:	4b2b      	ldr	r3, [pc, #172]	; (80055b0 <HAL_DMA_Init+0xd8>)
 8005502:	4413      	add	r3, r2
 8005504:	4a2b      	ldr	r2, [pc, #172]	; (80055b4 <HAL_DMA_Init+0xdc>)
 8005506:	fba2 2303 	umull	r2, r3, r2, r3
 800550a:	091b      	lsrs	r3, r3, #4
 800550c:	009a      	lsls	r2, r3, #2
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a28      	ldr	r2, [pc, #160]	; (80055b8 <HAL_DMA_Init+0xe0>)
 8005516:	63da      	str	r2, [r3, #60]	; 0x3c
 8005518:	e00e      	b.n	8005538 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	461a      	mov	r2, r3
 8005520:	4b26      	ldr	r3, [pc, #152]	; (80055bc <HAL_DMA_Init+0xe4>)
 8005522:	4413      	add	r3, r2
 8005524:	4a23      	ldr	r2, [pc, #140]	; (80055b4 <HAL_DMA_Init+0xdc>)
 8005526:	fba2 2303 	umull	r2, r3, r2, r3
 800552a:	091b      	lsrs	r3, r3, #4
 800552c:	009a      	lsls	r2, r3, #2
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a22      	ldr	r2, [pc, #136]	; (80055c0 <HAL_DMA_Init+0xe8>)
 8005536:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG || STM32F100xE || STM32F105xC || STM32F107xC */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2202      	movs	r2, #2
 800553c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800554e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005552:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800555c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005568:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	695b      	ldr	r3, [r3, #20]
 800556e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005574:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	69db      	ldr	r3, [r3, #28]
 800557a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800557c:	68fa      	ldr	r2, [r7, #12]
 800557e:	4313      	orrs	r3, r2
 8005580:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3714      	adds	r7, #20
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bc80      	pop	{r7}
 80055aa:	4770      	bx	lr
 80055ac:	40020407 	.word	0x40020407
 80055b0:	bffdfff8 	.word	0xbffdfff8
 80055b4:	cccccccd 	.word	0xcccccccd
 80055b8:	40020000 	.word	0x40020000
 80055bc:	bffdfbf8 	.word	0xbffdfbf8
 80055c0:	40020400 	.word	0x40020400

080055c4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b085      	sub	sp, #20
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055cc:	2300      	movs	r3, #0
 80055ce:	73fb      	strb	r3, [r7, #15]

  /* Disable DMA IT */
  __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f022 020e 	bic.w	r2, r2, #14
 80055de:	601a      	str	r2, [r3, #0]
    
  /* Disable the channel */
  __HAL_DMA_DISABLE(hdma);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f022 0201 	bic.w	r2, r2, #1
 80055ee:	601a      	str	r2, [r3, #0]
    
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055f8:	2101      	movs	r1, #1
 80055fa:	fa01 f202 	lsl.w	r2, r1, r2
 80055fe:	605a      	str	r2, [r3, #4]

  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8005610:	7bfb      	ldrb	r3, [r7, #15]
}
 8005612:	4618      	mov	r0, r3
 8005614:	3714      	adds	r7, #20
 8005616:	46bd      	mov	sp, r7
 8005618:	bc80      	pop	{r7}
 800561a:	4770      	bx	lr

0800561c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005624:	2300      	movs	r3, #0
 8005626:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800562e:	2b02      	cmp	r3, #2
 8005630:	d005      	beq.n	800563e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2204      	movs	r2, #4
 8005636:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	73fb      	strb	r3, [r7, #15]
 800563c:	e0d6      	b.n	80057ec <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f022 020e 	bic.w	r2, r2, #14
 800564c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f022 0201 	bic.w	r2, r2, #1
 800565c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	461a      	mov	r2, r3
 8005664:	4b64      	ldr	r3, [pc, #400]	; (80057f8 <HAL_DMA_Abort_IT+0x1dc>)
 8005666:	429a      	cmp	r2, r3
 8005668:	d958      	bls.n	800571c <HAL_DMA_Abort_IT+0x100>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a63      	ldr	r2, [pc, #396]	; (80057fc <HAL_DMA_Abort_IT+0x1e0>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d04f      	beq.n	8005714 <HAL_DMA_Abort_IT+0xf8>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a61      	ldr	r2, [pc, #388]	; (8005800 <HAL_DMA_Abort_IT+0x1e4>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d048      	beq.n	8005710 <HAL_DMA_Abort_IT+0xf4>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a60      	ldr	r2, [pc, #384]	; (8005804 <HAL_DMA_Abort_IT+0x1e8>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d040      	beq.n	800570a <HAL_DMA_Abort_IT+0xee>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a5e      	ldr	r2, [pc, #376]	; (8005808 <HAL_DMA_Abort_IT+0x1ec>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d038      	beq.n	8005704 <HAL_DMA_Abort_IT+0xe8>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a5d      	ldr	r2, [pc, #372]	; (800580c <HAL_DMA_Abort_IT+0x1f0>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d030      	beq.n	80056fe <HAL_DMA_Abort_IT+0xe2>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a5b      	ldr	r2, [pc, #364]	; (8005810 <HAL_DMA_Abort_IT+0x1f4>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d028      	beq.n	80056f8 <HAL_DMA_Abort_IT+0xdc>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a53      	ldr	r2, [pc, #332]	; (80057f8 <HAL_DMA_Abort_IT+0x1dc>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d020      	beq.n	80056f2 <HAL_DMA_Abort_IT+0xd6>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a57      	ldr	r2, [pc, #348]	; (8005814 <HAL_DMA_Abort_IT+0x1f8>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d019      	beq.n	80056ee <HAL_DMA_Abort_IT+0xd2>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a56      	ldr	r2, [pc, #344]	; (8005818 <HAL_DMA_Abort_IT+0x1fc>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d012      	beq.n	80056ea <HAL_DMA_Abort_IT+0xce>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a54      	ldr	r2, [pc, #336]	; (800581c <HAL_DMA_Abort_IT+0x200>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d00a      	beq.n	80056e4 <HAL_DMA_Abort_IT+0xc8>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a53      	ldr	r2, [pc, #332]	; (8005820 <HAL_DMA_Abort_IT+0x204>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d102      	bne.n	80056de <HAL_DMA_Abort_IT+0xc2>
 80056d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056dc:	e01b      	b.n	8005716 <HAL_DMA_Abort_IT+0xfa>
 80056de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80056e2:	e018      	b.n	8005716 <HAL_DMA_Abort_IT+0xfa>
 80056e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80056e8:	e015      	b.n	8005716 <HAL_DMA_Abort_IT+0xfa>
 80056ea:	2310      	movs	r3, #16
 80056ec:	e013      	b.n	8005716 <HAL_DMA_Abort_IT+0xfa>
 80056ee:	2301      	movs	r3, #1
 80056f0:	e011      	b.n	8005716 <HAL_DMA_Abort_IT+0xfa>
 80056f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80056f6:	e00e      	b.n	8005716 <HAL_DMA_Abort_IT+0xfa>
 80056f8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80056fc:	e00b      	b.n	8005716 <HAL_DMA_Abort_IT+0xfa>
 80056fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005702:	e008      	b.n	8005716 <HAL_DMA_Abort_IT+0xfa>
 8005704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005708:	e005      	b.n	8005716 <HAL_DMA_Abort_IT+0xfa>
 800570a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800570e:	e002      	b.n	8005716 <HAL_DMA_Abort_IT+0xfa>
 8005710:	2310      	movs	r3, #16
 8005712:	e000      	b.n	8005716 <HAL_DMA_Abort_IT+0xfa>
 8005714:	2301      	movs	r3, #1
 8005716:	4a43      	ldr	r2, [pc, #268]	; (8005824 <HAL_DMA_Abort_IT+0x208>)
 8005718:	6053      	str	r3, [r2, #4]
 800571a:	e057      	b.n	80057cc <HAL_DMA_Abort_IT+0x1b0>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a36      	ldr	r2, [pc, #216]	; (80057fc <HAL_DMA_Abort_IT+0x1e0>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d04f      	beq.n	80057c6 <HAL_DMA_Abort_IT+0x1aa>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a35      	ldr	r2, [pc, #212]	; (8005800 <HAL_DMA_Abort_IT+0x1e4>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d048      	beq.n	80057c2 <HAL_DMA_Abort_IT+0x1a6>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a33      	ldr	r2, [pc, #204]	; (8005804 <HAL_DMA_Abort_IT+0x1e8>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d040      	beq.n	80057bc <HAL_DMA_Abort_IT+0x1a0>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a32      	ldr	r2, [pc, #200]	; (8005808 <HAL_DMA_Abort_IT+0x1ec>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d038      	beq.n	80057b6 <HAL_DMA_Abort_IT+0x19a>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a30      	ldr	r2, [pc, #192]	; (800580c <HAL_DMA_Abort_IT+0x1f0>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d030      	beq.n	80057b0 <HAL_DMA_Abort_IT+0x194>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a2f      	ldr	r2, [pc, #188]	; (8005810 <HAL_DMA_Abort_IT+0x1f4>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d028      	beq.n	80057aa <HAL_DMA_Abort_IT+0x18e>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a26      	ldr	r2, [pc, #152]	; (80057f8 <HAL_DMA_Abort_IT+0x1dc>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d020      	beq.n	80057a4 <HAL_DMA_Abort_IT+0x188>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a2b      	ldr	r2, [pc, #172]	; (8005814 <HAL_DMA_Abort_IT+0x1f8>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d019      	beq.n	80057a0 <HAL_DMA_Abort_IT+0x184>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a29      	ldr	r2, [pc, #164]	; (8005818 <HAL_DMA_Abort_IT+0x1fc>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d012      	beq.n	800579c <HAL_DMA_Abort_IT+0x180>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a28      	ldr	r2, [pc, #160]	; (800581c <HAL_DMA_Abort_IT+0x200>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d00a      	beq.n	8005796 <HAL_DMA_Abort_IT+0x17a>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a26      	ldr	r2, [pc, #152]	; (8005820 <HAL_DMA_Abort_IT+0x204>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d102      	bne.n	8005790 <HAL_DMA_Abort_IT+0x174>
 800578a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800578e:	e01b      	b.n	80057c8 <HAL_DMA_Abort_IT+0x1ac>
 8005790:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005794:	e018      	b.n	80057c8 <HAL_DMA_Abort_IT+0x1ac>
 8005796:	f44f 7380 	mov.w	r3, #256	; 0x100
 800579a:	e015      	b.n	80057c8 <HAL_DMA_Abort_IT+0x1ac>
 800579c:	2310      	movs	r3, #16
 800579e:	e013      	b.n	80057c8 <HAL_DMA_Abort_IT+0x1ac>
 80057a0:	2301      	movs	r3, #1
 80057a2:	e011      	b.n	80057c8 <HAL_DMA_Abort_IT+0x1ac>
 80057a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80057a8:	e00e      	b.n	80057c8 <HAL_DMA_Abort_IT+0x1ac>
 80057aa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80057ae:	e00b      	b.n	80057c8 <HAL_DMA_Abort_IT+0x1ac>
 80057b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80057b4:	e008      	b.n	80057c8 <HAL_DMA_Abort_IT+0x1ac>
 80057b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057ba:	e005      	b.n	80057c8 <HAL_DMA_Abort_IT+0x1ac>
 80057bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057c0:	e002      	b.n	80057c8 <HAL_DMA_Abort_IT+0x1ac>
 80057c2:	2310      	movs	r3, #16
 80057c4:	e000      	b.n	80057c8 <HAL_DMA_Abort_IT+0x1ac>
 80057c6:	2301      	movs	r3, #1
 80057c8:	4a17      	ldr	r2, [pc, #92]	; (8005828 <HAL_DMA_Abort_IT+0x20c>)
 80057ca:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d003      	beq.n	80057ec <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	4798      	blx	r3
    } 
  }
  return status;
 80057ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3710      	adds	r7, #16
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	40020080 	.word	0x40020080
 80057fc:	40020008 	.word	0x40020008
 8005800:	4002001c 	.word	0x4002001c
 8005804:	40020030 	.word	0x40020030
 8005808:	40020044 	.word	0x40020044
 800580c:	40020058 	.word	0x40020058
 8005810:	4002006c 	.word	0x4002006c
 8005814:	40020408 	.word	0x40020408
 8005818:	4002041c 	.word	0x4002041c
 800581c:	40020430 	.word	0x40020430
 8005820:	40020444 	.word	0x40020444
 8005824:	40020400 	.word	0x40020400
 8005828:	40020000 	.word	0x40020000

0800582c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005848:	2204      	movs	r2, #4
 800584a:	409a      	lsls	r2, r3
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	4013      	ands	r3, r2
 8005850:	2b00      	cmp	r3, #0
 8005852:	f000 80f1 	beq.w	8005a38 <HAL_DMA_IRQHandler+0x20c>
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	f003 0304 	and.w	r3, r3, #4
 800585c:	2b00      	cmp	r3, #0
 800585e:	f000 80eb 	beq.w	8005a38 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 0320 	and.w	r3, r3, #32
 800586c:	2b00      	cmp	r3, #0
 800586e:	d107      	bne.n	8005880 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f022 0204 	bic.w	r2, r2, #4
 800587e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	461a      	mov	r2, r3
 8005886:	4b5f      	ldr	r3, [pc, #380]	; (8005a04 <HAL_DMA_IRQHandler+0x1d8>)
 8005888:	429a      	cmp	r2, r3
 800588a:	d958      	bls.n	800593e <HAL_DMA_IRQHandler+0x112>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a5d      	ldr	r2, [pc, #372]	; (8005a08 <HAL_DMA_IRQHandler+0x1dc>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d04f      	beq.n	8005936 <HAL_DMA_IRQHandler+0x10a>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a5c      	ldr	r2, [pc, #368]	; (8005a0c <HAL_DMA_IRQHandler+0x1e0>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d048      	beq.n	8005932 <HAL_DMA_IRQHandler+0x106>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a5a      	ldr	r2, [pc, #360]	; (8005a10 <HAL_DMA_IRQHandler+0x1e4>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d040      	beq.n	800592c <HAL_DMA_IRQHandler+0x100>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a59      	ldr	r2, [pc, #356]	; (8005a14 <HAL_DMA_IRQHandler+0x1e8>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d038      	beq.n	8005926 <HAL_DMA_IRQHandler+0xfa>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a57      	ldr	r2, [pc, #348]	; (8005a18 <HAL_DMA_IRQHandler+0x1ec>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d030      	beq.n	8005920 <HAL_DMA_IRQHandler+0xf4>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a56      	ldr	r2, [pc, #344]	; (8005a1c <HAL_DMA_IRQHandler+0x1f0>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d028      	beq.n	800591a <HAL_DMA_IRQHandler+0xee>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a4d      	ldr	r2, [pc, #308]	; (8005a04 <HAL_DMA_IRQHandler+0x1d8>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d020      	beq.n	8005914 <HAL_DMA_IRQHandler+0xe8>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a52      	ldr	r2, [pc, #328]	; (8005a20 <HAL_DMA_IRQHandler+0x1f4>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d019      	beq.n	8005910 <HAL_DMA_IRQHandler+0xe4>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a50      	ldr	r2, [pc, #320]	; (8005a24 <HAL_DMA_IRQHandler+0x1f8>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d012      	beq.n	800590c <HAL_DMA_IRQHandler+0xe0>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a4f      	ldr	r2, [pc, #316]	; (8005a28 <HAL_DMA_IRQHandler+0x1fc>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d00a      	beq.n	8005906 <HAL_DMA_IRQHandler+0xda>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a4d      	ldr	r2, [pc, #308]	; (8005a2c <HAL_DMA_IRQHandler+0x200>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d102      	bne.n	8005900 <HAL_DMA_IRQHandler+0xd4>
 80058fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80058fe:	e01b      	b.n	8005938 <HAL_DMA_IRQHandler+0x10c>
 8005900:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005904:	e018      	b.n	8005938 <HAL_DMA_IRQHandler+0x10c>
 8005906:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800590a:	e015      	b.n	8005938 <HAL_DMA_IRQHandler+0x10c>
 800590c:	2340      	movs	r3, #64	; 0x40
 800590e:	e013      	b.n	8005938 <HAL_DMA_IRQHandler+0x10c>
 8005910:	2304      	movs	r3, #4
 8005912:	e011      	b.n	8005938 <HAL_DMA_IRQHandler+0x10c>
 8005914:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005918:	e00e      	b.n	8005938 <HAL_DMA_IRQHandler+0x10c>
 800591a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800591e:	e00b      	b.n	8005938 <HAL_DMA_IRQHandler+0x10c>
 8005920:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005924:	e008      	b.n	8005938 <HAL_DMA_IRQHandler+0x10c>
 8005926:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800592a:	e005      	b.n	8005938 <HAL_DMA_IRQHandler+0x10c>
 800592c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005930:	e002      	b.n	8005938 <HAL_DMA_IRQHandler+0x10c>
 8005932:	2340      	movs	r3, #64	; 0x40
 8005934:	e000      	b.n	8005938 <HAL_DMA_IRQHandler+0x10c>
 8005936:	2304      	movs	r3, #4
 8005938:	4a3d      	ldr	r2, [pc, #244]	; (8005a30 <HAL_DMA_IRQHandler+0x204>)
 800593a:	6053      	str	r3, [r2, #4]
 800593c:	e057      	b.n	80059ee <HAL_DMA_IRQHandler+0x1c2>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a31      	ldr	r2, [pc, #196]	; (8005a08 <HAL_DMA_IRQHandler+0x1dc>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d04f      	beq.n	80059e8 <HAL_DMA_IRQHandler+0x1bc>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a2f      	ldr	r2, [pc, #188]	; (8005a0c <HAL_DMA_IRQHandler+0x1e0>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d048      	beq.n	80059e4 <HAL_DMA_IRQHandler+0x1b8>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a2e      	ldr	r2, [pc, #184]	; (8005a10 <HAL_DMA_IRQHandler+0x1e4>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d040      	beq.n	80059de <HAL_DMA_IRQHandler+0x1b2>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a2c      	ldr	r2, [pc, #176]	; (8005a14 <HAL_DMA_IRQHandler+0x1e8>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d038      	beq.n	80059d8 <HAL_DMA_IRQHandler+0x1ac>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a2b      	ldr	r2, [pc, #172]	; (8005a18 <HAL_DMA_IRQHandler+0x1ec>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d030      	beq.n	80059d2 <HAL_DMA_IRQHandler+0x1a6>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a29      	ldr	r2, [pc, #164]	; (8005a1c <HAL_DMA_IRQHandler+0x1f0>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d028      	beq.n	80059cc <HAL_DMA_IRQHandler+0x1a0>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a21      	ldr	r2, [pc, #132]	; (8005a04 <HAL_DMA_IRQHandler+0x1d8>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d020      	beq.n	80059c6 <HAL_DMA_IRQHandler+0x19a>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a25      	ldr	r2, [pc, #148]	; (8005a20 <HAL_DMA_IRQHandler+0x1f4>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d019      	beq.n	80059c2 <HAL_DMA_IRQHandler+0x196>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a24      	ldr	r2, [pc, #144]	; (8005a24 <HAL_DMA_IRQHandler+0x1f8>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d012      	beq.n	80059be <HAL_DMA_IRQHandler+0x192>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a22      	ldr	r2, [pc, #136]	; (8005a28 <HAL_DMA_IRQHandler+0x1fc>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d00a      	beq.n	80059b8 <HAL_DMA_IRQHandler+0x18c>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a21      	ldr	r2, [pc, #132]	; (8005a2c <HAL_DMA_IRQHandler+0x200>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d102      	bne.n	80059b2 <HAL_DMA_IRQHandler+0x186>
 80059ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80059b0:	e01b      	b.n	80059ea <HAL_DMA_IRQHandler+0x1be>
 80059b2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80059b6:	e018      	b.n	80059ea <HAL_DMA_IRQHandler+0x1be>
 80059b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059bc:	e015      	b.n	80059ea <HAL_DMA_IRQHandler+0x1be>
 80059be:	2340      	movs	r3, #64	; 0x40
 80059c0:	e013      	b.n	80059ea <HAL_DMA_IRQHandler+0x1be>
 80059c2:	2304      	movs	r3, #4
 80059c4:	e011      	b.n	80059ea <HAL_DMA_IRQHandler+0x1be>
 80059c6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80059ca:	e00e      	b.n	80059ea <HAL_DMA_IRQHandler+0x1be>
 80059cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80059d0:	e00b      	b.n	80059ea <HAL_DMA_IRQHandler+0x1be>
 80059d2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80059d6:	e008      	b.n	80059ea <HAL_DMA_IRQHandler+0x1be>
 80059d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80059dc:	e005      	b.n	80059ea <HAL_DMA_IRQHandler+0x1be>
 80059de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059e2:	e002      	b.n	80059ea <HAL_DMA_IRQHandler+0x1be>
 80059e4:	2340      	movs	r3, #64	; 0x40
 80059e6:	e000      	b.n	80059ea <HAL_DMA_IRQHandler+0x1be>
 80059e8:	2304      	movs	r3, #4
 80059ea:	4a12      	ldr	r2, [pc, #72]	; (8005a34 <HAL_DMA_IRQHandler+0x208>)
 80059ec:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	f000 8136 	beq.w	8005c64 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8005a00:	e130      	b.n	8005c64 <HAL_DMA_IRQHandler+0x438>
 8005a02:	bf00      	nop
 8005a04:	40020080 	.word	0x40020080
 8005a08:	40020008 	.word	0x40020008
 8005a0c:	4002001c 	.word	0x4002001c
 8005a10:	40020030 	.word	0x40020030
 8005a14:	40020044 	.word	0x40020044
 8005a18:	40020058 	.word	0x40020058
 8005a1c:	4002006c 	.word	0x4002006c
 8005a20:	40020408 	.word	0x40020408
 8005a24:	4002041c 	.word	0x4002041c
 8005a28:	40020430 	.word	0x40020430
 8005a2c:	40020444 	.word	0x40020444
 8005a30:	40020400 	.word	0x40020400
 8005a34:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3c:	2202      	movs	r2, #2
 8005a3e:	409a      	lsls	r2, r3
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	4013      	ands	r3, r2
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	f000 80dd 	beq.w	8005c04 <HAL_DMA_IRQHandler+0x3d8>
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	f003 0302 	and.w	r3, r3, #2
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f000 80d7 	beq.w	8005c04 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0320 	and.w	r3, r3, #32
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d10b      	bne.n	8005a7c <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f022 020a 	bic.w	r2, r2, #10
 8005a72:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	461a      	mov	r2, r3
 8005a82:	4b7b      	ldr	r3, [pc, #492]	; (8005c70 <HAL_DMA_IRQHandler+0x444>)
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d958      	bls.n	8005b3a <HAL_DMA_IRQHandler+0x30e>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a79      	ldr	r2, [pc, #484]	; (8005c74 <HAL_DMA_IRQHandler+0x448>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d04f      	beq.n	8005b32 <HAL_DMA_IRQHandler+0x306>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a78      	ldr	r2, [pc, #480]	; (8005c78 <HAL_DMA_IRQHandler+0x44c>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d048      	beq.n	8005b2e <HAL_DMA_IRQHandler+0x302>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a76      	ldr	r2, [pc, #472]	; (8005c7c <HAL_DMA_IRQHandler+0x450>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d040      	beq.n	8005b28 <HAL_DMA_IRQHandler+0x2fc>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a75      	ldr	r2, [pc, #468]	; (8005c80 <HAL_DMA_IRQHandler+0x454>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d038      	beq.n	8005b22 <HAL_DMA_IRQHandler+0x2f6>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a73      	ldr	r2, [pc, #460]	; (8005c84 <HAL_DMA_IRQHandler+0x458>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d030      	beq.n	8005b1c <HAL_DMA_IRQHandler+0x2f0>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a72      	ldr	r2, [pc, #456]	; (8005c88 <HAL_DMA_IRQHandler+0x45c>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d028      	beq.n	8005b16 <HAL_DMA_IRQHandler+0x2ea>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a69      	ldr	r2, [pc, #420]	; (8005c70 <HAL_DMA_IRQHandler+0x444>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d020      	beq.n	8005b10 <HAL_DMA_IRQHandler+0x2e4>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a6e      	ldr	r2, [pc, #440]	; (8005c8c <HAL_DMA_IRQHandler+0x460>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d019      	beq.n	8005b0c <HAL_DMA_IRQHandler+0x2e0>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a6c      	ldr	r2, [pc, #432]	; (8005c90 <HAL_DMA_IRQHandler+0x464>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d012      	beq.n	8005b08 <HAL_DMA_IRQHandler+0x2dc>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a6b      	ldr	r2, [pc, #428]	; (8005c94 <HAL_DMA_IRQHandler+0x468>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d00a      	beq.n	8005b02 <HAL_DMA_IRQHandler+0x2d6>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a69      	ldr	r2, [pc, #420]	; (8005c98 <HAL_DMA_IRQHandler+0x46c>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d102      	bne.n	8005afc <HAL_DMA_IRQHandler+0x2d0>
 8005af6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005afa:	e01b      	b.n	8005b34 <HAL_DMA_IRQHandler+0x308>
 8005afc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005b00:	e018      	b.n	8005b34 <HAL_DMA_IRQHandler+0x308>
 8005b02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b06:	e015      	b.n	8005b34 <HAL_DMA_IRQHandler+0x308>
 8005b08:	2320      	movs	r3, #32
 8005b0a:	e013      	b.n	8005b34 <HAL_DMA_IRQHandler+0x308>
 8005b0c:	2302      	movs	r3, #2
 8005b0e:	e011      	b.n	8005b34 <HAL_DMA_IRQHandler+0x308>
 8005b10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b14:	e00e      	b.n	8005b34 <HAL_DMA_IRQHandler+0x308>
 8005b16:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005b1a:	e00b      	b.n	8005b34 <HAL_DMA_IRQHandler+0x308>
 8005b1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005b20:	e008      	b.n	8005b34 <HAL_DMA_IRQHandler+0x308>
 8005b22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005b26:	e005      	b.n	8005b34 <HAL_DMA_IRQHandler+0x308>
 8005b28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b2c:	e002      	b.n	8005b34 <HAL_DMA_IRQHandler+0x308>
 8005b2e:	2320      	movs	r3, #32
 8005b30:	e000      	b.n	8005b34 <HAL_DMA_IRQHandler+0x308>
 8005b32:	2302      	movs	r3, #2
 8005b34:	4a59      	ldr	r2, [pc, #356]	; (8005c9c <HAL_DMA_IRQHandler+0x470>)
 8005b36:	6053      	str	r3, [r2, #4]
 8005b38:	e057      	b.n	8005bea <HAL_DMA_IRQHandler+0x3be>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a4d      	ldr	r2, [pc, #308]	; (8005c74 <HAL_DMA_IRQHandler+0x448>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d04f      	beq.n	8005be4 <HAL_DMA_IRQHandler+0x3b8>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a4b      	ldr	r2, [pc, #300]	; (8005c78 <HAL_DMA_IRQHandler+0x44c>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d048      	beq.n	8005be0 <HAL_DMA_IRQHandler+0x3b4>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a4a      	ldr	r2, [pc, #296]	; (8005c7c <HAL_DMA_IRQHandler+0x450>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d040      	beq.n	8005bda <HAL_DMA_IRQHandler+0x3ae>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a48      	ldr	r2, [pc, #288]	; (8005c80 <HAL_DMA_IRQHandler+0x454>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d038      	beq.n	8005bd4 <HAL_DMA_IRQHandler+0x3a8>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a47      	ldr	r2, [pc, #284]	; (8005c84 <HAL_DMA_IRQHandler+0x458>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d030      	beq.n	8005bce <HAL_DMA_IRQHandler+0x3a2>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a45      	ldr	r2, [pc, #276]	; (8005c88 <HAL_DMA_IRQHandler+0x45c>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d028      	beq.n	8005bc8 <HAL_DMA_IRQHandler+0x39c>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a3d      	ldr	r2, [pc, #244]	; (8005c70 <HAL_DMA_IRQHandler+0x444>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d020      	beq.n	8005bc2 <HAL_DMA_IRQHandler+0x396>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a41      	ldr	r2, [pc, #260]	; (8005c8c <HAL_DMA_IRQHandler+0x460>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d019      	beq.n	8005bbe <HAL_DMA_IRQHandler+0x392>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a40      	ldr	r2, [pc, #256]	; (8005c90 <HAL_DMA_IRQHandler+0x464>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d012      	beq.n	8005bba <HAL_DMA_IRQHandler+0x38e>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a3e      	ldr	r2, [pc, #248]	; (8005c94 <HAL_DMA_IRQHandler+0x468>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d00a      	beq.n	8005bb4 <HAL_DMA_IRQHandler+0x388>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a3d      	ldr	r2, [pc, #244]	; (8005c98 <HAL_DMA_IRQHandler+0x46c>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d102      	bne.n	8005bae <HAL_DMA_IRQHandler+0x382>
 8005ba8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005bac:	e01b      	b.n	8005be6 <HAL_DMA_IRQHandler+0x3ba>
 8005bae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005bb2:	e018      	b.n	8005be6 <HAL_DMA_IRQHandler+0x3ba>
 8005bb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005bb8:	e015      	b.n	8005be6 <HAL_DMA_IRQHandler+0x3ba>
 8005bba:	2320      	movs	r3, #32
 8005bbc:	e013      	b.n	8005be6 <HAL_DMA_IRQHandler+0x3ba>
 8005bbe:	2302      	movs	r3, #2
 8005bc0:	e011      	b.n	8005be6 <HAL_DMA_IRQHandler+0x3ba>
 8005bc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005bc6:	e00e      	b.n	8005be6 <HAL_DMA_IRQHandler+0x3ba>
 8005bc8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005bcc:	e00b      	b.n	8005be6 <HAL_DMA_IRQHandler+0x3ba>
 8005bce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005bd2:	e008      	b.n	8005be6 <HAL_DMA_IRQHandler+0x3ba>
 8005bd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005bd8:	e005      	b.n	8005be6 <HAL_DMA_IRQHandler+0x3ba>
 8005bda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005bde:	e002      	b.n	8005be6 <HAL_DMA_IRQHandler+0x3ba>
 8005be0:	2320      	movs	r3, #32
 8005be2:	e000      	b.n	8005be6 <HAL_DMA_IRQHandler+0x3ba>
 8005be4:	2302      	movs	r3, #2
 8005be6:	4a2e      	ldr	r2, [pc, #184]	; (8005ca0 <HAL_DMA_IRQHandler+0x474>)
 8005be8:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d034      	beq.n	8005c64 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005c02:	e02f      	b.n	8005c64 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c08:	2208      	movs	r2, #8
 8005c0a:	409a      	lsls	r2, r3
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	4013      	ands	r3, r2
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d028      	beq.n	8005c66 <HAL_DMA_IRQHandler+0x43a>
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	f003 0308 	and.w	r3, r3, #8
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d023      	beq.n	8005c66 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f022 020e 	bic.w	r2, r2, #14
 8005c2c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c36:	2101      	movs	r1, #1
 8005c38:	fa01 f202 	lsl.w	r2, r1, r2
 8005c3c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2201      	movs	r2, #1
 8005c42:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d004      	beq.n	8005c66 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	4798      	blx	r3
    }
  }
  return;
 8005c64:	bf00      	nop
 8005c66:	bf00      	nop
}
 8005c68:	3710      	adds	r7, #16
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	40020080 	.word	0x40020080
 8005c74:	40020008 	.word	0x40020008
 8005c78:	4002001c 	.word	0x4002001c
 8005c7c:	40020030 	.word	0x40020030
 8005c80:	40020044 	.word	0x40020044
 8005c84:	40020058 	.word	0x40020058
 8005c88:	4002006c 	.word	0x4002006c
 8005c8c:	40020408 	.word	0x40020408
 8005c90:	4002041c 	.word	0x4002041c
 8005c94:	40020430 	.word	0x40020430
 8005c98:	40020444 	.word	0x40020444
 8005c9c:	40020400 	.word	0x40020400
 8005ca0:	40020000 	.word	0x40020000

08005ca4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b08b      	sub	sp, #44	; 0x2c
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8005cc6:	e179      	b.n	8005fbc <HAL_GPIO_Init+0x318>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8005cc8:	2201      	movs	r2, #1
 8005cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	69fa      	ldr	r2, [r7, #28]
 8005cd8:	4013      	ands	r3, r2
 8005cda:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005cdc:	69ba      	ldr	r2, [r7, #24]
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	f040 8168 	bne.w	8005fb6 <HAL_GPIO_Init+0x312>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	4a96      	ldr	r2, [pc, #600]	; (8005f44 <HAL_GPIO_Init+0x2a0>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d05e      	beq.n	8005dae <HAL_GPIO_Init+0x10a>
 8005cf0:	4a94      	ldr	r2, [pc, #592]	; (8005f44 <HAL_GPIO_Init+0x2a0>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d875      	bhi.n	8005de2 <HAL_GPIO_Init+0x13e>
 8005cf6:	4a94      	ldr	r2, [pc, #592]	; (8005f48 <HAL_GPIO_Init+0x2a4>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d058      	beq.n	8005dae <HAL_GPIO_Init+0x10a>
 8005cfc:	4a92      	ldr	r2, [pc, #584]	; (8005f48 <HAL_GPIO_Init+0x2a4>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d86f      	bhi.n	8005de2 <HAL_GPIO_Init+0x13e>
 8005d02:	4a92      	ldr	r2, [pc, #584]	; (8005f4c <HAL_GPIO_Init+0x2a8>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d052      	beq.n	8005dae <HAL_GPIO_Init+0x10a>
 8005d08:	4a90      	ldr	r2, [pc, #576]	; (8005f4c <HAL_GPIO_Init+0x2a8>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d869      	bhi.n	8005de2 <HAL_GPIO_Init+0x13e>
 8005d0e:	4a90      	ldr	r2, [pc, #576]	; (8005f50 <HAL_GPIO_Init+0x2ac>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d04c      	beq.n	8005dae <HAL_GPIO_Init+0x10a>
 8005d14:	4a8e      	ldr	r2, [pc, #568]	; (8005f50 <HAL_GPIO_Init+0x2ac>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d863      	bhi.n	8005de2 <HAL_GPIO_Init+0x13e>
 8005d1a:	4a8e      	ldr	r2, [pc, #568]	; (8005f54 <HAL_GPIO_Init+0x2b0>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d046      	beq.n	8005dae <HAL_GPIO_Init+0x10a>
 8005d20:	4a8c      	ldr	r2, [pc, #560]	; (8005f54 <HAL_GPIO_Init+0x2b0>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d85d      	bhi.n	8005de2 <HAL_GPIO_Init+0x13e>
 8005d26:	2b12      	cmp	r3, #18
 8005d28:	d82a      	bhi.n	8005d80 <HAL_GPIO_Init+0xdc>
 8005d2a:	2b12      	cmp	r3, #18
 8005d2c:	d859      	bhi.n	8005de2 <HAL_GPIO_Init+0x13e>
 8005d2e:	a201      	add	r2, pc, #4	; (adr r2, 8005d34 <HAL_GPIO_Init+0x90>)
 8005d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d34:	08005daf 	.word	0x08005daf
 8005d38:	08005d89 	.word	0x08005d89
 8005d3c:	08005d9b 	.word	0x08005d9b
 8005d40:	08005ddd 	.word	0x08005ddd
 8005d44:	08005de3 	.word	0x08005de3
 8005d48:	08005de3 	.word	0x08005de3
 8005d4c:	08005de3 	.word	0x08005de3
 8005d50:	08005de3 	.word	0x08005de3
 8005d54:	08005de3 	.word	0x08005de3
 8005d58:	08005de3 	.word	0x08005de3
 8005d5c:	08005de3 	.word	0x08005de3
 8005d60:	08005de3 	.word	0x08005de3
 8005d64:	08005de3 	.word	0x08005de3
 8005d68:	08005de3 	.word	0x08005de3
 8005d6c:	08005de3 	.word	0x08005de3
 8005d70:	08005de3 	.word	0x08005de3
 8005d74:	08005de3 	.word	0x08005de3
 8005d78:	08005d91 	.word	0x08005d91
 8005d7c:	08005da5 	.word	0x08005da5
 8005d80:	4a75      	ldr	r2, [pc, #468]	; (8005f58 <HAL_GPIO_Init+0x2b4>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d013      	beq.n	8005dae <HAL_GPIO_Init+0x10a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005d86:	e02c      	b.n	8005de2 <HAL_GPIO_Init+0x13e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	623b      	str	r3, [r7, #32]
          break;
 8005d8e:	e029      	b.n	8005de4 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	3304      	adds	r3, #4
 8005d96:	623b      	str	r3, [r7, #32]
          break;
 8005d98:	e024      	b.n	8005de4 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	3308      	adds	r3, #8
 8005da0:	623b      	str	r3, [r7, #32]
          break;
 8005da2:	e01f      	b.n	8005de4 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	330c      	adds	r3, #12
 8005daa:	623b      	str	r3, [r7, #32]
          break;
 8005dac:	e01a      	b.n	8005de4 <HAL_GPIO_Init+0x140>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d102      	bne.n	8005dbc <HAL_GPIO_Init+0x118>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005db6:	2304      	movs	r3, #4
 8005db8:	623b      	str	r3, [r7, #32]
          break;
 8005dba:	e013      	b.n	8005de4 <HAL_GPIO_Init+0x140>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d105      	bne.n	8005dd0 <HAL_GPIO_Init+0x12c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005dc4:	2308      	movs	r3, #8
 8005dc6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	69fa      	ldr	r2, [r7, #28]
 8005dcc:	611a      	str	r2, [r3, #16]
          break;
 8005dce:	e009      	b.n	8005de4 <HAL_GPIO_Init+0x140>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005dd0:	2308      	movs	r3, #8
 8005dd2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	69fa      	ldr	r2, [r7, #28]
 8005dd8:	615a      	str	r2, [r3, #20]
          break;
 8005dda:	e003      	b.n	8005de4 <HAL_GPIO_Init+0x140>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	623b      	str	r3, [r7, #32]
          break;
 8005de0:	e000      	b.n	8005de4 <HAL_GPIO_Init+0x140>
          break;
 8005de2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	2bff      	cmp	r3, #255	; 0xff
 8005de8:	d801      	bhi.n	8005dee <HAL_GPIO_Init+0x14a>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	e001      	b.n	8005df2 <HAL_GPIO_Init+0x14e>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	3304      	adds	r3, #4
 8005df2:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	2bff      	cmp	r3, #255	; 0xff
 8005df8:	d802      	bhi.n	8005e00 <HAL_GPIO_Init+0x15c>
 8005dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	e002      	b.n	8005e06 <HAL_GPIO_Init+0x162>
 8005e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e02:	3b08      	subs	r3, #8
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	210f      	movs	r1, #15
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	fa01 f303 	lsl.w	r3, r1, r3
 8005e14:	43db      	mvns	r3, r3
 8005e16:	401a      	ands	r2, r3
 8005e18:	6a39      	ldr	r1, [r7, #32]
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e20:	431a      	orrs	r2, r3
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	f000 80c1 	beq.w	8005fb6 <HAL_GPIO_Init+0x312>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005e34:	4b49      	ldr	r3, [pc, #292]	; (8005f5c <HAL_GPIO_Init+0x2b8>)
 8005e36:	699b      	ldr	r3, [r3, #24]
 8005e38:	4a48      	ldr	r2, [pc, #288]	; (8005f5c <HAL_GPIO_Init+0x2b8>)
 8005e3a:	f043 0301 	orr.w	r3, r3, #1
 8005e3e:	6193      	str	r3, [r2, #24]
 8005e40:	4b46      	ldr	r3, [pc, #280]	; (8005f5c <HAL_GPIO_Init+0x2b8>)
 8005e42:	699b      	ldr	r3, [r3, #24]
 8005e44:	f003 0301 	and.w	r3, r3, #1
 8005e48:	60bb      	str	r3, [r7, #8]
 8005e4a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8005e4c:	4a44      	ldr	r2, [pc, #272]	; (8005f60 <HAL_GPIO_Init+0x2bc>)
 8005e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e50:	089b      	lsrs	r3, r3, #2
 8005e52:	3302      	adds	r3, #2
 8005e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e58:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8005e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5c:	f003 0303 	and.w	r3, r3, #3
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	220f      	movs	r2, #15
 8005e64:	fa02 f303 	lsl.w	r3, r2, r3
 8005e68:	43db      	mvns	r3, r3
 8005e6a:	697a      	ldr	r2, [r7, #20]
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a3c      	ldr	r2, [pc, #240]	; (8005f64 <HAL_GPIO_Init+0x2c0>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d01f      	beq.n	8005eb8 <HAL_GPIO_Init+0x214>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a3b      	ldr	r2, [pc, #236]	; (8005f68 <HAL_GPIO_Init+0x2c4>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d019      	beq.n	8005eb4 <HAL_GPIO_Init+0x210>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4a3a      	ldr	r2, [pc, #232]	; (8005f6c <HAL_GPIO_Init+0x2c8>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d013      	beq.n	8005eb0 <HAL_GPIO_Init+0x20c>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a39      	ldr	r2, [pc, #228]	; (8005f70 <HAL_GPIO_Init+0x2cc>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d00d      	beq.n	8005eac <HAL_GPIO_Init+0x208>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	4a38      	ldr	r2, [pc, #224]	; (8005f74 <HAL_GPIO_Init+0x2d0>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d007      	beq.n	8005ea8 <HAL_GPIO_Init+0x204>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4a37      	ldr	r2, [pc, #220]	; (8005f78 <HAL_GPIO_Init+0x2d4>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d101      	bne.n	8005ea4 <HAL_GPIO_Init+0x200>
 8005ea0:	2305      	movs	r3, #5
 8005ea2:	e00a      	b.n	8005eba <HAL_GPIO_Init+0x216>
 8005ea4:	2306      	movs	r3, #6
 8005ea6:	e008      	b.n	8005eba <HAL_GPIO_Init+0x216>
 8005ea8:	2304      	movs	r3, #4
 8005eaa:	e006      	b.n	8005eba <HAL_GPIO_Init+0x216>
 8005eac:	2303      	movs	r3, #3
 8005eae:	e004      	b.n	8005eba <HAL_GPIO_Init+0x216>
 8005eb0:	2302      	movs	r3, #2
 8005eb2:	e002      	b.n	8005eba <HAL_GPIO_Init+0x216>
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e000      	b.n	8005eba <HAL_GPIO_Init+0x216>
 8005eb8:	2300      	movs	r3, #0
 8005eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ebc:	f002 0203 	and.w	r2, r2, #3
 8005ec0:	0092      	lsls	r2, r2, #2
 8005ec2:	4093      	lsls	r3, r2
 8005ec4:	697a      	ldr	r2, [r7, #20]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8005eca:	4925      	ldr	r1, [pc, #148]	; (8005f60 <HAL_GPIO_Init+0x2bc>)
 8005ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ece:	089b      	lsrs	r3, r3, #2
 8005ed0:	3302      	adds	r3, #2
 8005ed2:	697a      	ldr	r2, [r7, #20]
 8005ed4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d006      	beq.n	8005ef2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005ee4:	4b25      	ldr	r3, [pc, #148]	; (8005f7c <HAL_GPIO_Init+0x2d8>)
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	4924      	ldr	r1, [pc, #144]	; (8005f7c <HAL_GPIO_Init+0x2d8>)
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	600b      	str	r3, [r1, #0]
 8005ef0:	e006      	b.n	8005f00 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005ef2:	4b22      	ldr	r3, [pc, #136]	; (8005f7c <HAL_GPIO_Init+0x2d8>)
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	43db      	mvns	r3, r3
 8005efa:	4920      	ldr	r1, [pc, #128]	; (8005f7c <HAL_GPIO_Init+0x2d8>)
 8005efc:	4013      	ands	r3, r2
 8005efe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d006      	beq.n	8005f1a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005f0c:	4b1b      	ldr	r3, [pc, #108]	; (8005f7c <HAL_GPIO_Init+0x2d8>)
 8005f0e:	685a      	ldr	r2, [r3, #4]
 8005f10:	491a      	ldr	r1, [pc, #104]	; (8005f7c <HAL_GPIO_Init+0x2d8>)
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	604b      	str	r3, [r1, #4]
 8005f18:	e006      	b.n	8005f28 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005f1a:	4b18      	ldr	r3, [pc, #96]	; (8005f7c <HAL_GPIO_Init+0x2d8>)
 8005f1c:	685a      	ldr	r2, [r3, #4]
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	43db      	mvns	r3, r3
 8005f22:	4916      	ldr	r1, [pc, #88]	; (8005f7c <HAL_GPIO_Init+0x2d8>)
 8005f24:	4013      	ands	r3, r2
 8005f26:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d025      	beq.n	8005f80 <HAL_GPIO_Init+0x2dc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005f34:	4b11      	ldr	r3, [pc, #68]	; (8005f7c <HAL_GPIO_Init+0x2d8>)
 8005f36:	689a      	ldr	r2, [r3, #8]
 8005f38:	4910      	ldr	r1, [pc, #64]	; (8005f7c <HAL_GPIO_Init+0x2d8>)
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	608b      	str	r3, [r1, #8]
 8005f40:	e025      	b.n	8005f8e <HAL_GPIO_Init+0x2ea>
 8005f42:	bf00      	nop
 8005f44:	10320000 	.word	0x10320000
 8005f48:	10310000 	.word	0x10310000
 8005f4c:	10220000 	.word	0x10220000
 8005f50:	10210000 	.word	0x10210000
 8005f54:	10120000 	.word	0x10120000
 8005f58:	10110000 	.word	0x10110000
 8005f5c:	40021000 	.word	0x40021000
 8005f60:	40010000 	.word	0x40010000
 8005f64:	40010800 	.word	0x40010800
 8005f68:	40010c00 	.word	0x40010c00
 8005f6c:	40011000 	.word	0x40011000
 8005f70:	40011400 	.word	0x40011400
 8005f74:	40011800 	.word	0x40011800
 8005f78:	40011c00 	.word	0x40011c00
 8005f7c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005f80:	4b13      	ldr	r3, [pc, #76]	; (8005fd0 <HAL_GPIO_Init+0x32c>)
 8005f82:	689a      	ldr	r2, [r3, #8]
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	43db      	mvns	r3, r3
 8005f88:	4911      	ldr	r1, [pc, #68]	; (8005fd0 <HAL_GPIO_Init+0x32c>)
 8005f8a:	4013      	ands	r3, r2
 8005f8c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d006      	beq.n	8005fa8 <HAL_GPIO_Init+0x304>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005f9a:	4b0d      	ldr	r3, [pc, #52]	; (8005fd0 <HAL_GPIO_Init+0x32c>)
 8005f9c:	68da      	ldr	r2, [r3, #12]
 8005f9e:	490c      	ldr	r1, [pc, #48]	; (8005fd0 <HAL_GPIO_Init+0x32c>)
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	60cb      	str	r3, [r1, #12]
 8005fa6:	e006      	b.n	8005fb6 <HAL_GPIO_Init+0x312>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005fa8:	4b09      	ldr	r3, [pc, #36]	; (8005fd0 <HAL_GPIO_Init+0x32c>)
 8005faa:	68da      	ldr	r2, [r3, #12]
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	43db      	mvns	r3, r3
 8005fb0:	4907      	ldr	r1, [pc, #28]	; (8005fd0 <HAL_GPIO_Init+0x32c>)
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8005fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb8:	3301      	adds	r3, #1
 8005fba:	627b      	str	r3, [r7, #36]	; 0x24
 8005fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fbe:	2b0f      	cmp	r3, #15
 8005fc0:	f67f ae82 	bls.w	8005cc8 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8005fc4:	bf00      	nop
 8005fc6:	bf00      	nop
 8005fc8:	372c      	adds	r7, #44	; 0x2c
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bc80      	pop	{r7}
 8005fce:	4770      	bx	lr
 8005fd0:	40010400 	.word	0x40010400

08005fd4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b085      	sub	sp, #20
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	460b      	mov	r3, r1
 8005fde:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	689a      	ldr	r2, [r3, #8]
 8005fe4:	887b      	ldrh	r3, [r7, #2]
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d002      	beq.n	8005ff2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005fec:	2301      	movs	r3, #1
 8005fee:	73fb      	strb	r3, [r7, #15]
 8005ff0:	e001      	b.n	8005ff6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3714      	adds	r7, #20
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bc80      	pop	{r7}
 8006000:	4770      	bx	lr

08006002 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006002:	b480      	push	{r7}
 8006004:	b083      	sub	sp, #12
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
 800600a:	460b      	mov	r3, r1
 800600c:	807b      	strh	r3, [r7, #2]
 800600e:	4613      	mov	r3, r2
 8006010:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006012:	787b      	ldrb	r3, [r7, #1]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d003      	beq.n	8006020 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006018:	887a      	ldrh	r2, [r7, #2]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800601e:	e003      	b.n	8006028 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006020:	887b      	ldrh	r3, [r7, #2]
 8006022:	041a      	lsls	r2, r3, #16
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	611a      	str	r2, [r3, #16]
}
 8006028:	bf00      	nop
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	bc80      	pop	{r7}
 8006030:	4770      	bx	lr

08006032 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006032:	b480      	push	{r7}
 8006034:	b083      	sub	sp, #12
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
 800603a:	460b      	mov	r3, r1
 800603c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	68da      	ldr	r2, [r3, #12]
 8006042:	887b      	ldrh	r3, [r7, #2]
 8006044:	405a      	eors	r2, r3
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	60da      	str	r2, [r3, #12]
}
 800604a:	bf00      	nop
 800604c:	370c      	adds	r7, #12
 800604e:	46bd      	mov	sp, r7
 8006050:	bc80      	pop	{r7}
 8006052:	4770      	bx	lr

08006054 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b082      	sub	sp, #8
 8006058:	af00      	add	r7, sp, #0
 800605a:	4603      	mov	r3, r0
 800605c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800605e:	4b08      	ldr	r3, [pc, #32]	; (8006080 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006060:	695a      	ldr	r2, [r3, #20]
 8006062:	88fb      	ldrh	r3, [r7, #6]
 8006064:	4013      	ands	r3, r2
 8006066:	2b00      	cmp	r3, #0
 8006068:	d006      	beq.n	8006078 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800606a:	4a05      	ldr	r2, [pc, #20]	; (8006080 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800606c:	88fb      	ldrh	r3, [r7, #6]
 800606e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006070:	88fb      	ldrh	r3, [r7, #6]
 8006072:	4618      	mov	r0, r3
 8006074:	f000 f806 	bl	8006084 <HAL_GPIO_EXTI_Callback>
  }
}
 8006078:	bf00      	nop
 800607a:	3708      	adds	r7, #8
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}
 8006080:	40010400 	.word	0x40010400

08006084 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	4603      	mov	r3, r0
 800608c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800608e:	bf00      	nop
 8006090:	370c      	adds	r7, #12
 8006092:	46bd      	mov	sp, r7
 8006094:	bc80      	pop	{r7}
 8006096:	4770      	bx	lr

08006098 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b086      	sub	sp, #24
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80060a0:	2300      	movs	r3, #0
 80060a2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 0301 	and.w	r3, r3, #1
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	f000 8087 	beq.w	80061c0 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80060b2:	4b92      	ldr	r3, [pc, #584]	; (80062fc <HAL_RCC_OscConfig+0x264>)
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	f003 030c 	and.w	r3, r3, #12
 80060ba:	2b04      	cmp	r3, #4
 80060bc:	d00c      	beq.n	80060d8 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80060be:	4b8f      	ldr	r3, [pc, #572]	; (80062fc <HAL_RCC_OscConfig+0x264>)
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	f003 030c 	and.w	r3, r3, #12
 80060c6:	2b08      	cmp	r3, #8
 80060c8:	d112      	bne.n	80060f0 <HAL_RCC_OscConfig+0x58>
 80060ca:	4b8c      	ldr	r3, [pc, #560]	; (80062fc <HAL_RCC_OscConfig+0x264>)
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060d6:	d10b      	bne.n	80060f0 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060d8:	4b88      	ldr	r3, [pc, #544]	; (80062fc <HAL_RCC_OscConfig+0x264>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d06c      	beq.n	80061be <HAL_RCC_OscConfig+0x126>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d168      	bne.n	80061be <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	e22d      	b.n	800654c <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060f8:	d106      	bne.n	8006108 <HAL_RCC_OscConfig+0x70>
 80060fa:	4b80      	ldr	r3, [pc, #512]	; (80062fc <HAL_RCC_OscConfig+0x264>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a7f      	ldr	r2, [pc, #508]	; (80062fc <HAL_RCC_OscConfig+0x264>)
 8006100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006104:	6013      	str	r3, [r2, #0]
 8006106:	e02e      	b.n	8006166 <HAL_RCC_OscConfig+0xce>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d10c      	bne.n	800612a <HAL_RCC_OscConfig+0x92>
 8006110:	4b7a      	ldr	r3, [pc, #488]	; (80062fc <HAL_RCC_OscConfig+0x264>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a79      	ldr	r2, [pc, #484]	; (80062fc <HAL_RCC_OscConfig+0x264>)
 8006116:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800611a:	6013      	str	r3, [r2, #0]
 800611c:	4b77      	ldr	r3, [pc, #476]	; (80062fc <HAL_RCC_OscConfig+0x264>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a76      	ldr	r2, [pc, #472]	; (80062fc <HAL_RCC_OscConfig+0x264>)
 8006122:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006126:	6013      	str	r3, [r2, #0]
 8006128:	e01d      	b.n	8006166 <HAL_RCC_OscConfig+0xce>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006132:	d10c      	bne.n	800614e <HAL_RCC_OscConfig+0xb6>
 8006134:	4b71      	ldr	r3, [pc, #452]	; (80062fc <HAL_RCC_OscConfig+0x264>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a70      	ldr	r2, [pc, #448]	; (80062fc <HAL_RCC_OscConfig+0x264>)
 800613a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800613e:	6013      	str	r3, [r2, #0]
 8006140:	4b6e      	ldr	r3, [pc, #440]	; (80062fc <HAL_RCC_OscConfig+0x264>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a6d      	ldr	r2, [pc, #436]	; (80062fc <HAL_RCC_OscConfig+0x264>)
 8006146:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800614a:	6013      	str	r3, [r2, #0]
 800614c:	e00b      	b.n	8006166 <HAL_RCC_OscConfig+0xce>
 800614e:	4b6b      	ldr	r3, [pc, #428]	; (80062fc <HAL_RCC_OscConfig+0x264>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a6a      	ldr	r2, [pc, #424]	; (80062fc <HAL_RCC_OscConfig+0x264>)
 8006154:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006158:	6013      	str	r3, [r2, #0]
 800615a:	4b68      	ldr	r3, [pc, #416]	; (80062fc <HAL_RCC_OscConfig+0x264>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a67      	ldr	r2, [pc, #412]	; (80062fc <HAL_RCC_OscConfig+0x264>)
 8006160:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006164:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d013      	beq.n	8006196 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800616e:	f7ff f87b 	bl	8005268 <HAL_GetTick>
 8006172:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006174:	e008      	b.n	8006188 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006176:	f7ff f877 	bl	8005268 <HAL_GetTick>
 800617a:	4602      	mov	r2, r0
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	2b64      	cmp	r3, #100	; 0x64
 8006182:	d901      	bls.n	8006188 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8006184:	2303      	movs	r3, #3
 8006186:	e1e1      	b.n	800654c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006188:	4b5c      	ldr	r3, [pc, #368]	; (80062fc <HAL_RCC_OscConfig+0x264>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006190:	2b00      	cmp	r3, #0
 8006192:	d0f0      	beq.n	8006176 <HAL_RCC_OscConfig+0xde>
 8006194:	e014      	b.n	80061c0 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006196:	f7ff f867 	bl	8005268 <HAL_GetTick>
 800619a:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800619c:	e008      	b.n	80061b0 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800619e:	f7ff f863 	bl	8005268 <HAL_GetTick>
 80061a2:	4602      	mov	r2, r0
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	1ad3      	subs	r3, r2, r3
 80061a8:	2b64      	cmp	r3, #100	; 0x64
 80061aa:	d901      	bls.n	80061b0 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 80061ac:	2303      	movs	r3, #3
 80061ae:	e1cd      	b.n	800654c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061b0:	4b52      	ldr	r3, [pc, #328]	; (80062fc <HAL_RCC_OscConfig+0x264>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d1f0      	bne.n	800619e <HAL_RCC_OscConfig+0x106>
 80061bc:	e000      	b.n	80061c0 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061be:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 0302 	and.w	r3, r3, #2
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d063      	beq.n	8006294 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80061cc:	4b4b      	ldr	r3, [pc, #300]	; (80062fc <HAL_RCC_OscConfig+0x264>)
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	f003 030c 	and.w	r3, r3, #12
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00b      	beq.n	80061f0 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80061d8:	4b48      	ldr	r3, [pc, #288]	; (80062fc <HAL_RCC_OscConfig+0x264>)
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	f003 030c 	and.w	r3, r3, #12
 80061e0:	2b08      	cmp	r3, #8
 80061e2:	d11c      	bne.n	800621e <HAL_RCC_OscConfig+0x186>
 80061e4:	4b45      	ldr	r3, [pc, #276]	; (80062fc <HAL_RCC_OscConfig+0x264>)
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d116      	bne.n	800621e <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061f0:	4b42      	ldr	r3, [pc, #264]	; (80062fc <HAL_RCC_OscConfig+0x264>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f003 0302 	and.w	r3, r3, #2
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d005      	beq.n	8006208 <HAL_RCC_OscConfig+0x170>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	2b01      	cmp	r3, #1
 8006202:	d001      	beq.n	8006208 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e1a1      	b.n	800654c <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006208:	4b3c      	ldr	r3, [pc, #240]	; (80062fc <HAL_RCC_OscConfig+0x264>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	695b      	ldr	r3, [r3, #20]
 8006214:	00db      	lsls	r3, r3, #3
 8006216:	4939      	ldr	r1, [pc, #228]	; (80062fc <HAL_RCC_OscConfig+0x264>)
 8006218:	4313      	orrs	r3, r2
 800621a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800621c:	e03a      	b.n	8006294 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d020      	beq.n	8006268 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006226:	4b36      	ldr	r3, [pc, #216]	; (8006300 <HAL_RCC_OscConfig+0x268>)
 8006228:	2201      	movs	r2, #1
 800622a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800622c:	f7ff f81c 	bl	8005268 <HAL_GetTick>
 8006230:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006232:	e008      	b.n	8006246 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006234:	f7ff f818 	bl	8005268 <HAL_GetTick>
 8006238:	4602      	mov	r2, r0
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	2b02      	cmp	r3, #2
 8006240:	d901      	bls.n	8006246 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8006242:	2303      	movs	r3, #3
 8006244:	e182      	b.n	800654c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006246:	4b2d      	ldr	r3, [pc, #180]	; (80062fc <HAL_RCC_OscConfig+0x264>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f003 0302 	and.w	r3, r3, #2
 800624e:	2b00      	cmp	r3, #0
 8006250:	d0f0      	beq.n	8006234 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006252:	4b2a      	ldr	r3, [pc, #168]	; (80062fc <HAL_RCC_OscConfig+0x264>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	695b      	ldr	r3, [r3, #20]
 800625e:	00db      	lsls	r3, r3, #3
 8006260:	4926      	ldr	r1, [pc, #152]	; (80062fc <HAL_RCC_OscConfig+0x264>)
 8006262:	4313      	orrs	r3, r2
 8006264:	600b      	str	r3, [r1, #0]
 8006266:	e015      	b.n	8006294 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006268:	4b25      	ldr	r3, [pc, #148]	; (8006300 <HAL_RCC_OscConfig+0x268>)
 800626a:	2200      	movs	r2, #0
 800626c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800626e:	f7fe fffb 	bl	8005268 <HAL_GetTick>
 8006272:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006274:	e008      	b.n	8006288 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006276:	f7fe fff7 	bl	8005268 <HAL_GetTick>
 800627a:	4602      	mov	r2, r0
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	1ad3      	subs	r3, r2, r3
 8006280:	2b02      	cmp	r3, #2
 8006282:	d901      	bls.n	8006288 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8006284:	2303      	movs	r3, #3
 8006286:	e161      	b.n	800654c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006288:	4b1c      	ldr	r3, [pc, #112]	; (80062fc <HAL_RCC_OscConfig+0x264>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f003 0302 	and.w	r3, r3, #2
 8006290:	2b00      	cmp	r3, #0
 8006292:	d1f0      	bne.n	8006276 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 0308 	and.w	r3, r3, #8
 800629c:	2b00      	cmp	r3, #0
 800629e:	d039      	beq.n	8006314 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	699b      	ldr	r3, [r3, #24]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d019      	beq.n	80062dc <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062a8:	4b16      	ldr	r3, [pc, #88]	; (8006304 <HAL_RCC_OscConfig+0x26c>)
 80062aa:	2201      	movs	r2, #1
 80062ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062ae:	f7fe ffdb 	bl	8005268 <HAL_GetTick>
 80062b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062b4:	e008      	b.n	80062c8 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80062b6:	f7fe ffd7 	bl	8005268 <HAL_GetTick>
 80062ba:	4602      	mov	r2, r0
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	1ad3      	subs	r3, r2, r3
 80062c0:	2b02      	cmp	r3, #2
 80062c2:	d901      	bls.n	80062c8 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 80062c4:	2303      	movs	r3, #3
 80062c6:	e141      	b.n	800654c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062c8:	4b0c      	ldr	r3, [pc, #48]	; (80062fc <HAL_RCC_OscConfig+0x264>)
 80062ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062cc:	f003 0302 	and.w	r3, r3, #2
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d0f0      	beq.n	80062b6 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 80062d4:	2001      	movs	r0, #1
 80062d6:	f000 fadf 	bl	8006898 <RCC_Delay>
 80062da:	e01b      	b.n	8006314 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062dc:	4b09      	ldr	r3, [pc, #36]	; (8006304 <HAL_RCC_OscConfig+0x26c>)
 80062de:	2200      	movs	r2, #0
 80062e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062e2:	f7fe ffc1 	bl	8005268 <HAL_GetTick>
 80062e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062e8:	e00e      	b.n	8006308 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80062ea:	f7fe ffbd 	bl	8005268 <HAL_GetTick>
 80062ee:	4602      	mov	r2, r0
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	1ad3      	subs	r3, r2, r3
 80062f4:	2b02      	cmp	r3, #2
 80062f6:	d907      	bls.n	8006308 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 80062f8:	2303      	movs	r3, #3
 80062fa:	e127      	b.n	800654c <HAL_RCC_OscConfig+0x4b4>
 80062fc:	40021000 	.word	0x40021000
 8006300:	42420000 	.word	0x42420000
 8006304:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006308:	4b92      	ldr	r3, [pc, #584]	; (8006554 <HAL_RCC_OscConfig+0x4bc>)
 800630a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630c:	f003 0302 	and.w	r3, r3, #2
 8006310:	2b00      	cmp	r3, #0
 8006312:	d1ea      	bne.n	80062ea <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 0304 	and.w	r3, r3, #4
 800631c:	2b00      	cmp	r3, #0
 800631e:	f000 80a6 	beq.w	800646e <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006322:	2300      	movs	r3, #0
 8006324:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006326:	4b8b      	ldr	r3, [pc, #556]	; (8006554 <HAL_RCC_OscConfig+0x4bc>)
 8006328:	69db      	ldr	r3, [r3, #28]
 800632a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800632e:	2b00      	cmp	r3, #0
 8006330:	d10d      	bne.n	800634e <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006332:	4b88      	ldr	r3, [pc, #544]	; (8006554 <HAL_RCC_OscConfig+0x4bc>)
 8006334:	69db      	ldr	r3, [r3, #28]
 8006336:	4a87      	ldr	r2, [pc, #540]	; (8006554 <HAL_RCC_OscConfig+0x4bc>)
 8006338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800633c:	61d3      	str	r3, [r2, #28]
 800633e:	4b85      	ldr	r3, [pc, #532]	; (8006554 <HAL_RCC_OscConfig+0x4bc>)
 8006340:	69db      	ldr	r3, [r3, #28]
 8006342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006346:	60fb      	str	r3, [r7, #12]
 8006348:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800634a:	2301      	movs	r3, #1
 800634c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800634e:	4b82      	ldr	r3, [pc, #520]	; (8006558 <HAL_RCC_OscConfig+0x4c0>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006356:	2b00      	cmp	r3, #0
 8006358:	d118      	bne.n	800638c <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800635a:	4b7f      	ldr	r3, [pc, #508]	; (8006558 <HAL_RCC_OscConfig+0x4c0>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a7e      	ldr	r2, [pc, #504]	; (8006558 <HAL_RCC_OscConfig+0x4c0>)
 8006360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006364:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006366:	f7fe ff7f 	bl	8005268 <HAL_GetTick>
 800636a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800636c:	e008      	b.n	8006380 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800636e:	f7fe ff7b 	bl	8005268 <HAL_GetTick>
 8006372:	4602      	mov	r2, r0
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	1ad3      	subs	r3, r2, r3
 8006378:	2b64      	cmp	r3, #100	; 0x64
 800637a:	d901      	bls.n	8006380 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 800637c:	2303      	movs	r3, #3
 800637e:	e0e5      	b.n	800654c <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006380:	4b75      	ldr	r3, [pc, #468]	; (8006558 <HAL_RCC_OscConfig+0x4c0>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006388:	2b00      	cmp	r3, #0
 800638a:	d0f0      	beq.n	800636e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	2b01      	cmp	r3, #1
 8006392:	d106      	bne.n	80063a2 <HAL_RCC_OscConfig+0x30a>
 8006394:	4b6f      	ldr	r3, [pc, #444]	; (8006554 <HAL_RCC_OscConfig+0x4bc>)
 8006396:	6a1b      	ldr	r3, [r3, #32]
 8006398:	4a6e      	ldr	r2, [pc, #440]	; (8006554 <HAL_RCC_OscConfig+0x4bc>)
 800639a:	f043 0301 	orr.w	r3, r3, #1
 800639e:	6213      	str	r3, [r2, #32]
 80063a0:	e02d      	b.n	80063fe <HAL_RCC_OscConfig+0x366>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d10c      	bne.n	80063c4 <HAL_RCC_OscConfig+0x32c>
 80063aa:	4b6a      	ldr	r3, [pc, #424]	; (8006554 <HAL_RCC_OscConfig+0x4bc>)
 80063ac:	6a1b      	ldr	r3, [r3, #32]
 80063ae:	4a69      	ldr	r2, [pc, #420]	; (8006554 <HAL_RCC_OscConfig+0x4bc>)
 80063b0:	f023 0301 	bic.w	r3, r3, #1
 80063b4:	6213      	str	r3, [r2, #32]
 80063b6:	4b67      	ldr	r3, [pc, #412]	; (8006554 <HAL_RCC_OscConfig+0x4bc>)
 80063b8:	6a1b      	ldr	r3, [r3, #32]
 80063ba:	4a66      	ldr	r2, [pc, #408]	; (8006554 <HAL_RCC_OscConfig+0x4bc>)
 80063bc:	f023 0304 	bic.w	r3, r3, #4
 80063c0:	6213      	str	r3, [r2, #32]
 80063c2:	e01c      	b.n	80063fe <HAL_RCC_OscConfig+0x366>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	2b05      	cmp	r3, #5
 80063ca:	d10c      	bne.n	80063e6 <HAL_RCC_OscConfig+0x34e>
 80063cc:	4b61      	ldr	r3, [pc, #388]	; (8006554 <HAL_RCC_OscConfig+0x4bc>)
 80063ce:	6a1b      	ldr	r3, [r3, #32]
 80063d0:	4a60      	ldr	r2, [pc, #384]	; (8006554 <HAL_RCC_OscConfig+0x4bc>)
 80063d2:	f043 0304 	orr.w	r3, r3, #4
 80063d6:	6213      	str	r3, [r2, #32]
 80063d8:	4b5e      	ldr	r3, [pc, #376]	; (8006554 <HAL_RCC_OscConfig+0x4bc>)
 80063da:	6a1b      	ldr	r3, [r3, #32]
 80063dc:	4a5d      	ldr	r2, [pc, #372]	; (8006554 <HAL_RCC_OscConfig+0x4bc>)
 80063de:	f043 0301 	orr.w	r3, r3, #1
 80063e2:	6213      	str	r3, [r2, #32]
 80063e4:	e00b      	b.n	80063fe <HAL_RCC_OscConfig+0x366>
 80063e6:	4b5b      	ldr	r3, [pc, #364]	; (8006554 <HAL_RCC_OscConfig+0x4bc>)
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	4a5a      	ldr	r2, [pc, #360]	; (8006554 <HAL_RCC_OscConfig+0x4bc>)
 80063ec:	f023 0301 	bic.w	r3, r3, #1
 80063f0:	6213      	str	r3, [r2, #32]
 80063f2:	4b58      	ldr	r3, [pc, #352]	; (8006554 <HAL_RCC_OscConfig+0x4bc>)
 80063f4:	6a1b      	ldr	r3, [r3, #32]
 80063f6:	4a57      	ldr	r2, [pc, #348]	; (8006554 <HAL_RCC_OscConfig+0x4bc>)
 80063f8:	f023 0304 	bic.w	r3, r3, #4
 80063fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d015      	beq.n	8006432 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006406:	f7fe ff2f 	bl	8005268 <HAL_GetTick>
 800640a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800640c:	e00a      	b.n	8006424 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800640e:	f7fe ff2b 	bl	8005268 <HAL_GetTick>
 8006412:	4602      	mov	r2, r0
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	1ad3      	subs	r3, r2, r3
 8006418:	f241 3288 	movw	r2, #5000	; 0x1388
 800641c:	4293      	cmp	r3, r2
 800641e:	d901      	bls.n	8006424 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8006420:	2303      	movs	r3, #3
 8006422:	e093      	b.n	800654c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006424:	4b4b      	ldr	r3, [pc, #300]	; (8006554 <HAL_RCC_OscConfig+0x4bc>)
 8006426:	6a1b      	ldr	r3, [r3, #32]
 8006428:	f003 0302 	and.w	r3, r3, #2
 800642c:	2b00      	cmp	r3, #0
 800642e:	d0ee      	beq.n	800640e <HAL_RCC_OscConfig+0x376>
 8006430:	e014      	b.n	800645c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006432:	f7fe ff19 	bl	8005268 <HAL_GetTick>
 8006436:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006438:	e00a      	b.n	8006450 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800643a:	f7fe ff15 	bl	8005268 <HAL_GetTick>
 800643e:	4602      	mov	r2, r0
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	1ad3      	subs	r3, r2, r3
 8006444:	f241 3288 	movw	r2, #5000	; 0x1388
 8006448:	4293      	cmp	r3, r2
 800644a:	d901      	bls.n	8006450 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 800644c:	2303      	movs	r3, #3
 800644e:	e07d      	b.n	800654c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006450:	4b40      	ldr	r3, [pc, #256]	; (8006554 <HAL_RCC_OscConfig+0x4bc>)
 8006452:	6a1b      	ldr	r3, [r3, #32]
 8006454:	f003 0302 	and.w	r3, r3, #2
 8006458:	2b00      	cmp	r3, #0
 800645a:	d1ee      	bne.n	800643a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800645c:	7dfb      	ldrb	r3, [r7, #23]
 800645e:	2b01      	cmp	r3, #1
 8006460:	d105      	bne.n	800646e <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006462:	4b3c      	ldr	r3, [pc, #240]	; (8006554 <HAL_RCC_OscConfig+0x4bc>)
 8006464:	69db      	ldr	r3, [r3, #28]
 8006466:	4a3b      	ldr	r2, [pc, #236]	; (8006554 <HAL_RCC_OscConfig+0x4bc>)
 8006468:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800646c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	69db      	ldr	r3, [r3, #28]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d069      	beq.n	800654a <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006476:	4b37      	ldr	r3, [pc, #220]	; (8006554 <HAL_RCC_OscConfig+0x4bc>)
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	f003 030c 	and.w	r3, r3, #12
 800647e:	2b08      	cmp	r3, #8
 8006480:	d061      	beq.n	8006546 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	69db      	ldr	r3, [r3, #28]
 8006486:	2b02      	cmp	r3, #2
 8006488:	d146      	bne.n	8006518 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800648a:	4b34      	ldr	r3, [pc, #208]	; (800655c <HAL_RCC_OscConfig+0x4c4>)
 800648c:	2200      	movs	r2, #0
 800648e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006490:	f7fe feea 	bl	8005268 <HAL_GetTick>
 8006494:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006496:	e008      	b.n	80064aa <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006498:	f7fe fee6 	bl	8005268 <HAL_GetTick>
 800649c:	4602      	mov	r2, r0
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	1ad3      	subs	r3, r2, r3
 80064a2:	2b02      	cmp	r3, #2
 80064a4:	d901      	bls.n	80064aa <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 80064a6:	2303      	movs	r3, #3
 80064a8:	e050      	b.n	800654c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80064aa:	4b2a      	ldr	r3, [pc, #168]	; (8006554 <HAL_RCC_OscConfig+0x4bc>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d1f0      	bne.n	8006498 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6a1b      	ldr	r3, [r3, #32]
 80064ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064be:	d108      	bne.n	80064d2 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80064c0:	4b24      	ldr	r3, [pc, #144]	; (8006554 <HAL_RCC_OscConfig+0x4bc>)
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	4921      	ldr	r1, [pc, #132]	; (8006554 <HAL_RCC_OscConfig+0x4bc>)
 80064ce:	4313      	orrs	r3, r2
 80064d0:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80064d2:	4b20      	ldr	r3, [pc, #128]	; (8006554 <HAL_RCC_OscConfig+0x4bc>)
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a19      	ldr	r1, [r3, #32]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e2:	430b      	orrs	r3, r1
 80064e4:	491b      	ldr	r1, [pc, #108]	; (8006554 <HAL_RCC_OscConfig+0x4bc>)
 80064e6:	4313      	orrs	r3, r2
 80064e8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80064ea:	4b1c      	ldr	r3, [pc, #112]	; (800655c <HAL_RCC_OscConfig+0x4c4>)
 80064ec:	2201      	movs	r2, #1
 80064ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064f0:	f7fe feba 	bl	8005268 <HAL_GetTick>
 80064f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80064f6:	e008      	b.n	800650a <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064f8:	f7fe feb6 	bl	8005268 <HAL_GetTick>
 80064fc:	4602      	mov	r2, r0
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	2b02      	cmp	r3, #2
 8006504:	d901      	bls.n	800650a <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	e020      	b.n	800654c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800650a:	4b12      	ldr	r3, [pc, #72]	; (8006554 <HAL_RCC_OscConfig+0x4bc>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006512:	2b00      	cmp	r3, #0
 8006514:	d0f0      	beq.n	80064f8 <HAL_RCC_OscConfig+0x460>
 8006516:	e018      	b.n	800654a <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006518:	4b10      	ldr	r3, [pc, #64]	; (800655c <HAL_RCC_OscConfig+0x4c4>)
 800651a:	2200      	movs	r2, #0
 800651c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800651e:	f7fe fea3 	bl	8005268 <HAL_GetTick>
 8006522:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006524:	e008      	b.n	8006538 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006526:	f7fe fe9f 	bl	8005268 <HAL_GetTick>
 800652a:	4602      	mov	r2, r0
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	1ad3      	subs	r3, r2, r3
 8006530:	2b02      	cmp	r3, #2
 8006532:	d901      	bls.n	8006538 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8006534:	2303      	movs	r3, #3
 8006536:	e009      	b.n	800654c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006538:	4b06      	ldr	r3, [pc, #24]	; (8006554 <HAL_RCC_OscConfig+0x4bc>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006540:	2b00      	cmp	r3, #0
 8006542:	d1f0      	bne.n	8006526 <HAL_RCC_OscConfig+0x48e>
 8006544:	e001      	b.n	800654a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	e000      	b.n	800654c <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 800654a:	2300      	movs	r3, #0
}
 800654c:	4618      	mov	r0, r3
 800654e:	3718      	adds	r7, #24
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}
 8006554:	40021000 	.word	0x40021000
 8006558:	40007000 	.word	0x40007000
 800655c:	42420060 	.word	0x42420060

08006560 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800656a:	2300      	movs	r3, #0
 800656c:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800656e:	4b7e      	ldr	r3, [pc, #504]	; (8006768 <HAL_RCC_ClockConfig+0x208>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 0307 	and.w	r3, r3, #7
 8006576:	683a      	ldr	r2, [r7, #0]
 8006578:	429a      	cmp	r2, r3
 800657a:	d910      	bls.n	800659e <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800657c:	4b7a      	ldr	r3, [pc, #488]	; (8006768 <HAL_RCC_ClockConfig+0x208>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f023 0207 	bic.w	r2, r3, #7
 8006584:	4978      	ldr	r1, [pc, #480]	; (8006768 <HAL_RCC_ClockConfig+0x208>)
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	4313      	orrs	r3, r2
 800658a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800658c:	4b76      	ldr	r3, [pc, #472]	; (8006768 <HAL_RCC_ClockConfig+0x208>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 0307 	and.w	r3, r3, #7
 8006594:	683a      	ldr	r2, [r7, #0]
 8006596:	429a      	cmp	r2, r3
 8006598:	d001      	beq.n	800659e <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e0e0      	b.n	8006760 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 0302 	and.w	r3, r3, #2
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d020      	beq.n	80065ec <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f003 0304 	and.w	r3, r3, #4
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d005      	beq.n	80065c2 <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80065b6:	4b6d      	ldr	r3, [pc, #436]	; (800676c <HAL_RCC_ClockConfig+0x20c>)
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	4a6c      	ldr	r2, [pc, #432]	; (800676c <HAL_RCC_ClockConfig+0x20c>)
 80065bc:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80065c0:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f003 0308 	and.w	r3, r3, #8
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d005      	beq.n	80065da <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80065ce:	4b67      	ldr	r3, [pc, #412]	; (800676c <HAL_RCC_ClockConfig+0x20c>)
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	4a66      	ldr	r2, [pc, #408]	; (800676c <HAL_RCC_ClockConfig+0x20c>)
 80065d4:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80065d8:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065da:	4b64      	ldr	r3, [pc, #400]	; (800676c <HAL_RCC_ClockConfig+0x20c>)
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	4961      	ldr	r1, [pc, #388]	; (800676c <HAL_RCC_ClockConfig+0x20c>)
 80065e8:	4313      	orrs	r3, r2
 80065ea:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 0301 	and.w	r3, r3, #1
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d06a      	beq.n	80066ce <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d107      	bne.n	8006610 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006600:	4b5a      	ldr	r3, [pc, #360]	; (800676c <HAL_RCC_ClockConfig+0x20c>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006608:	2b00      	cmp	r3, #0
 800660a:	d115      	bne.n	8006638 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	e0a7      	b.n	8006760 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	2b02      	cmp	r3, #2
 8006616:	d107      	bne.n	8006628 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006618:	4b54      	ldr	r3, [pc, #336]	; (800676c <HAL_RCC_ClockConfig+0x20c>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006620:	2b00      	cmp	r3, #0
 8006622:	d109      	bne.n	8006638 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	e09b      	b.n	8006760 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006628:	4b50      	ldr	r3, [pc, #320]	; (800676c <HAL_RCC_ClockConfig+0x20c>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 0302 	and.w	r3, r3, #2
 8006630:	2b00      	cmp	r3, #0
 8006632:	d101      	bne.n	8006638 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	e093      	b.n	8006760 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006638:	4b4c      	ldr	r3, [pc, #304]	; (800676c <HAL_RCC_ClockConfig+0x20c>)
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	f023 0203 	bic.w	r2, r3, #3
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	4949      	ldr	r1, [pc, #292]	; (800676c <HAL_RCC_ClockConfig+0x20c>)
 8006646:	4313      	orrs	r3, r2
 8006648:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800664a:	f7fe fe0d 	bl	8005268 <HAL_GetTick>
 800664e:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	2b01      	cmp	r3, #1
 8006656:	d112      	bne.n	800667e <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006658:	e00a      	b.n	8006670 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800665a:	f7fe fe05 	bl	8005268 <HAL_GetTick>
 800665e:	4602      	mov	r2, r0
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	1ad3      	subs	r3, r2, r3
 8006664:	f241 3288 	movw	r2, #5000	; 0x1388
 8006668:	4293      	cmp	r3, r2
 800666a:	d901      	bls.n	8006670 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 800666c:	2303      	movs	r3, #3
 800666e:	e077      	b.n	8006760 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006670:	4b3e      	ldr	r3, [pc, #248]	; (800676c <HAL_RCC_ClockConfig+0x20c>)
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	f003 030c 	and.w	r3, r3, #12
 8006678:	2b04      	cmp	r3, #4
 800667a:	d1ee      	bne.n	800665a <HAL_RCC_ClockConfig+0xfa>
 800667c:	e027      	b.n	80066ce <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	2b02      	cmp	r3, #2
 8006684:	d11d      	bne.n	80066c2 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006686:	e00a      	b.n	800669e <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006688:	f7fe fdee 	bl	8005268 <HAL_GetTick>
 800668c:	4602      	mov	r2, r0
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	1ad3      	subs	r3, r2, r3
 8006692:	f241 3288 	movw	r2, #5000	; 0x1388
 8006696:	4293      	cmp	r3, r2
 8006698:	d901      	bls.n	800669e <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 800669a:	2303      	movs	r3, #3
 800669c:	e060      	b.n	8006760 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800669e:	4b33      	ldr	r3, [pc, #204]	; (800676c <HAL_RCC_ClockConfig+0x20c>)
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	f003 030c 	and.w	r3, r3, #12
 80066a6:	2b08      	cmp	r3, #8
 80066a8:	d1ee      	bne.n	8006688 <HAL_RCC_ClockConfig+0x128>
 80066aa:	e010      	b.n	80066ce <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066ac:	f7fe fddc 	bl	8005268 <HAL_GetTick>
 80066b0:	4602      	mov	r2, r0
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d901      	bls.n	80066c2 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 80066be:	2303      	movs	r3, #3
 80066c0:	e04e      	b.n	8006760 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80066c2:	4b2a      	ldr	r3, [pc, #168]	; (800676c <HAL_RCC_ClockConfig+0x20c>)
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	f003 030c 	and.w	r3, r3, #12
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d1ee      	bne.n	80066ac <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80066ce:	4b26      	ldr	r3, [pc, #152]	; (8006768 <HAL_RCC_ClockConfig+0x208>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f003 0307 	and.w	r3, r3, #7
 80066d6:	683a      	ldr	r2, [r7, #0]
 80066d8:	429a      	cmp	r2, r3
 80066da:	d210      	bcs.n	80066fe <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066dc:	4b22      	ldr	r3, [pc, #136]	; (8006768 <HAL_RCC_ClockConfig+0x208>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f023 0207 	bic.w	r2, r3, #7
 80066e4:	4920      	ldr	r1, [pc, #128]	; (8006768 <HAL_RCC_ClockConfig+0x208>)
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	4313      	orrs	r3, r2
 80066ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80066ec:	4b1e      	ldr	r3, [pc, #120]	; (8006768 <HAL_RCC_ClockConfig+0x208>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 0307 	and.w	r3, r3, #7
 80066f4:	683a      	ldr	r2, [r7, #0]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d001      	beq.n	80066fe <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	e030      	b.n	8006760 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f003 0304 	and.w	r3, r3, #4
 8006706:	2b00      	cmp	r3, #0
 8006708:	d008      	beq.n	800671c <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800670a:	4b18      	ldr	r3, [pc, #96]	; (800676c <HAL_RCC_ClockConfig+0x20c>)
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	68db      	ldr	r3, [r3, #12]
 8006716:	4915      	ldr	r1, [pc, #84]	; (800676c <HAL_RCC_ClockConfig+0x20c>)
 8006718:	4313      	orrs	r3, r2
 800671a:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 0308 	and.w	r3, r3, #8
 8006724:	2b00      	cmp	r3, #0
 8006726:	d009      	beq.n	800673c <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006728:	4b10      	ldr	r3, [pc, #64]	; (800676c <HAL_RCC_ClockConfig+0x20c>)
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	00db      	lsls	r3, r3, #3
 8006736:	490d      	ldr	r1, [pc, #52]	; (800676c <HAL_RCC_ClockConfig+0x20c>)
 8006738:	4313      	orrs	r3, r2
 800673a:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800673c:	f000 f81c 	bl	8006778 <HAL_RCC_GetSysClockFreq>
 8006740:	4602      	mov	r2, r0
 8006742:	4b0a      	ldr	r3, [pc, #40]	; (800676c <HAL_RCC_ClockConfig+0x20c>)
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	091b      	lsrs	r3, r3, #4
 8006748:	f003 030f 	and.w	r3, r3, #15
 800674c:	4908      	ldr	r1, [pc, #32]	; (8006770 <HAL_RCC_ClockConfig+0x210>)
 800674e:	5ccb      	ldrb	r3, [r1, r3]
 8006750:	fa22 f303 	lsr.w	r3, r2, r3
 8006754:	4a07      	ldr	r2, [pc, #28]	; (8006774 <HAL_RCC_ClockConfig+0x214>)
 8006756:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006758:	2000      	movs	r0, #0
 800675a:	f7fe fd43 	bl	80051e4 <HAL_InitTick>
  
  return HAL_OK;
 800675e:	2300      	movs	r3, #0
}
 8006760:	4618      	mov	r0, r3
 8006762:	3710      	adds	r7, #16
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}
 8006768:	40022000 	.word	0x40022000
 800676c:	40021000 	.word	0x40021000
 8006770:	080095f4 	.word	0x080095f4
 8006774:	200001a0 	.word	0x200001a0

08006778 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006778:	b490      	push	{r4, r7}
 800677a:	b08a      	sub	sp, #40	; 0x28
 800677c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800677e:	4b29      	ldr	r3, [pc, #164]	; (8006824 <HAL_RCC_GetSysClockFreq+0xac>)
 8006780:	1d3c      	adds	r4, r7, #4
 8006782:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006784:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006788:	f240 2301 	movw	r3, #513	; 0x201
 800678c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800678e:	2300      	movs	r3, #0
 8006790:	61fb      	str	r3, [r7, #28]
 8006792:	2300      	movs	r3, #0
 8006794:	61bb      	str	r3, [r7, #24]
 8006796:	2300      	movs	r3, #0
 8006798:	627b      	str	r3, [r7, #36]	; 0x24
 800679a:	2300      	movs	r3, #0
 800679c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800679e:	2300      	movs	r3, #0
 80067a0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80067a2:	4b21      	ldr	r3, [pc, #132]	; (8006828 <HAL_RCC_GetSysClockFreq+0xb0>)
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80067a8:	69fb      	ldr	r3, [r7, #28]
 80067aa:	f003 030c 	and.w	r3, r3, #12
 80067ae:	2b04      	cmp	r3, #4
 80067b0:	d002      	beq.n	80067b8 <HAL_RCC_GetSysClockFreq+0x40>
 80067b2:	2b08      	cmp	r3, #8
 80067b4:	d003      	beq.n	80067be <HAL_RCC_GetSysClockFreq+0x46>
 80067b6:	e02b      	b.n	8006810 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80067b8:	4b1c      	ldr	r3, [pc, #112]	; (800682c <HAL_RCC_GetSysClockFreq+0xb4>)
 80067ba:	623b      	str	r3, [r7, #32]
      break;
 80067bc:	e02b      	b.n	8006816 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	0c9b      	lsrs	r3, r3, #18
 80067c2:	f003 030f 	and.w	r3, r3, #15
 80067c6:	3328      	adds	r3, #40	; 0x28
 80067c8:	443b      	add	r3, r7
 80067ca:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80067ce:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d012      	beq.n	8006800 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80067da:	4b13      	ldr	r3, [pc, #76]	; (8006828 <HAL_RCC_GetSysClockFreq+0xb0>)
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	0c5b      	lsrs	r3, r3, #17
 80067e0:	f003 0301 	and.w	r3, r3, #1
 80067e4:	3328      	adds	r3, #40	; 0x28
 80067e6:	443b      	add	r3, r7
 80067e8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80067ec:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	4a0e      	ldr	r2, [pc, #56]	; (800682c <HAL_RCC_GetSysClockFreq+0xb4>)
 80067f2:	fb03 f202 	mul.w	r2, r3, r2
 80067f6:	69bb      	ldr	r3, [r7, #24]
 80067f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067fc:	627b      	str	r3, [r7, #36]	; 0x24
 80067fe:	e004      	b.n	800680a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	4a0b      	ldr	r2, [pc, #44]	; (8006830 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006804:	fb02 f303 	mul.w	r3, r2, r3
 8006808:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800680a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680c:	623b      	str	r3, [r7, #32]
      break;
 800680e:	e002      	b.n	8006816 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006810:	4b06      	ldr	r3, [pc, #24]	; (800682c <HAL_RCC_GetSysClockFreq+0xb4>)
 8006812:	623b      	str	r3, [r7, #32]
      break;
 8006814:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006816:	6a3b      	ldr	r3, [r7, #32]
}
 8006818:	4618      	mov	r0, r3
 800681a:	3728      	adds	r7, #40	; 0x28
 800681c:	46bd      	mov	sp, r7
 800681e:	bc90      	pop	{r4, r7}
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop
 8006824:	08008bf0 	.word	0x08008bf0
 8006828:	40021000 	.word	0x40021000
 800682c:	007a1200 	.word	0x007a1200
 8006830:	003d0900 	.word	0x003d0900

08006834 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006834:	b480      	push	{r7}
 8006836:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006838:	4b02      	ldr	r3, [pc, #8]	; (8006844 <HAL_RCC_GetHCLKFreq+0x10>)
 800683a:	681b      	ldr	r3, [r3, #0]
}
 800683c:	4618      	mov	r0, r3
 800683e:	46bd      	mov	sp, r7
 8006840:	bc80      	pop	{r7}
 8006842:	4770      	bx	lr
 8006844:	200001a0 	.word	0x200001a0

08006848 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800684c:	f7ff fff2 	bl	8006834 <HAL_RCC_GetHCLKFreq>
 8006850:	4602      	mov	r2, r0
 8006852:	4b05      	ldr	r3, [pc, #20]	; (8006868 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	0a1b      	lsrs	r3, r3, #8
 8006858:	f003 0307 	and.w	r3, r3, #7
 800685c:	4903      	ldr	r1, [pc, #12]	; (800686c <HAL_RCC_GetPCLK1Freq+0x24>)
 800685e:	5ccb      	ldrb	r3, [r1, r3]
 8006860:	fa22 f303 	lsr.w	r3, r2, r3
}    
 8006864:	4618      	mov	r0, r3
 8006866:	bd80      	pop	{r7, pc}
 8006868:	40021000 	.word	0x40021000
 800686c:	08009604 	.word	0x08009604

08006870 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006874:	f7ff ffde 	bl	8006834 <HAL_RCC_GetHCLKFreq>
 8006878:	4602      	mov	r2, r0
 800687a:	4b05      	ldr	r3, [pc, #20]	; (8006890 <HAL_RCC_GetPCLK2Freq+0x20>)
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	0adb      	lsrs	r3, r3, #11
 8006880:	f003 0307 	and.w	r3, r3, #7
 8006884:	4903      	ldr	r1, [pc, #12]	; (8006894 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006886:	5ccb      	ldrb	r3, [r1, r3]
 8006888:	fa22 f303 	lsr.w	r3, r2, r3
} 
 800688c:	4618      	mov	r0, r3
 800688e:	bd80      	pop	{r7, pc}
 8006890:	40021000 	.word	0x40021000
 8006894:	08009604 	.word	0x08009604

08006898 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006898:	b480      	push	{r7}
 800689a:	b085      	sub	sp, #20
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80068a0:	4b0b      	ldr	r3, [pc, #44]	; (80068d0 <RCC_Delay+0x38>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a0b      	ldr	r2, [pc, #44]	; (80068d4 <RCC_Delay+0x3c>)
 80068a6:	fba2 2303 	umull	r2, r3, r2, r3
 80068aa:	0a5b      	lsrs	r3, r3, #9
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	fb02 f303 	mul.w	r3, r2, r3
 80068b2:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80068b4:	bf00      	nop
}
 80068b6:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	1e5a      	subs	r2, r3, #1
 80068bc:	60fa      	str	r2, [r7, #12]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d1f8      	bne.n	80068b4 <RCC_Delay+0x1c>
}
 80068c2:	bf00      	nop
 80068c4:	bf00      	nop
 80068c6:	3714      	adds	r7, #20
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bc80      	pop	{r7}
 80068cc:	4770      	bx	lr
 80068ce:	bf00      	nop
 80068d0:	200001a0 	.word	0x200001a0
 80068d4:	10624dd3 	.word	0x10624dd3

080068d8 <HAL_SRAM_Init>:
  * @param  Timing: Pointer to SRAM control timing structure 
  * @param  ExtTiming: Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing, FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d101      	bne.n	80068ee <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	e034      	b.n	8006958 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d106      	bne.n	8006908 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006902:	68f8      	ldr	r0, [r7, #12]
 8006904:	f7fb f83e 	bl	8001984 <HAL_SRAM_MspInit>
  }
  
  /* Initialize SRAM control Interface */
  FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	3308      	adds	r3, #8
 8006910:	4619      	mov	r1, r3
 8006912:	4610      	mov	r0, r2
 8006914:	f001 fb1e 	bl	8007f54 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6818      	ldr	r0, [r3, #0]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	461a      	mov	r2, r3
 8006922:	68b9      	ldr	r1, [r7, #8]
 8006924:	f001 fb96 	bl	8008054 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6858      	ldr	r0, [r3, #4]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	689a      	ldr	r2, [r3, #8]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006934:	6879      	ldr	r1, [r7, #4]
 8006936:	f001 fbc1 	bl	80080bc <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	68fa      	ldr	r2, [r7, #12]
 8006940:	6892      	ldr	r2, [r2, #8]
 8006942:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	68fa      	ldr	r2, [r7, #12]
 800694c:	6892      	ldr	r2, [r2, #8]
 800694e:	f041 0101 	orr.w	r1, r1, #1
 8006952:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8006956:	2300      	movs	r3, #0
}
 8006958:	4618      	mov	r0, r3
 800695a:	3710      	adds	r7, #16
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <HAL_TIM_Base_Init>:
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d101      	bne.n	8006972 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	e01d      	b.n	80069ae <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006978:	b2db      	uxtb	r3, r3
 800697a:	2b00      	cmp	r3, #0
 800697c:	d106      	bne.n	800698c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f7fd feda 	bl	8004740 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2202      	movs	r2, #2
 8006990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	3304      	adds	r3, #4
 800699c:	4619      	mov	r1, r3
 800699e:	4610      	mov	r0, r2
 80069a0:	f000 f9f0 	bl	8006d84 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069ac:	2300      	movs	r3, #0
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3708      	adds	r7, #8
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}

080069b6 <HAL_TIM_PWM_Init>:
  *       Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80069b6:	b580      	push	{r7, lr}
 80069b8:	b082      	sub	sp, #8
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d101      	bne.n	80069c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	e01d      	b.n	8006a04 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d106      	bne.n	80069e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 f815 	bl	8006a0c <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2202      	movs	r2, #2
 80069e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	3304      	adds	r3, #4
 80069f2:	4619      	mov	r1, r3
 80069f4:	4610      	mov	r0, r2
 80069f6:	f000 f9c5 	bl	8006d84 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2201      	movs	r2, #1
 80069fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a02:	2300      	movs	r3, #0
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3708      	adds	r7, #8
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}

08006a0c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b083      	sub	sp, #12
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006a14:	bf00      	nop
 8006a16:	370c      	adds	r7, #12
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bc80      	pop	{r7}
 8006a1c:	4770      	bx	lr
	...

08006a20 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	60f8      	str	r0, [r7, #12]
 8006a28:	60b9      	str	r1, [r7, #8]
 8006a2a:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d101      	bne.n	8006a3a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006a36:	2302      	movs	r3, #2
 8006a38:	e0b4      	b.n	8006ba4 <HAL_TIM_PWM_ConfigChannel+0x184>
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2202      	movs	r2, #2
 8006a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2b0c      	cmp	r3, #12
 8006a4e:	f200 809f 	bhi.w	8006b90 <HAL_TIM_PWM_ConfigChannel+0x170>
 8006a52:	a201      	add	r2, pc, #4	; (adr r2, 8006a58 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a58:	08006a8d 	.word	0x08006a8d
 8006a5c:	08006b91 	.word	0x08006b91
 8006a60:	08006b91 	.word	0x08006b91
 8006a64:	08006b91 	.word	0x08006b91
 8006a68:	08006acd 	.word	0x08006acd
 8006a6c:	08006b91 	.word	0x08006b91
 8006a70:	08006b91 	.word	0x08006b91
 8006a74:	08006b91 	.word	0x08006b91
 8006a78:	08006b0f 	.word	0x08006b0f
 8006a7c:	08006b91 	.word	0x08006b91
 8006a80:	08006b91 	.word	0x08006b91
 8006a84:	08006b91 	.word	0x08006b91
 8006a88:	08006b4f 	.word	0x08006b4f
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	68b9      	ldr	r1, [r7, #8]
 8006a92:	4618      	mov	r0, r3
 8006a94:	f000 f9f4 	bl	8006e80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	699a      	ldr	r2, [r3, #24]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f042 0208 	orr.w	r2, r2, #8
 8006aa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	699a      	ldr	r2, [r3, #24]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f022 0204 	bic.w	r2, r2, #4
 8006ab6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	6999      	ldr	r1, [r3, #24]
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	691a      	ldr	r2, [r3, #16]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	430a      	orrs	r2, r1
 8006ac8:	619a      	str	r2, [r3, #24]
    }
    break;
 8006aca:	e062      	b.n	8006b92 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	68b9      	ldr	r1, [r7, #8]
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f000 fa4a 	bl	8006f6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	699a      	ldr	r2, [r3, #24]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ae6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	699a      	ldr	r2, [r3, #24]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006af6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	6999      	ldr	r1, [r3, #24]
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	691b      	ldr	r3, [r3, #16]
 8006b02:	021a      	lsls	r2, r3, #8
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	430a      	orrs	r2, r1
 8006b0a:	619a      	str	r2, [r3, #24]
    }
    break;
 8006b0c:	e041      	b.n	8006b92 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	68b9      	ldr	r1, [r7, #8]
 8006b14:	4618      	mov	r0, r3
 8006b16:	f000 faa3 	bl	8007060 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	69da      	ldr	r2, [r3, #28]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f042 0208 	orr.w	r2, r2, #8
 8006b28:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	69da      	ldr	r2, [r3, #28]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f022 0204 	bic.w	r2, r2, #4
 8006b38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	69d9      	ldr	r1, [r3, #28]
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	691a      	ldr	r2, [r3, #16]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	430a      	orrs	r2, r1
 8006b4a:	61da      	str	r2, [r3, #28]
    }
    break;
 8006b4c:	e021      	b.n	8006b92 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	68b9      	ldr	r1, [r7, #8]
 8006b54:	4618      	mov	r0, r3
 8006b56:	f000 fafd 	bl	8007154 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	69da      	ldr	r2, [r3, #28]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b68:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	69da      	ldr	r2, [r3, #28]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	69d9      	ldr	r1, [r3, #28]
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	691b      	ldr	r3, [r3, #16]
 8006b84:	021a      	lsls	r2, r3, #8
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	430a      	orrs	r2, r1
 8006b8c:	61da      	str	r2, [r3, #28]
    }
    break;
 8006b8e:	e000      	b.n	8006b92 <HAL_TIM_PWM_ConfigChannel+0x172>

    default:
    break;
 8006b90:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2201      	movs	r2, #1
 8006b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3710      	adds	r7, #16
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d101      	bne.n	8006bc8 <HAL_TIM_ConfigClockSource+0x1c>
 8006bc4:	2302      	movs	r3, #2
 8006bc6:	e0d8      	b.n	8006d7a <HAL_TIM_ConfigClockSource+0x1ce>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2202      	movs	r2, #2
 8006bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006be6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006bee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	68fa      	ldr	r2, [r7, #12]
 8006bf6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c00:	d052      	beq.n	8006ca8 <HAL_TIM_ConfigClockSource+0xfc>
 8006c02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c06:	f200 80ae 	bhi.w	8006d66 <HAL_TIM_ConfigClockSource+0x1ba>
 8006c0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c0e:	d027      	beq.n	8006c60 <HAL_TIM_ConfigClockSource+0xb4>
 8006c10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c14:	f200 80a7 	bhi.w	8006d66 <HAL_TIM_ConfigClockSource+0x1ba>
 8006c18:	2b70      	cmp	r3, #112	; 0x70
 8006c1a:	d02a      	beq.n	8006c72 <HAL_TIM_ConfigClockSource+0xc6>
 8006c1c:	2b70      	cmp	r3, #112	; 0x70
 8006c1e:	f200 80a2 	bhi.w	8006d66 <HAL_TIM_ConfigClockSource+0x1ba>
 8006c22:	2b60      	cmp	r3, #96	; 0x60
 8006c24:	d063      	beq.n	8006cee <HAL_TIM_ConfigClockSource+0x142>
 8006c26:	2b60      	cmp	r3, #96	; 0x60
 8006c28:	f200 809d 	bhi.w	8006d66 <HAL_TIM_ConfigClockSource+0x1ba>
 8006c2c:	2b50      	cmp	r3, #80	; 0x50
 8006c2e:	d04e      	beq.n	8006cce <HAL_TIM_ConfigClockSource+0x122>
 8006c30:	2b50      	cmp	r3, #80	; 0x50
 8006c32:	f200 8098 	bhi.w	8006d66 <HAL_TIM_ConfigClockSource+0x1ba>
 8006c36:	2b40      	cmp	r3, #64	; 0x40
 8006c38:	d069      	beq.n	8006d0e <HAL_TIM_ConfigClockSource+0x162>
 8006c3a:	2b40      	cmp	r3, #64	; 0x40
 8006c3c:	f200 8093 	bhi.w	8006d66 <HAL_TIM_ConfigClockSource+0x1ba>
 8006c40:	2b30      	cmp	r3, #48	; 0x30
 8006c42:	f000 8089 	beq.w	8006d58 <HAL_TIM_ConfigClockSource+0x1ac>
 8006c46:	2b30      	cmp	r3, #48	; 0x30
 8006c48:	f200 808d 	bhi.w	8006d66 <HAL_TIM_ConfigClockSource+0x1ba>
 8006c4c:	2b20      	cmp	r3, #32
 8006c4e:	d07c      	beq.n	8006d4a <HAL_TIM_ConfigClockSource+0x19e>
 8006c50:	2b20      	cmp	r3, #32
 8006c52:	f200 8088 	bhi.w	8006d66 <HAL_TIM_ConfigClockSource+0x1ba>
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d069      	beq.n	8006d2e <HAL_TIM_ConfigClockSource+0x182>
 8006c5a:	2b10      	cmp	r3, #16
 8006c5c:	d06e      	beq.n	8006d3c <HAL_TIM_ConfigClockSource+0x190>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 8006c5e:	e082      	b.n	8006d66 <HAL_TIM_ConfigClockSource+0x1ba>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	689a      	ldr	r2, [r3, #8]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f022 0207 	bic.w	r2, r2, #7
 8006c6e:	609a      	str	r2, [r3, #8]
    break;
 8006c70:	e07a      	b.n	8006d68 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6818      	ldr	r0, [r3, #0]
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	6899      	ldr	r1, [r3, #8]
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	685a      	ldr	r2, [r3, #4]
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	68db      	ldr	r3, [r3, #12]
 8006c82:	f000 fb45 	bl	8007310 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006c94:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006c9c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	68fa      	ldr	r2, [r7, #12]
 8006ca4:	609a      	str	r2, [r3, #8]
    break;
 8006ca6:	e05f      	b.n	8006d68 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6818      	ldr	r0, [r3, #0]
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	6899      	ldr	r1, [r3, #8]
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	685a      	ldr	r2, [r3, #4]
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	f000 fb2a 	bl	8007310 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	689a      	ldr	r2, [r3, #8]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006cca:	609a      	str	r2, [r3, #8]
    break;
 8006ccc:	e04c      	b.n	8006d68 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6818      	ldr	r0, [r3, #0]
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	6859      	ldr	r1, [r3, #4]
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	68db      	ldr	r3, [r3, #12]
 8006cda:	461a      	mov	r2, r3
 8006cdc:	f000 fa94 	bl	8007208 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	2150      	movs	r1, #80	; 0x50
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f000 faf3 	bl	80072d2 <TIM_ITRx_SetConfig>
    break;
 8006cec:	e03c      	b.n	8006d68 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6818      	ldr	r0, [r3, #0]
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	6859      	ldr	r1, [r3, #4]
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	68db      	ldr	r3, [r3, #12]
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	f000 fab6 	bl	800726c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	2160      	movs	r1, #96	; 0x60
 8006d06:	4618      	mov	r0, r3
 8006d08:	f000 fae3 	bl	80072d2 <TIM_ITRx_SetConfig>
    break;
 8006d0c:	e02c      	b.n	8006d68 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6818      	ldr	r0, [r3, #0]
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	6859      	ldr	r1, [r3, #4]
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	f000 fa74 	bl	8007208 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2140      	movs	r1, #64	; 0x40
 8006d26:	4618      	mov	r0, r3
 8006d28:	f000 fad3 	bl	80072d2 <TIM_ITRx_SetConfig>
    break;
 8006d2c:	e01c      	b.n	8006d68 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	2100      	movs	r1, #0
 8006d34:	4618      	mov	r0, r3
 8006d36:	f000 facc 	bl	80072d2 <TIM_ITRx_SetConfig>
    break;
 8006d3a:	e015      	b.n	8006d68 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	2110      	movs	r1, #16
 8006d42:	4618      	mov	r0, r3
 8006d44:	f000 fac5 	bl	80072d2 <TIM_ITRx_SetConfig>
    break;
 8006d48:	e00e      	b.n	8006d68 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	2120      	movs	r1, #32
 8006d50:	4618      	mov	r0, r3
 8006d52:	f000 fabe 	bl	80072d2 <TIM_ITRx_SetConfig>
    break;
 8006d56:	e007      	b.n	8006d68 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2130      	movs	r1, #48	; 0x30
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f000 fab7 	bl	80072d2 <TIM_ITRx_SetConfig>
    break;
 8006d64:	e000      	b.n	8006d68 <HAL_TIM_ConfigClockSource+0x1bc>
    break;
 8006d66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3710      	adds	r7, #16
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
	...

08006d84 <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b085      	sub	sp, #20
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	4a34      	ldr	r2, [pc, #208]	; (8006e6c <TIM_Base_SetConfig+0xe8>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d013      	beq.n	8006dc8 <TIM_Base_SetConfig+0x44>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	4a33      	ldr	r2, [pc, #204]	; (8006e70 <TIM_Base_SetConfig+0xec>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d00f      	beq.n	8006dc8 <TIM_Base_SetConfig+0x44>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dae:	d00b      	beq.n	8006dc8 <TIM_Base_SetConfig+0x44>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	4a30      	ldr	r2, [pc, #192]	; (8006e74 <TIM_Base_SetConfig+0xf0>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d007      	beq.n	8006dc8 <TIM_Base_SetConfig+0x44>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4a2f      	ldr	r2, [pc, #188]	; (8006e78 <TIM_Base_SetConfig+0xf4>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d003      	beq.n	8006dc8 <TIM_Base_SetConfig+0x44>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4a2e      	ldr	r2, [pc, #184]	; (8006e7c <TIM_Base_SetConfig+0xf8>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d108      	bne.n	8006dda <TIM_Base_SetConfig+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	68fa      	ldr	r2, [r7, #12]
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a23      	ldr	r2, [pc, #140]	; (8006e6c <TIM_Base_SetConfig+0xe8>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d013      	beq.n	8006e0a <TIM_Base_SetConfig+0x86>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4a22      	ldr	r2, [pc, #136]	; (8006e70 <TIM_Base_SetConfig+0xec>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d00f      	beq.n	8006e0a <TIM_Base_SetConfig+0x86>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006df0:	d00b      	beq.n	8006e0a <TIM_Base_SetConfig+0x86>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4a1f      	ldr	r2, [pc, #124]	; (8006e74 <TIM_Base_SetConfig+0xf0>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d007      	beq.n	8006e0a <TIM_Base_SetConfig+0x86>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	4a1e      	ldr	r2, [pc, #120]	; (8006e78 <TIM_Base_SetConfig+0xf4>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d003      	beq.n	8006e0a <TIM_Base_SetConfig+0x86>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4a1d      	ldr	r2, [pc, #116]	; (8006e7c <TIM_Base_SetConfig+0xf8>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d108      	bne.n	8006e1c <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	68fa      	ldr	r2, [r7, #12]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e22:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	695b      	ldr	r3, [r3, #20]
 8006e28:	68fa      	ldr	r2, [r7, #12]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	68fa      	ldr	r2, [r7, #12]
 8006e32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	689a      	ldr	r2, [r3, #8]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	4a09      	ldr	r2, [pc, #36]	; (8006e6c <TIM_Base_SetConfig+0xe8>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d003      	beq.n	8006e54 <TIM_Base_SetConfig+0xd0>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	4a08      	ldr	r2, [pc, #32]	; (8006e70 <TIM_Base_SetConfig+0xec>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d103      	bne.n	8006e5c <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	691a      	ldr	r2, [r3, #16]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	615a      	str	r2, [r3, #20]
}
 8006e62:	bf00      	nop
 8006e64:	3714      	adds	r7, #20
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bc80      	pop	{r7}
 8006e6a:	4770      	bx	lr
 8006e6c:	40012c00 	.word	0x40012c00
 8006e70:	40013400 	.word	0x40013400
 8006e74:	40000400 	.word	0x40000400
 8006e78:	40000800 	.word	0x40000800
 8006e7c:	40000c00 	.word	0x40000c00

08006e80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b087      	sub	sp, #28
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8006e92:	2300      	movs	r3, #0
 8006e94:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a1b      	ldr	r3, [r3, #32]
 8006e9a:	f023 0201 	bic.w	r2, r3, #1
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6a1b      	ldr	r3, [r3, #32]
 8006ea6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	699b      	ldr	r3, [r3, #24]
 8006eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f023 0303 	bic.w	r3, r3, #3
 8006ec2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	68fa      	ldr	r2, [r7, #12]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	f023 0302 	bic.w	r3, r3, #2
 8006ed4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	697a      	ldr	r2, [r7, #20]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	4a20      	ldr	r2, [pc, #128]	; (8006f64 <TIM_OC1_SetConfig+0xe4>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d003      	beq.n	8006ef0 <TIM_OC1_SetConfig+0x70>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	4a1f      	ldr	r2, [pc, #124]	; (8006f68 <TIM_OC1_SetConfig+0xe8>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d10c      	bne.n	8006f0a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	f023 0308 	bic.w	r3, r3, #8
 8006ef6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	697a      	ldr	r2, [r7, #20]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	f023 0304 	bic.w	r3, r3, #4
 8006f08:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4a15      	ldr	r2, [pc, #84]	; (8006f64 <TIM_OC1_SetConfig+0xe4>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d003      	beq.n	8006f1a <TIM_OC1_SetConfig+0x9a>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a14      	ldr	r2, [pc, #80]	; (8006f68 <TIM_OC1_SetConfig+0xe8>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d111      	bne.n	8006f3e <TIM_OC1_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	695b      	ldr	r3, [r3, #20]
 8006f2e:	693a      	ldr	r2, [r7, #16]
 8006f30:	4313      	orrs	r3, r2
 8006f32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	699b      	ldr	r3, [r3, #24]
 8006f38:	693a      	ldr	r2, [r7, #16]
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	693a      	ldr	r2, [r7, #16]
 8006f42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	68fa      	ldr	r2, [r7, #12]
 8006f48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	685a      	ldr	r2, [r3, #4]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	697a      	ldr	r2, [r7, #20]
 8006f56:	621a      	str	r2, [r3, #32]
}
 8006f58:	bf00      	nop
 8006f5a:	371c      	adds	r7, #28
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bc80      	pop	{r7}
 8006f60:	4770      	bx	lr
 8006f62:	bf00      	nop
 8006f64:	40012c00 	.word	0x40012c00
 8006f68:	40013400 	.word	0x40013400

08006f6c <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b087      	sub	sp, #28
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8006f76:	2300      	movs	r3, #0
 8006f78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6a1b      	ldr	r3, [r3, #32]
 8006f86:	f023 0210 	bic.w	r2, r3, #16
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a1b      	ldr	r3, [r3, #32]
 8006f92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	699b      	ldr	r3, [r3, #24]
 8006f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	021b      	lsls	r3, r3, #8
 8006fb6:	68fa      	ldr	r2, [r7, #12]
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	f023 0320 	bic.w	r3, r3, #32
 8006fc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	011b      	lsls	r3, r3, #4
 8006fca:	697a      	ldr	r2, [r7, #20]
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4a21      	ldr	r2, [pc, #132]	; (8007058 <TIM_OC2_SetConfig+0xec>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d003      	beq.n	8006fe0 <TIM_OC2_SetConfig+0x74>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4a20      	ldr	r2, [pc, #128]	; (800705c <TIM_OC2_SetConfig+0xf0>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d10d      	bne.n	8006ffc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fe6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	68db      	ldr	r3, [r3, #12]
 8006fec:	011b      	lsls	r3, r3, #4
 8006fee:	697a      	ldr	r2, [r7, #20]
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ffa:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	4a16      	ldr	r2, [pc, #88]	; (8007058 <TIM_OC2_SetConfig+0xec>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d003      	beq.n	800700c <TIM_OC2_SetConfig+0xa0>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	4a15      	ldr	r2, [pc, #84]	; (800705c <TIM_OC2_SetConfig+0xf0>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d113      	bne.n	8007034 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007012:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800701a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	695b      	ldr	r3, [r3, #20]
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	693a      	ldr	r2, [r7, #16]
 8007024:	4313      	orrs	r3, r2
 8007026:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	699b      	ldr	r3, [r3, #24]
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	693a      	ldr	r2, [r7, #16]
 8007030:	4313      	orrs	r3, r2
 8007032:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	693a      	ldr	r2, [r7, #16]
 8007038:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	68fa      	ldr	r2, [r7, #12]
 800703e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	685a      	ldr	r2, [r3, #4]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	697a      	ldr	r2, [r7, #20]
 800704c:	621a      	str	r2, [r3, #32]
}
 800704e:	bf00      	nop
 8007050:	371c      	adds	r7, #28
 8007052:	46bd      	mov	sp, r7
 8007054:	bc80      	pop	{r7}
 8007056:	4770      	bx	lr
 8007058:	40012c00 	.word	0x40012c00
 800705c:	40013400 	.word	0x40013400

08007060 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007060:	b480      	push	{r7}
 8007062:	b087      	sub	sp, #28
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800706a:	2300      	movs	r3, #0
 800706c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800706e:	2300      	movs	r3, #0
 8007070:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8007072:	2300      	movs	r3, #0
 8007074:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a1b      	ldr	r3, [r3, #32]
 800707a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6a1b      	ldr	r3, [r3, #32]
 8007086:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	69db      	ldr	r3, [r3, #28]
 8007092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800709a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f023 0303 	bic.w	r3, r3, #3
 80070a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	021b      	lsls	r3, r3, #8
 80070bc:	697a      	ldr	r2, [r7, #20]
 80070be:	4313      	orrs	r3, r2
 80070c0:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	4a21      	ldr	r2, [pc, #132]	; (800714c <TIM_OC3_SetConfig+0xec>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d003      	beq.n	80070d2 <TIM_OC3_SetConfig+0x72>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4a20      	ldr	r2, [pc, #128]	; (8007150 <TIM_OC3_SetConfig+0xf0>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d10d      	bne.n	80070ee <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	68db      	ldr	r3, [r3, #12]
 80070de:	021b      	lsls	r3, r3, #8
 80070e0:	697a      	ldr	r2, [r7, #20]
 80070e2:	4313      	orrs	r3, r2
 80070e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070ec:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4a16      	ldr	r2, [pc, #88]	; (800714c <TIM_OC3_SetConfig+0xec>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d003      	beq.n	80070fe <TIM_OC3_SetConfig+0x9e>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4a15      	ldr	r2, [pc, #84]	; (8007150 <TIM_OC3_SetConfig+0xf0>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d113      	bne.n	8007126 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007104:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800710c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	695b      	ldr	r3, [r3, #20]
 8007112:	011b      	lsls	r3, r3, #4
 8007114:	693a      	ldr	r2, [r7, #16]
 8007116:	4313      	orrs	r3, r2
 8007118:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	699b      	ldr	r3, [r3, #24]
 800711e:	011b      	lsls	r3, r3, #4
 8007120:	693a      	ldr	r2, [r7, #16]
 8007122:	4313      	orrs	r3, r2
 8007124:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	693a      	ldr	r2, [r7, #16]
 800712a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	68fa      	ldr	r2, [r7, #12]
 8007130:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	685a      	ldr	r2, [r3, #4]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	697a      	ldr	r2, [r7, #20]
 800713e:	621a      	str	r2, [r3, #32]
}
 8007140:	bf00      	nop
 8007142:	371c      	adds	r7, #28
 8007144:	46bd      	mov	sp, r7
 8007146:	bc80      	pop	{r7}
 8007148:	4770      	bx	lr
 800714a:	bf00      	nop
 800714c:	40012c00 	.word	0x40012c00
 8007150:	40013400 	.word	0x40013400

08007154 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007154:	b480      	push	{r7}
 8007156:	b087      	sub	sp, #28
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800715e:	2300      	movs	r3, #0
 8007160:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8007162:	2300      	movs	r3, #0
 8007164:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8007166:	2300      	movs	r3, #0
 8007168:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6a1b      	ldr	r3, [r3, #32]
 800716e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6a1b      	ldr	r3, [r3, #32]
 800717a:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	69db      	ldr	r3, [r3, #28]
 8007186:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800718e:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007196:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	021b      	lsls	r3, r3, #8
 800719e:	693a      	ldr	r2, [r7, #16]
 80071a0:	4313      	orrs	r3, r2
 80071a2:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071aa:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	031b      	lsls	r3, r3, #12
 80071b2:	68fa      	ldr	r2, [r7, #12]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4a11      	ldr	r2, [pc, #68]	; (8007200 <TIM_OC4_SetConfig+0xac>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d003      	beq.n	80071c8 <TIM_OC4_SetConfig+0x74>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	4a10      	ldr	r2, [pc, #64]	; (8007204 <TIM_OC4_SetConfig+0xb0>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d109      	bne.n	80071dc <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	695b      	ldr	r3, [r3, #20]
 80071d4:	019b      	lsls	r3, r3, #6
 80071d6:	697a      	ldr	r2, [r7, #20]
 80071d8:	4313      	orrs	r3, r2
 80071da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	697a      	ldr	r2, [r7, #20]
 80071e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	693a      	ldr	r2, [r7, #16]
 80071e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	685a      	ldr	r2, [r3, #4]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	68fa      	ldr	r2, [r7, #12]
 80071f4:	621a      	str	r2, [r3, #32]
}
 80071f6:	bf00      	nop
 80071f8:	371c      	adds	r7, #28
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bc80      	pop	{r7}
 80071fe:	4770      	bx	lr
 8007200:	40012c00 	.word	0x40012c00
 8007204:	40013400 	.word	0x40013400

08007208 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007208:	b480      	push	{r7}
 800720a:	b087      	sub	sp, #28
 800720c:	af00      	add	r7, sp, #0
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	60b9      	str	r1, [r7, #8]
 8007212:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8007214:	2300      	movs	r3, #0
 8007216:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8007218:	2300      	movs	r3, #0
 800721a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6a1b      	ldr	r3, [r3, #32]
 8007220:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	6a1b      	ldr	r3, [r3, #32]
 8007226:	f023 0201 	bic.w	r2, r3, #1
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	699b      	ldr	r3, [r3, #24]
 8007232:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800723a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	011b      	lsls	r3, r3, #4
 8007240:	697a      	ldr	r2, [r7, #20]
 8007242:	4313      	orrs	r3, r2
 8007244:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	f023 030a 	bic.w	r3, r3, #10
 800724c:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 800724e:	693a      	ldr	r2, [r7, #16]
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	4313      	orrs	r3, r2
 8007254:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	697a      	ldr	r2, [r7, #20]
 800725a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	693a      	ldr	r2, [r7, #16]
 8007260:	621a      	str	r2, [r3, #32]
}
 8007262:	bf00      	nop
 8007264:	371c      	adds	r7, #28
 8007266:	46bd      	mov	sp, r7
 8007268:	bc80      	pop	{r7}
 800726a:	4770      	bx	lr

0800726c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800726c:	b480      	push	{r7}
 800726e:	b087      	sub	sp, #28
 8007270:	af00      	add	r7, sp, #0
 8007272:	60f8      	str	r0, [r7, #12]
 8007274:	60b9      	str	r1, [r7, #8]
 8007276:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8007278:	2300      	movs	r3, #0
 800727a:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 800727c:	2300      	movs	r3, #0
 800727e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	6a1b      	ldr	r3, [r3, #32]
 8007284:	f023 0210 	bic.w	r2, r3, #16
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	699b      	ldr	r3, [r3, #24]
 8007290:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	6a1b      	ldr	r3, [r3, #32]
 8007296:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800729e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	031b      	lsls	r3, r3, #12
 80072a4:	697a      	ldr	r2, [r7, #20]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80072b0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	011b      	lsls	r3, r3, #4
 80072b6:	693a      	ldr	r2, [r7, #16]
 80072b8:	4313      	orrs	r3, r2
 80072ba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	697a      	ldr	r2, [r7, #20]
 80072c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	693a      	ldr	r2, [r7, #16]
 80072c6:	621a      	str	r2, [r3, #32]
}
 80072c8:	bf00      	nop
 80072ca:	371c      	adds	r7, #28
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bc80      	pop	{r7}
 80072d0:	4770      	bx	lr

080072d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 80072d2:	b480      	push	{r7}
 80072d4:	b085      	sub	sp, #20
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	6078      	str	r0, [r7, #4]
 80072da:	460b      	mov	r3, r1
 80072dc:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 80072de:	2300      	movs	r3, #0
 80072e0:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072ee:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80072f0:	887b      	ldrh	r3, [r7, #2]
 80072f2:	f043 0307 	orr.w	r3, r3, #7
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	461a      	mov	r2, r3
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	4313      	orrs	r3, r2
 80072fe:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	68fa      	ldr	r2, [r7, #12]
 8007304:	609a      	str	r2, [r3, #8]
}
 8007306:	bf00      	nop
 8007308:	3714      	adds	r7, #20
 800730a:	46bd      	mov	sp, r7
 800730c:	bc80      	pop	{r7}
 800730e:	4770      	bx	lr

08007310 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007310:	b480      	push	{r7}
 8007312:	b087      	sub	sp, #28
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	607a      	str	r2, [r7, #4]
 800731c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 800731e:	2300      	movs	r3, #0
 8007320:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800732e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	021a      	lsls	r2, r3, #8
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	431a      	orrs	r2, r3
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	4313      	orrs	r3, r2
 800733c:	697a      	ldr	r2, [r7, #20]
 800733e:	4313      	orrs	r3, r2
 8007340:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	697a      	ldr	r2, [r7, #20]
 8007346:	609a      	str	r2, [r3, #8]
}
 8007348:	bf00      	nop
 800734a:	371c      	adds	r7, #28
 800734c:	46bd      	mov	sp, r7
 800734e:	bc80      	pop	{r7}
 8007350:	4770      	bx	lr

08007352 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007352:	b480      	push	{r7}
 8007354:	b085      	sub	sp, #20
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
 800735a:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0U;
 800735c:	2300      	movs	r3, #0
 800735e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007366:	2b01      	cmp	r3, #1
 8007368:	d101      	bne.n	800736e <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800736a:	2302      	movs	r3, #2
 800736c:	e044      	b.n	80073f8 <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2201      	movs	r2, #1
 8007372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	68db      	ldr	r3, [r3, #12]
 8007380:	4313      	orrs	r3, r2
 8007382:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	4313      	orrs	r3, r2
 8007390:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	4313      	orrs	r3, r2
 800739e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	691b      	ldr	r3, [r3, #16]
 80073b8:	4313      	orrs	r3, r2
 80073ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	695b      	ldr	r3, [r3, #20]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	699b      	ldr	r3, [r3, #24]
 80073d4:	4313      	orrs	r3, r2
 80073d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	699b      	ldr	r3, [r3, #24]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	68fa      	ldr	r2, [r7, #12]
 80073ec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073f6:	2300      	movs	r3, #0
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3714      	adds	r7, #20
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bc80      	pop	{r7}
 8007400:	4770      	bx	lr

08007402 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8007402:	b480      	push	{r7}
 8007404:	b083      	sub	sp, #12
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
 800740a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007412:	2b01      	cmp	r3, #1
 8007414:	d101      	bne.n	800741a <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007416:	2302      	movs	r3, #2
 8007418:	e032      	b.n	8007480 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2201      	movs	r2, #1
 800741e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2202      	movs	r2, #2
 8007426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	685a      	ldr	r2, [r3, #4]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007438:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	6859      	ldr	r1, [r3, #4]
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	430a      	orrs	r2, r1
 800744a:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	689a      	ldr	r2, [r3, #8]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800745a:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	6899      	ldr	r1, [r3, #8]
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	685a      	ldr	r2, [r3, #4]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	430a      	orrs	r2, r1
 800746c:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2201      	movs	r2, #1
 8007472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800747e:	2300      	movs	r3, #0
}
 8007480:	4618      	mov	r0, r3
 8007482:	370c      	adds	r7, #12
 8007484:	46bd      	mov	sp, r7
 8007486:	bc80      	pop	{r7}
 8007488:	4770      	bx	lr

0800748a <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800748a:	b580      	push	{r7, lr}
 800748c:	b082      	sub	sp, #8
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d101      	bne.n	800749c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007498:	2301      	movs	r3, #1
 800749a:	e03f      	b.n	800751c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d106      	bne.n	80074b6 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f7fd fa23 	bl	80048fc <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2224      	movs	r2, #36	; 0x24
 80074ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	68da      	ldr	r2, [r3, #12]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80074cc:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 fc28 	bl	8007d24 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	691a      	ldr	r2, [r3, #16]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80074e2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	695a      	ldr	r2, [r3, #20]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80074f2:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	68da      	ldr	r2, [r3, #12]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007502:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2220      	movs	r2, #32
 800750e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2220      	movs	r2, #32
 8007516:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 800751a:	2300      	movs	r3, #0
}
 800751c:	4618      	mov	r0, r3
 800751e:	3708      	adds	r7, #8
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b088      	sub	sp, #32
 8007528:	af02      	add	r7, sp, #8
 800752a:	60f8      	str	r0, [r7, #12]
 800752c:	60b9      	str	r1, [r7, #8]
 800752e:	603b      	str	r3, [r7, #0]
 8007530:	4613      	mov	r3, r2
 8007532:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8007534:	2300      	movs	r3, #0
 8007536:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800753e:	b2db      	uxtb	r3, r3
 8007540:	2b20      	cmp	r3, #32
 8007542:	f040 8083 	bne.w	800764c <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL) || (Size == 0U))
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d002      	beq.n	8007552 <HAL_UART_Transmit+0x2e>
 800754c:	88fb      	ldrh	r3, [r7, #6]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d101      	bne.n	8007556 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8007552:	2301      	movs	r3, #1
 8007554:	e07b      	b.n	800764e <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800755c:	2b01      	cmp	r3, #1
 800755e:	d101      	bne.n	8007564 <HAL_UART_Transmit+0x40>
 8007560:	2302      	movs	r3, #2
 8007562:	e074      	b.n	800764e <HAL_UART_Transmit+0x12a>
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2201      	movs	r2, #1
 8007568:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2200      	movs	r2, #0
 8007570:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2221      	movs	r2, #33	; 0x21
 8007576:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800757a:	f7fd fe75 	bl	8005268 <HAL_GetTick>
 800757e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	88fa      	ldrh	r2, [r7, #6]
 8007584:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	88fa      	ldrh	r2, [r7, #6]
 800758a:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 800758c:	e042      	b.n	8007614 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007592:	b29b      	uxth	r3, r3
 8007594:	3b01      	subs	r3, #1
 8007596:	b29a      	uxth	r2, r3
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075a4:	d122      	bne.n	80075ec <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	9300      	str	r3, [sp, #0]
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	2200      	movs	r2, #0
 80075ae:	2180      	movs	r1, #128	; 0x80
 80075b0:	68f8      	ldr	r0, [r7, #12]
 80075b2:	f000 fa4e 	bl	8007a52 <UART_WaitOnFlagUntilTimeout>
 80075b6:	4603      	mov	r3, r0
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d001      	beq.n	80075c0 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80075bc:	2303      	movs	r3, #3
 80075be:	e046      	b.n	800764e <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	881b      	ldrh	r3, [r3, #0]
 80075c8:	461a      	mov	r2, r3
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075d2:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	691b      	ldr	r3, [r3, #16]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d103      	bne.n	80075e4 <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	3302      	adds	r3, #2
 80075e0:	60bb      	str	r3, [r7, #8]
 80075e2:	e017      	b.n	8007614 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData +=1U;
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	3301      	adds	r3, #1
 80075e8:	60bb      	str	r3, [r7, #8]
 80075ea:	e013      	b.n	8007614 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	9300      	str	r3, [sp, #0]
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	2200      	movs	r2, #0
 80075f4:	2180      	movs	r1, #128	; 0x80
 80075f6:	68f8      	ldr	r0, [r7, #12]
 80075f8:	f000 fa2b 	bl	8007a52 <UART_WaitOnFlagUntilTimeout>
 80075fc:	4603      	mov	r3, r0
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d001      	beq.n	8007606 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8007602:	2303      	movs	r3, #3
 8007604:	e023      	b.n	800764e <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	1c5a      	adds	r2, r3, #1
 800760a:	60ba      	str	r2, [r7, #8]
 800760c:	781a      	ldrb	r2, [r3, #0]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007618:	b29b      	uxth	r3, r3
 800761a:	2b00      	cmp	r3, #0
 800761c:	d1b7      	bne.n	800758e <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	9300      	str	r3, [sp, #0]
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	2200      	movs	r2, #0
 8007626:	2140      	movs	r1, #64	; 0x40
 8007628:	68f8      	ldr	r0, [r7, #12]
 800762a:	f000 fa12 	bl	8007a52 <UART_WaitOnFlagUntilTimeout>
 800762e:	4603      	mov	r3, r0
 8007630:	2b00      	cmp	r3, #0
 8007632:	d001      	beq.n	8007638 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007634:	2303      	movs	r3, #3
 8007636:	e00a      	b.n	800764e <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2220      	movs	r2, #32
 800763c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2200      	movs	r2, #0
 8007644:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8007648:	2300      	movs	r3, #0
 800764a:	e000      	b.n	800764e <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800764c:	2302      	movs	r3, #2
  }
}
 800764e:	4618      	mov	r0, r3
 8007650:	3718      	adds	r7, #24
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}

08007656 <HAL_UART_Transmit_IT>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007656:	b480      	push	{r7}
 8007658:	b085      	sub	sp, #20
 800765a:	af00      	add	r7, sp, #0
 800765c:	60f8      	str	r0, [r7, #12]
 800765e:	60b9      	str	r1, [r7, #8]
 8007660:	4613      	mov	r3, r2
 8007662:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800766a:	b2db      	uxtb	r3, r3
 800766c:	2b20      	cmp	r3, #32
 800766e:	d130      	bne.n	80076d2 <HAL_UART_Transmit_IT+0x7c>
  {
    if((pData == NULL) || (Size == 0U)) 
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d002      	beq.n	800767c <HAL_UART_Transmit_IT+0x26>
 8007676:	88fb      	ldrh	r3, [r7, #6]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d101      	bne.n	8007680 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800767c:	2301      	movs	r3, #1
 800767e:	e029      	b.n	80076d4 <HAL_UART_Transmit_IT+0x7e>
    }
    /* Process Locked */
    __HAL_LOCK(huart);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007686:	2b01      	cmp	r3, #1
 8007688:	d101      	bne.n	800768e <HAL_UART_Transmit_IT+0x38>
 800768a:	2302      	movs	r3, #2
 800768c:	e022      	b.n	80076d4 <HAL_UART_Transmit_IT+0x7e>
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2201      	movs	r2, #1
 8007692:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	68ba      	ldr	r2, [r7, #8]
 800769a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	88fa      	ldrh	r2, [r7, #6]
 80076a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	88fa      	ldrh	r2, [r7, #6]
 80076a6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2200      	movs	r2, #0
 80076ac:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2221      	movs	r2, #33	; 0x21
 80076b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2200      	movs	r2, #0
 80076ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	68da      	ldr	r2, [r3, #12]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80076cc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80076ce:	2300      	movs	r3, #0
 80076d0:	e000      	b.n	80076d4 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80076d2:	2302      	movs	r3, #2
  }
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3714      	adds	r7, #20
 80076d8:	46bd      	mov	sp, r7
 80076da:	bc80      	pop	{r7}
 80076dc:	4770      	bx	lr

080076de <HAL_UART_Receive_IT>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076de:	b480      	push	{r7}
 80076e0:	b085      	sub	sp, #20
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	60f8      	str	r0, [r7, #12]
 80076e6:	60b9      	str	r1, [r7, #8]
 80076e8:	4613      	mov	r3, r2
 80076ea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	2b20      	cmp	r3, #32
 80076f6:	d140      	bne.n	800777a <HAL_UART_Receive_IT+0x9c>
  {
    if((pData == NULL) || (Size == 0U))
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d002      	beq.n	8007704 <HAL_UART_Receive_IT+0x26>
 80076fe:	88fb      	ldrh	r3, [r7, #6]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d101      	bne.n	8007708 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	e039      	b.n	800777c <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800770e:	2b01      	cmp	r3, #1
 8007710:	d101      	bne.n	8007716 <HAL_UART_Receive_IT+0x38>
 8007712:	2302      	movs	r3, #2
 8007714:	e032      	b.n	800777c <HAL_UART_Receive_IT+0x9e>
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2201      	movs	r2, #1
 800771a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	68ba      	ldr	r2, [r7, #8]
 8007722:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	88fa      	ldrh	r2, [r7, #6]
 8007728:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	88fa      	ldrh	r2, [r7, #6]
 800772e:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2200      	movs	r2, #0
 8007734:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2222      	movs	r2, #34	; 0x22
 800773a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2200      	movs	r2, #0
 8007742:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	68da      	ldr	r2, [r3, #12]
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007754:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	695a      	ldr	r2, [r3, #20]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f042 0201 	orr.w	r2, r2, #1
 8007764:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	68da      	ldr	r2, [r3, #12]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f042 0220 	orr.w	r2, r2, #32
 8007774:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8007776:	2300      	movs	r3, #0
 8007778:	e000      	b.n	800777c <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800777a:	2302      	movs	r3, #2
  }
}
 800777c:	4618      	mov	r0, r3
 800777e:	3714      	adds	r7, #20
 8007780:	46bd      	mov	sp, r7
 8007782:	bc80      	pop	{r7}
 8007784:	4770      	bx	lr

08007786 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8007786:	b580      	push	{r7, lr}
 8007788:	b082      	sub	sp, #8
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	68da      	ldr	r2, [r3, #12]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800779c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	695a      	ldr	r2, [r3, #20]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f022 0201 	bic.w	r2, r2, #1
 80077ac:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Rx request if enabled */
  if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	695b      	ldr	r3, [r3, #20]
 80077b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d014      	beq.n	80077e6 <HAL_UART_AbortReceive+0x60>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	695a      	ldr	r2, [r3, #20]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077ca:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if(huart->hdmarx != NULL)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d008      	beq.n	80077e6 <HAL_UART_AbortReceive+0x60>
    {
      /* Set the UART DMA Abort callback to Null. 
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077d8:	2200      	movs	r2, #0
 80077da:	635a      	str	r2, [r3, #52]	; 0x34

      HAL_DMA_Abort(huart->hdmarx);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077e0:	4618      	mov	r0, r3
 80077e2:	f7fd feef 	bl	80055c4 <HAL_DMA_Abort>
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2220      	movs	r2, #32
 80077f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3708      	adds	r7, #8
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
	...

08007800 <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b088      	sub	sp, #32
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	68db      	ldr	r3, [r3, #12]
 8007816:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	695b      	ldr	r3, [r3, #20]
 800781e:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 8007820:	2300      	movs	r3, #0
 8007822:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 8007824:	2300      	movs	r3, #0
 8007826:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007828:	69fb      	ldr	r3, [r7, #28]
 800782a:	f003 030f 	and.w	r3, r3, #15
 800782e:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d10d      	bne.n	8007852 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007836:	69fb      	ldr	r3, [r7, #28]
 8007838:	f003 0320 	and.w	r3, r3, #32
 800783c:	2b00      	cmp	r3, #0
 800783e:	d008      	beq.n	8007852 <HAL_UART_IRQHandler+0x52>
 8007840:	69bb      	ldr	r3, [r7, #24]
 8007842:	f003 0320 	and.w	r3, r3, #32
 8007846:	2b00      	cmp	r3, #0
 8007848:	d003      	beq.n	8007852 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 f9e9 	bl	8007c22 <UART_Receive_IT>
      return;
 8007850:	e0cb      	b.n	80079ea <HAL_UART_IRQHandler+0x1ea>
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	2b00      	cmp	r3, #0
 8007856:	f000 80ab 	beq.w	80079b0 <HAL_UART_IRQHandler+0x1b0>
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	f003 0301 	and.w	r3, r3, #1
 8007860:	2b00      	cmp	r3, #0
 8007862:	d105      	bne.n	8007870 <HAL_UART_IRQHandler+0x70>
 8007864:	69bb      	ldr	r3, [r7, #24]
 8007866:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800786a:	2b00      	cmp	r3, #0
 800786c:	f000 80a0 	beq.w	80079b0 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007870:	69fb      	ldr	r3, [r7, #28]
 8007872:	f003 0301 	and.w	r3, r3, #1
 8007876:	2b00      	cmp	r3, #0
 8007878:	d00a      	beq.n	8007890 <HAL_UART_IRQHandler+0x90>
 800787a:	69bb      	ldr	r3, [r7, #24]
 800787c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007880:	2b00      	cmp	r3, #0
 8007882:	d005      	beq.n	8007890 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007888:	f043 0201 	orr.w	r2, r3, #1
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007890:	69fb      	ldr	r3, [r7, #28]
 8007892:	f003 0304 	and.w	r3, r3, #4
 8007896:	2b00      	cmp	r3, #0
 8007898:	d00a      	beq.n	80078b0 <HAL_UART_IRQHandler+0xb0>
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	f003 0301 	and.w	r3, r3, #1
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d005      	beq.n	80078b0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078a8:	f043 0202 	orr.w	r2, r3, #2
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80078b0:	69fb      	ldr	r3, [r7, #28]
 80078b2:	f003 0302 	and.w	r3, r3, #2
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d00a      	beq.n	80078d0 <HAL_UART_IRQHandler+0xd0>
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	f003 0301 	and.w	r3, r3, #1
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d005      	beq.n	80078d0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078c8:	f043 0204 	orr.w	r2, r3, #4
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80078d0:	69fb      	ldr	r3, [r7, #28]
 80078d2:	f003 0308 	and.w	r3, r3, #8
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d00a      	beq.n	80078f0 <HAL_UART_IRQHandler+0xf0>
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	f003 0301 	and.w	r3, r3, #1
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d005      	beq.n	80078f0 <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078e8:	f043 0208 	orr.w	r2, r3, #8
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d077      	beq.n	80079e8 <HAL_UART_IRQHandler+0x1e8>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	f003 0320 	and.w	r3, r3, #32
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d007      	beq.n	8007912 <HAL_UART_IRQHandler+0x112>
 8007902:	69bb      	ldr	r3, [r7, #24]
 8007904:	f003 0320 	and.w	r3, r3, #32
 8007908:	2b00      	cmp	r3, #0
 800790a:	d002      	beq.n	8007912 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 f988 	bl	8007c22 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	695b      	ldr	r3, [r3, #20]
 8007918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800791c:	2b00      	cmp	r3, #0
 800791e:	bf14      	ite	ne
 8007920:	2301      	movne	r3, #1
 8007922:	2300      	moveq	r3, #0
 8007924:	b2db      	uxtb	r3, r3
 8007926:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800792c:	f003 0308 	and.w	r3, r3, #8
 8007930:	2b00      	cmp	r3, #0
 8007932:	d102      	bne.n	800793a <HAL_UART_IRQHandler+0x13a>
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d031      	beq.n	800799e <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 f8d3 	bl	8007ae6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	695b      	ldr	r3, [r3, #20]
 8007946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800794a:	2b00      	cmp	r3, #0
 800794c:	d023      	beq.n	8007996 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	695a      	ldr	r2, [r3, #20]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800795c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007962:	2b00      	cmp	r3, #0
 8007964:	d013      	beq.n	800798e <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800796a:	4a21      	ldr	r2, [pc, #132]	; (80079f0 <HAL_UART_IRQHandler+0x1f0>)
 800796c:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007972:	4618      	mov	r0, r3
 8007974:	f7fd fe52 	bl	800561c <HAL_DMA_Abort_IT>
 8007978:	4603      	mov	r3, r0
 800797a:	2b00      	cmp	r3, #0
 800797c:	d016      	beq.n	80079ac <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007984:	687a      	ldr	r2, [r7, #4]
 8007986:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007988:	4610      	mov	r0, r2
 800798a:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800798c:	e00e      	b.n	80079ac <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f000 f839 	bl	8007a06 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007994:	e00a      	b.n	80079ac <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f000 f835 	bl	8007a06 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800799c:	e006      	b.n	80079ac <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 f831 	bl	8007a06 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80079aa:	e01d      	b.n	80079e8 <HAL_UART_IRQHandler+0x1e8>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079ac:	bf00      	nop
    return;
 80079ae:	e01b      	b.n	80079e8 <HAL_UART_IRQHandler+0x1e8>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80079b0:	69fb      	ldr	r3, [r7, #28]
 80079b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d008      	beq.n	80079cc <HAL_UART_IRQHandler+0x1cc>
 80079ba:	69bb      	ldr	r3, [r7, #24]
 80079bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d003      	beq.n	80079cc <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 f8bf 	bl	8007b48 <UART_Transmit_IT>
    return;
 80079ca:	e00e      	b.n	80079ea <HAL_UART_IRQHandler+0x1ea>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d009      	beq.n	80079ea <HAL_UART_IRQHandler+0x1ea>
 80079d6:	69bb      	ldr	r3, [r7, #24]
 80079d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d004      	beq.n	80079ea <HAL_UART_IRQHandler+0x1ea>
  {
    UART_EndTransmit_IT(huart);
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 f906 	bl	8007bf2 <UART_EndTransmit_IT>
    return;
 80079e6:	e000      	b.n	80079ea <HAL_UART_IRQHandler+0x1ea>
    return;
 80079e8:	bf00      	nop
  }
}
 80079ea:	3720      	adds	r7, #32
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}
 80079f0:	08007b21 	.word	0x08007b21

080079f4 <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b083      	sub	sp, #12
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 80079fc:	bf00      	nop
 80079fe:	370c      	adds	r7, #12
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bc80      	pop	{r7}
 8007a04:	4770      	bx	lr

08007a06 <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007a06:	b480      	push	{r7}
 8007a08:	b083      	sub	sp, #12
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 8007a0e:	bf00      	nop
 8007a10:	370c      	adds	r7, #12
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bc80      	pop	{r7}
 8007a16:	4770      	bx	lr

08007a18 <HAL_UART_GetState>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b085      	sub	sp, #20
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  uint32_t temp1= 0x00U, temp2 = 0x00U;
 8007a20:	2300      	movs	r3, #0
 8007a22:	60fb      	str	r3, [r7, #12]
 8007a24:	2300      	movs	r3, #0
 8007a26:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007a2e:	b2db      	uxtb	r3, r3
 8007a30:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	60bb      	str	r3, [r7, #8]
  
  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	b2da      	uxtb	r2, r3
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	4313      	orrs	r3, r2
 8007a46:	b2db      	uxtb	r3, r3
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3714      	adds	r7, #20
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bc80      	pop	{r7}
 8007a50:	4770      	bx	lr

08007a52 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007a52:	b580      	push	{r7, lr}
 8007a54:	b084      	sub	sp, #16
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	60f8      	str	r0, [r7, #12]
 8007a5a:	60b9      	str	r1, [r7, #8]
 8007a5c:	603b      	str	r3, [r7, #0]
 8007a5e:	4613      	mov	r3, r2
 8007a60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8007a62:	e02c      	b.n	8007abe <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8007a64:	69bb      	ldr	r3, [r7, #24]
 8007a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a6a:	d028      	beq.n	8007abe <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8007a6c:	69bb      	ldr	r3, [r7, #24]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d007      	beq.n	8007a82 <UART_WaitOnFlagUntilTimeout+0x30>
 8007a72:	f7fd fbf9 	bl	8005268 <HAL_GetTick>
 8007a76:	4602      	mov	r2, r0
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	1ad3      	subs	r3, r2, r3
 8007a7c:	69ba      	ldr	r2, [r7, #24]
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d21d      	bcs.n	8007abe <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	68da      	ldr	r2, [r3, #12]
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007a90:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	695a      	ldr	r2, [r3, #20]
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f022 0201 	bic.w	r2, r2, #1
 8007aa0:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2220      	movs	r2, #32
 8007aa6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2220      	movs	r2, #32
 8007aae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8007aba:	2303      	movs	r3, #3
 8007abc:	e00f      	b.n	8007ade <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	681a      	ldr	r2, [r3, #0]
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	4013      	ands	r3, r2
 8007ac8:	68ba      	ldr	r2, [r7, #8]
 8007aca:	429a      	cmp	r2, r3
 8007acc:	bf0c      	ite	eq
 8007ace:	2301      	moveq	r3, #1
 8007ad0:	2300      	movne	r3, #0
 8007ad2:	b2db      	uxtb	r3, r3
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	79fb      	ldrb	r3, [r7, #7]
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d0c3      	beq.n	8007a64 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8007adc:	2300      	movs	r3, #0
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3710      	adds	r7, #16
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}

08007ae6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ae6:	b480      	push	{r7}
 8007ae8:	b083      	sub	sp, #12
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	68da      	ldr	r2, [r3, #12]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007afc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	695a      	ldr	r2, [r3, #20]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f022 0201 	bic.w	r2, r2, #1
 8007b0c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2220      	movs	r2, #32
 8007b12:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007b16:	bf00      	nop
 8007b18:	370c      	adds	r7, #12
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bc80      	pop	{r7}
 8007b1e:	4770      	bx	lr

08007b20 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b084      	sub	sp, #16
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b2c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2200      	movs	r2, #0
 8007b32:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2200      	movs	r2, #0
 8007b38:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 8007b3a:	68f8      	ldr	r0, [r7, #12]
 8007b3c:	f7ff ff63 	bl	8007a06 <HAL_UART_ErrorCallback>
}
 8007b40:	bf00      	nop
 8007b42:	3710      	adds	r7, #16
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b085      	sub	sp, #20
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	2b21      	cmp	r3, #33	; 0x21
 8007b5a:	d144      	bne.n	8007be6 <UART_Transmit_IT+0x9e>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b64:	d11a      	bne.n	8007b9c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6a1b      	ldr	r3, [r3, #32]
 8007b6a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	881b      	ldrh	r3, [r3, #0]
 8007b70:	461a      	mov	r2, r3
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b7a:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	691b      	ldr	r3, [r3, #16]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d105      	bne.n	8007b90 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6a1b      	ldr	r3, [r3, #32]
 8007b88:	1c9a      	adds	r2, r3, #2
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	621a      	str	r2, [r3, #32]
 8007b8e:	e00e      	b.n	8007bae <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6a1b      	ldr	r3, [r3, #32]
 8007b94:	1c5a      	adds	r2, r3, #1
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	621a      	str	r2, [r3, #32]
 8007b9a:	e008      	b.n	8007bae <UART_Transmit_IT+0x66>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6a1b      	ldr	r3, [r3, #32]
 8007ba0:	1c59      	adds	r1, r3, #1
 8007ba2:	687a      	ldr	r2, [r7, #4]
 8007ba4:	6211      	str	r1, [r2, #32]
 8007ba6:	781a      	ldrb	r2, [r3, #0]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	3b01      	subs	r3, #1
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	4619      	mov	r1, r3
 8007bbc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d10f      	bne.n	8007be2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	68da      	ldr	r2, [r3, #12]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007bd0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	68da      	ldr	r2, [r3, #12]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007be0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007be2:	2300      	movs	r3, #0
 8007be4:	e000      	b.n	8007be8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007be6:	2302      	movs	r3, #2
  }
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3714      	adds	r7, #20
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bc80      	pop	{r7}
 8007bf0:	4770      	bx	lr

08007bf2 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007bf2:	b580      	push	{r7, lr}
 8007bf4:	b082      	sub	sp, #8
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	68da      	ldr	r2, [r3, #12]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c08:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2220      	movs	r2, #32
 8007c0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f7ff feee 	bl	80079f4 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3708      	adds	r7, #8
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}

08007c22 <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b084      	sub	sp, #16
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	2b22      	cmp	r3, #34	; 0x22
 8007c34:	d171      	bne.n	8007d1a <UART_Receive_IT+0xf8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c3e:	d123      	bne.n	8007c88 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c44:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	691b      	ldr	r3, [r3, #16]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d10e      	bne.n	8007c6c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c5a:	b29a      	uxth	r2, r3
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c64:	1c9a      	adds	r2, r3, #2
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	629a      	str	r2, [r3, #40]	; 0x28
 8007c6a:	e029      	b.n	8007cc0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	b29a      	uxth	r2, r3
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c80:	1c5a      	adds	r2, r3, #1
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	629a      	str	r2, [r3, #40]	; 0x28
 8007c86:	e01b      	b.n	8007cc0 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	691b      	ldr	r3, [r3, #16]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d10a      	bne.n	8007ca6 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	6858      	ldr	r0, [r3, #4]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c9a:	1c59      	adds	r1, r3, #1
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	6291      	str	r1, [r2, #40]	; 0x28
 8007ca0:	b2c2      	uxtb	r2, r0
 8007ca2:	701a      	strb	r2, [r3, #0]
 8007ca4:	e00c      	b.n	8007cc0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	b2da      	uxtb	r2, r3
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cb2:	1c58      	adds	r0, r3, #1
 8007cb4:	6879      	ldr	r1, [r7, #4]
 8007cb6:	6288      	str	r0, [r1, #40]	; 0x28
 8007cb8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007cbc:	b2d2      	uxtb	r2, r2
 8007cbe:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	3b01      	subs	r3, #1
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	4619      	mov	r1, r3
 8007cce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d120      	bne.n	8007d16 <UART_Receive_IT+0xf4>
    {
      /* Disable the IRDA Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	68da      	ldr	r2, [r3, #12]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f022 0220 	bic.w	r2, r2, #32
 8007ce2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	68da      	ldr	r2, [r3, #12]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007cf2:	60da      	str	r2, [r3, #12]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	695a      	ldr	r2, [r3, #20]
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f022 0201 	bic.w	r2, r2, #1
 8007d02:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2220      	movs	r2, #32
 8007d08:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      HAL_UART_RxCpltCallback(huart);
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f7fc fea1 	bl	8004a54 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8007d12:	2300      	movs	r3, #0
 8007d14:	e002      	b.n	8007d1c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8007d16:	2300      	movs	r3, #0
 8007d18:	e000      	b.n	8007d1c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8007d1a:	2302      	movs	r3, #2
  }
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3710      	adds	r7, #16
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d24:	b5b0      	push	{r4, r5, r7, lr}
 8007d26:	b084      	sub	sp, #16
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	691b      	ldr	r3, [r3, #16]
 8007d36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	68da      	ldr	r2, [r3, #12]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	430a      	orrs	r2, r1
 8007d44:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	689a      	ldr	r2, [r3, #8]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	691b      	ldr	r3, [r3, #16]
 8007d4e:	431a      	orrs	r2, r3
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	695b      	ldr	r3, [r3, #20]
 8007d54:	4313      	orrs	r3, r2
 8007d56:	68fa      	ldr	r2, [r7, #12]
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007d66:	f023 030c 	bic.w	r3, r3, #12
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	6812      	ldr	r2, [r2, #0]
 8007d6e:	68f9      	ldr	r1, [r7, #12]
 8007d70:	430b      	orrs	r3, r1
 8007d72:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	695b      	ldr	r3, [r3, #20]
 8007d7a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	699a      	ldr	r2, [r3, #24]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	430a      	orrs	r2, r1
 8007d88:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a6f      	ldr	r2, [pc, #444]	; (8007f4c <UART_SetConfig+0x228>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d16b      	bne.n	8007e6c <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8007d94:	f7fe fd6c 	bl	8006870 <HAL_RCC_GetPCLK2Freq>
 8007d98:	4602      	mov	r2, r0
 8007d9a:	4613      	mov	r3, r2
 8007d9c:	009b      	lsls	r3, r3, #2
 8007d9e:	4413      	add	r3, r2
 8007da0:	009a      	lsls	r2, r3, #2
 8007da2:	441a      	add	r2, r3
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	009b      	lsls	r3, r3, #2
 8007daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dae:	4a68      	ldr	r2, [pc, #416]	; (8007f50 <UART_SetConfig+0x22c>)
 8007db0:	fba2 2303 	umull	r2, r3, r2, r3
 8007db4:	095b      	lsrs	r3, r3, #5
 8007db6:	011c      	lsls	r4, r3, #4
 8007db8:	f7fe fd5a 	bl	8006870 <HAL_RCC_GetPCLK2Freq>
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	4613      	mov	r3, r2
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	4413      	add	r3, r2
 8007dc4:	009a      	lsls	r2, r3, #2
 8007dc6:	441a      	add	r2, r3
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	009b      	lsls	r3, r3, #2
 8007dce:	fbb2 f5f3 	udiv	r5, r2, r3
 8007dd2:	f7fe fd4d 	bl	8006870 <HAL_RCC_GetPCLK2Freq>
 8007dd6:	4602      	mov	r2, r0
 8007dd8:	4613      	mov	r3, r2
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	4413      	add	r3, r2
 8007dde:	009a      	lsls	r2, r3, #2
 8007de0:	441a      	add	r2, r3
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dec:	4a58      	ldr	r2, [pc, #352]	; (8007f50 <UART_SetConfig+0x22c>)
 8007dee:	fba2 2303 	umull	r2, r3, r2, r3
 8007df2:	095b      	lsrs	r3, r3, #5
 8007df4:	2264      	movs	r2, #100	; 0x64
 8007df6:	fb02 f303 	mul.w	r3, r2, r3
 8007dfa:	1aeb      	subs	r3, r5, r3
 8007dfc:	011b      	lsls	r3, r3, #4
 8007dfe:	3332      	adds	r3, #50	; 0x32
 8007e00:	4a53      	ldr	r2, [pc, #332]	; (8007f50 <UART_SetConfig+0x22c>)
 8007e02:	fba2 2303 	umull	r2, r3, r2, r3
 8007e06:	095b      	lsrs	r3, r3, #5
 8007e08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e0c:	441c      	add	r4, r3
 8007e0e:	f7fe fd2f 	bl	8006870 <HAL_RCC_GetPCLK2Freq>
 8007e12:	4602      	mov	r2, r0
 8007e14:	4613      	mov	r3, r2
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	4413      	add	r3, r2
 8007e1a:	009a      	lsls	r2, r3, #2
 8007e1c:	441a      	add	r2, r3
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	009b      	lsls	r3, r3, #2
 8007e24:	fbb2 f5f3 	udiv	r5, r2, r3
 8007e28:	f7fe fd22 	bl	8006870 <HAL_RCC_GetPCLK2Freq>
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	4613      	mov	r3, r2
 8007e30:	009b      	lsls	r3, r3, #2
 8007e32:	4413      	add	r3, r2
 8007e34:	009a      	lsls	r2, r3, #2
 8007e36:	441a      	add	r2, r3
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	009b      	lsls	r3, r3, #2
 8007e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e42:	4a43      	ldr	r2, [pc, #268]	; (8007f50 <UART_SetConfig+0x22c>)
 8007e44:	fba2 2303 	umull	r2, r3, r2, r3
 8007e48:	095b      	lsrs	r3, r3, #5
 8007e4a:	2264      	movs	r2, #100	; 0x64
 8007e4c:	fb02 f303 	mul.w	r3, r2, r3
 8007e50:	1aeb      	subs	r3, r5, r3
 8007e52:	011b      	lsls	r3, r3, #4
 8007e54:	3332      	adds	r3, #50	; 0x32
 8007e56:	4a3e      	ldr	r2, [pc, #248]	; (8007f50 <UART_SetConfig+0x22c>)
 8007e58:	fba2 2303 	umull	r2, r3, r2, r3
 8007e5c:	095b      	lsrs	r3, r3, #5
 8007e5e:	f003 020f 	and.w	r2, r3, #15
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4422      	add	r2, r4
 8007e68:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8007e6a:	e06a      	b.n	8007f42 <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8007e6c:	f7fe fcec 	bl	8006848 <HAL_RCC_GetPCLK1Freq>
 8007e70:	4602      	mov	r2, r0
 8007e72:	4613      	mov	r3, r2
 8007e74:	009b      	lsls	r3, r3, #2
 8007e76:	4413      	add	r3, r2
 8007e78:	009a      	lsls	r2, r3, #2
 8007e7a:	441a      	add	r2, r3
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	009b      	lsls	r3, r3, #2
 8007e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e86:	4a32      	ldr	r2, [pc, #200]	; (8007f50 <UART_SetConfig+0x22c>)
 8007e88:	fba2 2303 	umull	r2, r3, r2, r3
 8007e8c:	095b      	lsrs	r3, r3, #5
 8007e8e:	011c      	lsls	r4, r3, #4
 8007e90:	f7fe fcda 	bl	8006848 <HAL_RCC_GetPCLK1Freq>
 8007e94:	4602      	mov	r2, r0
 8007e96:	4613      	mov	r3, r2
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	4413      	add	r3, r2
 8007e9c:	009a      	lsls	r2, r3, #2
 8007e9e:	441a      	add	r2, r3
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	009b      	lsls	r3, r3, #2
 8007ea6:	fbb2 f5f3 	udiv	r5, r2, r3
 8007eaa:	f7fe fccd 	bl	8006848 <HAL_RCC_GetPCLK1Freq>
 8007eae:	4602      	mov	r2, r0
 8007eb0:	4613      	mov	r3, r2
 8007eb2:	009b      	lsls	r3, r3, #2
 8007eb4:	4413      	add	r3, r2
 8007eb6:	009a      	lsls	r2, r3, #2
 8007eb8:	441a      	add	r2, r3
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	009b      	lsls	r3, r3, #2
 8007ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ec4:	4a22      	ldr	r2, [pc, #136]	; (8007f50 <UART_SetConfig+0x22c>)
 8007ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8007eca:	095b      	lsrs	r3, r3, #5
 8007ecc:	2264      	movs	r2, #100	; 0x64
 8007ece:	fb02 f303 	mul.w	r3, r2, r3
 8007ed2:	1aeb      	subs	r3, r5, r3
 8007ed4:	011b      	lsls	r3, r3, #4
 8007ed6:	3332      	adds	r3, #50	; 0x32
 8007ed8:	4a1d      	ldr	r2, [pc, #116]	; (8007f50 <UART_SetConfig+0x22c>)
 8007eda:	fba2 2303 	umull	r2, r3, r2, r3
 8007ede:	095b      	lsrs	r3, r3, #5
 8007ee0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ee4:	441c      	add	r4, r3
 8007ee6:	f7fe fcaf 	bl	8006848 <HAL_RCC_GetPCLK1Freq>
 8007eea:	4602      	mov	r2, r0
 8007eec:	4613      	mov	r3, r2
 8007eee:	009b      	lsls	r3, r3, #2
 8007ef0:	4413      	add	r3, r2
 8007ef2:	009a      	lsls	r2, r3, #2
 8007ef4:	441a      	add	r2, r3
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	fbb2 f5f3 	udiv	r5, r2, r3
 8007f00:	f7fe fca2 	bl	8006848 <HAL_RCC_GetPCLK1Freq>
 8007f04:	4602      	mov	r2, r0
 8007f06:	4613      	mov	r3, r2
 8007f08:	009b      	lsls	r3, r3, #2
 8007f0a:	4413      	add	r3, r2
 8007f0c:	009a      	lsls	r2, r3, #2
 8007f0e:	441a      	add	r2, r3
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f1a:	4a0d      	ldr	r2, [pc, #52]	; (8007f50 <UART_SetConfig+0x22c>)
 8007f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8007f20:	095b      	lsrs	r3, r3, #5
 8007f22:	2264      	movs	r2, #100	; 0x64
 8007f24:	fb02 f303 	mul.w	r3, r2, r3
 8007f28:	1aeb      	subs	r3, r5, r3
 8007f2a:	011b      	lsls	r3, r3, #4
 8007f2c:	3332      	adds	r3, #50	; 0x32
 8007f2e:	4a08      	ldr	r2, [pc, #32]	; (8007f50 <UART_SetConfig+0x22c>)
 8007f30:	fba2 2303 	umull	r2, r3, r2, r3
 8007f34:	095b      	lsrs	r3, r3, #5
 8007f36:	f003 020f 	and.w	r2, r3, #15
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4422      	add	r2, r4
 8007f40:	609a      	str	r2, [r3, #8]
}
 8007f42:	bf00      	nop
 8007f44:	3710      	adds	r7, #16
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bdb0      	pop	{r4, r5, r7, pc}
 8007f4a:	bf00      	nop
 8007f4c:	40013800 	.word	0x40013800
 8007f50:	51eb851f 	.word	0x51eb851f

08007f54 <FSMC_NORSRAM_Init>:
  * @param  Device: Pointer to NORSRAM device instance
  * @param  Init: Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef *Init)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_EXTENDED_MODE(Init->ExtendedMode));
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f68:	683a      	ldr	r2, [r7, #0]
 8007f6a:	6812      	ldr	r2, [r2, #0]
 8007f6c:	f023 0101 	bic.w	r1, r3, #1
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	2b08      	cmp	r3, #8
 8007f7c:	d132      	bne.n	8007fe4 <FSMC_NORSRAM_Init+0x90>
  {
    MODIFY_REG(Device->BTCR[Init->NSBank], BCR_CLEAR_MASK, (uint32_t)(FSMC_NORSRAM_FLASH_ACCESS_ENABLE
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	681a      	ldr	r2, [r3, #0]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007f88:	4b31      	ldr	r3, [pc, #196]	; (8008050 <FSMC_NORSRAM_Init+0xfc>)
 8007f8a:	4013      	ands	r3, r2
 8007f8c:	683a      	ldr	r2, [r7, #0]
 8007f8e:	6851      	ldr	r1, [r2, #4]
 8007f90:	683a      	ldr	r2, [r7, #0]
 8007f92:	6892      	ldr	r2, [r2, #8]
 8007f94:	4311      	orrs	r1, r2
 8007f96:	683a      	ldr	r2, [r7, #0]
 8007f98:	68d2      	ldr	r2, [r2, #12]
 8007f9a:	4311      	orrs	r1, r2
 8007f9c:	683a      	ldr	r2, [r7, #0]
 8007f9e:	6912      	ldr	r2, [r2, #16]
 8007fa0:	4311      	orrs	r1, r2
 8007fa2:	683a      	ldr	r2, [r7, #0]
 8007fa4:	6952      	ldr	r2, [r2, #20]
 8007fa6:	4311      	orrs	r1, r2
 8007fa8:	683a      	ldr	r2, [r7, #0]
 8007faa:	6992      	ldr	r2, [r2, #24]
 8007fac:	4311      	orrs	r1, r2
 8007fae:	683a      	ldr	r2, [r7, #0]
 8007fb0:	69d2      	ldr	r2, [r2, #28]
 8007fb2:	4311      	orrs	r1, r2
 8007fb4:	683a      	ldr	r2, [r7, #0]
 8007fb6:	6a12      	ldr	r2, [r2, #32]
 8007fb8:	4311      	orrs	r1, r2
 8007fba:	683a      	ldr	r2, [r7, #0]
 8007fbc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007fbe:	4311      	orrs	r1, r2
 8007fc0:	683a      	ldr	r2, [r7, #0]
 8007fc2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8007fc4:	4311      	orrs	r1, r2
 8007fc6:	683a      	ldr	r2, [r7, #0]
 8007fc8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007fca:	4311      	orrs	r1, r2
 8007fcc:	683a      	ldr	r2, [r7, #0]
 8007fce:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007fd0:	430a      	orrs	r2, r1
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	683a      	ldr	r2, [r7, #0]
 8007fd6:	6812      	ldr	r2, [r2, #0]
 8007fd8:	f043 0140 	orr.w	r1, r3, #64	; 0x40
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007fe2:	e02f      	b.n	8008044 <FSMC_NORSRAM_Init+0xf0>
                                                                     )
              );
  }
  else
  {
    MODIFY_REG(Device->BTCR[Init->NSBank], BCR_CLEAR_MASK, (uint32_t)(FSMC_NORSRAM_FLASH_ACCESS_DISABLE
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007fee:	4b18      	ldr	r3, [pc, #96]	; (8008050 <FSMC_NORSRAM_Init+0xfc>)
 8007ff0:	4013      	ands	r3, r2
 8007ff2:	683a      	ldr	r2, [r7, #0]
 8007ff4:	6851      	ldr	r1, [r2, #4]
 8007ff6:	683a      	ldr	r2, [r7, #0]
 8007ff8:	6892      	ldr	r2, [r2, #8]
 8007ffa:	4311      	orrs	r1, r2
 8007ffc:	683a      	ldr	r2, [r7, #0]
 8007ffe:	68d2      	ldr	r2, [r2, #12]
 8008000:	4311      	orrs	r1, r2
 8008002:	683a      	ldr	r2, [r7, #0]
 8008004:	6912      	ldr	r2, [r2, #16]
 8008006:	4311      	orrs	r1, r2
 8008008:	683a      	ldr	r2, [r7, #0]
 800800a:	6952      	ldr	r2, [r2, #20]
 800800c:	4311      	orrs	r1, r2
 800800e:	683a      	ldr	r2, [r7, #0]
 8008010:	6992      	ldr	r2, [r2, #24]
 8008012:	4311      	orrs	r1, r2
 8008014:	683a      	ldr	r2, [r7, #0]
 8008016:	69d2      	ldr	r2, [r2, #28]
 8008018:	4311      	orrs	r1, r2
 800801a:	683a      	ldr	r2, [r7, #0]
 800801c:	6a12      	ldr	r2, [r2, #32]
 800801e:	4311      	orrs	r1, r2
 8008020:	683a      	ldr	r2, [r7, #0]
 8008022:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008024:	4311      	orrs	r1, r2
 8008026:	683a      	ldr	r2, [r7, #0]
 8008028:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800802a:	4311      	orrs	r1, r2
 800802c:	683a      	ldr	r2, [r7, #0]
 800802e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008030:	4311      	orrs	r1, r2
 8008032:	683a      	ldr	r2, [r7, #0]
 8008034:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008036:	4311      	orrs	r1, r2
 8008038:	683a      	ldr	r2, [r7, #0]
 800803a:	6812      	ldr	r2, [r2, #0]
 800803c:	4319      	orrs	r1, r3
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
               | Init->WriteBurst
                                                                     )
              );
  }

  return HAL_OK;
 8008044:	2300      	movs	r3, #0
}
 8008046:	4618      	mov	r0, r3
 8008048:	370c      	adds	r7, #12
 800804a:	46bd      	mov	sp, r7
 800804c:	bc80      	pop	{r7}
 800804e:	4770      	bx	lr
 8008050:	fff70081 	.word	0xfff70081

08008054 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing: Pointer to NORSRAM Timing structure
  * @param  Bank: NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008054:	b480      	push	{r7}
 8008056:	b085      	sub	sp, #20
 8008058:	af00      	add	r7, sp, #0
 800805a:	60f8      	str	r0, [r7, #12]
 800805c:	60b9      	str	r1, [r7, #8]
 800805e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U],                                                        \
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	1c5a      	adds	r2, r3, #1
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800806a:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	681a      	ldr	r2, [r3, #0]
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	011b      	lsls	r3, r3, #4
 8008078:	431a      	orrs	r2, r3
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	021b      	lsls	r3, r3, #8
 8008080:	431a      	orrs	r2, r3
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	68db      	ldr	r3, [r3, #12]
 8008086:	041b      	lsls	r3, r3, #16
 8008088:	431a      	orrs	r2, r3
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	691b      	ldr	r3, [r3, #16]
 800808e:	3b01      	subs	r3, #1
 8008090:	051b      	lsls	r3, r3, #20
 8008092:	431a      	orrs	r2, r3
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	695b      	ldr	r3, [r3, #20]
 8008098:	3b02      	subs	r3, #2
 800809a:	061b      	lsls	r3, r3, #24
 800809c:	431a      	orrs	r2, r3
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	699b      	ldr	r3, [r3, #24]
 80080a2:	4313      	orrs	r3, r2
 80080a4:	687a      	ldr	r2, [r7, #4]
 80080a6:	3201      	adds	r2, #1
 80080a8:	4319      	orrs	r1, r3
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                        ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos)       | \
                        (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)        | \
                        (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)        | \
                        (Timing->AccessMode)));

  return HAL_OK;
 80080b0:	2300      	movs	r3, #0
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3714      	adds	r7, #20
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bc80      	pop	{r7}
 80080ba:	4770      	bx	lr

080080bc <FSMC_NORSRAM_Extended_Timing_Init>:
  *            @arg FSMC_EXTENDED_MODE_DISABLE
  *            @arg FSMC_EXTENDED_MODE_ENABLE
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80080bc:	b480      	push	{r7}
 80080be:	b085      	sub	sp, #20
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	60f8      	str	r0, [r7, #12]
 80080c4:	60b9      	str	r1, [r7, #8]
 80080c6:	607a      	str	r2, [r7, #4]
 80080c8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080d0:	d11d      	bne.n	800810e <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(STM32F101xE) || defined(STM32F103xE) || defined(STM32F101xG) || defined(STM32F103xG)
    MODIFY_REG(Device->BWTR[Bank],                                                      \
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80080da:	4b13      	ldr	r3, [pc, #76]	; (8008128 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80080dc:	4013      	ands	r3, r2
 80080de:	68ba      	ldr	r2, [r7, #8]
 80080e0:	6811      	ldr	r1, [r2, #0]
 80080e2:	68ba      	ldr	r2, [r7, #8]
 80080e4:	6852      	ldr	r2, [r2, #4]
 80080e6:	0112      	lsls	r2, r2, #4
 80080e8:	4311      	orrs	r1, r2
 80080ea:	68ba      	ldr	r2, [r7, #8]
 80080ec:	6892      	ldr	r2, [r2, #8]
 80080ee:	0212      	lsls	r2, r2, #8
 80080f0:	4311      	orrs	r1, r2
 80080f2:	68ba      	ldr	r2, [r7, #8]
 80080f4:	6992      	ldr	r2, [r2, #24]
 80080f6:	4311      	orrs	r1, r2
 80080f8:	68ba      	ldr	r2, [r7, #8]
 80080fa:	68d2      	ldr	r2, [r2, #12]
 80080fc:	0412      	lsls	r2, r2, #16
 80080fe:	430a      	orrs	r2, r1
 8008100:	ea43 0102 	orr.w	r1, r3, r2
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800810c:	e005      	b.n	800811a <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                          (((Timing->DataLatency) - 2U)  << FSMC_BWTRx_DATLAT_Pos)));
#endif /* STM32F101xE || STM32F103xE || STM32F101xG || STM32F103xG */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	687a      	ldr	r2, [r7, #4]
 8008112:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8008116:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800811a:	2300      	movs	r3, #0
}
 800811c:	4618      	mov	r0, r3
 800811e:	3714      	adds	r7, #20
 8008120:	46bd      	mov	sp, r7
 8008122:	bc80      	pop	{r7}
 8008124:	4770      	bx	lr
 8008126:	bf00      	nop
 8008128:	cff00000 	.word	0xcff00000

0800812c <__errno>:
 800812c:	4b01      	ldr	r3, [pc, #4]	; (8008134 <__errno+0x8>)
 800812e:	6818      	ldr	r0, [r3, #0]
 8008130:	4770      	bx	lr
 8008132:	bf00      	nop
 8008134:	200001e0 	.word	0x200001e0

08008138 <__libc_init_array>:
 8008138:	b570      	push	{r4, r5, r6, lr}
 800813a:	2600      	movs	r6, #0
 800813c:	4d0c      	ldr	r5, [pc, #48]	; (8008170 <__libc_init_array+0x38>)
 800813e:	4c0d      	ldr	r4, [pc, #52]	; (8008174 <__libc_init_array+0x3c>)
 8008140:	1b64      	subs	r4, r4, r5
 8008142:	10a4      	asrs	r4, r4, #2
 8008144:	42a6      	cmp	r6, r4
 8008146:	d109      	bne.n	800815c <__libc_init_array+0x24>
 8008148:	f000 fd18 	bl	8008b7c <_init>
 800814c:	2600      	movs	r6, #0
 800814e:	4d0a      	ldr	r5, [pc, #40]	; (8008178 <__libc_init_array+0x40>)
 8008150:	4c0a      	ldr	r4, [pc, #40]	; (800817c <__libc_init_array+0x44>)
 8008152:	1b64      	subs	r4, r4, r5
 8008154:	10a4      	asrs	r4, r4, #2
 8008156:	42a6      	cmp	r6, r4
 8008158:	d105      	bne.n	8008166 <__libc_init_array+0x2e>
 800815a:	bd70      	pop	{r4, r5, r6, pc}
 800815c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008160:	4798      	blx	r3
 8008162:	3601      	adds	r6, #1
 8008164:	e7ee      	b.n	8008144 <__libc_init_array+0xc>
 8008166:	f855 3b04 	ldr.w	r3, [r5], #4
 800816a:	4798      	blx	r3
 800816c:	3601      	adds	r6, #1
 800816e:	e7f2      	b.n	8008156 <__libc_init_array+0x1e>
 8008170:	08009670 	.word	0x08009670
 8008174:	08009670 	.word	0x08009670
 8008178:	08009670 	.word	0x08009670
 800817c:	08009674 	.word	0x08009674

08008180 <memset>:
 8008180:	4603      	mov	r3, r0
 8008182:	4402      	add	r2, r0
 8008184:	4293      	cmp	r3, r2
 8008186:	d100      	bne.n	800818a <memset+0xa>
 8008188:	4770      	bx	lr
 800818a:	f803 1b01 	strb.w	r1, [r3], #1
 800818e:	e7f9      	b.n	8008184 <memset+0x4>

08008190 <_puts_r>:
 8008190:	b570      	push	{r4, r5, r6, lr}
 8008192:	460e      	mov	r6, r1
 8008194:	4605      	mov	r5, r0
 8008196:	b118      	cbz	r0, 80081a0 <_puts_r+0x10>
 8008198:	6983      	ldr	r3, [r0, #24]
 800819a:	b90b      	cbnz	r3, 80081a0 <_puts_r+0x10>
 800819c:	f000 fa44 	bl	8008628 <__sinit>
 80081a0:	69ab      	ldr	r3, [r5, #24]
 80081a2:	68ac      	ldr	r4, [r5, #8]
 80081a4:	b913      	cbnz	r3, 80081ac <_puts_r+0x1c>
 80081a6:	4628      	mov	r0, r5
 80081a8:	f000 fa3e 	bl	8008628 <__sinit>
 80081ac:	4b2c      	ldr	r3, [pc, #176]	; (8008260 <_puts_r+0xd0>)
 80081ae:	429c      	cmp	r4, r3
 80081b0:	d120      	bne.n	80081f4 <_puts_r+0x64>
 80081b2:	686c      	ldr	r4, [r5, #4]
 80081b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80081b6:	07db      	lsls	r3, r3, #31
 80081b8:	d405      	bmi.n	80081c6 <_puts_r+0x36>
 80081ba:	89a3      	ldrh	r3, [r4, #12]
 80081bc:	0598      	lsls	r0, r3, #22
 80081be:	d402      	bmi.n	80081c6 <_puts_r+0x36>
 80081c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081c2:	f000 facf 	bl	8008764 <__retarget_lock_acquire_recursive>
 80081c6:	89a3      	ldrh	r3, [r4, #12]
 80081c8:	0719      	lsls	r1, r3, #28
 80081ca:	d51d      	bpl.n	8008208 <_puts_r+0x78>
 80081cc:	6923      	ldr	r3, [r4, #16]
 80081ce:	b1db      	cbz	r3, 8008208 <_puts_r+0x78>
 80081d0:	3e01      	subs	r6, #1
 80081d2:	68a3      	ldr	r3, [r4, #8]
 80081d4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80081d8:	3b01      	subs	r3, #1
 80081da:	60a3      	str	r3, [r4, #8]
 80081dc:	bb39      	cbnz	r1, 800822e <_puts_r+0x9e>
 80081de:	2b00      	cmp	r3, #0
 80081e0:	da38      	bge.n	8008254 <_puts_r+0xc4>
 80081e2:	4622      	mov	r2, r4
 80081e4:	210a      	movs	r1, #10
 80081e6:	4628      	mov	r0, r5
 80081e8:	f000 f848 	bl	800827c <__swbuf_r>
 80081ec:	3001      	adds	r0, #1
 80081ee:	d011      	beq.n	8008214 <_puts_r+0x84>
 80081f0:	250a      	movs	r5, #10
 80081f2:	e011      	b.n	8008218 <_puts_r+0x88>
 80081f4:	4b1b      	ldr	r3, [pc, #108]	; (8008264 <_puts_r+0xd4>)
 80081f6:	429c      	cmp	r4, r3
 80081f8:	d101      	bne.n	80081fe <_puts_r+0x6e>
 80081fa:	68ac      	ldr	r4, [r5, #8]
 80081fc:	e7da      	b.n	80081b4 <_puts_r+0x24>
 80081fe:	4b1a      	ldr	r3, [pc, #104]	; (8008268 <_puts_r+0xd8>)
 8008200:	429c      	cmp	r4, r3
 8008202:	bf08      	it	eq
 8008204:	68ec      	ldreq	r4, [r5, #12]
 8008206:	e7d5      	b.n	80081b4 <_puts_r+0x24>
 8008208:	4621      	mov	r1, r4
 800820a:	4628      	mov	r0, r5
 800820c:	f000 f888 	bl	8008320 <__swsetup_r>
 8008210:	2800      	cmp	r0, #0
 8008212:	d0dd      	beq.n	80081d0 <_puts_r+0x40>
 8008214:	f04f 35ff 	mov.w	r5, #4294967295
 8008218:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800821a:	07da      	lsls	r2, r3, #31
 800821c:	d405      	bmi.n	800822a <_puts_r+0x9a>
 800821e:	89a3      	ldrh	r3, [r4, #12]
 8008220:	059b      	lsls	r3, r3, #22
 8008222:	d402      	bmi.n	800822a <_puts_r+0x9a>
 8008224:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008226:	f000 fa9e 	bl	8008766 <__retarget_lock_release_recursive>
 800822a:	4628      	mov	r0, r5
 800822c:	bd70      	pop	{r4, r5, r6, pc}
 800822e:	2b00      	cmp	r3, #0
 8008230:	da04      	bge.n	800823c <_puts_r+0xac>
 8008232:	69a2      	ldr	r2, [r4, #24]
 8008234:	429a      	cmp	r2, r3
 8008236:	dc06      	bgt.n	8008246 <_puts_r+0xb6>
 8008238:	290a      	cmp	r1, #10
 800823a:	d004      	beq.n	8008246 <_puts_r+0xb6>
 800823c:	6823      	ldr	r3, [r4, #0]
 800823e:	1c5a      	adds	r2, r3, #1
 8008240:	6022      	str	r2, [r4, #0]
 8008242:	7019      	strb	r1, [r3, #0]
 8008244:	e7c5      	b.n	80081d2 <_puts_r+0x42>
 8008246:	4622      	mov	r2, r4
 8008248:	4628      	mov	r0, r5
 800824a:	f000 f817 	bl	800827c <__swbuf_r>
 800824e:	3001      	adds	r0, #1
 8008250:	d1bf      	bne.n	80081d2 <_puts_r+0x42>
 8008252:	e7df      	b.n	8008214 <_puts_r+0x84>
 8008254:	250a      	movs	r5, #10
 8008256:	6823      	ldr	r3, [r4, #0]
 8008258:	1c5a      	adds	r2, r3, #1
 800825a:	6022      	str	r2, [r4, #0]
 800825c:	701d      	strb	r5, [r3, #0]
 800825e:	e7db      	b.n	8008218 <_puts_r+0x88>
 8008260:	08009630 	.word	0x08009630
 8008264:	08009650 	.word	0x08009650
 8008268:	08009610 	.word	0x08009610

0800826c <puts>:
 800826c:	4b02      	ldr	r3, [pc, #8]	; (8008278 <puts+0xc>)
 800826e:	4601      	mov	r1, r0
 8008270:	6818      	ldr	r0, [r3, #0]
 8008272:	f7ff bf8d 	b.w	8008190 <_puts_r>
 8008276:	bf00      	nop
 8008278:	200001e0 	.word	0x200001e0

0800827c <__swbuf_r>:
 800827c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800827e:	460e      	mov	r6, r1
 8008280:	4614      	mov	r4, r2
 8008282:	4605      	mov	r5, r0
 8008284:	b118      	cbz	r0, 800828e <__swbuf_r+0x12>
 8008286:	6983      	ldr	r3, [r0, #24]
 8008288:	b90b      	cbnz	r3, 800828e <__swbuf_r+0x12>
 800828a:	f000 f9cd 	bl	8008628 <__sinit>
 800828e:	4b21      	ldr	r3, [pc, #132]	; (8008314 <__swbuf_r+0x98>)
 8008290:	429c      	cmp	r4, r3
 8008292:	d12b      	bne.n	80082ec <__swbuf_r+0x70>
 8008294:	686c      	ldr	r4, [r5, #4]
 8008296:	69a3      	ldr	r3, [r4, #24]
 8008298:	60a3      	str	r3, [r4, #8]
 800829a:	89a3      	ldrh	r3, [r4, #12]
 800829c:	071a      	lsls	r2, r3, #28
 800829e:	d52f      	bpl.n	8008300 <__swbuf_r+0x84>
 80082a0:	6923      	ldr	r3, [r4, #16]
 80082a2:	b36b      	cbz	r3, 8008300 <__swbuf_r+0x84>
 80082a4:	6923      	ldr	r3, [r4, #16]
 80082a6:	6820      	ldr	r0, [r4, #0]
 80082a8:	b2f6      	uxtb	r6, r6
 80082aa:	1ac0      	subs	r0, r0, r3
 80082ac:	6963      	ldr	r3, [r4, #20]
 80082ae:	4637      	mov	r7, r6
 80082b0:	4283      	cmp	r3, r0
 80082b2:	dc04      	bgt.n	80082be <__swbuf_r+0x42>
 80082b4:	4621      	mov	r1, r4
 80082b6:	4628      	mov	r0, r5
 80082b8:	f000 f922 	bl	8008500 <_fflush_r>
 80082bc:	bb30      	cbnz	r0, 800830c <__swbuf_r+0x90>
 80082be:	68a3      	ldr	r3, [r4, #8]
 80082c0:	3001      	adds	r0, #1
 80082c2:	3b01      	subs	r3, #1
 80082c4:	60a3      	str	r3, [r4, #8]
 80082c6:	6823      	ldr	r3, [r4, #0]
 80082c8:	1c5a      	adds	r2, r3, #1
 80082ca:	6022      	str	r2, [r4, #0]
 80082cc:	701e      	strb	r6, [r3, #0]
 80082ce:	6963      	ldr	r3, [r4, #20]
 80082d0:	4283      	cmp	r3, r0
 80082d2:	d004      	beq.n	80082de <__swbuf_r+0x62>
 80082d4:	89a3      	ldrh	r3, [r4, #12]
 80082d6:	07db      	lsls	r3, r3, #31
 80082d8:	d506      	bpl.n	80082e8 <__swbuf_r+0x6c>
 80082da:	2e0a      	cmp	r6, #10
 80082dc:	d104      	bne.n	80082e8 <__swbuf_r+0x6c>
 80082de:	4621      	mov	r1, r4
 80082e0:	4628      	mov	r0, r5
 80082e2:	f000 f90d 	bl	8008500 <_fflush_r>
 80082e6:	b988      	cbnz	r0, 800830c <__swbuf_r+0x90>
 80082e8:	4638      	mov	r0, r7
 80082ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082ec:	4b0a      	ldr	r3, [pc, #40]	; (8008318 <__swbuf_r+0x9c>)
 80082ee:	429c      	cmp	r4, r3
 80082f0:	d101      	bne.n	80082f6 <__swbuf_r+0x7a>
 80082f2:	68ac      	ldr	r4, [r5, #8]
 80082f4:	e7cf      	b.n	8008296 <__swbuf_r+0x1a>
 80082f6:	4b09      	ldr	r3, [pc, #36]	; (800831c <__swbuf_r+0xa0>)
 80082f8:	429c      	cmp	r4, r3
 80082fa:	bf08      	it	eq
 80082fc:	68ec      	ldreq	r4, [r5, #12]
 80082fe:	e7ca      	b.n	8008296 <__swbuf_r+0x1a>
 8008300:	4621      	mov	r1, r4
 8008302:	4628      	mov	r0, r5
 8008304:	f000 f80c 	bl	8008320 <__swsetup_r>
 8008308:	2800      	cmp	r0, #0
 800830a:	d0cb      	beq.n	80082a4 <__swbuf_r+0x28>
 800830c:	f04f 37ff 	mov.w	r7, #4294967295
 8008310:	e7ea      	b.n	80082e8 <__swbuf_r+0x6c>
 8008312:	bf00      	nop
 8008314:	08009630 	.word	0x08009630
 8008318:	08009650 	.word	0x08009650
 800831c:	08009610 	.word	0x08009610

08008320 <__swsetup_r>:
 8008320:	4b32      	ldr	r3, [pc, #200]	; (80083ec <__swsetup_r+0xcc>)
 8008322:	b570      	push	{r4, r5, r6, lr}
 8008324:	681d      	ldr	r5, [r3, #0]
 8008326:	4606      	mov	r6, r0
 8008328:	460c      	mov	r4, r1
 800832a:	b125      	cbz	r5, 8008336 <__swsetup_r+0x16>
 800832c:	69ab      	ldr	r3, [r5, #24]
 800832e:	b913      	cbnz	r3, 8008336 <__swsetup_r+0x16>
 8008330:	4628      	mov	r0, r5
 8008332:	f000 f979 	bl	8008628 <__sinit>
 8008336:	4b2e      	ldr	r3, [pc, #184]	; (80083f0 <__swsetup_r+0xd0>)
 8008338:	429c      	cmp	r4, r3
 800833a:	d10f      	bne.n	800835c <__swsetup_r+0x3c>
 800833c:	686c      	ldr	r4, [r5, #4]
 800833e:	89a3      	ldrh	r3, [r4, #12]
 8008340:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008344:	0719      	lsls	r1, r3, #28
 8008346:	d42c      	bmi.n	80083a2 <__swsetup_r+0x82>
 8008348:	06dd      	lsls	r5, r3, #27
 800834a:	d411      	bmi.n	8008370 <__swsetup_r+0x50>
 800834c:	2309      	movs	r3, #9
 800834e:	6033      	str	r3, [r6, #0]
 8008350:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008354:	f04f 30ff 	mov.w	r0, #4294967295
 8008358:	81a3      	strh	r3, [r4, #12]
 800835a:	e03e      	b.n	80083da <__swsetup_r+0xba>
 800835c:	4b25      	ldr	r3, [pc, #148]	; (80083f4 <__swsetup_r+0xd4>)
 800835e:	429c      	cmp	r4, r3
 8008360:	d101      	bne.n	8008366 <__swsetup_r+0x46>
 8008362:	68ac      	ldr	r4, [r5, #8]
 8008364:	e7eb      	b.n	800833e <__swsetup_r+0x1e>
 8008366:	4b24      	ldr	r3, [pc, #144]	; (80083f8 <__swsetup_r+0xd8>)
 8008368:	429c      	cmp	r4, r3
 800836a:	bf08      	it	eq
 800836c:	68ec      	ldreq	r4, [r5, #12]
 800836e:	e7e6      	b.n	800833e <__swsetup_r+0x1e>
 8008370:	0758      	lsls	r0, r3, #29
 8008372:	d512      	bpl.n	800839a <__swsetup_r+0x7a>
 8008374:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008376:	b141      	cbz	r1, 800838a <__swsetup_r+0x6a>
 8008378:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800837c:	4299      	cmp	r1, r3
 800837e:	d002      	beq.n	8008386 <__swsetup_r+0x66>
 8008380:	4630      	mov	r0, r6
 8008382:	f000 fa57 	bl	8008834 <_free_r>
 8008386:	2300      	movs	r3, #0
 8008388:	6363      	str	r3, [r4, #52]	; 0x34
 800838a:	89a3      	ldrh	r3, [r4, #12]
 800838c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008390:	81a3      	strh	r3, [r4, #12]
 8008392:	2300      	movs	r3, #0
 8008394:	6063      	str	r3, [r4, #4]
 8008396:	6923      	ldr	r3, [r4, #16]
 8008398:	6023      	str	r3, [r4, #0]
 800839a:	89a3      	ldrh	r3, [r4, #12]
 800839c:	f043 0308 	orr.w	r3, r3, #8
 80083a0:	81a3      	strh	r3, [r4, #12]
 80083a2:	6923      	ldr	r3, [r4, #16]
 80083a4:	b94b      	cbnz	r3, 80083ba <__swsetup_r+0x9a>
 80083a6:	89a3      	ldrh	r3, [r4, #12]
 80083a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80083ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083b0:	d003      	beq.n	80083ba <__swsetup_r+0x9a>
 80083b2:	4621      	mov	r1, r4
 80083b4:	4630      	mov	r0, r6
 80083b6:	f000 f9fd 	bl	80087b4 <__smakebuf_r>
 80083ba:	89a0      	ldrh	r0, [r4, #12]
 80083bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80083c0:	f010 0301 	ands.w	r3, r0, #1
 80083c4:	d00a      	beq.n	80083dc <__swsetup_r+0xbc>
 80083c6:	2300      	movs	r3, #0
 80083c8:	60a3      	str	r3, [r4, #8]
 80083ca:	6963      	ldr	r3, [r4, #20]
 80083cc:	425b      	negs	r3, r3
 80083ce:	61a3      	str	r3, [r4, #24]
 80083d0:	6923      	ldr	r3, [r4, #16]
 80083d2:	b943      	cbnz	r3, 80083e6 <__swsetup_r+0xc6>
 80083d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80083d8:	d1ba      	bne.n	8008350 <__swsetup_r+0x30>
 80083da:	bd70      	pop	{r4, r5, r6, pc}
 80083dc:	0781      	lsls	r1, r0, #30
 80083de:	bf58      	it	pl
 80083e0:	6963      	ldrpl	r3, [r4, #20]
 80083e2:	60a3      	str	r3, [r4, #8]
 80083e4:	e7f4      	b.n	80083d0 <__swsetup_r+0xb0>
 80083e6:	2000      	movs	r0, #0
 80083e8:	e7f7      	b.n	80083da <__swsetup_r+0xba>
 80083ea:	bf00      	nop
 80083ec:	200001e0 	.word	0x200001e0
 80083f0:	08009630 	.word	0x08009630
 80083f4:	08009650 	.word	0x08009650
 80083f8:	08009610 	.word	0x08009610

080083fc <__sflush_r>:
 80083fc:	898a      	ldrh	r2, [r1, #12]
 80083fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008400:	4605      	mov	r5, r0
 8008402:	0710      	lsls	r0, r2, #28
 8008404:	460c      	mov	r4, r1
 8008406:	d457      	bmi.n	80084b8 <__sflush_r+0xbc>
 8008408:	684b      	ldr	r3, [r1, #4]
 800840a:	2b00      	cmp	r3, #0
 800840c:	dc04      	bgt.n	8008418 <__sflush_r+0x1c>
 800840e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008410:	2b00      	cmp	r3, #0
 8008412:	dc01      	bgt.n	8008418 <__sflush_r+0x1c>
 8008414:	2000      	movs	r0, #0
 8008416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008418:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800841a:	2e00      	cmp	r6, #0
 800841c:	d0fa      	beq.n	8008414 <__sflush_r+0x18>
 800841e:	2300      	movs	r3, #0
 8008420:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008424:	682f      	ldr	r7, [r5, #0]
 8008426:	602b      	str	r3, [r5, #0]
 8008428:	d032      	beq.n	8008490 <__sflush_r+0x94>
 800842a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800842c:	89a3      	ldrh	r3, [r4, #12]
 800842e:	075a      	lsls	r2, r3, #29
 8008430:	d505      	bpl.n	800843e <__sflush_r+0x42>
 8008432:	6863      	ldr	r3, [r4, #4]
 8008434:	1ac0      	subs	r0, r0, r3
 8008436:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008438:	b10b      	cbz	r3, 800843e <__sflush_r+0x42>
 800843a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800843c:	1ac0      	subs	r0, r0, r3
 800843e:	2300      	movs	r3, #0
 8008440:	4602      	mov	r2, r0
 8008442:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008444:	4628      	mov	r0, r5
 8008446:	6a21      	ldr	r1, [r4, #32]
 8008448:	47b0      	blx	r6
 800844a:	1c43      	adds	r3, r0, #1
 800844c:	89a3      	ldrh	r3, [r4, #12]
 800844e:	d106      	bne.n	800845e <__sflush_r+0x62>
 8008450:	6829      	ldr	r1, [r5, #0]
 8008452:	291d      	cmp	r1, #29
 8008454:	d82c      	bhi.n	80084b0 <__sflush_r+0xb4>
 8008456:	4a29      	ldr	r2, [pc, #164]	; (80084fc <__sflush_r+0x100>)
 8008458:	40ca      	lsrs	r2, r1
 800845a:	07d6      	lsls	r6, r2, #31
 800845c:	d528      	bpl.n	80084b0 <__sflush_r+0xb4>
 800845e:	2200      	movs	r2, #0
 8008460:	6062      	str	r2, [r4, #4]
 8008462:	6922      	ldr	r2, [r4, #16]
 8008464:	04d9      	lsls	r1, r3, #19
 8008466:	6022      	str	r2, [r4, #0]
 8008468:	d504      	bpl.n	8008474 <__sflush_r+0x78>
 800846a:	1c42      	adds	r2, r0, #1
 800846c:	d101      	bne.n	8008472 <__sflush_r+0x76>
 800846e:	682b      	ldr	r3, [r5, #0]
 8008470:	b903      	cbnz	r3, 8008474 <__sflush_r+0x78>
 8008472:	6560      	str	r0, [r4, #84]	; 0x54
 8008474:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008476:	602f      	str	r7, [r5, #0]
 8008478:	2900      	cmp	r1, #0
 800847a:	d0cb      	beq.n	8008414 <__sflush_r+0x18>
 800847c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008480:	4299      	cmp	r1, r3
 8008482:	d002      	beq.n	800848a <__sflush_r+0x8e>
 8008484:	4628      	mov	r0, r5
 8008486:	f000 f9d5 	bl	8008834 <_free_r>
 800848a:	2000      	movs	r0, #0
 800848c:	6360      	str	r0, [r4, #52]	; 0x34
 800848e:	e7c2      	b.n	8008416 <__sflush_r+0x1a>
 8008490:	6a21      	ldr	r1, [r4, #32]
 8008492:	2301      	movs	r3, #1
 8008494:	4628      	mov	r0, r5
 8008496:	47b0      	blx	r6
 8008498:	1c41      	adds	r1, r0, #1
 800849a:	d1c7      	bne.n	800842c <__sflush_r+0x30>
 800849c:	682b      	ldr	r3, [r5, #0]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d0c4      	beq.n	800842c <__sflush_r+0x30>
 80084a2:	2b1d      	cmp	r3, #29
 80084a4:	d001      	beq.n	80084aa <__sflush_r+0xae>
 80084a6:	2b16      	cmp	r3, #22
 80084a8:	d101      	bne.n	80084ae <__sflush_r+0xb2>
 80084aa:	602f      	str	r7, [r5, #0]
 80084ac:	e7b2      	b.n	8008414 <__sflush_r+0x18>
 80084ae:	89a3      	ldrh	r3, [r4, #12]
 80084b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084b4:	81a3      	strh	r3, [r4, #12]
 80084b6:	e7ae      	b.n	8008416 <__sflush_r+0x1a>
 80084b8:	690f      	ldr	r7, [r1, #16]
 80084ba:	2f00      	cmp	r7, #0
 80084bc:	d0aa      	beq.n	8008414 <__sflush_r+0x18>
 80084be:	0793      	lsls	r3, r2, #30
 80084c0:	bf18      	it	ne
 80084c2:	2300      	movne	r3, #0
 80084c4:	680e      	ldr	r6, [r1, #0]
 80084c6:	bf08      	it	eq
 80084c8:	694b      	ldreq	r3, [r1, #20]
 80084ca:	1bf6      	subs	r6, r6, r7
 80084cc:	600f      	str	r7, [r1, #0]
 80084ce:	608b      	str	r3, [r1, #8]
 80084d0:	2e00      	cmp	r6, #0
 80084d2:	dd9f      	ble.n	8008414 <__sflush_r+0x18>
 80084d4:	4633      	mov	r3, r6
 80084d6:	463a      	mov	r2, r7
 80084d8:	4628      	mov	r0, r5
 80084da:	6a21      	ldr	r1, [r4, #32]
 80084dc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80084e0:	47e0      	blx	ip
 80084e2:	2800      	cmp	r0, #0
 80084e4:	dc06      	bgt.n	80084f4 <__sflush_r+0xf8>
 80084e6:	89a3      	ldrh	r3, [r4, #12]
 80084e8:	f04f 30ff 	mov.w	r0, #4294967295
 80084ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084f0:	81a3      	strh	r3, [r4, #12]
 80084f2:	e790      	b.n	8008416 <__sflush_r+0x1a>
 80084f4:	4407      	add	r7, r0
 80084f6:	1a36      	subs	r6, r6, r0
 80084f8:	e7ea      	b.n	80084d0 <__sflush_r+0xd4>
 80084fa:	bf00      	nop
 80084fc:	20400001 	.word	0x20400001

08008500 <_fflush_r>:
 8008500:	b538      	push	{r3, r4, r5, lr}
 8008502:	690b      	ldr	r3, [r1, #16]
 8008504:	4605      	mov	r5, r0
 8008506:	460c      	mov	r4, r1
 8008508:	b913      	cbnz	r3, 8008510 <_fflush_r+0x10>
 800850a:	2500      	movs	r5, #0
 800850c:	4628      	mov	r0, r5
 800850e:	bd38      	pop	{r3, r4, r5, pc}
 8008510:	b118      	cbz	r0, 800851a <_fflush_r+0x1a>
 8008512:	6983      	ldr	r3, [r0, #24]
 8008514:	b90b      	cbnz	r3, 800851a <_fflush_r+0x1a>
 8008516:	f000 f887 	bl	8008628 <__sinit>
 800851a:	4b14      	ldr	r3, [pc, #80]	; (800856c <_fflush_r+0x6c>)
 800851c:	429c      	cmp	r4, r3
 800851e:	d11b      	bne.n	8008558 <_fflush_r+0x58>
 8008520:	686c      	ldr	r4, [r5, #4]
 8008522:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d0ef      	beq.n	800850a <_fflush_r+0xa>
 800852a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800852c:	07d0      	lsls	r0, r2, #31
 800852e:	d404      	bmi.n	800853a <_fflush_r+0x3a>
 8008530:	0599      	lsls	r1, r3, #22
 8008532:	d402      	bmi.n	800853a <_fflush_r+0x3a>
 8008534:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008536:	f000 f915 	bl	8008764 <__retarget_lock_acquire_recursive>
 800853a:	4628      	mov	r0, r5
 800853c:	4621      	mov	r1, r4
 800853e:	f7ff ff5d 	bl	80083fc <__sflush_r>
 8008542:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008544:	4605      	mov	r5, r0
 8008546:	07da      	lsls	r2, r3, #31
 8008548:	d4e0      	bmi.n	800850c <_fflush_r+0xc>
 800854a:	89a3      	ldrh	r3, [r4, #12]
 800854c:	059b      	lsls	r3, r3, #22
 800854e:	d4dd      	bmi.n	800850c <_fflush_r+0xc>
 8008550:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008552:	f000 f908 	bl	8008766 <__retarget_lock_release_recursive>
 8008556:	e7d9      	b.n	800850c <_fflush_r+0xc>
 8008558:	4b05      	ldr	r3, [pc, #20]	; (8008570 <_fflush_r+0x70>)
 800855a:	429c      	cmp	r4, r3
 800855c:	d101      	bne.n	8008562 <_fflush_r+0x62>
 800855e:	68ac      	ldr	r4, [r5, #8]
 8008560:	e7df      	b.n	8008522 <_fflush_r+0x22>
 8008562:	4b04      	ldr	r3, [pc, #16]	; (8008574 <_fflush_r+0x74>)
 8008564:	429c      	cmp	r4, r3
 8008566:	bf08      	it	eq
 8008568:	68ec      	ldreq	r4, [r5, #12]
 800856a:	e7da      	b.n	8008522 <_fflush_r+0x22>
 800856c:	08009630 	.word	0x08009630
 8008570:	08009650 	.word	0x08009650
 8008574:	08009610 	.word	0x08009610

08008578 <std>:
 8008578:	2300      	movs	r3, #0
 800857a:	b510      	push	{r4, lr}
 800857c:	4604      	mov	r4, r0
 800857e:	e9c0 3300 	strd	r3, r3, [r0]
 8008582:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008586:	6083      	str	r3, [r0, #8]
 8008588:	8181      	strh	r1, [r0, #12]
 800858a:	6643      	str	r3, [r0, #100]	; 0x64
 800858c:	81c2      	strh	r2, [r0, #14]
 800858e:	6183      	str	r3, [r0, #24]
 8008590:	4619      	mov	r1, r3
 8008592:	2208      	movs	r2, #8
 8008594:	305c      	adds	r0, #92	; 0x5c
 8008596:	f7ff fdf3 	bl	8008180 <memset>
 800859a:	4b05      	ldr	r3, [pc, #20]	; (80085b0 <std+0x38>)
 800859c:	6224      	str	r4, [r4, #32]
 800859e:	6263      	str	r3, [r4, #36]	; 0x24
 80085a0:	4b04      	ldr	r3, [pc, #16]	; (80085b4 <std+0x3c>)
 80085a2:	62a3      	str	r3, [r4, #40]	; 0x28
 80085a4:	4b04      	ldr	r3, [pc, #16]	; (80085b8 <std+0x40>)
 80085a6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80085a8:	4b04      	ldr	r3, [pc, #16]	; (80085bc <std+0x44>)
 80085aa:	6323      	str	r3, [r4, #48]	; 0x30
 80085ac:	bd10      	pop	{r4, pc}
 80085ae:	bf00      	nop
 80085b0:	08008a0d 	.word	0x08008a0d
 80085b4:	08008a2f 	.word	0x08008a2f
 80085b8:	08008a67 	.word	0x08008a67
 80085bc:	08008a8b 	.word	0x08008a8b

080085c0 <_cleanup_r>:
 80085c0:	4901      	ldr	r1, [pc, #4]	; (80085c8 <_cleanup_r+0x8>)
 80085c2:	f000 b8af 	b.w	8008724 <_fwalk_reent>
 80085c6:	bf00      	nop
 80085c8:	08008501 	.word	0x08008501

080085cc <__sfmoreglue>:
 80085cc:	2268      	movs	r2, #104	; 0x68
 80085ce:	b570      	push	{r4, r5, r6, lr}
 80085d0:	1e4d      	subs	r5, r1, #1
 80085d2:	4355      	muls	r5, r2
 80085d4:	460e      	mov	r6, r1
 80085d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80085da:	f000 f993 	bl	8008904 <_malloc_r>
 80085de:	4604      	mov	r4, r0
 80085e0:	b140      	cbz	r0, 80085f4 <__sfmoreglue+0x28>
 80085e2:	2100      	movs	r1, #0
 80085e4:	e9c0 1600 	strd	r1, r6, [r0]
 80085e8:	300c      	adds	r0, #12
 80085ea:	60a0      	str	r0, [r4, #8]
 80085ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80085f0:	f7ff fdc6 	bl	8008180 <memset>
 80085f4:	4620      	mov	r0, r4
 80085f6:	bd70      	pop	{r4, r5, r6, pc}

080085f8 <__sfp_lock_acquire>:
 80085f8:	4801      	ldr	r0, [pc, #4]	; (8008600 <__sfp_lock_acquire+0x8>)
 80085fa:	f000 b8b3 	b.w	8008764 <__retarget_lock_acquire_recursive>
 80085fe:	bf00      	nop
 8008600:	200021e1 	.word	0x200021e1

08008604 <__sfp_lock_release>:
 8008604:	4801      	ldr	r0, [pc, #4]	; (800860c <__sfp_lock_release+0x8>)
 8008606:	f000 b8ae 	b.w	8008766 <__retarget_lock_release_recursive>
 800860a:	bf00      	nop
 800860c:	200021e1 	.word	0x200021e1

08008610 <__sinit_lock_acquire>:
 8008610:	4801      	ldr	r0, [pc, #4]	; (8008618 <__sinit_lock_acquire+0x8>)
 8008612:	f000 b8a7 	b.w	8008764 <__retarget_lock_acquire_recursive>
 8008616:	bf00      	nop
 8008618:	200021e2 	.word	0x200021e2

0800861c <__sinit_lock_release>:
 800861c:	4801      	ldr	r0, [pc, #4]	; (8008624 <__sinit_lock_release+0x8>)
 800861e:	f000 b8a2 	b.w	8008766 <__retarget_lock_release_recursive>
 8008622:	bf00      	nop
 8008624:	200021e2 	.word	0x200021e2

08008628 <__sinit>:
 8008628:	b510      	push	{r4, lr}
 800862a:	4604      	mov	r4, r0
 800862c:	f7ff fff0 	bl	8008610 <__sinit_lock_acquire>
 8008630:	69a3      	ldr	r3, [r4, #24]
 8008632:	b11b      	cbz	r3, 800863c <__sinit+0x14>
 8008634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008638:	f7ff bff0 	b.w	800861c <__sinit_lock_release>
 800863c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008640:	6523      	str	r3, [r4, #80]	; 0x50
 8008642:	4b13      	ldr	r3, [pc, #76]	; (8008690 <__sinit+0x68>)
 8008644:	4a13      	ldr	r2, [pc, #76]	; (8008694 <__sinit+0x6c>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	62a2      	str	r2, [r4, #40]	; 0x28
 800864a:	42a3      	cmp	r3, r4
 800864c:	bf08      	it	eq
 800864e:	2301      	moveq	r3, #1
 8008650:	4620      	mov	r0, r4
 8008652:	bf08      	it	eq
 8008654:	61a3      	streq	r3, [r4, #24]
 8008656:	f000 f81f 	bl	8008698 <__sfp>
 800865a:	6060      	str	r0, [r4, #4]
 800865c:	4620      	mov	r0, r4
 800865e:	f000 f81b 	bl	8008698 <__sfp>
 8008662:	60a0      	str	r0, [r4, #8]
 8008664:	4620      	mov	r0, r4
 8008666:	f000 f817 	bl	8008698 <__sfp>
 800866a:	2200      	movs	r2, #0
 800866c:	2104      	movs	r1, #4
 800866e:	60e0      	str	r0, [r4, #12]
 8008670:	6860      	ldr	r0, [r4, #4]
 8008672:	f7ff ff81 	bl	8008578 <std>
 8008676:	2201      	movs	r2, #1
 8008678:	2109      	movs	r1, #9
 800867a:	68a0      	ldr	r0, [r4, #8]
 800867c:	f7ff ff7c 	bl	8008578 <std>
 8008680:	2202      	movs	r2, #2
 8008682:	2112      	movs	r1, #18
 8008684:	68e0      	ldr	r0, [r4, #12]
 8008686:	f7ff ff77 	bl	8008578 <std>
 800868a:	2301      	movs	r3, #1
 800868c:	61a3      	str	r3, [r4, #24]
 800868e:	e7d1      	b.n	8008634 <__sinit+0xc>
 8008690:	0800960c 	.word	0x0800960c
 8008694:	080085c1 	.word	0x080085c1

08008698 <__sfp>:
 8008698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800869a:	4607      	mov	r7, r0
 800869c:	f7ff ffac 	bl	80085f8 <__sfp_lock_acquire>
 80086a0:	4b1e      	ldr	r3, [pc, #120]	; (800871c <__sfp+0x84>)
 80086a2:	681e      	ldr	r6, [r3, #0]
 80086a4:	69b3      	ldr	r3, [r6, #24]
 80086a6:	b913      	cbnz	r3, 80086ae <__sfp+0x16>
 80086a8:	4630      	mov	r0, r6
 80086aa:	f7ff ffbd 	bl	8008628 <__sinit>
 80086ae:	3648      	adds	r6, #72	; 0x48
 80086b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80086b4:	3b01      	subs	r3, #1
 80086b6:	d503      	bpl.n	80086c0 <__sfp+0x28>
 80086b8:	6833      	ldr	r3, [r6, #0]
 80086ba:	b30b      	cbz	r3, 8008700 <__sfp+0x68>
 80086bc:	6836      	ldr	r6, [r6, #0]
 80086be:	e7f7      	b.n	80086b0 <__sfp+0x18>
 80086c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80086c4:	b9d5      	cbnz	r5, 80086fc <__sfp+0x64>
 80086c6:	4b16      	ldr	r3, [pc, #88]	; (8008720 <__sfp+0x88>)
 80086c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80086cc:	60e3      	str	r3, [r4, #12]
 80086ce:	6665      	str	r5, [r4, #100]	; 0x64
 80086d0:	f000 f847 	bl	8008762 <__retarget_lock_init_recursive>
 80086d4:	f7ff ff96 	bl	8008604 <__sfp_lock_release>
 80086d8:	2208      	movs	r2, #8
 80086da:	4629      	mov	r1, r5
 80086dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80086e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80086e4:	6025      	str	r5, [r4, #0]
 80086e6:	61a5      	str	r5, [r4, #24]
 80086e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80086ec:	f7ff fd48 	bl	8008180 <memset>
 80086f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80086f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80086f8:	4620      	mov	r0, r4
 80086fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086fc:	3468      	adds	r4, #104	; 0x68
 80086fe:	e7d9      	b.n	80086b4 <__sfp+0x1c>
 8008700:	2104      	movs	r1, #4
 8008702:	4638      	mov	r0, r7
 8008704:	f7ff ff62 	bl	80085cc <__sfmoreglue>
 8008708:	4604      	mov	r4, r0
 800870a:	6030      	str	r0, [r6, #0]
 800870c:	2800      	cmp	r0, #0
 800870e:	d1d5      	bne.n	80086bc <__sfp+0x24>
 8008710:	f7ff ff78 	bl	8008604 <__sfp_lock_release>
 8008714:	230c      	movs	r3, #12
 8008716:	603b      	str	r3, [r7, #0]
 8008718:	e7ee      	b.n	80086f8 <__sfp+0x60>
 800871a:	bf00      	nop
 800871c:	0800960c 	.word	0x0800960c
 8008720:	ffff0001 	.word	0xffff0001

08008724 <_fwalk_reent>:
 8008724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008728:	4606      	mov	r6, r0
 800872a:	4688      	mov	r8, r1
 800872c:	2700      	movs	r7, #0
 800872e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008732:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008736:	f1b9 0901 	subs.w	r9, r9, #1
 800873a:	d505      	bpl.n	8008748 <_fwalk_reent+0x24>
 800873c:	6824      	ldr	r4, [r4, #0]
 800873e:	2c00      	cmp	r4, #0
 8008740:	d1f7      	bne.n	8008732 <_fwalk_reent+0xe>
 8008742:	4638      	mov	r0, r7
 8008744:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008748:	89ab      	ldrh	r3, [r5, #12]
 800874a:	2b01      	cmp	r3, #1
 800874c:	d907      	bls.n	800875e <_fwalk_reent+0x3a>
 800874e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008752:	3301      	adds	r3, #1
 8008754:	d003      	beq.n	800875e <_fwalk_reent+0x3a>
 8008756:	4629      	mov	r1, r5
 8008758:	4630      	mov	r0, r6
 800875a:	47c0      	blx	r8
 800875c:	4307      	orrs	r7, r0
 800875e:	3568      	adds	r5, #104	; 0x68
 8008760:	e7e9      	b.n	8008736 <_fwalk_reent+0x12>

08008762 <__retarget_lock_init_recursive>:
 8008762:	4770      	bx	lr

08008764 <__retarget_lock_acquire_recursive>:
 8008764:	4770      	bx	lr

08008766 <__retarget_lock_release_recursive>:
 8008766:	4770      	bx	lr

08008768 <__swhatbuf_r>:
 8008768:	b570      	push	{r4, r5, r6, lr}
 800876a:	460e      	mov	r6, r1
 800876c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008770:	4614      	mov	r4, r2
 8008772:	2900      	cmp	r1, #0
 8008774:	461d      	mov	r5, r3
 8008776:	b096      	sub	sp, #88	; 0x58
 8008778:	da08      	bge.n	800878c <__swhatbuf_r+0x24>
 800877a:	2200      	movs	r2, #0
 800877c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008780:	602a      	str	r2, [r5, #0]
 8008782:	061a      	lsls	r2, r3, #24
 8008784:	d410      	bmi.n	80087a8 <__swhatbuf_r+0x40>
 8008786:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800878a:	e00e      	b.n	80087aa <__swhatbuf_r+0x42>
 800878c:	466a      	mov	r2, sp
 800878e:	f000 f9a3 	bl	8008ad8 <_fstat_r>
 8008792:	2800      	cmp	r0, #0
 8008794:	dbf1      	blt.n	800877a <__swhatbuf_r+0x12>
 8008796:	9a01      	ldr	r2, [sp, #4]
 8008798:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800879c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80087a0:	425a      	negs	r2, r3
 80087a2:	415a      	adcs	r2, r3
 80087a4:	602a      	str	r2, [r5, #0]
 80087a6:	e7ee      	b.n	8008786 <__swhatbuf_r+0x1e>
 80087a8:	2340      	movs	r3, #64	; 0x40
 80087aa:	2000      	movs	r0, #0
 80087ac:	6023      	str	r3, [r4, #0]
 80087ae:	b016      	add	sp, #88	; 0x58
 80087b0:	bd70      	pop	{r4, r5, r6, pc}
	...

080087b4 <__smakebuf_r>:
 80087b4:	898b      	ldrh	r3, [r1, #12]
 80087b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80087b8:	079d      	lsls	r5, r3, #30
 80087ba:	4606      	mov	r6, r0
 80087bc:	460c      	mov	r4, r1
 80087be:	d507      	bpl.n	80087d0 <__smakebuf_r+0x1c>
 80087c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80087c4:	6023      	str	r3, [r4, #0]
 80087c6:	6123      	str	r3, [r4, #16]
 80087c8:	2301      	movs	r3, #1
 80087ca:	6163      	str	r3, [r4, #20]
 80087cc:	b002      	add	sp, #8
 80087ce:	bd70      	pop	{r4, r5, r6, pc}
 80087d0:	466a      	mov	r2, sp
 80087d2:	ab01      	add	r3, sp, #4
 80087d4:	f7ff ffc8 	bl	8008768 <__swhatbuf_r>
 80087d8:	9900      	ldr	r1, [sp, #0]
 80087da:	4605      	mov	r5, r0
 80087dc:	4630      	mov	r0, r6
 80087de:	f000 f891 	bl	8008904 <_malloc_r>
 80087e2:	b948      	cbnz	r0, 80087f8 <__smakebuf_r+0x44>
 80087e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087e8:	059a      	lsls	r2, r3, #22
 80087ea:	d4ef      	bmi.n	80087cc <__smakebuf_r+0x18>
 80087ec:	f023 0303 	bic.w	r3, r3, #3
 80087f0:	f043 0302 	orr.w	r3, r3, #2
 80087f4:	81a3      	strh	r3, [r4, #12]
 80087f6:	e7e3      	b.n	80087c0 <__smakebuf_r+0xc>
 80087f8:	4b0d      	ldr	r3, [pc, #52]	; (8008830 <__smakebuf_r+0x7c>)
 80087fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80087fc:	89a3      	ldrh	r3, [r4, #12]
 80087fe:	6020      	str	r0, [r4, #0]
 8008800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008804:	81a3      	strh	r3, [r4, #12]
 8008806:	9b00      	ldr	r3, [sp, #0]
 8008808:	6120      	str	r0, [r4, #16]
 800880a:	6163      	str	r3, [r4, #20]
 800880c:	9b01      	ldr	r3, [sp, #4]
 800880e:	b15b      	cbz	r3, 8008828 <__smakebuf_r+0x74>
 8008810:	4630      	mov	r0, r6
 8008812:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008816:	f000 f971 	bl	8008afc <_isatty_r>
 800881a:	b128      	cbz	r0, 8008828 <__smakebuf_r+0x74>
 800881c:	89a3      	ldrh	r3, [r4, #12]
 800881e:	f023 0303 	bic.w	r3, r3, #3
 8008822:	f043 0301 	orr.w	r3, r3, #1
 8008826:	81a3      	strh	r3, [r4, #12]
 8008828:	89a0      	ldrh	r0, [r4, #12]
 800882a:	4305      	orrs	r5, r0
 800882c:	81a5      	strh	r5, [r4, #12]
 800882e:	e7cd      	b.n	80087cc <__smakebuf_r+0x18>
 8008830:	080085c1 	.word	0x080085c1

08008834 <_free_r>:
 8008834:	b538      	push	{r3, r4, r5, lr}
 8008836:	4605      	mov	r5, r0
 8008838:	2900      	cmp	r1, #0
 800883a:	d040      	beq.n	80088be <_free_r+0x8a>
 800883c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008840:	1f0c      	subs	r4, r1, #4
 8008842:	2b00      	cmp	r3, #0
 8008844:	bfb8      	it	lt
 8008846:	18e4      	addlt	r4, r4, r3
 8008848:	f000 f97a 	bl	8008b40 <__malloc_lock>
 800884c:	4a1c      	ldr	r2, [pc, #112]	; (80088c0 <_free_r+0x8c>)
 800884e:	6813      	ldr	r3, [r2, #0]
 8008850:	b933      	cbnz	r3, 8008860 <_free_r+0x2c>
 8008852:	6063      	str	r3, [r4, #4]
 8008854:	6014      	str	r4, [r2, #0]
 8008856:	4628      	mov	r0, r5
 8008858:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800885c:	f000 b976 	b.w	8008b4c <__malloc_unlock>
 8008860:	42a3      	cmp	r3, r4
 8008862:	d908      	bls.n	8008876 <_free_r+0x42>
 8008864:	6820      	ldr	r0, [r4, #0]
 8008866:	1821      	adds	r1, r4, r0
 8008868:	428b      	cmp	r3, r1
 800886a:	bf01      	itttt	eq
 800886c:	6819      	ldreq	r1, [r3, #0]
 800886e:	685b      	ldreq	r3, [r3, #4]
 8008870:	1809      	addeq	r1, r1, r0
 8008872:	6021      	streq	r1, [r4, #0]
 8008874:	e7ed      	b.n	8008852 <_free_r+0x1e>
 8008876:	461a      	mov	r2, r3
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	b10b      	cbz	r3, 8008880 <_free_r+0x4c>
 800887c:	42a3      	cmp	r3, r4
 800887e:	d9fa      	bls.n	8008876 <_free_r+0x42>
 8008880:	6811      	ldr	r1, [r2, #0]
 8008882:	1850      	adds	r0, r2, r1
 8008884:	42a0      	cmp	r0, r4
 8008886:	d10b      	bne.n	80088a0 <_free_r+0x6c>
 8008888:	6820      	ldr	r0, [r4, #0]
 800888a:	4401      	add	r1, r0
 800888c:	1850      	adds	r0, r2, r1
 800888e:	4283      	cmp	r3, r0
 8008890:	6011      	str	r1, [r2, #0]
 8008892:	d1e0      	bne.n	8008856 <_free_r+0x22>
 8008894:	6818      	ldr	r0, [r3, #0]
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	4401      	add	r1, r0
 800889a:	6011      	str	r1, [r2, #0]
 800889c:	6053      	str	r3, [r2, #4]
 800889e:	e7da      	b.n	8008856 <_free_r+0x22>
 80088a0:	d902      	bls.n	80088a8 <_free_r+0x74>
 80088a2:	230c      	movs	r3, #12
 80088a4:	602b      	str	r3, [r5, #0]
 80088a6:	e7d6      	b.n	8008856 <_free_r+0x22>
 80088a8:	6820      	ldr	r0, [r4, #0]
 80088aa:	1821      	adds	r1, r4, r0
 80088ac:	428b      	cmp	r3, r1
 80088ae:	bf01      	itttt	eq
 80088b0:	6819      	ldreq	r1, [r3, #0]
 80088b2:	685b      	ldreq	r3, [r3, #4]
 80088b4:	1809      	addeq	r1, r1, r0
 80088b6:	6021      	streq	r1, [r4, #0]
 80088b8:	6063      	str	r3, [r4, #4]
 80088ba:	6054      	str	r4, [r2, #4]
 80088bc:	e7cb      	b.n	8008856 <_free_r+0x22>
 80088be:	bd38      	pop	{r3, r4, r5, pc}
 80088c0:	200021e4 	.word	0x200021e4

080088c4 <sbrk_aligned>:
 80088c4:	b570      	push	{r4, r5, r6, lr}
 80088c6:	4e0e      	ldr	r6, [pc, #56]	; (8008900 <sbrk_aligned+0x3c>)
 80088c8:	460c      	mov	r4, r1
 80088ca:	6831      	ldr	r1, [r6, #0]
 80088cc:	4605      	mov	r5, r0
 80088ce:	b911      	cbnz	r1, 80088d6 <sbrk_aligned+0x12>
 80088d0:	f000 f88c 	bl	80089ec <_sbrk_r>
 80088d4:	6030      	str	r0, [r6, #0]
 80088d6:	4621      	mov	r1, r4
 80088d8:	4628      	mov	r0, r5
 80088da:	f000 f887 	bl	80089ec <_sbrk_r>
 80088de:	1c43      	adds	r3, r0, #1
 80088e0:	d00a      	beq.n	80088f8 <sbrk_aligned+0x34>
 80088e2:	1cc4      	adds	r4, r0, #3
 80088e4:	f024 0403 	bic.w	r4, r4, #3
 80088e8:	42a0      	cmp	r0, r4
 80088ea:	d007      	beq.n	80088fc <sbrk_aligned+0x38>
 80088ec:	1a21      	subs	r1, r4, r0
 80088ee:	4628      	mov	r0, r5
 80088f0:	f000 f87c 	bl	80089ec <_sbrk_r>
 80088f4:	3001      	adds	r0, #1
 80088f6:	d101      	bne.n	80088fc <sbrk_aligned+0x38>
 80088f8:	f04f 34ff 	mov.w	r4, #4294967295
 80088fc:	4620      	mov	r0, r4
 80088fe:	bd70      	pop	{r4, r5, r6, pc}
 8008900:	200021e8 	.word	0x200021e8

08008904 <_malloc_r>:
 8008904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008908:	1ccd      	adds	r5, r1, #3
 800890a:	f025 0503 	bic.w	r5, r5, #3
 800890e:	3508      	adds	r5, #8
 8008910:	2d0c      	cmp	r5, #12
 8008912:	bf38      	it	cc
 8008914:	250c      	movcc	r5, #12
 8008916:	2d00      	cmp	r5, #0
 8008918:	4607      	mov	r7, r0
 800891a:	db01      	blt.n	8008920 <_malloc_r+0x1c>
 800891c:	42a9      	cmp	r1, r5
 800891e:	d905      	bls.n	800892c <_malloc_r+0x28>
 8008920:	230c      	movs	r3, #12
 8008922:	2600      	movs	r6, #0
 8008924:	603b      	str	r3, [r7, #0]
 8008926:	4630      	mov	r0, r6
 8008928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800892c:	4e2e      	ldr	r6, [pc, #184]	; (80089e8 <_malloc_r+0xe4>)
 800892e:	f000 f907 	bl	8008b40 <__malloc_lock>
 8008932:	6833      	ldr	r3, [r6, #0]
 8008934:	461c      	mov	r4, r3
 8008936:	bb34      	cbnz	r4, 8008986 <_malloc_r+0x82>
 8008938:	4629      	mov	r1, r5
 800893a:	4638      	mov	r0, r7
 800893c:	f7ff ffc2 	bl	80088c4 <sbrk_aligned>
 8008940:	1c43      	adds	r3, r0, #1
 8008942:	4604      	mov	r4, r0
 8008944:	d14d      	bne.n	80089e2 <_malloc_r+0xde>
 8008946:	6834      	ldr	r4, [r6, #0]
 8008948:	4626      	mov	r6, r4
 800894a:	2e00      	cmp	r6, #0
 800894c:	d140      	bne.n	80089d0 <_malloc_r+0xcc>
 800894e:	6823      	ldr	r3, [r4, #0]
 8008950:	4631      	mov	r1, r6
 8008952:	4638      	mov	r0, r7
 8008954:	eb04 0803 	add.w	r8, r4, r3
 8008958:	f000 f848 	bl	80089ec <_sbrk_r>
 800895c:	4580      	cmp	r8, r0
 800895e:	d13a      	bne.n	80089d6 <_malloc_r+0xd2>
 8008960:	6821      	ldr	r1, [r4, #0]
 8008962:	3503      	adds	r5, #3
 8008964:	1a6d      	subs	r5, r5, r1
 8008966:	f025 0503 	bic.w	r5, r5, #3
 800896a:	3508      	adds	r5, #8
 800896c:	2d0c      	cmp	r5, #12
 800896e:	bf38      	it	cc
 8008970:	250c      	movcc	r5, #12
 8008972:	4638      	mov	r0, r7
 8008974:	4629      	mov	r1, r5
 8008976:	f7ff ffa5 	bl	80088c4 <sbrk_aligned>
 800897a:	3001      	adds	r0, #1
 800897c:	d02b      	beq.n	80089d6 <_malloc_r+0xd2>
 800897e:	6823      	ldr	r3, [r4, #0]
 8008980:	442b      	add	r3, r5
 8008982:	6023      	str	r3, [r4, #0]
 8008984:	e00e      	b.n	80089a4 <_malloc_r+0xa0>
 8008986:	6822      	ldr	r2, [r4, #0]
 8008988:	1b52      	subs	r2, r2, r5
 800898a:	d41e      	bmi.n	80089ca <_malloc_r+0xc6>
 800898c:	2a0b      	cmp	r2, #11
 800898e:	d916      	bls.n	80089be <_malloc_r+0xba>
 8008990:	1961      	adds	r1, r4, r5
 8008992:	42a3      	cmp	r3, r4
 8008994:	6025      	str	r5, [r4, #0]
 8008996:	bf18      	it	ne
 8008998:	6059      	strne	r1, [r3, #4]
 800899a:	6863      	ldr	r3, [r4, #4]
 800899c:	bf08      	it	eq
 800899e:	6031      	streq	r1, [r6, #0]
 80089a0:	5162      	str	r2, [r4, r5]
 80089a2:	604b      	str	r3, [r1, #4]
 80089a4:	4638      	mov	r0, r7
 80089a6:	f104 060b 	add.w	r6, r4, #11
 80089aa:	f000 f8cf 	bl	8008b4c <__malloc_unlock>
 80089ae:	f026 0607 	bic.w	r6, r6, #7
 80089b2:	1d23      	adds	r3, r4, #4
 80089b4:	1af2      	subs	r2, r6, r3
 80089b6:	d0b6      	beq.n	8008926 <_malloc_r+0x22>
 80089b8:	1b9b      	subs	r3, r3, r6
 80089ba:	50a3      	str	r3, [r4, r2]
 80089bc:	e7b3      	b.n	8008926 <_malloc_r+0x22>
 80089be:	6862      	ldr	r2, [r4, #4]
 80089c0:	42a3      	cmp	r3, r4
 80089c2:	bf0c      	ite	eq
 80089c4:	6032      	streq	r2, [r6, #0]
 80089c6:	605a      	strne	r2, [r3, #4]
 80089c8:	e7ec      	b.n	80089a4 <_malloc_r+0xa0>
 80089ca:	4623      	mov	r3, r4
 80089cc:	6864      	ldr	r4, [r4, #4]
 80089ce:	e7b2      	b.n	8008936 <_malloc_r+0x32>
 80089d0:	4634      	mov	r4, r6
 80089d2:	6876      	ldr	r6, [r6, #4]
 80089d4:	e7b9      	b.n	800894a <_malloc_r+0x46>
 80089d6:	230c      	movs	r3, #12
 80089d8:	4638      	mov	r0, r7
 80089da:	603b      	str	r3, [r7, #0]
 80089dc:	f000 f8b6 	bl	8008b4c <__malloc_unlock>
 80089e0:	e7a1      	b.n	8008926 <_malloc_r+0x22>
 80089e2:	6025      	str	r5, [r4, #0]
 80089e4:	e7de      	b.n	80089a4 <_malloc_r+0xa0>
 80089e6:	bf00      	nop
 80089e8:	200021e4 	.word	0x200021e4

080089ec <_sbrk_r>:
 80089ec:	b538      	push	{r3, r4, r5, lr}
 80089ee:	2300      	movs	r3, #0
 80089f0:	4d05      	ldr	r5, [pc, #20]	; (8008a08 <_sbrk_r+0x1c>)
 80089f2:	4604      	mov	r4, r0
 80089f4:	4608      	mov	r0, r1
 80089f6:	602b      	str	r3, [r5, #0]
 80089f8:	f7fb fdc6 	bl	8004588 <_sbrk>
 80089fc:	1c43      	adds	r3, r0, #1
 80089fe:	d102      	bne.n	8008a06 <_sbrk_r+0x1a>
 8008a00:	682b      	ldr	r3, [r5, #0]
 8008a02:	b103      	cbz	r3, 8008a06 <_sbrk_r+0x1a>
 8008a04:	6023      	str	r3, [r4, #0]
 8008a06:	bd38      	pop	{r3, r4, r5, pc}
 8008a08:	200021ec 	.word	0x200021ec

08008a0c <__sread>:
 8008a0c:	b510      	push	{r4, lr}
 8008a0e:	460c      	mov	r4, r1
 8008a10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a14:	f000 f8a0 	bl	8008b58 <_read_r>
 8008a18:	2800      	cmp	r0, #0
 8008a1a:	bfab      	itete	ge
 8008a1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008a1e:	89a3      	ldrhlt	r3, [r4, #12]
 8008a20:	181b      	addge	r3, r3, r0
 8008a22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008a26:	bfac      	ite	ge
 8008a28:	6563      	strge	r3, [r4, #84]	; 0x54
 8008a2a:	81a3      	strhlt	r3, [r4, #12]
 8008a2c:	bd10      	pop	{r4, pc}

08008a2e <__swrite>:
 8008a2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a32:	461f      	mov	r7, r3
 8008a34:	898b      	ldrh	r3, [r1, #12]
 8008a36:	4605      	mov	r5, r0
 8008a38:	05db      	lsls	r3, r3, #23
 8008a3a:	460c      	mov	r4, r1
 8008a3c:	4616      	mov	r6, r2
 8008a3e:	d505      	bpl.n	8008a4c <__swrite+0x1e>
 8008a40:	2302      	movs	r3, #2
 8008a42:	2200      	movs	r2, #0
 8008a44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a48:	f000 f868 	bl	8008b1c <_lseek_r>
 8008a4c:	89a3      	ldrh	r3, [r4, #12]
 8008a4e:	4632      	mov	r2, r6
 8008a50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a54:	81a3      	strh	r3, [r4, #12]
 8008a56:	4628      	mov	r0, r5
 8008a58:	463b      	mov	r3, r7
 8008a5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a62:	f000 b817 	b.w	8008a94 <_write_r>

08008a66 <__sseek>:
 8008a66:	b510      	push	{r4, lr}
 8008a68:	460c      	mov	r4, r1
 8008a6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a6e:	f000 f855 	bl	8008b1c <_lseek_r>
 8008a72:	1c43      	adds	r3, r0, #1
 8008a74:	89a3      	ldrh	r3, [r4, #12]
 8008a76:	bf15      	itete	ne
 8008a78:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a82:	81a3      	strheq	r3, [r4, #12]
 8008a84:	bf18      	it	ne
 8008a86:	81a3      	strhne	r3, [r4, #12]
 8008a88:	bd10      	pop	{r4, pc}

08008a8a <__sclose>:
 8008a8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a8e:	f000 b813 	b.w	8008ab8 <_close_r>
	...

08008a94 <_write_r>:
 8008a94:	b538      	push	{r3, r4, r5, lr}
 8008a96:	4604      	mov	r4, r0
 8008a98:	4608      	mov	r0, r1
 8008a9a:	4611      	mov	r1, r2
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	4d05      	ldr	r5, [pc, #20]	; (8008ab4 <_write_r+0x20>)
 8008aa0:	602a      	str	r2, [r5, #0]
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	f7fb fd23 	bl	80044ee <_write>
 8008aa8:	1c43      	adds	r3, r0, #1
 8008aaa:	d102      	bne.n	8008ab2 <_write_r+0x1e>
 8008aac:	682b      	ldr	r3, [r5, #0]
 8008aae:	b103      	cbz	r3, 8008ab2 <_write_r+0x1e>
 8008ab0:	6023      	str	r3, [r4, #0]
 8008ab2:	bd38      	pop	{r3, r4, r5, pc}
 8008ab4:	200021ec 	.word	0x200021ec

08008ab8 <_close_r>:
 8008ab8:	b538      	push	{r3, r4, r5, lr}
 8008aba:	2300      	movs	r3, #0
 8008abc:	4d05      	ldr	r5, [pc, #20]	; (8008ad4 <_close_r+0x1c>)
 8008abe:	4604      	mov	r4, r0
 8008ac0:	4608      	mov	r0, r1
 8008ac2:	602b      	str	r3, [r5, #0]
 8008ac4:	f7fb fd2f 	bl	8004526 <_close>
 8008ac8:	1c43      	adds	r3, r0, #1
 8008aca:	d102      	bne.n	8008ad2 <_close_r+0x1a>
 8008acc:	682b      	ldr	r3, [r5, #0]
 8008ace:	b103      	cbz	r3, 8008ad2 <_close_r+0x1a>
 8008ad0:	6023      	str	r3, [r4, #0]
 8008ad2:	bd38      	pop	{r3, r4, r5, pc}
 8008ad4:	200021ec 	.word	0x200021ec

08008ad8 <_fstat_r>:
 8008ad8:	b538      	push	{r3, r4, r5, lr}
 8008ada:	2300      	movs	r3, #0
 8008adc:	4d06      	ldr	r5, [pc, #24]	; (8008af8 <_fstat_r+0x20>)
 8008ade:	4604      	mov	r4, r0
 8008ae0:	4608      	mov	r0, r1
 8008ae2:	4611      	mov	r1, r2
 8008ae4:	602b      	str	r3, [r5, #0]
 8008ae6:	f7fb fd29 	bl	800453c <_fstat>
 8008aea:	1c43      	adds	r3, r0, #1
 8008aec:	d102      	bne.n	8008af4 <_fstat_r+0x1c>
 8008aee:	682b      	ldr	r3, [r5, #0]
 8008af0:	b103      	cbz	r3, 8008af4 <_fstat_r+0x1c>
 8008af2:	6023      	str	r3, [r4, #0]
 8008af4:	bd38      	pop	{r3, r4, r5, pc}
 8008af6:	bf00      	nop
 8008af8:	200021ec 	.word	0x200021ec

08008afc <_isatty_r>:
 8008afc:	b538      	push	{r3, r4, r5, lr}
 8008afe:	2300      	movs	r3, #0
 8008b00:	4d05      	ldr	r5, [pc, #20]	; (8008b18 <_isatty_r+0x1c>)
 8008b02:	4604      	mov	r4, r0
 8008b04:	4608      	mov	r0, r1
 8008b06:	602b      	str	r3, [r5, #0]
 8008b08:	f7fb fd27 	bl	800455a <_isatty>
 8008b0c:	1c43      	adds	r3, r0, #1
 8008b0e:	d102      	bne.n	8008b16 <_isatty_r+0x1a>
 8008b10:	682b      	ldr	r3, [r5, #0]
 8008b12:	b103      	cbz	r3, 8008b16 <_isatty_r+0x1a>
 8008b14:	6023      	str	r3, [r4, #0]
 8008b16:	bd38      	pop	{r3, r4, r5, pc}
 8008b18:	200021ec 	.word	0x200021ec

08008b1c <_lseek_r>:
 8008b1c:	b538      	push	{r3, r4, r5, lr}
 8008b1e:	4604      	mov	r4, r0
 8008b20:	4608      	mov	r0, r1
 8008b22:	4611      	mov	r1, r2
 8008b24:	2200      	movs	r2, #0
 8008b26:	4d05      	ldr	r5, [pc, #20]	; (8008b3c <_lseek_r+0x20>)
 8008b28:	602a      	str	r2, [r5, #0]
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	f7fb fd1f 	bl	800456e <_lseek>
 8008b30:	1c43      	adds	r3, r0, #1
 8008b32:	d102      	bne.n	8008b3a <_lseek_r+0x1e>
 8008b34:	682b      	ldr	r3, [r5, #0]
 8008b36:	b103      	cbz	r3, 8008b3a <_lseek_r+0x1e>
 8008b38:	6023      	str	r3, [r4, #0]
 8008b3a:	bd38      	pop	{r3, r4, r5, pc}
 8008b3c:	200021ec 	.word	0x200021ec

08008b40 <__malloc_lock>:
 8008b40:	4801      	ldr	r0, [pc, #4]	; (8008b48 <__malloc_lock+0x8>)
 8008b42:	f7ff be0f 	b.w	8008764 <__retarget_lock_acquire_recursive>
 8008b46:	bf00      	nop
 8008b48:	200021e0 	.word	0x200021e0

08008b4c <__malloc_unlock>:
 8008b4c:	4801      	ldr	r0, [pc, #4]	; (8008b54 <__malloc_unlock+0x8>)
 8008b4e:	f7ff be0a 	b.w	8008766 <__retarget_lock_release_recursive>
 8008b52:	bf00      	nop
 8008b54:	200021e0 	.word	0x200021e0

08008b58 <_read_r>:
 8008b58:	b538      	push	{r3, r4, r5, lr}
 8008b5a:	4604      	mov	r4, r0
 8008b5c:	4608      	mov	r0, r1
 8008b5e:	4611      	mov	r1, r2
 8008b60:	2200      	movs	r2, #0
 8008b62:	4d05      	ldr	r5, [pc, #20]	; (8008b78 <_read_r+0x20>)
 8008b64:	602a      	str	r2, [r5, #0]
 8008b66:	461a      	mov	r2, r3
 8008b68:	f7fb fca4 	bl	80044b4 <_read>
 8008b6c:	1c43      	adds	r3, r0, #1
 8008b6e:	d102      	bne.n	8008b76 <_read_r+0x1e>
 8008b70:	682b      	ldr	r3, [r5, #0]
 8008b72:	b103      	cbz	r3, 8008b76 <_read_r+0x1e>
 8008b74:	6023      	str	r3, [r4, #0]
 8008b76:	bd38      	pop	{r3, r4, r5, pc}
 8008b78:	200021ec 	.word	0x200021ec

08008b7c <_init>:
 8008b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b7e:	bf00      	nop
 8008b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b82:	bc08      	pop	{r3}
 8008b84:	469e      	mov	lr, r3
 8008b86:	4770      	bx	lr

08008b88 <_fini>:
 8008b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b8a:	bf00      	nop
 8008b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b8e:	bc08      	pop	{r3}
 8008b90:	469e      	mov	lr, r3
 8008b92:	4770      	bx	lr
