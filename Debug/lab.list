
lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b1c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b8  08004d08  08004d08  00014d08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080053c0  080053c0  000153c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080053c4  080053c4  000153c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000178  20000000  080053c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001f04  20000178  08005540  00020178  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2000207c  08005540  0002207c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY
  9 .debug_info   00009a3c  00000000  00000000  000201a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000252c  00000000  00000000  00029bdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000a58  00000000  00000000  0002c110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000910  00000000  00000000  0002cb68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   00007ce3  00000000  00000000  0002d478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    00002ac2  00000000  00000000  0003515b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .comment      00000050  00000000  00000000  00037c1d  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002c78  00000000  00000000  00037c70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000178 	.word	0x20000178
 8000204:	00000000 	.word	0x00000000
 8000208:	08004cec 	.word	0x08004cec

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000017c 	.word	0x2000017c
 8000224:	08004cec 	.word	0x08004cec

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpun>:
 8000ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x10>
 8000ade:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ae2:	d10a      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000ae4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x20>
 8000aee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000af2:	d102      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	f04f 0001 	mov.w	r0, #1
 8000afe:	4770      	bx	lr

08000b00 <__aeabi_d2uiz>:
 8000b00:	004a      	lsls	r2, r1, #1
 8000b02:	d211      	bcs.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d211      	bcs.n	8000b2e <__aeabi_d2uiz+0x2e>
 8000b0a:	d50d      	bpl.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d40e      	bmi.n	8000b34 <__aeabi_d2uiz+0x34>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	fa23 f002 	lsr.w	r0, r3, r2
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_d2uiz+0x3a>
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr

08000b40 <Ov7725_Init>:
uint16_t pixels[100][150];
/************************************************
 * Sensor_Init
 ************************************************/
ErrorStatus Ov7725_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	80fb      	strh	r3, [r7, #6]
	uint8_t Sensor_IDCode = 0;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	717b      	strb	r3, [r7, #5]

	if (0 == SCCB_WriteByte(0x12, 0x80)) /*reset sensor */
 8000b4e:	2180      	movs	r1, #128	; 0x80
 8000b50:	2012      	movs	r0, #18
 8000b52:	f000 f955 	bl	8000e00 <SCCB_WriteByte>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d101      	bne.n	8000b60 <Ov7725_Init+0x20>
	{
		return ERROR;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	e030      	b.n	8000bc2 <Ov7725_Init+0x82>
	}

	if (0 == SCCB_ReadByte(&Sensor_IDCode, 1, 0x0b)) /* read sensor ID*/
 8000b60:	1d7b      	adds	r3, r7, #5
 8000b62:	220b      	movs	r2, #11
 8000b64:	2101      	movs	r1, #1
 8000b66:	4618      	mov	r0, r3
 8000b68:	f000 f979 	bl	8000e5e <SCCB_ReadByte>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d101      	bne.n	8000b76 <Ov7725_Init+0x36>
	{
		return ERROR;
 8000b72:	2300      	movs	r3, #0
 8000b74:	e025      	b.n	8000bc2 <Ov7725_Init+0x82>
	}
	// DEBUG("Sensor ID is 0x%x", Sensor_IDCode);

	if (Sensor_IDCode == OV7725_ID)
 8000b76:	797b      	ldrb	r3, [r7, #5]
 8000b78:	2b21      	cmp	r3, #33	; 0x21
 8000b7a:	d11f      	bne.n	8000bbc <Ov7725_Init+0x7c>
	{
		for (i = 0; i < OV7725_REG_NUM; i++)
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	80fb      	strh	r3, [r7, #6]
 8000b80:	e015      	b.n	8000bae <Ov7725_Init+0x6e>
		{
			if (0 == SCCB_WriteByte(Sensor_Config[i].Address, Sensor_Config[i].Value))
 8000b82:	88fb      	ldrh	r3, [r7, #6]
 8000b84:	4a11      	ldr	r2, [pc, #68]	; (8000bcc <Ov7725_Init+0x8c>)
 8000b86:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000b8a:	b29a      	uxth	r2, r3
 8000b8c:	88fb      	ldrh	r3, [r7, #6]
 8000b8e:	490f      	ldr	r1, [pc, #60]	; (8000bcc <Ov7725_Init+0x8c>)
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	440b      	add	r3, r1
 8000b94:	785b      	ldrb	r3, [r3, #1]
 8000b96:	4619      	mov	r1, r3
 8000b98:	4610      	mov	r0, r2
 8000b9a:	f000 f931 	bl	8000e00 <SCCB_WriteByte>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d101      	bne.n	8000ba8 <Ov7725_Init+0x68>
			{
				return ERROR;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	e00c      	b.n	8000bc2 <Ov7725_Init+0x82>
		for (i = 0; i < OV7725_REG_NUM; i++)
 8000ba8:	88fb      	ldrh	r3, [r7, #6]
 8000baa:	3301      	adds	r3, #1
 8000bac:	80fb      	strh	r3, [r7, #6]
 8000bae:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <Ov7725_Init+0x90>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	88fa      	ldrh	r2, [r7, #6]
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d3e3      	bcc.n	8000b82 <Ov7725_Init+0x42>
 8000bba:	e001      	b.n	8000bc0 <Ov7725_Init+0x80>
			}
		}
	}
	else
	{
		return ERROR;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	e000      	b.n	8000bc2 <Ov7725_Init+0x82>
	}

	return SUCCESS;
 8000bc0:	2301      	movs	r3, #1
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000000 	.word	0x20000000
 8000bd0:	2000009a 	.word	0x2000009a

08000bd4 <SCCB_delay>:

#define DEV_ADR  ADDR_OV7725 			 


static void SCCB_delay(void)
{	
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
   uint16_t i = 400; 
 8000bda:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000bde:	80fb      	strh	r3, [r7, #6]
   while(i) 
 8000be0:	e002      	b.n	8000be8 <SCCB_delay+0x14>
   { 
     i--; 
 8000be2:	88fb      	ldrh	r3, [r7, #6]
 8000be4:	3b01      	subs	r3, #1
 8000be6:	80fb      	strh	r3, [r7, #6]
   while(i) 
 8000be8:	88fb      	ldrh	r3, [r7, #6]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d1f9      	bne.n	8000be2 <SCCB_delay+0xe>
   } 
}
 8000bee:	bf00      	nop
 8000bf0:	bf00      	nop
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bc80      	pop	{r7}
 8000bf8:	4770      	bx	lr
	...

08000bfc <SCCB_Start>:


static int SCCB_Start(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
	SDA_H;
 8000c00:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <SCCB_Start+0x54>)
 8000c02:	2280      	movs	r2, #128	; 0x80
 8000c04:	611a      	str	r2, [r3, #16]
	SCL_H;
 8000c06:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <SCCB_Start+0x54>)
 8000c08:	2240      	movs	r2, #64	; 0x40
 8000c0a:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000c0c:	f7ff ffe2 	bl	8000bd4 <SCCB_delay>
	if(!SDA_read)
 8000c10:	2180      	movs	r1, #128	; 0x80
 8000c12:	480f      	ldr	r0, [pc, #60]	; (8000c50 <SCCB_Start+0x54>)
 8000c14:	f001 ffa0 	bl	8002b58 <HAL_GPIO_ReadPin>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d101      	bne.n	8000c22 <SCCB_Start+0x26>
	return DISABLE;	
 8000c1e:	2300      	movs	r3, #0
 8000c20:	e013      	b.n	8000c4a <SCCB_Start+0x4e>
	SDA_L;
 8000c22:	4b0b      	ldr	r3, [pc, #44]	; (8000c50 <SCCB_Start+0x54>)
 8000c24:	2280      	movs	r2, #128	; 0x80
 8000c26:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000c28:	f7ff ffd4 	bl	8000bd4 <SCCB_delay>
	if(SDA_read) 
 8000c2c:	2180      	movs	r1, #128	; 0x80
 8000c2e:	4808      	ldr	r0, [pc, #32]	; (8000c50 <SCCB_Start+0x54>)
 8000c30:	f001 ff92 	bl	8002b58 <HAL_GPIO_ReadPin>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <SCCB_Start+0x42>
	return DISABLE;	
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	e005      	b.n	8000c4a <SCCB_Start+0x4e>
	SDA_L;
 8000c3e:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <SCCB_Start+0x54>)
 8000c40:	2280      	movs	r2, #128	; 0x80
 8000c42:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000c44:	f7ff ffc6 	bl	8000bd4 <SCCB_delay>
	return ENABLE;
 8000c48:	2301      	movs	r3, #1
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40011000 	.word	0x40011000

08000c54 <SCCB_Stop>:


static void SCCB_Stop(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
	SCL_L;
 8000c58:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <SCCB_Stop+0x30>)
 8000c5a:	2240      	movs	r2, #64	; 0x40
 8000c5c:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000c5e:	f7ff ffb9 	bl	8000bd4 <SCCB_delay>
	SDA_L;
 8000c62:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <SCCB_Stop+0x30>)
 8000c64:	2280      	movs	r2, #128	; 0x80
 8000c66:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000c68:	f7ff ffb4 	bl	8000bd4 <SCCB_delay>
	SCL_H;
 8000c6c:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <SCCB_Stop+0x30>)
 8000c6e:	2240      	movs	r2, #64	; 0x40
 8000c70:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000c72:	f7ff ffaf 	bl	8000bd4 <SCCB_delay>
	SDA_H;
 8000c76:	4b03      	ldr	r3, [pc, #12]	; (8000c84 <SCCB_Stop+0x30>)
 8000c78:	2280      	movs	r2, #128	; 0x80
 8000c7a:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000c7c:	f7ff ffaa 	bl	8000bd4 <SCCB_delay>
}
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40011000 	.word	0x40011000

08000c88 <SCCB_Ack>:


static void SCCB_Ack(void)
{	
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
	SCL_L;
 8000c8c:	4b0a      	ldr	r3, [pc, #40]	; (8000cb8 <SCCB_Ack+0x30>)
 8000c8e:	2240      	movs	r2, #64	; 0x40
 8000c90:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000c92:	f7ff ff9f 	bl	8000bd4 <SCCB_delay>
	SDA_L;
 8000c96:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <SCCB_Ack+0x30>)
 8000c98:	2280      	movs	r2, #128	; 0x80
 8000c9a:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000c9c:	f7ff ff9a 	bl	8000bd4 <SCCB_delay>
	SCL_H;
 8000ca0:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <SCCB_Ack+0x30>)
 8000ca2:	2240      	movs	r2, #64	; 0x40
 8000ca4:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000ca6:	f7ff ff95 	bl	8000bd4 <SCCB_delay>
	SCL_L;
 8000caa:	4b03      	ldr	r3, [pc, #12]	; (8000cb8 <SCCB_Ack+0x30>)
 8000cac:	2240      	movs	r2, #64	; 0x40
 8000cae:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000cb0:	f7ff ff90 	bl	8000bd4 <SCCB_delay>
}
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40011000 	.word	0x40011000

08000cbc <SCCB_NoAck>:


static void SCCB_NoAck(void)
{	
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
	SCL_L;
 8000cc0:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <SCCB_NoAck+0x30>)
 8000cc2:	2240      	movs	r2, #64	; 0x40
 8000cc4:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000cc6:	f7ff ff85 	bl	8000bd4 <SCCB_delay>
	SDA_H;
 8000cca:	4b08      	ldr	r3, [pc, #32]	; (8000cec <SCCB_NoAck+0x30>)
 8000ccc:	2280      	movs	r2, #128	; 0x80
 8000cce:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000cd0:	f7ff ff80 	bl	8000bd4 <SCCB_delay>
	SCL_H;
 8000cd4:	4b05      	ldr	r3, [pc, #20]	; (8000cec <SCCB_NoAck+0x30>)
 8000cd6:	2240      	movs	r2, #64	; 0x40
 8000cd8:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000cda:	f7ff ff7b 	bl	8000bd4 <SCCB_delay>
	SCL_L;
 8000cde:	4b03      	ldr	r3, [pc, #12]	; (8000cec <SCCB_NoAck+0x30>)
 8000ce0:	2240      	movs	r2, #64	; 0x40
 8000ce2:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000ce4:	f7ff ff76 	bl	8000bd4 <SCCB_delay>
}
 8000ce8:	bf00      	nop
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40011000 	.word	0x40011000

08000cf0 <SCCB_WaitAck>:


static int SCCB_WaitAck(void) 	
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
	SCL_L;
 8000cf4:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <SCCB_WaitAck+0x48>)
 8000cf6:	2240      	movs	r2, #64	; 0x40
 8000cf8:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000cfa:	f7ff ff6b 	bl	8000bd4 <SCCB_delay>
	SDA_H;			
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <SCCB_WaitAck+0x48>)
 8000d00:	2280      	movs	r2, #128	; 0x80
 8000d02:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000d04:	f7ff ff66 	bl	8000bd4 <SCCB_delay>
	SCL_H;
 8000d08:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <SCCB_WaitAck+0x48>)
 8000d0a:	2240      	movs	r2, #64	; 0x40
 8000d0c:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000d0e:	f7ff ff61 	bl	8000bd4 <SCCB_delay>
	if(SDA_read)
 8000d12:	2180      	movs	r1, #128	; 0x80
 8000d14:	4808      	ldr	r0, [pc, #32]	; (8000d38 <SCCB_WaitAck+0x48>)
 8000d16:	f001 ff1f 	bl	8002b58 <HAL_GPIO_ReadPin>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d004      	beq.n	8000d2a <SCCB_WaitAck+0x3a>
	{
      SCL_L;
 8000d20:	4b05      	ldr	r3, [pc, #20]	; (8000d38 <SCCB_WaitAck+0x48>)
 8000d22:	2240      	movs	r2, #64	; 0x40
 8000d24:	615a      	str	r2, [r3, #20]
      return DISABLE;
 8000d26:	2300      	movs	r3, #0
 8000d28:	e003      	b.n	8000d32 <SCCB_WaitAck+0x42>
	}
	SCL_L;
 8000d2a:	4b03      	ldr	r3, [pc, #12]	; (8000d38 <SCCB_WaitAck+0x48>)
 8000d2c:	2240      	movs	r2, #64	; 0x40
 8000d2e:	615a      	str	r2, [r3, #20]
	return ENABLE;
 8000d30:	2301      	movs	r3, #1
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40011000 	.word	0x40011000

08000d3c <SCCB_SendByte>:


static void SCCB_SendByte(uint8_t SendByte) 
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
    uint8_t i=8;
 8000d46:	2308      	movs	r3, #8
 8000d48:	73fb      	strb	r3, [r7, #15]
    while(i--)
 8000d4a:	e019      	b.n	8000d80 <SCCB_SendByte+0x44>
    {
        SCL_L;
 8000d4c:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <SCCB_SendByte+0x5c>)
 8000d4e:	2240      	movs	r2, #64	; 0x40
 8000d50:	615a      	str	r2, [r3, #20]
        SCCB_delay();
 8000d52:	f7ff ff3f 	bl	8000bd4 <SCCB_delay>
      if(SendByte&0x80)
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	da03      	bge.n	8000d66 <SCCB_SendByte+0x2a>
        SDA_H;  
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <SCCB_SendByte+0x5c>)
 8000d60:	2280      	movs	r2, #128	; 0x80
 8000d62:	611a      	str	r2, [r3, #16]
 8000d64:	e002      	b.n	8000d6c <SCCB_SendByte+0x30>
      else 
        SDA_L;   
 8000d66:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <SCCB_SendByte+0x5c>)
 8000d68:	2280      	movs	r2, #128	; 0x80
 8000d6a:	615a      	str	r2, [r3, #20]
        SendByte<<=1;
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	71fb      	strb	r3, [r7, #7]
        SCCB_delay();
 8000d72:	f7ff ff2f 	bl	8000bd4 <SCCB_delay>
		SCL_H;
 8000d76:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <SCCB_SendByte+0x5c>)
 8000d78:	2240      	movs	r2, #64	; 0x40
 8000d7a:	611a      	str	r2, [r3, #16]
        SCCB_delay();
 8000d7c:	f7ff ff2a 	bl	8000bd4 <SCCB_delay>
    while(i--)
 8000d80:	7bfb      	ldrb	r3, [r7, #15]
 8000d82:	1e5a      	subs	r2, r3, #1
 8000d84:	73fa      	strb	r2, [r7, #15]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d1e0      	bne.n	8000d4c <SCCB_SendByte+0x10>
    }
    SCL_L;
 8000d8a:	4b03      	ldr	r3, [pc, #12]	; (8000d98 <SCCB_SendByte+0x5c>)
 8000d8c:	2240      	movs	r2, #64	; 0x40
 8000d8e:	615a      	str	r2, [r3, #20]
}
 8000d90:	bf00      	nop
 8000d92:	3710      	adds	r7, #16
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40011000 	.word	0x40011000

08000d9c <SCCB_ReceiveByte>:


static int SCCB_ReceiveByte(void)  
{ 
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
    uint8_t i=8;
 8000da2:	2308      	movs	r3, #8
 8000da4:	71fb      	strb	r3, [r7, #7]
    uint8_t ReceiveByte=0;
 8000da6:	2300      	movs	r3, #0
 8000da8:	71bb      	strb	r3, [r7, #6]

    SDA_H;				
 8000daa:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <SCCB_ReceiveByte+0x60>)
 8000dac:	2280      	movs	r2, #128	; 0x80
 8000dae:	611a      	str	r2, [r3, #16]
    while(i--)
 8000db0:	e017      	b.n	8000de2 <SCCB_ReceiveByte+0x46>
    {
      ReceiveByte<<=1;      
 8000db2:	79bb      	ldrb	r3, [r7, #6]
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	71bb      	strb	r3, [r7, #6]
      SCL_L;
 8000db8:	4b10      	ldr	r3, [pc, #64]	; (8000dfc <SCCB_ReceiveByte+0x60>)
 8000dba:	2240      	movs	r2, #64	; 0x40
 8000dbc:	615a      	str	r2, [r3, #20]
      SCCB_delay();
 8000dbe:	f7ff ff09 	bl	8000bd4 <SCCB_delay>
	  SCL_H;
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <SCCB_ReceiveByte+0x60>)
 8000dc4:	2240      	movs	r2, #64	; 0x40
 8000dc6:	611a      	str	r2, [r3, #16]
      SCCB_delay();	
 8000dc8:	f7ff ff04 	bl	8000bd4 <SCCB_delay>
      if(SDA_read)
 8000dcc:	2180      	movs	r1, #128	; 0x80
 8000dce:	480b      	ldr	r0, [pc, #44]	; (8000dfc <SCCB_ReceiveByte+0x60>)
 8000dd0:	f001 fec2 	bl	8002b58 <HAL_GPIO_ReadPin>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d003      	beq.n	8000de2 <SCCB_ReceiveByte+0x46>
      {
        ReceiveByte|=0x01;
 8000dda:	79bb      	ldrb	r3, [r7, #6]
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	71bb      	strb	r3, [r7, #6]
    while(i--)
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	1e5a      	subs	r2, r3, #1
 8000de6:	71fa      	strb	r2, [r7, #7]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d1e2      	bne.n	8000db2 <SCCB_ReceiveByte+0x16>
      }
    }
    SCL_L;
 8000dec:	4b03      	ldr	r3, [pc, #12]	; (8000dfc <SCCB_ReceiveByte+0x60>)
 8000dee:	2240      	movs	r2, #64	; 0x40
 8000df0:	615a      	str	r2, [r3, #20]
    return ReceiveByte;
 8000df2:	79bb      	ldrb	r3, [r7, #6]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40011000 	.word	0x40011000

08000e00 <SCCB_WriteByte>:

          
int SCCB_WriteByte( uint16_t WriteAddress , uint8_t SendByte )
{		
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	460a      	mov	r2, r1
 8000e0a:	80fb      	strh	r3, [r7, #6]
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	717b      	strb	r3, [r7, #5]
    if(!SCCB_Start())
 8000e10:	f7ff fef4 	bl	8000bfc <SCCB_Start>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d101      	bne.n	8000e1e <SCCB_WriteByte+0x1e>
	{
	    return DISABLE;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	e01b      	b.n	8000e56 <SCCB_WriteByte+0x56>
	}
    SCCB_SendByte( DEV_ADR );                
 8000e1e:	2042      	movs	r0, #66	; 0x42
 8000e20:	f7ff ff8c 	bl	8000d3c <SCCB_SendByte>
    if( !SCCB_WaitAck() )
 8000e24:	f7ff ff64 	bl	8000cf0 <SCCB_WaitAck>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d103      	bne.n	8000e36 <SCCB_WriteByte+0x36>
	{
		SCCB_Stop(); 
 8000e2e:	f7ff ff11 	bl	8000c54 <SCCB_Stop>
		return DISABLE;
 8000e32:	2300      	movs	r3, #0
 8000e34:	e00f      	b.n	8000e56 <SCCB_WriteByte+0x56>
	}
    SCCB_SendByte((uint8_t)(WriteAddress & 0x00FF));  
 8000e36:	88fb      	ldrh	r3, [r7, #6]
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff ff7e 	bl	8000d3c <SCCB_SendByte>
    SCCB_WaitAck();	
 8000e40:	f7ff ff56 	bl	8000cf0 <SCCB_WaitAck>
    SCCB_SendByte(SendByte);
 8000e44:	797b      	ldrb	r3, [r7, #5]
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff ff78 	bl	8000d3c <SCCB_SendByte>
    SCCB_WaitAck();   
 8000e4c:	f7ff ff50 	bl	8000cf0 <SCCB_WaitAck>
    SCCB_Stop(); 
 8000e50:	f7ff ff00 	bl	8000c54 <SCCB_Stop>
    return ENABLE;
 8000e54:	2301      	movs	r3, #1
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <SCCB_ReadByte>:

          
int SCCB_ReadByte(uint8_t* pBuffer, uint16_t length, uint8_t ReadAddress)
{	
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b082      	sub	sp, #8
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
 8000e66:	460b      	mov	r3, r1
 8000e68:	807b      	strh	r3, [r7, #2]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	707b      	strb	r3, [r7, #1]
    if(!SCCB_Start())
 8000e6e:	f7ff fec5 	bl	8000bfc <SCCB_Start>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d101      	bne.n	8000e7c <SCCB_ReadByte+0x1e>
	{
	    return DISABLE;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	e040      	b.n	8000efe <SCCB_ReadByte+0xa0>
	}
    SCCB_SendByte( DEV_ADR );       
 8000e7c:	2042      	movs	r0, #66	; 0x42
 8000e7e:	f7ff ff5d 	bl	8000d3c <SCCB_SendByte>
    if( !SCCB_WaitAck() )
 8000e82:	f7ff ff35 	bl	8000cf0 <SCCB_WaitAck>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d103      	bne.n	8000e94 <SCCB_ReadByte+0x36>
	{
		SCCB_Stop(); 
 8000e8c:	f7ff fee2 	bl	8000c54 <SCCB_Stop>
		return DISABLE;
 8000e90:	2300      	movs	r3, #0
 8000e92:	e034      	b.n	8000efe <SCCB_ReadByte+0xa0>
	}
    SCCB_SendByte( ReadAddress );     
 8000e94:	787b      	ldrb	r3, [r7, #1]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff ff50 	bl	8000d3c <SCCB_SendByte>
    SCCB_WaitAck();	
 8000e9c:	f7ff ff28 	bl	8000cf0 <SCCB_WaitAck>
    SCCB_Stop(); 
 8000ea0:	f7ff fed8 	bl	8000c54 <SCCB_Stop>
	
    if(!SCCB_Start())
 8000ea4:	f7ff feaa 	bl	8000bfc <SCCB_Start>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d101      	bne.n	8000eb2 <SCCB_ReadByte+0x54>
	{
		return DISABLE;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	e025      	b.n	8000efe <SCCB_ReadByte+0xa0>
	}
    SCCB_SendByte( DEV_ADR + 1 );   
 8000eb2:	2043      	movs	r0, #67	; 0x43
 8000eb4:	f7ff ff42 	bl	8000d3c <SCCB_SendByte>
    if(!SCCB_WaitAck())
 8000eb8:	f7ff ff1a 	bl	8000cf0 <SCCB_WaitAck>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d117      	bne.n	8000ef2 <SCCB_ReadByte+0x94>
	{
		SCCB_Stop(); 
 8000ec2:	f7ff fec7 	bl	8000c54 <SCCB_Stop>
		return DISABLE;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	e019      	b.n	8000efe <SCCB_ReadByte+0xa0>
	}
    while(length)
    {
      *pBuffer = SCCB_ReceiveByte();
 8000eca:	f7ff ff67 	bl	8000d9c <SCCB_ReceiveByte>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	701a      	strb	r2, [r3, #0]
      if(length == 1)
 8000ed6:	887b      	ldrh	r3, [r7, #2]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d102      	bne.n	8000ee2 <SCCB_ReadByte+0x84>
	  {
		  SCCB_NoAck();
 8000edc:	f7ff feee 	bl	8000cbc <SCCB_NoAck>
 8000ee0:	e001      	b.n	8000ee6 <SCCB_ReadByte+0x88>
	  }
      else
	  {
		SCCB_Ack(); 
 8000ee2:	f7ff fed1 	bl	8000c88 <SCCB_Ack>
	  }
      pBuffer++;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	607b      	str	r3, [r7, #4]
      length--;
 8000eec:	887b      	ldrh	r3, [r7, #2]
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	807b      	strh	r3, [r7, #2]
    while(length)
 8000ef2:	887b      	ldrh	r3, [r7, #2]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d1e8      	bne.n	8000eca <SCCB_ReadByte+0x6c>
    }
    SCCB_Stop();
 8000ef8:	f7ff feac 	bl	8000c54 <SCCB_Stop>
    return ENABLE;
 8000efc:	2301      	movs	r3, #1
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
	...

08000f08 <KNearest_match>:
	return 0;
}

// KNN match
void KNearest_match(uint16_t square_colors[9], uint16_t real_colors[9], uint8_t times, char *face)
{
 8000f08:	b5b0      	push	{r4, r5, r7, lr}
 8000f0a:	b092      	sub	sp, #72	; 0x48
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	603b      	str	r3, [r7, #0]
 8000f14:	4613      	mov	r3, r2
 8000f16:	71fb      	strb	r3, [r7, #7]
	int8_t midColor[3];
	midColor[0] = midterm_order[0] & 0x1F;
 8000f18:	4b97      	ldr	r3, [pc, #604]	; (8001178 <KNearest_match+0x270>)
 8000f1a:	881b      	ldrh	r3, [r3, #0]
 8000f1c:	b25b      	sxtb	r3, r3
 8000f1e:	f003 031f 	and.w	r3, r3, #31
 8000f22:	b25b      	sxtb	r3, r3
 8000f24:	f887 3020 	strb.w	r3, [r7, #32]
	midColor[1] = (midterm_order[0] >> 5) & 0x3F;
 8000f28:	4b93      	ldr	r3, [pc, #588]	; (8001178 <KNearest_match+0x270>)
 8000f2a:	881b      	ldrh	r3, [r3, #0]
 8000f2c:	095b      	lsrs	r3, r3, #5
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	b25b      	sxtb	r3, r3
 8000f32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000f36:	b25b      	sxtb	r3, r3
 8000f38:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	midColor[2] = (midterm_order[0] >> 11) & 0x1F;
 8000f3c:	4b8e      	ldr	r3, [pc, #568]	; (8001178 <KNearest_match+0x270>)
 8000f3e:	881b      	ldrh	r3, [r3, #0]
 8000f40:	0adb      	lsrs	r3, r3, #11
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	b25b      	sxtb	r3, r3
 8000f46:	f003 031f 	and.w	r3, r3, #31
 8000f4a:	b25b      	sxtb	r3, r3
 8000f4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	int8_t midCube[3];
	midCube[0] = square_colors[4] & 0x1F;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	3308      	adds	r3, #8
 8000f54:	881b      	ldrh	r3, [r3, #0]
 8000f56:	b25b      	sxtb	r3, r3
 8000f58:	f003 031f 	and.w	r3, r3, #31
 8000f5c:	b25b      	sxtb	r3, r3
 8000f5e:	773b      	strb	r3, [r7, #28]
	midCube[1] = (square_colors[4] >> 5) & 0x3F;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	3308      	adds	r3, #8
 8000f64:	881b      	ldrh	r3, [r3, #0]
 8000f66:	095b      	lsrs	r3, r3, #5
 8000f68:	b29b      	uxth	r3, r3
 8000f6a:	b25b      	sxtb	r3, r3
 8000f6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000f70:	b25b      	sxtb	r3, r3
 8000f72:	777b      	strb	r3, [r7, #29]
	midCube[2] = (square_colors[4] >> 11) & 0x1F;
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	3308      	adds	r3, #8
 8000f78:	881b      	ldrh	r3, [r3, #0]
 8000f7a:	0adb      	lsrs	r3, r3, #11
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	b25b      	sxtb	r3, r3
 8000f80:	f003 031f 	and.w	r3, r3, #31
 8000f84:	b25b      	sxtb	r3, r3
 8000f86:	77bb      	strb	r3, [r7, #30]
	int8_t diffR = midCube[0] - midColor[0];
 8000f88:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8000f8c:	b2da      	uxtb	r2, r3
 8000f8e:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	int8_t diffG = midCube[1] - midColor[1];
 8000f9c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	int8_t diffB = midCube[2] - midColor[2];
 8000fb0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000fb4:	b2da      	uxtb	r2, r3
 8000fb6:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	for (int i = 0; i < 9; i++)
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	647b      	str	r3, [r7, #68]	; 0x44
 8000fc8:	e0cc      	b.n	8001164 <KNearest_match+0x25c>
	{
		int8_t temp[3];
		float h = 0;
 8000fca:	f04f 0300 	mov.w	r3, #0
 8000fce:	633b      	str	r3, [r7, #48]	; 0x30
		float s = 0;
 8000fd0:	f04f 0300 	mov.w	r3, #0
 8000fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
		float v = 0;
 8000fd6:	f04f 0300 	mov.w	r3, #0
 8000fda:	62bb      	str	r3, [r7, #40]	; 0x28
		temp[0] = square_colors[i] & 0x1F;
 8000fdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	68fa      	ldr	r2, [r7, #12]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	881b      	ldrh	r3, [r3, #0]
 8000fe6:	b25b      	sxtb	r3, r3
 8000fe8:	f003 031f 	and.w	r3, r3, #31
 8000fec:	b25b      	sxtb	r3, r3
 8000fee:	763b      	strb	r3, [r7, #24]
		temp[1] = (square_colors[i] >> 5) & 0x3F;
 8000ff0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	68fa      	ldr	r2, [r7, #12]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	881b      	ldrh	r3, [r3, #0]
 8000ffa:	095b      	lsrs	r3, r3, #5
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	b25b      	sxtb	r3, r3
 8001000:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001004:	b25b      	sxtb	r3, r3
 8001006:	767b      	strb	r3, [r7, #25]
		temp[2] = (square_colors[i] >> 11) & 0x1F;
 8001008:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	68fa      	ldr	r2, [r7, #12]
 800100e:	4413      	add	r3, r2
 8001010:	881b      	ldrh	r3, [r3, #0]
 8001012:	0adb      	lsrs	r3, r3, #11
 8001014:	b29b      	uxth	r3, r3
 8001016:	b25b      	sxtb	r3, r3
 8001018:	f003 031f 	and.w	r3, r3, #31
 800101c:	b25b      	sxtb	r3, r3
 800101e:	76bb      	strb	r3, [r7, #26]
		// rgb_to_hsv(temp[0], temp[1], temp[2], &h, &s, &v);
		uint16_t min_dist = 0xFFFF;
 8001020:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001024:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		int min_index = -1;
 8001028:	f04f 33ff 	mov.w	r3, #4294967295
 800102c:	63fb      	str	r3, [r7, #60]	; 0x3c
		for (size_t i = 0; i < 6; i++)
 800102e:	2300      	movs	r3, #0
 8001030:	63bb      	str	r3, [r7, #56]	; 0x38
 8001032:	e078      	b.n	8001126 <KNearest_match+0x21e>
		{
			int8_t temp2[3];
			temp2[0] = true_colors[i] & 0x1F;
 8001034:	4a51      	ldr	r2, [pc, #324]	; (800117c <KNearest_match+0x274>)
 8001036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001038:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800103c:	b25b      	sxtb	r3, r3
 800103e:	f003 031f 	and.w	r3, r3, #31
 8001042:	b25b      	sxtb	r3, r3
 8001044:	753b      	strb	r3, [r7, #20]
			temp2[1] = (true_colors[i] >> 5) & 0x3F;
 8001046:	4a4d      	ldr	r2, [pc, #308]	; (800117c <KNearest_match+0x274>)
 8001048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800104a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800104e:	095b      	lsrs	r3, r3, #5
 8001050:	b29b      	uxth	r3, r3
 8001052:	b25b      	sxtb	r3, r3
 8001054:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001058:	b25b      	sxtb	r3, r3
 800105a:	757b      	strb	r3, [r7, #21]
			temp2[2] = (true_colors[i] >> 11) & 0x1F;
 800105c:	4a47      	ldr	r2, [pc, #284]	; (800117c <KNearest_match+0x274>)
 800105e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001060:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001064:	0adb      	lsrs	r3, r3, #11
 8001066:	b29b      	uxth	r3, r3
 8001068:	b25b      	sxtb	r3, r3
 800106a:	f003 031f 	and.w	r3, r3, #31
 800106e:	b25b      	sxtb	r3, r3
 8001070:	75bb      	strb	r3, [r7, #22]
			uint16_t dist = sqrt(pow(temp[0] - temp2[0], 2) + pow(temp[1] - temp2[1], 2) + pow(temp[2] - temp2[2], 2));
 8001072:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8001076:	461a      	mov	r2, r3
 8001078:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff fa24 	bl	80004cc <__aeabi_i2d>
 8001084:	f04f 0200 	mov.w	r2, #0
 8001088:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800108c:	f002 ff26 	bl	8003edc <pow>
 8001090:	4604      	mov	r4, r0
 8001092:	460d      	mov	r5, r1
 8001094:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8001098:	461a      	mov	r2, r3
 800109a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff fa13 	bl	80004cc <__aeabi_i2d>
 80010a6:	f04f 0200 	mov.w	r2, #0
 80010aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010ae:	f002 ff15 	bl	8003edc <pow>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	4620      	mov	r0, r4
 80010b8:	4629      	mov	r1, r5
 80010ba:	f7ff f8bb 	bl	8000234 <__adddf3>
 80010be:	4602      	mov	r2, r0
 80010c0:	460b      	mov	r3, r1
 80010c2:	4614      	mov	r4, r2
 80010c4:	461d      	mov	r5, r3
 80010c6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80010ca:	461a      	mov	r2, r3
 80010cc:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff f9fa 	bl	80004cc <__aeabi_i2d>
 80010d8:	f04f 0200 	mov.w	r2, #0
 80010dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010e0:	f002 fefc 	bl	8003edc <pow>
 80010e4:	4602      	mov	r2, r0
 80010e6:	460b      	mov	r3, r1
 80010e8:	4620      	mov	r0, r4
 80010ea:	4629      	mov	r1, r5
 80010ec:	f7ff f8a2 	bl	8000234 <__adddf3>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	4610      	mov	r0, r2
 80010f6:	4619      	mov	r1, r3
 80010f8:	f002 ff58 	bl	8003fac <sqrt>
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
 8001100:	4610      	mov	r0, r2
 8001102:	4619      	mov	r1, r3
 8001104:	f7ff fcfc 	bl	8000b00 <__aeabi_d2uiz>
 8001108:	4603      	mov	r3, r0
 800110a:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (dist < min_dist)
 800110c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800110e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001112:	429a      	cmp	r2, r3
 8001114:	d204      	bcs.n	8001120 <KNearest_match+0x218>
			{
				min_dist = dist;
 8001116:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001118:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
				min_index = i;
 800111c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800111e:	63fb      	str	r3, [r7, #60]	; 0x3c
		for (size_t i = 0; i < 6; i++)
 8001120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001122:	3301      	adds	r3, #1
 8001124:	63bb      	str	r3, [r7, #56]	; 0x38
 8001126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001128:	2b05      	cmp	r3, #5
 800112a:	d983      	bls.n	8001034 <KNearest_match+0x12c>
		}
		// if (h < 50 || h > 310)
		// 	min_index = 1;
		// else
		// 	min_index = 0;
		real_colors[i] = true_colors[min_index];
 800112c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	68ba      	ldr	r2, [r7, #8]
 8001132:	4413      	add	r3, r2
 8001134:	4911      	ldr	r1, [pc, #68]	; (800117c <KNearest_match+0x274>)
 8001136:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001138:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800113c:	801a      	strh	r2, [r3, #0]
		face[detection_order[times * 9 + i]] = face_colors[min_index];
 800113e:	79fa      	ldrb	r2, [r7, #7]
 8001140:	4613      	mov	r3, r2
 8001142:	00db      	lsls	r3, r3, #3
 8001144:	441a      	add	r2, r3
 8001146:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001148:	4413      	add	r3, r2
 800114a:	4a0d      	ldr	r2, [pc, #52]	; (8001180 <KNearest_match+0x278>)
 800114c:	5cd3      	ldrb	r3, [r2, r3]
 800114e:	461a      	mov	r2, r3
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	4413      	add	r3, r2
 8001154:	490b      	ldr	r1, [pc, #44]	; (8001184 <KNearest_match+0x27c>)
 8001156:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001158:	440a      	add	r2, r1
 800115a:	7812      	ldrb	r2, [r2, #0]
 800115c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 9; i++)
 800115e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001160:	3301      	adds	r3, #1
 8001162:	647b      	str	r3, [r7, #68]	; 0x44
 8001164:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001166:	2b08      	cmp	r3, #8
 8001168:	f77f af2f 	ble.w	8000fca <KNearest_match+0xc2>
	}
}
 800116c:	bf00      	nop
 800116e:	bf00      	nop
 8001170:	3748      	adds	r7, #72	; 0x48
 8001172:	46bd      	mov	sp, r7
 8001174:	bdb0      	pop	{r4, r5, r7, pc}
 8001176:	bf00      	nop
 8001178:	200000f0 	.word	0x200000f0
 800117c:	2000009c 	.word	0x2000009c
 8001180:	200000b0 	.word	0x200000b0
 8001184:	200000a8 	.word	0x200000a8

08001188 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b088      	sub	sp, #32
 800118c:	af00      	add	r7, sp, #0
  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800118e:	1d3b      	adds	r3, r7, #4
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]
 800119c:	615a      	str	r2, [r3, #20]
 800119e:	619a      	str	r2, [r3, #24]

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80011a0:	4b28      	ldr	r3, [pc, #160]	; (8001244 <MX_FSMC_Init+0xbc>)
 80011a2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80011a6:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80011a8:	4b26      	ldr	r3, [pc, #152]	; (8001244 <MX_FSMC_Init+0xbc>)
 80011aa:	4a27      	ldr	r2, [pc, #156]	; (8001248 <MX_FSMC_Init+0xc0>)
 80011ac:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80011ae:	4b25      	ldr	r3, [pc, #148]	; (8001244 <MX_FSMC_Init+0xbc>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80011b4:	4b23      	ldr	r3, [pc, #140]	; (8001244 <MX_FSMC_Init+0xbc>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80011ba:	4b22      	ldr	r3, [pc, #136]	; (8001244 <MX_FSMC_Init+0xbc>)
 80011bc:	2200      	movs	r2, #0
 80011be:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80011c0:	4b20      	ldr	r3, [pc, #128]	; (8001244 <MX_FSMC_Init+0xbc>)
 80011c2:	2210      	movs	r2, #16
 80011c4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80011c6:	4b1f      	ldr	r3, [pc, #124]	; (8001244 <MX_FSMC_Init+0xbc>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80011cc:	4b1d      	ldr	r3, [pc, #116]	; (8001244 <MX_FSMC_Init+0xbc>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80011d2:	4b1c      	ldr	r3, [pc, #112]	; (8001244 <MX_FSMC_Init+0xbc>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80011d8:	4b1a      	ldr	r3, [pc, #104]	; (8001244 <MX_FSMC_Init+0xbc>)
 80011da:	2200      	movs	r2, #0
 80011dc:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80011de:	4b19      	ldr	r3, [pc, #100]	; (8001244 <MX_FSMC_Init+0xbc>)
 80011e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011e4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80011e6:	4b17      	ldr	r3, [pc, #92]	; (8001244 <MX_FSMC_Init+0xbc>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80011ec:	4b15      	ldr	r3, [pc, #84]	; (8001244 <MX_FSMC_Init+0xbc>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80011f2:	4b14      	ldr	r3, [pc, #80]	; (8001244 <MX_FSMC_Init+0xbc>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80011f8:	4b12      	ldr	r3, [pc, #72]	; (8001244 <MX_FSMC_Init+0xbc>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 80011fe:	230f      	movs	r3, #15
 8001200:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001202:	230f      	movs	r3, #15
 8001204:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001206:	23ff      	movs	r3, #255	; 0xff
 8001208:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 800120a:	230f      	movs	r3, #15
 800120c:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800120e:	2310      	movs	r3, #16
 8001210:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001212:	2311      	movs	r3, #17
 8001214:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001216:	2300      	movs	r3, #0
 8001218:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800121a:	1d3b      	adds	r3, r7, #4
 800121c:	2200      	movs	r2, #0
 800121e:	4619      	mov	r1, r3
 8001220:	4808      	ldr	r0, [pc, #32]	; (8001244 <MX_FSMC_Init+0xbc>)
 8001222:	f002 f90b 	bl	800343c <HAL_SRAM_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 800122c:	f000 fe65 	bl	8001efa <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8001230:	4b06      	ldr	r3, [pc, #24]	; (800124c <MX_FSMC_Init+0xc4>)
 8001232:	69db      	ldr	r3, [r3, #28]
 8001234:	4a05      	ldr	r2, [pc, #20]	; (800124c <MX_FSMC_Init+0xc4>)
 8001236:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800123a:	61d3      	str	r3, [r2, #28]

}
 800123c:	bf00      	nop
 800123e:	3720      	adds	r7, #32
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20000194 	.word	0x20000194
 8001248:	a0000104 	.word	0xa0000104
 800124c:	40010000 	.word	0x40010000

08001250 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001256:	f107 0308 	add.w	r3, r7, #8
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8001264:	4b18      	ldr	r3, [pc, #96]	; (80012c8 <HAL_FSMC_MspInit+0x78>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d129      	bne.n	80012c0 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 800126c:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <HAL_FSMC_MspInit+0x78>)
 800126e:	2201      	movs	r2, #1
 8001270:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001272:	4b16      	ldr	r3, [pc, #88]	; (80012cc <HAL_FSMC_MspInit+0x7c>)
 8001274:	695b      	ldr	r3, [r3, #20]
 8001276:	4a15      	ldr	r2, [pc, #84]	; (80012cc <HAL_FSMC_MspInit+0x7c>)
 8001278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800127c:	6153      	str	r3, [r2, #20]
 800127e:	4b13      	ldr	r3, [pc, #76]	; (80012cc <HAL_FSMC_MspInit+0x7c>)
 8001280:	695b      	ldr	r3, [r3, #20]
 8001282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001286:	607b      	str	r3, [r7, #4]
 8001288:	687b      	ldr	r3, [r7, #4]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800128a:	f64f 7380 	movw	r3, #65408	; 0xff80
 800128e:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001290:	2302      	movs	r3, #2
 8001292:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001294:	2303      	movs	r3, #3
 8001296:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001298:	f107 0308 	add.w	r3, r7, #8
 800129c:	4619      	mov	r1, r3
 800129e:	480c      	ldr	r0, [pc, #48]	; (80012d0 <HAL_FSMC_MspInit+0x80>)
 80012a0:	f001 fac2 	bl	8002828 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80012a4:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 80012a8:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012aa:	2302      	movs	r3, #2
 80012ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012ae:	2303      	movs	r3, #3
 80012b0:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012b2:	f107 0308 	add.w	r3, r7, #8
 80012b6:	4619      	mov	r1, r3
 80012b8:	4806      	ldr	r0, [pc, #24]	; (80012d4 <HAL_FSMC_MspInit+0x84>)
 80012ba:	f001 fab5 	bl	8002828 <HAL_GPIO_Init>
 80012be:	e000      	b.n	80012c2 <HAL_FSMC_MspInit+0x72>
    return;
 80012c0:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80012c2:	3718      	adds	r7, #24
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	200001d8 	.word	0x200001d8
 80012cc:	40021000 	.word	0x40021000
 80012d0:	40011800 	.word	0x40011800
 80012d4:	40011400 	.word	0x40011400

080012d8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80012e0:	f7ff ffb6 	bl	8001250 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80012e4:	bf00      	nop
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08a      	sub	sp, #40	; 0x28
 80012f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f2:	f107 0318 	add.w	r3, r7, #24
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001300:	4b6a      	ldr	r3, [pc, #424]	; (80014ac <MX_GPIO_Init+0x1c0>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	4a69      	ldr	r2, [pc, #420]	; (80014ac <MX_GPIO_Init+0x1c0>)
 8001306:	f043 0310 	orr.w	r3, r3, #16
 800130a:	6193      	str	r3, [r2, #24]
 800130c:	4b67      	ldr	r3, [pc, #412]	; (80014ac <MX_GPIO_Init+0x1c0>)
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	f003 0310 	and.w	r3, r3, #16
 8001314:	617b      	str	r3, [r7, #20]
 8001316:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001318:	4b64      	ldr	r3, [pc, #400]	; (80014ac <MX_GPIO_Init+0x1c0>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	4a63      	ldr	r2, [pc, #396]	; (80014ac <MX_GPIO_Init+0x1c0>)
 800131e:	f043 0304 	orr.w	r3, r3, #4
 8001322:	6193      	str	r3, [r2, #24]
 8001324:	4b61      	ldr	r3, [pc, #388]	; (80014ac <MX_GPIO_Init+0x1c0>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	f003 0304 	and.w	r3, r3, #4
 800132c:	613b      	str	r3, [r7, #16]
 800132e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001330:	4b5e      	ldr	r3, [pc, #376]	; (80014ac <MX_GPIO_Init+0x1c0>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	4a5d      	ldr	r2, [pc, #372]	; (80014ac <MX_GPIO_Init+0x1c0>)
 8001336:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800133a:	6193      	str	r3, [r2, #24]
 800133c:	4b5b      	ldr	r3, [pc, #364]	; (80014ac <MX_GPIO_Init+0x1c0>)
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001348:	4b58      	ldr	r3, [pc, #352]	; (80014ac <MX_GPIO_Init+0x1c0>)
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	4a57      	ldr	r2, [pc, #348]	; (80014ac <MX_GPIO_Init+0x1c0>)
 800134e:	f043 0308 	orr.w	r3, r3, #8
 8001352:	6193      	str	r3, [r2, #24]
 8001354:	4b55      	ldr	r3, [pc, #340]	; (80014ac <MX_GPIO_Init+0x1c0>)
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	f003 0308 	and.w	r3, r3, #8
 800135c:	60bb      	str	r3, [r7, #8]
 800135e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001360:	4b52      	ldr	r3, [pc, #328]	; (80014ac <MX_GPIO_Init+0x1c0>)
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	4a51      	ldr	r2, [pc, #324]	; (80014ac <MX_GPIO_Init+0x1c0>)
 8001366:	f043 0320 	orr.w	r3, r3, #32
 800136a:	6193      	str	r3, [r2, #24]
 800136c:	4b4f      	ldr	r3, [pc, #316]	; (80014ac <MX_GPIO_Init+0x1c0>)
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	f003 0320 	and.w	r3, r3, #32
 8001374:	607b      	str	r3, [r7, #4]
 8001376:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8001378:	2200      	movs	r2, #0
 800137a:	210c      	movs	r1, #12
 800137c:	484c      	ldr	r0, [pc, #304]	; (80014b0 <MX_GPIO_Init+0x1c4>)
 800137e:	f001 fc02 	bl	8002b86 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001382:	2200      	movs	r2, #0
 8001384:	21f0      	movs	r1, #240	; 0xf0
 8001386:	484b      	ldr	r0, [pc, #300]	; (80014b4 <MX_GPIO_Init+0x1c8>)
 8001388:	f001 fbfd 	bl	8002b86 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_3, GPIO_PIN_RESET);
 800138c:	2200      	movs	r2, #0
 800138e:	f241 0108 	movw	r1, #4104	; 0x1008
 8001392:	4849      	ldr	r0, [pc, #292]	; (80014b8 <MX_GPIO_Init+0x1cc>)
 8001394:	f001 fbf7 	bl	8002b86 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8001398:	2200      	movs	r2, #0
 800139a:	2102      	movs	r1, #2
 800139c:	4847      	ldr	r0, [pc, #284]	; (80014bc <MX_GPIO_Init+0x1d0>)
 800139e:	f001 fbf2 	bl	8002b86 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80013a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013a8:	2300      	movs	r3, #0
 80013aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013b0:	f107 0318 	add.w	r3, r7, #24
 80013b4:	4619      	mov	r1, r3
 80013b6:	483f      	ldr	r0, [pc, #252]	; (80014b4 <MX_GPIO_Init+0x1c8>)
 80013b8:	f001 fa36 	bl	8002828 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013bc:	2308      	movs	r3, #8
 80013be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013c0:	4b3f      	ldr	r3, [pc, #252]	; (80014c0 <MX_GPIO_Init+0x1d4>)
 80013c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013c8:	f107 0318 	add.w	r3, r7, #24
 80013cc:	4619      	mov	r1, r3
 80013ce:	4839      	ldr	r0, [pc, #228]	; (80014b4 <MX_GPIO_Init+0x1c8>)
 80013d0:	f001 fa2a 	bl	8002828 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013d4:	2301      	movs	r3, #1
 80013d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013d8:	4b3a      	ldr	r3, [pc, #232]	; (80014c4 <MX_GPIO_Init+0x1d8>)
 80013da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e0:	f107 0318 	add.w	r3, r7, #24
 80013e4:	4619      	mov	r1, r3
 80013e6:	4832      	ldr	r0, [pc, #200]	; (80014b0 <MX_GPIO_Init+0x1c4>)
 80013e8:	f001 fa1e 	bl	8002828 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013ec:	230c      	movs	r3, #12
 80013ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f0:	2301      	movs	r3, #1
 80013f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013f8:	2303      	movs	r3, #3
 80013fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fc:	f107 0318 	add.w	r3, r7, #24
 8001400:	4619      	mov	r1, r3
 8001402:	482b      	ldr	r0, [pc, #172]	; (80014b0 <MX_GPIO_Init+0x1c4>)
 8001404:	f001 fa10 	bl	8002828 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001408:	2330      	movs	r3, #48	; 0x30
 800140a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140c:	2301      	movs	r3, #1
 800140e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001414:	2303      	movs	r3, #3
 8001416:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001418:	f107 0318 	add.w	r3, r7, #24
 800141c:	4619      	mov	r1, r3
 800141e:	4825      	ldr	r0, [pc, #148]	; (80014b4 <MX_GPIO_Init+0x1c8>)
 8001420:	f001 fa02 	bl	8002828 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001424:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001428:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800142a:	2300      	movs	r3, #0
 800142c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001432:	f107 0318 	add.w	r3, r7, #24
 8001436:	4619      	mov	r1, r3
 8001438:	4823      	ldr	r0, [pc, #140]	; (80014c8 <MX_GPIO_Init+0x1dc>)
 800143a:	f001 f9f5 	bl	8002828 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_3;
 800143e:	f241 0308 	movw	r3, #4104	; 0x1008
 8001442:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001444:	2301      	movs	r3, #1
 8001446:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800144c:	2303      	movs	r3, #3
 800144e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001450:	f107 0318 	add.w	r3, r7, #24
 8001454:	4619      	mov	r1, r3
 8001456:	4818      	ldr	r0, [pc, #96]	; (80014b8 <MX_GPIO_Init+0x1cc>)
 8001458:	f001 f9e6 	bl	8002828 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800145c:	23c0      	movs	r3, #192	; 0xc0
 800145e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001460:	2311      	movs	r3, #17
 8001462:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001468:	2303      	movs	r3, #3
 800146a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800146c:	f107 0318 	add.w	r3, r7, #24
 8001470:	4619      	mov	r1, r3
 8001472:	4810      	ldr	r0, [pc, #64]	; (80014b4 <MX_GPIO_Init+0x1c8>)
 8001474:	f001 f9d8 	bl	8002828 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001478:	2302      	movs	r3, #2
 800147a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147c:	2301      	movs	r3, #1
 800147e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001484:	2303      	movs	r3, #3
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001488:	f107 0318 	add.w	r3, r7, #24
 800148c:	4619      	mov	r1, r3
 800148e:	480b      	ldr	r0, [pc, #44]	; (80014bc <MX_GPIO_Init+0x1d0>)
 8001490:	f001 f9ca 	bl	8002828 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001494:	2200      	movs	r2, #0
 8001496:	2100      	movs	r1, #0
 8001498:	2009      	movs	r0, #9
 800149a:	f001 f886 	bl	80025aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800149e:	2009      	movs	r0, #9
 80014a0:	f001 f89f 	bl	80025e2 <HAL_NVIC_EnableIRQ>

}
 80014a4:	bf00      	nop
 80014a6:	3728      	adds	r7, #40	; 0x28
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40021000 	.word	0x40021000
 80014b0:	40010800 	.word	0x40010800
 80014b4:	40011000 	.word	0x40011000
 80014b8:	40011400 	.word	0x40011400
 80014bc:	40011800 	.word	0x40011800
 80014c0:	10210000 	.word	0x10210000
 80014c4:	10110000 	.word	0x10110000
 80014c8:	40010c00 	.word	0x40010c00

080014cc <Delay>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	e002      	b.n	80014dc <Delay+0x10>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	3b01      	subs	r3, #1
 80014da:	607b      	str	r3, [r7, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1f9      	bne.n	80014d6 <Delay+0xa>
 80014e2:	bf00      	nop
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bc80      	pop	{r7}
 80014ec:	4770      	bx	lr

080014ee <LCD_INIT>:

void LCD_INIT ( void )
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b082      	sub	sp, #8
 80014f2:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 80014f4:	2001      	movs	r0, #1
 80014f6:	f000 f829 	bl	800154c <LCD_BackLed_Control>
	LCD_Rst();
 80014fa:	f000 f80f 	bl	800151c <LCD_Rst>
	LCD_REG_Config();
 80014fe:	f000 f85f 	bl	80015c0 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 8001502:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001506:	9300      	str	r3, [sp, #0]
 8001508:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800150c:	22f0      	movs	r2, #240	; 0xf0
 800150e:	2100      	movs	r1, #0
 8001510:	2000      	movs	r0, #0
 8001512:	f000 f9e6 	bl	80018e2 <LCD_Clear>
}
 8001516:	bf00      	nop
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <LCD_Rst>:



void LCD_Rst ( void )
{			
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8001520:	2200      	movs	r2, #0
 8001522:	2102      	movs	r1, #2
 8001524:	4807      	ldr	r0, [pc, #28]	; (8001544 <LCD_Rst+0x28>)
 8001526:	f001 fb2e 	bl	8002b86 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 800152a:	4807      	ldr	r0, [pc, #28]	; (8001548 <LCD_Rst+0x2c>)
 800152c:	f7ff ffce 	bl	80014cc <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8001530:	2201      	movs	r2, #1
 8001532:	2102      	movs	r1, #2
 8001534:	4803      	ldr	r0, [pc, #12]	; (8001544 <LCD_Rst+0x28>)
 8001536:	f001 fb26 	bl	8002b86 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 800153a:	4803      	ldr	r0, [pc, #12]	; (8001548 <LCD_Rst+0x2c>)
 800153c:	f7ff ffc6 	bl	80014cc <Delay>
}
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40011800 	.word	0x40011800
 8001548:	0002bffc 	.word	0x0002bffc

0800154c <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d006      	beq.n	800156a <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 800155c:	2200      	movs	r2, #0
 800155e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001562:	4807      	ldr	r0, [pc, #28]	; (8001580 <LCD_BackLed_Control+0x34>)
 8001564:	f001 fb0f 	bl	8002b86 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 8001568:	e005      	b.n	8001576 <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 800156a:	2201      	movs	r2, #1
 800156c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001570:	4803      	ldr	r0, [pc, #12]	; (8001580 <LCD_BackLed_Control+0x34>)
 8001572:	f001 fb08 	bl	8002b86 <HAL_GPIO_WritePin>
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40011400 	.word	0x40011400

08001584 <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800158e:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001592:	88fb      	ldrh	r3, [r7, #6]
 8001594:	8013      	strh	r3, [r2, #0]
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr

080015a0 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80015aa:	4a04      	ldr	r2, [pc, #16]	; (80015bc <LCD_Write_Data+0x1c>)
 80015ac:	88fb      	ldrh	r3, [r7, #6]
 80015ae:	8013      	strh	r3, [r2, #0]
}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bc80      	pop	{r7}
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	60020000 	.word	0x60020000

080015c0 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 80015c4:	20cf      	movs	r0, #207	; 0xcf
 80015c6:	f7ff ffdd 	bl	8001584 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 80015ca:	2000      	movs	r0, #0
 80015cc:	f7ff ffe8 	bl	80015a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 80015d0:	2081      	movs	r0, #129	; 0x81
 80015d2:	f7ff ffe5 	bl	80015a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 80015d6:	2030      	movs	r0, #48	; 0x30
 80015d8:	f7ff ffe2 	bl	80015a0 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 80015dc:	20ed      	movs	r0, #237	; 0xed
 80015de:	f7ff ffd1 	bl	8001584 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 80015e2:	2064      	movs	r0, #100	; 0x64
 80015e4:	f7ff ffdc 	bl	80015a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 80015e8:	2003      	movs	r0, #3
 80015ea:	f7ff ffd9 	bl	80015a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 80015ee:	2012      	movs	r0, #18
 80015f0:	f7ff ffd6 	bl	80015a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 80015f4:	2081      	movs	r0, #129	; 0x81
 80015f6:	f7ff ffd3 	bl	80015a0 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 80015fa:	20e8      	movs	r0, #232	; 0xe8
 80015fc:	f7ff ffc2 	bl	8001584 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 8001600:	2085      	movs	r0, #133	; 0x85
 8001602:	f7ff ffcd 	bl	80015a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8001606:	2010      	movs	r0, #16
 8001608:	f7ff ffca 	bl	80015a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 800160c:	2078      	movs	r0, #120	; 0x78
 800160e:	f7ff ffc7 	bl	80015a0 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 8001612:	20cb      	movs	r0, #203	; 0xcb
 8001614:	f7ff ffb6 	bl	8001584 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8001618:	2039      	movs	r0, #57	; 0x39
 800161a:	f7ff ffc1 	bl	80015a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 800161e:	202c      	movs	r0, #44	; 0x2c
 8001620:	f7ff ffbe 	bl	80015a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001624:	2000      	movs	r0, #0
 8001626:	f7ff ffbb 	bl	80015a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 800162a:	2034      	movs	r0, #52	; 0x34
 800162c:	f7ff ffb8 	bl	80015a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 8001630:	2002      	movs	r0, #2
 8001632:	f7ff ffb5 	bl	80015a0 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 8001636:	20f7      	movs	r0, #247	; 0xf7
 8001638:	f7ff ffa4 	bl	8001584 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 800163c:	2020      	movs	r0, #32
 800163e:	f7ff ffaf 	bl	80015a0 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 8001642:	20ea      	movs	r0, #234	; 0xea
 8001644:	f7ff ff9e 	bl	8001584 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001648:	2000      	movs	r0, #0
 800164a:	f7ff ffa9 	bl	80015a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800164e:	2000      	movs	r0, #0
 8001650:	f7ff ffa6 	bl	80015a0 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 8001654:	20b1      	movs	r0, #177	; 0xb1
 8001656:	f7ff ff95 	bl	8001584 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800165a:	2000      	movs	r0, #0
 800165c:	f7ff ffa0 	bl	80015a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8001660:	201b      	movs	r0, #27
 8001662:	f7ff ff9d 	bl	80015a0 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 8001666:	20b6      	movs	r0, #182	; 0xb6
 8001668:	f7ff ff8c 	bl	8001584 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 800166c:	200a      	movs	r0, #10
 800166e:	f7ff ff97 	bl	80015a0 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 8001672:	20a2      	movs	r0, #162	; 0xa2
 8001674:	f7ff ff94 	bl	80015a0 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 8001678:	20c0      	movs	r0, #192	; 0xc0
 800167a:	f7ff ff83 	bl	8001584 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 800167e:	2035      	movs	r0, #53	; 0x35
 8001680:	f7ff ff8e 	bl	80015a0 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 8001684:	20c1      	movs	r0, #193	; 0xc1
 8001686:	f7ff ff7d 	bl	8001584 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 800168a:	2011      	movs	r0, #17
 800168c:	f7ff ff88 	bl	80015a0 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 8001690:	20c5      	movs	r0, #197	; 0xc5
 8001692:	f7ff ff77 	bl	8001584 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 8001696:	2045      	movs	r0, #69	; 0x45
 8001698:	f7ff ff82 	bl	80015a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 800169c:	2045      	movs	r0, #69	; 0x45
 800169e:	f7ff ff7f 	bl	80015a0 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 80016a2:	20c7      	movs	r0, #199	; 0xc7
 80016a4:	f7ff ff6e 	bl	8001584 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 80016a8:	20a2      	movs	r0, #162	; 0xa2
 80016aa:	f7ff ff79 	bl	80015a0 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 80016ae:	20f2      	movs	r0, #242	; 0xf2
 80016b0:	f7ff ff68 	bl	8001584 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80016b4:	2000      	movs	r0, #0
 80016b6:	f7ff ff73 	bl	80015a0 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 80016ba:	2026      	movs	r0, #38	; 0x26
 80016bc:	f7ff ff62 	bl	8001584 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 80016c0:	2001      	movs	r0, #1
 80016c2:	f7ff ff6d 	bl	80015a0 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 80016c6:	20e0      	movs	r0, #224	; 0xe0
 80016c8:	f7ff ff5c 	bl	8001584 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 80016cc:	200f      	movs	r0, #15
 80016ce:	f7ff ff67 	bl	80015a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 80016d2:	2026      	movs	r0, #38	; 0x26
 80016d4:	f7ff ff64 	bl	80015a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 80016d8:	2024      	movs	r0, #36	; 0x24
 80016da:	f7ff ff61 	bl	80015a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 80016de:	200b      	movs	r0, #11
 80016e0:	f7ff ff5e 	bl	80015a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 80016e4:	200e      	movs	r0, #14
 80016e6:	f7ff ff5b 	bl	80015a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 80016ea:	2009      	movs	r0, #9
 80016ec:	f7ff ff58 	bl	80015a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 80016f0:	2054      	movs	r0, #84	; 0x54
 80016f2:	f7ff ff55 	bl	80015a0 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 80016f6:	20a8      	movs	r0, #168	; 0xa8
 80016f8:	f7ff ff52 	bl	80015a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 80016fc:	2046      	movs	r0, #70	; 0x46
 80016fe:	f7ff ff4f 	bl	80015a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 8001702:	200c      	movs	r0, #12
 8001704:	f7ff ff4c 	bl	80015a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8001708:	2017      	movs	r0, #23
 800170a:	f7ff ff49 	bl	80015a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 800170e:	2009      	movs	r0, #9
 8001710:	f7ff ff46 	bl	80015a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8001714:	200f      	movs	r0, #15
 8001716:	f7ff ff43 	bl	80015a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 800171a:	2007      	movs	r0, #7
 800171c:	f7ff ff40 	bl	80015a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001720:	2000      	movs	r0, #0
 8001722:	f7ff ff3d 	bl	80015a0 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 8001726:	20e1      	movs	r0, #225	; 0xe1
 8001728:	f7ff ff2c 	bl	8001584 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800172c:	2000      	movs	r0, #0
 800172e:	f7ff ff37 	bl	80015a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 8001732:	2019      	movs	r0, #25
 8001734:	f7ff ff34 	bl	80015a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8001738:	201b      	movs	r0, #27
 800173a:	f7ff ff31 	bl	80015a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 800173e:	2004      	movs	r0, #4
 8001740:	f7ff ff2e 	bl	80015a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8001744:	2010      	movs	r0, #16
 8001746:	f7ff ff2b 	bl	80015a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 800174a:	2007      	movs	r0, #7
 800174c:	f7ff ff28 	bl	80015a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 8001750:	202a      	movs	r0, #42	; 0x2a
 8001752:	f7ff ff25 	bl	80015a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 8001756:	2047      	movs	r0, #71	; 0x47
 8001758:	f7ff ff22 	bl	80015a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 800175c:	2039      	movs	r0, #57	; 0x39
 800175e:	f7ff ff1f 	bl	80015a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8001762:	2003      	movs	r0, #3
 8001764:	f7ff ff1c 	bl	80015a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8001768:	2006      	movs	r0, #6
 800176a:	f7ff ff19 	bl	80015a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 800176e:	2006      	movs	r0, #6
 8001770:	f7ff ff16 	bl	80015a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 8001774:	2030      	movs	r0, #48	; 0x30
 8001776:	f7ff ff13 	bl	80015a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 800177a:	2038      	movs	r0, #56	; 0x38
 800177c:	f7ff ff10 	bl	80015a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8001780:	200f      	movs	r0, #15
 8001782:	f7ff ff0d 	bl	80015a0 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 8001786:	2036      	movs	r0, #54	; 0x36
 8001788:	f7ff fefc 	bl	8001584 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );    
 800178c:	20c8      	movs	r0, #200	; 0xc8
 800178e:	f7ff ff07 	bl	80015a0 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 8001792:	202a      	movs	r0, #42	; 0x2a
 8001794:	f7ff fef6 	bl	8001584 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001798:	2000      	movs	r0, #0
 800179a:	f7ff ff01 	bl	80015a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800179e:	2000      	movs	r0, #0
 80017a0:	f7ff fefe 	bl	80015a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80017a4:	2000      	movs	r0, #0
 80017a6:	f7ff fefb 	bl	80015a0 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 80017aa:	20ef      	movs	r0, #239	; 0xef
 80017ac:	f7ff fef8 	bl	80015a0 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 80017b0:	202b      	movs	r0, #43	; 0x2b
 80017b2:	f7ff fee7 	bl	8001584 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80017b6:	2000      	movs	r0, #0
 80017b8:	f7ff fef2 	bl	80015a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80017bc:	2000      	movs	r0, #0
 80017be:	f7ff feef 	bl	80015a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 80017c2:	2001      	movs	r0, #1
 80017c4:	f7ff feec 	bl	80015a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 80017c8:	203f      	movs	r0, #63	; 0x3f
 80017ca:	f7ff fee9 	bl	80015a0 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 80017ce:	203a      	movs	r0, #58	; 0x3a
 80017d0:	f7ff fed8 	bl	8001584 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 80017d4:	2055      	movs	r0, #85	; 0x55
 80017d6:	f7ff fee3 	bl	80015a0 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 80017da:	2011      	movs	r0, #17
 80017dc:	f7ff fed2 	bl	8001584 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 80017e0:	4803      	ldr	r0, [pc, #12]	; (80017f0 <LCD_REG_Config+0x230>)
 80017e2:	f7ff fe73 	bl	80014cc <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 80017e6:	2029      	movs	r0, #41	; 0x29
 80017e8:	f7ff fecc 	bl	8001584 <LCD_Write_Cmd>
	
	
}
 80017ec:	bf00      	nop
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	0002bffc 	.word	0x0002bffc

080017f4 <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 80017f4:	b590      	push	{r4, r7, lr}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4604      	mov	r4, r0
 80017fc:	4608      	mov	r0, r1
 80017fe:	4611      	mov	r1, r2
 8001800:	461a      	mov	r2, r3
 8001802:	4623      	mov	r3, r4
 8001804:	80fb      	strh	r3, [r7, #6]
 8001806:	4603      	mov	r3, r0
 8001808:	80bb      	strh	r3, [r7, #4]
 800180a:	460b      	mov	r3, r1
 800180c:	807b      	strh	r3, [r7, #2]
 800180e:	4613      	mov	r3, r2
 8001810:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 8001812:	202a      	movs	r0, #42	; 0x2a
 8001814:	f7ff feb6 	bl	8001584 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8001818:	88fb      	ldrh	r3, [r7, #6]
 800181a:	0a1b      	lsrs	r3, r3, #8
 800181c:	b29b      	uxth	r3, r3
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff febe 	bl	80015a0 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 8001824:	88fb      	ldrh	r3, [r7, #6]
 8001826:	b2db      	uxtb	r3, r3
 8001828:	b29b      	uxth	r3, r3
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff feb8 	bl	80015a0 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8001830:	88fa      	ldrh	r2, [r7, #6]
 8001832:	887b      	ldrh	r3, [r7, #2]
 8001834:	4413      	add	r3, r2
 8001836:	3b01      	subs	r3, #1
 8001838:	121b      	asrs	r3, r3, #8
 800183a:	b29b      	uxth	r3, r3
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff feaf 	bl	80015a0 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 8001842:	88fa      	ldrh	r2, [r7, #6]
 8001844:	887b      	ldrh	r3, [r7, #2]
 8001846:	4413      	add	r3, r2
 8001848:	b29b      	uxth	r3, r3
 800184a:	3b01      	subs	r3, #1
 800184c:	b29b      	uxth	r3, r3
 800184e:	b2db      	uxtb	r3, r3
 8001850:	b29b      	uxth	r3, r3
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff fea4 	bl	80015a0 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 8001858:	202b      	movs	r0, #43	; 0x2b
 800185a:	f7ff fe93 	bl	8001584 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 800185e:	88bb      	ldrh	r3, [r7, #4]
 8001860:	0a1b      	lsrs	r3, r3, #8
 8001862:	b29b      	uxth	r3, r3
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff fe9b 	bl	80015a0 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 800186a:	88bb      	ldrh	r3, [r7, #4]
 800186c:	b2db      	uxtb	r3, r3
 800186e:	b29b      	uxth	r3, r3
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff fe95 	bl	80015a0 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8001876:	88ba      	ldrh	r2, [r7, #4]
 8001878:	883b      	ldrh	r3, [r7, #0]
 800187a:	4413      	add	r3, r2
 800187c:	3b01      	subs	r3, #1
 800187e:	121b      	asrs	r3, r3, #8
 8001880:	b29b      	uxth	r3, r3
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff fe8c 	bl	80015a0 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8001888:	88ba      	ldrh	r2, [r7, #4]
 800188a:	883b      	ldrh	r3, [r7, #0]
 800188c:	4413      	add	r3, r2
 800188e:	b29b      	uxth	r3, r3
 8001890:	3b01      	subs	r3, #1
 8001892:	b29b      	uxth	r3, r3
 8001894:	b2db      	uxtb	r3, r3
 8001896:	b29b      	uxth	r3, r3
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff fe81 	bl	80015a0 <LCD_Write_Data>
	
}
 800189e:	bf00      	nop
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd90      	pop	{r4, r7, pc}

080018a6 <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b084      	sub	sp, #16
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
 80018ae:	460b      	mov	r3, r1
 80018b0:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 80018b2:	2300      	movs	r3, #0
 80018b4:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 80018b6:	202c      	movs	r0, #44	; 0x2c
 80018b8:	f7ff fe64 	bl	8001584 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 80018bc:	2300      	movs	r3, #0
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	e006      	b.n	80018d0 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 80018c2:	887b      	ldrh	r3, [r7, #2]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff fe6b 	bl	80015a0 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	3301      	adds	r3, #1
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	68fa      	ldr	r2, [r7, #12]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d3f4      	bcc.n	80018c2 <LCD_FillColor+0x1c>
		
}
 80018d8:	bf00      	nop
 80018da:	bf00      	nop
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 80018e2:	b590      	push	{r4, r7, lr}
 80018e4:	b083      	sub	sp, #12
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	4604      	mov	r4, r0
 80018ea:	4608      	mov	r0, r1
 80018ec:	4611      	mov	r1, r2
 80018ee:	461a      	mov	r2, r3
 80018f0:	4623      	mov	r3, r4
 80018f2:	80fb      	strh	r3, [r7, #6]
 80018f4:	4603      	mov	r3, r0
 80018f6:	80bb      	strh	r3, [r7, #4]
 80018f8:	460b      	mov	r3, r1
 80018fa:	807b      	strh	r3, [r7, #2]
 80018fc:	4613      	mov	r3, r2
 80018fe:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8001900:	883b      	ldrh	r3, [r7, #0]
 8001902:	887a      	ldrh	r2, [r7, #2]
 8001904:	88b9      	ldrh	r1, [r7, #4]
 8001906:	88f8      	ldrh	r0, [r7, #6]
 8001908:	f7ff ff74 	bl	80017f4 <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 800190c:	887b      	ldrh	r3, [r7, #2]
 800190e:	883a      	ldrh	r2, [r7, #0]
 8001910:	fb02 f303 	mul.w	r3, r2, r3
 8001914:	461a      	mov	r2, r3
 8001916:	8b3b      	ldrh	r3, [r7, #24]
 8001918:	4619      	mov	r1, r3
 800191a:	4610      	mov	r0, r2
 800191c:	f7ff ffc3 	bl	80018a6 <LCD_FillColor>
	
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	bd90      	pop	{r4, r7, pc}

08001928 <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	80fb      	strh	r3, [r7, #6]
 8001932:	460b      	mov	r3, r1
 8001934:	80bb      	strh	r3, [r7, #4]
 8001936:	4613      	mov	r3, r2
 8001938:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 800193a:	78fb      	ldrb	r3, [r7, #3]
 800193c:	3b20      	subs	r3, #32
 800193e:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8001940:	88b9      	ldrh	r1, [r7, #4]
 8001942:	88f8      	ldrh	r0, [r7, #6]
 8001944:	2310      	movs	r3, #16
 8001946:	2208      	movs	r2, #8
 8001948:	f7ff ff54 	bl	80017f4 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 800194c:	202c      	movs	r0, #44	; 0x2c
 800194e:	f7ff fe19 	bl	8001584 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8001952:	2300      	movs	r3, #0
 8001954:	73bb      	strb	r3, [r7, #14]
 8001956:	e023      	b.n	80019a0 <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8001958:	7b3a      	ldrb	r2, [r7, #12]
 800195a:	7bbb      	ldrb	r3, [r7, #14]
 800195c:	4914      	ldr	r1, [pc, #80]	; (80019b0 <LCD_DrawChar+0x88>)
 800195e:	0112      	lsls	r2, r2, #4
 8001960:	440a      	add	r2, r1
 8001962:	4413      	add	r3, r2
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001968:	2300      	movs	r3, #0
 800196a:	737b      	strb	r3, [r7, #13]
 800196c:	e012      	b.n	8001994 <LCD_DrawChar+0x6c>
		{
			if ( ucTemp & 0x01 )
 800196e:	7bfb      	ldrb	r3, [r7, #15]
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	2b00      	cmp	r3, #0
 8001976:	d003      	beq.n	8001980 <LCD_DrawChar+0x58>
				LCD_Write_Data ( 0x001F );
 8001978:	201f      	movs	r0, #31
 800197a:	f7ff fe11 	bl	80015a0 <LCD_Write_Data>
 800197e:	e003      	b.n	8001988 <LCD_DrawChar+0x60>
			
			else
				LCD_Write_Data (  0xFFFF );								
 8001980:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001984:	f7ff fe0c 	bl	80015a0 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 8001988:	7bfb      	ldrb	r3, [r7, #15]
 800198a:	085b      	lsrs	r3, r3, #1
 800198c:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 800198e:	7b7b      	ldrb	r3, [r7, #13]
 8001990:	3301      	adds	r3, #1
 8001992:	737b      	strb	r3, [r7, #13]
 8001994:	7b7b      	ldrb	r3, [r7, #13]
 8001996:	2b07      	cmp	r3, #7
 8001998:	d9e9      	bls.n	800196e <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 800199a:	7bbb      	ldrb	r3, [r7, #14]
 800199c:	3301      	adds	r3, #1
 800199e:	73bb      	strb	r3, [r7, #14]
 80019a0:	7bbb      	ldrb	r3, [r7, #14]
 80019a2:	2b0f      	cmp	r3, #15
 80019a4:	d9d8      	bls.n	8001958 <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 80019a6:	bf00      	nop
 80019a8:	bf00      	nop
 80019aa:	3710      	adds	r7, #16
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	08004d28 	.word	0x08004d28

080019b4 <LCD_DrawString>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	603a      	str	r2, [r7, #0]
 80019be:	80fb      	strh	r3, [r7, #6]
 80019c0:	460b      	mov	r3, r1
 80019c2:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 80019c4:	e01c      	b.n	8001a00 <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 80019c6:	88fb      	ldrh	r3, [r7, #6]
 80019c8:	2be8      	cmp	r3, #232	; 0xe8
 80019ca:	d904      	bls.n	80019d6 <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80019cc:	2300      	movs	r3, #0
 80019ce:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 80019d0:	88bb      	ldrh	r3, [r7, #4]
 80019d2:	3310      	adds	r3, #16
 80019d4:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 80019d6:	88bb      	ldrh	r3, [r7, #4]
 80019d8:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 80019dc:	d903      	bls.n	80019e6 <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80019de:	2300      	movs	r3, #0
 80019e0:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 80019e2:	2300      	movs	r3, #0
 80019e4:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	781a      	ldrb	r2, [r3, #0]
 80019ea:	88b9      	ldrh	r1, [r7, #4]
 80019ec:	88fb      	ldrh	r3, [r7, #6]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff ff9a 	bl	8001928 <LCD_DrawChar>
		
		pStr ++;
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	3301      	adds	r3, #1
 80019f8:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 80019fa:	88fb      	ldrh	r3, [r7, #6]
 80019fc:	3308      	adds	r3, #8
 80019fe:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d1de      	bne.n	80019c6 <LCD_DrawString+0x12>
		
	}
	
}
 8001a08:	bf00      	nop
 8001a0a:	bf00      	nop
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
	...

08001a14 <LCD_DrawEllipse>:

//Task 3
volatile uint8_t ellipse[2 * 75 + 1][2 * 25 + 1];

void LCD_DrawEllipse ( uint16_t usC, uint16_t usP, uint16_t SR, uint16_t LR, uint16_t usColor)
{	
 8001a14:	b590      	push	{r4, r7, lr}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4604      	mov	r4, r0
 8001a1c:	4608      	mov	r0, r1
 8001a1e:	4611      	mov	r1, r2
 8001a20:	461a      	mov	r2, r3
 8001a22:	4623      	mov	r3, r4
 8001a24:	80fb      	strh	r3, [r7, #6]
 8001a26:	4603      	mov	r3, r0
 8001a28:	80bb      	strh	r3, [r7, #4]
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	807b      	strh	r3, [r7, #2]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	803b      	strh	r3, [r7, #0]
	/*
	 *  Task 3 : Implement LCD_DrawEllipse by using LCD_DrawDot
	 */
	memset(ellipse, 0, sizeof(ellipse));
 8001a32:	f641 6215 	movw	r2, #7701	; 0x1e15
 8001a36:	2100      	movs	r1, #0
 8001a38:	481a      	ldr	r0, [pc, #104]	; (8001aa4 <LCD_DrawEllipse+0x90>)
 8001a3a:	f002 fa47 	bl	8003ecc <memset>
	// memset(ellipse, 1, 50 * (2 * SR + 1));
	uint8_t leftTopY = usC - SR;
 8001a3e:	88fb      	ldrh	r3, [r7, #6]
 8001a40:	b2da      	uxtb	r2, r3
 8001a42:	887b      	ldrh	r3, [r7, #2]
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	73fb      	strb	r3, [r7, #15]
	uint8_t leftTopX = usP - LR;
 8001a4a:	88bb      	ldrh	r3, [r7, #4]
 8001a4c:	b2da      	uxtb	r2, r3
 8001a4e:	883b      	ldrh	r3, [r7, #0]
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	73bb      	strb	r3, [r7, #14]
	LCD_OpenWindow(leftTopY, leftTopX, 2 * SR + 1, 2 * LR + 1);
 8001a56:	7bfb      	ldrb	r3, [r7, #15]
 8001a58:	b298      	uxth	r0, r3
 8001a5a:	7bbb      	ldrb	r3, [r7, #14]
 8001a5c:	b299      	uxth	r1, r3
 8001a5e:	887b      	ldrh	r3, [r7, #2]
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	3301      	adds	r3, #1
 8001a66:	b29a      	uxth	r2, r3
 8001a68:	883b      	ldrh	r3, [r7, #0]
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	3301      	adds	r3, #1
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	f7ff febf 	bl	80017f4 <LCD_OpenWindow>
	uint8_t usWidth = 2*SR;
 8001a76:	887b      	ldrh	r3, [r7, #2]
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	737b      	strb	r3, [r7, #13]
	uint8_t usHeight = 2*LR;
 8001a7e:	883b      	ldrh	r3, [r7, #0]
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	733b      	strb	r3, [r7, #12]
	LCD_FillColor ( usWidth * usHeight, usColor );
 8001a86:	7b7b      	ldrb	r3, [r7, #13]
 8001a88:	7b3a      	ldrb	r2, [r7, #12]
 8001a8a:	fb02 f303 	mul.w	r3, r2, r3
 8001a8e:	461a      	mov	r2, r3
 8001a90:	8c3b      	ldrh	r3, [r7, #32]
 8001a92:	4619      	mov	r1, r3
 8001a94:	4610      	mov	r0, r2
 8001a96:	f7ff ff06 	bl	80018a6 <LCD_FillColor>
	// 			LCD_Write_Data(0xffff);
	// 	}
	// }
	
	
}
 8001a9a:	bf00      	nop
 8001a9c:	3714      	adds	r7, #20
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd90      	pop	{r4, r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	200001dc 	.word	0x200001dc

08001aa8 <LCD_Cam_Gram>:
// This actually shows the image of the to the camera
void LCD_Cam_Gram()
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 );
 8001aac:	2036      	movs	r0, #54	; 0x36
 8001aae:	f7ff fd69 	bl	8001584 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x68 );
 8001ab2:	2068      	movs	r0, #104	; 0x68
 8001ab4:	f7ff fd74 	bl	80015a0 <LCD_Write_Data>
	DEBUG_DELAY ();

	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN );
 8001ab8:	202a      	movs	r0, #42	; 0x2a
 8001aba:	f7ff fd63 	bl	8001584 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001abe:	2000      	movs	r0, #0
 8001ac0:	f7ff fd6e 	bl	80015a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	f7ff fd6b 	bl	80015a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 8001aca:	2001      	movs	r0, #1
 8001acc:	f7ff fd68 	bl	80015a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8001ad0:	203f      	movs	r0, #63	; 0x3f
 8001ad2:	f7ff fd65 	bl	80015a0 <LCD_Write_Data>

	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE );
 8001ad6:	202b      	movs	r0, #43	; 0x2b
 8001ad8:	f7ff fd54 	bl	8001584 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001adc:	2000      	movs	r0, #0
 8001ade:	f7ff fd5f 	bl	80015a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	f7ff fd5c 	bl	80015a0 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001ae8:	2000      	movs	r0, #0
 8001aea:	f7ff fd59 	bl	80015a0 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8001aee:	20ef      	movs	r0, #239	; 0xef
 8001af0:	f7ff fd56 	bl	80015a0 <LCD_Write_Data>

	LCD_Write_Cmd ( 0x2C );
 8001af4:	202c      	movs	r0, #44	; 0x2c
 8001af6:	f7ff fd45 	bl	8001584 <LCD_Write_Cmd>

}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
	...

08001b00 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b0e8      	sub	sp, #416	; 0x1a0
 8001b04:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b06:	f000 fbf7 	bl	80022f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b0a:	f000 f9b1 	bl	8001e70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b0e:	f7ff fbed 	bl	80012ec <MX_GPIO_Init>
  MX_FSMC_Init();
 8001b12:	f7ff fb39 	bl	8001188 <MX_FSMC_Init>
  MX_USART1_UART_Init();
 8001b16:	f000 fad1 	bl	80020bc <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001b1a:	f000 faf9 	bl	8002110 <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  motor_flag = 7;
 8001b1e:	4b28      	ldr	r3, [pc, #160]	; (8001bc0 <main+0xc0>)
 8001b20:	2207      	movs	r2, #7
 8001b22:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart1, (uint8_t *)&RxBuffer, 3);
 8001b24:	2203      	movs	r2, #3
 8001b26:	4927      	ldr	r1, [pc, #156]	; (8001bc4 <main+0xc4>)
 8001b28:	4827      	ldr	r0, [pc, #156]	; (8001bc8 <main+0xc8>)
 8001b2a:	f001 fd18 	bl	800355e <HAL_UART_Receive_IT>
  LCD_INIT();
 8001b2e:	f7ff fcde 	bl	80014ee <LCD_INIT>
  cube_t cube;
  // char line_buffer[54]  = "BBBFULRUBUURFRRRDFDFLUFDLRUUUFFDRLDLRRFLLBBLFDLUBBDDBD";
  // memcpy(cube.face, line_buffer, 54);
  LCD_Clear(50, 80, 140, 70, RED);
 8001b32:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001b36:	9300      	str	r3, [sp, #0]
 8001b38:	2346      	movs	r3, #70	; 0x46
 8001b3a:	228c      	movs	r2, #140	; 0x8c
 8001b3c:	2150      	movs	r1, #80	; 0x50
 8001b3e:	2032      	movs	r0, #50	; 0x32
 8001b40:	f7ff fecf 	bl	80018e2 <LCD_Clear>
  LCD_DrawString(75, 100, "CAMERA TESTER");
 8001b44:	4a21      	ldr	r2, [pc, #132]	; (8001bcc <main+0xcc>)
 8001b46:	2164      	movs	r1, #100	; 0x64
 8001b48:	204b      	movs	r0, #75	; 0x4b
 8001b4a:	f7ff ff33 	bl	80019b4 <LCD_DrawString>
  // solve_Naive(&cube);
  HAL_Delay(2000);
 8001b4e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001b52:	f000 fc33 	bl	80023bc <HAL_Delay>
  //   default:
  //     break;
  //   }
  // }
  
  while (Ov7725_Init() != SUCCESS)
 8001b56:	bf00      	nop
 8001b58:	f7fe fff2 	bl	8000b40 <Ov7725_Init>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d1fa      	bne.n	8001b58 <main+0x58>
    ;
  Ov7725_vsync = 0;
 8001b62:	4b1b      	ldr	r3, [pc, #108]	; (8001bd0 <main+0xd0>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	701a      	strb	r2, [r3, #0]
  uint8_t cnt = 0;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    while (cnt < 13)
 8001b6e:	e172      	b.n	8001e56 <main+0x356>
    {
      if (Ov7725_vsync == 2)
 8001b70:	4b17      	ldr	r3, [pc, #92]	; (8001bd0 <main+0xd0>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	f040 816d 	bne.w	8001e56 <main+0x356>
      {
        FIFO_PREPARE;
 8001b7c:	4b15      	ldr	r3, [pc, #84]	; (8001bd4 <main+0xd4>)
 8001b7e:	2204      	movs	r2, #4
 8001b80:	615a      	str	r2, [r3, #20]
 8001b82:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <main+0xd8>)
 8001b84:	2220      	movs	r2, #32
 8001b86:	615a      	str	r2, [r3, #20]
 8001b88:	4b13      	ldr	r3, [pc, #76]	; (8001bd8 <main+0xd8>)
 8001b8a:	2220      	movs	r2, #32
 8001b8c:	611a      	str	r2, [r3, #16]
 8001b8e:	4b11      	ldr	r3, [pc, #68]	; (8001bd4 <main+0xd4>)
 8001b90:	2204      	movs	r2, #4
 8001b92:	611a      	str	r2, [r3, #16]
 8001b94:	4b10      	ldr	r3, [pc, #64]	; (8001bd8 <main+0xd8>)
 8001b96:	2220      	movs	r2, #32
 8001b98:	615a      	str	r2, [r3, #20]
 8001b9a:	4b0f      	ldr	r3, [pc, #60]	; (8001bd8 <main+0xd8>)
 8001b9c:	2220      	movs	r2, #32
 8001b9e:	611a      	str	r2, [r3, #16]
        //	LCD_Rst();
        uint16_t temp_colors[9];
        uint16_t squareColors[9];
        //	uint16_t x, y;
        uint16_t Camera_Data;
        memset(squareColors, 0, sizeof(squareColors));
 8001ba0:	463b      	mov	r3, r7
 8001ba2:	2212      	movs	r2, #18
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f002 f990 	bl	8003ecc <memset>
        LCD_Cam_Gram();
 8001bac:	f7ff ff7c 	bl	8001aa8 <LCD_Cam_Gram>
        for (int i = 0; i < 240; i++)
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8001bb6:	e0cd      	b.n	8001d54 <main+0x254>
        {
          for (int j = 0; j < 320; j++)
 8001bb8:	2300      	movs	r3, #0
 8001bba:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8001bbe:	e0be      	b.n	8001d3e <main+0x23e>
 8001bc0:	20001ff2 	.word	0x20001ff2
 8001bc4:	20001ff4 	.word	0x20001ff4
 8001bc8:	20001ff8 	.word	0x20001ff8
 8001bcc:	08004d08 	.word	0x08004d08
 8001bd0:	20001ff1 	.word	0x20001ff1
 8001bd4:	40010800 	.word	0x40010800
 8001bd8:	40011000 	.word	0x40011000
          {
            READ_FIFO_PIXEL(Camera_Data);
 8001bdc:	2300      	movs	r3, #0
 8001bde:	f8a7 318c 	strh.w	r3, [r7, #396]	; 0x18c
 8001be2:	4ba0      	ldr	r3, [pc, #640]	; (8001e64 <main+0x364>)
 8001be4:	2220      	movs	r2, #32
 8001be6:	615a      	str	r2, [r3, #20]
 8001be8:	4b9f      	ldr	r3, [pc, #636]	; (8001e68 <main+0x368>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001bf2:	f8a7 318c 	strh.w	r3, [r7, #396]	; 0x18c
 8001bf6:	4b9b      	ldr	r3, [pc, #620]	; (8001e64 <main+0x364>)
 8001bf8:	2220      	movs	r2, #32
 8001bfa:	611a      	str	r2, [r3, #16]
 8001bfc:	4b99      	ldr	r3, [pc, #612]	; (8001e64 <main+0x364>)
 8001bfe:	2220      	movs	r2, #32
 8001c00:	615a      	str	r2, [r3, #20]
 8001c02:	4b99      	ldr	r3, [pc, #612]	; (8001e68 <main+0x368>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	0a1b      	lsrs	r3, r3, #8
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	f8b7 318c 	ldrh.w	r3, [r7, #396]	; 0x18c
 8001c10:	4313      	orrs	r3, r2
 8001c12:	f8a7 318c 	strh.w	r3, [r7, #396]	; 0x18c
 8001c16:	4b93      	ldr	r3, [pc, #588]	; (8001e64 <main+0x364>)
 8001c18:	2220      	movs	r2, #32
 8001c1a:	611a      	str	r2, [r3, #16]
            LCD_Write_Data(Camera_Data);
 8001c1c:	f8b7 318c 	ldrh.w	r3, [r7, #396]	; 0x18c
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff fcbd 	bl	80015a0 <LCD_Write_Data>
            // bottom row
            if (j == 110 && i == 60)
 8001c26:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001c2a:	2b6e      	cmp	r3, #110	; 0x6e
 8001c2c:	d10a      	bne.n	8001c44 <main+0x144>
 8001c2e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001c32:	2b3c      	cmp	r3, #60	; 0x3c
 8001c34:	d106      	bne.n	8001c44 <main+0x144>
              squareColors[0] = Camera_Data;
 8001c36:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001c3a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001c3e:	f8b7 218c 	ldrh.w	r2, [r7, #396]	; 0x18c
 8001c42:	801a      	strh	r2, [r3, #0]

            if (j == 110 && i == 120)
 8001c44:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001c48:	2b6e      	cmp	r3, #110	; 0x6e
 8001c4a:	d10a      	bne.n	8001c62 <main+0x162>
 8001c4c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001c50:	2b78      	cmp	r3, #120	; 0x78
 8001c52:	d106      	bne.n	8001c62 <main+0x162>
              squareColors[1] = Camera_Data;
 8001c54:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001c58:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001c5c:	f8b7 218c 	ldrh.w	r2, [r7, #396]	; 0x18c
 8001c60:	805a      	strh	r2, [r3, #2]

            if (j == 110 && i == 170)
 8001c62:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001c66:	2b6e      	cmp	r3, #110	; 0x6e
 8001c68:	d10a      	bne.n	8001c80 <main+0x180>
 8001c6a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001c6e:	2baa      	cmp	r3, #170	; 0xaa
 8001c70:	d106      	bne.n	8001c80 <main+0x180>
              squareColors[2] = Camera_Data;
 8001c72:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001c76:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001c7a:	f8b7 218c 	ldrh.w	r2, [r7, #396]	; 0x18c
 8001c7e:	809a      	strh	r2, [r3, #4]

            // // middle row
            if (j == 160 && i == 60)
 8001c80:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001c84:	2ba0      	cmp	r3, #160	; 0xa0
 8001c86:	d10a      	bne.n	8001c9e <main+0x19e>
 8001c88:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001c8c:	2b3c      	cmp	r3, #60	; 0x3c
 8001c8e:	d106      	bne.n	8001c9e <main+0x19e>
              squareColors[3] = Camera_Data;
 8001c90:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001c94:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001c98:	f8b7 218c 	ldrh.w	r2, [r7, #396]	; 0x18c
 8001c9c:	80da      	strh	r2, [r3, #6]

            if (j == 160 && i == 120)
 8001c9e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001ca2:	2ba0      	cmp	r3, #160	; 0xa0
 8001ca4:	d10a      	bne.n	8001cbc <main+0x1bc>
 8001ca6:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001caa:	2b78      	cmp	r3, #120	; 0x78
 8001cac:	d106      	bne.n	8001cbc <main+0x1bc>
              squareColors[4] = Camera_Data;
 8001cae:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001cb2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001cb6:	f8b7 218c 	ldrh.w	r2, [r7, #396]	; 0x18c
 8001cba:	811a      	strh	r2, [r3, #8]

            if (j == 160 && i == 170)
 8001cbc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001cc0:	2ba0      	cmp	r3, #160	; 0xa0
 8001cc2:	d10a      	bne.n	8001cda <main+0x1da>
 8001cc4:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001cc8:	2baa      	cmp	r3, #170	; 0xaa
 8001cca:	d106      	bne.n	8001cda <main+0x1da>
              squareColors[5] = Camera_Data;
 8001ccc:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001cd0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001cd4:	f8b7 218c 	ldrh.w	r2, [r7, #396]	; 0x18c
 8001cd8:	815a      	strh	r2, [r3, #10]

            // top row

            if (j == 210 && i == 60)
 8001cda:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001cde:	2bd2      	cmp	r3, #210	; 0xd2
 8001ce0:	d10a      	bne.n	8001cf8 <main+0x1f8>
 8001ce2:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001ce6:	2b3c      	cmp	r3, #60	; 0x3c
 8001ce8:	d106      	bne.n	8001cf8 <main+0x1f8>
              squareColors[6] = Camera_Data;
 8001cea:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001cee:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001cf2:	f8b7 218c 	ldrh.w	r2, [r7, #396]	; 0x18c
 8001cf6:	819a      	strh	r2, [r3, #12]

            if (j == 210 && i == 120)
 8001cf8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001cfc:	2bd2      	cmp	r3, #210	; 0xd2
 8001cfe:	d10a      	bne.n	8001d16 <main+0x216>
 8001d00:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001d04:	2b78      	cmp	r3, #120	; 0x78
 8001d06:	d106      	bne.n	8001d16 <main+0x216>
              squareColors[7] = Camera_Data;
 8001d08:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001d0c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001d10:	f8b7 218c 	ldrh.w	r2, [r7, #396]	; 0x18c
 8001d14:	81da      	strh	r2, [r3, #14]

            if (j == 210 && i == 170)
 8001d16:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001d1a:	2bd2      	cmp	r3, #210	; 0xd2
 8001d1c:	d10a      	bne.n	8001d34 <main+0x234>
 8001d1e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001d22:	2baa      	cmp	r3, #170	; 0xaa
 8001d24:	d106      	bne.n	8001d34 <main+0x234>
              squareColors[8] = Camera_Data;
 8001d26:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001d2a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001d2e:	f8b7 218c 	ldrh.w	r2, [r7, #396]	; 0x18c
 8001d32:	821a      	strh	r2, [r3, #16]
          for (int j = 0; j < 320; j++)
 8001d34:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001d38:	3301      	adds	r3, #1
 8001d3a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8001d3e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001d42:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001d46:	f6ff af49 	blt.w	8001bdc <main+0xdc>
        for (int i = 0; i < 240; i++)
 8001d4a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001d4e:	3301      	adds	r3, #1
 8001d50:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8001d54:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001d58:	2bef      	cmp	r3, #239	; 0xef
 8001d5a:	f77f af2d 	ble.w	8001bb8 <main+0xb8>
          }
        }
        // j , i
        KNearest_match(squareColors, temp_colors, cnt, cube.face);
 8001d5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d62:	f897 218f 	ldrb.w	r2, [r7, #399]	; 0x18f
 8001d66:	f107 0114 	add.w	r1, r7, #20
 8001d6a:	4638      	mov	r0, r7
 8001d6c:	f7ff f8cc 	bl	8000f08 <KNearest_match>
        LCD_DrawEllipse(110, 60, 5, 5, temp_colors[0]);  // 0 bottom left
 8001d70:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001d74:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001d78:	881b      	ldrh	r3, [r3, #0]
 8001d7a:	9300      	str	r3, [sp, #0]
 8001d7c:	2305      	movs	r3, #5
 8001d7e:	2205      	movs	r2, #5
 8001d80:	213c      	movs	r1, #60	; 0x3c
 8001d82:	206e      	movs	r0, #110	; 0x6e
 8001d84:	f7ff fe46 	bl	8001a14 <LCD_DrawEllipse>
        LCD_DrawEllipse(110, 120, 5, 5, temp_colors[1]); // 1 bottom mid
 8001d88:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001d8c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001d90:	885b      	ldrh	r3, [r3, #2]
 8001d92:	9300      	str	r3, [sp, #0]
 8001d94:	2305      	movs	r3, #5
 8001d96:	2205      	movs	r2, #5
 8001d98:	2178      	movs	r1, #120	; 0x78
 8001d9a:	206e      	movs	r0, #110	; 0x6e
 8001d9c:	f7ff fe3a 	bl	8001a14 <LCD_DrawEllipse>
        LCD_DrawEllipse(110, 170, 5, 5, temp_colors[2]); // 2 bottom right
 8001da0:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001da4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001da8:	889b      	ldrh	r3, [r3, #4]
 8001daa:	9300      	str	r3, [sp, #0]
 8001dac:	2305      	movs	r3, #5
 8001dae:	2205      	movs	r2, #5
 8001db0:	21aa      	movs	r1, #170	; 0xaa
 8001db2:	206e      	movs	r0, #110	; 0x6e
 8001db4:	f7ff fe2e 	bl	8001a14 <LCD_DrawEllipse>

        LCD_DrawEllipse(160, 60, 5, 5, temp_colors[3]);  // 3 mid left
 8001db8:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001dbc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001dc0:	88db      	ldrh	r3, [r3, #6]
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	2305      	movs	r3, #5
 8001dc6:	2205      	movs	r2, #5
 8001dc8:	213c      	movs	r1, #60	; 0x3c
 8001dca:	20a0      	movs	r0, #160	; 0xa0
 8001dcc:	f7ff fe22 	bl	8001a14 <LCD_DrawEllipse>
        LCD_DrawEllipse(160, 120, 5, 5, temp_colors[4]); // 4 center
 8001dd0:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001dd4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001dd8:	891b      	ldrh	r3, [r3, #8]
 8001dda:	9300      	str	r3, [sp, #0]
 8001ddc:	2305      	movs	r3, #5
 8001dde:	2205      	movs	r2, #5
 8001de0:	2178      	movs	r1, #120	; 0x78
 8001de2:	20a0      	movs	r0, #160	; 0xa0
 8001de4:	f7ff fe16 	bl	8001a14 <LCD_DrawEllipse>
        LCD_DrawEllipse(160, 170, 5, 5, temp_colors[5]); // 5 mid right
 8001de8:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001dec:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001df0:	895b      	ldrh	r3, [r3, #10]
 8001df2:	9300      	str	r3, [sp, #0]
 8001df4:	2305      	movs	r3, #5
 8001df6:	2205      	movs	r2, #5
 8001df8:	21aa      	movs	r1, #170	; 0xaa
 8001dfa:	20a0      	movs	r0, #160	; 0xa0
 8001dfc:	f7ff fe0a 	bl	8001a14 <LCD_DrawEllipse>

        LCD_DrawEllipse(210, 60, 5, 5, temp_colors[6]);  // 6 top left
 8001e00:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001e04:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001e08:	899b      	ldrh	r3, [r3, #12]
 8001e0a:	9300      	str	r3, [sp, #0]
 8001e0c:	2305      	movs	r3, #5
 8001e0e:	2205      	movs	r2, #5
 8001e10:	213c      	movs	r1, #60	; 0x3c
 8001e12:	20d2      	movs	r0, #210	; 0xd2
 8001e14:	f7ff fdfe 	bl	8001a14 <LCD_DrawEllipse>
        LCD_DrawEllipse(210, 120, 5, 5, temp_colors[7]); // 7 top mid
 8001e18:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001e1c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001e20:	89db      	ldrh	r3, [r3, #14]
 8001e22:	9300      	str	r3, [sp, #0]
 8001e24:	2305      	movs	r3, #5
 8001e26:	2205      	movs	r2, #5
 8001e28:	2178      	movs	r1, #120	; 0x78
 8001e2a:	20d2      	movs	r0, #210	; 0xd2
 8001e2c:	f7ff fdf2 	bl	8001a14 <LCD_DrawEllipse>
        LCD_DrawEllipse(210, 170, 5, 5, temp_colors[8]); // 8 top right
 8001e30:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001e34:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001e38:	8a1b      	ldrh	r3, [r3, #16]
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	2305      	movs	r3, #5
 8001e3e:	2205      	movs	r2, #5
 8001e40:	21aa      	movs	r1, #170	; 0xaa
 8001e42:	20d2      	movs	r0, #210	; 0xd2
 8001e44:	f7ff fde6 	bl	8001a14 <LCD_DrawEllipse>

        HAL_Delay(1000);
 8001e48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e4c:	f000 fab6 	bl	80023bc <HAL_Delay>
        Ov7725_vsync = 0;
 8001e50:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <main+0x36c>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	701a      	strb	r2, [r3, #0]
    while (cnt < 13)
 8001e56:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8001e5a:	2b0c      	cmp	r3, #12
 8001e5c:	f67f ae88 	bls.w	8001b70 <main+0x70>
 8001e60:	e7f9      	b.n	8001e56 <main+0x356>
 8001e62:	bf00      	nop
 8001e64:	40011000 	.word	0x40011000
 8001e68:	40010c00 	.word	0x40010c00
 8001e6c:	20001ff1 	.word	0x20001ff1

08001e70 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b090      	sub	sp, #64	; 0x40
 8001e74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e76:	f107 0318 	add.w	r3, r7, #24
 8001e7a:	2228      	movs	r2, #40	; 0x28
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f002 f824 	bl	8003ecc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e84:	1d3b      	adds	r3, r7, #4
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	605a      	str	r2, [r3, #4]
 8001e8c:	609a      	str	r2, [r3, #8]
 8001e8e:	60da      	str	r2, [r3, #12]
 8001e90:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e92:	2301      	movs	r3, #1
 8001e94:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e9a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ea8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001eac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001eae:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eb4:	f107 0318 	add.w	r3, r7, #24
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f000 fe9f 	bl	8002bfc <HAL_RCC_OscConfig>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001ec4:	f000 f819 	bl	8001efa <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ec8:	230f      	movs	r3, #15
 8001eca:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ecc:	2302      	movs	r3, #2
 8001ece:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ed4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ed8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001eda:	2300      	movs	r3, #0
 8001edc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ede:	1d3b      	adds	r3, r7, #4
 8001ee0:	2102      	movs	r1, #2
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f001 f8ee 	bl	80030c4 <HAL_RCC_ClockConfig>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001eee:	f000 f804 	bl	8001efa <Error_Handler>
  }
}
 8001ef2:	bf00      	nop
 8001ef4:	3740      	adds	r7, #64	; 0x40
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001efa:	b480      	push	{r7}
 8001efc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001efe:	b672      	cpsid	i
}
 8001f00:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f02:	e7fe      	b.n	8001f02 <Error_Handler+0x8>

08001f04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f0a:	4b15      	ldr	r3, [pc, #84]	; (8001f60 <HAL_MspInit+0x5c>)
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	4a14      	ldr	r2, [pc, #80]	; (8001f60 <HAL_MspInit+0x5c>)
 8001f10:	f043 0301 	orr.w	r3, r3, #1
 8001f14:	6193      	str	r3, [r2, #24]
 8001f16:	4b12      	ldr	r3, [pc, #72]	; (8001f60 <HAL_MspInit+0x5c>)
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	60bb      	str	r3, [r7, #8]
 8001f20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f22:	4b0f      	ldr	r3, [pc, #60]	; (8001f60 <HAL_MspInit+0x5c>)
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	4a0e      	ldr	r2, [pc, #56]	; (8001f60 <HAL_MspInit+0x5c>)
 8001f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f2c:	61d3      	str	r3, [r2, #28]
 8001f2e:	4b0c      	ldr	r3, [pc, #48]	; (8001f60 <HAL_MspInit+0x5c>)
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f36:	607b      	str	r3, [r7, #4]
 8001f38:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f3a:	4b0a      	ldr	r3, [pc, #40]	; (8001f64 <HAL_MspInit+0x60>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	4a04      	ldr	r2, [pc, #16]	; (8001f64 <HAL_MspInit+0x60>)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f56:	bf00      	nop
 8001f58:	3714      	adds	r7, #20
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bc80      	pop	{r7}
 8001f5e:	4770      	bx	lr
 8001f60:	40021000 	.word	0x40021000
 8001f64:	40010000 	.word	0x40010000

08001f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f6c:	e7fe      	b.n	8001f6c <NMI_Handler+0x4>

08001f6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f72:	e7fe      	b.n	8001f72 <HardFault_Handler+0x4>

08001f74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f78:	e7fe      	b.n	8001f78 <MemManage_Handler+0x4>

08001f7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f7e:	e7fe      	b.n	8001f7e <BusFault_Handler+0x4>

08001f80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f84:	e7fe      	b.n	8001f84 <UsageFault_Handler+0x4>

08001f86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f86:	b480      	push	{r7}
 8001f88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f8a:	bf00      	nop
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bc80      	pop	{r7}
 8001f90:	4770      	bx	lr

08001f92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f92:	b480      	push	{r7}
 8001f94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f96:	bf00      	nop
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bc80      	pop	{r7}
 8001f9c:	4770      	bx	lr

08001f9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fa2:	bf00      	nop
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bc80      	pop	{r7}
 8001fa8:	4770      	bx	lr

08001faa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fae:	f000 f9e9 	bl	8002384 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}
	...

08001fb8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
   if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_3) != RESET)
 8001fbc:	4b17      	ldr	r3, [pc, #92]	; (800201c <EXTI3_IRQHandler+0x64>)
 8001fbe:	695b      	ldr	r3, [r3, #20]
 8001fc0:	f003 0308 	and.w	r3, r3, #8
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d023      	beq.n	8002010 <EXTI3_IRQHandler+0x58>
   {
 		if( Ov7725_vsync == 0 )
 8001fc8:	4b15      	ldr	r3, [pc, #84]	; (8002020 <EXTI3_IRQHandler+0x68>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d10f      	bne.n	8001ff0 <EXTI3_IRQHandler+0x38>
     {
 				FIFO_WRST_L();
 8001fd0:	4b14      	ldr	r3, [pc, #80]	; (8002024 <EXTI3_IRQHandler+0x6c>)
 8001fd2:	2210      	movs	r2, #16
 8001fd4:	615a      	str	r2, [r3, #20]
         FIFO_WE_H();
 8001fd6:	4b14      	ldr	r3, [pc, #80]	; (8002028 <EXTI3_IRQHandler+0x70>)
 8001fd8:	2208      	movs	r2, #8
 8001fda:	611a      	str	r2, [r3, #16]

         Ov7725_vsync = 1;
 8001fdc:	4b10      	ldr	r3, [pc, #64]	; (8002020 <EXTI3_IRQHandler+0x68>)
 8001fde:	2201      	movs	r2, #1
 8001fe0:	701a      	strb	r2, [r3, #0]
         FIFO_WE_H();
 8001fe2:	4b11      	ldr	r3, [pc, #68]	; (8002028 <EXTI3_IRQHandler+0x70>)
 8001fe4:	2208      	movs	r2, #8
 8001fe6:	611a      	str	r2, [r3, #16]
         FIFO_WRST_H();
 8001fe8:	4b0e      	ldr	r3, [pc, #56]	; (8002024 <EXTI3_IRQHandler+0x6c>)
 8001fea:	2210      	movs	r2, #16
 8001fec:	611a      	str	r2, [r3, #16]
 8001fee:	e009      	b.n	8002004 <EXTI3_IRQHandler+0x4c>
     }
     else if( Ov7725_vsync == 1 )
 8001ff0:	4b0b      	ldr	r3, [pc, #44]	; (8002020 <EXTI3_IRQHandler+0x68>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d105      	bne.n	8002004 <EXTI3_IRQHandler+0x4c>
     {
         FIFO_WE_L();
 8001ff8:	4b0b      	ldr	r3, [pc, #44]	; (8002028 <EXTI3_IRQHandler+0x70>)
 8001ffa:	2208      	movs	r2, #8
 8001ffc:	615a      	str	r2, [r3, #20]
         Ov7725_vsync = 2;
 8001ffe:	4b08      	ldr	r3, [pc, #32]	; (8002020 <EXTI3_IRQHandler+0x68>)
 8002000:	2202      	movs	r2, #2
 8002002:	701a      	strb	r2, [r3, #0]
     }


     __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_3);
 8002004:	4b05      	ldr	r3, [pc, #20]	; (800201c <EXTI3_IRQHandler+0x64>)
 8002006:	2208      	movs	r2, #8
 8002008:	615a      	str	r2, [r3, #20]
     HAL_GPIO_EXTI_Callback(GPIO_PIN_3);
 800200a:	2008      	movs	r0, #8
 800200c:	f000 fdec 	bl	8002be8 <HAL_GPIO_EXTI_Callback>
   }
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002010:	2008      	movs	r0, #8
 8002012:	f000 fdd1 	bl	8002bb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	40010400 	.word	0x40010400
 8002020:	20001ff1 	.word	0x20001ff1
 8002024:	40011000 	.word	0x40011000
 8002028:	40011400 	.word	0x40011400

0800202c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  if (RxBuffer[2] == 0x6b)
 8002030:	4b1c      	ldr	r3, [pc, #112]	; (80020a4 <USART1_IRQHandler+0x78>)
 8002032:	789b      	ldrb	r3, [r3, #2]
 8002034:	2b6b      	cmp	r3, #107	; 0x6b
 8002036:	d12a      	bne.n	800208e <USART1_IRQHandler+0x62>
  {
    if (RxBuffer[1] == 0x9f)
 8002038:	4b1a      	ldr	r3, [pc, #104]	; (80020a4 <USART1_IRQHandler+0x78>)
 800203a:	785b      	ldrb	r3, [r3, #1]
 800203c:	2b9f      	cmp	r3, #159	; 0x9f
 800203e:	d110      	bne.n	8002062 <USART1_IRQHandler+0x36>
    {
      motor_flag |= 0x01 << (RxBuffer[0] - 1);
 8002040:	4b18      	ldr	r3, [pc, #96]	; (80020a4 <USART1_IRQHandler+0x78>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	3b01      	subs	r3, #1
 8002046:	2201      	movs	r2, #1
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	b25a      	sxtb	r2, r3
 800204e:	4b16      	ldr	r3, [pc, #88]	; (80020a8 <USART1_IRQHandler+0x7c>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	b2db      	uxtb	r3, r3
 8002054:	b25b      	sxtb	r3, r3
 8002056:	4313      	orrs	r3, r2
 8002058:	b25b      	sxtb	r3, r3
 800205a:	b2da      	uxtb	r2, r3
 800205c:	4b12      	ldr	r3, [pc, #72]	; (80020a8 <USART1_IRQHandler+0x7c>)
 800205e:	701a      	strb	r2, [r3, #0]
 8002060:	e015      	b.n	800208e <USART1_IRQHandler+0x62>
    }
    else if (RxBuffer[1] == 0x02)
 8002062:	4b10      	ldr	r3, [pc, #64]	; (80020a4 <USART1_IRQHandler+0x78>)
 8002064:	785b      	ldrb	r3, [r3, #1]
 8002066:	2b02      	cmp	r3, #2
 8002068:	d111      	bne.n	800208e <USART1_IRQHandler+0x62>
    {
      motor_flag &= ~(0x01 << (RxBuffer[0] - 1));
 800206a:	4b0e      	ldr	r3, [pc, #56]	; (80020a4 <USART1_IRQHandler+0x78>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	3b01      	subs	r3, #1
 8002070:	2201      	movs	r2, #1
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	b25b      	sxtb	r3, r3
 8002078:	43db      	mvns	r3, r3
 800207a:	b25a      	sxtb	r2, r3
 800207c:	4b0a      	ldr	r3, [pc, #40]	; (80020a8 <USART1_IRQHandler+0x7c>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	b2db      	uxtb	r3, r3
 8002082:	b25b      	sxtb	r3, r3
 8002084:	4013      	ands	r3, r2
 8002086:	b25b      	sxtb	r3, r3
 8002088:	b2da      	uxtb	r2, r3
 800208a:	4b07      	ldr	r3, [pc, #28]	; (80020a8 <USART1_IRQHandler+0x7c>)
 800208c:	701a      	strb	r2, [r3, #0]
    }
  }
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800208e:	4807      	ldr	r0, [pc, #28]	; (80020ac <USART1_IRQHandler+0x80>)
 8002090:	f001 faba 	bl	8003608 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  HAL_UART_Receive_IT(&huart1, (uint8_t *)&RxBuffer, RXBUFFERSIZE);
 8002094:	2203      	movs	r2, #3
 8002096:	4903      	ldr	r1, [pc, #12]	; (80020a4 <USART1_IRQHandler+0x78>)
 8002098:	4804      	ldr	r0, [pc, #16]	; (80020ac <USART1_IRQHandler+0x80>)
 800209a:	f001 fa60 	bl	800355e <HAL_UART_Receive_IT>

  /* USER CODE END USART1_IRQn 1 */
}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	20001ff4 	.word	0x20001ff4
 80020a8:	20001ff2 	.word	0x20001ff2
 80020ac:	20001ff8 	.word	0x20001ff8

080020b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020b4:	bf00      	nop
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bc80      	pop	{r7}
 80020ba:	4770      	bx	lr

080020bc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80020c0:	4b11      	ldr	r3, [pc, #68]	; (8002108 <MX_USART1_UART_Init+0x4c>)
 80020c2:	4a12      	ldr	r2, [pc, #72]	; (800210c <MX_USART1_UART_Init+0x50>)
 80020c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80020c6:	4b10      	ldr	r3, [pc, #64]	; (8002108 <MX_USART1_UART_Init+0x4c>)
 80020c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020ce:	4b0e      	ldr	r3, [pc, #56]	; (8002108 <MX_USART1_UART_Init+0x4c>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80020d4:	4b0c      	ldr	r3, [pc, #48]	; (8002108 <MX_USART1_UART_Init+0x4c>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80020da:	4b0b      	ldr	r3, [pc, #44]	; (8002108 <MX_USART1_UART_Init+0x4c>)
 80020dc:	2200      	movs	r2, #0
 80020de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020e0:	4b09      	ldr	r3, [pc, #36]	; (8002108 <MX_USART1_UART_Init+0x4c>)
 80020e2:	220c      	movs	r2, #12
 80020e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020e6:	4b08      	ldr	r3, [pc, #32]	; (8002108 <MX_USART1_UART_Init+0x4c>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020ec:	4b06      	ldr	r3, [pc, #24]	; (8002108 <MX_USART1_UART_Init+0x4c>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020f2:	4805      	ldr	r0, [pc, #20]	; (8002108 <MX_USART1_UART_Init+0x4c>)
 80020f4:	f001 f9e6 	bl	80034c4 <HAL_UART_Init>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80020fe:	f7ff fefc 	bl	8001efa <Error_Handler>
  }

}
 8002102:	bf00      	nop
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	20001ff8 	.word	0x20001ff8
 800210c:	40013800 	.word	0x40013800

08002110 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8002114:	4b11      	ldr	r3, [pc, #68]	; (800215c <MX_USART3_UART_Init+0x4c>)
 8002116:	4a12      	ldr	r2, [pc, #72]	; (8002160 <MX_USART3_UART_Init+0x50>)
 8002118:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800211a:	4b10      	ldr	r3, [pc, #64]	; (800215c <MX_USART3_UART_Init+0x4c>)
 800211c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002120:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002122:	4b0e      	ldr	r3, [pc, #56]	; (800215c <MX_USART3_UART_Init+0x4c>)
 8002124:	2200      	movs	r2, #0
 8002126:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002128:	4b0c      	ldr	r3, [pc, #48]	; (800215c <MX_USART3_UART_Init+0x4c>)
 800212a:	2200      	movs	r2, #0
 800212c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800212e:	4b0b      	ldr	r3, [pc, #44]	; (800215c <MX_USART3_UART_Init+0x4c>)
 8002130:	2200      	movs	r2, #0
 8002132:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002134:	4b09      	ldr	r3, [pc, #36]	; (800215c <MX_USART3_UART_Init+0x4c>)
 8002136:	220c      	movs	r2, #12
 8002138:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800213a:	4b08      	ldr	r3, [pc, #32]	; (800215c <MX_USART3_UART_Init+0x4c>)
 800213c:	2200      	movs	r2, #0
 800213e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002140:	4b06      	ldr	r3, [pc, #24]	; (800215c <MX_USART3_UART_Init+0x4c>)
 8002142:	2200      	movs	r2, #0
 8002144:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002146:	4805      	ldr	r0, [pc, #20]	; (800215c <MX_USART3_UART_Init+0x4c>)
 8002148:	f001 f9bc 	bl	80034c4 <HAL_UART_Init>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002152:	f7ff fed2 	bl	8001efa <Error_Handler>
  }

}
 8002156:	bf00      	nop
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	20002038 	.word	0x20002038
 8002160:	40004800 	.word	0x40004800

08002164 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b08c      	sub	sp, #48	; 0x30
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216c:	f107 031c 	add.w	r3, r7, #28
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	605a      	str	r2, [r3, #4]
 8002176:	609a      	str	r2, [r3, #8]
 8002178:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a45      	ldr	r2, [pc, #276]	; (8002294 <HAL_UART_MspInit+0x130>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d13a      	bne.n	80021fa <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002184:	4b44      	ldr	r3, [pc, #272]	; (8002298 <HAL_UART_MspInit+0x134>)
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	4a43      	ldr	r2, [pc, #268]	; (8002298 <HAL_UART_MspInit+0x134>)
 800218a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800218e:	6193      	str	r3, [r2, #24]
 8002190:	4b41      	ldr	r3, [pc, #260]	; (8002298 <HAL_UART_MspInit+0x134>)
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002198:	61bb      	str	r3, [r7, #24]
 800219a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219c:	4b3e      	ldr	r3, [pc, #248]	; (8002298 <HAL_UART_MspInit+0x134>)
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	4a3d      	ldr	r2, [pc, #244]	; (8002298 <HAL_UART_MspInit+0x134>)
 80021a2:	f043 0304 	orr.w	r3, r3, #4
 80021a6:	6193      	str	r3, [r2, #24]
 80021a8:	4b3b      	ldr	r3, [pc, #236]	; (8002298 <HAL_UART_MspInit+0x134>)
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	617b      	str	r3, [r7, #20]
 80021b2:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ba:	2302      	movs	r3, #2
 80021bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021be:	2303      	movs	r3, #3
 80021c0:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c2:	f107 031c 	add.w	r3, r7, #28
 80021c6:	4619      	mov	r1, r3
 80021c8:	4834      	ldr	r0, [pc, #208]	; (800229c <HAL_UART_MspInit+0x138>)
 80021ca:	f000 fb2d 	bl	8002828 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021d4:	2300      	movs	r3, #0
 80021d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021dc:	f107 031c 	add.w	r3, r7, #28
 80021e0:	4619      	mov	r1, r3
 80021e2:	482e      	ldr	r0, [pc, #184]	; (800229c <HAL_UART_MspInit+0x138>)
 80021e4:	f000 fb20 	bl	8002828 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80021e8:	2200      	movs	r2, #0
 80021ea:	2100      	movs	r1, #0
 80021ec:	2025      	movs	r0, #37	; 0x25
 80021ee:	f000 f9dc 	bl	80025aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80021f2:	2025      	movs	r0, #37	; 0x25
 80021f4:	f000 f9f5 	bl	80025e2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80021f8:	e048      	b.n	800228c <HAL_UART_MspInit+0x128>
  else if(uartHandle->Instance==USART3)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a28      	ldr	r2, [pc, #160]	; (80022a0 <HAL_UART_MspInit+0x13c>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d143      	bne.n	800228c <HAL_UART_MspInit+0x128>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002204:	4b24      	ldr	r3, [pc, #144]	; (8002298 <HAL_UART_MspInit+0x134>)
 8002206:	69db      	ldr	r3, [r3, #28]
 8002208:	4a23      	ldr	r2, [pc, #140]	; (8002298 <HAL_UART_MspInit+0x134>)
 800220a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800220e:	61d3      	str	r3, [r2, #28]
 8002210:	4b21      	ldr	r3, [pc, #132]	; (8002298 <HAL_UART_MspInit+0x134>)
 8002212:	69db      	ldr	r3, [r3, #28]
 8002214:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002218:	613b      	str	r3, [r7, #16]
 800221a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800221c:	4b1e      	ldr	r3, [pc, #120]	; (8002298 <HAL_UART_MspInit+0x134>)
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	4a1d      	ldr	r2, [pc, #116]	; (8002298 <HAL_UART_MspInit+0x134>)
 8002222:	f043 0310 	orr.w	r3, r3, #16
 8002226:	6193      	str	r3, [r2, #24]
 8002228:	4b1b      	ldr	r3, [pc, #108]	; (8002298 <HAL_UART_MspInit+0x134>)
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	f003 0310 	and.w	r3, r3, #16
 8002230:	60fb      	str	r3, [r7, #12]
 8002232:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002234:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002238:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223a:	2302      	movs	r3, #2
 800223c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800223e:	2303      	movs	r3, #3
 8002240:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002242:	f107 031c 	add.w	r3, r7, #28
 8002246:	4619      	mov	r1, r3
 8002248:	4816      	ldr	r0, [pc, #88]	; (80022a4 <HAL_UART_MspInit+0x140>)
 800224a:	f000 faed 	bl	8002828 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800224e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002252:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002254:	2300      	movs	r3, #0
 8002256:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002258:	2300      	movs	r3, #0
 800225a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800225c:	f107 031c 	add.w	r3, r7, #28
 8002260:	4619      	mov	r1, r3
 8002262:	4810      	ldr	r0, [pc, #64]	; (80022a4 <HAL_UART_MspInit+0x140>)
 8002264:	f000 fae0 	bl	8002828 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8002268:	4b0f      	ldr	r3, [pc, #60]	; (80022a8 <HAL_UART_MspInit+0x144>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800226e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002270:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002274:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002278:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800227c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800227e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002280:	f043 0310 	orr.w	r3, r3, #16
 8002284:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002286:	4a08      	ldr	r2, [pc, #32]	; (80022a8 <HAL_UART_MspInit+0x144>)
 8002288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800228a:	6053      	str	r3, [r2, #4]
}
 800228c:	bf00      	nop
 800228e:	3730      	adds	r7, #48	; 0x30
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40013800 	.word	0x40013800
 8002298:	40021000 	.word	0x40021000
 800229c:	40010800 	.word	0x40010800
 80022a0:	40004800 	.word	0x40004800
 80022a4:	40011000 	.word	0x40011000
 80022a8:	40010000 	.word	0x40010000

080022ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80022ac:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80022ae:	e003      	b.n	80022b8 <LoopCopyDataInit>

080022b0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80022b0:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80022b2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80022b4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80022b6:	3104      	adds	r1, #4

080022b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80022b8:	480a      	ldr	r0, [pc, #40]	; (80022e4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80022ba:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80022bc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80022be:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80022c0:	d3f6      	bcc.n	80022b0 <CopyDataInit>
  ldr r2, =_sbss
 80022c2:	4a0a      	ldr	r2, [pc, #40]	; (80022ec <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80022c4:	e002      	b.n	80022cc <LoopFillZerobss>

080022c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80022c6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80022c8:	f842 3b04 	str.w	r3, [r2], #4

080022cc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80022cc:	4b08      	ldr	r3, [pc, #32]	; (80022f0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80022ce:	429a      	cmp	r2, r3
  bcc FillZerobss
 80022d0:	d3f9      	bcc.n	80022c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80022d2:	f7ff feed 	bl	80020b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022d6:	f001 fdd5 	bl	8003e84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022da:	f7ff fc11 	bl	8001b00 <main>
  bx lr
 80022de:	4770      	bx	lr
  ldr r3, =_sidata
 80022e0:	080053c8 	.word	0x080053c8
  ldr r0, =_sdata
 80022e4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80022e8:	20000178 	.word	0x20000178
  ldr r2, =_sbss
 80022ec:	20000178 	.word	0x20000178
  ldr r3, = _ebss
 80022f0:	2000207c 	.word	0x2000207c

080022f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022f4:	e7fe      	b.n	80022f4 <ADC1_2_IRQHandler>
	...

080022f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022fc:	4b08      	ldr	r3, [pc, #32]	; (8002320 <HAL_Init+0x28>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a07      	ldr	r2, [pc, #28]	; (8002320 <HAL_Init+0x28>)
 8002302:	f043 0310 	orr.w	r3, r3, #16
 8002306:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002308:	2003      	movs	r0, #3
 800230a:	f000 f943 	bl	8002594 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800230e:	2000      	movs	r0, #0
 8002310:	f000 f808 	bl	8002324 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002314:	f7ff fdf6 	bl	8001f04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	40022000 	.word	0x40022000

08002324 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800232c:	4b12      	ldr	r3, [pc, #72]	; (8002378 <HAL_InitTick+0x54>)
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	4b12      	ldr	r3, [pc, #72]	; (800237c <HAL_InitTick+0x58>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	4619      	mov	r1, r3
 8002336:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800233a:	fbb3 f3f1 	udiv	r3, r3, r1
 800233e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002342:	4618      	mov	r0, r3
 8002344:	f000 f95b 	bl	80025fe <HAL_SYSTICK_Config>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e00e      	b.n	8002370 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2b0f      	cmp	r3, #15
 8002356:	d80a      	bhi.n	800236e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002358:	2200      	movs	r2, #0
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	f04f 30ff 	mov.w	r0, #4294967295
 8002360:	f000 f923 	bl	80025aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002364:	4a06      	ldr	r2, [pc, #24]	; (8002380 <HAL_InitTick+0x5c>)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800236a:	2300      	movs	r3, #0
 800236c:	e000      	b.n	8002370 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
}
 8002370:	4618      	mov	r0, r3
 8002372:	3708      	adds	r7, #8
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	20000108 	.word	0x20000108
 800237c:	20000110 	.word	0x20000110
 8002380:	2000010c 	.word	0x2000010c

08002384 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002388:	4b05      	ldr	r3, [pc, #20]	; (80023a0 <HAL_IncTick+0x1c>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	461a      	mov	r2, r3
 800238e:	4b05      	ldr	r3, [pc, #20]	; (80023a4 <HAL_IncTick+0x20>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4413      	add	r3, r2
 8002394:	4a03      	ldr	r2, [pc, #12]	; (80023a4 <HAL_IncTick+0x20>)
 8002396:	6013      	str	r3, [r2, #0]
}
 8002398:	bf00      	nop
 800239a:	46bd      	mov	sp, r7
 800239c:	bc80      	pop	{r7}
 800239e:	4770      	bx	lr
 80023a0:	20000110 	.word	0x20000110
 80023a4:	20002078 	.word	0x20002078

080023a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  return uwTick;
 80023ac:	4b02      	ldr	r3, [pc, #8]	; (80023b8 <HAL_GetTick+0x10>)
 80023ae:	681b      	ldr	r3, [r3, #0]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bc80      	pop	{r7}
 80023b6:	4770      	bx	lr
 80023b8:	20002078 	.word	0x20002078

080023bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023c4:	f7ff fff0 	bl	80023a8 <HAL_GetTick>
 80023c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d4:	d005      	beq.n	80023e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023d6:	4b0a      	ldr	r3, [pc, #40]	; (8002400 <HAL_Delay+0x44>)
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	461a      	mov	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	4413      	add	r3, r2
 80023e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023e2:	bf00      	nop
 80023e4:	f7ff ffe0 	bl	80023a8 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d8f7      	bhi.n	80023e4 <HAL_Delay+0x28>
  {
  }
}
 80023f4:	bf00      	nop
 80023f6:	bf00      	nop
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	20000110 	.word	0x20000110

08002404 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f003 0307 	and.w	r3, r3, #7
 8002412:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002414:	4b0c      	ldr	r3, [pc, #48]	; (8002448 <NVIC_SetPriorityGrouping+0x44>)
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800241a:	68ba      	ldr	r2, [r7, #8]
 800241c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002420:	4013      	ands	r3, r2
 8002422:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800242c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002430:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002434:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002436:	4a04      	ldr	r2, [pc, #16]	; (8002448 <NVIC_SetPriorityGrouping+0x44>)
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	60d3      	str	r3, [r2, #12]
}
 800243c:	bf00      	nop
 800243e:	3714      	adds	r7, #20
 8002440:	46bd      	mov	sp, r7
 8002442:	bc80      	pop	{r7}
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	e000ed00 	.word	0xe000ed00

0800244c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002450:	4b04      	ldr	r3, [pc, #16]	; (8002464 <NVIC_GetPriorityGrouping+0x18>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	0a1b      	lsrs	r3, r3, #8
 8002456:	f003 0307 	and.w	r3, r3, #7
}
 800245a:	4618      	mov	r0, r3
 800245c:	46bd      	mov	sp, r7
 800245e:	bc80      	pop	{r7}
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	e000ed00 	.word	0xe000ed00

08002468 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	4603      	mov	r3, r0
 8002470:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002472:	79fb      	ldrb	r3, [r7, #7]
 8002474:	f003 021f 	and.w	r2, r3, #31
 8002478:	4906      	ldr	r1, [pc, #24]	; (8002494 <NVIC_EnableIRQ+0x2c>)
 800247a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247e:	095b      	lsrs	r3, r3, #5
 8002480:	2001      	movs	r0, #1
 8002482:	fa00 f202 	lsl.w	r2, r0, r2
 8002486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800248a:	bf00      	nop
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	bc80      	pop	{r7}
 8002492:	4770      	bx	lr
 8002494:	e000e100 	.word	0xe000e100

08002498 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	4603      	mov	r3, r0
 80024a0:	6039      	str	r1, [r7, #0]
 80024a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80024a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	da0b      	bge.n	80024c4 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	b2da      	uxtb	r2, r3
 80024b0:	490c      	ldr	r1, [pc, #48]	; (80024e4 <NVIC_SetPriority+0x4c>)
 80024b2:	79fb      	ldrb	r3, [r7, #7]
 80024b4:	f003 030f 	and.w	r3, r3, #15
 80024b8:	3b04      	subs	r3, #4
 80024ba:	0112      	lsls	r2, r2, #4
 80024bc:	b2d2      	uxtb	r2, r2
 80024be:	440b      	add	r3, r1
 80024c0:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024c2:	e009      	b.n	80024d8 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	b2da      	uxtb	r2, r3
 80024c8:	4907      	ldr	r1, [pc, #28]	; (80024e8 <NVIC_SetPriority+0x50>)
 80024ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ce:	0112      	lsls	r2, r2, #4
 80024d0:	b2d2      	uxtb	r2, r2
 80024d2:	440b      	add	r3, r1
 80024d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80024d8:	bf00      	nop
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	bc80      	pop	{r7}
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	e000ed00 	.word	0xe000ed00
 80024e8:	e000e100 	.word	0xe000e100

080024ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b089      	sub	sp, #36	; 0x24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f003 0307 	and.w	r3, r3, #7
 80024fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	f1c3 0307 	rsb	r3, r3, #7
 8002506:	2b04      	cmp	r3, #4
 8002508:	bf28      	it	cs
 800250a:	2304      	movcs	r3, #4
 800250c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	3304      	adds	r3, #4
 8002512:	2b06      	cmp	r3, #6
 8002514:	d902      	bls.n	800251c <NVIC_EncodePriority+0x30>
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	3b03      	subs	r3, #3
 800251a:	e000      	b.n	800251e <NVIC_EncodePriority+0x32>
 800251c:	2300      	movs	r3, #0
 800251e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002520:	f04f 32ff 	mov.w	r2, #4294967295
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	43da      	mvns	r2, r3
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	401a      	ands	r2, r3
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002534:	f04f 31ff 	mov.w	r1, #4294967295
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	fa01 f303 	lsl.w	r3, r1, r3
 800253e:	43d9      	mvns	r1, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002544:	4313      	orrs	r3, r2
         );
}
 8002546:	4618      	mov	r0, r3
 8002548:	3724      	adds	r7, #36	; 0x24
 800254a:	46bd      	mov	sp, r7
 800254c:	bc80      	pop	{r7}
 800254e:	4770      	bx	lr

08002550 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3b01      	subs	r3, #1
 800255c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002560:	d301      	bcc.n	8002566 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002562:	2301      	movs	r3, #1
 8002564:	e00f      	b.n	8002586 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002566:	4a0a      	ldr	r2, [pc, #40]	; (8002590 <SysTick_Config+0x40>)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3b01      	subs	r3, #1
 800256c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800256e:	210f      	movs	r1, #15
 8002570:	f04f 30ff 	mov.w	r0, #4294967295
 8002574:	f7ff ff90 	bl	8002498 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002578:	4b05      	ldr	r3, [pc, #20]	; (8002590 <SysTick_Config+0x40>)
 800257a:	2200      	movs	r2, #0
 800257c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800257e:	4b04      	ldr	r3, [pc, #16]	; (8002590 <SysTick_Config+0x40>)
 8002580:	2207      	movs	r2, #7
 8002582:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	e000e010 	.word	0xe000e010

08002594 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f7ff ff31 	bl	8002404 <NVIC_SetPriorityGrouping>
}
 80025a2:	bf00      	nop
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b086      	sub	sp, #24
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	4603      	mov	r3, r0
 80025b2:	60b9      	str	r1, [r7, #8]
 80025b4:	607a      	str	r2, [r7, #4]
 80025b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025b8:	2300      	movs	r3, #0
 80025ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025bc:	f7ff ff46 	bl	800244c <NVIC_GetPriorityGrouping>
 80025c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	68b9      	ldr	r1, [r7, #8]
 80025c6:	6978      	ldr	r0, [r7, #20]
 80025c8:	f7ff ff90 	bl	80024ec <NVIC_EncodePriority>
 80025cc:	4602      	mov	r2, r0
 80025ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025d2:	4611      	mov	r1, r2
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff ff5f 	bl	8002498 <NVIC_SetPriority>
}
 80025da:	bf00      	nop
 80025dc:	3718      	adds	r7, #24
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b082      	sub	sp, #8
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	4603      	mov	r3, r0
 80025ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff ff39 	bl	8002468 <NVIC_EnableIRQ>
}
 80025f6:	bf00      	nop
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b082      	sub	sp, #8
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7ff ffa2 	bl	8002550 <SysTick_Config>
 800260c:	4603      	mov	r3, r0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
	...

08002618 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002620:	2300      	movs	r3, #0
 8002622:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800262a:	2b02      	cmp	r3, #2
 800262c:	d005      	beq.n	800263a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2204      	movs	r2, #4
 8002632:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	73fb      	strb	r3, [r7, #15]
 8002638:	e0d6      	b.n	80027e8 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 020e 	bic.w	r2, r2, #14
 8002648:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f022 0201 	bic.w	r2, r2, #1
 8002658:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	461a      	mov	r2, r3
 8002660:	4b64      	ldr	r3, [pc, #400]	; (80027f4 <HAL_DMA_Abort_IT+0x1dc>)
 8002662:	429a      	cmp	r2, r3
 8002664:	d958      	bls.n	8002718 <HAL_DMA_Abort_IT+0x100>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a63      	ldr	r2, [pc, #396]	; (80027f8 <HAL_DMA_Abort_IT+0x1e0>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d04f      	beq.n	8002710 <HAL_DMA_Abort_IT+0xf8>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a61      	ldr	r2, [pc, #388]	; (80027fc <HAL_DMA_Abort_IT+0x1e4>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d048      	beq.n	800270c <HAL_DMA_Abort_IT+0xf4>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a60      	ldr	r2, [pc, #384]	; (8002800 <HAL_DMA_Abort_IT+0x1e8>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d040      	beq.n	8002706 <HAL_DMA_Abort_IT+0xee>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a5e      	ldr	r2, [pc, #376]	; (8002804 <HAL_DMA_Abort_IT+0x1ec>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d038      	beq.n	8002700 <HAL_DMA_Abort_IT+0xe8>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a5d      	ldr	r2, [pc, #372]	; (8002808 <HAL_DMA_Abort_IT+0x1f0>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d030      	beq.n	80026fa <HAL_DMA_Abort_IT+0xe2>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a5b      	ldr	r2, [pc, #364]	; (800280c <HAL_DMA_Abort_IT+0x1f4>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d028      	beq.n	80026f4 <HAL_DMA_Abort_IT+0xdc>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a53      	ldr	r2, [pc, #332]	; (80027f4 <HAL_DMA_Abort_IT+0x1dc>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d020      	beq.n	80026ee <HAL_DMA_Abort_IT+0xd6>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a57      	ldr	r2, [pc, #348]	; (8002810 <HAL_DMA_Abort_IT+0x1f8>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d019      	beq.n	80026ea <HAL_DMA_Abort_IT+0xd2>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a56      	ldr	r2, [pc, #344]	; (8002814 <HAL_DMA_Abort_IT+0x1fc>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d012      	beq.n	80026e6 <HAL_DMA_Abort_IT+0xce>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a54      	ldr	r2, [pc, #336]	; (8002818 <HAL_DMA_Abort_IT+0x200>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d00a      	beq.n	80026e0 <HAL_DMA_Abort_IT+0xc8>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a53      	ldr	r2, [pc, #332]	; (800281c <HAL_DMA_Abort_IT+0x204>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d102      	bne.n	80026da <HAL_DMA_Abort_IT+0xc2>
 80026d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026d8:	e01b      	b.n	8002712 <HAL_DMA_Abort_IT+0xfa>
 80026da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026de:	e018      	b.n	8002712 <HAL_DMA_Abort_IT+0xfa>
 80026e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026e4:	e015      	b.n	8002712 <HAL_DMA_Abort_IT+0xfa>
 80026e6:	2310      	movs	r3, #16
 80026e8:	e013      	b.n	8002712 <HAL_DMA_Abort_IT+0xfa>
 80026ea:	2301      	movs	r3, #1
 80026ec:	e011      	b.n	8002712 <HAL_DMA_Abort_IT+0xfa>
 80026ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026f2:	e00e      	b.n	8002712 <HAL_DMA_Abort_IT+0xfa>
 80026f4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80026f8:	e00b      	b.n	8002712 <HAL_DMA_Abort_IT+0xfa>
 80026fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026fe:	e008      	b.n	8002712 <HAL_DMA_Abort_IT+0xfa>
 8002700:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002704:	e005      	b.n	8002712 <HAL_DMA_Abort_IT+0xfa>
 8002706:	f44f 7380 	mov.w	r3, #256	; 0x100
 800270a:	e002      	b.n	8002712 <HAL_DMA_Abort_IT+0xfa>
 800270c:	2310      	movs	r3, #16
 800270e:	e000      	b.n	8002712 <HAL_DMA_Abort_IT+0xfa>
 8002710:	2301      	movs	r3, #1
 8002712:	4a43      	ldr	r2, [pc, #268]	; (8002820 <HAL_DMA_Abort_IT+0x208>)
 8002714:	6053      	str	r3, [r2, #4]
 8002716:	e057      	b.n	80027c8 <HAL_DMA_Abort_IT+0x1b0>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a36      	ldr	r2, [pc, #216]	; (80027f8 <HAL_DMA_Abort_IT+0x1e0>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d04f      	beq.n	80027c2 <HAL_DMA_Abort_IT+0x1aa>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a35      	ldr	r2, [pc, #212]	; (80027fc <HAL_DMA_Abort_IT+0x1e4>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d048      	beq.n	80027be <HAL_DMA_Abort_IT+0x1a6>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a33      	ldr	r2, [pc, #204]	; (8002800 <HAL_DMA_Abort_IT+0x1e8>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d040      	beq.n	80027b8 <HAL_DMA_Abort_IT+0x1a0>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a32      	ldr	r2, [pc, #200]	; (8002804 <HAL_DMA_Abort_IT+0x1ec>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d038      	beq.n	80027b2 <HAL_DMA_Abort_IT+0x19a>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a30      	ldr	r2, [pc, #192]	; (8002808 <HAL_DMA_Abort_IT+0x1f0>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d030      	beq.n	80027ac <HAL_DMA_Abort_IT+0x194>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a2f      	ldr	r2, [pc, #188]	; (800280c <HAL_DMA_Abort_IT+0x1f4>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d028      	beq.n	80027a6 <HAL_DMA_Abort_IT+0x18e>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a26      	ldr	r2, [pc, #152]	; (80027f4 <HAL_DMA_Abort_IT+0x1dc>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d020      	beq.n	80027a0 <HAL_DMA_Abort_IT+0x188>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a2b      	ldr	r2, [pc, #172]	; (8002810 <HAL_DMA_Abort_IT+0x1f8>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d019      	beq.n	800279c <HAL_DMA_Abort_IT+0x184>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a29      	ldr	r2, [pc, #164]	; (8002814 <HAL_DMA_Abort_IT+0x1fc>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d012      	beq.n	8002798 <HAL_DMA_Abort_IT+0x180>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a28      	ldr	r2, [pc, #160]	; (8002818 <HAL_DMA_Abort_IT+0x200>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d00a      	beq.n	8002792 <HAL_DMA_Abort_IT+0x17a>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a26      	ldr	r2, [pc, #152]	; (800281c <HAL_DMA_Abort_IT+0x204>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d102      	bne.n	800278c <HAL_DMA_Abort_IT+0x174>
 8002786:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800278a:	e01b      	b.n	80027c4 <HAL_DMA_Abort_IT+0x1ac>
 800278c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002790:	e018      	b.n	80027c4 <HAL_DMA_Abort_IT+0x1ac>
 8002792:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002796:	e015      	b.n	80027c4 <HAL_DMA_Abort_IT+0x1ac>
 8002798:	2310      	movs	r3, #16
 800279a:	e013      	b.n	80027c4 <HAL_DMA_Abort_IT+0x1ac>
 800279c:	2301      	movs	r3, #1
 800279e:	e011      	b.n	80027c4 <HAL_DMA_Abort_IT+0x1ac>
 80027a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027a4:	e00e      	b.n	80027c4 <HAL_DMA_Abort_IT+0x1ac>
 80027a6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80027aa:	e00b      	b.n	80027c4 <HAL_DMA_Abort_IT+0x1ac>
 80027ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027b0:	e008      	b.n	80027c4 <HAL_DMA_Abort_IT+0x1ac>
 80027b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027b6:	e005      	b.n	80027c4 <HAL_DMA_Abort_IT+0x1ac>
 80027b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027bc:	e002      	b.n	80027c4 <HAL_DMA_Abort_IT+0x1ac>
 80027be:	2310      	movs	r3, #16
 80027c0:	e000      	b.n	80027c4 <HAL_DMA_Abort_IT+0x1ac>
 80027c2:	2301      	movs	r3, #1
 80027c4:	4a17      	ldr	r2, [pc, #92]	; (8002824 <HAL_DMA_Abort_IT+0x20c>)
 80027c6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d003      	beq.n	80027e8 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	4798      	blx	r3
    } 
  }
  return status;
 80027e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	40020080 	.word	0x40020080
 80027f8:	40020008 	.word	0x40020008
 80027fc:	4002001c 	.word	0x4002001c
 8002800:	40020030 	.word	0x40020030
 8002804:	40020044 	.word	0x40020044
 8002808:	40020058 	.word	0x40020058
 800280c:	4002006c 	.word	0x4002006c
 8002810:	40020408 	.word	0x40020408
 8002814:	4002041c 	.word	0x4002041c
 8002818:	40020430 	.word	0x40020430
 800281c:	40020444 	.word	0x40020444
 8002820:	40020400 	.word	0x40020400
 8002824:	40020000 	.word	0x40020000

08002828 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002828:	b480      	push	{r7}
 800282a:	b08b      	sub	sp, #44	; 0x2c
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002832:	2300      	movs	r3, #0
 8002834:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8002836:	2300      	movs	r3, #0
 8002838:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 800283a:	2300      	movs	r3, #0
 800283c:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 800283e:	2300      	movs	r3, #0
 8002840:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8002842:	2300      	movs	r3, #0
 8002844:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8002846:	2300      	movs	r3, #0
 8002848:	627b      	str	r3, [r7, #36]	; 0x24
 800284a:	e179      	b.n	8002b40 <HAL_GPIO_Init+0x318>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 800284c:	2201      	movs	r2, #1
 800284e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	69fa      	ldr	r2, [r7, #28]
 800285c:	4013      	ands	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	429a      	cmp	r2, r3
 8002866:	f040 8168 	bne.w	8002b3a <HAL_GPIO_Init+0x312>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	4a96      	ldr	r2, [pc, #600]	; (8002ac8 <HAL_GPIO_Init+0x2a0>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d05e      	beq.n	8002932 <HAL_GPIO_Init+0x10a>
 8002874:	4a94      	ldr	r2, [pc, #592]	; (8002ac8 <HAL_GPIO_Init+0x2a0>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d875      	bhi.n	8002966 <HAL_GPIO_Init+0x13e>
 800287a:	4a94      	ldr	r2, [pc, #592]	; (8002acc <HAL_GPIO_Init+0x2a4>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d058      	beq.n	8002932 <HAL_GPIO_Init+0x10a>
 8002880:	4a92      	ldr	r2, [pc, #584]	; (8002acc <HAL_GPIO_Init+0x2a4>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d86f      	bhi.n	8002966 <HAL_GPIO_Init+0x13e>
 8002886:	4a92      	ldr	r2, [pc, #584]	; (8002ad0 <HAL_GPIO_Init+0x2a8>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d052      	beq.n	8002932 <HAL_GPIO_Init+0x10a>
 800288c:	4a90      	ldr	r2, [pc, #576]	; (8002ad0 <HAL_GPIO_Init+0x2a8>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d869      	bhi.n	8002966 <HAL_GPIO_Init+0x13e>
 8002892:	4a90      	ldr	r2, [pc, #576]	; (8002ad4 <HAL_GPIO_Init+0x2ac>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d04c      	beq.n	8002932 <HAL_GPIO_Init+0x10a>
 8002898:	4a8e      	ldr	r2, [pc, #568]	; (8002ad4 <HAL_GPIO_Init+0x2ac>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d863      	bhi.n	8002966 <HAL_GPIO_Init+0x13e>
 800289e:	4a8e      	ldr	r2, [pc, #568]	; (8002ad8 <HAL_GPIO_Init+0x2b0>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d046      	beq.n	8002932 <HAL_GPIO_Init+0x10a>
 80028a4:	4a8c      	ldr	r2, [pc, #560]	; (8002ad8 <HAL_GPIO_Init+0x2b0>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d85d      	bhi.n	8002966 <HAL_GPIO_Init+0x13e>
 80028aa:	2b12      	cmp	r3, #18
 80028ac:	d82a      	bhi.n	8002904 <HAL_GPIO_Init+0xdc>
 80028ae:	2b12      	cmp	r3, #18
 80028b0:	d859      	bhi.n	8002966 <HAL_GPIO_Init+0x13e>
 80028b2:	a201      	add	r2, pc, #4	; (adr r2, 80028b8 <HAL_GPIO_Init+0x90>)
 80028b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028b8:	08002933 	.word	0x08002933
 80028bc:	0800290d 	.word	0x0800290d
 80028c0:	0800291f 	.word	0x0800291f
 80028c4:	08002961 	.word	0x08002961
 80028c8:	08002967 	.word	0x08002967
 80028cc:	08002967 	.word	0x08002967
 80028d0:	08002967 	.word	0x08002967
 80028d4:	08002967 	.word	0x08002967
 80028d8:	08002967 	.word	0x08002967
 80028dc:	08002967 	.word	0x08002967
 80028e0:	08002967 	.word	0x08002967
 80028e4:	08002967 	.word	0x08002967
 80028e8:	08002967 	.word	0x08002967
 80028ec:	08002967 	.word	0x08002967
 80028f0:	08002967 	.word	0x08002967
 80028f4:	08002967 	.word	0x08002967
 80028f8:	08002967 	.word	0x08002967
 80028fc:	08002915 	.word	0x08002915
 8002900:	08002929 	.word	0x08002929
 8002904:	4a75      	ldr	r2, [pc, #468]	; (8002adc <HAL_GPIO_Init+0x2b4>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d013      	beq.n	8002932 <HAL_GPIO_Init+0x10a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800290a:	e02c      	b.n	8002966 <HAL_GPIO_Init+0x13e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	623b      	str	r3, [r7, #32]
          break;
 8002912:	e029      	b.n	8002968 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	3304      	adds	r3, #4
 800291a:	623b      	str	r3, [r7, #32]
          break;
 800291c:	e024      	b.n	8002968 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	3308      	adds	r3, #8
 8002924:	623b      	str	r3, [r7, #32]
          break;
 8002926:	e01f      	b.n	8002968 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	330c      	adds	r3, #12
 800292e:	623b      	str	r3, [r7, #32]
          break;
 8002930:	e01a      	b.n	8002968 <HAL_GPIO_Init+0x140>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d102      	bne.n	8002940 <HAL_GPIO_Init+0x118>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800293a:	2304      	movs	r3, #4
 800293c:	623b      	str	r3, [r7, #32]
          break;
 800293e:	e013      	b.n	8002968 <HAL_GPIO_Init+0x140>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d105      	bne.n	8002954 <HAL_GPIO_Init+0x12c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002948:	2308      	movs	r3, #8
 800294a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	69fa      	ldr	r2, [r7, #28]
 8002950:	611a      	str	r2, [r3, #16]
          break;
 8002952:	e009      	b.n	8002968 <HAL_GPIO_Init+0x140>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002954:	2308      	movs	r3, #8
 8002956:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	69fa      	ldr	r2, [r7, #28]
 800295c:	615a      	str	r2, [r3, #20]
          break;
 800295e:	e003      	b.n	8002968 <HAL_GPIO_Init+0x140>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002960:	2300      	movs	r3, #0
 8002962:	623b      	str	r3, [r7, #32]
          break;
 8002964:	e000      	b.n	8002968 <HAL_GPIO_Init+0x140>
          break;
 8002966:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	2bff      	cmp	r3, #255	; 0xff
 800296c:	d801      	bhi.n	8002972 <HAL_GPIO_Init+0x14a>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	e001      	b.n	8002976 <HAL_GPIO_Init+0x14e>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	3304      	adds	r3, #4
 8002976:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	2bff      	cmp	r3, #255	; 0xff
 800297c:	d802      	bhi.n	8002984 <HAL_GPIO_Init+0x15c>
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	e002      	b.n	800298a <HAL_GPIO_Init+0x162>
 8002984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002986:	3b08      	subs	r3, #8
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	210f      	movs	r1, #15
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	fa01 f303 	lsl.w	r3, r1, r3
 8002998:	43db      	mvns	r3, r3
 800299a:	401a      	ands	r2, r3
 800299c:	6a39      	ldr	r1, [r7, #32]
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	fa01 f303 	lsl.w	r3, r1, r3
 80029a4:	431a      	orrs	r2, r3
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f000 80c1 	beq.w	8002b3a <HAL_GPIO_Init+0x312>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80029b8:	4b49      	ldr	r3, [pc, #292]	; (8002ae0 <HAL_GPIO_Init+0x2b8>)
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	4a48      	ldr	r2, [pc, #288]	; (8002ae0 <HAL_GPIO_Init+0x2b8>)
 80029be:	f043 0301 	orr.w	r3, r3, #1
 80029c2:	6193      	str	r3, [r2, #24]
 80029c4:	4b46      	ldr	r3, [pc, #280]	; (8002ae0 <HAL_GPIO_Init+0x2b8>)
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	60bb      	str	r3, [r7, #8]
 80029ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 80029d0:	4a44      	ldr	r2, [pc, #272]	; (8002ae4 <HAL_GPIO_Init+0x2bc>)
 80029d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d4:	089b      	lsrs	r3, r3, #2
 80029d6:	3302      	adds	r3, #2
 80029d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029dc:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80029de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e0:	f003 0303 	and.w	r3, r3, #3
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	220f      	movs	r2, #15
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	43db      	mvns	r3, r3
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	4013      	ands	r3, r2
 80029f2:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a3c      	ldr	r2, [pc, #240]	; (8002ae8 <HAL_GPIO_Init+0x2c0>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d01f      	beq.n	8002a3c <HAL_GPIO_Init+0x214>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a3b      	ldr	r2, [pc, #236]	; (8002aec <HAL_GPIO_Init+0x2c4>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d019      	beq.n	8002a38 <HAL_GPIO_Init+0x210>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a3a      	ldr	r2, [pc, #232]	; (8002af0 <HAL_GPIO_Init+0x2c8>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d013      	beq.n	8002a34 <HAL_GPIO_Init+0x20c>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a39      	ldr	r2, [pc, #228]	; (8002af4 <HAL_GPIO_Init+0x2cc>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d00d      	beq.n	8002a30 <HAL_GPIO_Init+0x208>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a38      	ldr	r2, [pc, #224]	; (8002af8 <HAL_GPIO_Init+0x2d0>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d007      	beq.n	8002a2c <HAL_GPIO_Init+0x204>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a37      	ldr	r2, [pc, #220]	; (8002afc <HAL_GPIO_Init+0x2d4>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d101      	bne.n	8002a28 <HAL_GPIO_Init+0x200>
 8002a24:	2305      	movs	r3, #5
 8002a26:	e00a      	b.n	8002a3e <HAL_GPIO_Init+0x216>
 8002a28:	2306      	movs	r3, #6
 8002a2a:	e008      	b.n	8002a3e <HAL_GPIO_Init+0x216>
 8002a2c:	2304      	movs	r3, #4
 8002a2e:	e006      	b.n	8002a3e <HAL_GPIO_Init+0x216>
 8002a30:	2303      	movs	r3, #3
 8002a32:	e004      	b.n	8002a3e <HAL_GPIO_Init+0x216>
 8002a34:	2302      	movs	r3, #2
 8002a36:	e002      	b.n	8002a3e <HAL_GPIO_Init+0x216>
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e000      	b.n	8002a3e <HAL_GPIO_Init+0x216>
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a40:	f002 0203 	and.w	r2, r2, #3
 8002a44:	0092      	lsls	r2, r2, #2
 8002a46:	4093      	lsls	r3, r2
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8002a4e:	4925      	ldr	r1, [pc, #148]	; (8002ae4 <HAL_GPIO_Init+0x2bc>)
 8002a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a52:	089b      	lsrs	r3, r3, #2
 8002a54:	3302      	adds	r3, #2
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d006      	beq.n	8002a76 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a68:	4b25      	ldr	r3, [pc, #148]	; (8002b00 <HAL_GPIO_Init+0x2d8>)
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	4924      	ldr	r1, [pc, #144]	; (8002b00 <HAL_GPIO_Init+0x2d8>)
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	600b      	str	r3, [r1, #0]
 8002a74:	e006      	b.n	8002a84 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a76:	4b22      	ldr	r3, [pc, #136]	; (8002b00 <HAL_GPIO_Init+0x2d8>)
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	4920      	ldr	r1, [pc, #128]	; (8002b00 <HAL_GPIO_Init+0x2d8>)
 8002a80:	4013      	ands	r3, r2
 8002a82:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d006      	beq.n	8002a9e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a90:	4b1b      	ldr	r3, [pc, #108]	; (8002b00 <HAL_GPIO_Init+0x2d8>)
 8002a92:	685a      	ldr	r2, [r3, #4]
 8002a94:	491a      	ldr	r1, [pc, #104]	; (8002b00 <HAL_GPIO_Init+0x2d8>)
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	604b      	str	r3, [r1, #4]
 8002a9c:	e006      	b.n	8002aac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a9e:	4b18      	ldr	r3, [pc, #96]	; (8002b00 <HAL_GPIO_Init+0x2d8>)
 8002aa0:	685a      	ldr	r2, [r3, #4]
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	4916      	ldr	r1, [pc, #88]	; (8002b00 <HAL_GPIO_Init+0x2d8>)
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d025      	beq.n	8002b04 <HAL_GPIO_Init+0x2dc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ab8:	4b11      	ldr	r3, [pc, #68]	; (8002b00 <HAL_GPIO_Init+0x2d8>)
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	4910      	ldr	r1, [pc, #64]	; (8002b00 <HAL_GPIO_Init+0x2d8>)
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	608b      	str	r3, [r1, #8]
 8002ac4:	e025      	b.n	8002b12 <HAL_GPIO_Init+0x2ea>
 8002ac6:	bf00      	nop
 8002ac8:	10320000 	.word	0x10320000
 8002acc:	10310000 	.word	0x10310000
 8002ad0:	10220000 	.word	0x10220000
 8002ad4:	10210000 	.word	0x10210000
 8002ad8:	10120000 	.word	0x10120000
 8002adc:	10110000 	.word	0x10110000
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	40010000 	.word	0x40010000
 8002ae8:	40010800 	.word	0x40010800
 8002aec:	40010c00 	.word	0x40010c00
 8002af0:	40011000 	.word	0x40011000
 8002af4:	40011400 	.word	0x40011400
 8002af8:	40011800 	.word	0x40011800
 8002afc:	40011c00 	.word	0x40011c00
 8002b00:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b04:	4b13      	ldr	r3, [pc, #76]	; (8002b54 <HAL_GPIO_Init+0x32c>)
 8002b06:	689a      	ldr	r2, [r3, #8]
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	43db      	mvns	r3, r3
 8002b0c:	4911      	ldr	r1, [pc, #68]	; (8002b54 <HAL_GPIO_Init+0x32c>)
 8002b0e:	4013      	ands	r3, r2
 8002b10:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d006      	beq.n	8002b2c <HAL_GPIO_Init+0x304>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b1e:	4b0d      	ldr	r3, [pc, #52]	; (8002b54 <HAL_GPIO_Init+0x32c>)
 8002b20:	68da      	ldr	r2, [r3, #12]
 8002b22:	490c      	ldr	r1, [pc, #48]	; (8002b54 <HAL_GPIO_Init+0x32c>)
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	60cb      	str	r3, [r1, #12]
 8002b2a:	e006      	b.n	8002b3a <HAL_GPIO_Init+0x312>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b2c:	4b09      	ldr	r3, [pc, #36]	; (8002b54 <HAL_GPIO_Init+0x32c>)
 8002b2e:	68da      	ldr	r2, [r3, #12]
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	43db      	mvns	r3, r3
 8002b34:	4907      	ldr	r1, [pc, #28]	; (8002b54 <HAL_GPIO_Init+0x32c>)
 8002b36:	4013      	ands	r3, r2
 8002b38:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b42:	2b0f      	cmp	r3, #15
 8002b44:	f67f ae82 	bls.w	800284c <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8002b48:	bf00      	nop
 8002b4a:	bf00      	nop
 8002b4c:	372c      	adds	r7, #44	; 0x2c
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bc80      	pop	{r7}
 8002b52:	4770      	bx	lr
 8002b54:	40010400 	.word	0x40010400

08002b58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	460b      	mov	r3, r1
 8002b62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689a      	ldr	r2, [r3, #8]
 8002b68:	887b      	ldrh	r3, [r7, #2]
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d002      	beq.n	8002b76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b70:	2301      	movs	r3, #1
 8002b72:	73fb      	strb	r3, [r7, #15]
 8002b74:	e001      	b.n	8002b7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b76:	2300      	movs	r3, #0
 8002b78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3714      	adds	r7, #20
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bc80      	pop	{r7}
 8002b84:	4770      	bx	lr

08002b86 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
 8002b8e:	460b      	mov	r3, r1
 8002b90:	807b      	strh	r3, [r7, #2]
 8002b92:	4613      	mov	r3, r2
 8002b94:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b96:	787b      	ldrb	r3, [r7, #1]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d003      	beq.n	8002ba4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b9c:	887a      	ldrh	r2, [r7, #2]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ba2:	e003      	b.n	8002bac <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ba4:	887b      	ldrh	r3, [r7, #2]
 8002ba6:	041a      	lsls	r2, r3, #16
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	611a      	str	r2, [r3, #16]
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bc80      	pop	{r7}
 8002bb4:	4770      	bx	lr
	...

08002bb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002bc2:	4b08      	ldr	r3, [pc, #32]	; (8002be4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bc4:	695a      	ldr	r2, [r3, #20]
 8002bc6:	88fb      	ldrh	r3, [r7, #6]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d006      	beq.n	8002bdc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002bce:	4a05      	ldr	r2, [pc, #20]	; (8002be4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bd0:	88fb      	ldrh	r3, [r7, #6]
 8002bd2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002bd4:	88fb      	ldrh	r3, [r7, #6]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f000 f806 	bl	8002be8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002bdc:	bf00      	nop
 8002bde:	3708      	adds	r7, #8
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	40010400 	.word	0x40010400

08002be8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	4603      	mov	r3, r0
 8002bf0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002bf2:	bf00      	nop
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bc80      	pop	{r7}
 8002bfa:	4770      	bx	lr

08002bfc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8002c04:	2300      	movs	r3, #0
 8002c06:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f000 8087 	beq.w	8002d24 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002c16:	4b92      	ldr	r3, [pc, #584]	; (8002e60 <HAL_RCC_OscConfig+0x264>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f003 030c 	and.w	r3, r3, #12
 8002c1e:	2b04      	cmp	r3, #4
 8002c20:	d00c      	beq.n	8002c3c <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c22:	4b8f      	ldr	r3, [pc, #572]	; (8002e60 <HAL_RCC_OscConfig+0x264>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f003 030c 	and.w	r3, r3, #12
 8002c2a:	2b08      	cmp	r3, #8
 8002c2c:	d112      	bne.n	8002c54 <HAL_RCC_OscConfig+0x58>
 8002c2e:	4b8c      	ldr	r3, [pc, #560]	; (8002e60 <HAL_RCC_OscConfig+0x264>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c3a:	d10b      	bne.n	8002c54 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c3c:	4b88      	ldr	r3, [pc, #544]	; (8002e60 <HAL_RCC_OscConfig+0x264>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d06c      	beq.n	8002d22 <HAL_RCC_OscConfig+0x126>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d168      	bne.n	8002d22 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e22d      	b.n	80030b0 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c5c:	d106      	bne.n	8002c6c <HAL_RCC_OscConfig+0x70>
 8002c5e:	4b80      	ldr	r3, [pc, #512]	; (8002e60 <HAL_RCC_OscConfig+0x264>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a7f      	ldr	r2, [pc, #508]	; (8002e60 <HAL_RCC_OscConfig+0x264>)
 8002c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c68:	6013      	str	r3, [r2, #0]
 8002c6a:	e02e      	b.n	8002cca <HAL_RCC_OscConfig+0xce>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d10c      	bne.n	8002c8e <HAL_RCC_OscConfig+0x92>
 8002c74:	4b7a      	ldr	r3, [pc, #488]	; (8002e60 <HAL_RCC_OscConfig+0x264>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a79      	ldr	r2, [pc, #484]	; (8002e60 <HAL_RCC_OscConfig+0x264>)
 8002c7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c7e:	6013      	str	r3, [r2, #0]
 8002c80:	4b77      	ldr	r3, [pc, #476]	; (8002e60 <HAL_RCC_OscConfig+0x264>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a76      	ldr	r2, [pc, #472]	; (8002e60 <HAL_RCC_OscConfig+0x264>)
 8002c86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c8a:	6013      	str	r3, [r2, #0]
 8002c8c:	e01d      	b.n	8002cca <HAL_RCC_OscConfig+0xce>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c96:	d10c      	bne.n	8002cb2 <HAL_RCC_OscConfig+0xb6>
 8002c98:	4b71      	ldr	r3, [pc, #452]	; (8002e60 <HAL_RCC_OscConfig+0x264>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a70      	ldr	r2, [pc, #448]	; (8002e60 <HAL_RCC_OscConfig+0x264>)
 8002c9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ca2:	6013      	str	r3, [r2, #0]
 8002ca4:	4b6e      	ldr	r3, [pc, #440]	; (8002e60 <HAL_RCC_OscConfig+0x264>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a6d      	ldr	r2, [pc, #436]	; (8002e60 <HAL_RCC_OscConfig+0x264>)
 8002caa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cae:	6013      	str	r3, [r2, #0]
 8002cb0:	e00b      	b.n	8002cca <HAL_RCC_OscConfig+0xce>
 8002cb2:	4b6b      	ldr	r3, [pc, #428]	; (8002e60 <HAL_RCC_OscConfig+0x264>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a6a      	ldr	r2, [pc, #424]	; (8002e60 <HAL_RCC_OscConfig+0x264>)
 8002cb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cbc:	6013      	str	r3, [r2, #0]
 8002cbe:	4b68      	ldr	r3, [pc, #416]	; (8002e60 <HAL_RCC_OscConfig+0x264>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a67      	ldr	r2, [pc, #412]	; (8002e60 <HAL_RCC_OscConfig+0x264>)
 8002cc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cc8:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d013      	beq.n	8002cfa <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd2:	f7ff fb69 	bl	80023a8 <HAL_GetTick>
 8002cd6:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cd8:	e008      	b.n	8002cec <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cda:	f7ff fb65 	bl	80023a8 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b64      	cmp	r3, #100	; 0x64
 8002ce6:	d901      	bls.n	8002cec <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e1e1      	b.n	80030b0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cec:	4b5c      	ldr	r3, [pc, #368]	; (8002e60 <HAL_RCC_OscConfig+0x264>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d0f0      	beq.n	8002cda <HAL_RCC_OscConfig+0xde>
 8002cf8:	e014      	b.n	8002d24 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cfa:	f7ff fb55 	bl	80023a8 <HAL_GetTick>
 8002cfe:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d00:	e008      	b.n	8002d14 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d02:	f7ff fb51 	bl	80023a8 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b64      	cmp	r3, #100	; 0x64
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e1cd      	b.n	80030b0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d14:	4b52      	ldr	r3, [pc, #328]	; (8002e60 <HAL_RCC_OscConfig+0x264>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1f0      	bne.n	8002d02 <HAL_RCC_OscConfig+0x106>
 8002d20:	e000      	b.n	8002d24 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d22:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d063      	beq.n	8002df8 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002d30:	4b4b      	ldr	r3, [pc, #300]	; (8002e60 <HAL_RCC_OscConfig+0x264>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f003 030c 	and.w	r3, r3, #12
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00b      	beq.n	8002d54 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d3c:	4b48      	ldr	r3, [pc, #288]	; (8002e60 <HAL_RCC_OscConfig+0x264>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f003 030c 	and.w	r3, r3, #12
 8002d44:	2b08      	cmp	r3, #8
 8002d46:	d11c      	bne.n	8002d82 <HAL_RCC_OscConfig+0x186>
 8002d48:	4b45      	ldr	r3, [pc, #276]	; (8002e60 <HAL_RCC_OscConfig+0x264>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d116      	bne.n	8002d82 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d54:	4b42      	ldr	r3, [pc, #264]	; (8002e60 <HAL_RCC_OscConfig+0x264>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d005      	beq.n	8002d6c <HAL_RCC_OscConfig+0x170>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d001      	beq.n	8002d6c <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e1a1      	b.n	80030b0 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d6c:	4b3c      	ldr	r3, [pc, #240]	; (8002e60 <HAL_RCC_OscConfig+0x264>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	4939      	ldr	r1, [pc, #228]	; (8002e60 <HAL_RCC_OscConfig+0x264>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d80:	e03a      	b.n	8002df8 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d020      	beq.n	8002dcc <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d8a:	4b36      	ldr	r3, [pc, #216]	; (8002e64 <HAL_RCC_OscConfig+0x268>)
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d90:	f7ff fb0a 	bl	80023a8 <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d96:	e008      	b.n	8002daa <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d98:	f7ff fb06 	bl	80023a8 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e182      	b.n	80030b0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002daa:	4b2d      	ldr	r3, [pc, #180]	; (8002e60 <HAL_RCC_OscConfig+0x264>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d0f0      	beq.n	8002d98 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002db6:	4b2a      	ldr	r3, [pc, #168]	; (8002e60 <HAL_RCC_OscConfig+0x264>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	4926      	ldr	r1, [pc, #152]	; (8002e60 <HAL_RCC_OscConfig+0x264>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	600b      	str	r3, [r1, #0]
 8002dca:	e015      	b.n	8002df8 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dcc:	4b25      	ldr	r3, [pc, #148]	; (8002e64 <HAL_RCC_OscConfig+0x268>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd2:	f7ff fae9 	bl	80023a8 <HAL_GetTick>
 8002dd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dd8:	e008      	b.n	8002dec <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dda:	f7ff fae5 	bl	80023a8 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d901      	bls.n	8002dec <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e161      	b.n	80030b0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dec:	4b1c      	ldr	r3, [pc, #112]	; (8002e60 <HAL_RCC_OscConfig+0x264>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1f0      	bne.n	8002dda <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0308 	and.w	r3, r3, #8
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d039      	beq.n	8002e78 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d019      	beq.n	8002e40 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e0c:	4b16      	ldr	r3, [pc, #88]	; (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002e0e:	2201      	movs	r2, #1
 8002e10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e12:	f7ff fac9 	bl	80023a8 <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e18:	e008      	b.n	8002e2c <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e1a:	f7ff fac5 	bl	80023a8 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e141      	b.n	80030b0 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e2c:	4b0c      	ldr	r3, [pc, #48]	; (8002e60 <HAL_RCC_OscConfig+0x264>)
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0f0      	beq.n	8002e1a <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8002e38:	2001      	movs	r0, #1
 8002e3a:	f000 fadf 	bl	80033fc <RCC_Delay>
 8002e3e:	e01b      	b.n	8002e78 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e40:	4b09      	ldr	r3, [pc, #36]	; (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e46:	f7ff faaf 	bl	80023a8 <HAL_GetTick>
 8002e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e4c:	e00e      	b.n	8002e6c <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e4e:	f7ff faab 	bl	80023a8 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d907      	bls.n	8002e6c <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e127      	b.n	80030b0 <HAL_RCC_OscConfig+0x4b4>
 8002e60:	40021000 	.word	0x40021000
 8002e64:	42420000 	.word	0x42420000
 8002e68:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e6c:	4b92      	ldr	r3, [pc, #584]	; (80030b8 <HAL_RCC_OscConfig+0x4bc>)
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1ea      	bne.n	8002e4e <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	f000 80a6 	beq.w	8002fd2 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e86:	2300      	movs	r3, #0
 8002e88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e8a:	4b8b      	ldr	r3, [pc, #556]	; (80030b8 <HAL_RCC_OscConfig+0x4bc>)
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10d      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e96:	4b88      	ldr	r3, [pc, #544]	; (80030b8 <HAL_RCC_OscConfig+0x4bc>)
 8002e98:	69db      	ldr	r3, [r3, #28]
 8002e9a:	4a87      	ldr	r2, [pc, #540]	; (80030b8 <HAL_RCC_OscConfig+0x4bc>)
 8002e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ea0:	61d3      	str	r3, [r2, #28]
 8002ea2:	4b85      	ldr	r3, [pc, #532]	; (80030b8 <HAL_RCC_OscConfig+0x4bc>)
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eaa:	60fb      	str	r3, [r7, #12]
 8002eac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb2:	4b82      	ldr	r3, [pc, #520]	; (80030bc <HAL_RCC_OscConfig+0x4c0>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d118      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ebe:	4b7f      	ldr	r3, [pc, #508]	; (80030bc <HAL_RCC_OscConfig+0x4c0>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a7e      	ldr	r2, [pc, #504]	; (80030bc <HAL_RCC_OscConfig+0x4c0>)
 8002ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ec8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eca:	f7ff fa6d 	bl	80023a8 <HAL_GetTick>
 8002ece:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed0:	e008      	b.n	8002ee4 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ed2:	f7ff fa69 	bl	80023a8 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b64      	cmp	r3, #100	; 0x64
 8002ede:	d901      	bls.n	8002ee4 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e0e5      	b.n	80030b0 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee4:	4b75      	ldr	r3, [pc, #468]	; (80030bc <HAL_RCC_OscConfig+0x4c0>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d0f0      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d106      	bne.n	8002f06 <HAL_RCC_OscConfig+0x30a>
 8002ef8:	4b6f      	ldr	r3, [pc, #444]	; (80030b8 <HAL_RCC_OscConfig+0x4bc>)
 8002efa:	6a1b      	ldr	r3, [r3, #32]
 8002efc:	4a6e      	ldr	r2, [pc, #440]	; (80030b8 <HAL_RCC_OscConfig+0x4bc>)
 8002efe:	f043 0301 	orr.w	r3, r3, #1
 8002f02:	6213      	str	r3, [r2, #32]
 8002f04:	e02d      	b.n	8002f62 <HAL_RCC_OscConfig+0x366>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d10c      	bne.n	8002f28 <HAL_RCC_OscConfig+0x32c>
 8002f0e:	4b6a      	ldr	r3, [pc, #424]	; (80030b8 <HAL_RCC_OscConfig+0x4bc>)
 8002f10:	6a1b      	ldr	r3, [r3, #32]
 8002f12:	4a69      	ldr	r2, [pc, #420]	; (80030b8 <HAL_RCC_OscConfig+0x4bc>)
 8002f14:	f023 0301 	bic.w	r3, r3, #1
 8002f18:	6213      	str	r3, [r2, #32]
 8002f1a:	4b67      	ldr	r3, [pc, #412]	; (80030b8 <HAL_RCC_OscConfig+0x4bc>)
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	4a66      	ldr	r2, [pc, #408]	; (80030b8 <HAL_RCC_OscConfig+0x4bc>)
 8002f20:	f023 0304 	bic.w	r3, r3, #4
 8002f24:	6213      	str	r3, [r2, #32]
 8002f26:	e01c      	b.n	8002f62 <HAL_RCC_OscConfig+0x366>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	2b05      	cmp	r3, #5
 8002f2e:	d10c      	bne.n	8002f4a <HAL_RCC_OscConfig+0x34e>
 8002f30:	4b61      	ldr	r3, [pc, #388]	; (80030b8 <HAL_RCC_OscConfig+0x4bc>)
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	4a60      	ldr	r2, [pc, #384]	; (80030b8 <HAL_RCC_OscConfig+0x4bc>)
 8002f36:	f043 0304 	orr.w	r3, r3, #4
 8002f3a:	6213      	str	r3, [r2, #32]
 8002f3c:	4b5e      	ldr	r3, [pc, #376]	; (80030b8 <HAL_RCC_OscConfig+0x4bc>)
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
 8002f40:	4a5d      	ldr	r2, [pc, #372]	; (80030b8 <HAL_RCC_OscConfig+0x4bc>)
 8002f42:	f043 0301 	orr.w	r3, r3, #1
 8002f46:	6213      	str	r3, [r2, #32]
 8002f48:	e00b      	b.n	8002f62 <HAL_RCC_OscConfig+0x366>
 8002f4a:	4b5b      	ldr	r3, [pc, #364]	; (80030b8 <HAL_RCC_OscConfig+0x4bc>)
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	4a5a      	ldr	r2, [pc, #360]	; (80030b8 <HAL_RCC_OscConfig+0x4bc>)
 8002f50:	f023 0301 	bic.w	r3, r3, #1
 8002f54:	6213      	str	r3, [r2, #32]
 8002f56:	4b58      	ldr	r3, [pc, #352]	; (80030b8 <HAL_RCC_OscConfig+0x4bc>)
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	4a57      	ldr	r2, [pc, #348]	; (80030b8 <HAL_RCC_OscConfig+0x4bc>)
 8002f5c:	f023 0304 	bic.w	r3, r3, #4
 8002f60:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d015      	beq.n	8002f96 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f6a:	f7ff fa1d 	bl	80023a8 <HAL_GetTick>
 8002f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f70:	e00a      	b.n	8002f88 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f72:	f7ff fa19 	bl	80023a8 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d901      	bls.n	8002f88 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e093      	b.n	80030b0 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f88:	4b4b      	ldr	r3, [pc, #300]	; (80030b8 <HAL_RCC_OscConfig+0x4bc>)
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d0ee      	beq.n	8002f72 <HAL_RCC_OscConfig+0x376>
 8002f94:	e014      	b.n	8002fc0 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f96:	f7ff fa07 	bl	80023a8 <HAL_GetTick>
 8002f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f9c:	e00a      	b.n	8002fb4 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f9e:	f7ff fa03 	bl	80023a8 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e07d      	b.n	80030b0 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fb4:	4b40      	ldr	r3, [pc, #256]	; (80030b8 <HAL_RCC_OscConfig+0x4bc>)
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d1ee      	bne.n	8002f9e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002fc0:	7dfb      	ldrb	r3, [r7, #23]
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d105      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fc6:	4b3c      	ldr	r3, [pc, #240]	; (80030b8 <HAL_RCC_OscConfig+0x4bc>)
 8002fc8:	69db      	ldr	r3, [r3, #28]
 8002fca:	4a3b      	ldr	r2, [pc, #236]	; (80030b8 <HAL_RCC_OscConfig+0x4bc>)
 8002fcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fd0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	69db      	ldr	r3, [r3, #28]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d069      	beq.n	80030ae <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fda:	4b37      	ldr	r3, [pc, #220]	; (80030b8 <HAL_RCC_OscConfig+0x4bc>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f003 030c 	and.w	r3, r3, #12
 8002fe2:	2b08      	cmp	r3, #8
 8002fe4:	d061      	beq.n	80030aa <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d146      	bne.n	800307c <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fee:	4b34      	ldr	r3, [pc, #208]	; (80030c0 <HAL_RCC_OscConfig+0x4c4>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff4:	f7ff f9d8 	bl	80023a8 <HAL_GetTick>
 8002ff8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ffa:	e008      	b.n	800300e <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ffc:	f7ff f9d4 	bl	80023a8 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b02      	cmp	r3, #2
 8003008:	d901      	bls.n	800300e <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e050      	b.n	80030b0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800300e:	4b2a      	ldr	r3, [pc, #168]	; (80030b8 <HAL_RCC_OscConfig+0x4bc>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1f0      	bne.n	8002ffc <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a1b      	ldr	r3, [r3, #32]
 800301e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003022:	d108      	bne.n	8003036 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003024:	4b24      	ldr	r3, [pc, #144]	; (80030b8 <HAL_RCC_OscConfig+0x4bc>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	4921      	ldr	r1, [pc, #132]	; (80030b8 <HAL_RCC_OscConfig+0x4bc>)
 8003032:	4313      	orrs	r3, r2
 8003034:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003036:	4b20      	ldr	r3, [pc, #128]	; (80030b8 <HAL_RCC_OscConfig+0x4bc>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a19      	ldr	r1, [r3, #32]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003046:	430b      	orrs	r3, r1
 8003048:	491b      	ldr	r1, [pc, #108]	; (80030b8 <HAL_RCC_OscConfig+0x4bc>)
 800304a:	4313      	orrs	r3, r2
 800304c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800304e:	4b1c      	ldr	r3, [pc, #112]	; (80030c0 <HAL_RCC_OscConfig+0x4c4>)
 8003050:	2201      	movs	r2, #1
 8003052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003054:	f7ff f9a8 	bl	80023a8 <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800305c:	f7ff f9a4 	bl	80023a8 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e020      	b.n	80030b0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800306e:	4b12      	ldr	r3, [pc, #72]	; (80030b8 <HAL_RCC_OscConfig+0x4bc>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d0f0      	beq.n	800305c <HAL_RCC_OscConfig+0x460>
 800307a:	e018      	b.n	80030ae <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800307c:	4b10      	ldr	r3, [pc, #64]	; (80030c0 <HAL_RCC_OscConfig+0x4c4>)
 800307e:	2200      	movs	r2, #0
 8003080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003082:	f7ff f991 	bl	80023a8 <HAL_GetTick>
 8003086:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003088:	e008      	b.n	800309c <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800308a:	f7ff f98d 	bl	80023a8 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	2b02      	cmp	r3, #2
 8003096:	d901      	bls.n	800309c <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e009      	b.n	80030b0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800309c:	4b06      	ldr	r3, [pc, #24]	; (80030b8 <HAL_RCC_OscConfig+0x4bc>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1f0      	bne.n	800308a <HAL_RCC_OscConfig+0x48e>
 80030a8:	e001      	b.n	80030ae <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e000      	b.n	80030b0 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3718      	adds	r7, #24
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	40021000 	.word	0x40021000
 80030bc:	40007000 	.word	0x40007000
 80030c0:	42420060 	.word	0x42420060

080030c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80030ce:	2300      	movs	r3, #0
 80030d0:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80030d2:	4b7e      	ldr	r3, [pc, #504]	; (80032cc <HAL_RCC_ClockConfig+0x208>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0307 	and.w	r3, r3, #7
 80030da:	683a      	ldr	r2, [r7, #0]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d910      	bls.n	8003102 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030e0:	4b7a      	ldr	r3, [pc, #488]	; (80032cc <HAL_RCC_ClockConfig+0x208>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f023 0207 	bic.w	r2, r3, #7
 80030e8:	4978      	ldr	r1, [pc, #480]	; (80032cc <HAL_RCC_ClockConfig+0x208>)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80030f0:	4b76      	ldr	r3, [pc, #472]	; (80032cc <HAL_RCC_ClockConfig+0x208>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0307 	and.w	r3, r3, #7
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d001      	beq.n	8003102 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e0e0      	b.n	80032c4 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d020      	beq.n	8003150 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0304 	and.w	r3, r3, #4
 8003116:	2b00      	cmp	r3, #0
 8003118:	d005      	beq.n	8003126 <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800311a:	4b6d      	ldr	r3, [pc, #436]	; (80032d0 <HAL_RCC_ClockConfig+0x20c>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	4a6c      	ldr	r2, [pc, #432]	; (80032d0 <HAL_RCC_ClockConfig+0x20c>)
 8003120:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003124:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0308 	and.w	r3, r3, #8
 800312e:	2b00      	cmp	r3, #0
 8003130:	d005      	beq.n	800313e <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003132:	4b67      	ldr	r3, [pc, #412]	; (80032d0 <HAL_RCC_ClockConfig+0x20c>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	4a66      	ldr	r2, [pc, #408]	; (80032d0 <HAL_RCC_ClockConfig+0x20c>)
 8003138:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800313c:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800313e:	4b64      	ldr	r3, [pc, #400]	; (80032d0 <HAL_RCC_ClockConfig+0x20c>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	4961      	ldr	r1, [pc, #388]	; (80032d0 <HAL_RCC_ClockConfig+0x20c>)
 800314c:	4313      	orrs	r3, r2
 800314e:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	2b00      	cmp	r3, #0
 800315a:	d06a      	beq.n	8003232 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d107      	bne.n	8003174 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003164:	4b5a      	ldr	r3, [pc, #360]	; (80032d0 <HAL_RCC_ClockConfig+0x20c>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d115      	bne.n	800319c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e0a7      	b.n	80032c4 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	2b02      	cmp	r3, #2
 800317a:	d107      	bne.n	800318c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800317c:	4b54      	ldr	r3, [pc, #336]	; (80032d0 <HAL_RCC_ClockConfig+0x20c>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d109      	bne.n	800319c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e09b      	b.n	80032c4 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800318c:	4b50      	ldr	r3, [pc, #320]	; (80032d0 <HAL_RCC_ClockConfig+0x20c>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0302 	and.w	r3, r3, #2
 8003194:	2b00      	cmp	r3, #0
 8003196:	d101      	bne.n	800319c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e093      	b.n	80032c4 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800319c:	4b4c      	ldr	r3, [pc, #304]	; (80032d0 <HAL_RCC_ClockConfig+0x20c>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f023 0203 	bic.w	r2, r3, #3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	4949      	ldr	r1, [pc, #292]	; (80032d0 <HAL_RCC_ClockConfig+0x20c>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031ae:	f7ff f8fb 	bl	80023a8 <HAL_GetTick>
 80031b2:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d112      	bne.n	80031e2 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80031bc:	e00a      	b.n	80031d4 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031be:	f7ff f8f3 	bl	80023a8 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d901      	bls.n	80031d4 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e077      	b.n	80032c4 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80031d4:	4b3e      	ldr	r3, [pc, #248]	; (80032d0 <HAL_RCC_ClockConfig+0x20c>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f003 030c 	and.w	r3, r3, #12
 80031dc:	2b04      	cmp	r3, #4
 80031de:	d1ee      	bne.n	80031be <HAL_RCC_ClockConfig+0xfa>
 80031e0:	e027      	b.n	8003232 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d11d      	bne.n	8003226 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031ea:	e00a      	b.n	8003202 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031ec:	f7ff f8dc 	bl	80023a8 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e060      	b.n	80032c4 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003202:	4b33      	ldr	r3, [pc, #204]	; (80032d0 <HAL_RCC_ClockConfig+0x20c>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f003 030c 	and.w	r3, r3, #12
 800320a:	2b08      	cmp	r3, #8
 800320c:	d1ee      	bne.n	80031ec <HAL_RCC_ClockConfig+0x128>
 800320e:	e010      	b.n	8003232 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003210:	f7ff f8ca 	bl	80023a8 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	f241 3288 	movw	r2, #5000	; 0x1388
 800321e:	4293      	cmp	r3, r2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e04e      	b.n	80032c4 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003226:	4b2a      	ldr	r3, [pc, #168]	; (80032d0 <HAL_RCC_ClockConfig+0x20c>)
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f003 030c 	and.w	r3, r3, #12
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1ee      	bne.n	8003210 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8003232:	4b26      	ldr	r3, [pc, #152]	; (80032cc <HAL_RCC_ClockConfig+0x208>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0307 	and.w	r3, r3, #7
 800323a:	683a      	ldr	r2, [r7, #0]
 800323c:	429a      	cmp	r2, r3
 800323e:	d210      	bcs.n	8003262 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003240:	4b22      	ldr	r3, [pc, #136]	; (80032cc <HAL_RCC_ClockConfig+0x208>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f023 0207 	bic.w	r2, r3, #7
 8003248:	4920      	ldr	r1, [pc, #128]	; (80032cc <HAL_RCC_ClockConfig+0x208>)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	4313      	orrs	r3, r2
 800324e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003250:	4b1e      	ldr	r3, [pc, #120]	; (80032cc <HAL_RCC_ClockConfig+0x208>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0307 	and.w	r3, r3, #7
 8003258:	683a      	ldr	r2, [r7, #0]
 800325a:	429a      	cmp	r2, r3
 800325c:	d001      	beq.n	8003262 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e030      	b.n	80032c4 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0304 	and.w	r3, r3, #4
 800326a:	2b00      	cmp	r3, #0
 800326c:	d008      	beq.n	8003280 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800326e:	4b18      	ldr	r3, [pc, #96]	; (80032d0 <HAL_RCC_ClockConfig+0x20c>)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	4915      	ldr	r1, [pc, #84]	; (80032d0 <HAL_RCC_ClockConfig+0x20c>)
 800327c:	4313      	orrs	r3, r2
 800327e:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0308 	and.w	r3, r3, #8
 8003288:	2b00      	cmp	r3, #0
 800328a:	d009      	beq.n	80032a0 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800328c:	4b10      	ldr	r3, [pc, #64]	; (80032d0 <HAL_RCC_ClockConfig+0x20c>)
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	00db      	lsls	r3, r3, #3
 800329a:	490d      	ldr	r1, [pc, #52]	; (80032d0 <HAL_RCC_ClockConfig+0x20c>)
 800329c:	4313      	orrs	r3, r2
 800329e:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032a0:	f000 f81c 	bl	80032dc <HAL_RCC_GetSysClockFreq>
 80032a4:	4602      	mov	r2, r0
 80032a6:	4b0a      	ldr	r3, [pc, #40]	; (80032d0 <HAL_RCC_ClockConfig+0x20c>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	091b      	lsrs	r3, r3, #4
 80032ac:	f003 030f 	and.w	r3, r3, #15
 80032b0:	4908      	ldr	r1, [pc, #32]	; (80032d4 <HAL_RCC_ClockConfig+0x210>)
 80032b2:	5ccb      	ldrb	r3, [r1, r3]
 80032b4:	fa22 f303 	lsr.w	r3, r2, r3
 80032b8:	4a07      	ldr	r2, [pc, #28]	; (80032d8 <HAL_RCC_ClockConfig+0x214>)
 80032ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80032bc:	2000      	movs	r0, #0
 80032be:	f7ff f831 	bl	8002324 <HAL_InitTick>
  
  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	40022000 	.word	0x40022000
 80032d0:	40021000 	.word	0x40021000
 80032d4:	08005318 	.word	0x08005318
 80032d8:	20000108 	.word	0x20000108

080032dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032dc:	b490      	push	{r4, r7}
 80032de:	b08a      	sub	sp, #40	; 0x28
 80032e0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80032e2:	4b29      	ldr	r3, [pc, #164]	; (8003388 <HAL_RCC_GetSysClockFreq+0xac>)
 80032e4:	1d3c      	adds	r4, r7, #4
 80032e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80032ec:	f240 2301 	movw	r3, #513	; 0x201
 80032f0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032f2:	2300      	movs	r3, #0
 80032f4:	61fb      	str	r3, [r7, #28]
 80032f6:	2300      	movs	r3, #0
 80032f8:	61bb      	str	r3, [r7, #24]
 80032fa:	2300      	movs	r3, #0
 80032fc:	627b      	str	r3, [r7, #36]	; 0x24
 80032fe:	2300      	movs	r3, #0
 8003300:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003302:	2300      	movs	r3, #0
 8003304:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003306:	4b21      	ldr	r3, [pc, #132]	; (800338c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	f003 030c 	and.w	r3, r3, #12
 8003312:	2b04      	cmp	r3, #4
 8003314:	d002      	beq.n	800331c <HAL_RCC_GetSysClockFreq+0x40>
 8003316:	2b08      	cmp	r3, #8
 8003318:	d003      	beq.n	8003322 <HAL_RCC_GetSysClockFreq+0x46>
 800331a:	e02b      	b.n	8003374 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800331c:	4b1c      	ldr	r3, [pc, #112]	; (8003390 <HAL_RCC_GetSysClockFreq+0xb4>)
 800331e:	623b      	str	r3, [r7, #32]
      break;
 8003320:	e02b      	b.n	800337a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	0c9b      	lsrs	r3, r3, #18
 8003326:	f003 030f 	and.w	r3, r3, #15
 800332a:	3328      	adds	r3, #40	; 0x28
 800332c:	443b      	add	r3, r7
 800332e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003332:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d012      	beq.n	8003364 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800333e:	4b13      	ldr	r3, [pc, #76]	; (800338c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	0c5b      	lsrs	r3, r3, #17
 8003344:	f003 0301 	and.w	r3, r3, #1
 8003348:	3328      	adds	r3, #40	; 0x28
 800334a:	443b      	add	r3, r7
 800334c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003350:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	4a0e      	ldr	r2, [pc, #56]	; (8003390 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003356:	fb03 f202 	mul.w	r2, r3, r2
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003360:	627b      	str	r3, [r7, #36]	; 0x24
 8003362:	e004      	b.n	800336e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	4a0b      	ldr	r2, [pc, #44]	; (8003394 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003368:	fb02 f303 	mul.w	r3, r2, r3
 800336c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800336e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003370:	623b      	str	r3, [r7, #32]
      break;
 8003372:	e002      	b.n	800337a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003374:	4b06      	ldr	r3, [pc, #24]	; (8003390 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003376:	623b      	str	r3, [r7, #32]
      break;
 8003378:	bf00      	nop
    }
  }
  return sysclockfreq;
 800337a:	6a3b      	ldr	r3, [r7, #32]
}
 800337c:	4618      	mov	r0, r3
 800337e:	3728      	adds	r7, #40	; 0x28
 8003380:	46bd      	mov	sp, r7
 8003382:	bc90      	pop	{r4, r7}
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	08004d18 	.word	0x08004d18
 800338c:	40021000 	.word	0x40021000
 8003390:	007a1200 	.word	0x007a1200
 8003394:	003d0900 	.word	0x003d0900

08003398 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800339c:	4b02      	ldr	r3, [pc, #8]	; (80033a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800339e:	681b      	ldr	r3, [r3, #0]
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bc80      	pop	{r7}
 80033a6:	4770      	bx	lr
 80033a8:	20000108 	.word	0x20000108

080033ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033b0:	f7ff fff2 	bl	8003398 <HAL_RCC_GetHCLKFreq>
 80033b4:	4602      	mov	r2, r0
 80033b6:	4b05      	ldr	r3, [pc, #20]	; (80033cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	0a1b      	lsrs	r3, r3, #8
 80033bc:	f003 0307 	and.w	r3, r3, #7
 80033c0:	4903      	ldr	r1, [pc, #12]	; (80033d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033c2:	5ccb      	ldrb	r3, [r1, r3]
 80033c4:	fa22 f303 	lsr.w	r3, r2, r3
}    
 80033c8:	4618      	mov	r0, r3
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	40021000 	.word	0x40021000
 80033d0:	08005328 	.word	0x08005328

080033d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033d8:	f7ff ffde 	bl	8003398 <HAL_RCC_GetHCLKFreq>
 80033dc:	4602      	mov	r2, r0
 80033de:	4b05      	ldr	r3, [pc, #20]	; (80033f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	0adb      	lsrs	r3, r3, #11
 80033e4:	f003 0307 	and.w	r3, r3, #7
 80033e8:	4903      	ldr	r1, [pc, #12]	; (80033f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033ea:	5ccb      	ldrb	r3, [r1, r3]
 80033ec:	fa22 f303 	lsr.w	r3, r2, r3
} 
 80033f0:	4618      	mov	r0, r3
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	40021000 	.word	0x40021000
 80033f8:	08005328 	.word	0x08005328

080033fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003404:	4b0b      	ldr	r3, [pc, #44]	; (8003434 <RCC_Delay+0x38>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a0b      	ldr	r2, [pc, #44]	; (8003438 <RCC_Delay+0x3c>)
 800340a:	fba2 2303 	umull	r2, r3, r2, r3
 800340e:	0a5b      	lsrs	r3, r3, #9
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	fb02 f303 	mul.w	r3, r2, r3
 8003416:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8003418:	bf00      	nop
}
 800341a:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	1e5a      	subs	r2, r3, #1
 8003420:	60fa      	str	r2, [r7, #12]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1f8      	bne.n	8003418 <RCC_Delay+0x1c>
}
 8003426:	bf00      	nop
 8003428:	bf00      	nop
 800342a:	3714      	adds	r7, #20
 800342c:	46bd      	mov	sp, r7
 800342e:	bc80      	pop	{r7}
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	20000108 	.word	0x20000108
 8003438:	10624dd3 	.word	0x10624dd3

0800343c <HAL_SRAM_Init>:
  * @param  Timing: Pointer to SRAM control timing structure 
  * @param  ExtTiming: Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing, FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e034      	b.n	80034bc <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d106      	bne.n	800346c <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f7fd ff36 	bl	80012d8 <HAL_SRAM_MspInit>
  }
  
  /* Initialize SRAM control Interface */
  FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	3308      	adds	r3, #8
 8003474:	4619      	mov	r1, r3
 8003476:	4610      	mov	r0, r2
 8003478:	f000 fc12 	bl	8003ca0 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6818      	ldr	r0, [r3, #0]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	461a      	mov	r2, r3
 8003486:	68b9      	ldr	r1, [r7, #8]
 8003488:	f000 fc8a 	bl	8003da0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6858      	ldr	r0, [r3, #4]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	689a      	ldr	r2, [r3, #8]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	f000 fcb5 	bl	8003e08 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	6892      	ldr	r2, [r2, #8]
 80034a6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	6892      	ldr	r2, [r2, #8]
 80034b2:	f041 0101 	orr.w	r1, r1, #1
 80034b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3710      	adds	r7, #16
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e03f      	b.n	8003556 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d106      	bne.n	80034f0 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f7fe fe3a 	bl	8002164 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2224      	movs	r2, #36	; 0x24
 80034f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68da      	ldr	r2, [r3, #12]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003506:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f000 fab1 	bl	8003a70 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	691a      	ldr	r2, [r3, #16]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800351c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	695a      	ldr	r2, [r3, #20]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800352c:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68da      	ldr	r2, [r3, #12]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800353c:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2220      	movs	r2, #32
 8003548:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2220      	movs	r2, #32
 8003550:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <HAL_UART_Receive_IT>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800355e:	b480      	push	{r7}
 8003560:	b085      	sub	sp, #20
 8003562:	af00      	add	r7, sp, #0
 8003564:	60f8      	str	r0, [r7, #12]
 8003566:	60b9      	str	r1, [r7, #8]
 8003568:	4613      	mov	r3, r2
 800356a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2b20      	cmp	r3, #32
 8003576:	d140      	bne.n	80035fa <HAL_UART_Receive_IT+0x9c>
  {
    if((pData == NULL) || (Size == 0U))
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d002      	beq.n	8003584 <HAL_UART_Receive_IT+0x26>
 800357e:	88fb      	ldrh	r3, [r7, #6]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d101      	bne.n	8003588 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e039      	b.n	80035fc <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800358e:	2b01      	cmp	r3, #1
 8003590:	d101      	bne.n	8003596 <HAL_UART_Receive_IT+0x38>
 8003592:	2302      	movs	r3, #2
 8003594:	e032      	b.n	80035fc <HAL_UART_Receive_IT+0x9e>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	68ba      	ldr	r2, [r7, #8]
 80035a2:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	88fa      	ldrh	r2, [r7, #6]
 80035a8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	88fa      	ldrh	r2, [r7, #6]
 80035ae:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2222      	movs	r2, #34	; 0x22
 80035ba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68da      	ldr	r2, [r3, #12]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035d4:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	695a      	ldr	r2, [r3, #20]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f042 0201 	orr.w	r2, r2, #1
 80035e4:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68da      	ldr	r2, [r3, #12]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f042 0220 	orr.w	r2, r2, #32
 80035f4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80035f6:	2300      	movs	r3, #0
 80035f8:	e000      	b.n	80035fc <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80035fa:	2302      	movs	r3, #2
  }
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3714      	adds	r7, #20
 8003600:	46bd      	mov	sp, r7
 8003602:	bc80      	pop	{r7}
 8003604:	4770      	bx	lr
	...

08003608 <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b088      	sub	sp, #32
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 8003628:	2300      	movs	r3, #0
 800362a:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 800362c:	2300      	movs	r3, #0
 800362e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	f003 030f 	and.w	r3, r3, #15
 8003636:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d10d      	bne.n	800365a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	f003 0320 	and.w	r3, r3, #32
 8003644:	2b00      	cmp	r3, #0
 8003646:	d008      	beq.n	800365a <HAL_UART_IRQHandler+0x52>
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	f003 0320 	and.w	r3, r3, #32
 800364e:	2b00      	cmp	r3, #0
 8003650:	d003      	beq.n	800365a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 f98b 	bl	800396e <UART_Receive_IT>
      return;
 8003658:	e0cb      	b.n	80037f2 <HAL_UART_IRQHandler+0x1ea>
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	2b00      	cmp	r3, #0
 800365e:	f000 80ab 	beq.w	80037b8 <HAL_UART_IRQHandler+0x1b0>
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	f003 0301 	and.w	r3, r3, #1
 8003668:	2b00      	cmp	r3, #0
 800366a:	d105      	bne.n	8003678 <HAL_UART_IRQHandler+0x70>
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003672:	2b00      	cmp	r3, #0
 8003674:	f000 80a0 	beq.w	80037b8 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00a      	beq.n	8003698 <HAL_UART_IRQHandler+0x90>
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003688:	2b00      	cmp	r3, #0
 800368a:	d005      	beq.n	8003698 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003690:	f043 0201 	orr.w	r2, r3, #1
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	f003 0304 	and.w	r3, r3, #4
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00a      	beq.n	80036b8 <HAL_UART_IRQHandler+0xb0>
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d005      	beq.n	80036b8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b0:	f043 0202 	orr.w	r2, r3, #2
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00a      	beq.n	80036d8 <HAL_UART_IRQHandler+0xd0>
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	f003 0301 	and.w	r3, r3, #1
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d005      	beq.n	80036d8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d0:	f043 0204 	orr.w	r2, r3, #4
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	f003 0308 	and.w	r3, r3, #8
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00a      	beq.n	80036f8 <HAL_UART_IRQHandler+0xf0>
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d005      	beq.n	80036f8 <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f0:	f043 0208 	orr.w	r2, r3, #8
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d077      	beq.n	80037f0 <HAL_UART_IRQHandler+0x1e8>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	f003 0320 	and.w	r3, r3, #32
 8003706:	2b00      	cmp	r3, #0
 8003708:	d007      	beq.n	800371a <HAL_UART_IRQHandler+0x112>
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	f003 0320 	and.w	r3, r3, #32
 8003710:	2b00      	cmp	r3, #0
 8003712:	d002      	beq.n	800371a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 f92a 	bl	800396e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	695b      	ldr	r3, [r3, #20]
 8003720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003724:	2b00      	cmp	r3, #0
 8003726:	bf14      	ite	ne
 8003728:	2301      	movne	r3, #1
 800372a:	2300      	moveq	r3, #0
 800372c:	b2db      	uxtb	r3, r3
 800372e:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003734:	f003 0308 	and.w	r3, r3, #8
 8003738:	2b00      	cmp	r3, #0
 800373a:	d102      	bne.n	8003742 <HAL_UART_IRQHandler+0x13a>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d031      	beq.n	80037a6 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 f875 	bl	8003832 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003752:	2b00      	cmp	r3, #0
 8003754:	d023      	beq.n	800379e <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	695a      	ldr	r2, [r3, #20]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003764:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800376a:	2b00      	cmp	r3, #0
 800376c:	d013      	beq.n	8003796 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003772:	4a21      	ldr	r2, [pc, #132]	; (80037f8 <HAL_UART_IRQHandler+0x1f0>)
 8003774:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800377a:	4618      	mov	r0, r3
 800377c:	f7fe ff4c 	bl	8002618 <HAL_DMA_Abort_IT>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d016      	beq.n	80037b4 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800378a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003790:	4610      	mov	r0, r2
 8003792:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003794:	e00e      	b.n	80037b4 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 f842 	bl	8003820 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800379c:	e00a      	b.n	80037b4 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 f83e 	bl	8003820 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037a4:	e006      	b.n	80037b4 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 f83a 	bl	8003820 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80037b2:	e01d      	b.n	80037f0 <HAL_UART_IRQHandler+0x1e8>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037b4:	bf00      	nop
    return;
 80037b6:	e01b      	b.n	80037f0 <HAL_UART_IRQHandler+0x1e8>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d008      	beq.n	80037d4 <HAL_UART_IRQHandler+0x1cc>
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d003      	beq.n	80037d4 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 f861 	bl	8003894 <UART_Transmit_IT>
    return;
 80037d2:	e00e      	b.n	80037f2 <HAL_UART_IRQHandler+0x1ea>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d009      	beq.n	80037f2 <HAL_UART_IRQHandler+0x1ea>
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d004      	beq.n	80037f2 <HAL_UART_IRQHandler+0x1ea>
  {
    UART_EndTransmit_IT(huart);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 f8a8 	bl	800393e <UART_EndTransmit_IT>
    return;
 80037ee:	e000      	b.n	80037f2 <HAL_UART_IRQHandler+0x1ea>
    return;
 80037f0:	bf00      	nop
  }
}
 80037f2:	3720      	adds	r7, #32
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	0800386d 	.word	0x0800386d

080037fc <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 8003804:	bf00      	nop
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	bc80      	pop	{r7}
 800380c:	4770      	bx	lr

0800380e <HAL_UART_RxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800380e:	b480      	push	{r7}
 8003810:	b083      	sub	sp, #12
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003816:	bf00      	nop
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	bc80      	pop	{r7}
 800381e:	4770      	bx	lr

08003820 <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	bc80      	pop	{r7}
 8003830:	4770      	bx	lr

08003832 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003832:	b480      	push	{r7}
 8003834:	b083      	sub	sp, #12
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68da      	ldr	r2, [r3, #12]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003848:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	695a      	ldr	r2, [r3, #20]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f022 0201 	bic.w	r2, r2, #1
 8003858:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2220      	movs	r2, #32
 800385e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003862:	bf00      	nop
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	bc80      	pop	{r7}
 800386a:	4770      	bx	lr

0800386c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 8003886:	68f8      	ldr	r0, [r7, #12]
 8003888:	f7ff ffca 	bl	8003820 <HAL_UART_ErrorCallback>
}
 800388c:	bf00      	nop
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003894:	b480      	push	{r7}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	2b21      	cmp	r3, #33	; 0x21
 80038a6:	d144      	bne.n	8003932 <UART_Transmit_IT+0x9e>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038b0:	d11a      	bne.n	80038e8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	881b      	ldrh	r3, [r3, #0]
 80038bc:	461a      	mov	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038c6:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d105      	bne.n	80038dc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	1c9a      	adds	r2, r3, #2
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	621a      	str	r2, [r3, #32]
 80038da:	e00e      	b.n	80038fa <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	1c5a      	adds	r2, r3, #1
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	621a      	str	r2, [r3, #32]
 80038e6:	e008      	b.n	80038fa <UART_Transmit_IT+0x66>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a1b      	ldr	r3, [r3, #32]
 80038ec:	1c59      	adds	r1, r3, #1
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	6211      	str	r1, [r2, #32]
 80038f2:	781a      	ldrb	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038fe:	b29b      	uxth	r3, r3
 8003900:	3b01      	subs	r3, #1
 8003902:	b29b      	uxth	r3, r3
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	4619      	mov	r1, r3
 8003908:	84d1      	strh	r1, [r2, #38]	; 0x26
 800390a:	2b00      	cmp	r3, #0
 800390c:	d10f      	bne.n	800392e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68da      	ldr	r2, [r3, #12]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800391c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68da      	ldr	r2, [r3, #12]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800392c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800392e:	2300      	movs	r3, #0
 8003930:	e000      	b.n	8003934 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003932:	2302      	movs	r3, #2
  }
}
 8003934:	4618      	mov	r0, r3
 8003936:	3714      	adds	r7, #20
 8003938:	46bd      	mov	sp, r7
 800393a:	bc80      	pop	{r7}
 800393c:	4770      	bx	lr

0800393e <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b082      	sub	sp, #8
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68da      	ldr	r2, [r3, #12]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003954:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2220      	movs	r2, #32
 800395a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7ff ff4c 	bl	80037fc <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3708      	adds	r7, #8
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800396e:	b580      	push	{r7, lr}
 8003970:	b084      	sub	sp, #16
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b22      	cmp	r3, #34	; 0x22
 8003980:	d171      	bne.n	8003a66 <UART_Receive_IT+0xf8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800398a:	d123      	bne.n	80039d4 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003990:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10e      	bne.n	80039b8 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b0:	1c9a      	adds	r2, r3, #2
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	629a      	str	r2, [r3, #40]	; 0x28
 80039b6:	e029      	b.n	8003a0c <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	b29b      	uxth	r3, r3
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	b29a      	uxth	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039cc:	1c5a      	adds	r2, r3, #1
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	629a      	str	r2, [r3, #40]	; 0x28
 80039d2:	e01b      	b.n	8003a0c <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d10a      	bne.n	80039f2 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6858      	ldr	r0, [r3, #4]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e6:	1c59      	adds	r1, r3, #1
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	6291      	str	r1, [r2, #40]	; 0x28
 80039ec:	b2c2      	uxtb	r2, r0
 80039ee:	701a      	strb	r2, [r3, #0]
 80039f0:	e00c      	b.n	8003a0c <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	b2da      	uxtb	r2, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fe:	1c58      	adds	r0, r3, #1
 8003a00:	6879      	ldr	r1, [r7, #4]
 8003a02:	6288      	str	r0, [r1, #40]	; 0x28
 8003a04:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a08:	b2d2      	uxtb	r2, r2
 8003a0a:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	3b01      	subs	r3, #1
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	4619      	mov	r1, r3
 8003a1a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d120      	bne.n	8003a62 <UART_Receive_IT+0xf4>
    {
      /* Disable the IRDA Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68da      	ldr	r2, [r3, #12]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f022 0220 	bic.w	r2, r2, #32
 8003a2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68da      	ldr	r2, [r3, #12]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a3e:	60da      	str	r2, [r3, #12]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	695a      	ldr	r2, [r3, #20]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f022 0201 	bic.w	r2, r2, #1
 8003a4e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2220      	movs	r2, #32
 8003a54:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      HAL_UART_RxCpltCallback(huart);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f7ff fed8 	bl	800380e <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	e002      	b.n	8003a68 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003a62:	2300      	movs	r3, #0
 8003a64:	e000      	b.n	8003a68 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003a66:	2302      	movs	r3, #2
  }
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3710      	adds	r7, #16
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a70:	b5b0      	push	{r4, r5, r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	68da      	ldr	r2, [r3, #12]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	689a      	ldr	r2, [r3, #8]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003ab2:	f023 030c 	bic.w	r3, r3, #12
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	6812      	ldr	r2, [r2, #0]
 8003aba:	68f9      	ldr	r1, [r7, #12]
 8003abc:	430b      	orrs	r3, r1
 8003abe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	699a      	ldr	r2, [r3, #24]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a6f      	ldr	r2, [pc, #444]	; (8003c98 <UART_SetConfig+0x228>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d16b      	bne.n	8003bb8 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003ae0:	f7ff fc78 	bl	80033d4 <HAL_RCC_GetPCLK2Freq>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	4413      	add	r3, r2
 8003aec:	009a      	lsls	r2, r3, #2
 8003aee:	441a      	add	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003afa:	4a68      	ldr	r2, [pc, #416]	; (8003c9c <UART_SetConfig+0x22c>)
 8003afc:	fba2 2303 	umull	r2, r3, r2, r3
 8003b00:	095b      	lsrs	r3, r3, #5
 8003b02:	011c      	lsls	r4, r3, #4
 8003b04:	f7ff fc66 	bl	80033d4 <HAL_RCC_GetPCLK2Freq>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	4413      	add	r3, r2
 8003b10:	009a      	lsls	r2, r3, #2
 8003b12:	441a      	add	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	fbb2 f5f3 	udiv	r5, r2, r3
 8003b1e:	f7ff fc59 	bl	80033d4 <HAL_RCC_GetPCLK2Freq>
 8003b22:	4602      	mov	r2, r0
 8003b24:	4613      	mov	r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	4413      	add	r3, r2
 8003b2a:	009a      	lsls	r2, r3, #2
 8003b2c:	441a      	add	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b38:	4a58      	ldr	r2, [pc, #352]	; (8003c9c <UART_SetConfig+0x22c>)
 8003b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b3e:	095b      	lsrs	r3, r3, #5
 8003b40:	2264      	movs	r2, #100	; 0x64
 8003b42:	fb02 f303 	mul.w	r3, r2, r3
 8003b46:	1aeb      	subs	r3, r5, r3
 8003b48:	011b      	lsls	r3, r3, #4
 8003b4a:	3332      	adds	r3, #50	; 0x32
 8003b4c:	4a53      	ldr	r2, [pc, #332]	; (8003c9c <UART_SetConfig+0x22c>)
 8003b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b52:	095b      	lsrs	r3, r3, #5
 8003b54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b58:	441c      	add	r4, r3
 8003b5a:	f7ff fc3b 	bl	80033d4 <HAL_RCC_GetPCLK2Freq>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	4613      	mov	r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	4413      	add	r3, r2
 8003b66:	009a      	lsls	r2, r3, #2
 8003b68:	441a      	add	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	fbb2 f5f3 	udiv	r5, r2, r3
 8003b74:	f7ff fc2e 	bl	80033d4 <HAL_RCC_GetPCLK2Freq>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	4413      	add	r3, r2
 8003b80:	009a      	lsls	r2, r3, #2
 8003b82:	441a      	add	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b8e:	4a43      	ldr	r2, [pc, #268]	; (8003c9c <UART_SetConfig+0x22c>)
 8003b90:	fba2 2303 	umull	r2, r3, r2, r3
 8003b94:	095b      	lsrs	r3, r3, #5
 8003b96:	2264      	movs	r2, #100	; 0x64
 8003b98:	fb02 f303 	mul.w	r3, r2, r3
 8003b9c:	1aeb      	subs	r3, r5, r3
 8003b9e:	011b      	lsls	r3, r3, #4
 8003ba0:	3332      	adds	r3, #50	; 0x32
 8003ba2:	4a3e      	ldr	r2, [pc, #248]	; (8003c9c <UART_SetConfig+0x22c>)
 8003ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba8:	095b      	lsrs	r3, r3, #5
 8003baa:	f003 020f 	and.w	r2, r3, #15
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4422      	add	r2, r4
 8003bb4:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003bb6:	e06a      	b.n	8003c8e <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003bb8:	f7ff fbf8 	bl	80033ac <HAL_RCC_GetPCLK1Freq>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	4413      	add	r3, r2
 8003bc4:	009a      	lsls	r2, r3, #2
 8003bc6:	441a      	add	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd2:	4a32      	ldr	r2, [pc, #200]	; (8003c9c <UART_SetConfig+0x22c>)
 8003bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd8:	095b      	lsrs	r3, r3, #5
 8003bda:	011c      	lsls	r4, r3, #4
 8003bdc:	f7ff fbe6 	bl	80033ac <HAL_RCC_GetPCLK1Freq>
 8003be0:	4602      	mov	r2, r0
 8003be2:	4613      	mov	r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	4413      	add	r3, r2
 8003be8:	009a      	lsls	r2, r3, #2
 8003bea:	441a      	add	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	fbb2 f5f3 	udiv	r5, r2, r3
 8003bf6:	f7ff fbd9 	bl	80033ac <HAL_RCC_GetPCLK1Freq>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	4413      	add	r3, r2
 8003c02:	009a      	lsls	r2, r3, #2
 8003c04:	441a      	add	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c10:	4a22      	ldr	r2, [pc, #136]	; (8003c9c <UART_SetConfig+0x22c>)
 8003c12:	fba2 2303 	umull	r2, r3, r2, r3
 8003c16:	095b      	lsrs	r3, r3, #5
 8003c18:	2264      	movs	r2, #100	; 0x64
 8003c1a:	fb02 f303 	mul.w	r3, r2, r3
 8003c1e:	1aeb      	subs	r3, r5, r3
 8003c20:	011b      	lsls	r3, r3, #4
 8003c22:	3332      	adds	r3, #50	; 0x32
 8003c24:	4a1d      	ldr	r2, [pc, #116]	; (8003c9c <UART_SetConfig+0x22c>)
 8003c26:	fba2 2303 	umull	r2, r3, r2, r3
 8003c2a:	095b      	lsrs	r3, r3, #5
 8003c2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c30:	441c      	add	r4, r3
 8003c32:	f7ff fbbb 	bl	80033ac <HAL_RCC_GetPCLK1Freq>
 8003c36:	4602      	mov	r2, r0
 8003c38:	4613      	mov	r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	4413      	add	r3, r2
 8003c3e:	009a      	lsls	r2, r3, #2
 8003c40:	441a      	add	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	fbb2 f5f3 	udiv	r5, r2, r3
 8003c4c:	f7ff fbae 	bl	80033ac <HAL_RCC_GetPCLK1Freq>
 8003c50:	4602      	mov	r2, r0
 8003c52:	4613      	mov	r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	4413      	add	r3, r2
 8003c58:	009a      	lsls	r2, r3, #2
 8003c5a:	441a      	add	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c66:	4a0d      	ldr	r2, [pc, #52]	; (8003c9c <UART_SetConfig+0x22c>)
 8003c68:	fba2 2303 	umull	r2, r3, r2, r3
 8003c6c:	095b      	lsrs	r3, r3, #5
 8003c6e:	2264      	movs	r2, #100	; 0x64
 8003c70:	fb02 f303 	mul.w	r3, r2, r3
 8003c74:	1aeb      	subs	r3, r5, r3
 8003c76:	011b      	lsls	r3, r3, #4
 8003c78:	3332      	adds	r3, #50	; 0x32
 8003c7a:	4a08      	ldr	r2, [pc, #32]	; (8003c9c <UART_SetConfig+0x22c>)
 8003c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c80:	095b      	lsrs	r3, r3, #5
 8003c82:	f003 020f 	and.w	r2, r3, #15
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4422      	add	r2, r4
 8003c8c:	609a      	str	r2, [r3, #8]
}
 8003c8e:	bf00      	nop
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bdb0      	pop	{r4, r5, r7, pc}
 8003c96:	bf00      	nop
 8003c98:	40013800 	.word	0x40013800
 8003c9c:	51eb851f 	.word	0x51eb851f

08003ca0 <FSMC_NORSRAM_Init>:
  * @param  Device: Pointer to NORSRAM device instance
  * @param  Init: Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef *Init)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_EXTENDED_MODE(Init->ExtendedMode));
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	6812      	ldr	r2, [r2, #0]
 8003cb8:	f023 0101 	bic.w	r1, r3, #1
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	2b08      	cmp	r3, #8
 8003cc8:	d132      	bne.n	8003d30 <FSMC_NORSRAM_Init+0x90>
  {
    MODIFY_REG(Device->BTCR[Init->NSBank], BCR_CLEAR_MASK, (uint32_t)(FSMC_NORSRAM_FLASH_ACCESS_ENABLE
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003cd4:	4b31      	ldr	r3, [pc, #196]	; (8003d9c <FSMC_NORSRAM_Init+0xfc>)
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	683a      	ldr	r2, [r7, #0]
 8003cda:	6851      	ldr	r1, [r2, #4]
 8003cdc:	683a      	ldr	r2, [r7, #0]
 8003cde:	6892      	ldr	r2, [r2, #8]
 8003ce0:	4311      	orrs	r1, r2
 8003ce2:	683a      	ldr	r2, [r7, #0]
 8003ce4:	68d2      	ldr	r2, [r2, #12]
 8003ce6:	4311      	orrs	r1, r2
 8003ce8:	683a      	ldr	r2, [r7, #0]
 8003cea:	6912      	ldr	r2, [r2, #16]
 8003cec:	4311      	orrs	r1, r2
 8003cee:	683a      	ldr	r2, [r7, #0]
 8003cf0:	6952      	ldr	r2, [r2, #20]
 8003cf2:	4311      	orrs	r1, r2
 8003cf4:	683a      	ldr	r2, [r7, #0]
 8003cf6:	6992      	ldr	r2, [r2, #24]
 8003cf8:	4311      	orrs	r1, r2
 8003cfa:	683a      	ldr	r2, [r7, #0]
 8003cfc:	69d2      	ldr	r2, [r2, #28]
 8003cfe:	4311      	orrs	r1, r2
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	6a12      	ldr	r2, [r2, #32]
 8003d04:	4311      	orrs	r1, r2
 8003d06:	683a      	ldr	r2, [r7, #0]
 8003d08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d0a:	4311      	orrs	r1, r2
 8003d0c:	683a      	ldr	r2, [r7, #0]
 8003d0e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003d10:	4311      	orrs	r1, r2
 8003d12:	683a      	ldr	r2, [r7, #0]
 8003d14:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003d16:	4311      	orrs	r1, r2
 8003d18:	683a      	ldr	r2, [r7, #0]
 8003d1a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	6812      	ldr	r2, [r2, #0]
 8003d24:	f043 0140 	orr.w	r1, r3, #64	; 0x40
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003d2e:	e02f      	b.n	8003d90 <FSMC_NORSRAM_Init+0xf0>
                                                                     )
              );
  }
  else
  {
    MODIFY_REG(Device->BTCR[Init->NSBank], BCR_CLEAR_MASK, (uint32_t)(FSMC_NORSRAM_FLASH_ACCESS_DISABLE
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003d3a:	4b18      	ldr	r3, [pc, #96]	; (8003d9c <FSMC_NORSRAM_Init+0xfc>)
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	683a      	ldr	r2, [r7, #0]
 8003d40:	6851      	ldr	r1, [r2, #4]
 8003d42:	683a      	ldr	r2, [r7, #0]
 8003d44:	6892      	ldr	r2, [r2, #8]
 8003d46:	4311      	orrs	r1, r2
 8003d48:	683a      	ldr	r2, [r7, #0]
 8003d4a:	68d2      	ldr	r2, [r2, #12]
 8003d4c:	4311      	orrs	r1, r2
 8003d4e:	683a      	ldr	r2, [r7, #0]
 8003d50:	6912      	ldr	r2, [r2, #16]
 8003d52:	4311      	orrs	r1, r2
 8003d54:	683a      	ldr	r2, [r7, #0]
 8003d56:	6952      	ldr	r2, [r2, #20]
 8003d58:	4311      	orrs	r1, r2
 8003d5a:	683a      	ldr	r2, [r7, #0]
 8003d5c:	6992      	ldr	r2, [r2, #24]
 8003d5e:	4311      	orrs	r1, r2
 8003d60:	683a      	ldr	r2, [r7, #0]
 8003d62:	69d2      	ldr	r2, [r2, #28]
 8003d64:	4311      	orrs	r1, r2
 8003d66:	683a      	ldr	r2, [r7, #0]
 8003d68:	6a12      	ldr	r2, [r2, #32]
 8003d6a:	4311      	orrs	r1, r2
 8003d6c:	683a      	ldr	r2, [r7, #0]
 8003d6e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d70:	4311      	orrs	r1, r2
 8003d72:	683a      	ldr	r2, [r7, #0]
 8003d74:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003d76:	4311      	orrs	r1, r2
 8003d78:	683a      	ldr	r2, [r7, #0]
 8003d7a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003d7c:	4311      	orrs	r1, r2
 8003d7e:	683a      	ldr	r2, [r7, #0]
 8003d80:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003d82:	4311      	orrs	r1, r2
 8003d84:	683a      	ldr	r2, [r7, #0]
 8003d86:	6812      	ldr	r2, [r2, #0]
 8003d88:	4319      	orrs	r1, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
               | Init->WriteBurst
                                                                     )
              );
  }

  return HAL_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	370c      	adds	r7, #12
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bc80      	pop	{r7}
 8003d9a:	4770      	bx	lr
 8003d9c:	fff70081 	.word	0xfff70081

08003da0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing: Pointer to NORSRAM Timing structure
  * @param  Bank: NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b085      	sub	sp, #20
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U],                                                        \
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	1c5a      	adds	r2, r3, #1
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003db6:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	011b      	lsls	r3, r3, #4
 8003dc4:	431a      	orrs	r2, r3
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	021b      	lsls	r3, r3, #8
 8003dcc:	431a      	orrs	r2, r3
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	041b      	lsls	r3, r3, #16
 8003dd4:	431a      	orrs	r2, r3
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	051b      	lsls	r3, r3, #20
 8003dde:	431a      	orrs	r2, r3
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	695b      	ldr	r3, [r3, #20]
 8003de4:	3b02      	subs	r3, #2
 8003de6:	061b      	lsls	r3, r3, #24
 8003de8:	431a      	orrs	r2, r3
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	3201      	adds	r2, #1
 8003df4:	4319      	orrs	r1, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                        ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos)       | \
                        (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)        | \
                        (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)        | \
                        (Timing->AccessMode)));

  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3714      	adds	r7, #20
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bc80      	pop	{r7}
 8003e06:	4770      	bx	lr

08003e08 <FSMC_NORSRAM_Extended_Timing_Init>:
  *            @arg FSMC_EXTENDED_MODE_DISABLE
  *            @arg FSMC_EXTENDED_MODE_ENABLE
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b085      	sub	sp, #20
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
 8003e14:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e1c:	d11d      	bne.n	8003e5a <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(STM32F101xE) || defined(STM32F103xE) || defined(STM32F101xG) || defined(STM32F103xG)
    MODIFY_REG(Device->BWTR[Bank],                                                      \
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003e26:	4b13      	ldr	r3, [pc, #76]	; (8003e74 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8003e28:	4013      	ands	r3, r2
 8003e2a:	68ba      	ldr	r2, [r7, #8]
 8003e2c:	6811      	ldr	r1, [r2, #0]
 8003e2e:	68ba      	ldr	r2, [r7, #8]
 8003e30:	6852      	ldr	r2, [r2, #4]
 8003e32:	0112      	lsls	r2, r2, #4
 8003e34:	4311      	orrs	r1, r2
 8003e36:	68ba      	ldr	r2, [r7, #8]
 8003e38:	6892      	ldr	r2, [r2, #8]
 8003e3a:	0212      	lsls	r2, r2, #8
 8003e3c:	4311      	orrs	r1, r2
 8003e3e:	68ba      	ldr	r2, [r7, #8]
 8003e40:	6992      	ldr	r2, [r2, #24]
 8003e42:	4311      	orrs	r1, r2
 8003e44:	68ba      	ldr	r2, [r7, #8]
 8003e46:	68d2      	ldr	r2, [r2, #12]
 8003e48:	0412      	lsls	r2, r2, #16
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	ea43 0102 	orr.w	r1, r3, r2
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003e58:	e005      	b.n	8003e66 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                          (((Timing->DataLatency) - 2U)  << FSMC_BWTRx_DATLAT_Pos)));
#endif /* STM32F101xE || STM32F103xE || STM32F101xG || STM32F103xG */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8003e62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3714      	adds	r7, #20
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bc80      	pop	{r7}
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	cff00000 	.word	0xcff00000

08003e78 <__errno>:
 8003e78:	4b01      	ldr	r3, [pc, #4]	; (8003e80 <__errno+0x8>)
 8003e7a:	6818      	ldr	r0, [r3, #0]
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	20000114 	.word	0x20000114

08003e84 <__libc_init_array>:
 8003e84:	b570      	push	{r4, r5, r6, lr}
 8003e86:	2600      	movs	r6, #0
 8003e88:	4d0c      	ldr	r5, [pc, #48]	; (8003ebc <__libc_init_array+0x38>)
 8003e8a:	4c0d      	ldr	r4, [pc, #52]	; (8003ec0 <__libc_init_array+0x3c>)
 8003e8c:	1b64      	subs	r4, r4, r5
 8003e8e:	10a4      	asrs	r4, r4, #2
 8003e90:	42a6      	cmp	r6, r4
 8003e92:	d109      	bne.n	8003ea8 <__libc_init_array+0x24>
 8003e94:	f000 ff2a 	bl	8004cec <_init>
 8003e98:	2600      	movs	r6, #0
 8003e9a:	4d0a      	ldr	r5, [pc, #40]	; (8003ec4 <__libc_init_array+0x40>)
 8003e9c:	4c0a      	ldr	r4, [pc, #40]	; (8003ec8 <__libc_init_array+0x44>)
 8003e9e:	1b64      	subs	r4, r4, r5
 8003ea0:	10a4      	asrs	r4, r4, #2
 8003ea2:	42a6      	cmp	r6, r4
 8003ea4:	d105      	bne.n	8003eb2 <__libc_init_array+0x2e>
 8003ea6:	bd70      	pop	{r4, r5, r6, pc}
 8003ea8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eac:	4798      	blx	r3
 8003eae:	3601      	adds	r6, #1
 8003eb0:	e7ee      	b.n	8003e90 <__libc_init_array+0xc>
 8003eb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eb6:	4798      	blx	r3
 8003eb8:	3601      	adds	r6, #1
 8003eba:	e7f2      	b.n	8003ea2 <__libc_init_array+0x1e>
 8003ebc:	080053c0 	.word	0x080053c0
 8003ec0:	080053c0 	.word	0x080053c0
 8003ec4:	080053c0 	.word	0x080053c0
 8003ec8:	080053c4 	.word	0x080053c4

08003ecc <memset>:
 8003ecc:	4603      	mov	r3, r0
 8003ece:	4402      	add	r2, r0
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d100      	bne.n	8003ed6 <memset+0xa>
 8003ed4:	4770      	bx	lr
 8003ed6:	f803 1b01 	strb.w	r1, [r3], #1
 8003eda:	e7f9      	b.n	8003ed0 <memset+0x4>

08003edc <pow>:
 8003edc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ee0:	4614      	mov	r4, r2
 8003ee2:	461d      	mov	r5, r3
 8003ee4:	4680      	mov	r8, r0
 8003ee6:	4689      	mov	r9, r1
 8003ee8:	f000 f886 	bl	8003ff8 <__ieee754_pow>
 8003eec:	4622      	mov	r2, r4
 8003eee:	4606      	mov	r6, r0
 8003ef0:	460f      	mov	r7, r1
 8003ef2:	462b      	mov	r3, r5
 8003ef4:	4620      	mov	r0, r4
 8003ef6:	4629      	mov	r1, r5
 8003ef8:	f7fc fdec 	bl	8000ad4 <__aeabi_dcmpun>
 8003efc:	bbc8      	cbnz	r0, 8003f72 <pow+0x96>
 8003efe:	2200      	movs	r2, #0
 8003f00:	2300      	movs	r3, #0
 8003f02:	4640      	mov	r0, r8
 8003f04:	4649      	mov	r1, r9
 8003f06:	f7fc fdb3 	bl	8000a70 <__aeabi_dcmpeq>
 8003f0a:	b1b8      	cbz	r0, 8003f3c <pow+0x60>
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	2300      	movs	r3, #0
 8003f10:	4620      	mov	r0, r4
 8003f12:	4629      	mov	r1, r5
 8003f14:	f7fc fdac 	bl	8000a70 <__aeabi_dcmpeq>
 8003f18:	2800      	cmp	r0, #0
 8003f1a:	d141      	bne.n	8003fa0 <pow+0xc4>
 8003f1c:	4620      	mov	r0, r4
 8003f1e:	4629      	mov	r1, r5
 8003f20:	f000 fe5f 	bl	8004be2 <finite>
 8003f24:	b328      	cbz	r0, 8003f72 <pow+0x96>
 8003f26:	2200      	movs	r2, #0
 8003f28:	2300      	movs	r3, #0
 8003f2a:	4620      	mov	r0, r4
 8003f2c:	4629      	mov	r1, r5
 8003f2e:	f7fc fda9 	bl	8000a84 <__aeabi_dcmplt>
 8003f32:	b1f0      	cbz	r0, 8003f72 <pow+0x96>
 8003f34:	f7ff ffa0 	bl	8003e78 <__errno>
 8003f38:	2322      	movs	r3, #34	; 0x22
 8003f3a:	e019      	b.n	8003f70 <pow+0x94>
 8003f3c:	4630      	mov	r0, r6
 8003f3e:	4639      	mov	r1, r7
 8003f40:	f000 fe4f 	bl	8004be2 <finite>
 8003f44:	b9c8      	cbnz	r0, 8003f7a <pow+0x9e>
 8003f46:	4640      	mov	r0, r8
 8003f48:	4649      	mov	r1, r9
 8003f4a:	f000 fe4a 	bl	8004be2 <finite>
 8003f4e:	b1a0      	cbz	r0, 8003f7a <pow+0x9e>
 8003f50:	4620      	mov	r0, r4
 8003f52:	4629      	mov	r1, r5
 8003f54:	f000 fe45 	bl	8004be2 <finite>
 8003f58:	b178      	cbz	r0, 8003f7a <pow+0x9e>
 8003f5a:	4632      	mov	r2, r6
 8003f5c:	463b      	mov	r3, r7
 8003f5e:	4630      	mov	r0, r6
 8003f60:	4639      	mov	r1, r7
 8003f62:	f7fc fdb7 	bl	8000ad4 <__aeabi_dcmpun>
 8003f66:	2800      	cmp	r0, #0
 8003f68:	d0e4      	beq.n	8003f34 <pow+0x58>
 8003f6a:	f7ff ff85 	bl	8003e78 <__errno>
 8003f6e:	2321      	movs	r3, #33	; 0x21
 8003f70:	6003      	str	r3, [r0, #0]
 8003f72:	4630      	mov	r0, r6
 8003f74:	4639      	mov	r1, r7
 8003f76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	4630      	mov	r0, r6
 8003f80:	4639      	mov	r1, r7
 8003f82:	f7fc fd75 	bl	8000a70 <__aeabi_dcmpeq>
 8003f86:	2800      	cmp	r0, #0
 8003f88:	d0f3      	beq.n	8003f72 <pow+0x96>
 8003f8a:	4640      	mov	r0, r8
 8003f8c:	4649      	mov	r1, r9
 8003f8e:	f000 fe28 	bl	8004be2 <finite>
 8003f92:	2800      	cmp	r0, #0
 8003f94:	d0ed      	beq.n	8003f72 <pow+0x96>
 8003f96:	4620      	mov	r0, r4
 8003f98:	4629      	mov	r1, r5
 8003f9a:	f000 fe22 	bl	8004be2 <finite>
 8003f9e:	e7c8      	b.n	8003f32 <pow+0x56>
 8003fa0:	2600      	movs	r6, #0
 8003fa2:	4f01      	ldr	r7, [pc, #4]	; (8003fa8 <pow+0xcc>)
 8003fa4:	e7e5      	b.n	8003f72 <pow+0x96>
 8003fa6:	bf00      	nop
 8003fa8:	3ff00000 	.word	0x3ff00000

08003fac <sqrt>:
 8003fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fae:	4606      	mov	r6, r0
 8003fb0:	460f      	mov	r7, r1
 8003fb2:	f000 fd37 	bl	8004a24 <__ieee754_sqrt>
 8003fb6:	4632      	mov	r2, r6
 8003fb8:	4604      	mov	r4, r0
 8003fba:	460d      	mov	r5, r1
 8003fbc:	463b      	mov	r3, r7
 8003fbe:	4630      	mov	r0, r6
 8003fc0:	4639      	mov	r1, r7
 8003fc2:	f7fc fd87 	bl	8000ad4 <__aeabi_dcmpun>
 8003fc6:	b990      	cbnz	r0, 8003fee <sqrt+0x42>
 8003fc8:	2200      	movs	r2, #0
 8003fca:	2300      	movs	r3, #0
 8003fcc:	4630      	mov	r0, r6
 8003fce:	4639      	mov	r1, r7
 8003fd0:	f7fc fd58 	bl	8000a84 <__aeabi_dcmplt>
 8003fd4:	b158      	cbz	r0, 8003fee <sqrt+0x42>
 8003fd6:	f7ff ff4f 	bl	8003e78 <__errno>
 8003fda:	2321      	movs	r3, #33	; 0x21
 8003fdc:	2200      	movs	r2, #0
 8003fde:	6003      	str	r3, [r0, #0]
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	4610      	mov	r0, r2
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	f7fc fc05 	bl	80007f4 <__aeabi_ddiv>
 8003fea:	4604      	mov	r4, r0
 8003fec:	460d      	mov	r5, r1
 8003fee:	4620      	mov	r0, r4
 8003ff0:	4629      	mov	r1, r5
 8003ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ff4:	0000      	movs	r0, r0
	...

08003ff8 <__ieee754_pow>:
 8003ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ffc:	b093      	sub	sp, #76	; 0x4c
 8003ffe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004002:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8004006:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800400a:	4689      	mov	r9, r1
 800400c:	ea56 0102 	orrs.w	r1, r6, r2
 8004010:	4680      	mov	r8, r0
 8004012:	d111      	bne.n	8004038 <__ieee754_pow+0x40>
 8004014:	1803      	adds	r3, r0, r0
 8004016:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800401a:	4152      	adcs	r2, r2
 800401c:	4299      	cmp	r1, r3
 800401e:	4b82      	ldr	r3, [pc, #520]	; (8004228 <__ieee754_pow+0x230>)
 8004020:	4193      	sbcs	r3, r2
 8004022:	f080 84b9 	bcs.w	8004998 <__ieee754_pow+0x9a0>
 8004026:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800402a:	4640      	mov	r0, r8
 800402c:	4649      	mov	r1, r9
 800402e:	f7fc f901 	bl	8000234 <__adddf3>
 8004032:	4683      	mov	fp, r0
 8004034:	468c      	mov	ip, r1
 8004036:	e06f      	b.n	8004118 <__ieee754_pow+0x120>
 8004038:	4b7c      	ldr	r3, [pc, #496]	; (800422c <__ieee754_pow+0x234>)
 800403a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800403e:	429c      	cmp	r4, r3
 8004040:	464d      	mov	r5, r9
 8004042:	4682      	mov	sl, r0
 8004044:	dc06      	bgt.n	8004054 <__ieee754_pow+0x5c>
 8004046:	d101      	bne.n	800404c <__ieee754_pow+0x54>
 8004048:	2800      	cmp	r0, #0
 800404a:	d1ec      	bne.n	8004026 <__ieee754_pow+0x2e>
 800404c:	429e      	cmp	r6, r3
 800404e:	dc01      	bgt.n	8004054 <__ieee754_pow+0x5c>
 8004050:	d10f      	bne.n	8004072 <__ieee754_pow+0x7a>
 8004052:	b172      	cbz	r2, 8004072 <__ieee754_pow+0x7a>
 8004054:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8004058:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800405c:	ea55 050a 	orrs.w	r5, r5, sl
 8004060:	d1e1      	bne.n	8004026 <__ieee754_pow+0x2e>
 8004062:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8004066:	18db      	adds	r3, r3, r3
 8004068:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800406c:	4152      	adcs	r2, r2
 800406e:	429d      	cmp	r5, r3
 8004070:	e7d5      	b.n	800401e <__ieee754_pow+0x26>
 8004072:	2d00      	cmp	r5, #0
 8004074:	da39      	bge.n	80040ea <__ieee754_pow+0xf2>
 8004076:	4b6e      	ldr	r3, [pc, #440]	; (8004230 <__ieee754_pow+0x238>)
 8004078:	429e      	cmp	r6, r3
 800407a:	dc52      	bgt.n	8004122 <__ieee754_pow+0x12a>
 800407c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8004080:	429e      	cmp	r6, r3
 8004082:	f340 849c 	ble.w	80049be <__ieee754_pow+0x9c6>
 8004086:	1533      	asrs	r3, r6, #20
 8004088:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800408c:	2b14      	cmp	r3, #20
 800408e:	dd0f      	ble.n	80040b0 <__ieee754_pow+0xb8>
 8004090:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8004094:	fa22 f103 	lsr.w	r1, r2, r3
 8004098:	fa01 f303 	lsl.w	r3, r1, r3
 800409c:	4293      	cmp	r3, r2
 800409e:	f040 848e 	bne.w	80049be <__ieee754_pow+0x9c6>
 80040a2:	f001 0101 	and.w	r1, r1, #1
 80040a6:	f1c1 0302 	rsb	r3, r1, #2
 80040aa:	9300      	str	r3, [sp, #0]
 80040ac:	b182      	cbz	r2, 80040d0 <__ieee754_pow+0xd8>
 80040ae:	e05d      	b.n	800416c <__ieee754_pow+0x174>
 80040b0:	2a00      	cmp	r2, #0
 80040b2:	d159      	bne.n	8004168 <__ieee754_pow+0x170>
 80040b4:	f1c3 0314 	rsb	r3, r3, #20
 80040b8:	fa46 f103 	asr.w	r1, r6, r3
 80040bc:	fa01 f303 	lsl.w	r3, r1, r3
 80040c0:	42b3      	cmp	r3, r6
 80040c2:	f040 8479 	bne.w	80049b8 <__ieee754_pow+0x9c0>
 80040c6:	f001 0101 	and.w	r1, r1, #1
 80040ca:	f1c1 0302 	rsb	r3, r1, #2
 80040ce:	9300      	str	r3, [sp, #0]
 80040d0:	4b58      	ldr	r3, [pc, #352]	; (8004234 <__ieee754_pow+0x23c>)
 80040d2:	429e      	cmp	r6, r3
 80040d4:	d132      	bne.n	800413c <__ieee754_pow+0x144>
 80040d6:	2f00      	cmp	r7, #0
 80040d8:	f280 846a 	bge.w	80049b0 <__ieee754_pow+0x9b8>
 80040dc:	4642      	mov	r2, r8
 80040de:	464b      	mov	r3, r9
 80040e0:	2000      	movs	r0, #0
 80040e2:	4954      	ldr	r1, [pc, #336]	; (8004234 <__ieee754_pow+0x23c>)
 80040e4:	f7fc fb86 	bl	80007f4 <__aeabi_ddiv>
 80040e8:	e7a3      	b.n	8004032 <__ieee754_pow+0x3a>
 80040ea:	2300      	movs	r3, #0
 80040ec:	9300      	str	r3, [sp, #0]
 80040ee:	2a00      	cmp	r2, #0
 80040f0:	d13c      	bne.n	800416c <__ieee754_pow+0x174>
 80040f2:	4b4e      	ldr	r3, [pc, #312]	; (800422c <__ieee754_pow+0x234>)
 80040f4:	429e      	cmp	r6, r3
 80040f6:	d1eb      	bne.n	80040d0 <__ieee754_pow+0xd8>
 80040f8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80040fc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8004100:	ea53 030a 	orrs.w	r3, r3, sl
 8004104:	f000 8448 	beq.w	8004998 <__ieee754_pow+0x9a0>
 8004108:	4b4b      	ldr	r3, [pc, #300]	; (8004238 <__ieee754_pow+0x240>)
 800410a:	429c      	cmp	r4, r3
 800410c:	dd0b      	ble.n	8004126 <__ieee754_pow+0x12e>
 800410e:	2f00      	cmp	r7, #0
 8004110:	f2c0 8448 	blt.w	80049a4 <__ieee754_pow+0x9ac>
 8004114:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8004118:	4658      	mov	r0, fp
 800411a:	4661      	mov	r1, ip
 800411c:	b013      	add	sp, #76	; 0x4c
 800411e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004122:	2302      	movs	r3, #2
 8004124:	e7e2      	b.n	80040ec <__ieee754_pow+0xf4>
 8004126:	2f00      	cmp	r7, #0
 8004128:	f04f 0b00 	mov.w	fp, #0
 800412c:	f04f 0c00 	mov.w	ip, #0
 8004130:	daf2      	bge.n	8004118 <__ieee754_pow+0x120>
 8004132:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8004136:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800413a:	e7ed      	b.n	8004118 <__ieee754_pow+0x120>
 800413c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8004140:	d106      	bne.n	8004150 <__ieee754_pow+0x158>
 8004142:	4642      	mov	r2, r8
 8004144:	464b      	mov	r3, r9
 8004146:	4640      	mov	r0, r8
 8004148:	4649      	mov	r1, r9
 800414a:	f7fc fa29 	bl	80005a0 <__aeabi_dmul>
 800414e:	e770      	b.n	8004032 <__ieee754_pow+0x3a>
 8004150:	4b3a      	ldr	r3, [pc, #232]	; (800423c <__ieee754_pow+0x244>)
 8004152:	429f      	cmp	r7, r3
 8004154:	d10a      	bne.n	800416c <__ieee754_pow+0x174>
 8004156:	2d00      	cmp	r5, #0
 8004158:	db08      	blt.n	800416c <__ieee754_pow+0x174>
 800415a:	4640      	mov	r0, r8
 800415c:	4649      	mov	r1, r9
 800415e:	b013      	add	sp, #76	; 0x4c
 8004160:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004164:	f000 bc5e 	b.w	8004a24 <__ieee754_sqrt>
 8004168:	2300      	movs	r3, #0
 800416a:	9300      	str	r3, [sp, #0]
 800416c:	4640      	mov	r0, r8
 800416e:	4649      	mov	r1, r9
 8004170:	f000 fd34 	bl	8004bdc <fabs>
 8004174:	4683      	mov	fp, r0
 8004176:	468c      	mov	ip, r1
 8004178:	f1ba 0f00 	cmp.w	sl, #0
 800417c:	d128      	bne.n	80041d0 <__ieee754_pow+0x1d8>
 800417e:	b124      	cbz	r4, 800418a <__ieee754_pow+0x192>
 8004180:	4b2c      	ldr	r3, [pc, #176]	; (8004234 <__ieee754_pow+0x23c>)
 8004182:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8004186:	429a      	cmp	r2, r3
 8004188:	d122      	bne.n	80041d0 <__ieee754_pow+0x1d8>
 800418a:	2f00      	cmp	r7, #0
 800418c:	da07      	bge.n	800419e <__ieee754_pow+0x1a6>
 800418e:	465a      	mov	r2, fp
 8004190:	4663      	mov	r3, ip
 8004192:	2000      	movs	r0, #0
 8004194:	4927      	ldr	r1, [pc, #156]	; (8004234 <__ieee754_pow+0x23c>)
 8004196:	f7fc fb2d 	bl	80007f4 <__aeabi_ddiv>
 800419a:	4683      	mov	fp, r0
 800419c:	468c      	mov	ip, r1
 800419e:	2d00      	cmp	r5, #0
 80041a0:	daba      	bge.n	8004118 <__ieee754_pow+0x120>
 80041a2:	9b00      	ldr	r3, [sp, #0]
 80041a4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80041a8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80041ac:	4323      	orrs	r3, r4
 80041ae:	d108      	bne.n	80041c2 <__ieee754_pow+0x1ca>
 80041b0:	465a      	mov	r2, fp
 80041b2:	4663      	mov	r3, ip
 80041b4:	4658      	mov	r0, fp
 80041b6:	4661      	mov	r1, ip
 80041b8:	f7fc f83a 	bl	8000230 <__aeabi_dsub>
 80041bc:	4602      	mov	r2, r0
 80041be:	460b      	mov	r3, r1
 80041c0:	e790      	b.n	80040e4 <__ieee754_pow+0xec>
 80041c2:	9b00      	ldr	r3, [sp, #0]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d1a7      	bne.n	8004118 <__ieee754_pow+0x120>
 80041c8:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 80041cc:	469c      	mov	ip, r3
 80041ce:	e7a3      	b.n	8004118 <__ieee754_pow+0x120>
 80041d0:	0feb      	lsrs	r3, r5, #31
 80041d2:	3b01      	subs	r3, #1
 80041d4:	930c      	str	r3, [sp, #48]	; 0x30
 80041d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80041d8:	9b00      	ldr	r3, [sp, #0]
 80041da:	4313      	orrs	r3, r2
 80041dc:	d104      	bne.n	80041e8 <__ieee754_pow+0x1f0>
 80041de:	4642      	mov	r2, r8
 80041e0:	464b      	mov	r3, r9
 80041e2:	4640      	mov	r0, r8
 80041e4:	4649      	mov	r1, r9
 80041e6:	e7e7      	b.n	80041b8 <__ieee754_pow+0x1c0>
 80041e8:	4b15      	ldr	r3, [pc, #84]	; (8004240 <__ieee754_pow+0x248>)
 80041ea:	429e      	cmp	r6, r3
 80041ec:	f340 80f6 	ble.w	80043dc <__ieee754_pow+0x3e4>
 80041f0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80041f4:	429e      	cmp	r6, r3
 80041f6:	4b10      	ldr	r3, [pc, #64]	; (8004238 <__ieee754_pow+0x240>)
 80041f8:	dd09      	ble.n	800420e <__ieee754_pow+0x216>
 80041fa:	429c      	cmp	r4, r3
 80041fc:	dc0c      	bgt.n	8004218 <__ieee754_pow+0x220>
 80041fe:	2f00      	cmp	r7, #0
 8004200:	da0c      	bge.n	800421c <__ieee754_pow+0x224>
 8004202:	2000      	movs	r0, #0
 8004204:	b013      	add	sp, #76	; 0x4c
 8004206:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800420a:	f000 bce2 	b.w	8004bd2 <__math_oflow>
 800420e:	429c      	cmp	r4, r3
 8004210:	dbf5      	blt.n	80041fe <__ieee754_pow+0x206>
 8004212:	4b08      	ldr	r3, [pc, #32]	; (8004234 <__ieee754_pow+0x23c>)
 8004214:	429c      	cmp	r4, r3
 8004216:	dd15      	ble.n	8004244 <__ieee754_pow+0x24c>
 8004218:	2f00      	cmp	r7, #0
 800421a:	dcf2      	bgt.n	8004202 <__ieee754_pow+0x20a>
 800421c:	2000      	movs	r0, #0
 800421e:	b013      	add	sp, #76	; 0x4c
 8004220:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004224:	f000 bcd0 	b.w	8004bc8 <__math_uflow>
 8004228:	fff00000 	.word	0xfff00000
 800422c:	7ff00000 	.word	0x7ff00000
 8004230:	433fffff 	.word	0x433fffff
 8004234:	3ff00000 	.word	0x3ff00000
 8004238:	3fefffff 	.word	0x3fefffff
 800423c:	3fe00000 	.word	0x3fe00000
 8004240:	41e00000 	.word	0x41e00000
 8004244:	4661      	mov	r1, ip
 8004246:	2200      	movs	r2, #0
 8004248:	4658      	mov	r0, fp
 800424a:	4b5f      	ldr	r3, [pc, #380]	; (80043c8 <__ieee754_pow+0x3d0>)
 800424c:	f7fb fff0 	bl	8000230 <__aeabi_dsub>
 8004250:	a355      	add	r3, pc, #340	; (adr r3, 80043a8 <__ieee754_pow+0x3b0>)
 8004252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004256:	4604      	mov	r4, r0
 8004258:	460d      	mov	r5, r1
 800425a:	f7fc f9a1 	bl	80005a0 <__aeabi_dmul>
 800425e:	a354      	add	r3, pc, #336	; (adr r3, 80043b0 <__ieee754_pow+0x3b8>)
 8004260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004264:	4606      	mov	r6, r0
 8004266:	460f      	mov	r7, r1
 8004268:	4620      	mov	r0, r4
 800426a:	4629      	mov	r1, r5
 800426c:	f7fc f998 	bl	80005a0 <__aeabi_dmul>
 8004270:	2200      	movs	r2, #0
 8004272:	4682      	mov	sl, r0
 8004274:	468b      	mov	fp, r1
 8004276:	4620      	mov	r0, r4
 8004278:	4629      	mov	r1, r5
 800427a:	4b54      	ldr	r3, [pc, #336]	; (80043cc <__ieee754_pow+0x3d4>)
 800427c:	f7fc f990 	bl	80005a0 <__aeabi_dmul>
 8004280:	4602      	mov	r2, r0
 8004282:	460b      	mov	r3, r1
 8004284:	a14c      	add	r1, pc, #304	; (adr r1, 80043b8 <__ieee754_pow+0x3c0>)
 8004286:	e9d1 0100 	ldrd	r0, r1, [r1]
 800428a:	f7fb ffd1 	bl	8000230 <__aeabi_dsub>
 800428e:	4622      	mov	r2, r4
 8004290:	462b      	mov	r3, r5
 8004292:	f7fc f985 	bl	80005a0 <__aeabi_dmul>
 8004296:	4602      	mov	r2, r0
 8004298:	460b      	mov	r3, r1
 800429a:	2000      	movs	r0, #0
 800429c:	494c      	ldr	r1, [pc, #304]	; (80043d0 <__ieee754_pow+0x3d8>)
 800429e:	f7fb ffc7 	bl	8000230 <__aeabi_dsub>
 80042a2:	4622      	mov	r2, r4
 80042a4:	462b      	mov	r3, r5
 80042a6:	4680      	mov	r8, r0
 80042a8:	4689      	mov	r9, r1
 80042aa:	4620      	mov	r0, r4
 80042ac:	4629      	mov	r1, r5
 80042ae:	f7fc f977 	bl	80005a0 <__aeabi_dmul>
 80042b2:	4602      	mov	r2, r0
 80042b4:	460b      	mov	r3, r1
 80042b6:	4640      	mov	r0, r8
 80042b8:	4649      	mov	r1, r9
 80042ba:	f7fc f971 	bl	80005a0 <__aeabi_dmul>
 80042be:	a340      	add	r3, pc, #256	; (adr r3, 80043c0 <__ieee754_pow+0x3c8>)
 80042c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c4:	f7fc f96c 	bl	80005a0 <__aeabi_dmul>
 80042c8:	4602      	mov	r2, r0
 80042ca:	460b      	mov	r3, r1
 80042cc:	4650      	mov	r0, sl
 80042ce:	4659      	mov	r1, fp
 80042d0:	f7fb ffae 	bl	8000230 <__aeabi_dsub>
 80042d4:	f04f 0a00 	mov.w	sl, #0
 80042d8:	4602      	mov	r2, r0
 80042da:	460b      	mov	r3, r1
 80042dc:	4604      	mov	r4, r0
 80042de:	460d      	mov	r5, r1
 80042e0:	4630      	mov	r0, r6
 80042e2:	4639      	mov	r1, r7
 80042e4:	f7fb ffa6 	bl	8000234 <__adddf3>
 80042e8:	4632      	mov	r2, r6
 80042ea:	463b      	mov	r3, r7
 80042ec:	4650      	mov	r0, sl
 80042ee:	468b      	mov	fp, r1
 80042f0:	f7fb ff9e 	bl	8000230 <__aeabi_dsub>
 80042f4:	4602      	mov	r2, r0
 80042f6:	460b      	mov	r3, r1
 80042f8:	4620      	mov	r0, r4
 80042fa:	4629      	mov	r1, r5
 80042fc:	f7fb ff98 	bl	8000230 <__aeabi_dsub>
 8004300:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004304:	9b00      	ldr	r3, [sp, #0]
 8004306:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004308:	3b01      	subs	r3, #1
 800430a:	4313      	orrs	r3, r2
 800430c:	f04f 0600 	mov.w	r6, #0
 8004310:	f04f 0200 	mov.w	r2, #0
 8004314:	bf0c      	ite	eq
 8004316:	4b2f      	ldreq	r3, [pc, #188]	; (80043d4 <__ieee754_pow+0x3dc>)
 8004318:	4b2b      	ldrne	r3, [pc, #172]	; (80043c8 <__ieee754_pow+0x3d0>)
 800431a:	4604      	mov	r4, r0
 800431c:	460d      	mov	r5, r1
 800431e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004322:	e9cd 2300 	strd	r2, r3, [sp]
 8004326:	4632      	mov	r2, r6
 8004328:	463b      	mov	r3, r7
 800432a:	f7fb ff81 	bl	8000230 <__aeabi_dsub>
 800432e:	4652      	mov	r2, sl
 8004330:	465b      	mov	r3, fp
 8004332:	f7fc f935 	bl	80005a0 <__aeabi_dmul>
 8004336:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800433a:	4680      	mov	r8, r0
 800433c:	4689      	mov	r9, r1
 800433e:	4620      	mov	r0, r4
 8004340:	4629      	mov	r1, r5
 8004342:	f7fc f92d 	bl	80005a0 <__aeabi_dmul>
 8004346:	4602      	mov	r2, r0
 8004348:	460b      	mov	r3, r1
 800434a:	4640      	mov	r0, r8
 800434c:	4649      	mov	r1, r9
 800434e:	f7fb ff71 	bl	8000234 <__adddf3>
 8004352:	4632      	mov	r2, r6
 8004354:	463b      	mov	r3, r7
 8004356:	4680      	mov	r8, r0
 8004358:	4689      	mov	r9, r1
 800435a:	4650      	mov	r0, sl
 800435c:	4659      	mov	r1, fp
 800435e:	f7fc f91f 	bl	80005a0 <__aeabi_dmul>
 8004362:	4604      	mov	r4, r0
 8004364:	460d      	mov	r5, r1
 8004366:	460b      	mov	r3, r1
 8004368:	4602      	mov	r2, r0
 800436a:	4649      	mov	r1, r9
 800436c:	4640      	mov	r0, r8
 800436e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004372:	f7fb ff5f 	bl	8000234 <__adddf3>
 8004376:	4b18      	ldr	r3, [pc, #96]	; (80043d8 <__ieee754_pow+0x3e0>)
 8004378:	4682      	mov	sl, r0
 800437a:	4299      	cmp	r1, r3
 800437c:	460f      	mov	r7, r1
 800437e:	460e      	mov	r6, r1
 8004380:	f340 82e5 	ble.w	800494e <__ieee754_pow+0x956>
 8004384:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8004388:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800438c:	4303      	orrs	r3, r0
 800438e:	f000 81df 	beq.w	8004750 <__ieee754_pow+0x758>
 8004392:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004396:	2200      	movs	r2, #0
 8004398:	2300      	movs	r3, #0
 800439a:	f7fc fb73 	bl	8000a84 <__aeabi_dcmplt>
 800439e:	3800      	subs	r0, #0
 80043a0:	bf18      	it	ne
 80043a2:	2001      	movne	r0, #1
 80043a4:	e72e      	b.n	8004204 <__ieee754_pow+0x20c>
 80043a6:	bf00      	nop
 80043a8:	60000000 	.word	0x60000000
 80043ac:	3ff71547 	.word	0x3ff71547
 80043b0:	f85ddf44 	.word	0xf85ddf44
 80043b4:	3e54ae0b 	.word	0x3e54ae0b
 80043b8:	55555555 	.word	0x55555555
 80043bc:	3fd55555 	.word	0x3fd55555
 80043c0:	652b82fe 	.word	0x652b82fe
 80043c4:	3ff71547 	.word	0x3ff71547
 80043c8:	3ff00000 	.word	0x3ff00000
 80043cc:	3fd00000 	.word	0x3fd00000
 80043d0:	3fe00000 	.word	0x3fe00000
 80043d4:	bff00000 	.word	0xbff00000
 80043d8:	408fffff 	.word	0x408fffff
 80043dc:	4bd2      	ldr	r3, [pc, #840]	; (8004728 <__ieee754_pow+0x730>)
 80043de:	2200      	movs	r2, #0
 80043e0:	402b      	ands	r3, r5
 80043e2:	b943      	cbnz	r3, 80043f6 <__ieee754_pow+0x3fe>
 80043e4:	4658      	mov	r0, fp
 80043e6:	4661      	mov	r1, ip
 80043e8:	4bd0      	ldr	r3, [pc, #832]	; (800472c <__ieee754_pow+0x734>)
 80043ea:	f7fc f8d9 	bl	80005a0 <__aeabi_dmul>
 80043ee:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80043f2:	4683      	mov	fp, r0
 80043f4:	460c      	mov	r4, r1
 80043f6:	1523      	asrs	r3, r4, #20
 80043f8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80043fc:	4413      	add	r3, r2
 80043fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8004400:	4bcb      	ldr	r3, [pc, #812]	; (8004730 <__ieee754_pow+0x738>)
 8004402:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004406:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800440a:	429c      	cmp	r4, r3
 800440c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004410:	dd08      	ble.n	8004424 <__ieee754_pow+0x42c>
 8004412:	4bc8      	ldr	r3, [pc, #800]	; (8004734 <__ieee754_pow+0x73c>)
 8004414:	429c      	cmp	r4, r3
 8004416:	f340 8199 	ble.w	800474c <__ieee754_pow+0x754>
 800441a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800441c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8004420:	3301      	adds	r3, #1
 8004422:	930b      	str	r3, [sp, #44]	; 0x2c
 8004424:	2600      	movs	r6, #0
 8004426:	00f3      	lsls	r3, r6, #3
 8004428:	930d      	str	r3, [sp, #52]	; 0x34
 800442a:	4bc3      	ldr	r3, [pc, #780]	; (8004738 <__ieee754_pow+0x740>)
 800442c:	4658      	mov	r0, fp
 800442e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004432:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004436:	4629      	mov	r1, r5
 8004438:	461a      	mov	r2, r3
 800443a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800443e:	4623      	mov	r3, r4
 8004440:	f7fb fef6 	bl	8000230 <__aeabi_dsub>
 8004444:	46da      	mov	sl, fp
 8004446:	462b      	mov	r3, r5
 8004448:	4652      	mov	r2, sl
 800444a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800444e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004452:	f7fb feef 	bl	8000234 <__adddf3>
 8004456:	4602      	mov	r2, r0
 8004458:	460b      	mov	r3, r1
 800445a:	2000      	movs	r0, #0
 800445c:	49b7      	ldr	r1, [pc, #732]	; (800473c <__ieee754_pow+0x744>)
 800445e:	f7fc f9c9 	bl	80007f4 <__aeabi_ddiv>
 8004462:	4602      	mov	r2, r0
 8004464:	460b      	mov	r3, r1
 8004466:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800446a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800446e:	f7fc f897 	bl	80005a0 <__aeabi_dmul>
 8004472:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004476:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800447a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800447e:	2300      	movs	r3, #0
 8004480:	2200      	movs	r2, #0
 8004482:	46ab      	mov	fp, r5
 8004484:	106d      	asrs	r5, r5, #1
 8004486:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800448a:	9304      	str	r3, [sp, #16]
 800448c:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8004490:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004494:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8004498:	4640      	mov	r0, r8
 800449a:	4649      	mov	r1, r9
 800449c:	4614      	mov	r4, r2
 800449e:	461d      	mov	r5, r3
 80044a0:	f7fc f87e 	bl	80005a0 <__aeabi_dmul>
 80044a4:	4602      	mov	r2, r0
 80044a6:	460b      	mov	r3, r1
 80044a8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80044ac:	f7fb fec0 	bl	8000230 <__aeabi_dsub>
 80044b0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80044b4:	4606      	mov	r6, r0
 80044b6:	460f      	mov	r7, r1
 80044b8:	4620      	mov	r0, r4
 80044ba:	4629      	mov	r1, r5
 80044bc:	f7fb feb8 	bl	8000230 <__aeabi_dsub>
 80044c0:	4602      	mov	r2, r0
 80044c2:	460b      	mov	r3, r1
 80044c4:	4650      	mov	r0, sl
 80044c6:	4659      	mov	r1, fp
 80044c8:	f7fb feb2 	bl	8000230 <__aeabi_dsub>
 80044cc:	4642      	mov	r2, r8
 80044ce:	464b      	mov	r3, r9
 80044d0:	f7fc f866 	bl	80005a0 <__aeabi_dmul>
 80044d4:	4602      	mov	r2, r0
 80044d6:	460b      	mov	r3, r1
 80044d8:	4630      	mov	r0, r6
 80044da:	4639      	mov	r1, r7
 80044dc:	f7fb fea8 	bl	8000230 <__aeabi_dsub>
 80044e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80044e4:	f7fc f85c 	bl	80005a0 <__aeabi_dmul>
 80044e8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80044ec:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80044f0:	4610      	mov	r0, r2
 80044f2:	4619      	mov	r1, r3
 80044f4:	f7fc f854 	bl	80005a0 <__aeabi_dmul>
 80044f8:	a379      	add	r3, pc, #484	; (adr r3, 80046e0 <__ieee754_pow+0x6e8>)
 80044fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044fe:	4604      	mov	r4, r0
 8004500:	460d      	mov	r5, r1
 8004502:	f7fc f84d 	bl	80005a0 <__aeabi_dmul>
 8004506:	a378      	add	r3, pc, #480	; (adr r3, 80046e8 <__ieee754_pow+0x6f0>)
 8004508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800450c:	f7fb fe92 	bl	8000234 <__adddf3>
 8004510:	4622      	mov	r2, r4
 8004512:	462b      	mov	r3, r5
 8004514:	f7fc f844 	bl	80005a0 <__aeabi_dmul>
 8004518:	a375      	add	r3, pc, #468	; (adr r3, 80046f0 <__ieee754_pow+0x6f8>)
 800451a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800451e:	f7fb fe89 	bl	8000234 <__adddf3>
 8004522:	4622      	mov	r2, r4
 8004524:	462b      	mov	r3, r5
 8004526:	f7fc f83b 	bl	80005a0 <__aeabi_dmul>
 800452a:	a373      	add	r3, pc, #460	; (adr r3, 80046f8 <__ieee754_pow+0x700>)
 800452c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004530:	f7fb fe80 	bl	8000234 <__adddf3>
 8004534:	4622      	mov	r2, r4
 8004536:	462b      	mov	r3, r5
 8004538:	f7fc f832 	bl	80005a0 <__aeabi_dmul>
 800453c:	a370      	add	r3, pc, #448	; (adr r3, 8004700 <__ieee754_pow+0x708>)
 800453e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004542:	f7fb fe77 	bl	8000234 <__adddf3>
 8004546:	4622      	mov	r2, r4
 8004548:	462b      	mov	r3, r5
 800454a:	f7fc f829 	bl	80005a0 <__aeabi_dmul>
 800454e:	a36e      	add	r3, pc, #440	; (adr r3, 8004708 <__ieee754_pow+0x710>)
 8004550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004554:	f7fb fe6e 	bl	8000234 <__adddf3>
 8004558:	4622      	mov	r2, r4
 800455a:	4606      	mov	r6, r0
 800455c:	460f      	mov	r7, r1
 800455e:	462b      	mov	r3, r5
 8004560:	4620      	mov	r0, r4
 8004562:	4629      	mov	r1, r5
 8004564:	f7fc f81c 	bl	80005a0 <__aeabi_dmul>
 8004568:	4602      	mov	r2, r0
 800456a:	460b      	mov	r3, r1
 800456c:	4630      	mov	r0, r6
 800456e:	4639      	mov	r1, r7
 8004570:	f7fc f816 	bl	80005a0 <__aeabi_dmul>
 8004574:	4604      	mov	r4, r0
 8004576:	460d      	mov	r5, r1
 8004578:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800457c:	4642      	mov	r2, r8
 800457e:	464b      	mov	r3, r9
 8004580:	f7fb fe58 	bl	8000234 <__adddf3>
 8004584:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004588:	f7fc f80a 	bl	80005a0 <__aeabi_dmul>
 800458c:	4622      	mov	r2, r4
 800458e:	462b      	mov	r3, r5
 8004590:	f7fb fe50 	bl	8000234 <__adddf3>
 8004594:	4642      	mov	r2, r8
 8004596:	4606      	mov	r6, r0
 8004598:	460f      	mov	r7, r1
 800459a:	464b      	mov	r3, r9
 800459c:	4640      	mov	r0, r8
 800459e:	4649      	mov	r1, r9
 80045a0:	f7fb fffe 	bl	80005a0 <__aeabi_dmul>
 80045a4:	2200      	movs	r2, #0
 80045a6:	4b66      	ldr	r3, [pc, #408]	; (8004740 <__ieee754_pow+0x748>)
 80045a8:	4682      	mov	sl, r0
 80045aa:	468b      	mov	fp, r1
 80045ac:	f7fb fe42 	bl	8000234 <__adddf3>
 80045b0:	4632      	mov	r2, r6
 80045b2:	463b      	mov	r3, r7
 80045b4:	f7fb fe3e 	bl	8000234 <__adddf3>
 80045b8:	2400      	movs	r4, #0
 80045ba:	460d      	mov	r5, r1
 80045bc:	4622      	mov	r2, r4
 80045be:	460b      	mov	r3, r1
 80045c0:	4640      	mov	r0, r8
 80045c2:	4649      	mov	r1, r9
 80045c4:	f7fb ffec 	bl	80005a0 <__aeabi_dmul>
 80045c8:	2200      	movs	r2, #0
 80045ca:	4680      	mov	r8, r0
 80045cc:	4689      	mov	r9, r1
 80045ce:	4620      	mov	r0, r4
 80045d0:	4629      	mov	r1, r5
 80045d2:	4b5b      	ldr	r3, [pc, #364]	; (8004740 <__ieee754_pow+0x748>)
 80045d4:	f7fb fe2c 	bl	8000230 <__aeabi_dsub>
 80045d8:	4652      	mov	r2, sl
 80045da:	465b      	mov	r3, fp
 80045dc:	f7fb fe28 	bl	8000230 <__aeabi_dsub>
 80045e0:	4602      	mov	r2, r0
 80045e2:	460b      	mov	r3, r1
 80045e4:	4630      	mov	r0, r6
 80045e6:	4639      	mov	r1, r7
 80045e8:	f7fb fe22 	bl	8000230 <__aeabi_dsub>
 80045ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80045f0:	f7fb ffd6 	bl	80005a0 <__aeabi_dmul>
 80045f4:	4622      	mov	r2, r4
 80045f6:	4606      	mov	r6, r0
 80045f8:	460f      	mov	r7, r1
 80045fa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80045fe:	462b      	mov	r3, r5
 8004600:	f7fb ffce 	bl	80005a0 <__aeabi_dmul>
 8004604:	4602      	mov	r2, r0
 8004606:	460b      	mov	r3, r1
 8004608:	4630      	mov	r0, r6
 800460a:	4639      	mov	r1, r7
 800460c:	f7fb fe12 	bl	8000234 <__adddf3>
 8004610:	2400      	movs	r4, #0
 8004612:	4606      	mov	r6, r0
 8004614:	460f      	mov	r7, r1
 8004616:	4602      	mov	r2, r0
 8004618:	460b      	mov	r3, r1
 800461a:	4640      	mov	r0, r8
 800461c:	4649      	mov	r1, r9
 800461e:	f7fb fe09 	bl	8000234 <__adddf3>
 8004622:	a33b      	add	r3, pc, #236	; (adr r3, 8004710 <__ieee754_pow+0x718>)
 8004624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004628:	4620      	mov	r0, r4
 800462a:	460d      	mov	r5, r1
 800462c:	f7fb ffb8 	bl	80005a0 <__aeabi_dmul>
 8004630:	4642      	mov	r2, r8
 8004632:	464b      	mov	r3, r9
 8004634:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004638:	4620      	mov	r0, r4
 800463a:	4629      	mov	r1, r5
 800463c:	f7fb fdf8 	bl	8000230 <__aeabi_dsub>
 8004640:	4602      	mov	r2, r0
 8004642:	460b      	mov	r3, r1
 8004644:	4630      	mov	r0, r6
 8004646:	4639      	mov	r1, r7
 8004648:	f7fb fdf2 	bl	8000230 <__aeabi_dsub>
 800464c:	a332      	add	r3, pc, #200	; (adr r3, 8004718 <__ieee754_pow+0x720>)
 800464e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004652:	f7fb ffa5 	bl	80005a0 <__aeabi_dmul>
 8004656:	a332      	add	r3, pc, #200	; (adr r3, 8004720 <__ieee754_pow+0x728>)
 8004658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800465c:	4606      	mov	r6, r0
 800465e:	460f      	mov	r7, r1
 8004660:	4620      	mov	r0, r4
 8004662:	4629      	mov	r1, r5
 8004664:	f7fb ff9c 	bl	80005a0 <__aeabi_dmul>
 8004668:	4602      	mov	r2, r0
 800466a:	460b      	mov	r3, r1
 800466c:	4630      	mov	r0, r6
 800466e:	4639      	mov	r1, r7
 8004670:	f7fb fde0 	bl	8000234 <__adddf3>
 8004674:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004676:	4b33      	ldr	r3, [pc, #204]	; (8004744 <__ieee754_pow+0x74c>)
 8004678:	f04f 0a00 	mov.w	sl, #0
 800467c:	4413      	add	r3, r2
 800467e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004682:	f7fb fdd7 	bl	8000234 <__adddf3>
 8004686:	4680      	mov	r8, r0
 8004688:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800468a:	4689      	mov	r9, r1
 800468c:	f7fb ff1e 	bl	80004cc <__aeabi_i2d>
 8004690:	4604      	mov	r4, r0
 8004692:	460d      	mov	r5, r1
 8004694:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004696:	4b2c      	ldr	r3, [pc, #176]	; (8004748 <__ieee754_pow+0x750>)
 8004698:	4413      	add	r3, r2
 800469a:	e9d3 6700 	ldrd	r6, r7, [r3]
 800469e:	4642      	mov	r2, r8
 80046a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80046a4:	464b      	mov	r3, r9
 80046a6:	f7fb fdc5 	bl	8000234 <__adddf3>
 80046aa:	4632      	mov	r2, r6
 80046ac:	463b      	mov	r3, r7
 80046ae:	f7fb fdc1 	bl	8000234 <__adddf3>
 80046b2:	4622      	mov	r2, r4
 80046b4:	462b      	mov	r3, r5
 80046b6:	f7fb fdbd 	bl	8000234 <__adddf3>
 80046ba:	4622      	mov	r2, r4
 80046bc:	462b      	mov	r3, r5
 80046be:	4650      	mov	r0, sl
 80046c0:	468b      	mov	fp, r1
 80046c2:	f7fb fdb5 	bl	8000230 <__aeabi_dsub>
 80046c6:	4632      	mov	r2, r6
 80046c8:	463b      	mov	r3, r7
 80046ca:	f7fb fdb1 	bl	8000230 <__aeabi_dsub>
 80046ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80046d2:	f7fb fdad 	bl	8000230 <__aeabi_dsub>
 80046d6:	4602      	mov	r2, r0
 80046d8:	460b      	mov	r3, r1
 80046da:	4640      	mov	r0, r8
 80046dc:	4649      	mov	r1, r9
 80046de:	e60d      	b.n	80042fc <__ieee754_pow+0x304>
 80046e0:	4a454eef 	.word	0x4a454eef
 80046e4:	3fca7e28 	.word	0x3fca7e28
 80046e8:	93c9db65 	.word	0x93c9db65
 80046ec:	3fcd864a 	.word	0x3fcd864a
 80046f0:	a91d4101 	.word	0xa91d4101
 80046f4:	3fd17460 	.word	0x3fd17460
 80046f8:	518f264d 	.word	0x518f264d
 80046fc:	3fd55555 	.word	0x3fd55555
 8004700:	db6fabff 	.word	0xdb6fabff
 8004704:	3fdb6db6 	.word	0x3fdb6db6
 8004708:	33333303 	.word	0x33333303
 800470c:	3fe33333 	.word	0x3fe33333
 8004710:	e0000000 	.word	0xe0000000
 8004714:	3feec709 	.word	0x3feec709
 8004718:	dc3a03fd 	.word	0xdc3a03fd
 800471c:	3feec709 	.word	0x3feec709
 8004720:	145b01f5 	.word	0x145b01f5
 8004724:	be3e2fe0 	.word	0xbe3e2fe0
 8004728:	7ff00000 	.word	0x7ff00000
 800472c:	43400000 	.word	0x43400000
 8004730:	0003988e 	.word	0x0003988e
 8004734:	000bb679 	.word	0x000bb679
 8004738:	08005390 	.word	0x08005390
 800473c:	3ff00000 	.word	0x3ff00000
 8004740:	40080000 	.word	0x40080000
 8004744:	080053b0 	.word	0x080053b0
 8004748:	080053a0 	.word	0x080053a0
 800474c:	2601      	movs	r6, #1
 800474e:	e66a      	b.n	8004426 <__ieee754_pow+0x42e>
 8004750:	a39d      	add	r3, pc, #628	; (adr r3, 80049c8 <__ieee754_pow+0x9d0>)
 8004752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004756:	4640      	mov	r0, r8
 8004758:	4649      	mov	r1, r9
 800475a:	f7fb fd6b 	bl	8000234 <__adddf3>
 800475e:	4622      	mov	r2, r4
 8004760:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004764:	462b      	mov	r3, r5
 8004766:	4650      	mov	r0, sl
 8004768:	4639      	mov	r1, r7
 800476a:	f7fb fd61 	bl	8000230 <__aeabi_dsub>
 800476e:	4602      	mov	r2, r0
 8004770:	460b      	mov	r3, r1
 8004772:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004776:	f7fc f9a3 	bl	8000ac0 <__aeabi_dcmpgt>
 800477a:	2800      	cmp	r0, #0
 800477c:	f47f ae09 	bne.w	8004392 <__ieee754_pow+0x39a>
 8004780:	4aa3      	ldr	r2, [pc, #652]	; (8004a10 <__ieee754_pow+0xa18>)
 8004782:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8004786:	4293      	cmp	r3, r2
 8004788:	f340 8101 	ble.w	800498e <__ieee754_pow+0x996>
 800478c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8004790:	2000      	movs	r0, #0
 8004792:	151b      	asrs	r3, r3, #20
 8004794:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8004798:	fa4a f303 	asr.w	r3, sl, r3
 800479c:	4433      	add	r3, r6
 800479e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80047a2:	4f9c      	ldr	r7, [pc, #624]	; (8004a14 <__ieee754_pow+0xa1c>)
 80047a4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80047a8:	4117      	asrs	r7, r2
 80047aa:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80047ae:	ea23 0107 	bic.w	r1, r3, r7
 80047b2:	f1c2 0214 	rsb	r2, r2, #20
 80047b6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80047ba:	460b      	mov	r3, r1
 80047bc:	fa4a fa02 	asr.w	sl, sl, r2
 80047c0:	2e00      	cmp	r6, #0
 80047c2:	4602      	mov	r2, r0
 80047c4:	4629      	mov	r1, r5
 80047c6:	4620      	mov	r0, r4
 80047c8:	bfb8      	it	lt
 80047ca:	f1ca 0a00 	rsblt	sl, sl, #0
 80047ce:	f7fb fd2f 	bl	8000230 <__aeabi_dsub>
 80047d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80047d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047da:	2400      	movs	r4, #0
 80047dc:	4642      	mov	r2, r8
 80047de:	464b      	mov	r3, r9
 80047e0:	f7fb fd28 	bl	8000234 <__adddf3>
 80047e4:	a37a      	add	r3, pc, #488	; (adr r3, 80049d0 <__ieee754_pow+0x9d8>)
 80047e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ea:	4620      	mov	r0, r4
 80047ec:	460d      	mov	r5, r1
 80047ee:	f7fb fed7 	bl	80005a0 <__aeabi_dmul>
 80047f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80047f6:	4606      	mov	r6, r0
 80047f8:	460f      	mov	r7, r1
 80047fa:	4620      	mov	r0, r4
 80047fc:	4629      	mov	r1, r5
 80047fe:	f7fb fd17 	bl	8000230 <__aeabi_dsub>
 8004802:	4602      	mov	r2, r0
 8004804:	460b      	mov	r3, r1
 8004806:	4640      	mov	r0, r8
 8004808:	4649      	mov	r1, r9
 800480a:	f7fb fd11 	bl	8000230 <__aeabi_dsub>
 800480e:	a372      	add	r3, pc, #456	; (adr r3, 80049d8 <__ieee754_pow+0x9e0>)
 8004810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004814:	f7fb fec4 	bl	80005a0 <__aeabi_dmul>
 8004818:	a371      	add	r3, pc, #452	; (adr r3, 80049e0 <__ieee754_pow+0x9e8>)
 800481a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800481e:	4680      	mov	r8, r0
 8004820:	4689      	mov	r9, r1
 8004822:	4620      	mov	r0, r4
 8004824:	4629      	mov	r1, r5
 8004826:	f7fb febb 	bl	80005a0 <__aeabi_dmul>
 800482a:	4602      	mov	r2, r0
 800482c:	460b      	mov	r3, r1
 800482e:	4640      	mov	r0, r8
 8004830:	4649      	mov	r1, r9
 8004832:	f7fb fcff 	bl	8000234 <__adddf3>
 8004836:	4604      	mov	r4, r0
 8004838:	460d      	mov	r5, r1
 800483a:	4602      	mov	r2, r0
 800483c:	460b      	mov	r3, r1
 800483e:	4630      	mov	r0, r6
 8004840:	4639      	mov	r1, r7
 8004842:	f7fb fcf7 	bl	8000234 <__adddf3>
 8004846:	4632      	mov	r2, r6
 8004848:	463b      	mov	r3, r7
 800484a:	4680      	mov	r8, r0
 800484c:	4689      	mov	r9, r1
 800484e:	f7fb fcef 	bl	8000230 <__aeabi_dsub>
 8004852:	4602      	mov	r2, r0
 8004854:	460b      	mov	r3, r1
 8004856:	4620      	mov	r0, r4
 8004858:	4629      	mov	r1, r5
 800485a:	f7fb fce9 	bl	8000230 <__aeabi_dsub>
 800485e:	4642      	mov	r2, r8
 8004860:	4606      	mov	r6, r0
 8004862:	460f      	mov	r7, r1
 8004864:	464b      	mov	r3, r9
 8004866:	4640      	mov	r0, r8
 8004868:	4649      	mov	r1, r9
 800486a:	f7fb fe99 	bl	80005a0 <__aeabi_dmul>
 800486e:	a35e      	add	r3, pc, #376	; (adr r3, 80049e8 <__ieee754_pow+0x9f0>)
 8004870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004874:	4604      	mov	r4, r0
 8004876:	460d      	mov	r5, r1
 8004878:	f7fb fe92 	bl	80005a0 <__aeabi_dmul>
 800487c:	a35c      	add	r3, pc, #368	; (adr r3, 80049f0 <__ieee754_pow+0x9f8>)
 800487e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004882:	f7fb fcd5 	bl	8000230 <__aeabi_dsub>
 8004886:	4622      	mov	r2, r4
 8004888:	462b      	mov	r3, r5
 800488a:	f7fb fe89 	bl	80005a0 <__aeabi_dmul>
 800488e:	a35a      	add	r3, pc, #360	; (adr r3, 80049f8 <__ieee754_pow+0xa00>)
 8004890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004894:	f7fb fcce 	bl	8000234 <__adddf3>
 8004898:	4622      	mov	r2, r4
 800489a:	462b      	mov	r3, r5
 800489c:	f7fb fe80 	bl	80005a0 <__aeabi_dmul>
 80048a0:	a357      	add	r3, pc, #348	; (adr r3, 8004a00 <__ieee754_pow+0xa08>)
 80048a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a6:	f7fb fcc3 	bl	8000230 <__aeabi_dsub>
 80048aa:	4622      	mov	r2, r4
 80048ac:	462b      	mov	r3, r5
 80048ae:	f7fb fe77 	bl	80005a0 <__aeabi_dmul>
 80048b2:	a355      	add	r3, pc, #340	; (adr r3, 8004a08 <__ieee754_pow+0xa10>)
 80048b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b8:	f7fb fcbc 	bl	8000234 <__adddf3>
 80048bc:	4622      	mov	r2, r4
 80048be:	462b      	mov	r3, r5
 80048c0:	f7fb fe6e 	bl	80005a0 <__aeabi_dmul>
 80048c4:	4602      	mov	r2, r0
 80048c6:	460b      	mov	r3, r1
 80048c8:	4640      	mov	r0, r8
 80048ca:	4649      	mov	r1, r9
 80048cc:	f7fb fcb0 	bl	8000230 <__aeabi_dsub>
 80048d0:	4604      	mov	r4, r0
 80048d2:	460d      	mov	r5, r1
 80048d4:	4602      	mov	r2, r0
 80048d6:	460b      	mov	r3, r1
 80048d8:	4640      	mov	r0, r8
 80048da:	4649      	mov	r1, r9
 80048dc:	f7fb fe60 	bl	80005a0 <__aeabi_dmul>
 80048e0:	2200      	movs	r2, #0
 80048e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80048e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80048ea:	4620      	mov	r0, r4
 80048ec:	4629      	mov	r1, r5
 80048ee:	f7fb fc9f 	bl	8000230 <__aeabi_dsub>
 80048f2:	4602      	mov	r2, r0
 80048f4:	460b      	mov	r3, r1
 80048f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048fa:	f7fb ff7b 	bl	80007f4 <__aeabi_ddiv>
 80048fe:	4632      	mov	r2, r6
 8004900:	4604      	mov	r4, r0
 8004902:	460d      	mov	r5, r1
 8004904:	463b      	mov	r3, r7
 8004906:	4640      	mov	r0, r8
 8004908:	4649      	mov	r1, r9
 800490a:	f7fb fe49 	bl	80005a0 <__aeabi_dmul>
 800490e:	4632      	mov	r2, r6
 8004910:	463b      	mov	r3, r7
 8004912:	f7fb fc8f 	bl	8000234 <__adddf3>
 8004916:	4602      	mov	r2, r0
 8004918:	460b      	mov	r3, r1
 800491a:	4620      	mov	r0, r4
 800491c:	4629      	mov	r1, r5
 800491e:	f7fb fc87 	bl	8000230 <__aeabi_dsub>
 8004922:	4642      	mov	r2, r8
 8004924:	464b      	mov	r3, r9
 8004926:	f7fb fc83 	bl	8000230 <__aeabi_dsub>
 800492a:	4602      	mov	r2, r0
 800492c:	460b      	mov	r3, r1
 800492e:	2000      	movs	r0, #0
 8004930:	4939      	ldr	r1, [pc, #228]	; (8004a18 <__ieee754_pow+0xa20>)
 8004932:	f7fb fc7d 	bl	8000230 <__aeabi_dsub>
 8004936:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800493a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800493e:	da29      	bge.n	8004994 <__ieee754_pow+0x99c>
 8004940:	4652      	mov	r2, sl
 8004942:	f000 f955 	bl	8004bf0 <scalbn>
 8004946:	e9dd 2300 	ldrd	r2, r3, [sp]
 800494a:	f7ff bbfe 	b.w	800414a <__ieee754_pow+0x152>
 800494e:	4b33      	ldr	r3, [pc, #204]	; (8004a1c <__ieee754_pow+0xa24>)
 8004950:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8004954:	429f      	cmp	r7, r3
 8004956:	f77f af13 	ble.w	8004780 <__ieee754_pow+0x788>
 800495a:	4b31      	ldr	r3, [pc, #196]	; (8004a20 <__ieee754_pow+0xa28>)
 800495c:	440b      	add	r3, r1
 800495e:	4303      	orrs	r3, r0
 8004960:	d009      	beq.n	8004976 <__ieee754_pow+0x97e>
 8004962:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004966:	2200      	movs	r2, #0
 8004968:	2300      	movs	r3, #0
 800496a:	f7fc f88b 	bl	8000a84 <__aeabi_dcmplt>
 800496e:	3800      	subs	r0, #0
 8004970:	bf18      	it	ne
 8004972:	2001      	movne	r0, #1
 8004974:	e453      	b.n	800421e <__ieee754_pow+0x226>
 8004976:	4622      	mov	r2, r4
 8004978:	462b      	mov	r3, r5
 800497a:	f7fb fc59 	bl	8000230 <__aeabi_dsub>
 800497e:	4642      	mov	r2, r8
 8004980:	464b      	mov	r3, r9
 8004982:	f7fc f893 	bl	8000aac <__aeabi_dcmpge>
 8004986:	2800      	cmp	r0, #0
 8004988:	f43f aefa 	beq.w	8004780 <__ieee754_pow+0x788>
 800498c:	e7e9      	b.n	8004962 <__ieee754_pow+0x96a>
 800498e:	f04f 0a00 	mov.w	sl, #0
 8004992:	e720      	b.n	80047d6 <__ieee754_pow+0x7de>
 8004994:	4621      	mov	r1, r4
 8004996:	e7d6      	b.n	8004946 <__ieee754_pow+0x94e>
 8004998:	f04f 0b00 	mov.w	fp, #0
 800499c:	f8df c078 	ldr.w	ip, [pc, #120]	; 8004a18 <__ieee754_pow+0xa20>
 80049a0:	f7ff bbba 	b.w	8004118 <__ieee754_pow+0x120>
 80049a4:	f04f 0b00 	mov.w	fp, #0
 80049a8:	f04f 0c00 	mov.w	ip, #0
 80049ac:	f7ff bbb4 	b.w	8004118 <__ieee754_pow+0x120>
 80049b0:	4640      	mov	r0, r8
 80049b2:	4649      	mov	r1, r9
 80049b4:	f7ff bb3d 	b.w	8004032 <__ieee754_pow+0x3a>
 80049b8:	9200      	str	r2, [sp, #0]
 80049ba:	f7ff bb89 	b.w	80040d0 <__ieee754_pow+0xd8>
 80049be:	2300      	movs	r3, #0
 80049c0:	f7ff bb73 	b.w	80040aa <__ieee754_pow+0xb2>
 80049c4:	f3af 8000 	nop.w
 80049c8:	652b82fe 	.word	0x652b82fe
 80049cc:	3c971547 	.word	0x3c971547
 80049d0:	00000000 	.word	0x00000000
 80049d4:	3fe62e43 	.word	0x3fe62e43
 80049d8:	fefa39ef 	.word	0xfefa39ef
 80049dc:	3fe62e42 	.word	0x3fe62e42
 80049e0:	0ca86c39 	.word	0x0ca86c39
 80049e4:	be205c61 	.word	0xbe205c61
 80049e8:	72bea4d0 	.word	0x72bea4d0
 80049ec:	3e663769 	.word	0x3e663769
 80049f0:	c5d26bf1 	.word	0xc5d26bf1
 80049f4:	3ebbbd41 	.word	0x3ebbbd41
 80049f8:	af25de2c 	.word	0xaf25de2c
 80049fc:	3f11566a 	.word	0x3f11566a
 8004a00:	16bebd93 	.word	0x16bebd93
 8004a04:	3f66c16c 	.word	0x3f66c16c
 8004a08:	5555553e 	.word	0x5555553e
 8004a0c:	3fc55555 	.word	0x3fc55555
 8004a10:	3fe00000 	.word	0x3fe00000
 8004a14:	000fffff 	.word	0x000fffff
 8004a18:	3ff00000 	.word	0x3ff00000
 8004a1c:	4090cbff 	.word	0x4090cbff
 8004a20:	3f6f3400 	.word	0x3f6f3400

08004a24 <__ieee754_sqrt>:
 8004a24:	f8df c158 	ldr.w	ip, [pc, #344]	; 8004b80 <__ieee754_sqrt+0x15c>
 8004a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a2c:	ea3c 0c01 	bics.w	ip, ip, r1
 8004a30:	4606      	mov	r6, r0
 8004a32:	460d      	mov	r5, r1
 8004a34:	460c      	mov	r4, r1
 8004a36:	460a      	mov	r2, r1
 8004a38:	4607      	mov	r7, r0
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	d10f      	bne.n	8004a5e <__ieee754_sqrt+0x3a>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	460b      	mov	r3, r1
 8004a42:	f7fb fdad 	bl	80005a0 <__aeabi_dmul>
 8004a46:	4602      	mov	r2, r0
 8004a48:	460b      	mov	r3, r1
 8004a4a:	4630      	mov	r0, r6
 8004a4c:	4629      	mov	r1, r5
 8004a4e:	f7fb fbf1 	bl	8000234 <__adddf3>
 8004a52:	4606      	mov	r6, r0
 8004a54:	460d      	mov	r5, r1
 8004a56:	4630      	mov	r0, r6
 8004a58:	4629      	mov	r1, r5
 8004a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a5e:	2900      	cmp	r1, #0
 8004a60:	dc0e      	bgt.n	8004a80 <__ieee754_sqrt+0x5c>
 8004a62:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8004a66:	ea5c 0707 	orrs.w	r7, ip, r7
 8004a6a:	d0f4      	beq.n	8004a56 <__ieee754_sqrt+0x32>
 8004a6c:	b141      	cbz	r1, 8004a80 <__ieee754_sqrt+0x5c>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	460b      	mov	r3, r1
 8004a72:	f7fb fbdd 	bl	8000230 <__aeabi_dsub>
 8004a76:	4602      	mov	r2, r0
 8004a78:	460b      	mov	r3, r1
 8004a7a:	f7fb febb 	bl	80007f4 <__aeabi_ddiv>
 8004a7e:	e7e8      	b.n	8004a52 <__ieee754_sqrt+0x2e>
 8004a80:	1521      	asrs	r1, r4, #20
 8004a82:	d075      	beq.n	8004b70 <__ieee754_sqrt+0x14c>
 8004a84:	07cc      	lsls	r4, r1, #31
 8004a86:	f04f 0400 	mov.w	r4, #0
 8004a8a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8004a8e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8004a92:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004a96:	bf5e      	ittt	pl
 8004a98:	0fd9      	lsrpl	r1, r3, #31
 8004a9a:	005b      	lslpl	r3, r3, #1
 8004a9c:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8004aa0:	0fd9      	lsrs	r1, r3, #31
 8004aa2:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8004aa6:	2516      	movs	r5, #22
 8004aa8:	4620      	mov	r0, r4
 8004aaa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004aae:	107f      	asrs	r7, r7, #1
 8004ab0:	005b      	lsls	r3, r3, #1
 8004ab2:	1846      	adds	r6, r0, r1
 8004ab4:	4296      	cmp	r6, r2
 8004ab6:	bfde      	ittt	le
 8004ab8:	1b92      	suble	r2, r2, r6
 8004aba:	1870      	addle	r0, r6, r1
 8004abc:	1864      	addle	r4, r4, r1
 8004abe:	0052      	lsls	r2, r2, #1
 8004ac0:	3d01      	subs	r5, #1
 8004ac2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8004ac6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8004aca:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004ace:	d1f0      	bne.n	8004ab2 <__ieee754_sqrt+0x8e>
 8004ad0:	4629      	mov	r1, r5
 8004ad2:	f04f 0e20 	mov.w	lr, #32
 8004ad6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004ada:	4282      	cmp	r2, r0
 8004adc:	eb06 0c05 	add.w	ip, r6, r5
 8004ae0:	dc02      	bgt.n	8004ae8 <__ieee754_sqrt+0xc4>
 8004ae2:	d113      	bne.n	8004b0c <__ieee754_sqrt+0xe8>
 8004ae4:	459c      	cmp	ip, r3
 8004ae6:	d811      	bhi.n	8004b0c <__ieee754_sqrt+0xe8>
 8004ae8:	f1bc 0f00 	cmp.w	ip, #0
 8004aec:	eb0c 0506 	add.w	r5, ip, r6
 8004af0:	da43      	bge.n	8004b7a <__ieee754_sqrt+0x156>
 8004af2:	2d00      	cmp	r5, #0
 8004af4:	db41      	blt.n	8004b7a <__ieee754_sqrt+0x156>
 8004af6:	f100 0801 	add.w	r8, r0, #1
 8004afa:	1a12      	subs	r2, r2, r0
 8004afc:	4640      	mov	r0, r8
 8004afe:	459c      	cmp	ip, r3
 8004b00:	bf88      	it	hi
 8004b02:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8004b06:	eba3 030c 	sub.w	r3, r3, ip
 8004b0a:	4431      	add	r1, r6
 8004b0c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8004b10:	f1be 0e01 	subs.w	lr, lr, #1
 8004b14:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8004b18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004b1c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004b20:	d1db      	bne.n	8004ada <__ieee754_sqrt+0xb6>
 8004b22:	4313      	orrs	r3, r2
 8004b24:	d006      	beq.n	8004b34 <__ieee754_sqrt+0x110>
 8004b26:	1c48      	adds	r0, r1, #1
 8004b28:	bf0b      	itete	eq
 8004b2a:	4671      	moveq	r1, lr
 8004b2c:	3101      	addne	r1, #1
 8004b2e:	3401      	addeq	r4, #1
 8004b30:	f021 0101 	bicne.w	r1, r1, #1
 8004b34:	1063      	asrs	r3, r4, #1
 8004b36:	0849      	lsrs	r1, r1, #1
 8004b38:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8004b3c:	07e2      	lsls	r2, r4, #31
 8004b3e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8004b42:	bf48      	it	mi
 8004b44:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8004b48:	460e      	mov	r6, r1
 8004b4a:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8004b4e:	e782      	b.n	8004a56 <__ieee754_sqrt+0x32>
 8004b50:	0ada      	lsrs	r2, r3, #11
 8004b52:	3815      	subs	r0, #21
 8004b54:	055b      	lsls	r3, r3, #21
 8004b56:	2a00      	cmp	r2, #0
 8004b58:	d0fa      	beq.n	8004b50 <__ieee754_sqrt+0x12c>
 8004b5a:	02d5      	lsls	r5, r2, #11
 8004b5c:	d50a      	bpl.n	8004b74 <__ieee754_sqrt+0x150>
 8004b5e:	f1c1 0420 	rsb	r4, r1, #32
 8004b62:	fa23 f404 	lsr.w	r4, r3, r4
 8004b66:	1e4d      	subs	r5, r1, #1
 8004b68:	408b      	lsls	r3, r1
 8004b6a:	4322      	orrs	r2, r4
 8004b6c:	1b41      	subs	r1, r0, r5
 8004b6e:	e789      	b.n	8004a84 <__ieee754_sqrt+0x60>
 8004b70:	4608      	mov	r0, r1
 8004b72:	e7f0      	b.n	8004b56 <__ieee754_sqrt+0x132>
 8004b74:	0052      	lsls	r2, r2, #1
 8004b76:	3101      	adds	r1, #1
 8004b78:	e7ef      	b.n	8004b5a <__ieee754_sqrt+0x136>
 8004b7a:	4680      	mov	r8, r0
 8004b7c:	e7bd      	b.n	8004afa <__ieee754_sqrt+0xd6>
 8004b7e:	bf00      	nop
 8004b80:	7ff00000 	.word	0x7ff00000

08004b84 <with_errno>:
 8004b84:	b570      	push	{r4, r5, r6, lr}
 8004b86:	4604      	mov	r4, r0
 8004b88:	460d      	mov	r5, r1
 8004b8a:	4616      	mov	r6, r2
 8004b8c:	f7ff f974 	bl	8003e78 <__errno>
 8004b90:	4629      	mov	r1, r5
 8004b92:	6006      	str	r6, [r0, #0]
 8004b94:	4620      	mov	r0, r4
 8004b96:	bd70      	pop	{r4, r5, r6, pc}

08004b98 <xflow>:
 8004b98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b9a:	4615      	mov	r5, r2
 8004b9c:	461c      	mov	r4, r3
 8004b9e:	b180      	cbz	r0, 8004bc2 <xflow+0x2a>
 8004ba0:	4610      	mov	r0, r2
 8004ba2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004ba6:	e9cd 0100 	strd	r0, r1, [sp]
 8004baa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004bae:	4628      	mov	r0, r5
 8004bb0:	4621      	mov	r1, r4
 8004bb2:	f7fb fcf5 	bl	80005a0 <__aeabi_dmul>
 8004bb6:	2222      	movs	r2, #34	; 0x22
 8004bb8:	b003      	add	sp, #12
 8004bba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004bbe:	f7ff bfe1 	b.w	8004b84 <with_errno>
 8004bc2:	4610      	mov	r0, r2
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	e7ee      	b.n	8004ba6 <xflow+0xe>

08004bc8 <__math_uflow>:
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004bce:	f7ff bfe3 	b.w	8004b98 <xflow>

08004bd2 <__math_oflow>:
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8004bd8:	f7ff bfde 	b.w	8004b98 <xflow>

08004bdc <fabs>:
 8004bdc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004be0:	4770      	bx	lr

08004be2 <finite>:
 8004be2:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8004be6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8004bea:	0fc0      	lsrs	r0, r0, #31
 8004bec:	4770      	bx	lr
	...

08004bf0 <scalbn>:
 8004bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bf2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8004bf6:	4604      	mov	r4, r0
 8004bf8:	460d      	mov	r5, r1
 8004bfa:	4617      	mov	r7, r2
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	b996      	cbnz	r6, 8004c26 <scalbn+0x36>
 8004c00:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004c04:	4303      	orrs	r3, r0
 8004c06:	d039      	beq.n	8004c7c <scalbn+0x8c>
 8004c08:	4b33      	ldr	r3, [pc, #204]	; (8004cd8 <scalbn+0xe8>)
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f7fb fcc8 	bl	80005a0 <__aeabi_dmul>
 8004c10:	4b32      	ldr	r3, [pc, #200]	; (8004cdc <scalbn+0xec>)
 8004c12:	4604      	mov	r4, r0
 8004c14:	429f      	cmp	r7, r3
 8004c16:	460d      	mov	r5, r1
 8004c18:	da0f      	bge.n	8004c3a <scalbn+0x4a>
 8004c1a:	a32b      	add	r3, pc, #172	; (adr r3, 8004cc8 <scalbn+0xd8>)
 8004c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c20:	f7fb fcbe 	bl	80005a0 <__aeabi_dmul>
 8004c24:	e006      	b.n	8004c34 <scalbn+0x44>
 8004c26:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004c2a:	4296      	cmp	r6, r2
 8004c2c:	d10a      	bne.n	8004c44 <scalbn+0x54>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	f7fb fb00 	bl	8000234 <__adddf3>
 8004c34:	4604      	mov	r4, r0
 8004c36:	460d      	mov	r5, r1
 8004c38:	e020      	b.n	8004c7c <scalbn+0x8c>
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004c40:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8004c44:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8004c48:	19b9      	adds	r1, r7, r6
 8004c4a:	4291      	cmp	r1, r2
 8004c4c:	dd0e      	ble.n	8004c6c <scalbn+0x7c>
 8004c4e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8004c52:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8004c56:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8004c5a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8004c5e:	4820      	ldr	r0, [pc, #128]	; (8004ce0 <scalbn+0xf0>)
 8004c60:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8004c64:	a31a      	add	r3, pc, #104	; (adr r3, 8004cd0 <scalbn+0xe0>)
 8004c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6a:	e7d9      	b.n	8004c20 <scalbn+0x30>
 8004c6c:	2900      	cmp	r1, #0
 8004c6e:	dd08      	ble.n	8004c82 <scalbn+0x92>
 8004c70:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004c74:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004c78:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8004c7c:	4620      	mov	r0, r4
 8004c7e:	4629      	mov	r1, r5
 8004c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c82:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8004c86:	da12      	bge.n	8004cae <scalbn+0xbe>
 8004c88:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004c8c:	429f      	cmp	r7, r3
 8004c8e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8004c92:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8004c96:	dcdc      	bgt.n	8004c52 <scalbn+0x62>
 8004c98:	a30b      	add	r3, pc, #44	; (adr r3, 8004cc8 <scalbn+0xd8>)
 8004c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c9e:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8004ca2:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8004ca6:	480f      	ldr	r0, [pc, #60]	; (8004ce4 <scalbn+0xf4>)
 8004ca8:	f041 011f 	orr.w	r1, r1, #31
 8004cac:	e7b8      	b.n	8004c20 <scalbn+0x30>
 8004cae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004cb2:	3136      	adds	r1, #54	; 0x36
 8004cb4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004cb8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8004cbc:	4620      	mov	r0, r4
 8004cbe:	4629      	mov	r1, r5
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	4b09      	ldr	r3, [pc, #36]	; (8004ce8 <scalbn+0xf8>)
 8004cc4:	e7ac      	b.n	8004c20 <scalbn+0x30>
 8004cc6:	bf00      	nop
 8004cc8:	c2f8f359 	.word	0xc2f8f359
 8004ccc:	01a56e1f 	.word	0x01a56e1f
 8004cd0:	8800759c 	.word	0x8800759c
 8004cd4:	7e37e43c 	.word	0x7e37e43c
 8004cd8:	43500000 	.word	0x43500000
 8004cdc:	ffff3cb0 	.word	0xffff3cb0
 8004ce0:	8800759c 	.word	0x8800759c
 8004ce4:	c2f8f359 	.word	0xc2f8f359
 8004ce8:	3c900000 	.word	0x3c900000

08004cec <_init>:
 8004cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cee:	bf00      	nop
 8004cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cf2:	bc08      	pop	{r3}
 8004cf4:	469e      	mov	lr, r3
 8004cf6:	4770      	bx	lr

08004cf8 <_fini>:
 8004cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cfa:	bf00      	nop
 8004cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cfe:	bc08      	pop	{r3}
 8004d00:	469e      	mov	lr, r3
 8004d02:	4770      	bx	lr
