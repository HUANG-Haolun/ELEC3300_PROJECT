
lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b5c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b8  08004d48  08004d48  00014d48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005400  08005400  00015400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005404  08005404  00015404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000124  20000000  08005408  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001f08  20000124  0800552c  00020124  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2000202c  0800552c  0002202c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY
  9 .debug_info   000094be  00000000  00000000  0002014d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000241e  00000000  00000000  0002960b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000970  00000000  00000000  0002ba30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000838  00000000  00000000  0002c3a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   00007511  00000000  00000000  0002cbd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    000029f5  00000000  00000000  000340e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .comment      00000050  00000000  00000000  00036ade  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000297c  00000000  00000000  00036b30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000124 	.word	0x20000124
 8000204:	00000000 	.word	0x00000000
 8000208:	08004d2c 	.word	0x08004d2c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000128 	.word	0x20000128
 8000224:	08004d2c 	.word	0x08004d2c

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpun>:
 8000ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x10>
 8000ade:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ae2:	d10a      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000ae4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x20>
 8000aee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000af2:	d102      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	f04f 0001 	mov.w	r0, #1
 8000afe:	4770      	bx	lr

08000b00 <__aeabi_d2uiz>:
 8000b00:	004a      	lsls	r2, r1, #1
 8000b02:	d211      	bcs.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d211      	bcs.n	8000b2e <__aeabi_d2uiz+0x2e>
 8000b0a:	d50d      	bpl.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d40e      	bmi.n	8000b34 <__aeabi_d2uiz+0x34>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	fa23 f002 	lsr.w	r0, r3, r2
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_d2uiz+0x3a>
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr

08000b40 <Ov7725_Init>:
uint16_t pixels[100][150];
/************************************************
 * Sensor_Init
 ************************************************/
ErrorStatus Ov7725_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	80fb      	strh	r3, [r7, #6]
	uint8_t Sensor_IDCode = 0;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	717b      	strb	r3, [r7, #5]

	if (0 == SCCB_WriteByte(0x12, 0x80)) /*reset sensor */
 8000b4e:	2180      	movs	r1, #128	; 0x80
 8000b50:	2012      	movs	r0, #18
 8000b52:	f000 fb19 	bl	8001188 <SCCB_WriteByte>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d101      	bne.n	8000b60 <Ov7725_Init+0x20>
	{
		return ERROR;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	e030      	b.n	8000bc2 <Ov7725_Init+0x82>
	}

	if (0 == SCCB_ReadByte(&Sensor_IDCode, 1, 0x0b)) /* read sensor ID*/
 8000b60:	1d7b      	adds	r3, r7, #5
 8000b62:	220b      	movs	r2, #11
 8000b64:	2101      	movs	r1, #1
 8000b66:	4618      	mov	r0, r3
 8000b68:	f000 fb3d 	bl	80011e6 <SCCB_ReadByte>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d101      	bne.n	8000b76 <Ov7725_Init+0x36>
	{
		return ERROR;
 8000b72:	2300      	movs	r3, #0
 8000b74:	e025      	b.n	8000bc2 <Ov7725_Init+0x82>
	}
	// DEBUG("Sensor ID is 0x%x", Sensor_IDCode);

	if (Sensor_IDCode == OV7725_ID)
 8000b76:	797b      	ldrb	r3, [r7, #5]
 8000b78:	2b21      	cmp	r3, #33	; 0x21
 8000b7a:	d11f      	bne.n	8000bbc <Ov7725_Init+0x7c>
	{
		for (i = 0; i < OV7725_REG_NUM; i++)
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	80fb      	strh	r3, [r7, #6]
 8000b80:	e015      	b.n	8000bae <Ov7725_Init+0x6e>
		{
			if (0 == SCCB_WriteByte(Sensor_Config[i].Address, Sensor_Config[i].Value))
 8000b82:	88fb      	ldrh	r3, [r7, #6]
 8000b84:	4a11      	ldr	r2, [pc, #68]	; (8000bcc <Ov7725_Init+0x8c>)
 8000b86:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000b8a:	b29a      	uxth	r2, r3
 8000b8c:	88fb      	ldrh	r3, [r7, #6]
 8000b8e:	490f      	ldr	r1, [pc, #60]	; (8000bcc <Ov7725_Init+0x8c>)
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	440b      	add	r3, r1
 8000b94:	785b      	ldrb	r3, [r3, #1]
 8000b96:	4619      	mov	r1, r3
 8000b98:	4610      	mov	r0, r2
 8000b9a:	f000 faf5 	bl	8001188 <SCCB_WriteByte>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d101      	bne.n	8000ba8 <Ov7725_Init+0x68>
			{
				return ERROR;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	e00c      	b.n	8000bc2 <Ov7725_Init+0x82>
		for (i = 0; i < OV7725_REG_NUM; i++)
 8000ba8:	88fb      	ldrh	r3, [r7, #6]
 8000baa:	3301      	adds	r3, #1
 8000bac:	80fb      	strh	r3, [r7, #6]
 8000bae:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <Ov7725_Init+0x90>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	88fa      	ldrh	r2, [r7, #6]
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d3e3      	bcc.n	8000b82 <Ov7725_Init+0x42>
 8000bba:	e001      	b.n	8000bc0 <Ov7725_Init+0x80>
			}
		}
	}
	else
	{
		return ERROR;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	e000      	b.n	8000bc2 <Ov7725_Init+0x82>
	}

	return SUCCESS;
 8000bc0:	2301      	movs	r3, #1
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000018 	.word	0x20000018
 8000bd0:	200000b2 	.word	0x200000b2

08000bd4 <ImagDisp>:

void ImagDisp(int start_x, int start_y, int end_x, int end_y)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08a      	sub	sp, #40	; 0x28
 8000bd8:	af02      	add	r7, sp, #8
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
 8000be0:	603b      	str	r3, [r7, #0]
	//	LCD_Rst();

	//	uint16_t x, y;
	uint16_t Camera_Data;
	memset(squareColors, 0, sizeof(squareColors));
 8000be2:	2212      	movs	r2, #18
 8000be4:	2100      	movs	r1, #0
 8000be6:	4873      	ldr	r0, [pc, #460]	; (8000db4 <ImagDisp+0x1e0>)
 8000be8:	f003 f990 	bl	8003f0c <memset>
	LCD_Cam_Gram();
 8000bec:	f000 ffc6 	bl	8001b7c <LCD_Cam_Gram>
	for (int i = 0; i < 240; i++)
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	61fb      	str	r3, [r7, #28]
 8000bf4:	e07d      	b.n	8000cf2 <ImagDisp+0x11e>
	{
		for (int j = 0; j < 320; j++)
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61bb      	str	r3, [r7, #24]
 8000bfa:	e073      	b.n	8000ce4 <ImagDisp+0x110>
		{
			READ_FIFO_PIXEL(Camera_Data);
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	82fb      	strh	r3, [r7, #22]
 8000c00:	4b6d      	ldr	r3, [pc, #436]	; (8000db8 <ImagDisp+0x1e4>)
 8000c02:	2220      	movs	r2, #32
 8000c04:	615a      	str	r2, [r3, #20]
 8000c06:	4b6d      	ldr	r3, [pc, #436]	; (8000dbc <ImagDisp+0x1e8>)
 8000c08:	689b      	ldr	r3, [r3, #8]
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000c10:	82fb      	strh	r3, [r7, #22]
 8000c12:	4b69      	ldr	r3, [pc, #420]	; (8000db8 <ImagDisp+0x1e4>)
 8000c14:	2220      	movs	r2, #32
 8000c16:	611a      	str	r2, [r3, #16]
 8000c18:	4b67      	ldr	r3, [pc, #412]	; (8000db8 <ImagDisp+0x1e4>)
 8000c1a:	2220      	movs	r2, #32
 8000c1c:	615a      	str	r2, [r3, #20]
 8000c1e:	4b67      	ldr	r3, [pc, #412]	; (8000dbc <ImagDisp+0x1e8>)
 8000c20:	689b      	ldr	r3, [r3, #8]
 8000c22:	0a1b      	lsrs	r3, r3, #8
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	b29a      	uxth	r2, r3
 8000c28:	8afb      	ldrh	r3, [r7, #22]
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	82fb      	strh	r3, [r7, #22]
 8000c2e:	4b62      	ldr	r3, [pc, #392]	; (8000db8 <ImagDisp+0x1e4>)
 8000c30:	2220      	movs	r2, #32
 8000c32:	611a      	str	r2, [r3, #16]
			LCD_Write_Data(Camera_Data);
 8000c34:	8afb      	ldrh	r3, [r7, #22]
 8000c36:	4618      	mov	r0, r3
 8000c38:	f000 fd1c 	bl	8001674 <LCD_Write_Data>
			// bottom row
			if (j == 110 && i == 60)
 8000c3c:	69bb      	ldr	r3, [r7, #24]
 8000c3e:	2b6e      	cmp	r3, #110	; 0x6e
 8000c40:	d105      	bne.n	8000c4e <ImagDisp+0x7a>
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	2b3c      	cmp	r3, #60	; 0x3c
 8000c46:	d102      	bne.n	8000c4e <ImagDisp+0x7a>
				squareColors[0] = Camera_Data;
 8000c48:	4a5a      	ldr	r2, [pc, #360]	; (8000db4 <ImagDisp+0x1e0>)
 8000c4a:	8afb      	ldrh	r3, [r7, #22]
 8000c4c:	8013      	strh	r3, [r2, #0]

			if (j == 110 && i == 120)
 8000c4e:	69bb      	ldr	r3, [r7, #24]
 8000c50:	2b6e      	cmp	r3, #110	; 0x6e
 8000c52:	d105      	bne.n	8000c60 <ImagDisp+0x8c>
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	2b78      	cmp	r3, #120	; 0x78
 8000c58:	d102      	bne.n	8000c60 <ImagDisp+0x8c>
				squareColors[1] = Camera_Data;
 8000c5a:	4a56      	ldr	r2, [pc, #344]	; (8000db4 <ImagDisp+0x1e0>)
 8000c5c:	8afb      	ldrh	r3, [r7, #22]
 8000c5e:	8053      	strh	r3, [r2, #2]

			if (j == 110 && i == 170)
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	2b6e      	cmp	r3, #110	; 0x6e
 8000c64:	d105      	bne.n	8000c72 <ImagDisp+0x9e>
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	2baa      	cmp	r3, #170	; 0xaa
 8000c6a:	d102      	bne.n	8000c72 <ImagDisp+0x9e>
				squareColors[2] = Camera_Data;
 8000c6c:	4a51      	ldr	r2, [pc, #324]	; (8000db4 <ImagDisp+0x1e0>)
 8000c6e:	8afb      	ldrh	r3, [r7, #22]
 8000c70:	8093      	strh	r3, [r2, #4]

			// // middle row
			if (j == 160 && i == 60)
 8000c72:	69bb      	ldr	r3, [r7, #24]
 8000c74:	2ba0      	cmp	r3, #160	; 0xa0
 8000c76:	d105      	bne.n	8000c84 <ImagDisp+0xb0>
 8000c78:	69fb      	ldr	r3, [r7, #28]
 8000c7a:	2b3c      	cmp	r3, #60	; 0x3c
 8000c7c:	d102      	bne.n	8000c84 <ImagDisp+0xb0>
				squareColors[3] = Camera_Data;
 8000c7e:	4a4d      	ldr	r2, [pc, #308]	; (8000db4 <ImagDisp+0x1e0>)
 8000c80:	8afb      	ldrh	r3, [r7, #22]
 8000c82:	80d3      	strh	r3, [r2, #6]

			if (j == 160 && i == 120)
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	2ba0      	cmp	r3, #160	; 0xa0
 8000c88:	d105      	bne.n	8000c96 <ImagDisp+0xc2>
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	2b78      	cmp	r3, #120	; 0x78
 8000c8e:	d102      	bne.n	8000c96 <ImagDisp+0xc2>
				squareColors[4] = Camera_Data;
 8000c90:	4a48      	ldr	r2, [pc, #288]	; (8000db4 <ImagDisp+0x1e0>)
 8000c92:	8afb      	ldrh	r3, [r7, #22]
 8000c94:	8113      	strh	r3, [r2, #8]

			if (j == 160 && i == 170)
 8000c96:	69bb      	ldr	r3, [r7, #24]
 8000c98:	2ba0      	cmp	r3, #160	; 0xa0
 8000c9a:	d105      	bne.n	8000ca8 <ImagDisp+0xd4>
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	2baa      	cmp	r3, #170	; 0xaa
 8000ca0:	d102      	bne.n	8000ca8 <ImagDisp+0xd4>
				squareColors[5] = Camera_Data;
 8000ca2:	4a44      	ldr	r2, [pc, #272]	; (8000db4 <ImagDisp+0x1e0>)
 8000ca4:	8afb      	ldrh	r3, [r7, #22]
 8000ca6:	8153      	strh	r3, [r2, #10]

			// top row

			if (j == 210 && i == 60)
 8000ca8:	69bb      	ldr	r3, [r7, #24]
 8000caa:	2bd2      	cmp	r3, #210	; 0xd2
 8000cac:	d105      	bne.n	8000cba <ImagDisp+0xe6>
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	2b3c      	cmp	r3, #60	; 0x3c
 8000cb2:	d102      	bne.n	8000cba <ImagDisp+0xe6>
				squareColors[6] = Camera_Data;
 8000cb4:	4a3f      	ldr	r2, [pc, #252]	; (8000db4 <ImagDisp+0x1e0>)
 8000cb6:	8afb      	ldrh	r3, [r7, #22]
 8000cb8:	8193      	strh	r3, [r2, #12]

			if (j == 210 && i == 120)
 8000cba:	69bb      	ldr	r3, [r7, #24]
 8000cbc:	2bd2      	cmp	r3, #210	; 0xd2
 8000cbe:	d105      	bne.n	8000ccc <ImagDisp+0xf8>
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	2b78      	cmp	r3, #120	; 0x78
 8000cc4:	d102      	bne.n	8000ccc <ImagDisp+0xf8>
				squareColors[7] = Camera_Data;
 8000cc6:	4a3b      	ldr	r2, [pc, #236]	; (8000db4 <ImagDisp+0x1e0>)
 8000cc8:	8afb      	ldrh	r3, [r7, #22]
 8000cca:	81d3      	strh	r3, [r2, #14]

			if (j == 210 && i == 170)
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	2bd2      	cmp	r3, #210	; 0xd2
 8000cd0:	d105      	bne.n	8000cde <ImagDisp+0x10a>
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	2baa      	cmp	r3, #170	; 0xaa
 8000cd6:	d102      	bne.n	8000cde <ImagDisp+0x10a>
				squareColors[8] = Camera_Data;
 8000cd8:	4a36      	ldr	r2, [pc, #216]	; (8000db4 <ImagDisp+0x1e0>)
 8000cda:	8afb      	ldrh	r3, [r7, #22]
 8000cdc:	8213      	strh	r3, [r2, #16]
		for (int j = 0; j < 320; j++)
 8000cde:	69bb      	ldr	r3, [r7, #24]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	61bb      	str	r3, [r7, #24]
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000cea:	db87      	blt.n	8000bfc <ImagDisp+0x28>
	for (int i = 0; i < 240; i++)
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	61fb      	str	r3, [r7, #28]
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	2bef      	cmp	r3, #239	; 0xef
 8000cf6:	f77f af7e 	ble.w	8000bf6 <ImagDisp+0x22>
	//	LCD_DrawLine(75,35,230,35, 0x0000);
	//	LCD_DrawLine(75,190,230,190, 0x0000);
	//	LCD_DrawLine(75,35,75,190, 0x0000);
	//	LCD_DrawLine(230,35,230,190, 0x0000);
	// j , i
	KNearest_match(temp_colors);
 8000cfa:	4831      	ldr	r0, [pc, #196]	; (8000dc0 <ImagDisp+0x1ec>)
 8000cfc:	f000 f862 	bl	8000dc4 <KNearest_match>
	LCD_DrawEllipse(110, 60, 5, 5, temp_colors[0]);	 // 0 bottom left
 8000d00:	4b2f      	ldr	r3, [pc, #188]	; (8000dc0 <ImagDisp+0x1ec>)
 8000d02:	881b      	ldrh	r3, [r3, #0]
 8000d04:	9300      	str	r3, [sp, #0]
 8000d06:	2305      	movs	r3, #5
 8000d08:	2205      	movs	r2, #5
 8000d0a:	213c      	movs	r1, #60	; 0x3c
 8000d0c:	206e      	movs	r0, #110	; 0x6e
 8000d0e:	f000 feeb 	bl	8001ae8 <LCD_DrawEllipse>
	LCD_DrawEllipse(110, 120, 5, 5, temp_colors[1]); // 1 bottom mid
 8000d12:	4b2b      	ldr	r3, [pc, #172]	; (8000dc0 <ImagDisp+0x1ec>)
 8000d14:	885b      	ldrh	r3, [r3, #2]
 8000d16:	9300      	str	r3, [sp, #0]
 8000d18:	2305      	movs	r3, #5
 8000d1a:	2205      	movs	r2, #5
 8000d1c:	2178      	movs	r1, #120	; 0x78
 8000d1e:	206e      	movs	r0, #110	; 0x6e
 8000d20:	f000 fee2 	bl	8001ae8 <LCD_DrawEllipse>
	LCD_DrawEllipse(110, 170, 5, 5, temp_colors[2]); // 2 bottom right
 8000d24:	4b26      	ldr	r3, [pc, #152]	; (8000dc0 <ImagDisp+0x1ec>)
 8000d26:	889b      	ldrh	r3, [r3, #4]
 8000d28:	9300      	str	r3, [sp, #0]
 8000d2a:	2305      	movs	r3, #5
 8000d2c:	2205      	movs	r2, #5
 8000d2e:	21aa      	movs	r1, #170	; 0xaa
 8000d30:	206e      	movs	r0, #110	; 0x6e
 8000d32:	f000 fed9 	bl	8001ae8 <LCD_DrawEllipse>

	LCD_DrawEllipse(160, 60, 5, 5, temp_colors[3]);	 // 3 mid left
 8000d36:	4b22      	ldr	r3, [pc, #136]	; (8000dc0 <ImagDisp+0x1ec>)
 8000d38:	88db      	ldrh	r3, [r3, #6]
 8000d3a:	9300      	str	r3, [sp, #0]
 8000d3c:	2305      	movs	r3, #5
 8000d3e:	2205      	movs	r2, #5
 8000d40:	213c      	movs	r1, #60	; 0x3c
 8000d42:	20a0      	movs	r0, #160	; 0xa0
 8000d44:	f000 fed0 	bl	8001ae8 <LCD_DrawEllipse>
	LCD_DrawEllipse(160, 120, 5, 5, temp_colors[4]); // 4 center
 8000d48:	4b1d      	ldr	r3, [pc, #116]	; (8000dc0 <ImagDisp+0x1ec>)
 8000d4a:	891b      	ldrh	r3, [r3, #8]
 8000d4c:	9300      	str	r3, [sp, #0]
 8000d4e:	2305      	movs	r3, #5
 8000d50:	2205      	movs	r2, #5
 8000d52:	2178      	movs	r1, #120	; 0x78
 8000d54:	20a0      	movs	r0, #160	; 0xa0
 8000d56:	f000 fec7 	bl	8001ae8 <LCD_DrawEllipse>
	LCD_DrawEllipse(160, 170, 5, 5, temp_colors[5]); // 5 mid right
 8000d5a:	4b19      	ldr	r3, [pc, #100]	; (8000dc0 <ImagDisp+0x1ec>)
 8000d5c:	895b      	ldrh	r3, [r3, #10]
 8000d5e:	9300      	str	r3, [sp, #0]
 8000d60:	2305      	movs	r3, #5
 8000d62:	2205      	movs	r2, #5
 8000d64:	21aa      	movs	r1, #170	; 0xaa
 8000d66:	20a0      	movs	r0, #160	; 0xa0
 8000d68:	f000 febe 	bl	8001ae8 <LCD_DrawEllipse>

	LCD_DrawEllipse(210, 60, 5, 5, temp_colors[6]);	 // 6 top left
 8000d6c:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <ImagDisp+0x1ec>)
 8000d6e:	899b      	ldrh	r3, [r3, #12]
 8000d70:	9300      	str	r3, [sp, #0]
 8000d72:	2305      	movs	r3, #5
 8000d74:	2205      	movs	r2, #5
 8000d76:	213c      	movs	r1, #60	; 0x3c
 8000d78:	20d2      	movs	r0, #210	; 0xd2
 8000d7a:	f000 feb5 	bl	8001ae8 <LCD_DrawEllipse>
	LCD_DrawEllipse(210, 120, 5, 5, temp_colors[7]); // 7 top mid
 8000d7e:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <ImagDisp+0x1ec>)
 8000d80:	89db      	ldrh	r3, [r3, #14]
 8000d82:	9300      	str	r3, [sp, #0]
 8000d84:	2305      	movs	r3, #5
 8000d86:	2205      	movs	r2, #5
 8000d88:	2178      	movs	r1, #120	; 0x78
 8000d8a:	20d2      	movs	r0, #210	; 0xd2
 8000d8c:	f000 feac 	bl	8001ae8 <LCD_DrawEllipse>
	LCD_DrawEllipse(210, 170, 5, 5, temp_colors[8]); // 8 top right
 8000d90:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <ImagDisp+0x1ec>)
 8000d92:	8a1b      	ldrh	r3, [r3, #16]
 8000d94:	9300      	str	r3, [sp, #0]
 8000d96:	2305      	movs	r3, #5
 8000d98:	2205      	movs	r2, #5
 8000d9a:	21aa      	movs	r1, #170	; 0xaa
 8000d9c:	20d2      	movs	r0, #210	; 0xd2
 8000d9e:	f000 fea3 	bl	8001ae8 <LCD_DrawEllipse>

	HAL_Delay(1000);
 8000da2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000da6:	f001 fa5f 	bl	8002268 <HAL_Delay>
}
 8000daa:	bf00      	nop
 8000dac:	3720      	adds	r7, #32
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20000140 	.word	0x20000140
 8000db8:	40011000 	.word	0x40011000
 8000dbc:	40010c00 	.word	0x40010c00
 8000dc0:	20000154 	.word	0x20000154

08000dc4 <KNearest_match>:

// Do a KNN match on the colors
// KNN match
void KNearest_match(uint16_t temp_colors[9])
{
 8000dc4:	b5b0      	push	{r4, r5, r7, lr}
 8000dc6:	b08a      	sub	sp, #40	; 0x28
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 9; i++)
 8000dcc:	2300      	movs	r3, #0
 8000dce:	627b      	str	r3, [r7, #36]	; 0x24
 8000dd0:	e0b3      	b.n	8000f3a <KNearest_match+0x176>
	{
		int8_t temp[3];
		temp[0] = squareColors[i] & 0x1F;
 8000dd2:	4a5e      	ldr	r2, [pc, #376]	; (8000f4c <KNearest_match+0x188>)
 8000dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dda:	b25b      	sxtb	r3, r3
 8000ddc:	f003 031f 	and.w	r3, r3, #31
 8000de0:	b25b      	sxtb	r3, r3
 8000de2:	743b      	strb	r3, [r7, #16]
		temp[1] = (squareColors[i] >> 5) & 0x3F;
 8000de4:	4a59      	ldr	r2, [pc, #356]	; (8000f4c <KNearest_match+0x188>)
 8000de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dec:	095b      	lsrs	r3, r3, #5
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	b25b      	sxtb	r3, r3
 8000df2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000df6:	b25b      	sxtb	r3, r3
 8000df8:	747b      	strb	r3, [r7, #17]
		temp[2] = (squareColors[i] >> 11) & 0x1F;
 8000dfa:	4a54      	ldr	r2, [pc, #336]	; (8000f4c <KNearest_match+0x188>)
 8000dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e02:	0adb      	lsrs	r3, r3, #11
 8000e04:	b29b      	uxth	r3, r3
 8000e06:	b25b      	sxtb	r3, r3
 8000e08:	f003 031f 	and.w	r3, r3, #31
 8000e0c:	b25b      	sxtb	r3, r3
 8000e0e:	74bb      	strb	r3, [r7, #18]
		uint16_t min_dist = 0xFFFF;
 8000e10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e14:	847b      	strh	r3, [r7, #34]	; 0x22
		int min_index = -1;
 8000e16:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1a:	61fb      	str	r3, [r7, #28]
		for (size_t i = 0; i < 6; i++)
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	61bb      	str	r3, [r7, #24]
 8000e20:	e076      	b.n	8000f10 <KNearest_match+0x14c>
		{
			int8_t temp2[3];
			temp2[0] = true_colors[i] & 0x1F;
 8000e22:	4a4b      	ldr	r2, [pc, #300]	; (8000f50 <KNearest_match+0x18c>)
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e2a:	b25b      	sxtb	r3, r3
 8000e2c:	f003 031f 	and.w	r3, r3, #31
 8000e30:	b25b      	sxtb	r3, r3
 8000e32:	733b      	strb	r3, [r7, #12]
			temp2[1] = (true_colors[i] >> 5) & 0x3F;
 8000e34:	4a46      	ldr	r2, [pc, #280]	; (8000f50 <KNearest_match+0x18c>)
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e3c:	095b      	lsrs	r3, r3, #5
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	b25b      	sxtb	r3, r3
 8000e42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000e46:	b25b      	sxtb	r3, r3
 8000e48:	737b      	strb	r3, [r7, #13]
			temp2[2] = (true_colors[i] >> 11) & 0x1F;
 8000e4a:	4a41      	ldr	r2, [pc, #260]	; (8000f50 <KNearest_match+0x18c>)
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e52:	0adb      	lsrs	r3, r3, #11
 8000e54:	b29b      	uxth	r3, r3
 8000e56:	b25b      	sxtb	r3, r3
 8000e58:	f003 031f 	and.w	r3, r3, #31
 8000e5c:	b25b      	sxtb	r3, r3
 8000e5e:	73bb      	strb	r3, [r7, #14]
			uint16_t dist = sqrt(pow(temp[0] - temp2[0], 2) + pow(temp[1] - temp2[1], 2) + pow(temp[2] - temp2[2], 2));
 8000e60:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8000e64:	461a      	mov	r2, r3
 8000e66:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8000e6a:	1ad3      	subs	r3, r2, r3
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff fb2d 	bl	80004cc <__aeabi_i2d>
 8000e72:	f04f 0200 	mov.w	r2, #0
 8000e76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e7a:	f003 f84f 	bl	8003f1c <pow>
 8000e7e:	4604      	mov	r4, r0
 8000e80:	460d      	mov	r5, r1
 8000e82:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8000e86:	461a      	mov	r2, r3
 8000e88:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff fb1c 	bl	80004cc <__aeabi_i2d>
 8000e94:	f04f 0200 	mov.w	r2, #0
 8000e98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e9c:	f003 f83e 	bl	8003f1c <pow>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	460b      	mov	r3, r1
 8000ea4:	4620      	mov	r0, r4
 8000ea6:	4629      	mov	r1, r5
 8000ea8:	f7ff f9c4 	bl	8000234 <__adddf3>
 8000eac:	4602      	mov	r2, r0
 8000eae:	460b      	mov	r3, r1
 8000eb0:	4614      	mov	r4, r2
 8000eb2:	461d      	mov	r5, r3
 8000eb4:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000ebe:	1ad3      	subs	r3, r2, r3
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff fb03 	bl	80004cc <__aeabi_i2d>
 8000ec6:	f04f 0200 	mov.w	r2, #0
 8000eca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ece:	f003 f825 	bl	8003f1c <pow>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	4620      	mov	r0, r4
 8000ed8:	4629      	mov	r1, r5
 8000eda:	f7ff f9ab 	bl	8000234 <__adddf3>
 8000ede:	4602      	mov	r2, r0
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	4610      	mov	r0, r2
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	f003 f881 	bl	8003fec <sqrt>
 8000eea:	4602      	mov	r2, r0
 8000eec:	460b      	mov	r3, r1
 8000eee:	4610      	mov	r0, r2
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	f7ff fe05 	bl	8000b00 <__aeabi_d2uiz>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	82fb      	strh	r3, [r7, #22]
			if (dist < min_dist)
 8000efa:	8afa      	ldrh	r2, [r7, #22]
 8000efc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d203      	bcs.n	8000f0a <KNearest_match+0x146>
			{
				min_dist = dist;
 8000f02:	8afb      	ldrh	r3, [r7, #22]
 8000f04:	847b      	strh	r3, [r7, #34]	; 0x22
				min_index = i;
 8000f06:	69bb      	ldr	r3, [r7, #24]
 8000f08:	61fb      	str	r3, [r7, #28]
		for (size_t i = 0; i < 6; i++)
 8000f0a:	69bb      	ldr	r3, [r7, #24]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	61bb      	str	r3, [r7, #24]
 8000f10:	69bb      	ldr	r3, [r7, #24]
 8000f12:	2b05      	cmp	r3, #5
 8000f14:	d985      	bls.n	8000e22 <KNearest_match+0x5e>
			}
		}
		temp_colors[i] = true1_colors[min_index];
 8000f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	490d      	ldr	r1, [pc, #52]	; (8000f54 <KNearest_match+0x190>)
 8000f20:	69fa      	ldr	r2, [r7, #28]
 8000f22:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000f26:	801a      	strh	r2, [r3, #0]
		temp_index[i] = min_index;
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	b299      	uxth	r1, r3
 8000f2c:	4a0a      	ldr	r2, [pc, #40]	; (8000f58 <KNearest_match+0x194>)
 8000f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f30:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 9; i++)
 8000f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f36:	3301      	adds	r3, #1
 8000f38:	627b      	str	r3, [r7, #36]	; 0x24
 8000f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3c:	2b08      	cmp	r3, #8
 8000f3e:	f77f af48 	ble.w	8000dd2 <KNearest_match+0xe>
	}
	return;
 8000f42:	bf00      	nop
}
 8000f44:	3728      	adds	r7, #40	; 0x28
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bdb0      	pop	{r4, r5, r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000140 	.word	0x20000140
 8000f50:	20000000 	.word	0x20000000
 8000f54:	2000000c 	.word	0x2000000c
 8000f58:	20000168 	.word	0x20000168

08000f5c <SCCB_delay>:

#define DEV_ADR  ADDR_OV7725 			 


static void SCCB_delay(void)
{	
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
   uint16_t i = 400; 
 8000f62:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000f66:	80fb      	strh	r3, [r7, #6]
   while(i) 
 8000f68:	e002      	b.n	8000f70 <SCCB_delay+0x14>
   { 
     i--; 
 8000f6a:	88fb      	ldrh	r3, [r7, #6]
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	80fb      	strh	r3, [r7, #6]
   while(i) 
 8000f70:	88fb      	ldrh	r3, [r7, #6]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d1f9      	bne.n	8000f6a <SCCB_delay+0xe>
   } 
}
 8000f76:	bf00      	nop
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bc80      	pop	{r7}
 8000f80:	4770      	bx	lr
	...

08000f84 <SCCB_Start>:


static int SCCB_Start(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
	SDA_H;
 8000f88:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <SCCB_Start+0x54>)
 8000f8a:	2280      	movs	r2, #128	; 0x80
 8000f8c:	611a      	str	r2, [r3, #16]
	SCL_H;
 8000f8e:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <SCCB_Start+0x54>)
 8000f90:	2240      	movs	r2, #64	; 0x40
 8000f92:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000f94:	f7ff ffe2 	bl	8000f5c <SCCB_delay>
	if(!SDA_read)
 8000f98:	2180      	movs	r1, #128	; 0x80
 8000f9a:	480f      	ldr	r0, [pc, #60]	; (8000fd8 <SCCB_Start+0x54>)
 8000f9c:	f001 fd32 	bl	8002a04 <HAL_GPIO_ReadPin>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d101      	bne.n	8000faa <SCCB_Start+0x26>
	return DISABLE;	
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	e013      	b.n	8000fd2 <SCCB_Start+0x4e>
	SDA_L;
 8000faa:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <SCCB_Start+0x54>)
 8000fac:	2280      	movs	r2, #128	; 0x80
 8000fae:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000fb0:	f7ff ffd4 	bl	8000f5c <SCCB_delay>
	if(SDA_read) 
 8000fb4:	2180      	movs	r1, #128	; 0x80
 8000fb6:	4808      	ldr	r0, [pc, #32]	; (8000fd8 <SCCB_Start+0x54>)
 8000fb8:	f001 fd24 	bl	8002a04 <HAL_GPIO_ReadPin>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <SCCB_Start+0x42>
	return DISABLE;	
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	e005      	b.n	8000fd2 <SCCB_Start+0x4e>
	SDA_L;
 8000fc6:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <SCCB_Start+0x54>)
 8000fc8:	2280      	movs	r2, #128	; 0x80
 8000fca:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000fcc:	f7ff ffc6 	bl	8000f5c <SCCB_delay>
	return ENABLE;
 8000fd0:	2301      	movs	r3, #1
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40011000 	.word	0x40011000

08000fdc <SCCB_Stop>:


static void SCCB_Stop(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
	SCL_L;
 8000fe0:	4b0a      	ldr	r3, [pc, #40]	; (800100c <SCCB_Stop+0x30>)
 8000fe2:	2240      	movs	r2, #64	; 0x40
 8000fe4:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000fe6:	f7ff ffb9 	bl	8000f5c <SCCB_delay>
	SDA_L;
 8000fea:	4b08      	ldr	r3, [pc, #32]	; (800100c <SCCB_Stop+0x30>)
 8000fec:	2280      	movs	r2, #128	; 0x80
 8000fee:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000ff0:	f7ff ffb4 	bl	8000f5c <SCCB_delay>
	SCL_H;
 8000ff4:	4b05      	ldr	r3, [pc, #20]	; (800100c <SCCB_Stop+0x30>)
 8000ff6:	2240      	movs	r2, #64	; 0x40
 8000ff8:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000ffa:	f7ff ffaf 	bl	8000f5c <SCCB_delay>
	SDA_H;
 8000ffe:	4b03      	ldr	r3, [pc, #12]	; (800100c <SCCB_Stop+0x30>)
 8001000:	2280      	movs	r2, #128	; 0x80
 8001002:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8001004:	f7ff ffaa 	bl	8000f5c <SCCB_delay>
}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40011000 	.word	0x40011000

08001010 <SCCB_Ack>:


static void SCCB_Ack(void)
{	
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
	SCL_L;
 8001014:	4b0a      	ldr	r3, [pc, #40]	; (8001040 <SCCB_Ack+0x30>)
 8001016:	2240      	movs	r2, #64	; 0x40
 8001018:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 800101a:	f7ff ff9f 	bl	8000f5c <SCCB_delay>
	SDA_L;
 800101e:	4b08      	ldr	r3, [pc, #32]	; (8001040 <SCCB_Ack+0x30>)
 8001020:	2280      	movs	r2, #128	; 0x80
 8001022:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8001024:	f7ff ff9a 	bl	8000f5c <SCCB_delay>
	SCL_H;
 8001028:	4b05      	ldr	r3, [pc, #20]	; (8001040 <SCCB_Ack+0x30>)
 800102a:	2240      	movs	r2, #64	; 0x40
 800102c:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 800102e:	f7ff ff95 	bl	8000f5c <SCCB_delay>
	SCL_L;
 8001032:	4b03      	ldr	r3, [pc, #12]	; (8001040 <SCCB_Ack+0x30>)
 8001034:	2240      	movs	r2, #64	; 0x40
 8001036:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8001038:	f7ff ff90 	bl	8000f5c <SCCB_delay>
}
 800103c:	bf00      	nop
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40011000 	.word	0x40011000

08001044 <SCCB_NoAck>:


static void SCCB_NoAck(void)
{	
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
	SCL_L;
 8001048:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <SCCB_NoAck+0x30>)
 800104a:	2240      	movs	r2, #64	; 0x40
 800104c:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 800104e:	f7ff ff85 	bl	8000f5c <SCCB_delay>
	SDA_H;
 8001052:	4b08      	ldr	r3, [pc, #32]	; (8001074 <SCCB_NoAck+0x30>)
 8001054:	2280      	movs	r2, #128	; 0x80
 8001056:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8001058:	f7ff ff80 	bl	8000f5c <SCCB_delay>
	SCL_H;
 800105c:	4b05      	ldr	r3, [pc, #20]	; (8001074 <SCCB_NoAck+0x30>)
 800105e:	2240      	movs	r2, #64	; 0x40
 8001060:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8001062:	f7ff ff7b 	bl	8000f5c <SCCB_delay>
	SCL_L;
 8001066:	4b03      	ldr	r3, [pc, #12]	; (8001074 <SCCB_NoAck+0x30>)
 8001068:	2240      	movs	r2, #64	; 0x40
 800106a:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 800106c:	f7ff ff76 	bl	8000f5c <SCCB_delay>
}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40011000 	.word	0x40011000

08001078 <SCCB_WaitAck>:


static int SCCB_WaitAck(void) 	
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
	SCL_L;
 800107c:	4b10      	ldr	r3, [pc, #64]	; (80010c0 <SCCB_WaitAck+0x48>)
 800107e:	2240      	movs	r2, #64	; 0x40
 8001080:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8001082:	f7ff ff6b 	bl	8000f5c <SCCB_delay>
	SDA_H;			
 8001086:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <SCCB_WaitAck+0x48>)
 8001088:	2280      	movs	r2, #128	; 0x80
 800108a:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 800108c:	f7ff ff66 	bl	8000f5c <SCCB_delay>
	SCL_H;
 8001090:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <SCCB_WaitAck+0x48>)
 8001092:	2240      	movs	r2, #64	; 0x40
 8001094:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8001096:	f7ff ff61 	bl	8000f5c <SCCB_delay>
	if(SDA_read)
 800109a:	2180      	movs	r1, #128	; 0x80
 800109c:	4808      	ldr	r0, [pc, #32]	; (80010c0 <SCCB_WaitAck+0x48>)
 800109e:	f001 fcb1 	bl	8002a04 <HAL_GPIO_ReadPin>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d004      	beq.n	80010b2 <SCCB_WaitAck+0x3a>
	{
      SCL_L;
 80010a8:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <SCCB_WaitAck+0x48>)
 80010aa:	2240      	movs	r2, #64	; 0x40
 80010ac:	615a      	str	r2, [r3, #20]
      return DISABLE;
 80010ae:	2300      	movs	r3, #0
 80010b0:	e003      	b.n	80010ba <SCCB_WaitAck+0x42>
	}
	SCL_L;
 80010b2:	4b03      	ldr	r3, [pc, #12]	; (80010c0 <SCCB_WaitAck+0x48>)
 80010b4:	2240      	movs	r2, #64	; 0x40
 80010b6:	615a      	str	r2, [r3, #20]
	return ENABLE;
 80010b8:	2301      	movs	r3, #1
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40011000 	.word	0x40011000

080010c4 <SCCB_SendByte>:


static void SCCB_SendByte(uint8_t SendByte) 
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	71fb      	strb	r3, [r7, #7]
    uint8_t i=8;
 80010ce:	2308      	movs	r3, #8
 80010d0:	73fb      	strb	r3, [r7, #15]
    while(i--)
 80010d2:	e019      	b.n	8001108 <SCCB_SendByte+0x44>
    {
        SCL_L;
 80010d4:	4b12      	ldr	r3, [pc, #72]	; (8001120 <SCCB_SendByte+0x5c>)
 80010d6:	2240      	movs	r2, #64	; 0x40
 80010d8:	615a      	str	r2, [r3, #20]
        SCCB_delay();
 80010da:	f7ff ff3f 	bl	8000f5c <SCCB_delay>
      if(SendByte&0x80)
 80010de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	da03      	bge.n	80010ee <SCCB_SendByte+0x2a>
        SDA_H;  
 80010e6:	4b0e      	ldr	r3, [pc, #56]	; (8001120 <SCCB_SendByte+0x5c>)
 80010e8:	2280      	movs	r2, #128	; 0x80
 80010ea:	611a      	str	r2, [r3, #16]
 80010ec:	e002      	b.n	80010f4 <SCCB_SendByte+0x30>
      else 
        SDA_L;   
 80010ee:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <SCCB_SendByte+0x5c>)
 80010f0:	2280      	movs	r2, #128	; 0x80
 80010f2:	615a      	str	r2, [r3, #20]
        SendByte<<=1;
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	71fb      	strb	r3, [r7, #7]
        SCCB_delay();
 80010fa:	f7ff ff2f 	bl	8000f5c <SCCB_delay>
		SCL_H;
 80010fe:	4b08      	ldr	r3, [pc, #32]	; (8001120 <SCCB_SendByte+0x5c>)
 8001100:	2240      	movs	r2, #64	; 0x40
 8001102:	611a      	str	r2, [r3, #16]
        SCCB_delay();
 8001104:	f7ff ff2a 	bl	8000f5c <SCCB_delay>
    while(i--)
 8001108:	7bfb      	ldrb	r3, [r7, #15]
 800110a:	1e5a      	subs	r2, r3, #1
 800110c:	73fa      	strb	r2, [r7, #15]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d1e0      	bne.n	80010d4 <SCCB_SendByte+0x10>
    }
    SCL_L;
 8001112:	4b03      	ldr	r3, [pc, #12]	; (8001120 <SCCB_SendByte+0x5c>)
 8001114:	2240      	movs	r2, #64	; 0x40
 8001116:	615a      	str	r2, [r3, #20]
}
 8001118:	bf00      	nop
 800111a:	3710      	adds	r7, #16
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40011000 	.word	0x40011000

08001124 <SCCB_ReceiveByte>:


static int SCCB_ReceiveByte(void)  
{ 
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
    uint8_t i=8;
 800112a:	2308      	movs	r3, #8
 800112c:	71fb      	strb	r3, [r7, #7]
    uint8_t ReceiveByte=0;
 800112e:	2300      	movs	r3, #0
 8001130:	71bb      	strb	r3, [r7, #6]

    SDA_H;				
 8001132:	4b14      	ldr	r3, [pc, #80]	; (8001184 <SCCB_ReceiveByte+0x60>)
 8001134:	2280      	movs	r2, #128	; 0x80
 8001136:	611a      	str	r2, [r3, #16]
    while(i--)
 8001138:	e017      	b.n	800116a <SCCB_ReceiveByte+0x46>
    {
      ReceiveByte<<=1;      
 800113a:	79bb      	ldrb	r3, [r7, #6]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	71bb      	strb	r3, [r7, #6]
      SCL_L;
 8001140:	4b10      	ldr	r3, [pc, #64]	; (8001184 <SCCB_ReceiveByte+0x60>)
 8001142:	2240      	movs	r2, #64	; 0x40
 8001144:	615a      	str	r2, [r3, #20]
      SCCB_delay();
 8001146:	f7ff ff09 	bl	8000f5c <SCCB_delay>
	  SCL_H;
 800114a:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <SCCB_ReceiveByte+0x60>)
 800114c:	2240      	movs	r2, #64	; 0x40
 800114e:	611a      	str	r2, [r3, #16]
      SCCB_delay();	
 8001150:	f7ff ff04 	bl	8000f5c <SCCB_delay>
      if(SDA_read)
 8001154:	2180      	movs	r1, #128	; 0x80
 8001156:	480b      	ldr	r0, [pc, #44]	; (8001184 <SCCB_ReceiveByte+0x60>)
 8001158:	f001 fc54 	bl	8002a04 <HAL_GPIO_ReadPin>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <SCCB_ReceiveByte+0x46>
      {
        ReceiveByte|=0x01;
 8001162:	79bb      	ldrb	r3, [r7, #6]
 8001164:	f043 0301 	orr.w	r3, r3, #1
 8001168:	71bb      	strb	r3, [r7, #6]
    while(i--)
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	1e5a      	subs	r2, r3, #1
 800116e:	71fa      	strb	r2, [r7, #7]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d1e2      	bne.n	800113a <SCCB_ReceiveByte+0x16>
      }
    }
    SCL_L;
 8001174:	4b03      	ldr	r3, [pc, #12]	; (8001184 <SCCB_ReceiveByte+0x60>)
 8001176:	2240      	movs	r2, #64	; 0x40
 8001178:	615a      	str	r2, [r3, #20]
    return ReceiveByte;
 800117a:	79bb      	ldrb	r3, [r7, #6]
}
 800117c:	4618      	mov	r0, r3
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40011000 	.word	0x40011000

08001188 <SCCB_WriteByte>:

          
int SCCB_WriteByte( uint16_t WriteAddress , uint8_t SendByte )
{		
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	460a      	mov	r2, r1
 8001192:	80fb      	strh	r3, [r7, #6]
 8001194:	4613      	mov	r3, r2
 8001196:	717b      	strb	r3, [r7, #5]
    if(!SCCB_Start())
 8001198:	f7ff fef4 	bl	8000f84 <SCCB_Start>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d101      	bne.n	80011a6 <SCCB_WriteByte+0x1e>
	{
	    return DISABLE;
 80011a2:	2300      	movs	r3, #0
 80011a4:	e01b      	b.n	80011de <SCCB_WriteByte+0x56>
	}
    SCCB_SendByte( DEV_ADR );                
 80011a6:	2042      	movs	r0, #66	; 0x42
 80011a8:	f7ff ff8c 	bl	80010c4 <SCCB_SendByte>
    if( !SCCB_WaitAck() )
 80011ac:	f7ff ff64 	bl	8001078 <SCCB_WaitAck>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d103      	bne.n	80011be <SCCB_WriteByte+0x36>
	{
		SCCB_Stop(); 
 80011b6:	f7ff ff11 	bl	8000fdc <SCCB_Stop>
		return DISABLE;
 80011ba:	2300      	movs	r3, #0
 80011bc:	e00f      	b.n	80011de <SCCB_WriteByte+0x56>
	}
    SCCB_SendByte((uint8_t)(WriteAddress & 0x00FF));  
 80011be:	88fb      	ldrh	r3, [r7, #6]
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff ff7e 	bl	80010c4 <SCCB_SendByte>
    SCCB_WaitAck();	
 80011c8:	f7ff ff56 	bl	8001078 <SCCB_WaitAck>
    SCCB_SendByte(SendByte);
 80011cc:	797b      	ldrb	r3, [r7, #5]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff ff78 	bl	80010c4 <SCCB_SendByte>
    SCCB_WaitAck();   
 80011d4:	f7ff ff50 	bl	8001078 <SCCB_WaitAck>
    SCCB_Stop(); 
 80011d8:	f7ff ff00 	bl	8000fdc <SCCB_Stop>
    return ENABLE;
 80011dc:	2301      	movs	r3, #1
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <SCCB_ReadByte>:

          
int SCCB_ReadByte(uint8_t* pBuffer, uint16_t length, uint8_t ReadAddress)
{	
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
 80011ee:	460b      	mov	r3, r1
 80011f0:	807b      	strh	r3, [r7, #2]
 80011f2:	4613      	mov	r3, r2
 80011f4:	707b      	strb	r3, [r7, #1]
    if(!SCCB_Start())
 80011f6:	f7ff fec5 	bl	8000f84 <SCCB_Start>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d101      	bne.n	8001204 <SCCB_ReadByte+0x1e>
	{
	    return DISABLE;
 8001200:	2300      	movs	r3, #0
 8001202:	e040      	b.n	8001286 <SCCB_ReadByte+0xa0>
	}
    SCCB_SendByte( DEV_ADR );       
 8001204:	2042      	movs	r0, #66	; 0x42
 8001206:	f7ff ff5d 	bl	80010c4 <SCCB_SendByte>
    if( !SCCB_WaitAck() )
 800120a:	f7ff ff35 	bl	8001078 <SCCB_WaitAck>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d103      	bne.n	800121c <SCCB_ReadByte+0x36>
	{
		SCCB_Stop(); 
 8001214:	f7ff fee2 	bl	8000fdc <SCCB_Stop>
		return DISABLE;
 8001218:	2300      	movs	r3, #0
 800121a:	e034      	b.n	8001286 <SCCB_ReadByte+0xa0>
	}
    SCCB_SendByte( ReadAddress );     
 800121c:	787b      	ldrb	r3, [r7, #1]
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff ff50 	bl	80010c4 <SCCB_SendByte>
    SCCB_WaitAck();	
 8001224:	f7ff ff28 	bl	8001078 <SCCB_WaitAck>
    SCCB_Stop(); 
 8001228:	f7ff fed8 	bl	8000fdc <SCCB_Stop>
	
    if(!SCCB_Start())
 800122c:	f7ff feaa 	bl	8000f84 <SCCB_Start>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d101      	bne.n	800123a <SCCB_ReadByte+0x54>
	{
		return DISABLE;
 8001236:	2300      	movs	r3, #0
 8001238:	e025      	b.n	8001286 <SCCB_ReadByte+0xa0>
	}
    SCCB_SendByte( DEV_ADR + 1 );   
 800123a:	2043      	movs	r0, #67	; 0x43
 800123c:	f7ff ff42 	bl	80010c4 <SCCB_SendByte>
    if(!SCCB_WaitAck())
 8001240:	f7ff ff1a 	bl	8001078 <SCCB_WaitAck>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d117      	bne.n	800127a <SCCB_ReadByte+0x94>
	{
		SCCB_Stop(); 
 800124a:	f7ff fec7 	bl	8000fdc <SCCB_Stop>
		return DISABLE;
 800124e:	2300      	movs	r3, #0
 8001250:	e019      	b.n	8001286 <SCCB_ReadByte+0xa0>
	}
    while(length)
    {
      *pBuffer = SCCB_ReceiveByte();
 8001252:	f7ff ff67 	bl	8001124 <SCCB_ReceiveByte>
 8001256:	4603      	mov	r3, r0
 8001258:	b2da      	uxtb	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	701a      	strb	r2, [r3, #0]
      if(length == 1)
 800125e:	887b      	ldrh	r3, [r7, #2]
 8001260:	2b01      	cmp	r3, #1
 8001262:	d102      	bne.n	800126a <SCCB_ReadByte+0x84>
	  {
		  SCCB_NoAck();
 8001264:	f7ff feee 	bl	8001044 <SCCB_NoAck>
 8001268:	e001      	b.n	800126e <SCCB_ReadByte+0x88>
	  }
      else
	  {
		SCCB_Ack(); 
 800126a:	f7ff fed1 	bl	8001010 <SCCB_Ack>
	  }
      pBuffer++;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	3301      	adds	r3, #1
 8001272:	607b      	str	r3, [r7, #4]
      length--;
 8001274:	887b      	ldrh	r3, [r7, #2]
 8001276:	3b01      	subs	r3, #1
 8001278:	807b      	strh	r3, [r7, #2]
    while(length)
 800127a:	887b      	ldrh	r3, [r7, #2]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d1e8      	bne.n	8001252 <SCCB_ReadByte+0x6c>
    }
    SCCB_Stop();
 8001280:	f7ff feac 	bl	8000fdc <SCCB_Stop>
    return ENABLE;
 8001284:	2301      	movs	r3, #1
}
 8001286:	4618      	mov	r0, r3
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
	...

08001290 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b088      	sub	sp, #32
 8001294:	af00      	add	r7, sp, #0
  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
 80012a4:	615a      	str	r2, [r3, #20]
 80012a6:	619a      	str	r2, [r3, #24]

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80012a8:	4b28      	ldr	r3, [pc, #160]	; (800134c <MX_FSMC_Init+0xbc>)
 80012aa:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80012ae:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80012b0:	4b26      	ldr	r3, [pc, #152]	; (800134c <MX_FSMC_Init+0xbc>)
 80012b2:	4a27      	ldr	r2, [pc, #156]	; (8001350 <MX_FSMC_Init+0xc0>)
 80012b4:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80012b6:	4b25      	ldr	r3, [pc, #148]	; (800134c <MX_FSMC_Init+0xbc>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80012bc:	4b23      	ldr	r3, [pc, #140]	; (800134c <MX_FSMC_Init+0xbc>)
 80012be:	2200      	movs	r2, #0
 80012c0:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80012c2:	4b22      	ldr	r3, [pc, #136]	; (800134c <MX_FSMC_Init+0xbc>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80012c8:	4b20      	ldr	r3, [pc, #128]	; (800134c <MX_FSMC_Init+0xbc>)
 80012ca:	2210      	movs	r2, #16
 80012cc:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80012ce:	4b1f      	ldr	r3, [pc, #124]	; (800134c <MX_FSMC_Init+0xbc>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80012d4:	4b1d      	ldr	r3, [pc, #116]	; (800134c <MX_FSMC_Init+0xbc>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80012da:	4b1c      	ldr	r3, [pc, #112]	; (800134c <MX_FSMC_Init+0xbc>)
 80012dc:	2200      	movs	r2, #0
 80012de:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80012e0:	4b1a      	ldr	r3, [pc, #104]	; (800134c <MX_FSMC_Init+0xbc>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80012e6:	4b19      	ldr	r3, [pc, #100]	; (800134c <MX_FSMC_Init+0xbc>)
 80012e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012ec:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80012ee:	4b17      	ldr	r3, [pc, #92]	; (800134c <MX_FSMC_Init+0xbc>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80012f4:	4b15      	ldr	r3, [pc, #84]	; (800134c <MX_FSMC_Init+0xbc>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80012fa:	4b14      	ldr	r3, [pc, #80]	; (800134c <MX_FSMC_Init+0xbc>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001300:	4b12      	ldr	r3, [pc, #72]	; (800134c <MX_FSMC_Init+0xbc>)
 8001302:	2200      	movs	r2, #0
 8001304:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001306:	230f      	movs	r3, #15
 8001308:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800130a:	230f      	movs	r3, #15
 800130c:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 800130e:	23ff      	movs	r3, #255	; 0xff
 8001310:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001312:	230f      	movs	r3, #15
 8001314:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001316:	2310      	movs	r3, #16
 8001318:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800131a:	2311      	movs	r3, #17
 800131c:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800131e:	2300      	movs	r3, #0
 8001320:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	2200      	movs	r2, #0
 8001326:	4619      	mov	r1, r3
 8001328:	4808      	ldr	r0, [pc, #32]	; (800134c <MX_FSMC_Init+0xbc>)
 800132a:	f001 ffc5 	bl	80032b8 <HAL_SRAM_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 8001334:	f000 fd2b 	bl	8001d8e <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8001338:	4b06      	ldr	r3, [pc, #24]	; (8001354 <MX_FSMC_Init+0xc4>)
 800133a:	69db      	ldr	r3, [r3, #28]
 800133c:	4a05      	ldr	r2, [pc, #20]	; (8001354 <MX_FSMC_Init+0xc4>)
 800133e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001342:	61d3      	str	r3, [r2, #28]

}
 8001344:	bf00      	nop
 8001346:	3720      	adds	r7, #32
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	2000017c 	.word	0x2000017c
 8001350:	a0000104 	.word	0xa0000104
 8001354:	40010000 	.word	0x40010000

08001358 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135e:	f107 0308 	add.w	r3, r7, #8
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 800136c:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <HAL_FSMC_MspInit+0x78>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d129      	bne.n	80013c8 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8001374:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <HAL_FSMC_MspInit+0x78>)
 8001376:	2201      	movs	r2, #1
 8001378:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800137a:	4b16      	ldr	r3, [pc, #88]	; (80013d4 <HAL_FSMC_MspInit+0x7c>)
 800137c:	695b      	ldr	r3, [r3, #20]
 800137e:	4a15      	ldr	r2, [pc, #84]	; (80013d4 <HAL_FSMC_MspInit+0x7c>)
 8001380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001384:	6153      	str	r3, [r2, #20]
 8001386:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <HAL_FSMC_MspInit+0x7c>)
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800138e:	607b      	str	r3, [r7, #4]
 8001390:	687b      	ldr	r3, [r7, #4]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001392:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001396:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001398:	2302      	movs	r3, #2
 800139a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800139c:	2303      	movs	r3, #3
 800139e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013a0:	f107 0308 	add.w	r3, r7, #8
 80013a4:	4619      	mov	r1, r3
 80013a6:	480c      	ldr	r0, [pc, #48]	; (80013d8 <HAL_FSMC_MspInit+0x80>)
 80013a8:	f001 f994 	bl	80026d4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80013ac:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 80013b0:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b2:	2302      	movs	r3, #2
 80013b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013b6:	2303      	movs	r3, #3
 80013b8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ba:	f107 0308 	add.w	r3, r7, #8
 80013be:	4619      	mov	r1, r3
 80013c0:	4806      	ldr	r0, [pc, #24]	; (80013dc <HAL_FSMC_MspInit+0x84>)
 80013c2:	f001 f987 	bl	80026d4 <HAL_GPIO_Init>
 80013c6:	e000      	b.n	80013ca <HAL_FSMC_MspInit+0x72>
    return;
 80013c8:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80013ca:	3718      	adds	r7, #24
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	200001c0 	.word	0x200001c0
 80013d4:	40021000 	.word	0x40021000
 80013d8:	40011800 	.word	0x40011800
 80013dc:	40011400 	.word	0x40011400

080013e0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80013e8:	f7ff ffb6 	bl	8001358 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80013ec:	bf00      	nop
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08a      	sub	sp, #40	; 0x28
 80013f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fa:	f107 0318 	add.w	r3, r7, #24
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]
 8001406:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001408:	4b5e      	ldr	r3, [pc, #376]	; (8001584 <MX_GPIO_Init+0x190>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	4a5d      	ldr	r2, [pc, #372]	; (8001584 <MX_GPIO_Init+0x190>)
 800140e:	f043 0310 	orr.w	r3, r3, #16
 8001412:	6193      	str	r3, [r2, #24]
 8001414:	4b5b      	ldr	r3, [pc, #364]	; (8001584 <MX_GPIO_Init+0x190>)
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	f003 0310 	and.w	r3, r3, #16
 800141c:	617b      	str	r3, [r7, #20]
 800141e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001420:	4b58      	ldr	r3, [pc, #352]	; (8001584 <MX_GPIO_Init+0x190>)
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	4a57      	ldr	r2, [pc, #348]	; (8001584 <MX_GPIO_Init+0x190>)
 8001426:	f043 0304 	orr.w	r3, r3, #4
 800142a:	6193      	str	r3, [r2, #24]
 800142c:	4b55      	ldr	r3, [pc, #340]	; (8001584 <MX_GPIO_Init+0x190>)
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	f003 0304 	and.w	r3, r3, #4
 8001434:	613b      	str	r3, [r7, #16]
 8001436:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001438:	4b52      	ldr	r3, [pc, #328]	; (8001584 <MX_GPIO_Init+0x190>)
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	4a51      	ldr	r2, [pc, #324]	; (8001584 <MX_GPIO_Init+0x190>)
 800143e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001442:	6193      	str	r3, [r2, #24]
 8001444:	4b4f      	ldr	r3, [pc, #316]	; (8001584 <MX_GPIO_Init+0x190>)
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001450:	4b4c      	ldr	r3, [pc, #304]	; (8001584 <MX_GPIO_Init+0x190>)
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	4a4b      	ldr	r2, [pc, #300]	; (8001584 <MX_GPIO_Init+0x190>)
 8001456:	f043 0308 	orr.w	r3, r3, #8
 800145a:	6193      	str	r3, [r2, #24]
 800145c:	4b49      	ldr	r3, [pc, #292]	; (8001584 <MX_GPIO_Init+0x190>)
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	f003 0308 	and.w	r3, r3, #8
 8001464:	60bb      	str	r3, [r7, #8]
 8001466:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001468:	4b46      	ldr	r3, [pc, #280]	; (8001584 <MX_GPIO_Init+0x190>)
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	4a45      	ldr	r2, [pc, #276]	; (8001584 <MX_GPIO_Init+0x190>)
 800146e:	f043 0320 	orr.w	r3, r3, #32
 8001472:	6193      	str	r3, [r2, #24]
 8001474:	4b43      	ldr	r3, [pc, #268]	; (8001584 <MX_GPIO_Init+0x190>)
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	f003 0320 	and.w	r3, r3, #32
 800147c:	607b      	str	r3, [r7, #4]
 800147e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8001480:	2200      	movs	r2, #0
 8001482:	210c      	movs	r1, #12
 8001484:	4840      	ldr	r0, [pc, #256]	; (8001588 <MX_GPIO_Init+0x194>)
 8001486:	f001 fad4 	bl	8002a32 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800148a:	2200      	movs	r2, #0
 800148c:	21f0      	movs	r1, #240	; 0xf0
 800148e:	483f      	ldr	r0, [pc, #252]	; (800158c <MX_GPIO_Init+0x198>)
 8001490:	f001 facf 	bl	8002a32 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_3, GPIO_PIN_RESET);
 8001494:	2200      	movs	r2, #0
 8001496:	f241 0108 	movw	r1, #4104	; 0x1008
 800149a:	483d      	ldr	r0, [pc, #244]	; (8001590 <MX_GPIO_Init+0x19c>)
 800149c:	f001 fac9 	bl	8002a32 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 80014a0:	2200      	movs	r2, #0
 80014a2:	2102      	movs	r1, #2
 80014a4:	483b      	ldr	r0, [pc, #236]	; (8001594 <MX_GPIO_Init+0x1a0>)
 80014a6:	f001 fac4 	bl	8002a32 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014aa:	2308      	movs	r3, #8
 80014ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014ae:	4b3a      	ldr	r3, [pc, #232]	; (8001598 <MX_GPIO_Init+0x1a4>)
 80014b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014b6:	f107 0318 	add.w	r3, r7, #24
 80014ba:	4619      	mov	r1, r3
 80014bc:	4833      	ldr	r0, [pc, #204]	; (800158c <MX_GPIO_Init+0x198>)
 80014be:	f001 f909 	bl	80026d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014c2:	230c      	movs	r3, #12
 80014c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c6:	2301      	movs	r3, #1
 80014c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014ce:	2303      	movs	r3, #3
 80014d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d2:	f107 0318 	add.w	r3, r7, #24
 80014d6:	4619      	mov	r1, r3
 80014d8:	482b      	ldr	r0, [pc, #172]	; (8001588 <MX_GPIO_Init+0x194>)
 80014da:	f001 f8fb 	bl	80026d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80014de:	2330      	movs	r3, #48	; 0x30
 80014e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e2:	2301      	movs	r3, #1
 80014e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014ea:	2303      	movs	r3, #3
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ee:	f107 0318 	add.w	r3, r7, #24
 80014f2:	4619      	mov	r1, r3
 80014f4:	4825      	ldr	r0, [pc, #148]	; (800158c <MX_GPIO_Init+0x198>)
 80014f6:	f001 f8ed 	bl	80026d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80014fa:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80014fe:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001500:	2300      	movs	r3, #0
 8001502:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001508:	f107 0318 	add.w	r3, r7, #24
 800150c:	4619      	mov	r1, r3
 800150e:	4823      	ldr	r0, [pc, #140]	; (800159c <MX_GPIO_Init+0x1a8>)
 8001510:	f001 f8e0 	bl	80026d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_3;
 8001514:	f241 0308 	movw	r3, #4104	; 0x1008
 8001518:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151a:	2301      	movs	r3, #1
 800151c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001522:	2303      	movs	r3, #3
 8001524:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001526:	f107 0318 	add.w	r3, r7, #24
 800152a:	4619      	mov	r1, r3
 800152c:	4818      	ldr	r0, [pc, #96]	; (8001590 <MX_GPIO_Init+0x19c>)
 800152e:	f001 f8d1 	bl	80026d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001532:	23c0      	movs	r3, #192	; 0xc0
 8001534:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001536:	2311      	movs	r3, #17
 8001538:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800153e:	2303      	movs	r3, #3
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001542:	f107 0318 	add.w	r3, r7, #24
 8001546:	4619      	mov	r1, r3
 8001548:	4810      	ldr	r0, [pc, #64]	; (800158c <MX_GPIO_Init+0x198>)
 800154a:	f001 f8c3 	bl	80026d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800154e:	2302      	movs	r3, #2
 8001550:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001552:	2301      	movs	r3, #1
 8001554:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800155a:	2303      	movs	r3, #3
 800155c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800155e:	f107 0318 	add.w	r3, r7, #24
 8001562:	4619      	mov	r1, r3
 8001564:	480b      	ldr	r0, [pc, #44]	; (8001594 <MX_GPIO_Init+0x1a0>)
 8001566:	f001 f8b5 	bl	80026d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800156a:	2200      	movs	r2, #0
 800156c:	2100      	movs	r1, #0
 800156e:	2009      	movs	r0, #9
 8001570:	f000 ff71 	bl	8002456 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001574:	2009      	movs	r0, #9
 8001576:	f000 ff8a 	bl	800248e <HAL_NVIC_EnableIRQ>

}
 800157a:	bf00      	nop
 800157c:	3728      	adds	r7, #40	; 0x28
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40021000 	.word	0x40021000
 8001588:	40010800 	.word	0x40010800
 800158c:	40011000 	.word	0x40011000
 8001590:	40011400 	.word	0x40011400
 8001594:	40011800 	.word	0x40011800
 8001598:	10210000 	.word	0x10210000
 800159c:	40010c00 	.word	0x40010c00

080015a0 <Delay>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	e002      	b.n	80015b0 <Delay+0x10>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	3b01      	subs	r3, #1
 80015ae:	607b      	str	r3, [r7, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1f9      	bne.n	80015aa <Delay+0xa>
 80015b6:	bf00      	nop
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	bc80      	pop	{r7}
 80015c0:	4770      	bx	lr

080015c2 <LCD_INIT>:

void LCD_INIT ( void )
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 80015c8:	2001      	movs	r0, #1
 80015ca:	f000 f829 	bl	8001620 <LCD_BackLed_Control>
	LCD_Rst();
 80015ce:	f000 f80f 	bl	80015f0 <LCD_Rst>
	LCD_REG_Config();
 80015d2:	f000 f85f 	bl	8001694 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 80015d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80015e0:	22f0      	movs	r2, #240	; 0xf0
 80015e2:	2100      	movs	r1, #0
 80015e4:	2000      	movs	r0, #0
 80015e6:	f000 f9e6 	bl	80019b6 <LCD_Clear>
}
 80015ea:	bf00      	nop
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <LCD_Rst>:



void LCD_Rst ( void )
{			
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 80015f4:	2200      	movs	r2, #0
 80015f6:	2102      	movs	r1, #2
 80015f8:	4807      	ldr	r0, [pc, #28]	; (8001618 <LCD_Rst+0x28>)
 80015fa:	f001 fa1a 	bl	8002a32 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 80015fe:	4807      	ldr	r0, [pc, #28]	; (800161c <LCD_Rst+0x2c>)
 8001600:	f7ff ffce 	bl	80015a0 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8001604:	2201      	movs	r2, #1
 8001606:	2102      	movs	r1, #2
 8001608:	4803      	ldr	r0, [pc, #12]	; (8001618 <LCD_Rst+0x28>)
 800160a:	f001 fa12 	bl	8002a32 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 800160e:	4803      	ldr	r0, [pc, #12]	; (800161c <LCD_Rst+0x2c>)
 8001610:	f7ff ffc6 	bl	80015a0 <Delay>
}
 8001614:	bf00      	nop
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40011800 	.word	0x40011800
 800161c:	0002bffc 	.word	0x0002bffc

08001620 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 800162a:	79fb      	ldrb	r3, [r7, #7]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d006      	beq.n	800163e <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8001630:	2200      	movs	r2, #0
 8001632:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001636:	4807      	ldr	r0, [pc, #28]	; (8001654 <LCD_BackLed_Control+0x34>)
 8001638:	f001 f9fb 	bl	8002a32 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 800163c:	e005      	b.n	800164a <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 800163e:	2201      	movs	r2, #1
 8001640:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001644:	4803      	ldr	r0, [pc, #12]	; (8001654 <LCD_BackLed_Control+0x34>)
 8001646:	f001 f9f4 	bl	8002a32 <HAL_GPIO_WritePin>
}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40011400 	.word	0x40011400

08001658 <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8001662:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001666:	88fb      	ldrh	r3, [r7, #6]
 8001668:	8013      	strh	r3, [r2, #0]
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr

08001674 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800167e:	4a04      	ldr	r2, [pc, #16]	; (8001690 <LCD_Write_Data+0x1c>)
 8001680:	88fb      	ldrh	r3, [r7, #6]
 8001682:	8013      	strh	r3, [r2, #0]
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	bc80      	pop	{r7}
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	60020000 	.word	0x60020000

08001694 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 8001698:	20cf      	movs	r0, #207	; 0xcf
 800169a:	f7ff ffdd 	bl	8001658 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 800169e:	2000      	movs	r0, #0
 80016a0:	f7ff ffe8 	bl	8001674 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 80016a4:	2081      	movs	r0, #129	; 0x81
 80016a6:	f7ff ffe5 	bl	8001674 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 80016aa:	2030      	movs	r0, #48	; 0x30
 80016ac:	f7ff ffe2 	bl	8001674 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 80016b0:	20ed      	movs	r0, #237	; 0xed
 80016b2:	f7ff ffd1 	bl	8001658 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 80016b6:	2064      	movs	r0, #100	; 0x64
 80016b8:	f7ff ffdc 	bl	8001674 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 80016bc:	2003      	movs	r0, #3
 80016be:	f7ff ffd9 	bl	8001674 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 80016c2:	2012      	movs	r0, #18
 80016c4:	f7ff ffd6 	bl	8001674 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 80016c8:	2081      	movs	r0, #129	; 0x81
 80016ca:	f7ff ffd3 	bl	8001674 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 80016ce:	20e8      	movs	r0, #232	; 0xe8
 80016d0:	f7ff ffc2 	bl	8001658 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 80016d4:	2085      	movs	r0, #133	; 0x85
 80016d6:	f7ff ffcd 	bl	8001674 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 80016da:	2010      	movs	r0, #16
 80016dc:	f7ff ffca 	bl	8001674 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 80016e0:	2078      	movs	r0, #120	; 0x78
 80016e2:	f7ff ffc7 	bl	8001674 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 80016e6:	20cb      	movs	r0, #203	; 0xcb
 80016e8:	f7ff ffb6 	bl	8001658 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 80016ec:	2039      	movs	r0, #57	; 0x39
 80016ee:	f7ff ffc1 	bl	8001674 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 80016f2:	202c      	movs	r0, #44	; 0x2c
 80016f4:	f7ff ffbe 	bl	8001674 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80016f8:	2000      	movs	r0, #0
 80016fa:	f7ff ffbb 	bl	8001674 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 80016fe:	2034      	movs	r0, #52	; 0x34
 8001700:	f7ff ffb8 	bl	8001674 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 8001704:	2002      	movs	r0, #2
 8001706:	f7ff ffb5 	bl	8001674 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 800170a:	20f7      	movs	r0, #247	; 0xf7
 800170c:	f7ff ffa4 	bl	8001658 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8001710:	2020      	movs	r0, #32
 8001712:	f7ff ffaf 	bl	8001674 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 8001716:	20ea      	movs	r0, #234	; 0xea
 8001718:	f7ff ff9e 	bl	8001658 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800171c:	2000      	movs	r0, #0
 800171e:	f7ff ffa9 	bl	8001674 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001722:	2000      	movs	r0, #0
 8001724:	f7ff ffa6 	bl	8001674 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 8001728:	20b1      	movs	r0, #177	; 0xb1
 800172a:	f7ff ff95 	bl	8001658 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800172e:	2000      	movs	r0, #0
 8001730:	f7ff ffa0 	bl	8001674 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8001734:	201b      	movs	r0, #27
 8001736:	f7ff ff9d 	bl	8001674 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 800173a:	20b6      	movs	r0, #182	; 0xb6
 800173c:	f7ff ff8c 	bl	8001658 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 8001740:	200a      	movs	r0, #10
 8001742:	f7ff ff97 	bl	8001674 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 8001746:	20a2      	movs	r0, #162	; 0xa2
 8001748:	f7ff ff94 	bl	8001674 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 800174c:	20c0      	movs	r0, #192	; 0xc0
 800174e:	f7ff ff83 	bl	8001658 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 8001752:	2035      	movs	r0, #53	; 0x35
 8001754:	f7ff ff8e 	bl	8001674 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 8001758:	20c1      	movs	r0, #193	; 0xc1
 800175a:	f7ff ff7d 	bl	8001658 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 800175e:	2011      	movs	r0, #17
 8001760:	f7ff ff88 	bl	8001674 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 8001764:	20c5      	movs	r0, #197	; 0xc5
 8001766:	f7ff ff77 	bl	8001658 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 800176a:	2045      	movs	r0, #69	; 0x45
 800176c:	f7ff ff82 	bl	8001674 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8001770:	2045      	movs	r0, #69	; 0x45
 8001772:	f7ff ff7f 	bl	8001674 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 8001776:	20c7      	movs	r0, #199	; 0xc7
 8001778:	f7ff ff6e 	bl	8001658 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 800177c:	20a2      	movs	r0, #162	; 0xa2
 800177e:	f7ff ff79 	bl	8001674 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 8001782:	20f2      	movs	r0, #242	; 0xf2
 8001784:	f7ff ff68 	bl	8001658 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001788:	2000      	movs	r0, #0
 800178a:	f7ff ff73 	bl	8001674 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 800178e:	2026      	movs	r0, #38	; 0x26
 8001790:	f7ff ff62 	bl	8001658 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 8001794:	2001      	movs	r0, #1
 8001796:	f7ff ff6d 	bl	8001674 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 800179a:	20e0      	movs	r0, #224	; 0xe0
 800179c:	f7ff ff5c 	bl	8001658 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 80017a0:	200f      	movs	r0, #15
 80017a2:	f7ff ff67 	bl	8001674 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 80017a6:	2026      	movs	r0, #38	; 0x26
 80017a8:	f7ff ff64 	bl	8001674 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 80017ac:	2024      	movs	r0, #36	; 0x24
 80017ae:	f7ff ff61 	bl	8001674 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 80017b2:	200b      	movs	r0, #11
 80017b4:	f7ff ff5e 	bl	8001674 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 80017b8:	200e      	movs	r0, #14
 80017ba:	f7ff ff5b 	bl	8001674 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 80017be:	2009      	movs	r0, #9
 80017c0:	f7ff ff58 	bl	8001674 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 80017c4:	2054      	movs	r0, #84	; 0x54
 80017c6:	f7ff ff55 	bl	8001674 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 80017ca:	20a8      	movs	r0, #168	; 0xa8
 80017cc:	f7ff ff52 	bl	8001674 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 80017d0:	2046      	movs	r0, #70	; 0x46
 80017d2:	f7ff ff4f 	bl	8001674 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 80017d6:	200c      	movs	r0, #12
 80017d8:	f7ff ff4c 	bl	8001674 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 80017dc:	2017      	movs	r0, #23
 80017de:	f7ff ff49 	bl	8001674 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 80017e2:	2009      	movs	r0, #9
 80017e4:	f7ff ff46 	bl	8001674 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 80017e8:	200f      	movs	r0, #15
 80017ea:	f7ff ff43 	bl	8001674 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 80017ee:	2007      	movs	r0, #7
 80017f0:	f7ff ff40 	bl	8001674 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80017f4:	2000      	movs	r0, #0
 80017f6:	f7ff ff3d 	bl	8001674 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 80017fa:	20e1      	movs	r0, #225	; 0xe1
 80017fc:	f7ff ff2c 	bl	8001658 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001800:	2000      	movs	r0, #0
 8001802:	f7ff ff37 	bl	8001674 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 8001806:	2019      	movs	r0, #25
 8001808:	f7ff ff34 	bl	8001674 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 800180c:	201b      	movs	r0, #27
 800180e:	f7ff ff31 	bl	8001674 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 8001812:	2004      	movs	r0, #4
 8001814:	f7ff ff2e 	bl	8001674 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8001818:	2010      	movs	r0, #16
 800181a:	f7ff ff2b 	bl	8001674 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 800181e:	2007      	movs	r0, #7
 8001820:	f7ff ff28 	bl	8001674 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 8001824:	202a      	movs	r0, #42	; 0x2a
 8001826:	f7ff ff25 	bl	8001674 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 800182a:	2047      	movs	r0, #71	; 0x47
 800182c:	f7ff ff22 	bl	8001674 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 8001830:	2039      	movs	r0, #57	; 0x39
 8001832:	f7ff ff1f 	bl	8001674 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8001836:	2003      	movs	r0, #3
 8001838:	f7ff ff1c 	bl	8001674 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 800183c:	2006      	movs	r0, #6
 800183e:	f7ff ff19 	bl	8001674 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8001842:	2006      	movs	r0, #6
 8001844:	f7ff ff16 	bl	8001674 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 8001848:	2030      	movs	r0, #48	; 0x30
 800184a:	f7ff ff13 	bl	8001674 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 800184e:	2038      	movs	r0, #56	; 0x38
 8001850:	f7ff ff10 	bl	8001674 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8001854:	200f      	movs	r0, #15
 8001856:	f7ff ff0d 	bl	8001674 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 800185a:	2036      	movs	r0, #54	; 0x36
 800185c:	f7ff fefc 	bl	8001658 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );    
 8001860:	20c8      	movs	r0, #200	; 0xc8
 8001862:	f7ff ff07 	bl	8001674 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 8001866:	202a      	movs	r0, #42	; 0x2a
 8001868:	f7ff fef6 	bl	8001658 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800186c:	2000      	movs	r0, #0
 800186e:	f7ff ff01 	bl	8001674 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001872:	2000      	movs	r0, #0
 8001874:	f7ff fefe 	bl	8001674 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001878:	2000      	movs	r0, #0
 800187a:	f7ff fefb 	bl	8001674 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 800187e:	20ef      	movs	r0, #239	; 0xef
 8001880:	f7ff fef8 	bl	8001674 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8001884:	202b      	movs	r0, #43	; 0x2b
 8001886:	f7ff fee7 	bl	8001658 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800188a:	2000      	movs	r0, #0
 800188c:	f7ff fef2 	bl	8001674 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001890:	2000      	movs	r0, #0
 8001892:	f7ff feef 	bl	8001674 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 8001896:	2001      	movs	r0, #1
 8001898:	f7ff feec 	bl	8001674 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 800189c:	203f      	movs	r0, #63	; 0x3f
 800189e:	f7ff fee9 	bl	8001674 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 80018a2:	203a      	movs	r0, #58	; 0x3a
 80018a4:	f7ff fed8 	bl	8001658 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 80018a8:	2055      	movs	r0, #85	; 0x55
 80018aa:	f7ff fee3 	bl	8001674 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 80018ae:	2011      	movs	r0, #17
 80018b0:	f7ff fed2 	bl	8001658 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 80018b4:	4803      	ldr	r0, [pc, #12]	; (80018c4 <LCD_REG_Config+0x230>)
 80018b6:	f7ff fe73 	bl	80015a0 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 80018ba:	2029      	movs	r0, #41	; 0x29
 80018bc:	f7ff fecc 	bl	8001658 <LCD_Write_Cmd>
	
	
}
 80018c0:	bf00      	nop
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	0002bffc 	.word	0x0002bffc

080018c8 <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 80018c8:	b590      	push	{r4, r7, lr}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4604      	mov	r4, r0
 80018d0:	4608      	mov	r0, r1
 80018d2:	4611      	mov	r1, r2
 80018d4:	461a      	mov	r2, r3
 80018d6:	4623      	mov	r3, r4
 80018d8:	80fb      	strh	r3, [r7, #6]
 80018da:	4603      	mov	r3, r0
 80018dc:	80bb      	strh	r3, [r7, #4]
 80018de:	460b      	mov	r3, r1
 80018e0:	807b      	strh	r3, [r7, #2]
 80018e2:	4613      	mov	r3, r2
 80018e4:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 80018e6:	202a      	movs	r0, #42	; 0x2a
 80018e8:	f7ff feb6 	bl	8001658 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 80018ec:	88fb      	ldrh	r3, [r7, #6]
 80018ee:	0a1b      	lsrs	r3, r3, #8
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff febe 	bl	8001674 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 80018f8:	88fb      	ldrh	r3, [r7, #6]
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff feb8 	bl	8001674 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8001904:	88fa      	ldrh	r2, [r7, #6]
 8001906:	887b      	ldrh	r3, [r7, #2]
 8001908:	4413      	add	r3, r2
 800190a:	3b01      	subs	r3, #1
 800190c:	121b      	asrs	r3, r3, #8
 800190e:	b29b      	uxth	r3, r3
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff feaf 	bl	8001674 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 8001916:	88fa      	ldrh	r2, [r7, #6]
 8001918:	887b      	ldrh	r3, [r7, #2]
 800191a:	4413      	add	r3, r2
 800191c:	b29b      	uxth	r3, r3
 800191e:	3b01      	subs	r3, #1
 8001920:	b29b      	uxth	r3, r3
 8001922:	b2db      	uxtb	r3, r3
 8001924:	b29b      	uxth	r3, r3
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff fea4 	bl	8001674 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 800192c:	202b      	movs	r0, #43	; 0x2b
 800192e:	f7ff fe93 	bl	8001658 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 8001932:	88bb      	ldrh	r3, [r7, #4]
 8001934:	0a1b      	lsrs	r3, r3, #8
 8001936:	b29b      	uxth	r3, r3
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff fe9b 	bl	8001674 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 800193e:	88bb      	ldrh	r3, [r7, #4]
 8001940:	b2db      	uxtb	r3, r3
 8001942:	b29b      	uxth	r3, r3
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff fe95 	bl	8001674 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 800194a:	88ba      	ldrh	r2, [r7, #4]
 800194c:	883b      	ldrh	r3, [r7, #0]
 800194e:	4413      	add	r3, r2
 8001950:	3b01      	subs	r3, #1
 8001952:	121b      	asrs	r3, r3, #8
 8001954:	b29b      	uxth	r3, r3
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff fe8c 	bl	8001674 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 800195c:	88ba      	ldrh	r2, [r7, #4]
 800195e:	883b      	ldrh	r3, [r7, #0]
 8001960:	4413      	add	r3, r2
 8001962:	b29b      	uxth	r3, r3
 8001964:	3b01      	subs	r3, #1
 8001966:	b29b      	uxth	r3, r3
 8001968:	b2db      	uxtb	r3, r3
 800196a:	b29b      	uxth	r3, r3
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff fe81 	bl	8001674 <LCD_Write_Data>
	
}
 8001972:	bf00      	nop
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	bd90      	pop	{r4, r7, pc}

0800197a <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b084      	sub	sp, #16
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
 8001982:	460b      	mov	r3, r1
 8001984:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 8001986:	2300      	movs	r3, #0
 8001988:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 800198a:	202c      	movs	r0, #44	; 0x2c
 800198c:	f7ff fe64 	bl	8001658 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8001990:	2300      	movs	r3, #0
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	e006      	b.n	80019a4 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 8001996:	887b      	ldrh	r3, [r7, #2]
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff fe6b 	bl	8001674 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	3301      	adds	r3, #1
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fa      	ldr	r2, [r7, #12]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d3f4      	bcc.n	8001996 <LCD_FillColor+0x1c>
		
}
 80019ac:	bf00      	nop
 80019ae:	bf00      	nop
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 80019b6:	b590      	push	{r4, r7, lr}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	4604      	mov	r4, r0
 80019be:	4608      	mov	r0, r1
 80019c0:	4611      	mov	r1, r2
 80019c2:	461a      	mov	r2, r3
 80019c4:	4623      	mov	r3, r4
 80019c6:	80fb      	strh	r3, [r7, #6]
 80019c8:	4603      	mov	r3, r0
 80019ca:	80bb      	strh	r3, [r7, #4]
 80019cc:	460b      	mov	r3, r1
 80019ce:	807b      	strh	r3, [r7, #2]
 80019d0:	4613      	mov	r3, r2
 80019d2:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 80019d4:	883b      	ldrh	r3, [r7, #0]
 80019d6:	887a      	ldrh	r2, [r7, #2]
 80019d8:	88b9      	ldrh	r1, [r7, #4]
 80019da:	88f8      	ldrh	r0, [r7, #6]
 80019dc:	f7ff ff74 	bl	80018c8 <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 80019e0:	887b      	ldrh	r3, [r7, #2]
 80019e2:	883a      	ldrh	r2, [r7, #0]
 80019e4:	fb02 f303 	mul.w	r3, r2, r3
 80019e8:	461a      	mov	r2, r3
 80019ea:	8b3b      	ldrh	r3, [r7, #24]
 80019ec:	4619      	mov	r1, r3
 80019ee:	4610      	mov	r0, r2
 80019f0:	f7ff ffc3 	bl	800197a <LCD_FillColor>
	
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd90      	pop	{r4, r7, pc}

080019fc <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	80fb      	strh	r3, [r7, #6]
 8001a06:	460b      	mov	r3, r1
 8001a08:	80bb      	strh	r3, [r7, #4]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 8001a0e:	78fb      	ldrb	r3, [r7, #3]
 8001a10:	3b20      	subs	r3, #32
 8001a12:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8001a14:	88b9      	ldrh	r1, [r7, #4]
 8001a16:	88f8      	ldrh	r0, [r7, #6]
 8001a18:	2310      	movs	r3, #16
 8001a1a:	2208      	movs	r2, #8
 8001a1c:	f7ff ff54 	bl	80018c8 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 8001a20:	202c      	movs	r0, #44	; 0x2c
 8001a22:	f7ff fe19 	bl	8001658 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8001a26:	2300      	movs	r3, #0
 8001a28:	73bb      	strb	r3, [r7, #14]
 8001a2a:	e023      	b.n	8001a74 <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8001a2c:	7b3a      	ldrb	r2, [r7, #12]
 8001a2e:	7bbb      	ldrb	r3, [r7, #14]
 8001a30:	4914      	ldr	r1, [pc, #80]	; (8001a84 <LCD_DrawChar+0x88>)
 8001a32:	0112      	lsls	r2, r2, #4
 8001a34:	440a      	add	r2, r1
 8001a36:	4413      	add	r3, r2
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	737b      	strb	r3, [r7, #13]
 8001a40:	e012      	b.n	8001a68 <LCD_DrawChar+0x6c>
		{
			if ( ucTemp & 0x01 )
 8001a42:	7bfb      	ldrb	r3, [r7, #15]
 8001a44:	f003 0301 	and.w	r3, r3, #1
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d003      	beq.n	8001a54 <LCD_DrawChar+0x58>
				LCD_Write_Data ( 0x001F );
 8001a4c:	201f      	movs	r0, #31
 8001a4e:	f7ff fe11 	bl	8001674 <LCD_Write_Data>
 8001a52:	e003      	b.n	8001a5c <LCD_DrawChar+0x60>
			
			else
				LCD_Write_Data (  0xFFFF );								
 8001a54:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001a58:	f7ff fe0c 	bl	8001674 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 8001a5c:	7bfb      	ldrb	r3, [r7, #15]
 8001a5e:	085b      	lsrs	r3, r3, #1
 8001a60:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001a62:	7b7b      	ldrb	r3, [r7, #13]
 8001a64:	3301      	adds	r3, #1
 8001a66:	737b      	strb	r3, [r7, #13]
 8001a68:	7b7b      	ldrb	r3, [r7, #13]
 8001a6a:	2b07      	cmp	r3, #7
 8001a6c:	d9e9      	bls.n	8001a42 <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8001a6e:	7bbb      	ldrb	r3, [r7, #14]
 8001a70:	3301      	adds	r3, #1
 8001a72:	73bb      	strb	r3, [r7, #14]
 8001a74:	7bbb      	ldrb	r3, [r7, #14]
 8001a76:	2b0f      	cmp	r3, #15
 8001a78:	d9d8      	bls.n	8001a2c <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 8001a7a:	bf00      	nop
 8001a7c:	bf00      	nop
 8001a7e:	3710      	adds	r7, #16
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	08004d68 	.word	0x08004d68

08001a88 <LCD_DrawString>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	603a      	str	r2, [r7, #0]
 8001a92:	80fb      	strh	r3, [r7, #6]
 8001a94:	460b      	mov	r3, r1
 8001a96:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 8001a98:	e01c      	b.n	8001ad4 <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8001a9a:	88fb      	ldrh	r3, [r7, #6]
 8001a9c:	2be8      	cmp	r3, #232	; 0xe8
 8001a9e:	d904      	bls.n	8001aaa <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 8001aa4:	88bb      	ldrh	r3, [r7, #4]
 8001aa6:	3310      	adds	r3, #16
 8001aa8:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8001aaa:	88bb      	ldrh	r3, [r7, #4]
 8001aac:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8001ab0:	d903      	bls.n	8001aba <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	781a      	ldrb	r2, [r3, #0]
 8001abe:	88b9      	ldrh	r1, [r7, #4]
 8001ac0:	88fb      	ldrh	r3, [r7, #6]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff ff9a 	bl	80019fc <LCD_DrawChar>
		
		pStr ++;
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	3301      	adds	r3, #1
 8001acc:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 8001ace:	88fb      	ldrh	r3, [r7, #6]
 8001ad0:	3308      	adds	r3, #8
 8001ad2:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1de      	bne.n	8001a9a <LCD_DrawString+0x12>
		
	}
	
}
 8001adc:	bf00      	nop
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
	...

08001ae8 <LCD_DrawEllipse>:

//Task 3
volatile uint8_t ellipse[2 * 75 + 1][2 * 25 + 1];

void LCD_DrawEllipse ( uint16_t usC, uint16_t usP, uint16_t SR, uint16_t LR, uint16_t usColor)
{	
 8001ae8:	b590      	push	{r4, r7, lr}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4604      	mov	r4, r0
 8001af0:	4608      	mov	r0, r1
 8001af2:	4611      	mov	r1, r2
 8001af4:	461a      	mov	r2, r3
 8001af6:	4623      	mov	r3, r4
 8001af8:	80fb      	strh	r3, [r7, #6]
 8001afa:	4603      	mov	r3, r0
 8001afc:	80bb      	strh	r3, [r7, #4]
 8001afe:	460b      	mov	r3, r1
 8001b00:	807b      	strh	r3, [r7, #2]
 8001b02:	4613      	mov	r3, r2
 8001b04:	803b      	strh	r3, [r7, #0]
	/*
	 *  Task 3 : Implement LCD_DrawEllipse by using LCD_DrawDot
	 */
	memset(ellipse, 0, sizeof(ellipse));
 8001b06:	f641 6215 	movw	r2, #7701	; 0x1e15
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	481a      	ldr	r0, [pc, #104]	; (8001b78 <LCD_DrawEllipse+0x90>)
 8001b0e:	f002 f9fd 	bl	8003f0c <memset>
	// memset(ellipse, 1, 50 * (2 * SR + 1));
	uint8_t leftTopY = usC - SR;
 8001b12:	88fb      	ldrh	r3, [r7, #6]
 8001b14:	b2da      	uxtb	r2, r3
 8001b16:	887b      	ldrh	r3, [r7, #2]
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	73fb      	strb	r3, [r7, #15]
	uint8_t leftTopX = usP - LR;
 8001b1e:	88bb      	ldrh	r3, [r7, #4]
 8001b20:	b2da      	uxtb	r2, r3
 8001b22:	883b      	ldrh	r3, [r7, #0]
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	73bb      	strb	r3, [r7, #14]
	LCD_OpenWindow(leftTopY, leftTopX, 2 * SR + 1, 2 * LR + 1);
 8001b2a:	7bfb      	ldrb	r3, [r7, #15]
 8001b2c:	b298      	uxth	r0, r3
 8001b2e:	7bbb      	ldrb	r3, [r7, #14]
 8001b30:	b299      	uxth	r1, r3
 8001b32:	887b      	ldrh	r3, [r7, #2]
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	3301      	adds	r3, #1
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	883b      	ldrh	r3, [r7, #0]
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	3301      	adds	r3, #1
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	f7ff febf 	bl	80018c8 <LCD_OpenWindow>
	uint8_t usWidth = 2*SR;
 8001b4a:	887b      	ldrh	r3, [r7, #2]
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	737b      	strb	r3, [r7, #13]
	uint8_t usHeight = 2*LR;
 8001b52:	883b      	ldrh	r3, [r7, #0]
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	733b      	strb	r3, [r7, #12]
	LCD_FillColor ( usWidth * usHeight, usColor );
 8001b5a:	7b7b      	ldrb	r3, [r7, #13]
 8001b5c:	7b3a      	ldrb	r2, [r7, #12]
 8001b5e:	fb02 f303 	mul.w	r3, r2, r3
 8001b62:	461a      	mov	r2, r3
 8001b64:	8c3b      	ldrh	r3, [r7, #32]
 8001b66:	4619      	mov	r1, r3
 8001b68:	4610      	mov	r0, r2
 8001b6a:	f7ff ff06 	bl	800197a <LCD_FillColor>
	// 			LCD_Write_Data(0xffff);
	// 	}
	// }
	
	
}
 8001b6e:	bf00      	nop
 8001b70:	3714      	adds	r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd90      	pop	{r4, r7, pc}
 8001b76:	bf00      	nop
 8001b78:	200001c4 	.word	0x200001c4

08001b7c <LCD_Cam_Gram>:
// This actually shows the image of the to the camera
void LCD_Cam_Gram()
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 );
 8001b80:	2036      	movs	r0, #54	; 0x36
 8001b82:	f7ff fd69 	bl	8001658 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x68 );
 8001b86:	2068      	movs	r0, #104	; 0x68
 8001b88:	f7ff fd74 	bl	8001674 <LCD_Write_Data>
	DEBUG_DELAY ();

	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN );
 8001b8c:	202a      	movs	r0, #42	; 0x2a
 8001b8e:	f7ff fd63 	bl	8001658 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001b92:	2000      	movs	r0, #0
 8001b94:	f7ff fd6e 	bl	8001674 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001b98:	2000      	movs	r0, #0
 8001b9a:	f7ff fd6b 	bl	8001674 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 8001b9e:	2001      	movs	r0, #1
 8001ba0:	f7ff fd68 	bl	8001674 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8001ba4:	203f      	movs	r0, #63	; 0x3f
 8001ba6:	f7ff fd65 	bl	8001674 <LCD_Write_Data>

	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE );
 8001baa:	202b      	movs	r0, #43	; 0x2b
 8001bac:	f7ff fd54 	bl	8001658 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001bb0:	2000      	movs	r0, #0
 8001bb2:	f7ff fd5f 	bl	8001674 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001bb6:	2000      	movs	r0, #0
 8001bb8:	f7ff fd5c 	bl	8001674 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001bbc:	2000      	movs	r0, #0
 8001bbe:	f7ff fd59 	bl	8001674 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8001bc2:	20ef      	movs	r0, #239	; 0xef
 8001bc4:	f7ff fd56 	bl	8001674 <LCD_Write_Data>

	LCD_Write_Cmd ( 0x2C );
 8001bc8:	202c      	movs	r0, #44	; 0x2c
 8001bca:	f7ff fd45 	bl	8001658 <LCD_Write_Cmd>

}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
	...

08001bd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bda:	f000 fae3 	bl	80021a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bde:	f000 f891 	bl	8001d04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001be2:	f7ff fc07 	bl	80013f4 <MX_GPIO_Init>
  MX_FSMC_Init();
 8001be6:	f7ff fb53 	bl	8001290 <MX_FSMC_Init>
  MX_USART1_UART_Init();
 8001bea:	f000 fa37 	bl	800205c <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  motor_flag = 7;
 8001bee:	4b3d      	ldr	r3, [pc, #244]	; (8001ce4 <main+0x110>)
 8001bf0:	2207      	movs	r2, #7
 8001bf2:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart1, (uint8_t *)&RxBuffer, 3);
 8001bf4:	2203      	movs	r2, #3
 8001bf6:	493c      	ldr	r1, [pc, #240]	; (8001ce8 <main+0x114>)
 8001bf8:	483c      	ldr	r0, [pc, #240]	; (8001cec <main+0x118>)
 8001bfa:	f001 fc87 	bl	800350c <HAL_UART_Receive_IT>
  LCD_INIT();
 8001bfe:	f7ff fce0 	bl	80015c2 <LCD_INIT>

  LCD_Clear(50, 80, 140, 70, RED);
 8001c02:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001c06:	9300      	str	r3, [sp, #0]
 8001c08:	2346      	movs	r3, #70	; 0x46
 8001c0a:	228c      	movs	r2, #140	; 0x8c
 8001c0c:	2150      	movs	r1, #80	; 0x50
 8001c0e:	2032      	movs	r0, #50	; 0x32
 8001c10:	f7ff fed1 	bl	80019b6 <LCD_Clear>
  LCD_DrawString(75, 100, "CAMERA TESTER");
 8001c14:	4a36      	ldr	r2, [pc, #216]	; (8001cf0 <main+0x11c>)
 8001c16:	2164      	movs	r1, #100	; 0x64
 8001c18:	204b      	movs	r0, #75	; 0x4b
 8001c1a:	f7ff ff35 	bl	8001a88 <LCD_DrawString>
  HAL_Delay(2000);
 8001c1e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001c22:	f000 fb21 	bl	8002268 <HAL_Delay>

   while (Ov7725_Init() != SUCCESS)
 8001c26:	bf00      	nop
 8001c28:	f7fe ff8a 	bl	8000b40 <Ov7725_Init>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d1fa      	bne.n	8001c28 <main+0x54>
     ;
   Ov7725_vsync = 0;
 8001c32:	4b30      	ldr	r3, [pc, #192]	; (8001cf4 <main+0x120>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    F;
 8001c38:	e014      	b.n	8001c64 <main+0x90>
 8001c3a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c3e:	f000 fb13 	bl	8002268 <HAL_Delay>
 8001c42:	2301      	movs	r3, #1
 8001c44:	225a      	movs	r2, #90	; 0x5a
 8001c46:	2100      	movs	r1, #0
 8001c48:	2003      	movs	r0, #3
 8001c4a:	f000 f8a5 	bl	8001d98 <rotateInPosMode>
 8001c4e:	2300      	movs	r3, #0
 8001c50:	225a      	movs	r2, #90	; 0x5a
 8001c52:	2101      	movs	r1, #1
 8001c54:	2001      	movs	r0, #1
 8001c56:	f000 f89f 	bl	8001d98 <rotateInPosMode>
 8001c5a:	4b27      	ldr	r3, [pc, #156]	; (8001cf8 <main+0x124>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	4a25      	ldr	r2, [pc, #148]	; (8001cf8 <main+0x124>)
 8001c62:	6013      	str	r3, [r2, #0]
 8001c64:	4b24      	ldr	r3, [pc, #144]	; (8001cf8 <main+0x124>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	425a      	negs	r2, r3
 8001c6a:	f003 0303 	and.w	r3, r3, #3
 8001c6e:	f002 0203 	and.w	r2, r2, #3
 8001c72:	bf58      	it	pl
 8001c74:	4253      	negpl	r3, r2
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d1df      	bne.n	8001c3a <main+0x66>
 8001c7a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c7e:	f000 faf3 	bl	8002268 <HAL_Delay>
 8001c82:	2301      	movs	r3, #1
 8001c84:	2277      	movs	r2, #119	; 0x77
 8001c86:	2101      	movs	r1, #1
 8001c88:	2002      	movs	r0, #2
 8001c8a:	f000 f885 	bl	8001d98 <rotateInPosMode>
 8001c8e:	2032      	movs	r0, #50	; 0x32
 8001c90:	f000 faea 	bl	8002268 <HAL_Delay>
 8001c94:	2301      	movs	r3, #1
 8001c96:	221d      	movs	r2, #29
 8001c98:	2100      	movs	r1, #0
 8001c9a:	2002      	movs	r0, #2
 8001c9c:	f000 f87c 	bl	8001d98 <rotateInPosMode>
//    HAL_Delay(500);
	if (Ov7725_vsync == 2)
 8001ca0:	4b14      	ldr	r3, [pc, #80]	; (8001cf4 <main+0x120>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d1dc      	bne.n	8001c64 <main+0x90>
	{
		FIFO_PREPARE;
 8001caa:	4b14      	ldr	r3, [pc, #80]	; (8001cfc <main+0x128>)
 8001cac:	2204      	movs	r2, #4
 8001cae:	615a      	str	r2, [r3, #20]
 8001cb0:	4b13      	ldr	r3, [pc, #76]	; (8001d00 <main+0x12c>)
 8001cb2:	2220      	movs	r2, #32
 8001cb4:	615a      	str	r2, [r3, #20]
 8001cb6:	4b12      	ldr	r3, [pc, #72]	; (8001d00 <main+0x12c>)
 8001cb8:	2220      	movs	r2, #32
 8001cba:	611a      	str	r2, [r3, #16]
 8001cbc:	4b0f      	ldr	r3, [pc, #60]	; (8001cfc <main+0x128>)
 8001cbe:	2204      	movs	r2, #4
 8001cc0:	611a      	str	r2, [r3, #16]
 8001cc2:	4b0f      	ldr	r3, [pc, #60]	; (8001d00 <main+0x12c>)
 8001cc4:	2220      	movs	r2, #32
 8001cc6:	615a      	str	r2, [r3, #20]
 8001cc8:	4b0d      	ldr	r3, [pc, #52]	; (8001d00 <main+0x12c>)
 8001cca:	2220      	movs	r2, #32
 8001ccc:	611a      	str	r2, [r3, #16]
		ImagDisp(50,100,150,250);
 8001cce:	23fa      	movs	r3, #250	; 0xfa
 8001cd0:	2296      	movs	r2, #150	; 0x96
 8001cd2:	2164      	movs	r1, #100	; 0x64
 8001cd4:	2032      	movs	r0, #50	; 0x32
 8001cd6:	f7fe ff7d 	bl	8000bd4 <ImagDisp>
		Ov7725_vsync = 0;
 8001cda:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <main+0x120>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	701a      	strb	r2, [r3, #0]
    F;
 8001ce0:	e7c0      	b.n	8001c64 <main+0x90>
 8001ce2:	bf00      	nop
 8001ce4:	20001fe1 	.word	0x20001fe1
 8001ce8:	20001fe4 	.word	0x20001fe4
 8001cec:	20001fe8 	.word	0x20001fe8
 8001cf0:	08004d48 	.word	0x08004d48
 8001cf4:	20001fe0 	.word	0x20001fe0
 8001cf8:	20001fdc 	.word	0x20001fdc
 8001cfc:	40010800 	.word	0x40010800
 8001d00:	40011000 	.word	0x40011000

08001d04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b090      	sub	sp, #64	; 0x40
 8001d08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d0a:	f107 0318 	add.w	r3, r7, #24
 8001d0e:	2228      	movs	r2, #40	; 0x28
 8001d10:	2100      	movs	r1, #0
 8001d12:	4618      	mov	r0, r3
 8001d14:	f002 f8fa 	bl	8003f0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d18:	1d3b      	adds	r3, r7, #4
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	605a      	str	r2, [r3, #4]
 8001d20:	609a      	str	r2, [r3, #8]
 8001d22:	60da      	str	r2, [r3, #12]
 8001d24:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d26:	2301      	movs	r3, #1
 8001d28:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d2e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001d30:	2300      	movs	r3, #0
 8001d32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d34:	2301      	movs	r3, #1
 8001d36:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d40:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001d42:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001d46:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d48:	f107 0318 	add.w	r3, r7, #24
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f000 fe93 	bl	8002a78 <HAL_RCC_OscConfig>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001d58:	f000 f819 	bl	8001d8e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d5c:	230f      	movs	r3, #15
 8001d5e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d60:	2302      	movs	r3, #2
 8001d62:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d64:	2300      	movs	r3, #0
 8001d66:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d6c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d72:	1d3b      	adds	r3, r7, #4
 8001d74:	2102      	movs	r1, #2
 8001d76:	4618      	mov	r0, r3
 8001d78:	f001 f8e2 	bl	8002f40 <HAL_RCC_ClockConfig>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001d82:	f000 f804 	bl	8001d8e <Error_Handler>
  }
}
 8001d86:	bf00      	nop
 8001d88:	3740      	adds	r7, #64	; 0x40
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d92:	b672      	cpsid	i
}
 8001d94:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d96:	e7fe      	b.n	8001d96 <Error_Handler+0x8>

08001d98 <rotateInPosMode>:
volatile uint8_t k;
volatile uint8_t b;
volatile uint8_t c;
uint8_t RxBuffer[RXBUFFERSIZE];
void rotateInPosMode(uint8_t ID, uint8_t dir, uint16_t angle, uint8_t wait_flag)
{
 8001d98:	b590      	push	{r4, r7, lr}
 8001d9a:	b087      	sub	sp, #28
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4604      	mov	r4, r0
 8001da0:	4608      	mov	r0, r1
 8001da2:	4611      	mov	r1, r2
 8001da4:	461a      	mov	r2, r3
 8001da6:	4623      	mov	r3, r4
 8001da8:	71fb      	strb	r3, [r7, #7]
 8001daa:	4603      	mov	r3, r0
 8001dac:	71bb      	strb	r3, [r7, #6]
 8001dae:	460b      	mov	r3, r1
 8001db0:	80bb      	strh	r3, [r7, #4]
 8001db2:	4613      	mov	r3, r2
 8001db4:	70fb      	strb	r3, [r7, #3]
    uint32_t steps = angle / STEP_DGREE * M_STEP;
 8001db6:	88bb      	ldrh	r3, [r7, #4]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7fe fb87 	bl	80004cc <__aeabi_i2d>
 8001dbe:	a336      	add	r3, pc, #216	; (adr r3, 8001e98 <rotateInPosMode+0x100>)
 8001dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc4:	f7fe fd16 	bl	80007f4 <__aeabi_ddiv>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	460b      	mov	r3, r1
 8001dcc:	4610      	mov	r0, r2
 8001dce:	4619      	mov	r1, r3
 8001dd0:	f04f 0200 	mov.w	r2, #0
 8001dd4:	4b32      	ldr	r3, [pc, #200]	; (8001ea0 <rotateInPosMode+0x108>)
 8001dd6:	f7fe fbe3 	bl	80005a0 <__aeabi_dmul>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	4610      	mov	r0, r2
 8001de0:	4619      	mov	r1, r3
 8001de2:	f7fe fe8d 	bl	8000b00 <__aeabi_d2uiz>
 8001de6:	4603      	mov	r3, r0
 8001de8:	617b      	str	r3, [r7, #20]
 8001dea:	79fb      	ldrb	r3, [r7, #7]
    uint8_t TxBuffer[9];
    memcpy(TxBuffer, &ID, 1);
 8001dec:	723b      	strb	r3, [r7, #8]
    TxBuffer[1] = POS_REG;
 8001dee:	23fd      	movs	r3, #253	; 0xfd
 8001df0:	727b      	strb	r3, [r7, #9]
    uint16_t speed = (SPEED | (uint8_t)dir << 15);
 8001df2:	79bb      	ldrb	r3, [r7, #6]
 8001df4:	03db      	lsls	r3, r3, #15
 8001df6:	b21b      	sxth	r3, r3
 8001df8:	f043 0310 	orr.w	r3, r3, #16
 8001dfc:	b21b      	sxth	r3, r3
 8001dfe:	827b      	strh	r3, [r7, #18]
    TxBuffer[2] = (uint8_t)(speed >> 8);
 8001e00:	8a7b      	ldrh	r3, [r7, #18]
 8001e02:	0a1b      	lsrs	r3, r3, #8
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	72bb      	strb	r3, [r7, #10]
    TxBuffer[3] = (uint8_t)(speed & 0x00FF);
 8001e0a:	8a7b      	ldrh	r3, [r7, #18]
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	72fb      	strb	r3, [r7, #11]
    TxBuffer[4] = (uint8_t)ACCELERATION;
 8001e10:	2300      	movs	r3, #0
 8001e12:	733b      	strb	r3, [r7, #12]
    TxBuffer[5] = (uint8_t)(steps >> 16);
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	0c1b      	lsrs	r3, r3, #16
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	737b      	strb	r3, [r7, #13]
    TxBuffer[6] = (uint8_t)(steps >> 8);
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	0a1b      	lsrs	r3, r3, #8
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	73bb      	strb	r3, [r7, #14]
    TxBuffer[7] = (uint8_t)(steps & 0x00FF);
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	73fb      	strb	r3, [r7, #15]
    TxBuffer[8] = CHECK_BIT;
 8001e2a:	236b      	movs	r3, #107	; 0x6b
 8001e2c:	743b      	strb	r3, [r7, #16]
    HAL_Delay(50);
 8001e2e:	2032      	movs	r0, #50	; 0x32
 8001e30:	f000 fa1a 	bl	8002268 <HAL_Delay>
    while (!(motor_flag & (0x01 << (ID - 1))))
 8001e34:	bf00      	nop
 8001e36:	4b1b      	ldr	r3, [pc, #108]	; (8001ea4 <rotateInPosMode+0x10c>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	79fb      	ldrb	r3, [r7, #7]
 8001e40:	3b01      	subs	r3, #1
 8001e42:	fa42 f303 	asr.w	r3, r2, r3
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d0f3      	beq.n	8001e36 <rotateInPosMode+0x9e>
        ;
    while (wait_flag && motor_flag != 7)
 8001e4e:	78fb      	ldrb	r3, [r7, #3]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d004      	beq.n	8001e5e <rotateInPosMode+0xc6>
 8001e54:	4b13      	ldr	r3, [pc, #76]	; (8001ea4 <rotateInPosMode+0x10c>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b07      	cmp	r3, #7
 8001e5c:	d1f7      	bne.n	8001e4e <rotateInPosMode+0xb6>
        ;

    HAL_UART_Transmit(&huart1, (uint8_t *)&TxBuffer, 9, 0xFFFF);
 8001e5e:	f107 0108 	add.w	r1, r7, #8
 8001e62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e66:	2209      	movs	r2, #9
 8001e68:	480f      	ldr	r0, [pc, #60]	; (8001ea8 <rotateInPosMode+0x110>)
 8001e6a:	f001 fab6 	bl	80033da <HAL_UART_Transmit>
    motor_flag &= ~(0x01 << (ID - 1));
 8001e6e:	79fb      	ldrb	r3, [r7, #7]
 8001e70:	3b01      	subs	r3, #1
 8001e72:	2201      	movs	r2, #1
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	b25b      	sxtb	r3, r3
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	b25a      	sxtb	r2, r3
 8001e7e:	4b09      	ldr	r3, [pc, #36]	; (8001ea4 <rotateInPosMode+0x10c>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	b25b      	sxtb	r3, r3
 8001e86:	4013      	ands	r3, r2
 8001e88:	b25b      	sxtb	r3, r3
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <rotateInPosMode+0x10c>)
 8001e8e:	701a      	strb	r2, [r3, #0]
}
 8001e90:	bf00      	nop
 8001e92:	371c      	adds	r7, #28
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd90      	pop	{r4, r7, pc}
 8001e98:	cccccccd 	.word	0xcccccccd
 8001e9c:	3ffccccc 	.word	0x3ffccccc
 8001ea0:	40300000 	.word	0x40300000
 8001ea4:	20001fe1 	.word	0x20001fe1
 8001ea8:	20001fe8 	.word	0x20001fe8

08001eac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001eb2:	4b15      	ldr	r3, [pc, #84]	; (8001f08 <HAL_MspInit+0x5c>)
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	4a14      	ldr	r2, [pc, #80]	; (8001f08 <HAL_MspInit+0x5c>)
 8001eb8:	f043 0301 	orr.w	r3, r3, #1
 8001ebc:	6193      	str	r3, [r2, #24]
 8001ebe:	4b12      	ldr	r3, [pc, #72]	; (8001f08 <HAL_MspInit+0x5c>)
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	60bb      	str	r3, [r7, #8]
 8001ec8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eca:	4b0f      	ldr	r3, [pc, #60]	; (8001f08 <HAL_MspInit+0x5c>)
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	4a0e      	ldr	r2, [pc, #56]	; (8001f08 <HAL_MspInit+0x5c>)
 8001ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed4:	61d3      	str	r3, [r2, #28]
 8001ed6:	4b0c      	ldr	r3, [pc, #48]	; (8001f08 <HAL_MspInit+0x5c>)
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ede:	607b      	str	r3, [r7, #4]
 8001ee0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ee2:	4b0a      	ldr	r3, [pc, #40]	; (8001f0c <HAL_MspInit+0x60>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ef6:	60fb      	str	r3, [r7, #12]
 8001ef8:	4a04      	ldr	r2, [pc, #16]	; (8001f0c <HAL_MspInit+0x60>)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001efe:	bf00      	nop
 8001f00:	3714      	adds	r7, #20
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bc80      	pop	{r7}
 8001f06:	4770      	bx	lr
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	40010000 	.word	0x40010000

08001f10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f14:	e7fe      	b.n	8001f14 <NMI_Handler+0x4>

08001f16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f16:	b480      	push	{r7}
 8001f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f1a:	e7fe      	b.n	8001f1a <HardFault_Handler+0x4>

08001f1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f20:	e7fe      	b.n	8001f20 <MemManage_Handler+0x4>

08001f22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f22:	b480      	push	{r7}
 8001f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f26:	e7fe      	b.n	8001f26 <BusFault_Handler+0x4>

08001f28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f2c:	e7fe      	b.n	8001f2c <UsageFault_Handler+0x4>

08001f2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f32:	bf00      	nop
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bc80      	pop	{r7}
 8001f38:	4770      	bx	lr

08001f3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bc80      	pop	{r7}
 8001f44:	4770      	bx	lr

08001f46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f46:	b480      	push	{r7}
 8001f48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bc80      	pop	{r7}
 8001f50:	4770      	bx	lr

08001f52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f56:	f000 f96b 	bl	8002230 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}
	...

08001f60 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
 {
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
   /* USER CODE BEGIN EXTI3_IRQn 0 */
   if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_3) != RESET)
 8001f64:	4b15      	ldr	r3, [pc, #84]	; (8001fbc <EXTI3_IRQHandler+0x5c>)
 8001f66:	695b      	ldr	r3, [r3, #20]
 8001f68:	f003 0308 	and.w	r3, r3, #8
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d023      	beq.n	8001fb8 <EXTI3_IRQHandler+0x58>
   {
 		if( Ov7725_vsync == 0 )
 8001f70:	4b13      	ldr	r3, [pc, #76]	; (8001fc0 <EXTI3_IRQHandler+0x60>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d10f      	bne.n	8001f98 <EXTI3_IRQHandler+0x38>
     {
 				FIFO_WRST_L();
 8001f78:	4b12      	ldr	r3, [pc, #72]	; (8001fc4 <EXTI3_IRQHandler+0x64>)
 8001f7a:	2210      	movs	r2, #16
 8001f7c:	615a      	str	r2, [r3, #20]
         FIFO_WE_H();
 8001f7e:	4b12      	ldr	r3, [pc, #72]	; (8001fc8 <EXTI3_IRQHandler+0x68>)
 8001f80:	2208      	movs	r2, #8
 8001f82:	611a      	str	r2, [r3, #16]

         Ov7725_vsync = 1;
 8001f84:	4b0e      	ldr	r3, [pc, #56]	; (8001fc0 <EXTI3_IRQHandler+0x60>)
 8001f86:	2201      	movs	r2, #1
 8001f88:	701a      	strb	r2, [r3, #0]
         FIFO_WE_H();
 8001f8a:	4b0f      	ldr	r3, [pc, #60]	; (8001fc8 <EXTI3_IRQHandler+0x68>)
 8001f8c:	2208      	movs	r2, #8
 8001f8e:	611a      	str	r2, [r3, #16]
         FIFO_WRST_H();
 8001f90:	4b0c      	ldr	r3, [pc, #48]	; (8001fc4 <EXTI3_IRQHandler+0x64>)
 8001f92:	2210      	movs	r2, #16
 8001f94:	611a      	str	r2, [r3, #16]
 8001f96:	e009      	b.n	8001fac <EXTI3_IRQHandler+0x4c>
     }
     else if( Ov7725_vsync == 1 )
 8001f98:	4b09      	ldr	r3, [pc, #36]	; (8001fc0 <EXTI3_IRQHandler+0x60>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d105      	bne.n	8001fac <EXTI3_IRQHandler+0x4c>
     {
         FIFO_WE_L();
 8001fa0:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <EXTI3_IRQHandler+0x68>)
 8001fa2:	2208      	movs	r2, #8
 8001fa4:	615a      	str	r2, [r3, #20]
         Ov7725_vsync = 2;
 8001fa6:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <EXTI3_IRQHandler+0x60>)
 8001fa8:	2202      	movs	r2, #2
 8001faa:	701a      	strb	r2, [r3, #0]
     }


     __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_3);
 8001fac:	4b03      	ldr	r3, [pc, #12]	; (8001fbc <EXTI3_IRQHandler+0x5c>)
 8001fae:	2208      	movs	r2, #8
 8001fb0:	615a      	str	r2, [r3, #20]
     HAL_GPIO_EXTI_Callback(GPIO_PIN_3);
 8001fb2:	2008      	movs	r0, #8
 8001fb4:	f000 fd55 	bl	8002a62 <HAL_GPIO_EXTI_Callback>
   }
 }
 8001fb8:	bf00      	nop
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40010400 	.word	0x40010400
 8001fc0:	20001fe0 	.word	0x20001fe0
 8001fc4:	40011000 	.word	0x40011000
 8001fc8:	40011400 	.word	0x40011400

08001fcc <USART1_IRQHandler>:
/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  if (RxBuffer[2] == 0x6b)
 8001fd0:	4b1c      	ldr	r3, [pc, #112]	; (8002044 <USART1_IRQHandler+0x78>)
 8001fd2:	789b      	ldrb	r3, [r3, #2]
 8001fd4:	2b6b      	cmp	r3, #107	; 0x6b
 8001fd6:	d12a      	bne.n	800202e <USART1_IRQHandler+0x62>
  {
    if (RxBuffer[1] == 0x9f)
 8001fd8:	4b1a      	ldr	r3, [pc, #104]	; (8002044 <USART1_IRQHandler+0x78>)
 8001fda:	785b      	ldrb	r3, [r3, #1]
 8001fdc:	2b9f      	cmp	r3, #159	; 0x9f
 8001fde:	d110      	bne.n	8002002 <USART1_IRQHandler+0x36>
    {
      motor_flag |= 0x01 << (RxBuffer[0] - 1);
 8001fe0:	4b18      	ldr	r3, [pc, #96]	; (8002044 <USART1_IRQHandler+0x78>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	b25a      	sxtb	r2, r3
 8001fee:	4b16      	ldr	r3, [pc, #88]	; (8002048 <USART1_IRQHandler+0x7c>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	b25b      	sxtb	r3, r3
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	b25b      	sxtb	r3, r3
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	4b12      	ldr	r3, [pc, #72]	; (8002048 <USART1_IRQHandler+0x7c>)
 8001ffe:	701a      	strb	r2, [r3, #0]
 8002000:	e015      	b.n	800202e <USART1_IRQHandler+0x62>
    }
    else if (RxBuffer[1] == 0x02)
 8002002:	4b10      	ldr	r3, [pc, #64]	; (8002044 <USART1_IRQHandler+0x78>)
 8002004:	785b      	ldrb	r3, [r3, #1]
 8002006:	2b02      	cmp	r3, #2
 8002008:	d111      	bne.n	800202e <USART1_IRQHandler+0x62>
    {
      motor_flag &= ~(0x01 << (RxBuffer[0] - 1));
 800200a:	4b0e      	ldr	r3, [pc, #56]	; (8002044 <USART1_IRQHandler+0x78>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	3b01      	subs	r3, #1
 8002010:	2201      	movs	r2, #1
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	b25b      	sxtb	r3, r3
 8002018:	43db      	mvns	r3, r3
 800201a:	b25a      	sxtb	r2, r3
 800201c:	4b0a      	ldr	r3, [pc, #40]	; (8002048 <USART1_IRQHandler+0x7c>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	b2db      	uxtb	r3, r3
 8002022:	b25b      	sxtb	r3, r3
 8002024:	4013      	ands	r3, r2
 8002026:	b25b      	sxtb	r3, r3
 8002028:	b2da      	uxtb	r2, r3
 800202a:	4b07      	ldr	r3, [pc, #28]	; (8002048 <USART1_IRQHandler+0x7c>)
 800202c:	701a      	strb	r2, [r3, #0]
    }
  }
  HAL_UART_IRQHandler(&huart1);
 800202e:	4807      	ldr	r0, [pc, #28]	; (800204c <USART1_IRQHandler+0x80>)
 8002030:	f001 fac0 	bl	80035b4 <HAL_UART_IRQHandler>
  /* USER CODE END USART2_IRQn 0 */

  /* USER CODE BEGIN USART2_IRQn 1 */
  HAL_UART_Receive_IT(&huart1, (uint8_t *)&RxBuffer, RXBUFFERSIZE);
 8002034:	2203      	movs	r2, #3
 8002036:	4903      	ldr	r1, [pc, #12]	; (8002044 <USART1_IRQHandler+0x78>)
 8002038:	4804      	ldr	r0, [pc, #16]	; (800204c <USART1_IRQHandler+0x80>)
 800203a:	f001 fa67 	bl	800350c <HAL_UART_Receive_IT>

}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20001fe4 	.word	0x20001fe4
 8002048:	20001fe1 	.word	0x20001fe1
 800204c:	20001fe8 	.word	0x20001fe8

08002050 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002054:	bf00      	nop
 8002056:	46bd      	mov	sp, r7
 8002058:	bc80      	pop	{r7}
 800205a:	4770      	bx	lr

0800205c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002060:	4b11      	ldr	r3, [pc, #68]	; (80020a8 <MX_USART1_UART_Init+0x4c>)
 8002062:	4a12      	ldr	r2, [pc, #72]	; (80020ac <MX_USART1_UART_Init+0x50>)
 8002064:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002066:	4b10      	ldr	r3, [pc, #64]	; (80020a8 <MX_USART1_UART_Init+0x4c>)
 8002068:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800206c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800206e:	4b0e      	ldr	r3, [pc, #56]	; (80020a8 <MX_USART1_UART_Init+0x4c>)
 8002070:	2200      	movs	r2, #0
 8002072:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002074:	4b0c      	ldr	r3, [pc, #48]	; (80020a8 <MX_USART1_UART_Init+0x4c>)
 8002076:	2200      	movs	r2, #0
 8002078:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800207a:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <MX_USART1_UART_Init+0x4c>)
 800207c:	2200      	movs	r2, #0
 800207e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002080:	4b09      	ldr	r3, [pc, #36]	; (80020a8 <MX_USART1_UART_Init+0x4c>)
 8002082:	220c      	movs	r2, #12
 8002084:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002086:	4b08      	ldr	r3, [pc, #32]	; (80020a8 <MX_USART1_UART_Init+0x4c>)
 8002088:	2200      	movs	r2, #0
 800208a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800208c:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <MX_USART1_UART_Init+0x4c>)
 800208e:	2200      	movs	r2, #0
 8002090:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002092:	4805      	ldr	r0, [pc, #20]	; (80020a8 <MX_USART1_UART_Init+0x4c>)
 8002094:	f001 f954 	bl	8003340 <HAL_UART_Init>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800209e:	f7ff fe76 	bl	8001d8e <Error_Handler>
  }

}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	20001fe8 	.word	0x20001fe8
 80020ac:	40013800 	.word	0x40013800

080020b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b088      	sub	sp, #32
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b8:	f107 0310 	add.w	r3, r7, #16
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	605a      	str	r2, [r3, #4]
 80020c2:	609a      	str	r2, [r3, #8]
 80020c4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a20      	ldr	r2, [pc, #128]	; (800214c <HAL_UART_MspInit+0x9c>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d139      	bne.n	8002144 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020d0:	4b1f      	ldr	r3, [pc, #124]	; (8002150 <HAL_UART_MspInit+0xa0>)
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	4a1e      	ldr	r2, [pc, #120]	; (8002150 <HAL_UART_MspInit+0xa0>)
 80020d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020da:	6193      	str	r3, [r2, #24]
 80020dc:	4b1c      	ldr	r3, [pc, #112]	; (8002150 <HAL_UART_MspInit+0xa0>)
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020e4:	60fb      	str	r3, [r7, #12]
 80020e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e8:	4b19      	ldr	r3, [pc, #100]	; (8002150 <HAL_UART_MspInit+0xa0>)
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	4a18      	ldr	r2, [pc, #96]	; (8002150 <HAL_UART_MspInit+0xa0>)
 80020ee:	f043 0304 	orr.w	r3, r3, #4
 80020f2:	6193      	str	r3, [r2, #24]
 80020f4:	4b16      	ldr	r3, [pc, #88]	; (8002150 <HAL_UART_MspInit+0xa0>)
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	f003 0304 	and.w	r3, r3, #4
 80020fc:	60bb      	str	r3, [r7, #8]
 80020fe:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002100:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002104:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002106:	2302      	movs	r3, #2
 8002108:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800210a:	2303      	movs	r3, #3
 800210c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800210e:	f107 0310 	add.w	r3, r7, #16
 8002112:	4619      	mov	r1, r3
 8002114:	480f      	ldr	r0, [pc, #60]	; (8002154 <HAL_UART_MspInit+0xa4>)
 8002116:	f000 fadd 	bl	80026d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800211a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800211e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002120:	2300      	movs	r3, #0
 8002122:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002124:	2300      	movs	r3, #0
 8002126:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002128:	f107 0310 	add.w	r3, r7, #16
 800212c:	4619      	mov	r1, r3
 800212e:	4809      	ldr	r0, [pc, #36]	; (8002154 <HAL_UART_MspInit+0xa4>)
 8002130:	f000 fad0 	bl	80026d4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002134:	2200      	movs	r2, #0
 8002136:	2100      	movs	r1, #0
 8002138:	2025      	movs	r0, #37	; 0x25
 800213a:	f000 f98c 	bl	8002456 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800213e:	2025      	movs	r0, #37	; 0x25
 8002140:	f000 f9a5 	bl	800248e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002144:	bf00      	nop
 8002146:	3720      	adds	r7, #32
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40013800 	.word	0x40013800
 8002150:	40021000 	.word	0x40021000
 8002154:	40010800 	.word	0x40010800

08002158 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002158:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800215a:	e003      	b.n	8002164 <LoopCopyDataInit>

0800215c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800215c:	4b0b      	ldr	r3, [pc, #44]	; (800218c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800215e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002160:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002162:	3104      	adds	r1, #4

08002164 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002164:	480a      	ldr	r0, [pc, #40]	; (8002190 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002166:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002168:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800216a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800216c:	d3f6      	bcc.n	800215c <CopyDataInit>
  ldr r2, =_sbss
 800216e:	4a0a      	ldr	r2, [pc, #40]	; (8002198 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002170:	e002      	b.n	8002178 <LoopFillZerobss>

08002172 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002172:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002174:	f842 3b04 	str.w	r3, [r2], #4

08002178 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002178:	4b08      	ldr	r3, [pc, #32]	; (800219c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800217a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800217c:	d3f9      	bcc.n	8002172 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800217e:	f7ff ff67 	bl	8002050 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002182:	f001 fe9f 	bl	8003ec4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002186:	f7ff fd25 	bl	8001bd4 <main>
  bx lr
 800218a:	4770      	bx	lr
  ldr r3, =_sidata
 800218c:	08005408 	.word	0x08005408
  ldr r0, =_sdata
 8002190:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002194:	20000124 	.word	0x20000124
  ldr r2, =_sbss
 8002198:	20000124 	.word	0x20000124
  ldr r3, = _ebss
 800219c:	2000202c 	.word	0x2000202c

080021a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021a0:	e7fe      	b.n	80021a0 <ADC1_2_IRQHandler>
	...

080021a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021a8:	4b08      	ldr	r3, [pc, #32]	; (80021cc <HAL_Init+0x28>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a07      	ldr	r2, [pc, #28]	; (80021cc <HAL_Init+0x28>)
 80021ae:	f043 0310 	orr.w	r3, r3, #16
 80021b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021b4:	2003      	movs	r0, #3
 80021b6:	f000 f943 	bl	8002440 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021ba:	2000      	movs	r0, #0
 80021bc:	f000 f808 	bl	80021d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021c0:	f7ff fe74 	bl	8001eac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	40022000 	.word	0x40022000

080021d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021d8:	4b12      	ldr	r3, [pc, #72]	; (8002224 <HAL_InitTick+0x54>)
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	4b12      	ldr	r3, [pc, #72]	; (8002228 <HAL_InitTick+0x58>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	4619      	mov	r1, r3
 80021e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80021ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ee:	4618      	mov	r0, r3
 80021f0:	f000 f95b 	bl	80024aa <HAL_SYSTICK_Config>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e00e      	b.n	800221c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2b0f      	cmp	r3, #15
 8002202:	d80a      	bhi.n	800221a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002204:	2200      	movs	r2, #0
 8002206:	6879      	ldr	r1, [r7, #4]
 8002208:	f04f 30ff 	mov.w	r0, #4294967295
 800220c:	f000 f923 	bl	8002456 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002210:	4a06      	ldr	r2, [pc, #24]	; (800222c <HAL_InitTick+0x5c>)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002216:	2300      	movs	r3, #0
 8002218:	e000      	b.n	800221c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
}
 800221c:	4618      	mov	r0, r3
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	200000b4 	.word	0x200000b4
 8002228:	200000bc 	.word	0x200000bc
 800222c:	200000b8 	.word	0x200000b8

08002230 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002234:	4b05      	ldr	r3, [pc, #20]	; (800224c <HAL_IncTick+0x1c>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	461a      	mov	r2, r3
 800223a:	4b05      	ldr	r3, [pc, #20]	; (8002250 <HAL_IncTick+0x20>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4413      	add	r3, r2
 8002240:	4a03      	ldr	r2, [pc, #12]	; (8002250 <HAL_IncTick+0x20>)
 8002242:	6013      	str	r3, [r2, #0]
}
 8002244:	bf00      	nop
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr
 800224c:	200000bc 	.word	0x200000bc
 8002250:	20002028 	.word	0x20002028

08002254 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  return uwTick;
 8002258:	4b02      	ldr	r3, [pc, #8]	; (8002264 <HAL_GetTick+0x10>)
 800225a:	681b      	ldr	r3, [r3, #0]
}
 800225c:	4618      	mov	r0, r3
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr
 8002264:	20002028 	.word	0x20002028

08002268 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002270:	f7ff fff0 	bl	8002254 <HAL_GetTick>
 8002274:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002280:	d005      	beq.n	800228e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002282:	4b0a      	ldr	r3, [pc, #40]	; (80022ac <HAL_Delay+0x44>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	461a      	mov	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	4413      	add	r3, r2
 800228c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800228e:	bf00      	nop
 8002290:	f7ff ffe0 	bl	8002254 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	429a      	cmp	r2, r3
 800229e:	d8f7      	bhi.n	8002290 <HAL_Delay+0x28>
  {
  }
}
 80022a0:	bf00      	nop
 80022a2:	bf00      	nop
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	200000bc 	.word	0x200000bc

080022b0 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022c0:	4b0c      	ldr	r3, [pc, #48]	; (80022f4 <NVIC_SetPriorityGrouping+0x44>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022c6:	68ba      	ldr	r2, [r7, #8]
 80022c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022cc:	4013      	ands	r3, r2
 80022ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022e2:	4a04      	ldr	r2, [pc, #16]	; (80022f4 <NVIC_SetPriorityGrouping+0x44>)
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	60d3      	str	r3, [r2, #12]
}
 80022e8:	bf00      	nop
 80022ea:	3714      	adds	r7, #20
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bc80      	pop	{r7}
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	e000ed00 	.word	0xe000ed00

080022f8 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022fc:	4b04      	ldr	r3, [pc, #16]	; (8002310 <NVIC_GetPriorityGrouping+0x18>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	0a1b      	lsrs	r3, r3, #8
 8002302:	f003 0307 	and.w	r3, r3, #7
}
 8002306:	4618      	mov	r0, r3
 8002308:	46bd      	mov	sp, r7
 800230a:	bc80      	pop	{r7}
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	e000ed00 	.word	0xe000ed00

08002314 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800231e:	79fb      	ldrb	r3, [r7, #7]
 8002320:	f003 021f 	and.w	r2, r3, #31
 8002324:	4906      	ldr	r1, [pc, #24]	; (8002340 <NVIC_EnableIRQ+0x2c>)
 8002326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232a:	095b      	lsrs	r3, r3, #5
 800232c:	2001      	movs	r0, #1
 800232e:	fa00 f202 	lsl.w	r2, r0, r2
 8002332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002336:	bf00      	nop
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	bc80      	pop	{r7}
 800233e:	4770      	bx	lr
 8002340:	e000e100 	.word	0xe000e100

08002344 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	4603      	mov	r3, r0
 800234c:	6039      	str	r1, [r7, #0]
 800234e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002354:	2b00      	cmp	r3, #0
 8002356:	da0b      	bge.n	8002370 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	b2da      	uxtb	r2, r3
 800235c:	490c      	ldr	r1, [pc, #48]	; (8002390 <NVIC_SetPriority+0x4c>)
 800235e:	79fb      	ldrb	r3, [r7, #7]
 8002360:	f003 030f 	and.w	r3, r3, #15
 8002364:	3b04      	subs	r3, #4
 8002366:	0112      	lsls	r2, r2, #4
 8002368:	b2d2      	uxtb	r2, r2
 800236a:	440b      	add	r3, r1
 800236c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800236e:	e009      	b.n	8002384 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	b2da      	uxtb	r2, r3
 8002374:	4907      	ldr	r1, [pc, #28]	; (8002394 <NVIC_SetPriority+0x50>)
 8002376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237a:	0112      	lsls	r2, r2, #4
 800237c:	b2d2      	uxtb	r2, r2
 800237e:	440b      	add	r3, r1
 8002380:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	bc80      	pop	{r7}
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	e000ed00 	.word	0xe000ed00
 8002394:	e000e100 	.word	0xe000e100

08002398 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002398:	b480      	push	{r7}
 800239a:	b089      	sub	sp, #36	; 0x24
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	f1c3 0307 	rsb	r3, r3, #7
 80023b2:	2b04      	cmp	r3, #4
 80023b4:	bf28      	it	cs
 80023b6:	2304      	movcs	r3, #4
 80023b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	3304      	adds	r3, #4
 80023be:	2b06      	cmp	r3, #6
 80023c0:	d902      	bls.n	80023c8 <NVIC_EncodePriority+0x30>
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	3b03      	subs	r3, #3
 80023c6:	e000      	b.n	80023ca <NVIC_EncodePriority+0x32>
 80023c8:	2300      	movs	r3, #0
 80023ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023cc:	f04f 32ff 	mov.w	r2, #4294967295
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	43da      	mvns	r2, r3
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	401a      	ands	r2, r3
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023e0:	f04f 31ff 	mov.w	r1, #4294967295
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ea:	43d9      	mvns	r1, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f0:	4313      	orrs	r3, r2
         );
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3724      	adds	r7, #36	; 0x24
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bc80      	pop	{r7}
 80023fa:	4770      	bx	lr

080023fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3b01      	subs	r3, #1
 8002408:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800240c:	d301      	bcc.n	8002412 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800240e:	2301      	movs	r3, #1
 8002410:	e00f      	b.n	8002432 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002412:	4a0a      	ldr	r2, [pc, #40]	; (800243c <SysTick_Config+0x40>)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3b01      	subs	r3, #1
 8002418:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800241a:	210f      	movs	r1, #15
 800241c:	f04f 30ff 	mov.w	r0, #4294967295
 8002420:	f7ff ff90 	bl	8002344 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002424:	4b05      	ldr	r3, [pc, #20]	; (800243c <SysTick_Config+0x40>)
 8002426:	2200      	movs	r2, #0
 8002428:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800242a:	4b04      	ldr	r3, [pc, #16]	; (800243c <SysTick_Config+0x40>)
 800242c:	2207      	movs	r2, #7
 800242e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	e000e010 	.word	0xe000e010

08002440 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f7ff ff31 	bl	80022b0 <NVIC_SetPriorityGrouping>
}
 800244e:	bf00      	nop
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002456:	b580      	push	{r7, lr}
 8002458:	b086      	sub	sp, #24
 800245a:	af00      	add	r7, sp, #0
 800245c:	4603      	mov	r3, r0
 800245e:	60b9      	str	r1, [r7, #8]
 8002460:	607a      	str	r2, [r7, #4]
 8002462:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002464:	2300      	movs	r3, #0
 8002466:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002468:	f7ff ff46 	bl	80022f8 <NVIC_GetPriorityGrouping>
 800246c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	68b9      	ldr	r1, [r7, #8]
 8002472:	6978      	ldr	r0, [r7, #20]
 8002474:	f7ff ff90 	bl	8002398 <NVIC_EncodePriority>
 8002478:	4602      	mov	r2, r0
 800247a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800247e:	4611      	mov	r1, r2
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff ff5f 	bl	8002344 <NVIC_SetPriority>
}
 8002486:	bf00      	nop
 8002488:	3718      	adds	r7, #24
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b082      	sub	sp, #8
 8002492:	af00      	add	r7, sp, #0
 8002494:	4603      	mov	r3, r0
 8002496:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff ff39 	bl	8002314 <NVIC_EnableIRQ>
}
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b082      	sub	sp, #8
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f7ff ffa2 	bl	80023fc <SysTick_Config>
 80024b8:	4603      	mov	r3, r0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
	...

080024c4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024cc:	2300      	movs	r3, #0
 80024ce:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d005      	beq.n	80024e6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2204      	movs	r2, #4
 80024de:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	73fb      	strb	r3, [r7, #15]
 80024e4:	e0d6      	b.n	8002694 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f022 020e 	bic.w	r2, r2, #14
 80024f4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 0201 	bic.w	r2, r2, #1
 8002504:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	461a      	mov	r2, r3
 800250c:	4b64      	ldr	r3, [pc, #400]	; (80026a0 <HAL_DMA_Abort_IT+0x1dc>)
 800250e:	429a      	cmp	r2, r3
 8002510:	d958      	bls.n	80025c4 <HAL_DMA_Abort_IT+0x100>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a63      	ldr	r2, [pc, #396]	; (80026a4 <HAL_DMA_Abort_IT+0x1e0>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d04f      	beq.n	80025bc <HAL_DMA_Abort_IT+0xf8>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a61      	ldr	r2, [pc, #388]	; (80026a8 <HAL_DMA_Abort_IT+0x1e4>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d048      	beq.n	80025b8 <HAL_DMA_Abort_IT+0xf4>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a60      	ldr	r2, [pc, #384]	; (80026ac <HAL_DMA_Abort_IT+0x1e8>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d040      	beq.n	80025b2 <HAL_DMA_Abort_IT+0xee>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a5e      	ldr	r2, [pc, #376]	; (80026b0 <HAL_DMA_Abort_IT+0x1ec>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d038      	beq.n	80025ac <HAL_DMA_Abort_IT+0xe8>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a5d      	ldr	r2, [pc, #372]	; (80026b4 <HAL_DMA_Abort_IT+0x1f0>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d030      	beq.n	80025a6 <HAL_DMA_Abort_IT+0xe2>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a5b      	ldr	r2, [pc, #364]	; (80026b8 <HAL_DMA_Abort_IT+0x1f4>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d028      	beq.n	80025a0 <HAL_DMA_Abort_IT+0xdc>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a53      	ldr	r2, [pc, #332]	; (80026a0 <HAL_DMA_Abort_IT+0x1dc>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d020      	beq.n	800259a <HAL_DMA_Abort_IT+0xd6>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a57      	ldr	r2, [pc, #348]	; (80026bc <HAL_DMA_Abort_IT+0x1f8>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d019      	beq.n	8002596 <HAL_DMA_Abort_IT+0xd2>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a56      	ldr	r2, [pc, #344]	; (80026c0 <HAL_DMA_Abort_IT+0x1fc>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d012      	beq.n	8002592 <HAL_DMA_Abort_IT+0xce>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a54      	ldr	r2, [pc, #336]	; (80026c4 <HAL_DMA_Abort_IT+0x200>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d00a      	beq.n	800258c <HAL_DMA_Abort_IT+0xc8>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a53      	ldr	r2, [pc, #332]	; (80026c8 <HAL_DMA_Abort_IT+0x204>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d102      	bne.n	8002586 <HAL_DMA_Abort_IT+0xc2>
 8002580:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002584:	e01b      	b.n	80025be <HAL_DMA_Abort_IT+0xfa>
 8002586:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800258a:	e018      	b.n	80025be <HAL_DMA_Abort_IT+0xfa>
 800258c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002590:	e015      	b.n	80025be <HAL_DMA_Abort_IT+0xfa>
 8002592:	2310      	movs	r3, #16
 8002594:	e013      	b.n	80025be <HAL_DMA_Abort_IT+0xfa>
 8002596:	2301      	movs	r3, #1
 8002598:	e011      	b.n	80025be <HAL_DMA_Abort_IT+0xfa>
 800259a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800259e:	e00e      	b.n	80025be <HAL_DMA_Abort_IT+0xfa>
 80025a0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80025a4:	e00b      	b.n	80025be <HAL_DMA_Abort_IT+0xfa>
 80025a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025aa:	e008      	b.n	80025be <HAL_DMA_Abort_IT+0xfa>
 80025ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025b0:	e005      	b.n	80025be <HAL_DMA_Abort_IT+0xfa>
 80025b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025b6:	e002      	b.n	80025be <HAL_DMA_Abort_IT+0xfa>
 80025b8:	2310      	movs	r3, #16
 80025ba:	e000      	b.n	80025be <HAL_DMA_Abort_IT+0xfa>
 80025bc:	2301      	movs	r3, #1
 80025be:	4a43      	ldr	r2, [pc, #268]	; (80026cc <HAL_DMA_Abort_IT+0x208>)
 80025c0:	6053      	str	r3, [r2, #4]
 80025c2:	e057      	b.n	8002674 <HAL_DMA_Abort_IT+0x1b0>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a36      	ldr	r2, [pc, #216]	; (80026a4 <HAL_DMA_Abort_IT+0x1e0>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d04f      	beq.n	800266e <HAL_DMA_Abort_IT+0x1aa>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a35      	ldr	r2, [pc, #212]	; (80026a8 <HAL_DMA_Abort_IT+0x1e4>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d048      	beq.n	800266a <HAL_DMA_Abort_IT+0x1a6>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a33      	ldr	r2, [pc, #204]	; (80026ac <HAL_DMA_Abort_IT+0x1e8>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d040      	beq.n	8002664 <HAL_DMA_Abort_IT+0x1a0>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a32      	ldr	r2, [pc, #200]	; (80026b0 <HAL_DMA_Abort_IT+0x1ec>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d038      	beq.n	800265e <HAL_DMA_Abort_IT+0x19a>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a30      	ldr	r2, [pc, #192]	; (80026b4 <HAL_DMA_Abort_IT+0x1f0>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d030      	beq.n	8002658 <HAL_DMA_Abort_IT+0x194>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a2f      	ldr	r2, [pc, #188]	; (80026b8 <HAL_DMA_Abort_IT+0x1f4>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d028      	beq.n	8002652 <HAL_DMA_Abort_IT+0x18e>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a26      	ldr	r2, [pc, #152]	; (80026a0 <HAL_DMA_Abort_IT+0x1dc>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d020      	beq.n	800264c <HAL_DMA_Abort_IT+0x188>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a2b      	ldr	r2, [pc, #172]	; (80026bc <HAL_DMA_Abort_IT+0x1f8>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d019      	beq.n	8002648 <HAL_DMA_Abort_IT+0x184>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a29      	ldr	r2, [pc, #164]	; (80026c0 <HAL_DMA_Abort_IT+0x1fc>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d012      	beq.n	8002644 <HAL_DMA_Abort_IT+0x180>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a28      	ldr	r2, [pc, #160]	; (80026c4 <HAL_DMA_Abort_IT+0x200>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d00a      	beq.n	800263e <HAL_DMA_Abort_IT+0x17a>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a26      	ldr	r2, [pc, #152]	; (80026c8 <HAL_DMA_Abort_IT+0x204>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d102      	bne.n	8002638 <HAL_DMA_Abort_IT+0x174>
 8002632:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002636:	e01b      	b.n	8002670 <HAL_DMA_Abort_IT+0x1ac>
 8002638:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800263c:	e018      	b.n	8002670 <HAL_DMA_Abort_IT+0x1ac>
 800263e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002642:	e015      	b.n	8002670 <HAL_DMA_Abort_IT+0x1ac>
 8002644:	2310      	movs	r3, #16
 8002646:	e013      	b.n	8002670 <HAL_DMA_Abort_IT+0x1ac>
 8002648:	2301      	movs	r3, #1
 800264a:	e011      	b.n	8002670 <HAL_DMA_Abort_IT+0x1ac>
 800264c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002650:	e00e      	b.n	8002670 <HAL_DMA_Abort_IT+0x1ac>
 8002652:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002656:	e00b      	b.n	8002670 <HAL_DMA_Abort_IT+0x1ac>
 8002658:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800265c:	e008      	b.n	8002670 <HAL_DMA_Abort_IT+0x1ac>
 800265e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002662:	e005      	b.n	8002670 <HAL_DMA_Abort_IT+0x1ac>
 8002664:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002668:	e002      	b.n	8002670 <HAL_DMA_Abort_IT+0x1ac>
 800266a:	2310      	movs	r3, #16
 800266c:	e000      	b.n	8002670 <HAL_DMA_Abort_IT+0x1ac>
 800266e:	2301      	movs	r3, #1
 8002670:	4a17      	ldr	r2, [pc, #92]	; (80026d0 <HAL_DMA_Abort_IT+0x20c>)
 8002672:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002688:	2b00      	cmp	r3, #0
 800268a:	d003      	beq.n	8002694 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	4798      	blx	r3
    } 
  }
  return status;
 8002694:	7bfb      	ldrb	r3, [r7, #15]
}
 8002696:	4618      	mov	r0, r3
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	40020080 	.word	0x40020080
 80026a4:	40020008 	.word	0x40020008
 80026a8:	4002001c 	.word	0x4002001c
 80026ac:	40020030 	.word	0x40020030
 80026b0:	40020044 	.word	0x40020044
 80026b4:	40020058 	.word	0x40020058
 80026b8:	4002006c 	.word	0x4002006c
 80026bc:	40020408 	.word	0x40020408
 80026c0:	4002041c 	.word	0x4002041c
 80026c4:	40020430 	.word	0x40020430
 80026c8:	40020444 	.word	0x40020444
 80026cc:	40020400 	.word	0x40020400
 80026d0:	40020000 	.word	0x40020000

080026d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b08b      	sub	sp, #44	; 0x2c
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026de:	2300      	movs	r3, #0
 80026e0:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 80026e2:	2300      	movs	r3, #0
 80026e4:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 80026e6:	2300      	movs	r3, #0
 80026e8:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 80026ea:	2300      	movs	r3, #0
 80026ec:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 80026ee:	2300      	movs	r3, #0
 80026f0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80026f2:	2300      	movs	r3, #0
 80026f4:	627b      	str	r3, [r7, #36]	; 0x24
 80026f6:	e179      	b.n	80029ec <HAL_GPIO_Init+0x318>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 80026f8:	2201      	movs	r2, #1
 80026fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	69fa      	ldr	r2, [r7, #28]
 8002708:	4013      	ands	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	429a      	cmp	r2, r3
 8002712:	f040 8168 	bne.w	80029e6 <HAL_GPIO_Init+0x312>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	4a96      	ldr	r2, [pc, #600]	; (8002974 <HAL_GPIO_Init+0x2a0>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d05e      	beq.n	80027de <HAL_GPIO_Init+0x10a>
 8002720:	4a94      	ldr	r2, [pc, #592]	; (8002974 <HAL_GPIO_Init+0x2a0>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d875      	bhi.n	8002812 <HAL_GPIO_Init+0x13e>
 8002726:	4a94      	ldr	r2, [pc, #592]	; (8002978 <HAL_GPIO_Init+0x2a4>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d058      	beq.n	80027de <HAL_GPIO_Init+0x10a>
 800272c:	4a92      	ldr	r2, [pc, #584]	; (8002978 <HAL_GPIO_Init+0x2a4>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d86f      	bhi.n	8002812 <HAL_GPIO_Init+0x13e>
 8002732:	4a92      	ldr	r2, [pc, #584]	; (800297c <HAL_GPIO_Init+0x2a8>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d052      	beq.n	80027de <HAL_GPIO_Init+0x10a>
 8002738:	4a90      	ldr	r2, [pc, #576]	; (800297c <HAL_GPIO_Init+0x2a8>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d869      	bhi.n	8002812 <HAL_GPIO_Init+0x13e>
 800273e:	4a90      	ldr	r2, [pc, #576]	; (8002980 <HAL_GPIO_Init+0x2ac>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d04c      	beq.n	80027de <HAL_GPIO_Init+0x10a>
 8002744:	4a8e      	ldr	r2, [pc, #568]	; (8002980 <HAL_GPIO_Init+0x2ac>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d863      	bhi.n	8002812 <HAL_GPIO_Init+0x13e>
 800274a:	4a8e      	ldr	r2, [pc, #568]	; (8002984 <HAL_GPIO_Init+0x2b0>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d046      	beq.n	80027de <HAL_GPIO_Init+0x10a>
 8002750:	4a8c      	ldr	r2, [pc, #560]	; (8002984 <HAL_GPIO_Init+0x2b0>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d85d      	bhi.n	8002812 <HAL_GPIO_Init+0x13e>
 8002756:	2b12      	cmp	r3, #18
 8002758:	d82a      	bhi.n	80027b0 <HAL_GPIO_Init+0xdc>
 800275a:	2b12      	cmp	r3, #18
 800275c:	d859      	bhi.n	8002812 <HAL_GPIO_Init+0x13e>
 800275e:	a201      	add	r2, pc, #4	; (adr r2, 8002764 <HAL_GPIO_Init+0x90>)
 8002760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002764:	080027df 	.word	0x080027df
 8002768:	080027b9 	.word	0x080027b9
 800276c:	080027cb 	.word	0x080027cb
 8002770:	0800280d 	.word	0x0800280d
 8002774:	08002813 	.word	0x08002813
 8002778:	08002813 	.word	0x08002813
 800277c:	08002813 	.word	0x08002813
 8002780:	08002813 	.word	0x08002813
 8002784:	08002813 	.word	0x08002813
 8002788:	08002813 	.word	0x08002813
 800278c:	08002813 	.word	0x08002813
 8002790:	08002813 	.word	0x08002813
 8002794:	08002813 	.word	0x08002813
 8002798:	08002813 	.word	0x08002813
 800279c:	08002813 	.word	0x08002813
 80027a0:	08002813 	.word	0x08002813
 80027a4:	08002813 	.word	0x08002813
 80027a8:	080027c1 	.word	0x080027c1
 80027ac:	080027d5 	.word	0x080027d5
 80027b0:	4a75      	ldr	r2, [pc, #468]	; (8002988 <HAL_GPIO_Init+0x2b4>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d013      	beq.n	80027de <HAL_GPIO_Init+0x10a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80027b6:	e02c      	b.n	8002812 <HAL_GPIO_Init+0x13e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	623b      	str	r3, [r7, #32]
          break;
 80027be:	e029      	b.n	8002814 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	3304      	adds	r3, #4
 80027c6:	623b      	str	r3, [r7, #32]
          break;
 80027c8:	e024      	b.n	8002814 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	3308      	adds	r3, #8
 80027d0:	623b      	str	r3, [r7, #32]
          break;
 80027d2:	e01f      	b.n	8002814 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	330c      	adds	r3, #12
 80027da:	623b      	str	r3, [r7, #32]
          break;
 80027dc:	e01a      	b.n	8002814 <HAL_GPIO_Init+0x140>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d102      	bne.n	80027ec <HAL_GPIO_Init+0x118>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80027e6:	2304      	movs	r3, #4
 80027e8:	623b      	str	r3, [r7, #32]
          break;
 80027ea:	e013      	b.n	8002814 <HAL_GPIO_Init+0x140>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d105      	bne.n	8002800 <HAL_GPIO_Init+0x12c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027f4:	2308      	movs	r3, #8
 80027f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	69fa      	ldr	r2, [r7, #28]
 80027fc:	611a      	str	r2, [r3, #16]
          break;
 80027fe:	e009      	b.n	8002814 <HAL_GPIO_Init+0x140>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002800:	2308      	movs	r3, #8
 8002802:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	69fa      	ldr	r2, [r7, #28]
 8002808:	615a      	str	r2, [r3, #20]
          break;
 800280a:	e003      	b.n	8002814 <HAL_GPIO_Init+0x140>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800280c:	2300      	movs	r3, #0
 800280e:	623b      	str	r3, [r7, #32]
          break;
 8002810:	e000      	b.n	8002814 <HAL_GPIO_Init+0x140>
          break;
 8002812:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	2bff      	cmp	r3, #255	; 0xff
 8002818:	d801      	bhi.n	800281e <HAL_GPIO_Init+0x14a>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	e001      	b.n	8002822 <HAL_GPIO_Init+0x14e>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	3304      	adds	r3, #4
 8002822:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	2bff      	cmp	r3, #255	; 0xff
 8002828:	d802      	bhi.n	8002830 <HAL_GPIO_Init+0x15c>
 800282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	e002      	b.n	8002836 <HAL_GPIO_Init+0x162>
 8002830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002832:	3b08      	subs	r3, #8
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	210f      	movs	r1, #15
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	fa01 f303 	lsl.w	r3, r1, r3
 8002844:	43db      	mvns	r3, r3
 8002846:	401a      	ands	r2, r3
 8002848:	6a39      	ldr	r1, [r7, #32]
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	fa01 f303 	lsl.w	r3, r1, r3
 8002850:	431a      	orrs	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285e:	2b00      	cmp	r3, #0
 8002860:	f000 80c1 	beq.w	80029e6 <HAL_GPIO_Init+0x312>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002864:	4b49      	ldr	r3, [pc, #292]	; (800298c <HAL_GPIO_Init+0x2b8>)
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	4a48      	ldr	r2, [pc, #288]	; (800298c <HAL_GPIO_Init+0x2b8>)
 800286a:	f043 0301 	orr.w	r3, r3, #1
 800286e:	6193      	str	r3, [r2, #24]
 8002870:	4b46      	ldr	r3, [pc, #280]	; (800298c <HAL_GPIO_Init+0x2b8>)
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	60bb      	str	r3, [r7, #8]
 800287a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 800287c:	4a44      	ldr	r2, [pc, #272]	; (8002990 <HAL_GPIO_Init+0x2bc>)
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	089b      	lsrs	r3, r3, #2
 8002882:	3302      	adds	r3, #2
 8002884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002888:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288c:	f003 0303 	and.w	r3, r3, #3
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	220f      	movs	r2, #15
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	43db      	mvns	r3, r3
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	4013      	ands	r3, r2
 800289e:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4a3c      	ldr	r2, [pc, #240]	; (8002994 <HAL_GPIO_Init+0x2c0>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d01f      	beq.n	80028e8 <HAL_GPIO_Init+0x214>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a3b      	ldr	r2, [pc, #236]	; (8002998 <HAL_GPIO_Init+0x2c4>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d019      	beq.n	80028e4 <HAL_GPIO_Init+0x210>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a3a      	ldr	r2, [pc, #232]	; (800299c <HAL_GPIO_Init+0x2c8>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d013      	beq.n	80028e0 <HAL_GPIO_Init+0x20c>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a39      	ldr	r2, [pc, #228]	; (80029a0 <HAL_GPIO_Init+0x2cc>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d00d      	beq.n	80028dc <HAL_GPIO_Init+0x208>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a38      	ldr	r2, [pc, #224]	; (80029a4 <HAL_GPIO_Init+0x2d0>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d007      	beq.n	80028d8 <HAL_GPIO_Init+0x204>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a37      	ldr	r2, [pc, #220]	; (80029a8 <HAL_GPIO_Init+0x2d4>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d101      	bne.n	80028d4 <HAL_GPIO_Init+0x200>
 80028d0:	2305      	movs	r3, #5
 80028d2:	e00a      	b.n	80028ea <HAL_GPIO_Init+0x216>
 80028d4:	2306      	movs	r3, #6
 80028d6:	e008      	b.n	80028ea <HAL_GPIO_Init+0x216>
 80028d8:	2304      	movs	r3, #4
 80028da:	e006      	b.n	80028ea <HAL_GPIO_Init+0x216>
 80028dc:	2303      	movs	r3, #3
 80028de:	e004      	b.n	80028ea <HAL_GPIO_Init+0x216>
 80028e0:	2302      	movs	r3, #2
 80028e2:	e002      	b.n	80028ea <HAL_GPIO_Init+0x216>
 80028e4:	2301      	movs	r3, #1
 80028e6:	e000      	b.n	80028ea <HAL_GPIO_Init+0x216>
 80028e8:	2300      	movs	r3, #0
 80028ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ec:	f002 0203 	and.w	r2, r2, #3
 80028f0:	0092      	lsls	r2, r2, #2
 80028f2:	4093      	lsls	r3, r2
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 80028fa:	4925      	ldr	r1, [pc, #148]	; (8002990 <HAL_GPIO_Init+0x2bc>)
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	089b      	lsrs	r3, r3, #2
 8002900:	3302      	adds	r3, #2
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d006      	beq.n	8002922 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002914:	4b25      	ldr	r3, [pc, #148]	; (80029ac <HAL_GPIO_Init+0x2d8>)
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	4924      	ldr	r1, [pc, #144]	; (80029ac <HAL_GPIO_Init+0x2d8>)
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	4313      	orrs	r3, r2
 800291e:	600b      	str	r3, [r1, #0]
 8002920:	e006      	b.n	8002930 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002922:	4b22      	ldr	r3, [pc, #136]	; (80029ac <HAL_GPIO_Init+0x2d8>)
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	43db      	mvns	r3, r3
 800292a:	4920      	ldr	r1, [pc, #128]	; (80029ac <HAL_GPIO_Init+0x2d8>)
 800292c:	4013      	ands	r3, r2
 800292e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d006      	beq.n	800294a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800293c:	4b1b      	ldr	r3, [pc, #108]	; (80029ac <HAL_GPIO_Init+0x2d8>)
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	491a      	ldr	r1, [pc, #104]	; (80029ac <HAL_GPIO_Init+0x2d8>)
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	4313      	orrs	r3, r2
 8002946:	604b      	str	r3, [r1, #4]
 8002948:	e006      	b.n	8002958 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800294a:	4b18      	ldr	r3, [pc, #96]	; (80029ac <HAL_GPIO_Init+0x2d8>)
 800294c:	685a      	ldr	r2, [r3, #4]
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	43db      	mvns	r3, r3
 8002952:	4916      	ldr	r1, [pc, #88]	; (80029ac <HAL_GPIO_Init+0x2d8>)
 8002954:	4013      	ands	r3, r2
 8002956:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d025      	beq.n	80029b0 <HAL_GPIO_Init+0x2dc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002964:	4b11      	ldr	r3, [pc, #68]	; (80029ac <HAL_GPIO_Init+0x2d8>)
 8002966:	689a      	ldr	r2, [r3, #8]
 8002968:	4910      	ldr	r1, [pc, #64]	; (80029ac <HAL_GPIO_Init+0x2d8>)
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	4313      	orrs	r3, r2
 800296e:	608b      	str	r3, [r1, #8]
 8002970:	e025      	b.n	80029be <HAL_GPIO_Init+0x2ea>
 8002972:	bf00      	nop
 8002974:	10320000 	.word	0x10320000
 8002978:	10310000 	.word	0x10310000
 800297c:	10220000 	.word	0x10220000
 8002980:	10210000 	.word	0x10210000
 8002984:	10120000 	.word	0x10120000
 8002988:	10110000 	.word	0x10110000
 800298c:	40021000 	.word	0x40021000
 8002990:	40010000 	.word	0x40010000
 8002994:	40010800 	.word	0x40010800
 8002998:	40010c00 	.word	0x40010c00
 800299c:	40011000 	.word	0x40011000
 80029a0:	40011400 	.word	0x40011400
 80029a4:	40011800 	.word	0x40011800
 80029a8:	40011c00 	.word	0x40011c00
 80029ac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80029b0:	4b13      	ldr	r3, [pc, #76]	; (8002a00 <HAL_GPIO_Init+0x32c>)
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	43db      	mvns	r3, r3
 80029b8:	4911      	ldr	r1, [pc, #68]	; (8002a00 <HAL_GPIO_Init+0x32c>)
 80029ba:	4013      	ands	r3, r2
 80029bc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d006      	beq.n	80029d8 <HAL_GPIO_Init+0x304>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80029ca:	4b0d      	ldr	r3, [pc, #52]	; (8002a00 <HAL_GPIO_Init+0x32c>)
 80029cc:	68da      	ldr	r2, [r3, #12]
 80029ce:	490c      	ldr	r1, [pc, #48]	; (8002a00 <HAL_GPIO_Init+0x32c>)
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	60cb      	str	r3, [r1, #12]
 80029d6:	e006      	b.n	80029e6 <HAL_GPIO_Init+0x312>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80029d8:	4b09      	ldr	r3, [pc, #36]	; (8002a00 <HAL_GPIO_Init+0x32c>)
 80029da:	68da      	ldr	r2, [r3, #12]
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	43db      	mvns	r3, r3
 80029e0:	4907      	ldr	r1, [pc, #28]	; (8002a00 <HAL_GPIO_Init+0x32c>)
 80029e2:	4013      	ands	r3, r2
 80029e4:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e8:	3301      	adds	r3, #1
 80029ea:	627b      	str	r3, [r7, #36]	; 0x24
 80029ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ee:	2b0f      	cmp	r3, #15
 80029f0:	f67f ae82 	bls.w	80026f8 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 80029f4:	bf00      	nop
 80029f6:	bf00      	nop
 80029f8:	372c      	adds	r7, #44	; 0x2c
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr
 8002a00:	40010400 	.word	0x40010400

08002a04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689a      	ldr	r2, [r3, #8]
 8002a14:	887b      	ldrh	r3, [r7, #2]
 8002a16:	4013      	ands	r3, r2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d002      	beq.n	8002a22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	73fb      	strb	r3, [r7, #15]
 8002a20:	e001      	b.n	8002a26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a22:	2300      	movs	r3, #0
 8002a24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3714      	adds	r7, #20
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bc80      	pop	{r7}
 8002a30:	4770      	bx	lr

08002a32 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a32:	b480      	push	{r7}
 8002a34:	b083      	sub	sp, #12
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	807b      	strh	r3, [r7, #2]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a42:	787b      	ldrb	r3, [r7, #1]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d003      	beq.n	8002a50 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a48:	887a      	ldrh	r2, [r7, #2]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a4e:	e003      	b.n	8002a58 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a50:	887b      	ldrh	r3, [r7, #2]
 8002a52:	041a      	lsls	r2, r3, #16
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	611a      	str	r2, [r3, #16]
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bc80      	pop	{r7}
 8002a60:	4770      	bx	lr

08002a62 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b083      	sub	sp, #12
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	4603      	mov	r3, r0
 8002a6a:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bc80      	pop	{r7}
 8002a74:	4770      	bx	lr
	...

08002a78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8002a80:	2300      	movs	r3, #0
 8002a82:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f000 8087 	beq.w	8002ba0 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002a92:	4b92      	ldr	r3, [pc, #584]	; (8002cdc <HAL_RCC_OscConfig+0x264>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f003 030c 	and.w	r3, r3, #12
 8002a9a:	2b04      	cmp	r3, #4
 8002a9c:	d00c      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a9e:	4b8f      	ldr	r3, [pc, #572]	; (8002cdc <HAL_RCC_OscConfig+0x264>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f003 030c 	and.w	r3, r3, #12
 8002aa6:	2b08      	cmp	r3, #8
 8002aa8:	d112      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x58>
 8002aaa:	4b8c      	ldr	r3, [pc, #560]	; (8002cdc <HAL_RCC_OscConfig+0x264>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ab2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ab6:	d10b      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab8:	4b88      	ldr	r3, [pc, #544]	; (8002cdc <HAL_RCC_OscConfig+0x264>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d06c      	beq.n	8002b9e <HAL_RCC_OscConfig+0x126>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d168      	bne.n	8002b9e <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e22d      	b.n	8002f2c <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ad8:	d106      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x70>
 8002ada:	4b80      	ldr	r3, [pc, #512]	; (8002cdc <HAL_RCC_OscConfig+0x264>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a7f      	ldr	r2, [pc, #508]	; (8002cdc <HAL_RCC_OscConfig+0x264>)
 8002ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae4:	6013      	str	r3, [r2, #0]
 8002ae6:	e02e      	b.n	8002b46 <HAL_RCC_OscConfig+0xce>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d10c      	bne.n	8002b0a <HAL_RCC_OscConfig+0x92>
 8002af0:	4b7a      	ldr	r3, [pc, #488]	; (8002cdc <HAL_RCC_OscConfig+0x264>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a79      	ldr	r2, [pc, #484]	; (8002cdc <HAL_RCC_OscConfig+0x264>)
 8002af6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002afa:	6013      	str	r3, [r2, #0]
 8002afc:	4b77      	ldr	r3, [pc, #476]	; (8002cdc <HAL_RCC_OscConfig+0x264>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a76      	ldr	r2, [pc, #472]	; (8002cdc <HAL_RCC_OscConfig+0x264>)
 8002b02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b06:	6013      	str	r3, [r2, #0]
 8002b08:	e01d      	b.n	8002b46 <HAL_RCC_OscConfig+0xce>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b12:	d10c      	bne.n	8002b2e <HAL_RCC_OscConfig+0xb6>
 8002b14:	4b71      	ldr	r3, [pc, #452]	; (8002cdc <HAL_RCC_OscConfig+0x264>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a70      	ldr	r2, [pc, #448]	; (8002cdc <HAL_RCC_OscConfig+0x264>)
 8002b1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b1e:	6013      	str	r3, [r2, #0]
 8002b20:	4b6e      	ldr	r3, [pc, #440]	; (8002cdc <HAL_RCC_OscConfig+0x264>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a6d      	ldr	r2, [pc, #436]	; (8002cdc <HAL_RCC_OscConfig+0x264>)
 8002b26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b2a:	6013      	str	r3, [r2, #0]
 8002b2c:	e00b      	b.n	8002b46 <HAL_RCC_OscConfig+0xce>
 8002b2e:	4b6b      	ldr	r3, [pc, #428]	; (8002cdc <HAL_RCC_OscConfig+0x264>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a6a      	ldr	r2, [pc, #424]	; (8002cdc <HAL_RCC_OscConfig+0x264>)
 8002b34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b38:	6013      	str	r3, [r2, #0]
 8002b3a:	4b68      	ldr	r3, [pc, #416]	; (8002cdc <HAL_RCC_OscConfig+0x264>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a67      	ldr	r2, [pc, #412]	; (8002cdc <HAL_RCC_OscConfig+0x264>)
 8002b40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b44:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d013      	beq.n	8002b76 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4e:	f7ff fb81 	bl	8002254 <HAL_GetTick>
 8002b52:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b54:	e008      	b.n	8002b68 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b56:	f7ff fb7d 	bl	8002254 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b64      	cmp	r3, #100	; 0x64
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e1e1      	b.n	8002f2c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b68:	4b5c      	ldr	r3, [pc, #368]	; (8002cdc <HAL_RCC_OscConfig+0x264>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d0f0      	beq.n	8002b56 <HAL_RCC_OscConfig+0xde>
 8002b74:	e014      	b.n	8002ba0 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b76:	f7ff fb6d 	bl	8002254 <HAL_GetTick>
 8002b7a:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b7c:	e008      	b.n	8002b90 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b7e:	f7ff fb69 	bl	8002254 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	2b64      	cmp	r3, #100	; 0x64
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e1cd      	b.n	8002f2c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b90:	4b52      	ldr	r3, [pc, #328]	; (8002cdc <HAL_RCC_OscConfig+0x264>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1f0      	bne.n	8002b7e <HAL_RCC_OscConfig+0x106>
 8002b9c:	e000      	b.n	8002ba0 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b9e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d063      	beq.n	8002c74 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002bac:	4b4b      	ldr	r3, [pc, #300]	; (8002cdc <HAL_RCC_OscConfig+0x264>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f003 030c 	and.w	r3, r3, #12
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00b      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002bb8:	4b48      	ldr	r3, [pc, #288]	; (8002cdc <HAL_RCC_OscConfig+0x264>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f003 030c 	and.w	r3, r3, #12
 8002bc0:	2b08      	cmp	r3, #8
 8002bc2:	d11c      	bne.n	8002bfe <HAL_RCC_OscConfig+0x186>
 8002bc4:	4b45      	ldr	r3, [pc, #276]	; (8002cdc <HAL_RCC_OscConfig+0x264>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d116      	bne.n	8002bfe <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bd0:	4b42      	ldr	r3, [pc, #264]	; (8002cdc <HAL_RCC_OscConfig+0x264>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d005      	beq.n	8002be8 <HAL_RCC_OscConfig+0x170>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d001      	beq.n	8002be8 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e1a1      	b.n	8002f2c <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be8:	4b3c      	ldr	r3, [pc, #240]	; (8002cdc <HAL_RCC_OscConfig+0x264>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	695b      	ldr	r3, [r3, #20]
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	4939      	ldr	r1, [pc, #228]	; (8002cdc <HAL_RCC_OscConfig+0x264>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bfc:	e03a      	b.n	8002c74 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d020      	beq.n	8002c48 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c06:	4b36      	ldr	r3, [pc, #216]	; (8002ce0 <HAL_RCC_OscConfig+0x268>)
 8002c08:	2201      	movs	r2, #1
 8002c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c0c:	f7ff fb22 	bl	8002254 <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c14:	f7ff fb1e 	bl	8002254 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e182      	b.n	8002f2c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c26:	4b2d      	ldr	r3, [pc, #180]	; (8002cdc <HAL_RCC_OscConfig+0x264>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0f0      	beq.n	8002c14 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c32:	4b2a      	ldr	r3, [pc, #168]	; (8002cdc <HAL_RCC_OscConfig+0x264>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	4926      	ldr	r1, [pc, #152]	; (8002cdc <HAL_RCC_OscConfig+0x264>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	600b      	str	r3, [r1, #0]
 8002c46:	e015      	b.n	8002c74 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c48:	4b25      	ldr	r3, [pc, #148]	; (8002ce0 <HAL_RCC_OscConfig+0x268>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c4e:	f7ff fb01 	bl	8002254 <HAL_GetTick>
 8002c52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c54:	e008      	b.n	8002c68 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c56:	f7ff fafd 	bl	8002254 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d901      	bls.n	8002c68 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e161      	b.n	8002f2c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c68:	4b1c      	ldr	r3, [pc, #112]	; (8002cdc <HAL_RCC_OscConfig+0x264>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d1f0      	bne.n	8002c56 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0308 	and.w	r3, r3, #8
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d039      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d019      	beq.n	8002cbc <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c88:	4b16      	ldr	r3, [pc, #88]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c8e:	f7ff fae1 	bl	8002254 <HAL_GetTick>
 8002c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c94:	e008      	b.n	8002ca8 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c96:	f7ff fadd 	bl	8002254 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d901      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e141      	b.n	8002f2c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ca8:	4b0c      	ldr	r3, [pc, #48]	; (8002cdc <HAL_RCC_OscConfig+0x264>)
 8002caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d0f0      	beq.n	8002c96 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8002cb4:	2001      	movs	r0, #1
 8002cb6:	f000 fadf 	bl	8003278 <RCC_Delay>
 8002cba:	e01b      	b.n	8002cf4 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cbc:	4b09      	ldr	r3, [pc, #36]	; (8002ce4 <HAL_RCC_OscConfig+0x26c>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cc2:	f7ff fac7 	bl	8002254 <HAL_GetTick>
 8002cc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cc8:	e00e      	b.n	8002ce8 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cca:	f7ff fac3 	bl	8002254 <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d907      	bls.n	8002ce8 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e127      	b.n	8002f2c <HAL_RCC_OscConfig+0x4b4>
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	42420000 	.word	0x42420000
 8002ce4:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ce8:	4b92      	ldr	r3, [pc, #584]	; (8002f34 <HAL_RCC_OscConfig+0x4bc>)
 8002cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1ea      	bne.n	8002cca <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0304 	and.w	r3, r3, #4
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	f000 80a6 	beq.w	8002e4e <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d02:	2300      	movs	r3, #0
 8002d04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d06:	4b8b      	ldr	r3, [pc, #556]	; (8002f34 <HAL_RCC_OscConfig+0x4bc>)
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d10d      	bne.n	8002d2e <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d12:	4b88      	ldr	r3, [pc, #544]	; (8002f34 <HAL_RCC_OscConfig+0x4bc>)
 8002d14:	69db      	ldr	r3, [r3, #28]
 8002d16:	4a87      	ldr	r2, [pc, #540]	; (8002f34 <HAL_RCC_OscConfig+0x4bc>)
 8002d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d1c:	61d3      	str	r3, [r2, #28]
 8002d1e:	4b85      	ldr	r3, [pc, #532]	; (8002f34 <HAL_RCC_OscConfig+0x4bc>)
 8002d20:	69db      	ldr	r3, [r3, #28]
 8002d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d26:	60fb      	str	r3, [r7, #12]
 8002d28:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d2e:	4b82      	ldr	r3, [pc, #520]	; (8002f38 <HAL_RCC_OscConfig+0x4c0>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d118      	bne.n	8002d6c <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d3a:	4b7f      	ldr	r3, [pc, #508]	; (8002f38 <HAL_RCC_OscConfig+0x4c0>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a7e      	ldr	r2, [pc, #504]	; (8002f38 <HAL_RCC_OscConfig+0x4c0>)
 8002d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d46:	f7ff fa85 	bl	8002254 <HAL_GetTick>
 8002d4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d4c:	e008      	b.n	8002d60 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d4e:	f7ff fa81 	bl	8002254 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b64      	cmp	r3, #100	; 0x64
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e0e5      	b.n	8002f2c <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d60:	4b75      	ldr	r3, [pc, #468]	; (8002f38 <HAL_RCC_OscConfig+0x4c0>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d0f0      	beq.n	8002d4e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d106      	bne.n	8002d82 <HAL_RCC_OscConfig+0x30a>
 8002d74:	4b6f      	ldr	r3, [pc, #444]	; (8002f34 <HAL_RCC_OscConfig+0x4bc>)
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	4a6e      	ldr	r2, [pc, #440]	; (8002f34 <HAL_RCC_OscConfig+0x4bc>)
 8002d7a:	f043 0301 	orr.w	r3, r3, #1
 8002d7e:	6213      	str	r3, [r2, #32]
 8002d80:	e02d      	b.n	8002dde <HAL_RCC_OscConfig+0x366>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10c      	bne.n	8002da4 <HAL_RCC_OscConfig+0x32c>
 8002d8a:	4b6a      	ldr	r3, [pc, #424]	; (8002f34 <HAL_RCC_OscConfig+0x4bc>)
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	4a69      	ldr	r2, [pc, #420]	; (8002f34 <HAL_RCC_OscConfig+0x4bc>)
 8002d90:	f023 0301 	bic.w	r3, r3, #1
 8002d94:	6213      	str	r3, [r2, #32]
 8002d96:	4b67      	ldr	r3, [pc, #412]	; (8002f34 <HAL_RCC_OscConfig+0x4bc>)
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	4a66      	ldr	r2, [pc, #408]	; (8002f34 <HAL_RCC_OscConfig+0x4bc>)
 8002d9c:	f023 0304 	bic.w	r3, r3, #4
 8002da0:	6213      	str	r3, [r2, #32]
 8002da2:	e01c      	b.n	8002dde <HAL_RCC_OscConfig+0x366>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	2b05      	cmp	r3, #5
 8002daa:	d10c      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x34e>
 8002dac:	4b61      	ldr	r3, [pc, #388]	; (8002f34 <HAL_RCC_OscConfig+0x4bc>)
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	4a60      	ldr	r2, [pc, #384]	; (8002f34 <HAL_RCC_OscConfig+0x4bc>)
 8002db2:	f043 0304 	orr.w	r3, r3, #4
 8002db6:	6213      	str	r3, [r2, #32]
 8002db8:	4b5e      	ldr	r3, [pc, #376]	; (8002f34 <HAL_RCC_OscConfig+0x4bc>)
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	4a5d      	ldr	r2, [pc, #372]	; (8002f34 <HAL_RCC_OscConfig+0x4bc>)
 8002dbe:	f043 0301 	orr.w	r3, r3, #1
 8002dc2:	6213      	str	r3, [r2, #32]
 8002dc4:	e00b      	b.n	8002dde <HAL_RCC_OscConfig+0x366>
 8002dc6:	4b5b      	ldr	r3, [pc, #364]	; (8002f34 <HAL_RCC_OscConfig+0x4bc>)
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	4a5a      	ldr	r2, [pc, #360]	; (8002f34 <HAL_RCC_OscConfig+0x4bc>)
 8002dcc:	f023 0301 	bic.w	r3, r3, #1
 8002dd0:	6213      	str	r3, [r2, #32]
 8002dd2:	4b58      	ldr	r3, [pc, #352]	; (8002f34 <HAL_RCC_OscConfig+0x4bc>)
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	4a57      	ldr	r2, [pc, #348]	; (8002f34 <HAL_RCC_OscConfig+0x4bc>)
 8002dd8:	f023 0304 	bic.w	r3, r3, #4
 8002ddc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d015      	beq.n	8002e12 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002de6:	f7ff fa35 	bl	8002254 <HAL_GetTick>
 8002dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dec:	e00a      	b.n	8002e04 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dee:	f7ff fa31 	bl	8002254 <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e093      	b.n	8002f2c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e04:	4b4b      	ldr	r3, [pc, #300]	; (8002f34 <HAL_RCC_OscConfig+0x4bc>)
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d0ee      	beq.n	8002dee <HAL_RCC_OscConfig+0x376>
 8002e10:	e014      	b.n	8002e3c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e12:	f7ff fa1f 	bl	8002254 <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e18:	e00a      	b.n	8002e30 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e1a:	f7ff fa1b 	bl	8002254 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e07d      	b.n	8002f2c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e30:	4b40      	ldr	r3, [pc, #256]	; (8002f34 <HAL_RCC_OscConfig+0x4bc>)
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1ee      	bne.n	8002e1a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e3c:	7dfb      	ldrb	r3, [r7, #23]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d105      	bne.n	8002e4e <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e42:	4b3c      	ldr	r3, [pc, #240]	; (8002f34 <HAL_RCC_OscConfig+0x4bc>)
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	4a3b      	ldr	r2, [pc, #236]	; (8002f34 <HAL_RCC_OscConfig+0x4bc>)
 8002e48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e4c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d069      	beq.n	8002f2a <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e56:	4b37      	ldr	r3, [pc, #220]	; (8002f34 <HAL_RCC_OscConfig+0x4bc>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f003 030c 	and.w	r3, r3, #12
 8002e5e:	2b08      	cmp	r3, #8
 8002e60:	d061      	beq.n	8002f26 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d146      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e6a:	4b34      	ldr	r3, [pc, #208]	; (8002f3c <HAL_RCC_OscConfig+0x4c4>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e70:	f7ff f9f0 	bl	8002254 <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e78:	f7ff f9ec 	bl	8002254 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e050      	b.n	8002f2c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e8a:	4b2a      	ldr	r3, [pc, #168]	; (8002f34 <HAL_RCC_OscConfig+0x4bc>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1f0      	bne.n	8002e78 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e9e:	d108      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ea0:	4b24      	ldr	r3, [pc, #144]	; (8002f34 <HAL_RCC_OscConfig+0x4bc>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	4921      	ldr	r1, [pc, #132]	; (8002f34 <HAL_RCC_OscConfig+0x4bc>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002eb2:	4b20      	ldr	r3, [pc, #128]	; (8002f34 <HAL_RCC_OscConfig+0x4bc>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a19      	ldr	r1, [r3, #32]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec2:	430b      	orrs	r3, r1
 8002ec4:	491b      	ldr	r1, [pc, #108]	; (8002f34 <HAL_RCC_OscConfig+0x4bc>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002eca:	4b1c      	ldr	r3, [pc, #112]	; (8002f3c <HAL_RCC_OscConfig+0x4c4>)
 8002ecc:	2201      	movs	r2, #1
 8002ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed0:	f7ff f9c0 	bl	8002254 <HAL_GetTick>
 8002ed4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ed6:	e008      	b.n	8002eea <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ed8:	f7ff f9bc 	bl	8002254 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e020      	b.n	8002f2c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002eea:	4b12      	ldr	r3, [pc, #72]	; (8002f34 <HAL_RCC_OscConfig+0x4bc>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d0f0      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x460>
 8002ef6:	e018      	b.n	8002f2a <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ef8:	4b10      	ldr	r3, [pc, #64]	; (8002f3c <HAL_RCC_OscConfig+0x4c4>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002efe:	f7ff f9a9 	bl	8002254 <HAL_GetTick>
 8002f02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f04:	e008      	b.n	8002f18 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f06:	f7ff f9a5 	bl	8002254 <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d901      	bls.n	8002f18 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e009      	b.n	8002f2c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f18:	4b06      	ldr	r3, [pc, #24]	; (8002f34 <HAL_RCC_OscConfig+0x4bc>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1f0      	bne.n	8002f06 <HAL_RCC_OscConfig+0x48e>
 8002f24:	e001      	b.n	8002f2a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e000      	b.n	8002f2c <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3718      	adds	r7, #24
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	40021000 	.word	0x40021000
 8002f38:	40007000 	.word	0x40007000
 8002f3c:	42420060 	.word	0x42420060

08002f40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002f4e:	4b7e      	ldr	r3, [pc, #504]	; (8003148 <HAL_RCC_ClockConfig+0x208>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d910      	bls.n	8002f7e <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f5c:	4b7a      	ldr	r3, [pc, #488]	; (8003148 <HAL_RCC_ClockConfig+0x208>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f023 0207 	bic.w	r2, r3, #7
 8002f64:	4978      	ldr	r1, [pc, #480]	; (8003148 <HAL_RCC_ClockConfig+0x208>)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002f6c:	4b76      	ldr	r3, [pc, #472]	; (8003148 <HAL_RCC_ClockConfig+0x208>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0307 	and.w	r3, r3, #7
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d001      	beq.n	8002f7e <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e0e0      	b.n	8003140 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d020      	beq.n	8002fcc <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0304 	and.w	r3, r3, #4
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d005      	beq.n	8002fa2 <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f96:	4b6d      	ldr	r3, [pc, #436]	; (800314c <HAL_RCC_ClockConfig+0x20c>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	4a6c      	ldr	r2, [pc, #432]	; (800314c <HAL_RCC_ClockConfig+0x20c>)
 8002f9c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002fa0:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0308 	and.w	r3, r3, #8
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d005      	beq.n	8002fba <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fae:	4b67      	ldr	r3, [pc, #412]	; (800314c <HAL_RCC_ClockConfig+0x20c>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	4a66      	ldr	r2, [pc, #408]	; (800314c <HAL_RCC_ClockConfig+0x20c>)
 8002fb4:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002fb8:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fba:	4b64      	ldr	r3, [pc, #400]	; (800314c <HAL_RCC_ClockConfig+0x20c>)
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	4961      	ldr	r1, [pc, #388]	; (800314c <HAL_RCC_ClockConfig+0x20c>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d06a      	beq.n	80030ae <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d107      	bne.n	8002ff0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fe0:	4b5a      	ldr	r3, [pc, #360]	; (800314c <HAL_RCC_ClockConfig+0x20c>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d115      	bne.n	8003018 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e0a7      	b.n	8003140 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d107      	bne.n	8003008 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ff8:	4b54      	ldr	r3, [pc, #336]	; (800314c <HAL_RCC_ClockConfig+0x20c>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d109      	bne.n	8003018 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e09b      	b.n	8003140 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003008:	4b50      	ldr	r3, [pc, #320]	; (800314c <HAL_RCC_ClockConfig+0x20c>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d101      	bne.n	8003018 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e093      	b.n	8003140 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003018:	4b4c      	ldr	r3, [pc, #304]	; (800314c <HAL_RCC_ClockConfig+0x20c>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f023 0203 	bic.w	r2, r3, #3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	4949      	ldr	r1, [pc, #292]	; (800314c <HAL_RCC_ClockConfig+0x20c>)
 8003026:	4313      	orrs	r3, r2
 8003028:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800302a:	f7ff f913 	bl	8002254 <HAL_GetTick>
 800302e:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d112      	bne.n	800305e <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003038:	e00a      	b.n	8003050 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800303a:	f7ff f90b 	bl	8002254 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	f241 3288 	movw	r2, #5000	; 0x1388
 8003048:	4293      	cmp	r3, r2
 800304a:	d901      	bls.n	8003050 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e077      	b.n	8003140 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003050:	4b3e      	ldr	r3, [pc, #248]	; (800314c <HAL_RCC_ClockConfig+0x20c>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f003 030c 	and.w	r3, r3, #12
 8003058:	2b04      	cmp	r3, #4
 800305a:	d1ee      	bne.n	800303a <HAL_RCC_ClockConfig+0xfa>
 800305c:	e027      	b.n	80030ae <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	2b02      	cmp	r3, #2
 8003064:	d11d      	bne.n	80030a2 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003066:	e00a      	b.n	800307e <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003068:	f7ff f8f4 	bl	8002254 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	f241 3288 	movw	r2, #5000	; 0x1388
 8003076:	4293      	cmp	r3, r2
 8003078:	d901      	bls.n	800307e <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e060      	b.n	8003140 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800307e:	4b33      	ldr	r3, [pc, #204]	; (800314c <HAL_RCC_ClockConfig+0x20c>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f003 030c 	and.w	r3, r3, #12
 8003086:	2b08      	cmp	r3, #8
 8003088:	d1ee      	bne.n	8003068 <HAL_RCC_ClockConfig+0x128>
 800308a:	e010      	b.n	80030ae <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800308c:	f7ff f8e2 	bl	8002254 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	f241 3288 	movw	r2, #5000	; 0x1388
 800309a:	4293      	cmp	r3, r2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e04e      	b.n	8003140 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80030a2:	4b2a      	ldr	r3, [pc, #168]	; (800314c <HAL_RCC_ClockConfig+0x20c>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f003 030c 	and.w	r3, r3, #12
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1ee      	bne.n	800308c <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80030ae:	4b26      	ldr	r3, [pc, #152]	; (8003148 <HAL_RCC_ClockConfig+0x208>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0307 	and.w	r3, r3, #7
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d210      	bcs.n	80030de <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030bc:	4b22      	ldr	r3, [pc, #136]	; (8003148 <HAL_RCC_ClockConfig+0x208>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f023 0207 	bic.w	r2, r3, #7
 80030c4:	4920      	ldr	r1, [pc, #128]	; (8003148 <HAL_RCC_ClockConfig+0x208>)
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80030cc:	4b1e      	ldr	r3, [pc, #120]	; (8003148 <HAL_RCC_ClockConfig+0x208>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0307 	and.w	r3, r3, #7
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d001      	beq.n	80030de <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e030      	b.n	8003140 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0304 	and.w	r3, r3, #4
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d008      	beq.n	80030fc <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030ea:	4b18      	ldr	r3, [pc, #96]	; (800314c <HAL_RCC_ClockConfig+0x20c>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	4915      	ldr	r1, [pc, #84]	; (800314c <HAL_RCC_ClockConfig+0x20c>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0308 	and.w	r3, r3, #8
 8003104:	2b00      	cmp	r3, #0
 8003106:	d009      	beq.n	800311c <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003108:	4b10      	ldr	r3, [pc, #64]	; (800314c <HAL_RCC_ClockConfig+0x20c>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	00db      	lsls	r3, r3, #3
 8003116:	490d      	ldr	r1, [pc, #52]	; (800314c <HAL_RCC_ClockConfig+0x20c>)
 8003118:	4313      	orrs	r3, r2
 800311a:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800311c:	f000 f81c 	bl	8003158 <HAL_RCC_GetSysClockFreq>
 8003120:	4602      	mov	r2, r0
 8003122:	4b0a      	ldr	r3, [pc, #40]	; (800314c <HAL_RCC_ClockConfig+0x20c>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	091b      	lsrs	r3, r3, #4
 8003128:	f003 030f 	and.w	r3, r3, #15
 800312c:	4908      	ldr	r1, [pc, #32]	; (8003150 <HAL_RCC_ClockConfig+0x210>)
 800312e:	5ccb      	ldrb	r3, [r1, r3]
 8003130:	fa22 f303 	lsr.w	r3, r2, r3
 8003134:	4a07      	ldr	r2, [pc, #28]	; (8003154 <HAL_RCC_ClockConfig+0x214>)
 8003136:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003138:	2000      	movs	r0, #0
 800313a:	f7ff f849 	bl	80021d0 <HAL_InitTick>
  
  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3710      	adds	r7, #16
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40022000 	.word	0x40022000
 800314c:	40021000 	.word	0x40021000
 8003150:	08005358 	.word	0x08005358
 8003154:	200000b4 	.word	0x200000b4

08003158 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003158:	b490      	push	{r4, r7}
 800315a:	b08a      	sub	sp, #40	; 0x28
 800315c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800315e:	4b29      	ldr	r3, [pc, #164]	; (8003204 <HAL_RCC_GetSysClockFreq+0xac>)
 8003160:	1d3c      	adds	r4, r7, #4
 8003162:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003164:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003168:	f240 2301 	movw	r3, #513	; 0x201
 800316c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800316e:	2300      	movs	r3, #0
 8003170:	61fb      	str	r3, [r7, #28]
 8003172:	2300      	movs	r3, #0
 8003174:	61bb      	str	r3, [r7, #24]
 8003176:	2300      	movs	r3, #0
 8003178:	627b      	str	r3, [r7, #36]	; 0x24
 800317a:	2300      	movs	r3, #0
 800317c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800317e:	2300      	movs	r3, #0
 8003180:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003182:	4b21      	ldr	r3, [pc, #132]	; (8003208 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	f003 030c 	and.w	r3, r3, #12
 800318e:	2b04      	cmp	r3, #4
 8003190:	d002      	beq.n	8003198 <HAL_RCC_GetSysClockFreq+0x40>
 8003192:	2b08      	cmp	r3, #8
 8003194:	d003      	beq.n	800319e <HAL_RCC_GetSysClockFreq+0x46>
 8003196:	e02b      	b.n	80031f0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003198:	4b1c      	ldr	r3, [pc, #112]	; (800320c <HAL_RCC_GetSysClockFreq+0xb4>)
 800319a:	623b      	str	r3, [r7, #32]
      break;
 800319c:	e02b      	b.n	80031f6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	0c9b      	lsrs	r3, r3, #18
 80031a2:	f003 030f 	and.w	r3, r3, #15
 80031a6:	3328      	adds	r3, #40	; 0x28
 80031a8:	443b      	add	r3, r7
 80031aa:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80031ae:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d012      	beq.n	80031e0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80031ba:	4b13      	ldr	r3, [pc, #76]	; (8003208 <HAL_RCC_GetSysClockFreq+0xb0>)
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	0c5b      	lsrs	r3, r3, #17
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	3328      	adds	r3, #40	; 0x28
 80031c6:	443b      	add	r3, r7
 80031c8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80031cc:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	4a0e      	ldr	r2, [pc, #56]	; (800320c <HAL_RCC_GetSysClockFreq+0xb4>)
 80031d2:	fb03 f202 	mul.w	r2, r3, r2
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031dc:	627b      	str	r3, [r7, #36]	; 0x24
 80031de:	e004      	b.n	80031ea <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	4a0b      	ldr	r2, [pc, #44]	; (8003210 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031e4:	fb02 f303 	mul.w	r3, r2, r3
 80031e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80031ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ec:	623b      	str	r3, [r7, #32]
      break;
 80031ee:	e002      	b.n	80031f6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031f0:	4b06      	ldr	r3, [pc, #24]	; (800320c <HAL_RCC_GetSysClockFreq+0xb4>)
 80031f2:	623b      	str	r3, [r7, #32]
      break;
 80031f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031f6:	6a3b      	ldr	r3, [r7, #32]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3728      	adds	r7, #40	; 0x28
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bc90      	pop	{r4, r7}
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	08004d58 	.word	0x08004d58
 8003208:	40021000 	.word	0x40021000
 800320c:	007a1200 	.word	0x007a1200
 8003210:	003d0900 	.word	0x003d0900

08003214 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003214:	b480      	push	{r7}
 8003216:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003218:	4b02      	ldr	r3, [pc, #8]	; (8003224 <HAL_RCC_GetHCLKFreq+0x10>)
 800321a:	681b      	ldr	r3, [r3, #0]
}
 800321c:	4618      	mov	r0, r3
 800321e:	46bd      	mov	sp, r7
 8003220:	bc80      	pop	{r7}
 8003222:	4770      	bx	lr
 8003224:	200000b4 	.word	0x200000b4

08003228 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800322c:	f7ff fff2 	bl	8003214 <HAL_RCC_GetHCLKFreq>
 8003230:	4602      	mov	r2, r0
 8003232:	4b05      	ldr	r3, [pc, #20]	; (8003248 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	0a1b      	lsrs	r3, r3, #8
 8003238:	f003 0307 	and.w	r3, r3, #7
 800323c:	4903      	ldr	r1, [pc, #12]	; (800324c <HAL_RCC_GetPCLK1Freq+0x24>)
 800323e:	5ccb      	ldrb	r3, [r1, r3]
 8003240:	fa22 f303 	lsr.w	r3, r2, r3
}    
 8003244:	4618      	mov	r0, r3
 8003246:	bd80      	pop	{r7, pc}
 8003248:	40021000 	.word	0x40021000
 800324c:	08005368 	.word	0x08005368

08003250 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003254:	f7ff ffde 	bl	8003214 <HAL_RCC_GetHCLKFreq>
 8003258:	4602      	mov	r2, r0
 800325a:	4b05      	ldr	r3, [pc, #20]	; (8003270 <HAL_RCC_GetPCLK2Freq+0x20>)
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	0adb      	lsrs	r3, r3, #11
 8003260:	f003 0307 	and.w	r3, r3, #7
 8003264:	4903      	ldr	r1, [pc, #12]	; (8003274 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003266:	5ccb      	ldrb	r3, [r1, r3]
 8003268:	fa22 f303 	lsr.w	r3, r2, r3
} 
 800326c:	4618      	mov	r0, r3
 800326e:	bd80      	pop	{r7, pc}
 8003270:	40021000 	.word	0x40021000
 8003274:	08005368 	.word	0x08005368

08003278 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003278:	b480      	push	{r7}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003280:	4b0b      	ldr	r3, [pc, #44]	; (80032b0 <RCC_Delay+0x38>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a0b      	ldr	r2, [pc, #44]	; (80032b4 <RCC_Delay+0x3c>)
 8003286:	fba2 2303 	umull	r2, r3, r2, r3
 800328a:	0a5b      	lsrs	r3, r3, #9
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	fb02 f303 	mul.w	r3, r2, r3
 8003292:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8003294:	bf00      	nop
}
 8003296:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	1e5a      	subs	r2, r3, #1
 800329c:	60fa      	str	r2, [r7, #12]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1f8      	bne.n	8003294 <RCC_Delay+0x1c>
}
 80032a2:	bf00      	nop
 80032a4:	bf00      	nop
 80032a6:	3714      	adds	r7, #20
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bc80      	pop	{r7}
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	200000b4 	.word	0x200000b4
 80032b4:	10624dd3 	.word	0x10624dd3

080032b8 <HAL_SRAM_Init>:
  * @param  Timing: Pointer to SRAM control timing structure 
  * @param  ExtTiming: Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing, FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e034      	b.n	8003338 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d106      	bne.n	80032e8 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f7fe f87c 	bl	80013e0 <HAL_SRAM_MspInit>
  }
  
  /* Initialize SRAM control Interface */
  FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	3308      	adds	r3, #8
 80032f0:	4619      	mov	r1, r3
 80032f2:	4610      	mov	r0, r2
 80032f4:	f000 fcf4 	bl	8003ce0 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6818      	ldr	r0, [r3, #0]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	461a      	mov	r2, r3
 8003302:	68b9      	ldr	r1, [r7, #8]
 8003304:	f000 fd6c 	bl	8003de0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6858      	ldr	r0, [r3, #4]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	689a      	ldr	r2, [r3, #8]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003314:	6879      	ldr	r1, [r7, #4]
 8003316:	f000 fd97 	bl	8003e48 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	6892      	ldr	r2, [r2, #8]
 8003322:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	6892      	ldr	r2, [r2, #8]
 800332e:	f041 0101 	orr.w	r1, r1, #1
 8003332:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3710      	adds	r7, #16
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e03f      	b.n	80033d2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d106      	bne.n	800336c <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f7fe fea2 	bl	80020b0 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2224      	movs	r2, #36	; 0x24
 8003370:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68da      	ldr	r2, [r3, #12]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003382:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f000 fb93 	bl	8003ab0 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	691a      	ldr	r2, [r3, #16]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003398:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	695a      	ldr	r2, [r3, #20]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033a8:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68da      	ldr	r2, [r3, #12]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033b8:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2220      	movs	r2, #32
 80033c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2220      	movs	r2, #32
 80033cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b088      	sub	sp, #32
 80033de:	af02      	add	r7, sp, #8
 80033e0:	60f8      	str	r0, [r7, #12]
 80033e2:	60b9      	str	r1, [r7, #8]
 80033e4:	603b      	str	r3, [r7, #0]
 80033e6:	4613      	mov	r3, r2
 80033e8:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80033ea:	2300      	movs	r3, #0
 80033ec:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b20      	cmp	r3, #32
 80033f8:	f040 8083 	bne.w	8003502 <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL) || (Size == 0U))
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d002      	beq.n	8003408 <HAL_UART_Transmit+0x2e>
 8003402:	88fb      	ldrh	r3, [r7, #6]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d101      	bne.n	800340c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e07b      	b.n	8003504 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003412:	2b01      	cmp	r3, #1
 8003414:	d101      	bne.n	800341a <HAL_UART_Transmit+0x40>
 8003416:	2302      	movs	r3, #2
 8003418:	e074      	b.n	8003504 <HAL_UART_Transmit+0x12a>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2201      	movs	r2, #1
 800341e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2221      	movs	r2, #33	; 0x21
 800342c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003430:	f7fe ff10 	bl	8002254 <HAL_GetTick>
 8003434:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	88fa      	ldrh	r2, [r7, #6]
 800343a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	88fa      	ldrh	r2, [r7, #6]
 8003440:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8003442:	e042      	b.n	80034ca <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003448:	b29b      	uxth	r3, r3
 800344a:	3b01      	subs	r3, #1
 800344c:	b29a      	uxth	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800345a:	d122      	bne.n	80034a2 <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	9300      	str	r3, [sp, #0]
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	2200      	movs	r2, #0
 8003464:	2180      	movs	r1, #128	; 0x80
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f000 f9b9 	bl	80037de <UART_WaitOnFlagUntilTimeout>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e046      	b.n	8003504 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	881b      	ldrh	r3, [r3, #0]
 800347e:	461a      	mov	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003488:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d103      	bne.n	800349a <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	3302      	adds	r3, #2
 8003496:	60bb      	str	r3, [r7, #8]
 8003498:	e017      	b.n	80034ca <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData +=1U;
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	3301      	adds	r3, #1
 800349e:	60bb      	str	r3, [r7, #8]
 80034a0:	e013      	b.n	80034ca <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	9300      	str	r3, [sp, #0]
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	2200      	movs	r2, #0
 80034aa:	2180      	movs	r1, #128	; 0x80
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f000 f996 	bl	80037de <UART_WaitOnFlagUntilTimeout>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d001      	beq.n	80034bc <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e023      	b.n	8003504 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	1c5a      	adds	r2, r3, #1
 80034c0:	60ba      	str	r2, [r7, #8]
 80034c2:	781a      	ldrb	r2, [r3, #0]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1b7      	bne.n	8003444 <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	9300      	str	r3, [sp, #0]
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	2200      	movs	r2, #0
 80034dc:	2140      	movs	r1, #64	; 0x40
 80034de:	68f8      	ldr	r0, [r7, #12]
 80034e0:	f000 f97d 	bl	80037de <UART_WaitOnFlagUntilTimeout>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e00a      	b.n	8003504 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2220      	movs	r2, #32
 80034f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80034fe:	2300      	movs	r3, #0
 8003500:	e000      	b.n	8003504 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003502:	2302      	movs	r3, #2
  }
}
 8003504:	4618      	mov	r0, r3
 8003506:	3718      	adds	r7, #24
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <HAL_UART_Receive_IT>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	4613      	mov	r3, r2
 8003518:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b20      	cmp	r3, #32
 8003524:	d140      	bne.n	80035a8 <HAL_UART_Receive_IT+0x9c>
  {
    if((pData == NULL) || (Size == 0U))
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d002      	beq.n	8003532 <HAL_UART_Receive_IT+0x26>
 800352c:	88fb      	ldrh	r3, [r7, #6]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e039      	b.n	80035aa <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800353c:	2b01      	cmp	r3, #1
 800353e:	d101      	bne.n	8003544 <HAL_UART_Receive_IT+0x38>
 8003540:	2302      	movs	r3, #2
 8003542:	e032      	b.n	80035aa <HAL_UART_Receive_IT+0x9e>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	68ba      	ldr	r2, [r7, #8]
 8003550:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	88fa      	ldrh	r2, [r7, #6]
 8003556:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	88fa      	ldrh	r2, [r7, #6]
 800355c:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2222      	movs	r2, #34	; 0x22
 8003568:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68da      	ldr	r2, [r3, #12]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003582:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	695a      	ldr	r2, [r3, #20]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f042 0201 	orr.w	r2, r2, #1
 8003592:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68da      	ldr	r2, [r3, #12]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f042 0220 	orr.w	r2, r2, #32
 80035a2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80035a4:	2300      	movs	r3, #0
 80035a6:	e000      	b.n	80035aa <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80035a8:	2302      	movs	r3, #2
  }
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3714      	adds	r7, #20
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bc80      	pop	{r7}
 80035b2:	4770      	bx	lr

080035b4 <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b088      	sub	sp, #32
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 80035d4:	2300      	movs	r3, #0
 80035d6:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 80035d8:	2300      	movs	r3, #0
 80035da:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	f003 030f 	and.w	r3, r3, #15
 80035e2:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10d      	bne.n	8003606 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	f003 0320 	and.w	r3, r3, #32
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d008      	beq.n	8003606 <HAL_UART_IRQHandler+0x52>
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	f003 0320 	and.w	r3, r3, #32
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d003      	beq.n	8003606 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 f9d5 	bl	80039ae <UART_Receive_IT>
      return;
 8003604:	e0cb      	b.n	800379e <HAL_UART_IRQHandler+0x1ea>
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	2b00      	cmp	r3, #0
 800360a:	f000 80ab 	beq.w	8003764 <HAL_UART_IRQHandler+0x1b0>
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	2b00      	cmp	r3, #0
 8003616:	d105      	bne.n	8003624 <HAL_UART_IRQHandler+0x70>
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800361e:	2b00      	cmp	r3, #0
 8003620:	f000 80a0 	beq.w	8003764 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00a      	beq.n	8003644 <HAL_UART_IRQHandler+0x90>
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003634:	2b00      	cmp	r3, #0
 8003636:	d005      	beq.n	8003644 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800363c:	f043 0201 	orr.w	r2, r3, #1
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	f003 0304 	and.w	r3, r3, #4
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00a      	beq.n	8003664 <HAL_UART_IRQHandler+0xb0>
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	2b00      	cmp	r3, #0
 8003656:	d005      	beq.n	8003664 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800365c:	f043 0202 	orr.w	r2, r3, #2
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00a      	beq.n	8003684 <HAL_UART_IRQHandler+0xd0>
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	f003 0301 	and.w	r3, r3, #1
 8003674:	2b00      	cmp	r3, #0
 8003676:	d005      	beq.n	8003684 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800367c:	f043 0204 	orr.w	r2, r3, #4
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	f003 0308 	and.w	r3, r3, #8
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00a      	beq.n	80036a4 <HAL_UART_IRQHandler+0xf0>
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	f003 0301 	and.w	r3, r3, #1
 8003694:	2b00      	cmp	r3, #0
 8003696:	d005      	beq.n	80036a4 <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800369c:	f043 0208 	orr.w	r2, r3, #8
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d077      	beq.n	800379c <HAL_UART_IRQHandler+0x1e8>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	f003 0320 	and.w	r3, r3, #32
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d007      	beq.n	80036c6 <HAL_UART_IRQHandler+0x112>
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	f003 0320 	and.w	r3, r3, #32
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d002      	beq.n	80036c6 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f000 f974 	bl	80039ae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	bf14      	ite	ne
 80036d4:	2301      	movne	r3, #1
 80036d6:	2300      	moveq	r3, #0
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e0:	f003 0308 	and.w	r3, r3, #8
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d102      	bne.n	80036ee <HAL_UART_IRQHandler+0x13a>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d031      	beq.n	8003752 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f8bf 	bl	8003872 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d023      	beq.n	800374a <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	695a      	ldr	r2, [r3, #20]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003710:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003716:	2b00      	cmp	r3, #0
 8003718:	d013      	beq.n	8003742 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800371e:	4a21      	ldr	r2, [pc, #132]	; (80037a4 <HAL_UART_IRQHandler+0x1f0>)
 8003720:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003726:	4618      	mov	r0, r3
 8003728:	f7fe fecc 	bl	80024c4 <HAL_DMA_Abort_IT>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d016      	beq.n	8003760 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800373c:	4610      	mov	r0, r2
 800373e:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003740:	e00e      	b.n	8003760 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 f842 	bl	80037cc <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003748:	e00a      	b.n	8003760 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f83e 	bl	80037cc <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003750:	e006      	b.n	8003760 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f83a 	bl	80037cc <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800375e:	e01d      	b.n	800379c <HAL_UART_IRQHandler+0x1e8>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003760:	bf00      	nop
    return;
 8003762:	e01b      	b.n	800379c <HAL_UART_IRQHandler+0x1e8>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800376a:	2b00      	cmp	r3, #0
 800376c:	d008      	beq.n	8003780 <HAL_UART_IRQHandler+0x1cc>
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003774:	2b00      	cmp	r3, #0
 8003776:	d003      	beq.n	8003780 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 f8ab 	bl	80038d4 <UART_Transmit_IT>
    return;
 800377e:	e00e      	b.n	800379e <HAL_UART_IRQHandler+0x1ea>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003786:	2b00      	cmp	r3, #0
 8003788:	d009      	beq.n	800379e <HAL_UART_IRQHandler+0x1ea>
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003790:	2b00      	cmp	r3, #0
 8003792:	d004      	beq.n	800379e <HAL_UART_IRQHandler+0x1ea>
  {
    UART_EndTransmit_IT(huart);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 f8f2 	bl	800397e <UART_EndTransmit_IT>
    return;
 800379a:	e000      	b.n	800379e <HAL_UART_IRQHandler+0x1ea>
    return;
 800379c:	bf00      	nop
  }
}
 800379e:	3720      	adds	r7, #32
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	080038ad 	.word	0x080038ad

080037a8 <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bc80      	pop	{r7}
 80037b8:	4770      	bx	lr

080037ba <HAL_UART_RxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80037ba:	b480      	push	{r7}
 80037bc:	b083      	sub	sp, #12
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80037c2:	bf00      	nop
 80037c4:	370c      	adds	r7, #12
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bc80      	pop	{r7}
 80037ca:	4770      	bx	lr

080037cc <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	bc80      	pop	{r7}
 80037dc:	4770      	bx	lr

080037de <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b084      	sub	sp, #16
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	60f8      	str	r0, [r7, #12]
 80037e6:	60b9      	str	r1, [r7, #8]
 80037e8:	603b      	str	r3, [r7, #0]
 80037ea:	4613      	mov	r3, r2
 80037ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80037ee:	e02c      	b.n	800384a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f6:	d028      	beq.n	800384a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d007      	beq.n	800380e <UART_WaitOnFlagUntilTimeout+0x30>
 80037fe:	f7fe fd29 	bl	8002254 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	429a      	cmp	r2, r3
 800380c:	d21d      	bcs.n	800384a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68da      	ldr	r2, [r3, #12]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800381c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	695a      	ldr	r2, [r3, #20]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 0201 	bic.w	r2, r2, #1
 800382c:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2220      	movs	r2, #32
 8003832:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2220      	movs	r2, #32
 800383a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e00f      	b.n	800386a <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	4013      	ands	r3, r2
 8003854:	68ba      	ldr	r2, [r7, #8]
 8003856:	429a      	cmp	r2, r3
 8003858:	bf0c      	ite	eq
 800385a:	2301      	moveq	r3, #1
 800385c:	2300      	movne	r3, #0
 800385e:	b2db      	uxtb	r3, r3
 8003860:	461a      	mov	r2, r3
 8003862:	79fb      	ldrb	r3, [r7, #7]
 8003864:	429a      	cmp	r2, r3
 8003866:	d0c3      	beq.n	80037f0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003872:	b480      	push	{r7}
 8003874:	b083      	sub	sp, #12
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68da      	ldr	r2, [r3, #12]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003888:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	695a      	ldr	r2, [r3, #20]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f022 0201 	bic.w	r2, r2, #1
 8003898:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2220      	movs	r2, #32
 800389e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80038a2:	bf00      	nop
 80038a4:	370c      	adds	r7, #12
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bc80      	pop	{r7}
 80038aa:	4770      	bx	lr

080038ac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f7ff ff80 	bl	80037cc <HAL_UART_ErrorCallback>
}
 80038cc:	bf00      	nop
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b21      	cmp	r3, #33	; 0x21
 80038e6:	d144      	bne.n	8003972 <UART_Transmit_IT+0x9e>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038f0:	d11a      	bne.n	8003928 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	881b      	ldrh	r3, [r3, #0]
 80038fc:	461a      	mov	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003906:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d105      	bne.n	800391c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	1c9a      	adds	r2, r3, #2
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	621a      	str	r2, [r3, #32]
 800391a:	e00e      	b.n	800393a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a1b      	ldr	r3, [r3, #32]
 8003920:	1c5a      	adds	r2, r3, #1
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	621a      	str	r2, [r3, #32]
 8003926:	e008      	b.n	800393a <UART_Transmit_IT+0x66>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a1b      	ldr	r3, [r3, #32]
 800392c:	1c59      	adds	r1, r3, #1
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	6211      	str	r1, [r2, #32]
 8003932:	781a      	ldrb	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800393e:	b29b      	uxth	r3, r3
 8003940:	3b01      	subs	r3, #1
 8003942:	b29b      	uxth	r3, r3
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	4619      	mov	r1, r3
 8003948:	84d1      	strh	r1, [r2, #38]	; 0x26
 800394a:	2b00      	cmp	r3, #0
 800394c:	d10f      	bne.n	800396e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68da      	ldr	r2, [r3, #12]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800395c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68da      	ldr	r2, [r3, #12]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800396c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800396e:	2300      	movs	r3, #0
 8003970:	e000      	b.n	8003974 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003972:	2302      	movs	r3, #2
  }
}
 8003974:	4618      	mov	r0, r3
 8003976:	3714      	adds	r7, #20
 8003978:	46bd      	mov	sp, r7
 800397a:	bc80      	pop	{r7}
 800397c:	4770      	bx	lr

0800397e <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b082      	sub	sp, #8
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68da      	ldr	r2, [r3, #12]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003994:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2220      	movs	r2, #32
 800399a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f7ff ff02 	bl	80037a8 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3708      	adds	r7, #8
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b084      	sub	sp, #16
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b22      	cmp	r3, #34	; 0x22
 80039c0:	d171      	bne.n	8003aa6 <UART_Receive_IT+0xf8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ca:	d123      	bne.n	8003a14 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d0:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d10e      	bne.n	80039f8 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039e6:	b29a      	uxth	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f0:	1c9a      	adds	r2, r3, #2
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	629a      	str	r2, [r3, #40]	; 0x28
 80039f6:	e029      	b.n	8003a4c <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a0c:	1c5a      	adds	r2, r3, #1
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	629a      	str	r2, [r3, #40]	; 0x28
 8003a12:	e01b      	b.n	8003a4c <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	691b      	ldr	r3, [r3, #16]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d10a      	bne.n	8003a32 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	6858      	ldr	r0, [r3, #4]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a26:	1c59      	adds	r1, r3, #1
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	6291      	str	r1, [r2, #40]	; 0x28
 8003a2c:	b2c2      	uxtb	r2, r0
 8003a2e:	701a      	strb	r2, [r3, #0]
 8003a30:	e00c      	b.n	8003a4c <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	b2da      	uxtb	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a3e:	1c58      	adds	r0, r3, #1
 8003a40:	6879      	ldr	r1, [r7, #4]
 8003a42:	6288      	str	r0, [r1, #40]	; 0x28
 8003a44:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a48:	b2d2      	uxtb	r2, r2
 8003a4a:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	3b01      	subs	r3, #1
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	4619      	mov	r1, r3
 8003a5a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d120      	bne.n	8003aa2 <UART_Receive_IT+0xf4>
    {
      /* Disable the IRDA Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68da      	ldr	r2, [r3, #12]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 0220 	bic.w	r2, r2, #32
 8003a6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68da      	ldr	r2, [r3, #12]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a7e:	60da      	str	r2, [r3, #12]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	695a      	ldr	r2, [r3, #20]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f022 0201 	bic.w	r2, r2, #1
 8003a8e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2220      	movs	r2, #32
 8003a94:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      HAL_UART_RxCpltCallback(huart);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f7ff fe8e 	bl	80037ba <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	e002      	b.n	8003aa8 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	e000      	b.n	8003aa8 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003aa6:	2302      	movs	r3, #2
  }
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3710      	adds	r7, #16
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ab0:	b5b0      	push	{r4, r5, r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	68da      	ldr	r2, [r3, #12]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	689a      	ldr	r2, [r3, #8]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	431a      	orrs	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	695b      	ldr	r3, [r3, #20]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003af2:	f023 030c 	bic.w	r3, r3, #12
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	6812      	ldr	r2, [r2, #0]
 8003afa:	68f9      	ldr	r1, [r7, #12]
 8003afc:	430b      	orrs	r3, r1
 8003afe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	699a      	ldr	r2, [r3, #24]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	430a      	orrs	r2, r1
 8003b14:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a6f      	ldr	r2, [pc, #444]	; (8003cd8 <UART_SetConfig+0x228>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d16b      	bne.n	8003bf8 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003b20:	f7ff fb96 	bl	8003250 <HAL_RCC_GetPCLK2Freq>
 8003b24:	4602      	mov	r2, r0
 8003b26:	4613      	mov	r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	4413      	add	r3, r2
 8003b2c:	009a      	lsls	r2, r3, #2
 8003b2e:	441a      	add	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b3a:	4a68      	ldr	r2, [pc, #416]	; (8003cdc <UART_SetConfig+0x22c>)
 8003b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b40:	095b      	lsrs	r3, r3, #5
 8003b42:	011c      	lsls	r4, r3, #4
 8003b44:	f7ff fb84 	bl	8003250 <HAL_RCC_GetPCLK2Freq>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	4413      	add	r3, r2
 8003b50:	009a      	lsls	r2, r3, #2
 8003b52:	441a      	add	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	fbb2 f5f3 	udiv	r5, r2, r3
 8003b5e:	f7ff fb77 	bl	8003250 <HAL_RCC_GetPCLK2Freq>
 8003b62:	4602      	mov	r2, r0
 8003b64:	4613      	mov	r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	4413      	add	r3, r2
 8003b6a:	009a      	lsls	r2, r3, #2
 8003b6c:	441a      	add	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b78:	4a58      	ldr	r2, [pc, #352]	; (8003cdc <UART_SetConfig+0x22c>)
 8003b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b7e:	095b      	lsrs	r3, r3, #5
 8003b80:	2264      	movs	r2, #100	; 0x64
 8003b82:	fb02 f303 	mul.w	r3, r2, r3
 8003b86:	1aeb      	subs	r3, r5, r3
 8003b88:	011b      	lsls	r3, r3, #4
 8003b8a:	3332      	adds	r3, #50	; 0x32
 8003b8c:	4a53      	ldr	r2, [pc, #332]	; (8003cdc <UART_SetConfig+0x22c>)
 8003b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b92:	095b      	lsrs	r3, r3, #5
 8003b94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b98:	441c      	add	r4, r3
 8003b9a:	f7ff fb59 	bl	8003250 <HAL_RCC_GetPCLK2Freq>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	4413      	add	r3, r2
 8003ba6:	009a      	lsls	r2, r3, #2
 8003ba8:	441a      	add	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	fbb2 f5f3 	udiv	r5, r2, r3
 8003bb4:	f7ff fb4c 	bl	8003250 <HAL_RCC_GetPCLK2Freq>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	4613      	mov	r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	4413      	add	r3, r2
 8003bc0:	009a      	lsls	r2, r3, #2
 8003bc2:	441a      	add	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bce:	4a43      	ldr	r2, [pc, #268]	; (8003cdc <UART_SetConfig+0x22c>)
 8003bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd4:	095b      	lsrs	r3, r3, #5
 8003bd6:	2264      	movs	r2, #100	; 0x64
 8003bd8:	fb02 f303 	mul.w	r3, r2, r3
 8003bdc:	1aeb      	subs	r3, r5, r3
 8003bde:	011b      	lsls	r3, r3, #4
 8003be0:	3332      	adds	r3, #50	; 0x32
 8003be2:	4a3e      	ldr	r2, [pc, #248]	; (8003cdc <UART_SetConfig+0x22c>)
 8003be4:	fba2 2303 	umull	r2, r3, r2, r3
 8003be8:	095b      	lsrs	r3, r3, #5
 8003bea:	f003 020f 	and.w	r2, r3, #15
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4422      	add	r2, r4
 8003bf4:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003bf6:	e06a      	b.n	8003cce <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003bf8:	f7ff fb16 	bl	8003228 <HAL_RCC_GetPCLK1Freq>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	4613      	mov	r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	4413      	add	r3, r2
 8003c04:	009a      	lsls	r2, r3, #2
 8003c06:	441a      	add	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c12:	4a32      	ldr	r2, [pc, #200]	; (8003cdc <UART_SetConfig+0x22c>)
 8003c14:	fba2 2303 	umull	r2, r3, r2, r3
 8003c18:	095b      	lsrs	r3, r3, #5
 8003c1a:	011c      	lsls	r4, r3, #4
 8003c1c:	f7ff fb04 	bl	8003228 <HAL_RCC_GetPCLK1Freq>
 8003c20:	4602      	mov	r2, r0
 8003c22:	4613      	mov	r3, r2
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	4413      	add	r3, r2
 8003c28:	009a      	lsls	r2, r3, #2
 8003c2a:	441a      	add	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	fbb2 f5f3 	udiv	r5, r2, r3
 8003c36:	f7ff faf7 	bl	8003228 <HAL_RCC_GetPCLK1Freq>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	4413      	add	r3, r2
 8003c42:	009a      	lsls	r2, r3, #2
 8003c44:	441a      	add	r2, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c50:	4a22      	ldr	r2, [pc, #136]	; (8003cdc <UART_SetConfig+0x22c>)
 8003c52:	fba2 2303 	umull	r2, r3, r2, r3
 8003c56:	095b      	lsrs	r3, r3, #5
 8003c58:	2264      	movs	r2, #100	; 0x64
 8003c5a:	fb02 f303 	mul.w	r3, r2, r3
 8003c5e:	1aeb      	subs	r3, r5, r3
 8003c60:	011b      	lsls	r3, r3, #4
 8003c62:	3332      	adds	r3, #50	; 0x32
 8003c64:	4a1d      	ldr	r2, [pc, #116]	; (8003cdc <UART_SetConfig+0x22c>)
 8003c66:	fba2 2303 	umull	r2, r3, r2, r3
 8003c6a:	095b      	lsrs	r3, r3, #5
 8003c6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c70:	441c      	add	r4, r3
 8003c72:	f7ff fad9 	bl	8003228 <HAL_RCC_GetPCLK1Freq>
 8003c76:	4602      	mov	r2, r0
 8003c78:	4613      	mov	r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	4413      	add	r3, r2
 8003c7e:	009a      	lsls	r2, r3, #2
 8003c80:	441a      	add	r2, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	fbb2 f5f3 	udiv	r5, r2, r3
 8003c8c:	f7ff facc 	bl	8003228 <HAL_RCC_GetPCLK1Freq>
 8003c90:	4602      	mov	r2, r0
 8003c92:	4613      	mov	r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	4413      	add	r3, r2
 8003c98:	009a      	lsls	r2, r3, #2
 8003c9a:	441a      	add	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca6:	4a0d      	ldr	r2, [pc, #52]	; (8003cdc <UART_SetConfig+0x22c>)
 8003ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cac:	095b      	lsrs	r3, r3, #5
 8003cae:	2264      	movs	r2, #100	; 0x64
 8003cb0:	fb02 f303 	mul.w	r3, r2, r3
 8003cb4:	1aeb      	subs	r3, r5, r3
 8003cb6:	011b      	lsls	r3, r3, #4
 8003cb8:	3332      	adds	r3, #50	; 0x32
 8003cba:	4a08      	ldr	r2, [pc, #32]	; (8003cdc <UART_SetConfig+0x22c>)
 8003cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc0:	095b      	lsrs	r3, r3, #5
 8003cc2:	f003 020f 	and.w	r2, r3, #15
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4422      	add	r2, r4
 8003ccc:	609a      	str	r2, [r3, #8]
}
 8003cce:	bf00      	nop
 8003cd0:	3710      	adds	r7, #16
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bdb0      	pop	{r4, r5, r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	40013800 	.word	0x40013800
 8003cdc:	51eb851f 	.word	0x51eb851f

08003ce0 <FSMC_NORSRAM_Init>:
  * @param  Device: Pointer to NORSRAM device instance
  * @param  Init: Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef *Init)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_EXTENDED_MODE(Init->ExtendedMode));
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cf4:	683a      	ldr	r2, [r7, #0]
 8003cf6:	6812      	ldr	r2, [r2, #0]
 8003cf8:	f023 0101 	bic.w	r1, r3, #1
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	2b08      	cmp	r3, #8
 8003d08:	d132      	bne.n	8003d70 <FSMC_NORSRAM_Init+0x90>
  {
    MODIFY_REG(Device->BTCR[Init->NSBank], BCR_CLEAR_MASK, (uint32_t)(FSMC_NORSRAM_FLASH_ACCESS_ENABLE
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003d14:	4b31      	ldr	r3, [pc, #196]	; (8003ddc <FSMC_NORSRAM_Init+0xfc>)
 8003d16:	4013      	ands	r3, r2
 8003d18:	683a      	ldr	r2, [r7, #0]
 8003d1a:	6851      	ldr	r1, [r2, #4]
 8003d1c:	683a      	ldr	r2, [r7, #0]
 8003d1e:	6892      	ldr	r2, [r2, #8]
 8003d20:	4311      	orrs	r1, r2
 8003d22:	683a      	ldr	r2, [r7, #0]
 8003d24:	68d2      	ldr	r2, [r2, #12]
 8003d26:	4311      	orrs	r1, r2
 8003d28:	683a      	ldr	r2, [r7, #0]
 8003d2a:	6912      	ldr	r2, [r2, #16]
 8003d2c:	4311      	orrs	r1, r2
 8003d2e:	683a      	ldr	r2, [r7, #0]
 8003d30:	6952      	ldr	r2, [r2, #20]
 8003d32:	4311      	orrs	r1, r2
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	6992      	ldr	r2, [r2, #24]
 8003d38:	4311      	orrs	r1, r2
 8003d3a:	683a      	ldr	r2, [r7, #0]
 8003d3c:	69d2      	ldr	r2, [r2, #28]
 8003d3e:	4311      	orrs	r1, r2
 8003d40:	683a      	ldr	r2, [r7, #0]
 8003d42:	6a12      	ldr	r2, [r2, #32]
 8003d44:	4311      	orrs	r1, r2
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d4a:	4311      	orrs	r1, r2
 8003d4c:	683a      	ldr	r2, [r7, #0]
 8003d4e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003d50:	4311      	orrs	r1, r2
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003d56:	4311      	orrs	r1, r2
 8003d58:	683a      	ldr	r2, [r7, #0]
 8003d5a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	683a      	ldr	r2, [r7, #0]
 8003d62:	6812      	ldr	r2, [r2, #0]
 8003d64:	f043 0140 	orr.w	r1, r3, #64	; 0x40
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003d6e:	e02f      	b.n	8003dd0 <FSMC_NORSRAM_Init+0xf0>
                                                                     )
              );
  }
  else
  {
    MODIFY_REG(Device->BTCR[Init->NSBank], BCR_CLEAR_MASK, (uint32_t)(FSMC_NORSRAM_FLASH_ACCESS_DISABLE
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003d7a:	4b18      	ldr	r3, [pc, #96]	; (8003ddc <FSMC_NORSRAM_Init+0xfc>)
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	683a      	ldr	r2, [r7, #0]
 8003d80:	6851      	ldr	r1, [r2, #4]
 8003d82:	683a      	ldr	r2, [r7, #0]
 8003d84:	6892      	ldr	r2, [r2, #8]
 8003d86:	4311      	orrs	r1, r2
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	68d2      	ldr	r2, [r2, #12]
 8003d8c:	4311      	orrs	r1, r2
 8003d8e:	683a      	ldr	r2, [r7, #0]
 8003d90:	6912      	ldr	r2, [r2, #16]
 8003d92:	4311      	orrs	r1, r2
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	6952      	ldr	r2, [r2, #20]
 8003d98:	4311      	orrs	r1, r2
 8003d9a:	683a      	ldr	r2, [r7, #0]
 8003d9c:	6992      	ldr	r2, [r2, #24]
 8003d9e:	4311      	orrs	r1, r2
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	69d2      	ldr	r2, [r2, #28]
 8003da4:	4311      	orrs	r1, r2
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	6a12      	ldr	r2, [r2, #32]
 8003daa:	4311      	orrs	r1, r2
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003db0:	4311      	orrs	r1, r2
 8003db2:	683a      	ldr	r2, [r7, #0]
 8003db4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003db6:	4311      	orrs	r1, r2
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003dbc:	4311      	orrs	r1, r2
 8003dbe:	683a      	ldr	r2, [r7, #0]
 8003dc0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003dc2:	4311      	orrs	r1, r2
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	6812      	ldr	r2, [r2, #0]
 8003dc8:	4319      	orrs	r1, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
               | Init->WriteBurst
                                                                     )
              );
  }

  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bc80      	pop	{r7}
 8003dda:	4770      	bx	lr
 8003ddc:	fff70081 	.word	0xfff70081

08003de0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing: Pointer to NORSRAM Timing structure
  * @param  Bank: NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b085      	sub	sp, #20
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U],                                                        \
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	1c5a      	adds	r2, r3, #1
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003df6:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	011b      	lsls	r3, r3, #4
 8003e04:	431a      	orrs	r2, r3
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	021b      	lsls	r3, r3, #8
 8003e0c:	431a      	orrs	r2, r3
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	041b      	lsls	r3, r3, #16
 8003e14:	431a      	orrs	r2, r3
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	051b      	lsls	r3, r3, #20
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	695b      	ldr	r3, [r3, #20]
 8003e24:	3b02      	subs	r3, #2
 8003e26:	061b      	lsls	r3, r3, #24
 8003e28:	431a      	orrs	r2, r3
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	3201      	adds	r2, #1
 8003e34:	4319      	orrs	r1, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                        ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos)       | \
                        (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)        | \
                        (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)        | \
                        (Timing->AccessMode)));

  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3714      	adds	r7, #20
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bc80      	pop	{r7}
 8003e46:	4770      	bx	lr

08003e48 <FSMC_NORSRAM_Extended_Timing_Init>:
  *            @arg FSMC_EXTENDED_MODE_DISABLE
  *            @arg FSMC_EXTENDED_MODE_ENABLE
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]
 8003e54:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e5c:	d11d      	bne.n	8003e9a <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(STM32F101xE) || defined(STM32F103xE) || defined(STM32F101xG) || defined(STM32F103xG)
    MODIFY_REG(Device->BWTR[Bank],                                                      \
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003e66:	4b13      	ldr	r3, [pc, #76]	; (8003eb4 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8003e68:	4013      	ands	r3, r2
 8003e6a:	68ba      	ldr	r2, [r7, #8]
 8003e6c:	6811      	ldr	r1, [r2, #0]
 8003e6e:	68ba      	ldr	r2, [r7, #8]
 8003e70:	6852      	ldr	r2, [r2, #4]
 8003e72:	0112      	lsls	r2, r2, #4
 8003e74:	4311      	orrs	r1, r2
 8003e76:	68ba      	ldr	r2, [r7, #8]
 8003e78:	6892      	ldr	r2, [r2, #8]
 8003e7a:	0212      	lsls	r2, r2, #8
 8003e7c:	4311      	orrs	r1, r2
 8003e7e:	68ba      	ldr	r2, [r7, #8]
 8003e80:	6992      	ldr	r2, [r2, #24]
 8003e82:	4311      	orrs	r1, r2
 8003e84:	68ba      	ldr	r2, [r7, #8]
 8003e86:	68d2      	ldr	r2, [r2, #12]
 8003e88:	0412      	lsls	r2, r2, #16
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	ea43 0102 	orr.w	r1, r3, r2
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003e98:	e005      	b.n	8003ea6 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                          (((Timing->DataLatency) - 2U)  << FSMC_BWTRx_DATLAT_Pos)));
#endif /* STM32F101xE || STM32F103xE || STM32F101xG || STM32F103xG */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8003ea2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3714      	adds	r7, #20
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bc80      	pop	{r7}
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	cff00000 	.word	0xcff00000

08003eb8 <__errno>:
 8003eb8:	4b01      	ldr	r3, [pc, #4]	; (8003ec0 <__errno+0x8>)
 8003eba:	6818      	ldr	r0, [r3, #0]
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	200000c0 	.word	0x200000c0

08003ec4 <__libc_init_array>:
 8003ec4:	b570      	push	{r4, r5, r6, lr}
 8003ec6:	2600      	movs	r6, #0
 8003ec8:	4d0c      	ldr	r5, [pc, #48]	; (8003efc <__libc_init_array+0x38>)
 8003eca:	4c0d      	ldr	r4, [pc, #52]	; (8003f00 <__libc_init_array+0x3c>)
 8003ecc:	1b64      	subs	r4, r4, r5
 8003ece:	10a4      	asrs	r4, r4, #2
 8003ed0:	42a6      	cmp	r6, r4
 8003ed2:	d109      	bne.n	8003ee8 <__libc_init_array+0x24>
 8003ed4:	f000 ff2a 	bl	8004d2c <_init>
 8003ed8:	2600      	movs	r6, #0
 8003eda:	4d0a      	ldr	r5, [pc, #40]	; (8003f04 <__libc_init_array+0x40>)
 8003edc:	4c0a      	ldr	r4, [pc, #40]	; (8003f08 <__libc_init_array+0x44>)
 8003ede:	1b64      	subs	r4, r4, r5
 8003ee0:	10a4      	asrs	r4, r4, #2
 8003ee2:	42a6      	cmp	r6, r4
 8003ee4:	d105      	bne.n	8003ef2 <__libc_init_array+0x2e>
 8003ee6:	bd70      	pop	{r4, r5, r6, pc}
 8003ee8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eec:	4798      	blx	r3
 8003eee:	3601      	adds	r6, #1
 8003ef0:	e7ee      	b.n	8003ed0 <__libc_init_array+0xc>
 8003ef2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ef6:	4798      	blx	r3
 8003ef8:	3601      	adds	r6, #1
 8003efa:	e7f2      	b.n	8003ee2 <__libc_init_array+0x1e>
 8003efc:	08005400 	.word	0x08005400
 8003f00:	08005400 	.word	0x08005400
 8003f04:	08005400 	.word	0x08005400
 8003f08:	08005404 	.word	0x08005404

08003f0c <memset>:
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	4402      	add	r2, r0
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d100      	bne.n	8003f16 <memset+0xa>
 8003f14:	4770      	bx	lr
 8003f16:	f803 1b01 	strb.w	r1, [r3], #1
 8003f1a:	e7f9      	b.n	8003f10 <memset+0x4>

08003f1c <pow>:
 8003f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f20:	4614      	mov	r4, r2
 8003f22:	461d      	mov	r5, r3
 8003f24:	4680      	mov	r8, r0
 8003f26:	4689      	mov	r9, r1
 8003f28:	f000 f886 	bl	8004038 <__ieee754_pow>
 8003f2c:	4622      	mov	r2, r4
 8003f2e:	4606      	mov	r6, r0
 8003f30:	460f      	mov	r7, r1
 8003f32:	462b      	mov	r3, r5
 8003f34:	4620      	mov	r0, r4
 8003f36:	4629      	mov	r1, r5
 8003f38:	f7fc fdcc 	bl	8000ad4 <__aeabi_dcmpun>
 8003f3c:	bbc8      	cbnz	r0, 8003fb2 <pow+0x96>
 8003f3e:	2200      	movs	r2, #0
 8003f40:	2300      	movs	r3, #0
 8003f42:	4640      	mov	r0, r8
 8003f44:	4649      	mov	r1, r9
 8003f46:	f7fc fd93 	bl	8000a70 <__aeabi_dcmpeq>
 8003f4a:	b1b8      	cbz	r0, 8003f7c <pow+0x60>
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	2300      	movs	r3, #0
 8003f50:	4620      	mov	r0, r4
 8003f52:	4629      	mov	r1, r5
 8003f54:	f7fc fd8c 	bl	8000a70 <__aeabi_dcmpeq>
 8003f58:	2800      	cmp	r0, #0
 8003f5a:	d141      	bne.n	8003fe0 <pow+0xc4>
 8003f5c:	4620      	mov	r0, r4
 8003f5e:	4629      	mov	r1, r5
 8003f60:	f000 fe5f 	bl	8004c22 <finite>
 8003f64:	b328      	cbz	r0, 8003fb2 <pow+0x96>
 8003f66:	2200      	movs	r2, #0
 8003f68:	2300      	movs	r3, #0
 8003f6a:	4620      	mov	r0, r4
 8003f6c:	4629      	mov	r1, r5
 8003f6e:	f7fc fd89 	bl	8000a84 <__aeabi_dcmplt>
 8003f72:	b1f0      	cbz	r0, 8003fb2 <pow+0x96>
 8003f74:	f7ff ffa0 	bl	8003eb8 <__errno>
 8003f78:	2322      	movs	r3, #34	; 0x22
 8003f7a:	e019      	b.n	8003fb0 <pow+0x94>
 8003f7c:	4630      	mov	r0, r6
 8003f7e:	4639      	mov	r1, r7
 8003f80:	f000 fe4f 	bl	8004c22 <finite>
 8003f84:	b9c8      	cbnz	r0, 8003fba <pow+0x9e>
 8003f86:	4640      	mov	r0, r8
 8003f88:	4649      	mov	r1, r9
 8003f8a:	f000 fe4a 	bl	8004c22 <finite>
 8003f8e:	b1a0      	cbz	r0, 8003fba <pow+0x9e>
 8003f90:	4620      	mov	r0, r4
 8003f92:	4629      	mov	r1, r5
 8003f94:	f000 fe45 	bl	8004c22 <finite>
 8003f98:	b178      	cbz	r0, 8003fba <pow+0x9e>
 8003f9a:	4632      	mov	r2, r6
 8003f9c:	463b      	mov	r3, r7
 8003f9e:	4630      	mov	r0, r6
 8003fa0:	4639      	mov	r1, r7
 8003fa2:	f7fc fd97 	bl	8000ad4 <__aeabi_dcmpun>
 8003fa6:	2800      	cmp	r0, #0
 8003fa8:	d0e4      	beq.n	8003f74 <pow+0x58>
 8003faa:	f7ff ff85 	bl	8003eb8 <__errno>
 8003fae:	2321      	movs	r3, #33	; 0x21
 8003fb0:	6003      	str	r3, [r0, #0]
 8003fb2:	4630      	mov	r0, r6
 8003fb4:	4639      	mov	r1, r7
 8003fb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003fba:	2200      	movs	r2, #0
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	4630      	mov	r0, r6
 8003fc0:	4639      	mov	r1, r7
 8003fc2:	f7fc fd55 	bl	8000a70 <__aeabi_dcmpeq>
 8003fc6:	2800      	cmp	r0, #0
 8003fc8:	d0f3      	beq.n	8003fb2 <pow+0x96>
 8003fca:	4640      	mov	r0, r8
 8003fcc:	4649      	mov	r1, r9
 8003fce:	f000 fe28 	bl	8004c22 <finite>
 8003fd2:	2800      	cmp	r0, #0
 8003fd4:	d0ed      	beq.n	8003fb2 <pow+0x96>
 8003fd6:	4620      	mov	r0, r4
 8003fd8:	4629      	mov	r1, r5
 8003fda:	f000 fe22 	bl	8004c22 <finite>
 8003fde:	e7c8      	b.n	8003f72 <pow+0x56>
 8003fe0:	2600      	movs	r6, #0
 8003fe2:	4f01      	ldr	r7, [pc, #4]	; (8003fe8 <pow+0xcc>)
 8003fe4:	e7e5      	b.n	8003fb2 <pow+0x96>
 8003fe6:	bf00      	nop
 8003fe8:	3ff00000 	.word	0x3ff00000

08003fec <sqrt>:
 8003fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fee:	4606      	mov	r6, r0
 8003ff0:	460f      	mov	r7, r1
 8003ff2:	f000 fd37 	bl	8004a64 <__ieee754_sqrt>
 8003ff6:	4632      	mov	r2, r6
 8003ff8:	4604      	mov	r4, r0
 8003ffa:	460d      	mov	r5, r1
 8003ffc:	463b      	mov	r3, r7
 8003ffe:	4630      	mov	r0, r6
 8004000:	4639      	mov	r1, r7
 8004002:	f7fc fd67 	bl	8000ad4 <__aeabi_dcmpun>
 8004006:	b990      	cbnz	r0, 800402e <sqrt+0x42>
 8004008:	2200      	movs	r2, #0
 800400a:	2300      	movs	r3, #0
 800400c:	4630      	mov	r0, r6
 800400e:	4639      	mov	r1, r7
 8004010:	f7fc fd38 	bl	8000a84 <__aeabi_dcmplt>
 8004014:	b158      	cbz	r0, 800402e <sqrt+0x42>
 8004016:	f7ff ff4f 	bl	8003eb8 <__errno>
 800401a:	2321      	movs	r3, #33	; 0x21
 800401c:	2200      	movs	r2, #0
 800401e:	6003      	str	r3, [r0, #0]
 8004020:	2300      	movs	r3, #0
 8004022:	4610      	mov	r0, r2
 8004024:	4619      	mov	r1, r3
 8004026:	f7fc fbe5 	bl	80007f4 <__aeabi_ddiv>
 800402a:	4604      	mov	r4, r0
 800402c:	460d      	mov	r5, r1
 800402e:	4620      	mov	r0, r4
 8004030:	4629      	mov	r1, r5
 8004032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004034:	0000      	movs	r0, r0
	...

08004038 <__ieee754_pow>:
 8004038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800403c:	b093      	sub	sp, #76	; 0x4c
 800403e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004042:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8004046:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800404a:	4689      	mov	r9, r1
 800404c:	ea56 0102 	orrs.w	r1, r6, r2
 8004050:	4680      	mov	r8, r0
 8004052:	d111      	bne.n	8004078 <__ieee754_pow+0x40>
 8004054:	1803      	adds	r3, r0, r0
 8004056:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800405a:	4152      	adcs	r2, r2
 800405c:	4299      	cmp	r1, r3
 800405e:	4b82      	ldr	r3, [pc, #520]	; (8004268 <__ieee754_pow+0x230>)
 8004060:	4193      	sbcs	r3, r2
 8004062:	f080 84b9 	bcs.w	80049d8 <__ieee754_pow+0x9a0>
 8004066:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800406a:	4640      	mov	r0, r8
 800406c:	4649      	mov	r1, r9
 800406e:	f7fc f8e1 	bl	8000234 <__adddf3>
 8004072:	4683      	mov	fp, r0
 8004074:	468c      	mov	ip, r1
 8004076:	e06f      	b.n	8004158 <__ieee754_pow+0x120>
 8004078:	4b7c      	ldr	r3, [pc, #496]	; (800426c <__ieee754_pow+0x234>)
 800407a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800407e:	429c      	cmp	r4, r3
 8004080:	464d      	mov	r5, r9
 8004082:	4682      	mov	sl, r0
 8004084:	dc06      	bgt.n	8004094 <__ieee754_pow+0x5c>
 8004086:	d101      	bne.n	800408c <__ieee754_pow+0x54>
 8004088:	2800      	cmp	r0, #0
 800408a:	d1ec      	bne.n	8004066 <__ieee754_pow+0x2e>
 800408c:	429e      	cmp	r6, r3
 800408e:	dc01      	bgt.n	8004094 <__ieee754_pow+0x5c>
 8004090:	d10f      	bne.n	80040b2 <__ieee754_pow+0x7a>
 8004092:	b172      	cbz	r2, 80040b2 <__ieee754_pow+0x7a>
 8004094:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8004098:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800409c:	ea55 050a 	orrs.w	r5, r5, sl
 80040a0:	d1e1      	bne.n	8004066 <__ieee754_pow+0x2e>
 80040a2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80040a6:	18db      	adds	r3, r3, r3
 80040a8:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80040ac:	4152      	adcs	r2, r2
 80040ae:	429d      	cmp	r5, r3
 80040b0:	e7d5      	b.n	800405e <__ieee754_pow+0x26>
 80040b2:	2d00      	cmp	r5, #0
 80040b4:	da39      	bge.n	800412a <__ieee754_pow+0xf2>
 80040b6:	4b6e      	ldr	r3, [pc, #440]	; (8004270 <__ieee754_pow+0x238>)
 80040b8:	429e      	cmp	r6, r3
 80040ba:	dc52      	bgt.n	8004162 <__ieee754_pow+0x12a>
 80040bc:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80040c0:	429e      	cmp	r6, r3
 80040c2:	f340 849c 	ble.w	80049fe <__ieee754_pow+0x9c6>
 80040c6:	1533      	asrs	r3, r6, #20
 80040c8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80040cc:	2b14      	cmp	r3, #20
 80040ce:	dd0f      	ble.n	80040f0 <__ieee754_pow+0xb8>
 80040d0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80040d4:	fa22 f103 	lsr.w	r1, r2, r3
 80040d8:	fa01 f303 	lsl.w	r3, r1, r3
 80040dc:	4293      	cmp	r3, r2
 80040de:	f040 848e 	bne.w	80049fe <__ieee754_pow+0x9c6>
 80040e2:	f001 0101 	and.w	r1, r1, #1
 80040e6:	f1c1 0302 	rsb	r3, r1, #2
 80040ea:	9300      	str	r3, [sp, #0]
 80040ec:	b182      	cbz	r2, 8004110 <__ieee754_pow+0xd8>
 80040ee:	e05d      	b.n	80041ac <__ieee754_pow+0x174>
 80040f0:	2a00      	cmp	r2, #0
 80040f2:	d159      	bne.n	80041a8 <__ieee754_pow+0x170>
 80040f4:	f1c3 0314 	rsb	r3, r3, #20
 80040f8:	fa46 f103 	asr.w	r1, r6, r3
 80040fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004100:	42b3      	cmp	r3, r6
 8004102:	f040 8479 	bne.w	80049f8 <__ieee754_pow+0x9c0>
 8004106:	f001 0101 	and.w	r1, r1, #1
 800410a:	f1c1 0302 	rsb	r3, r1, #2
 800410e:	9300      	str	r3, [sp, #0]
 8004110:	4b58      	ldr	r3, [pc, #352]	; (8004274 <__ieee754_pow+0x23c>)
 8004112:	429e      	cmp	r6, r3
 8004114:	d132      	bne.n	800417c <__ieee754_pow+0x144>
 8004116:	2f00      	cmp	r7, #0
 8004118:	f280 846a 	bge.w	80049f0 <__ieee754_pow+0x9b8>
 800411c:	4642      	mov	r2, r8
 800411e:	464b      	mov	r3, r9
 8004120:	2000      	movs	r0, #0
 8004122:	4954      	ldr	r1, [pc, #336]	; (8004274 <__ieee754_pow+0x23c>)
 8004124:	f7fc fb66 	bl	80007f4 <__aeabi_ddiv>
 8004128:	e7a3      	b.n	8004072 <__ieee754_pow+0x3a>
 800412a:	2300      	movs	r3, #0
 800412c:	9300      	str	r3, [sp, #0]
 800412e:	2a00      	cmp	r2, #0
 8004130:	d13c      	bne.n	80041ac <__ieee754_pow+0x174>
 8004132:	4b4e      	ldr	r3, [pc, #312]	; (800426c <__ieee754_pow+0x234>)
 8004134:	429e      	cmp	r6, r3
 8004136:	d1eb      	bne.n	8004110 <__ieee754_pow+0xd8>
 8004138:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800413c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8004140:	ea53 030a 	orrs.w	r3, r3, sl
 8004144:	f000 8448 	beq.w	80049d8 <__ieee754_pow+0x9a0>
 8004148:	4b4b      	ldr	r3, [pc, #300]	; (8004278 <__ieee754_pow+0x240>)
 800414a:	429c      	cmp	r4, r3
 800414c:	dd0b      	ble.n	8004166 <__ieee754_pow+0x12e>
 800414e:	2f00      	cmp	r7, #0
 8004150:	f2c0 8448 	blt.w	80049e4 <__ieee754_pow+0x9ac>
 8004154:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8004158:	4658      	mov	r0, fp
 800415a:	4661      	mov	r1, ip
 800415c:	b013      	add	sp, #76	; 0x4c
 800415e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004162:	2302      	movs	r3, #2
 8004164:	e7e2      	b.n	800412c <__ieee754_pow+0xf4>
 8004166:	2f00      	cmp	r7, #0
 8004168:	f04f 0b00 	mov.w	fp, #0
 800416c:	f04f 0c00 	mov.w	ip, #0
 8004170:	daf2      	bge.n	8004158 <__ieee754_pow+0x120>
 8004172:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8004176:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800417a:	e7ed      	b.n	8004158 <__ieee754_pow+0x120>
 800417c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8004180:	d106      	bne.n	8004190 <__ieee754_pow+0x158>
 8004182:	4642      	mov	r2, r8
 8004184:	464b      	mov	r3, r9
 8004186:	4640      	mov	r0, r8
 8004188:	4649      	mov	r1, r9
 800418a:	f7fc fa09 	bl	80005a0 <__aeabi_dmul>
 800418e:	e770      	b.n	8004072 <__ieee754_pow+0x3a>
 8004190:	4b3a      	ldr	r3, [pc, #232]	; (800427c <__ieee754_pow+0x244>)
 8004192:	429f      	cmp	r7, r3
 8004194:	d10a      	bne.n	80041ac <__ieee754_pow+0x174>
 8004196:	2d00      	cmp	r5, #0
 8004198:	db08      	blt.n	80041ac <__ieee754_pow+0x174>
 800419a:	4640      	mov	r0, r8
 800419c:	4649      	mov	r1, r9
 800419e:	b013      	add	sp, #76	; 0x4c
 80041a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041a4:	f000 bc5e 	b.w	8004a64 <__ieee754_sqrt>
 80041a8:	2300      	movs	r3, #0
 80041aa:	9300      	str	r3, [sp, #0]
 80041ac:	4640      	mov	r0, r8
 80041ae:	4649      	mov	r1, r9
 80041b0:	f000 fd34 	bl	8004c1c <fabs>
 80041b4:	4683      	mov	fp, r0
 80041b6:	468c      	mov	ip, r1
 80041b8:	f1ba 0f00 	cmp.w	sl, #0
 80041bc:	d128      	bne.n	8004210 <__ieee754_pow+0x1d8>
 80041be:	b124      	cbz	r4, 80041ca <__ieee754_pow+0x192>
 80041c0:	4b2c      	ldr	r3, [pc, #176]	; (8004274 <__ieee754_pow+0x23c>)
 80041c2:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d122      	bne.n	8004210 <__ieee754_pow+0x1d8>
 80041ca:	2f00      	cmp	r7, #0
 80041cc:	da07      	bge.n	80041de <__ieee754_pow+0x1a6>
 80041ce:	465a      	mov	r2, fp
 80041d0:	4663      	mov	r3, ip
 80041d2:	2000      	movs	r0, #0
 80041d4:	4927      	ldr	r1, [pc, #156]	; (8004274 <__ieee754_pow+0x23c>)
 80041d6:	f7fc fb0d 	bl	80007f4 <__aeabi_ddiv>
 80041da:	4683      	mov	fp, r0
 80041dc:	468c      	mov	ip, r1
 80041de:	2d00      	cmp	r5, #0
 80041e0:	daba      	bge.n	8004158 <__ieee754_pow+0x120>
 80041e2:	9b00      	ldr	r3, [sp, #0]
 80041e4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80041e8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80041ec:	4323      	orrs	r3, r4
 80041ee:	d108      	bne.n	8004202 <__ieee754_pow+0x1ca>
 80041f0:	465a      	mov	r2, fp
 80041f2:	4663      	mov	r3, ip
 80041f4:	4658      	mov	r0, fp
 80041f6:	4661      	mov	r1, ip
 80041f8:	f7fc f81a 	bl	8000230 <__aeabi_dsub>
 80041fc:	4602      	mov	r2, r0
 80041fe:	460b      	mov	r3, r1
 8004200:	e790      	b.n	8004124 <__ieee754_pow+0xec>
 8004202:	9b00      	ldr	r3, [sp, #0]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d1a7      	bne.n	8004158 <__ieee754_pow+0x120>
 8004208:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800420c:	469c      	mov	ip, r3
 800420e:	e7a3      	b.n	8004158 <__ieee754_pow+0x120>
 8004210:	0feb      	lsrs	r3, r5, #31
 8004212:	3b01      	subs	r3, #1
 8004214:	930c      	str	r3, [sp, #48]	; 0x30
 8004216:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004218:	9b00      	ldr	r3, [sp, #0]
 800421a:	4313      	orrs	r3, r2
 800421c:	d104      	bne.n	8004228 <__ieee754_pow+0x1f0>
 800421e:	4642      	mov	r2, r8
 8004220:	464b      	mov	r3, r9
 8004222:	4640      	mov	r0, r8
 8004224:	4649      	mov	r1, r9
 8004226:	e7e7      	b.n	80041f8 <__ieee754_pow+0x1c0>
 8004228:	4b15      	ldr	r3, [pc, #84]	; (8004280 <__ieee754_pow+0x248>)
 800422a:	429e      	cmp	r6, r3
 800422c:	f340 80f6 	ble.w	800441c <__ieee754_pow+0x3e4>
 8004230:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8004234:	429e      	cmp	r6, r3
 8004236:	4b10      	ldr	r3, [pc, #64]	; (8004278 <__ieee754_pow+0x240>)
 8004238:	dd09      	ble.n	800424e <__ieee754_pow+0x216>
 800423a:	429c      	cmp	r4, r3
 800423c:	dc0c      	bgt.n	8004258 <__ieee754_pow+0x220>
 800423e:	2f00      	cmp	r7, #0
 8004240:	da0c      	bge.n	800425c <__ieee754_pow+0x224>
 8004242:	2000      	movs	r0, #0
 8004244:	b013      	add	sp, #76	; 0x4c
 8004246:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800424a:	f000 bce2 	b.w	8004c12 <__math_oflow>
 800424e:	429c      	cmp	r4, r3
 8004250:	dbf5      	blt.n	800423e <__ieee754_pow+0x206>
 8004252:	4b08      	ldr	r3, [pc, #32]	; (8004274 <__ieee754_pow+0x23c>)
 8004254:	429c      	cmp	r4, r3
 8004256:	dd15      	ble.n	8004284 <__ieee754_pow+0x24c>
 8004258:	2f00      	cmp	r7, #0
 800425a:	dcf2      	bgt.n	8004242 <__ieee754_pow+0x20a>
 800425c:	2000      	movs	r0, #0
 800425e:	b013      	add	sp, #76	; 0x4c
 8004260:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004264:	f000 bcd0 	b.w	8004c08 <__math_uflow>
 8004268:	fff00000 	.word	0xfff00000
 800426c:	7ff00000 	.word	0x7ff00000
 8004270:	433fffff 	.word	0x433fffff
 8004274:	3ff00000 	.word	0x3ff00000
 8004278:	3fefffff 	.word	0x3fefffff
 800427c:	3fe00000 	.word	0x3fe00000
 8004280:	41e00000 	.word	0x41e00000
 8004284:	4661      	mov	r1, ip
 8004286:	2200      	movs	r2, #0
 8004288:	4658      	mov	r0, fp
 800428a:	4b5f      	ldr	r3, [pc, #380]	; (8004408 <__ieee754_pow+0x3d0>)
 800428c:	f7fb ffd0 	bl	8000230 <__aeabi_dsub>
 8004290:	a355      	add	r3, pc, #340	; (adr r3, 80043e8 <__ieee754_pow+0x3b0>)
 8004292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004296:	4604      	mov	r4, r0
 8004298:	460d      	mov	r5, r1
 800429a:	f7fc f981 	bl	80005a0 <__aeabi_dmul>
 800429e:	a354      	add	r3, pc, #336	; (adr r3, 80043f0 <__ieee754_pow+0x3b8>)
 80042a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a4:	4606      	mov	r6, r0
 80042a6:	460f      	mov	r7, r1
 80042a8:	4620      	mov	r0, r4
 80042aa:	4629      	mov	r1, r5
 80042ac:	f7fc f978 	bl	80005a0 <__aeabi_dmul>
 80042b0:	2200      	movs	r2, #0
 80042b2:	4682      	mov	sl, r0
 80042b4:	468b      	mov	fp, r1
 80042b6:	4620      	mov	r0, r4
 80042b8:	4629      	mov	r1, r5
 80042ba:	4b54      	ldr	r3, [pc, #336]	; (800440c <__ieee754_pow+0x3d4>)
 80042bc:	f7fc f970 	bl	80005a0 <__aeabi_dmul>
 80042c0:	4602      	mov	r2, r0
 80042c2:	460b      	mov	r3, r1
 80042c4:	a14c      	add	r1, pc, #304	; (adr r1, 80043f8 <__ieee754_pow+0x3c0>)
 80042c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80042ca:	f7fb ffb1 	bl	8000230 <__aeabi_dsub>
 80042ce:	4622      	mov	r2, r4
 80042d0:	462b      	mov	r3, r5
 80042d2:	f7fc f965 	bl	80005a0 <__aeabi_dmul>
 80042d6:	4602      	mov	r2, r0
 80042d8:	460b      	mov	r3, r1
 80042da:	2000      	movs	r0, #0
 80042dc:	494c      	ldr	r1, [pc, #304]	; (8004410 <__ieee754_pow+0x3d8>)
 80042de:	f7fb ffa7 	bl	8000230 <__aeabi_dsub>
 80042e2:	4622      	mov	r2, r4
 80042e4:	462b      	mov	r3, r5
 80042e6:	4680      	mov	r8, r0
 80042e8:	4689      	mov	r9, r1
 80042ea:	4620      	mov	r0, r4
 80042ec:	4629      	mov	r1, r5
 80042ee:	f7fc f957 	bl	80005a0 <__aeabi_dmul>
 80042f2:	4602      	mov	r2, r0
 80042f4:	460b      	mov	r3, r1
 80042f6:	4640      	mov	r0, r8
 80042f8:	4649      	mov	r1, r9
 80042fa:	f7fc f951 	bl	80005a0 <__aeabi_dmul>
 80042fe:	a340      	add	r3, pc, #256	; (adr r3, 8004400 <__ieee754_pow+0x3c8>)
 8004300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004304:	f7fc f94c 	bl	80005a0 <__aeabi_dmul>
 8004308:	4602      	mov	r2, r0
 800430a:	460b      	mov	r3, r1
 800430c:	4650      	mov	r0, sl
 800430e:	4659      	mov	r1, fp
 8004310:	f7fb ff8e 	bl	8000230 <__aeabi_dsub>
 8004314:	f04f 0a00 	mov.w	sl, #0
 8004318:	4602      	mov	r2, r0
 800431a:	460b      	mov	r3, r1
 800431c:	4604      	mov	r4, r0
 800431e:	460d      	mov	r5, r1
 8004320:	4630      	mov	r0, r6
 8004322:	4639      	mov	r1, r7
 8004324:	f7fb ff86 	bl	8000234 <__adddf3>
 8004328:	4632      	mov	r2, r6
 800432a:	463b      	mov	r3, r7
 800432c:	4650      	mov	r0, sl
 800432e:	468b      	mov	fp, r1
 8004330:	f7fb ff7e 	bl	8000230 <__aeabi_dsub>
 8004334:	4602      	mov	r2, r0
 8004336:	460b      	mov	r3, r1
 8004338:	4620      	mov	r0, r4
 800433a:	4629      	mov	r1, r5
 800433c:	f7fb ff78 	bl	8000230 <__aeabi_dsub>
 8004340:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004344:	9b00      	ldr	r3, [sp, #0]
 8004346:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004348:	3b01      	subs	r3, #1
 800434a:	4313      	orrs	r3, r2
 800434c:	f04f 0600 	mov.w	r6, #0
 8004350:	f04f 0200 	mov.w	r2, #0
 8004354:	bf0c      	ite	eq
 8004356:	4b2f      	ldreq	r3, [pc, #188]	; (8004414 <__ieee754_pow+0x3dc>)
 8004358:	4b2b      	ldrne	r3, [pc, #172]	; (8004408 <__ieee754_pow+0x3d0>)
 800435a:	4604      	mov	r4, r0
 800435c:	460d      	mov	r5, r1
 800435e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004362:	e9cd 2300 	strd	r2, r3, [sp]
 8004366:	4632      	mov	r2, r6
 8004368:	463b      	mov	r3, r7
 800436a:	f7fb ff61 	bl	8000230 <__aeabi_dsub>
 800436e:	4652      	mov	r2, sl
 8004370:	465b      	mov	r3, fp
 8004372:	f7fc f915 	bl	80005a0 <__aeabi_dmul>
 8004376:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800437a:	4680      	mov	r8, r0
 800437c:	4689      	mov	r9, r1
 800437e:	4620      	mov	r0, r4
 8004380:	4629      	mov	r1, r5
 8004382:	f7fc f90d 	bl	80005a0 <__aeabi_dmul>
 8004386:	4602      	mov	r2, r0
 8004388:	460b      	mov	r3, r1
 800438a:	4640      	mov	r0, r8
 800438c:	4649      	mov	r1, r9
 800438e:	f7fb ff51 	bl	8000234 <__adddf3>
 8004392:	4632      	mov	r2, r6
 8004394:	463b      	mov	r3, r7
 8004396:	4680      	mov	r8, r0
 8004398:	4689      	mov	r9, r1
 800439a:	4650      	mov	r0, sl
 800439c:	4659      	mov	r1, fp
 800439e:	f7fc f8ff 	bl	80005a0 <__aeabi_dmul>
 80043a2:	4604      	mov	r4, r0
 80043a4:	460d      	mov	r5, r1
 80043a6:	460b      	mov	r3, r1
 80043a8:	4602      	mov	r2, r0
 80043aa:	4649      	mov	r1, r9
 80043ac:	4640      	mov	r0, r8
 80043ae:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80043b2:	f7fb ff3f 	bl	8000234 <__adddf3>
 80043b6:	4b18      	ldr	r3, [pc, #96]	; (8004418 <__ieee754_pow+0x3e0>)
 80043b8:	4682      	mov	sl, r0
 80043ba:	4299      	cmp	r1, r3
 80043bc:	460f      	mov	r7, r1
 80043be:	460e      	mov	r6, r1
 80043c0:	f340 82e5 	ble.w	800498e <__ieee754_pow+0x956>
 80043c4:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80043c8:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80043cc:	4303      	orrs	r3, r0
 80043ce:	f000 81df 	beq.w	8004790 <__ieee754_pow+0x758>
 80043d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80043d6:	2200      	movs	r2, #0
 80043d8:	2300      	movs	r3, #0
 80043da:	f7fc fb53 	bl	8000a84 <__aeabi_dcmplt>
 80043de:	3800      	subs	r0, #0
 80043e0:	bf18      	it	ne
 80043e2:	2001      	movne	r0, #1
 80043e4:	e72e      	b.n	8004244 <__ieee754_pow+0x20c>
 80043e6:	bf00      	nop
 80043e8:	60000000 	.word	0x60000000
 80043ec:	3ff71547 	.word	0x3ff71547
 80043f0:	f85ddf44 	.word	0xf85ddf44
 80043f4:	3e54ae0b 	.word	0x3e54ae0b
 80043f8:	55555555 	.word	0x55555555
 80043fc:	3fd55555 	.word	0x3fd55555
 8004400:	652b82fe 	.word	0x652b82fe
 8004404:	3ff71547 	.word	0x3ff71547
 8004408:	3ff00000 	.word	0x3ff00000
 800440c:	3fd00000 	.word	0x3fd00000
 8004410:	3fe00000 	.word	0x3fe00000
 8004414:	bff00000 	.word	0xbff00000
 8004418:	408fffff 	.word	0x408fffff
 800441c:	4bd2      	ldr	r3, [pc, #840]	; (8004768 <__ieee754_pow+0x730>)
 800441e:	2200      	movs	r2, #0
 8004420:	402b      	ands	r3, r5
 8004422:	b943      	cbnz	r3, 8004436 <__ieee754_pow+0x3fe>
 8004424:	4658      	mov	r0, fp
 8004426:	4661      	mov	r1, ip
 8004428:	4bd0      	ldr	r3, [pc, #832]	; (800476c <__ieee754_pow+0x734>)
 800442a:	f7fc f8b9 	bl	80005a0 <__aeabi_dmul>
 800442e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8004432:	4683      	mov	fp, r0
 8004434:	460c      	mov	r4, r1
 8004436:	1523      	asrs	r3, r4, #20
 8004438:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800443c:	4413      	add	r3, r2
 800443e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004440:	4bcb      	ldr	r3, [pc, #812]	; (8004770 <__ieee754_pow+0x738>)
 8004442:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004446:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800444a:	429c      	cmp	r4, r3
 800444c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004450:	dd08      	ble.n	8004464 <__ieee754_pow+0x42c>
 8004452:	4bc8      	ldr	r3, [pc, #800]	; (8004774 <__ieee754_pow+0x73c>)
 8004454:	429c      	cmp	r4, r3
 8004456:	f340 8199 	ble.w	800478c <__ieee754_pow+0x754>
 800445a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800445c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8004460:	3301      	adds	r3, #1
 8004462:	930b      	str	r3, [sp, #44]	; 0x2c
 8004464:	2600      	movs	r6, #0
 8004466:	00f3      	lsls	r3, r6, #3
 8004468:	930d      	str	r3, [sp, #52]	; 0x34
 800446a:	4bc3      	ldr	r3, [pc, #780]	; (8004778 <__ieee754_pow+0x740>)
 800446c:	4658      	mov	r0, fp
 800446e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004472:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004476:	4629      	mov	r1, r5
 8004478:	461a      	mov	r2, r3
 800447a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800447e:	4623      	mov	r3, r4
 8004480:	f7fb fed6 	bl	8000230 <__aeabi_dsub>
 8004484:	46da      	mov	sl, fp
 8004486:	462b      	mov	r3, r5
 8004488:	4652      	mov	r2, sl
 800448a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800448e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004492:	f7fb fecf 	bl	8000234 <__adddf3>
 8004496:	4602      	mov	r2, r0
 8004498:	460b      	mov	r3, r1
 800449a:	2000      	movs	r0, #0
 800449c:	49b7      	ldr	r1, [pc, #732]	; (800477c <__ieee754_pow+0x744>)
 800449e:	f7fc f9a9 	bl	80007f4 <__aeabi_ddiv>
 80044a2:	4602      	mov	r2, r0
 80044a4:	460b      	mov	r3, r1
 80044a6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80044aa:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80044ae:	f7fc f877 	bl	80005a0 <__aeabi_dmul>
 80044b2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80044b6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80044ba:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80044be:	2300      	movs	r3, #0
 80044c0:	2200      	movs	r2, #0
 80044c2:	46ab      	mov	fp, r5
 80044c4:	106d      	asrs	r5, r5, #1
 80044c6:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80044ca:	9304      	str	r3, [sp, #16]
 80044cc:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80044d0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80044d4:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 80044d8:	4640      	mov	r0, r8
 80044da:	4649      	mov	r1, r9
 80044dc:	4614      	mov	r4, r2
 80044de:	461d      	mov	r5, r3
 80044e0:	f7fc f85e 	bl	80005a0 <__aeabi_dmul>
 80044e4:	4602      	mov	r2, r0
 80044e6:	460b      	mov	r3, r1
 80044e8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80044ec:	f7fb fea0 	bl	8000230 <__aeabi_dsub>
 80044f0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80044f4:	4606      	mov	r6, r0
 80044f6:	460f      	mov	r7, r1
 80044f8:	4620      	mov	r0, r4
 80044fa:	4629      	mov	r1, r5
 80044fc:	f7fb fe98 	bl	8000230 <__aeabi_dsub>
 8004500:	4602      	mov	r2, r0
 8004502:	460b      	mov	r3, r1
 8004504:	4650      	mov	r0, sl
 8004506:	4659      	mov	r1, fp
 8004508:	f7fb fe92 	bl	8000230 <__aeabi_dsub>
 800450c:	4642      	mov	r2, r8
 800450e:	464b      	mov	r3, r9
 8004510:	f7fc f846 	bl	80005a0 <__aeabi_dmul>
 8004514:	4602      	mov	r2, r0
 8004516:	460b      	mov	r3, r1
 8004518:	4630      	mov	r0, r6
 800451a:	4639      	mov	r1, r7
 800451c:	f7fb fe88 	bl	8000230 <__aeabi_dsub>
 8004520:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004524:	f7fc f83c 	bl	80005a0 <__aeabi_dmul>
 8004528:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800452c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004530:	4610      	mov	r0, r2
 8004532:	4619      	mov	r1, r3
 8004534:	f7fc f834 	bl	80005a0 <__aeabi_dmul>
 8004538:	a379      	add	r3, pc, #484	; (adr r3, 8004720 <__ieee754_pow+0x6e8>)
 800453a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453e:	4604      	mov	r4, r0
 8004540:	460d      	mov	r5, r1
 8004542:	f7fc f82d 	bl	80005a0 <__aeabi_dmul>
 8004546:	a378      	add	r3, pc, #480	; (adr r3, 8004728 <__ieee754_pow+0x6f0>)
 8004548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800454c:	f7fb fe72 	bl	8000234 <__adddf3>
 8004550:	4622      	mov	r2, r4
 8004552:	462b      	mov	r3, r5
 8004554:	f7fc f824 	bl	80005a0 <__aeabi_dmul>
 8004558:	a375      	add	r3, pc, #468	; (adr r3, 8004730 <__ieee754_pow+0x6f8>)
 800455a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800455e:	f7fb fe69 	bl	8000234 <__adddf3>
 8004562:	4622      	mov	r2, r4
 8004564:	462b      	mov	r3, r5
 8004566:	f7fc f81b 	bl	80005a0 <__aeabi_dmul>
 800456a:	a373      	add	r3, pc, #460	; (adr r3, 8004738 <__ieee754_pow+0x700>)
 800456c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004570:	f7fb fe60 	bl	8000234 <__adddf3>
 8004574:	4622      	mov	r2, r4
 8004576:	462b      	mov	r3, r5
 8004578:	f7fc f812 	bl	80005a0 <__aeabi_dmul>
 800457c:	a370      	add	r3, pc, #448	; (adr r3, 8004740 <__ieee754_pow+0x708>)
 800457e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004582:	f7fb fe57 	bl	8000234 <__adddf3>
 8004586:	4622      	mov	r2, r4
 8004588:	462b      	mov	r3, r5
 800458a:	f7fc f809 	bl	80005a0 <__aeabi_dmul>
 800458e:	a36e      	add	r3, pc, #440	; (adr r3, 8004748 <__ieee754_pow+0x710>)
 8004590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004594:	f7fb fe4e 	bl	8000234 <__adddf3>
 8004598:	4622      	mov	r2, r4
 800459a:	4606      	mov	r6, r0
 800459c:	460f      	mov	r7, r1
 800459e:	462b      	mov	r3, r5
 80045a0:	4620      	mov	r0, r4
 80045a2:	4629      	mov	r1, r5
 80045a4:	f7fb fffc 	bl	80005a0 <__aeabi_dmul>
 80045a8:	4602      	mov	r2, r0
 80045aa:	460b      	mov	r3, r1
 80045ac:	4630      	mov	r0, r6
 80045ae:	4639      	mov	r1, r7
 80045b0:	f7fb fff6 	bl	80005a0 <__aeabi_dmul>
 80045b4:	4604      	mov	r4, r0
 80045b6:	460d      	mov	r5, r1
 80045b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80045bc:	4642      	mov	r2, r8
 80045be:	464b      	mov	r3, r9
 80045c0:	f7fb fe38 	bl	8000234 <__adddf3>
 80045c4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80045c8:	f7fb ffea 	bl	80005a0 <__aeabi_dmul>
 80045cc:	4622      	mov	r2, r4
 80045ce:	462b      	mov	r3, r5
 80045d0:	f7fb fe30 	bl	8000234 <__adddf3>
 80045d4:	4642      	mov	r2, r8
 80045d6:	4606      	mov	r6, r0
 80045d8:	460f      	mov	r7, r1
 80045da:	464b      	mov	r3, r9
 80045dc:	4640      	mov	r0, r8
 80045de:	4649      	mov	r1, r9
 80045e0:	f7fb ffde 	bl	80005a0 <__aeabi_dmul>
 80045e4:	2200      	movs	r2, #0
 80045e6:	4b66      	ldr	r3, [pc, #408]	; (8004780 <__ieee754_pow+0x748>)
 80045e8:	4682      	mov	sl, r0
 80045ea:	468b      	mov	fp, r1
 80045ec:	f7fb fe22 	bl	8000234 <__adddf3>
 80045f0:	4632      	mov	r2, r6
 80045f2:	463b      	mov	r3, r7
 80045f4:	f7fb fe1e 	bl	8000234 <__adddf3>
 80045f8:	2400      	movs	r4, #0
 80045fa:	460d      	mov	r5, r1
 80045fc:	4622      	mov	r2, r4
 80045fe:	460b      	mov	r3, r1
 8004600:	4640      	mov	r0, r8
 8004602:	4649      	mov	r1, r9
 8004604:	f7fb ffcc 	bl	80005a0 <__aeabi_dmul>
 8004608:	2200      	movs	r2, #0
 800460a:	4680      	mov	r8, r0
 800460c:	4689      	mov	r9, r1
 800460e:	4620      	mov	r0, r4
 8004610:	4629      	mov	r1, r5
 8004612:	4b5b      	ldr	r3, [pc, #364]	; (8004780 <__ieee754_pow+0x748>)
 8004614:	f7fb fe0c 	bl	8000230 <__aeabi_dsub>
 8004618:	4652      	mov	r2, sl
 800461a:	465b      	mov	r3, fp
 800461c:	f7fb fe08 	bl	8000230 <__aeabi_dsub>
 8004620:	4602      	mov	r2, r0
 8004622:	460b      	mov	r3, r1
 8004624:	4630      	mov	r0, r6
 8004626:	4639      	mov	r1, r7
 8004628:	f7fb fe02 	bl	8000230 <__aeabi_dsub>
 800462c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004630:	f7fb ffb6 	bl	80005a0 <__aeabi_dmul>
 8004634:	4622      	mov	r2, r4
 8004636:	4606      	mov	r6, r0
 8004638:	460f      	mov	r7, r1
 800463a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800463e:	462b      	mov	r3, r5
 8004640:	f7fb ffae 	bl	80005a0 <__aeabi_dmul>
 8004644:	4602      	mov	r2, r0
 8004646:	460b      	mov	r3, r1
 8004648:	4630      	mov	r0, r6
 800464a:	4639      	mov	r1, r7
 800464c:	f7fb fdf2 	bl	8000234 <__adddf3>
 8004650:	2400      	movs	r4, #0
 8004652:	4606      	mov	r6, r0
 8004654:	460f      	mov	r7, r1
 8004656:	4602      	mov	r2, r0
 8004658:	460b      	mov	r3, r1
 800465a:	4640      	mov	r0, r8
 800465c:	4649      	mov	r1, r9
 800465e:	f7fb fde9 	bl	8000234 <__adddf3>
 8004662:	a33b      	add	r3, pc, #236	; (adr r3, 8004750 <__ieee754_pow+0x718>)
 8004664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004668:	4620      	mov	r0, r4
 800466a:	460d      	mov	r5, r1
 800466c:	f7fb ff98 	bl	80005a0 <__aeabi_dmul>
 8004670:	4642      	mov	r2, r8
 8004672:	464b      	mov	r3, r9
 8004674:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004678:	4620      	mov	r0, r4
 800467a:	4629      	mov	r1, r5
 800467c:	f7fb fdd8 	bl	8000230 <__aeabi_dsub>
 8004680:	4602      	mov	r2, r0
 8004682:	460b      	mov	r3, r1
 8004684:	4630      	mov	r0, r6
 8004686:	4639      	mov	r1, r7
 8004688:	f7fb fdd2 	bl	8000230 <__aeabi_dsub>
 800468c:	a332      	add	r3, pc, #200	; (adr r3, 8004758 <__ieee754_pow+0x720>)
 800468e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004692:	f7fb ff85 	bl	80005a0 <__aeabi_dmul>
 8004696:	a332      	add	r3, pc, #200	; (adr r3, 8004760 <__ieee754_pow+0x728>)
 8004698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800469c:	4606      	mov	r6, r0
 800469e:	460f      	mov	r7, r1
 80046a0:	4620      	mov	r0, r4
 80046a2:	4629      	mov	r1, r5
 80046a4:	f7fb ff7c 	bl	80005a0 <__aeabi_dmul>
 80046a8:	4602      	mov	r2, r0
 80046aa:	460b      	mov	r3, r1
 80046ac:	4630      	mov	r0, r6
 80046ae:	4639      	mov	r1, r7
 80046b0:	f7fb fdc0 	bl	8000234 <__adddf3>
 80046b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80046b6:	4b33      	ldr	r3, [pc, #204]	; (8004784 <__ieee754_pow+0x74c>)
 80046b8:	f04f 0a00 	mov.w	sl, #0
 80046bc:	4413      	add	r3, r2
 80046be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c2:	f7fb fdb7 	bl	8000234 <__adddf3>
 80046c6:	4680      	mov	r8, r0
 80046c8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80046ca:	4689      	mov	r9, r1
 80046cc:	f7fb fefe 	bl	80004cc <__aeabi_i2d>
 80046d0:	4604      	mov	r4, r0
 80046d2:	460d      	mov	r5, r1
 80046d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80046d6:	4b2c      	ldr	r3, [pc, #176]	; (8004788 <__ieee754_pow+0x750>)
 80046d8:	4413      	add	r3, r2
 80046da:	e9d3 6700 	ldrd	r6, r7, [r3]
 80046de:	4642      	mov	r2, r8
 80046e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80046e4:	464b      	mov	r3, r9
 80046e6:	f7fb fda5 	bl	8000234 <__adddf3>
 80046ea:	4632      	mov	r2, r6
 80046ec:	463b      	mov	r3, r7
 80046ee:	f7fb fda1 	bl	8000234 <__adddf3>
 80046f2:	4622      	mov	r2, r4
 80046f4:	462b      	mov	r3, r5
 80046f6:	f7fb fd9d 	bl	8000234 <__adddf3>
 80046fa:	4622      	mov	r2, r4
 80046fc:	462b      	mov	r3, r5
 80046fe:	4650      	mov	r0, sl
 8004700:	468b      	mov	fp, r1
 8004702:	f7fb fd95 	bl	8000230 <__aeabi_dsub>
 8004706:	4632      	mov	r2, r6
 8004708:	463b      	mov	r3, r7
 800470a:	f7fb fd91 	bl	8000230 <__aeabi_dsub>
 800470e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004712:	f7fb fd8d 	bl	8000230 <__aeabi_dsub>
 8004716:	4602      	mov	r2, r0
 8004718:	460b      	mov	r3, r1
 800471a:	4640      	mov	r0, r8
 800471c:	4649      	mov	r1, r9
 800471e:	e60d      	b.n	800433c <__ieee754_pow+0x304>
 8004720:	4a454eef 	.word	0x4a454eef
 8004724:	3fca7e28 	.word	0x3fca7e28
 8004728:	93c9db65 	.word	0x93c9db65
 800472c:	3fcd864a 	.word	0x3fcd864a
 8004730:	a91d4101 	.word	0xa91d4101
 8004734:	3fd17460 	.word	0x3fd17460
 8004738:	518f264d 	.word	0x518f264d
 800473c:	3fd55555 	.word	0x3fd55555
 8004740:	db6fabff 	.word	0xdb6fabff
 8004744:	3fdb6db6 	.word	0x3fdb6db6
 8004748:	33333303 	.word	0x33333303
 800474c:	3fe33333 	.word	0x3fe33333
 8004750:	e0000000 	.word	0xe0000000
 8004754:	3feec709 	.word	0x3feec709
 8004758:	dc3a03fd 	.word	0xdc3a03fd
 800475c:	3feec709 	.word	0x3feec709
 8004760:	145b01f5 	.word	0x145b01f5
 8004764:	be3e2fe0 	.word	0xbe3e2fe0
 8004768:	7ff00000 	.word	0x7ff00000
 800476c:	43400000 	.word	0x43400000
 8004770:	0003988e 	.word	0x0003988e
 8004774:	000bb679 	.word	0x000bb679
 8004778:	080053d0 	.word	0x080053d0
 800477c:	3ff00000 	.word	0x3ff00000
 8004780:	40080000 	.word	0x40080000
 8004784:	080053f0 	.word	0x080053f0
 8004788:	080053e0 	.word	0x080053e0
 800478c:	2601      	movs	r6, #1
 800478e:	e66a      	b.n	8004466 <__ieee754_pow+0x42e>
 8004790:	a39d      	add	r3, pc, #628	; (adr r3, 8004a08 <__ieee754_pow+0x9d0>)
 8004792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004796:	4640      	mov	r0, r8
 8004798:	4649      	mov	r1, r9
 800479a:	f7fb fd4b 	bl	8000234 <__adddf3>
 800479e:	4622      	mov	r2, r4
 80047a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80047a4:	462b      	mov	r3, r5
 80047a6:	4650      	mov	r0, sl
 80047a8:	4639      	mov	r1, r7
 80047aa:	f7fb fd41 	bl	8000230 <__aeabi_dsub>
 80047ae:	4602      	mov	r2, r0
 80047b0:	460b      	mov	r3, r1
 80047b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80047b6:	f7fc f983 	bl	8000ac0 <__aeabi_dcmpgt>
 80047ba:	2800      	cmp	r0, #0
 80047bc:	f47f ae09 	bne.w	80043d2 <__ieee754_pow+0x39a>
 80047c0:	4aa3      	ldr	r2, [pc, #652]	; (8004a50 <__ieee754_pow+0xa18>)
 80047c2:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80047c6:	4293      	cmp	r3, r2
 80047c8:	f340 8101 	ble.w	80049ce <__ieee754_pow+0x996>
 80047cc:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80047d0:	2000      	movs	r0, #0
 80047d2:	151b      	asrs	r3, r3, #20
 80047d4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80047d8:	fa4a f303 	asr.w	r3, sl, r3
 80047dc:	4433      	add	r3, r6
 80047de:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80047e2:	4f9c      	ldr	r7, [pc, #624]	; (8004a54 <__ieee754_pow+0xa1c>)
 80047e4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80047e8:	4117      	asrs	r7, r2
 80047ea:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80047ee:	ea23 0107 	bic.w	r1, r3, r7
 80047f2:	f1c2 0214 	rsb	r2, r2, #20
 80047f6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80047fa:	460b      	mov	r3, r1
 80047fc:	fa4a fa02 	asr.w	sl, sl, r2
 8004800:	2e00      	cmp	r6, #0
 8004802:	4602      	mov	r2, r0
 8004804:	4629      	mov	r1, r5
 8004806:	4620      	mov	r0, r4
 8004808:	bfb8      	it	lt
 800480a:	f1ca 0a00 	rsblt	sl, sl, #0
 800480e:	f7fb fd0f 	bl	8000230 <__aeabi_dsub>
 8004812:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004816:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800481a:	2400      	movs	r4, #0
 800481c:	4642      	mov	r2, r8
 800481e:	464b      	mov	r3, r9
 8004820:	f7fb fd08 	bl	8000234 <__adddf3>
 8004824:	a37a      	add	r3, pc, #488	; (adr r3, 8004a10 <__ieee754_pow+0x9d8>)
 8004826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800482a:	4620      	mov	r0, r4
 800482c:	460d      	mov	r5, r1
 800482e:	f7fb feb7 	bl	80005a0 <__aeabi_dmul>
 8004832:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004836:	4606      	mov	r6, r0
 8004838:	460f      	mov	r7, r1
 800483a:	4620      	mov	r0, r4
 800483c:	4629      	mov	r1, r5
 800483e:	f7fb fcf7 	bl	8000230 <__aeabi_dsub>
 8004842:	4602      	mov	r2, r0
 8004844:	460b      	mov	r3, r1
 8004846:	4640      	mov	r0, r8
 8004848:	4649      	mov	r1, r9
 800484a:	f7fb fcf1 	bl	8000230 <__aeabi_dsub>
 800484e:	a372      	add	r3, pc, #456	; (adr r3, 8004a18 <__ieee754_pow+0x9e0>)
 8004850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004854:	f7fb fea4 	bl	80005a0 <__aeabi_dmul>
 8004858:	a371      	add	r3, pc, #452	; (adr r3, 8004a20 <__ieee754_pow+0x9e8>)
 800485a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800485e:	4680      	mov	r8, r0
 8004860:	4689      	mov	r9, r1
 8004862:	4620      	mov	r0, r4
 8004864:	4629      	mov	r1, r5
 8004866:	f7fb fe9b 	bl	80005a0 <__aeabi_dmul>
 800486a:	4602      	mov	r2, r0
 800486c:	460b      	mov	r3, r1
 800486e:	4640      	mov	r0, r8
 8004870:	4649      	mov	r1, r9
 8004872:	f7fb fcdf 	bl	8000234 <__adddf3>
 8004876:	4604      	mov	r4, r0
 8004878:	460d      	mov	r5, r1
 800487a:	4602      	mov	r2, r0
 800487c:	460b      	mov	r3, r1
 800487e:	4630      	mov	r0, r6
 8004880:	4639      	mov	r1, r7
 8004882:	f7fb fcd7 	bl	8000234 <__adddf3>
 8004886:	4632      	mov	r2, r6
 8004888:	463b      	mov	r3, r7
 800488a:	4680      	mov	r8, r0
 800488c:	4689      	mov	r9, r1
 800488e:	f7fb fccf 	bl	8000230 <__aeabi_dsub>
 8004892:	4602      	mov	r2, r0
 8004894:	460b      	mov	r3, r1
 8004896:	4620      	mov	r0, r4
 8004898:	4629      	mov	r1, r5
 800489a:	f7fb fcc9 	bl	8000230 <__aeabi_dsub>
 800489e:	4642      	mov	r2, r8
 80048a0:	4606      	mov	r6, r0
 80048a2:	460f      	mov	r7, r1
 80048a4:	464b      	mov	r3, r9
 80048a6:	4640      	mov	r0, r8
 80048a8:	4649      	mov	r1, r9
 80048aa:	f7fb fe79 	bl	80005a0 <__aeabi_dmul>
 80048ae:	a35e      	add	r3, pc, #376	; (adr r3, 8004a28 <__ieee754_pow+0x9f0>)
 80048b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b4:	4604      	mov	r4, r0
 80048b6:	460d      	mov	r5, r1
 80048b8:	f7fb fe72 	bl	80005a0 <__aeabi_dmul>
 80048bc:	a35c      	add	r3, pc, #368	; (adr r3, 8004a30 <__ieee754_pow+0x9f8>)
 80048be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c2:	f7fb fcb5 	bl	8000230 <__aeabi_dsub>
 80048c6:	4622      	mov	r2, r4
 80048c8:	462b      	mov	r3, r5
 80048ca:	f7fb fe69 	bl	80005a0 <__aeabi_dmul>
 80048ce:	a35a      	add	r3, pc, #360	; (adr r3, 8004a38 <__ieee754_pow+0xa00>)
 80048d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d4:	f7fb fcae 	bl	8000234 <__adddf3>
 80048d8:	4622      	mov	r2, r4
 80048da:	462b      	mov	r3, r5
 80048dc:	f7fb fe60 	bl	80005a0 <__aeabi_dmul>
 80048e0:	a357      	add	r3, pc, #348	; (adr r3, 8004a40 <__ieee754_pow+0xa08>)
 80048e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e6:	f7fb fca3 	bl	8000230 <__aeabi_dsub>
 80048ea:	4622      	mov	r2, r4
 80048ec:	462b      	mov	r3, r5
 80048ee:	f7fb fe57 	bl	80005a0 <__aeabi_dmul>
 80048f2:	a355      	add	r3, pc, #340	; (adr r3, 8004a48 <__ieee754_pow+0xa10>)
 80048f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f8:	f7fb fc9c 	bl	8000234 <__adddf3>
 80048fc:	4622      	mov	r2, r4
 80048fe:	462b      	mov	r3, r5
 8004900:	f7fb fe4e 	bl	80005a0 <__aeabi_dmul>
 8004904:	4602      	mov	r2, r0
 8004906:	460b      	mov	r3, r1
 8004908:	4640      	mov	r0, r8
 800490a:	4649      	mov	r1, r9
 800490c:	f7fb fc90 	bl	8000230 <__aeabi_dsub>
 8004910:	4604      	mov	r4, r0
 8004912:	460d      	mov	r5, r1
 8004914:	4602      	mov	r2, r0
 8004916:	460b      	mov	r3, r1
 8004918:	4640      	mov	r0, r8
 800491a:	4649      	mov	r1, r9
 800491c:	f7fb fe40 	bl	80005a0 <__aeabi_dmul>
 8004920:	2200      	movs	r2, #0
 8004922:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004926:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800492a:	4620      	mov	r0, r4
 800492c:	4629      	mov	r1, r5
 800492e:	f7fb fc7f 	bl	8000230 <__aeabi_dsub>
 8004932:	4602      	mov	r2, r0
 8004934:	460b      	mov	r3, r1
 8004936:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800493a:	f7fb ff5b 	bl	80007f4 <__aeabi_ddiv>
 800493e:	4632      	mov	r2, r6
 8004940:	4604      	mov	r4, r0
 8004942:	460d      	mov	r5, r1
 8004944:	463b      	mov	r3, r7
 8004946:	4640      	mov	r0, r8
 8004948:	4649      	mov	r1, r9
 800494a:	f7fb fe29 	bl	80005a0 <__aeabi_dmul>
 800494e:	4632      	mov	r2, r6
 8004950:	463b      	mov	r3, r7
 8004952:	f7fb fc6f 	bl	8000234 <__adddf3>
 8004956:	4602      	mov	r2, r0
 8004958:	460b      	mov	r3, r1
 800495a:	4620      	mov	r0, r4
 800495c:	4629      	mov	r1, r5
 800495e:	f7fb fc67 	bl	8000230 <__aeabi_dsub>
 8004962:	4642      	mov	r2, r8
 8004964:	464b      	mov	r3, r9
 8004966:	f7fb fc63 	bl	8000230 <__aeabi_dsub>
 800496a:	4602      	mov	r2, r0
 800496c:	460b      	mov	r3, r1
 800496e:	2000      	movs	r0, #0
 8004970:	4939      	ldr	r1, [pc, #228]	; (8004a58 <__ieee754_pow+0xa20>)
 8004972:	f7fb fc5d 	bl	8000230 <__aeabi_dsub>
 8004976:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800497a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800497e:	da29      	bge.n	80049d4 <__ieee754_pow+0x99c>
 8004980:	4652      	mov	r2, sl
 8004982:	f000 f955 	bl	8004c30 <scalbn>
 8004986:	e9dd 2300 	ldrd	r2, r3, [sp]
 800498a:	f7ff bbfe 	b.w	800418a <__ieee754_pow+0x152>
 800498e:	4b33      	ldr	r3, [pc, #204]	; (8004a5c <__ieee754_pow+0xa24>)
 8004990:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8004994:	429f      	cmp	r7, r3
 8004996:	f77f af13 	ble.w	80047c0 <__ieee754_pow+0x788>
 800499a:	4b31      	ldr	r3, [pc, #196]	; (8004a60 <__ieee754_pow+0xa28>)
 800499c:	440b      	add	r3, r1
 800499e:	4303      	orrs	r3, r0
 80049a0:	d009      	beq.n	80049b6 <__ieee754_pow+0x97e>
 80049a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80049a6:	2200      	movs	r2, #0
 80049a8:	2300      	movs	r3, #0
 80049aa:	f7fc f86b 	bl	8000a84 <__aeabi_dcmplt>
 80049ae:	3800      	subs	r0, #0
 80049b0:	bf18      	it	ne
 80049b2:	2001      	movne	r0, #1
 80049b4:	e453      	b.n	800425e <__ieee754_pow+0x226>
 80049b6:	4622      	mov	r2, r4
 80049b8:	462b      	mov	r3, r5
 80049ba:	f7fb fc39 	bl	8000230 <__aeabi_dsub>
 80049be:	4642      	mov	r2, r8
 80049c0:	464b      	mov	r3, r9
 80049c2:	f7fc f873 	bl	8000aac <__aeabi_dcmpge>
 80049c6:	2800      	cmp	r0, #0
 80049c8:	f43f aefa 	beq.w	80047c0 <__ieee754_pow+0x788>
 80049cc:	e7e9      	b.n	80049a2 <__ieee754_pow+0x96a>
 80049ce:	f04f 0a00 	mov.w	sl, #0
 80049d2:	e720      	b.n	8004816 <__ieee754_pow+0x7de>
 80049d4:	4621      	mov	r1, r4
 80049d6:	e7d6      	b.n	8004986 <__ieee754_pow+0x94e>
 80049d8:	f04f 0b00 	mov.w	fp, #0
 80049dc:	f8df c078 	ldr.w	ip, [pc, #120]	; 8004a58 <__ieee754_pow+0xa20>
 80049e0:	f7ff bbba 	b.w	8004158 <__ieee754_pow+0x120>
 80049e4:	f04f 0b00 	mov.w	fp, #0
 80049e8:	f04f 0c00 	mov.w	ip, #0
 80049ec:	f7ff bbb4 	b.w	8004158 <__ieee754_pow+0x120>
 80049f0:	4640      	mov	r0, r8
 80049f2:	4649      	mov	r1, r9
 80049f4:	f7ff bb3d 	b.w	8004072 <__ieee754_pow+0x3a>
 80049f8:	9200      	str	r2, [sp, #0]
 80049fa:	f7ff bb89 	b.w	8004110 <__ieee754_pow+0xd8>
 80049fe:	2300      	movs	r3, #0
 8004a00:	f7ff bb73 	b.w	80040ea <__ieee754_pow+0xb2>
 8004a04:	f3af 8000 	nop.w
 8004a08:	652b82fe 	.word	0x652b82fe
 8004a0c:	3c971547 	.word	0x3c971547
 8004a10:	00000000 	.word	0x00000000
 8004a14:	3fe62e43 	.word	0x3fe62e43
 8004a18:	fefa39ef 	.word	0xfefa39ef
 8004a1c:	3fe62e42 	.word	0x3fe62e42
 8004a20:	0ca86c39 	.word	0x0ca86c39
 8004a24:	be205c61 	.word	0xbe205c61
 8004a28:	72bea4d0 	.word	0x72bea4d0
 8004a2c:	3e663769 	.word	0x3e663769
 8004a30:	c5d26bf1 	.word	0xc5d26bf1
 8004a34:	3ebbbd41 	.word	0x3ebbbd41
 8004a38:	af25de2c 	.word	0xaf25de2c
 8004a3c:	3f11566a 	.word	0x3f11566a
 8004a40:	16bebd93 	.word	0x16bebd93
 8004a44:	3f66c16c 	.word	0x3f66c16c
 8004a48:	5555553e 	.word	0x5555553e
 8004a4c:	3fc55555 	.word	0x3fc55555
 8004a50:	3fe00000 	.word	0x3fe00000
 8004a54:	000fffff 	.word	0x000fffff
 8004a58:	3ff00000 	.word	0x3ff00000
 8004a5c:	4090cbff 	.word	0x4090cbff
 8004a60:	3f6f3400 	.word	0x3f6f3400

08004a64 <__ieee754_sqrt>:
 8004a64:	f8df c158 	ldr.w	ip, [pc, #344]	; 8004bc0 <__ieee754_sqrt+0x15c>
 8004a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a6c:	ea3c 0c01 	bics.w	ip, ip, r1
 8004a70:	4606      	mov	r6, r0
 8004a72:	460d      	mov	r5, r1
 8004a74:	460c      	mov	r4, r1
 8004a76:	460a      	mov	r2, r1
 8004a78:	4607      	mov	r7, r0
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	d10f      	bne.n	8004a9e <__ieee754_sqrt+0x3a>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	460b      	mov	r3, r1
 8004a82:	f7fb fd8d 	bl	80005a0 <__aeabi_dmul>
 8004a86:	4602      	mov	r2, r0
 8004a88:	460b      	mov	r3, r1
 8004a8a:	4630      	mov	r0, r6
 8004a8c:	4629      	mov	r1, r5
 8004a8e:	f7fb fbd1 	bl	8000234 <__adddf3>
 8004a92:	4606      	mov	r6, r0
 8004a94:	460d      	mov	r5, r1
 8004a96:	4630      	mov	r0, r6
 8004a98:	4629      	mov	r1, r5
 8004a9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a9e:	2900      	cmp	r1, #0
 8004aa0:	dc0e      	bgt.n	8004ac0 <__ieee754_sqrt+0x5c>
 8004aa2:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8004aa6:	ea5c 0707 	orrs.w	r7, ip, r7
 8004aaa:	d0f4      	beq.n	8004a96 <__ieee754_sqrt+0x32>
 8004aac:	b141      	cbz	r1, 8004ac0 <__ieee754_sqrt+0x5c>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	f7fb fbbd 	bl	8000230 <__aeabi_dsub>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	460b      	mov	r3, r1
 8004aba:	f7fb fe9b 	bl	80007f4 <__aeabi_ddiv>
 8004abe:	e7e8      	b.n	8004a92 <__ieee754_sqrt+0x2e>
 8004ac0:	1521      	asrs	r1, r4, #20
 8004ac2:	d075      	beq.n	8004bb0 <__ieee754_sqrt+0x14c>
 8004ac4:	07cc      	lsls	r4, r1, #31
 8004ac6:	f04f 0400 	mov.w	r4, #0
 8004aca:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8004ace:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8004ad2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004ad6:	bf5e      	ittt	pl
 8004ad8:	0fd9      	lsrpl	r1, r3, #31
 8004ada:	005b      	lslpl	r3, r3, #1
 8004adc:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8004ae0:	0fd9      	lsrs	r1, r3, #31
 8004ae2:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8004ae6:	2516      	movs	r5, #22
 8004ae8:	4620      	mov	r0, r4
 8004aea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004aee:	107f      	asrs	r7, r7, #1
 8004af0:	005b      	lsls	r3, r3, #1
 8004af2:	1846      	adds	r6, r0, r1
 8004af4:	4296      	cmp	r6, r2
 8004af6:	bfde      	ittt	le
 8004af8:	1b92      	suble	r2, r2, r6
 8004afa:	1870      	addle	r0, r6, r1
 8004afc:	1864      	addle	r4, r4, r1
 8004afe:	0052      	lsls	r2, r2, #1
 8004b00:	3d01      	subs	r5, #1
 8004b02:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8004b06:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8004b0a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004b0e:	d1f0      	bne.n	8004af2 <__ieee754_sqrt+0x8e>
 8004b10:	4629      	mov	r1, r5
 8004b12:	f04f 0e20 	mov.w	lr, #32
 8004b16:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004b1a:	4282      	cmp	r2, r0
 8004b1c:	eb06 0c05 	add.w	ip, r6, r5
 8004b20:	dc02      	bgt.n	8004b28 <__ieee754_sqrt+0xc4>
 8004b22:	d113      	bne.n	8004b4c <__ieee754_sqrt+0xe8>
 8004b24:	459c      	cmp	ip, r3
 8004b26:	d811      	bhi.n	8004b4c <__ieee754_sqrt+0xe8>
 8004b28:	f1bc 0f00 	cmp.w	ip, #0
 8004b2c:	eb0c 0506 	add.w	r5, ip, r6
 8004b30:	da43      	bge.n	8004bba <__ieee754_sqrt+0x156>
 8004b32:	2d00      	cmp	r5, #0
 8004b34:	db41      	blt.n	8004bba <__ieee754_sqrt+0x156>
 8004b36:	f100 0801 	add.w	r8, r0, #1
 8004b3a:	1a12      	subs	r2, r2, r0
 8004b3c:	4640      	mov	r0, r8
 8004b3e:	459c      	cmp	ip, r3
 8004b40:	bf88      	it	hi
 8004b42:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8004b46:	eba3 030c 	sub.w	r3, r3, ip
 8004b4a:	4431      	add	r1, r6
 8004b4c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8004b50:	f1be 0e01 	subs.w	lr, lr, #1
 8004b54:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8004b58:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004b5c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004b60:	d1db      	bne.n	8004b1a <__ieee754_sqrt+0xb6>
 8004b62:	4313      	orrs	r3, r2
 8004b64:	d006      	beq.n	8004b74 <__ieee754_sqrt+0x110>
 8004b66:	1c48      	adds	r0, r1, #1
 8004b68:	bf0b      	itete	eq
 8004b6a:	4671      	moveq	r1, lr
 8004b6c:	3101      	addne	r1, #1
 8004b6e:	3401      	addeq	r4, #1
 8004b70:	f021 0101 	bicne.w	r1, r1, #1
 8004b74:	1063      	asrs	r3, r4, #1
 8004b76:	0849      	lsrs	r1, r1, #1
 8004b78:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8004b7c:	07e2      	lsls	r2, r4, #31
 8004b7e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8004b82:	bf48      	it	mi
 8004b84:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8004b88:	460e      	mov	r6, r1
 8004b8a:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8004b8e:	e782      	b.n	8004a96 <__ieee754_sqrt+0x32>
 8004b90:	0ada      	lsrs	r2, r3, #11
 8004b92:	3815      	subs	r0, #21
 8004b94:	055b      	lsls	r3, r3, #21
 8004b96:	2a00      	cmp	r2, #0
 8004b98:	d0fa      	beq.n	8004b90 <__ieee754_sqrt+0x12c>
 8004b9a:	02d5      	lsls	r5, r2, #11
 8004b9c:	d50a      	bpl.n	8004bb4 <__ieee754_sqrt+0x150>
 8004b9e:	f1c1 0420 	rsb	r4, r1, #32
 8004ba2:	fa23 f404 	lsr.w	r4, r3, r4
 8004ba6:	1e4d      	subs	r5, r1, #1
 8004ba8:	408b      	lsls	r3, r1
 8004baa:	4322      	orrs	r2, r4
 8004bac:	1b41      	subs	r1, r0, r5
 8004bae:	e789      	b.n	8004ac4 <__ieee754_sqrt+0x60>
 8004bb0:	4608      	mov	r0, r1
 8004bb2:	e7f0      	b.n	8004b96 <__ieee754_sqrt+0x132>
 8004bb4:	0052      	lsls	r2, r2, #1
 8004bb6:	3101      	adds	r1, #1
 8004bb8:	e7ef      	b.n	8004b9a <__ieee754_sqrt+0x136>
 8004bba:	4680      	mov	r8, r0
 8004bbc:	e7bd      	b.n	8004b3a <__ieee754_sqrt+0xd6>
 8004bbe:	bf00      	nop
 8004bc0:	7ff00000 	.word	0x7ff00000

08004bc4 <with_errno>:
 8004bc4:	b570      	push	{r4, r5, r6, lr}
 8004bc6:	4604      	mov	r4, r0
 8004bc8:	460d      	mov	r5, r1
 8004bca:	4616      	mov	r6, r2
 8004bcc:	f7ff f974 	bl	8003eb8 <__errno>
 8004bd0:	4629      	mov	r1, r5
 8004bd2:	6006      	str	r6, [r0, #0]
 8004bd4:	4620      	mov	r0, r4
 8004bd6:	bd70      	pop	{r4, r5, r6, pc}

08004bd8 <xflow>:
 8004bd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004bda:	4615      	mov	r5, r2
 8004bdc:	461c      	mov	r4, r3
 8004bde:	b180      	cbz	r0, 8004c02 <xflow+0x2a>
 8004be0:	4610      	mov	r0, r2
 8004be2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004be6:	e9cd 0100 	strd	r0, r1, [sp]
 8004bea:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004bee:	4628      	mov	r0, r5
 8004bf0:	4621      	mov	r1, r4
 8004bf2:	f7fb fcd5 	bl	80005a0 <__aeabi_dmul>
 8004bf6:	2222      	movs	r2, #34	; 0x22
 8004bf8:	b003      	add	sp, #12
 8004bfa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004bfe:	f7ff bfe1 	b.w	8004bc4 <with_errno>
 8004c02:	4610      	mov	r0, r2
 8004c04:	4619      	mov	r1, r3
 8004c06:	e7ee      	b.n	8004be6 <xflow+0xe>

08004c08 <__math_uflow>:
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004c0e:	f7ff bfe3 	b.w	8004bd8 <xflow>

08004c12 <__math_oflow>:
 8004c12:	2200      	movs	r2, #0
 8004c14:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8004c18:	f7ff bfde 	b.w	8004bd8 <xflow>

08004c1c <fabs>:
 8004c1c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004c20:	4770      	bx	lr

08004c22 <finite>:
 8004c22:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8004c26:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8004c2a:	0fc0      	lsrs	r0, r0, #31
 8004c2c:	4770      	bx	lr
	...

08004c30 <scalbn>:
 8004c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c32:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8004c36:	4604      	mov	r4, r0
 8004c38:	460d      	mov	r5, r1
 8004c3a:	4617      	mov	r7, r2
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	b996      	cbnz	r6, 8004c66 <scalbn+0x36>
 8004c40:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004c44:	4303      	orrs	r3, r0
 8004c46:	d039      	beq.n	8004cbc <scalbn+0x8c>
 8004c48:	4b33      	ldr	r3, [pc, #204]	; (8004d18 <scalbn+0xe8>)
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f7fb fca8 	bl	80005a0 <__aeabi_dmul>
 8004c50:	4b32      	ldr	r3, [pc, #200]	; (8004d1c <scalbn+0xec>)
 8004c52:	4604      	mov	r4, r0
 8004c54:	429f      	cmp	r7, r3
 8004c56:	460d      	mov	r5, r1
 8004c58:	da0f      	bge.n	8004c7a <scalbn+0x4a>
 8004c5a:	a32b      	add	r3, pc, #172	; (adr r3, 8004d08 <scalbn+0xd8>)
 8004c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c60:	f7fb fc9e 	bl	80005a0 <__aeabi_dmul>
 8004c64:	e006      	b.n	8004c74 <scalbn+0x44>
 8004c66:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004c6a:	4296      	cmp	r6, r2
 8004c6c:	d10a      	bne.n	8004c84 <scalbn+0x54>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	f7fb fae0 	bl	8000234 <__adddf3>
 8004c74:	4604      	mov	r4, r0
 8004c76:	460d      	mov	r5, r1
 8004c78:	e020      	b.n	8004cbc <scalbn+0x8c>
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004c80:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8004c84:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8004c88:	19b9      	adds	r1, r7, r6
 8004c8a:	4291      	cmp	r1, r2
 8004c8c:	dd0e      	ble.n	8004cac <scalbn+0x7c>
 8004c8e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8004c92:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8004c96:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8004c9a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8004c9e:	4820      	ldr	r0, [pc, #128]	; (8004d20 <scalbn+0xf0>)
 8004ca0:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8004ca4:	a31a      	add	r3, pc, #104	; (adr r3, 8004d10 <scalbn+0xe0>)
 8004ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004caa:	e7d9      	b.n	8004c60 <scalbn+0x30>
 8004cac:	2900      	cmp	r1, #0
 8004cae:	dd08      	ble.n	8004cc2 <scalbn+0x92>
 8004cb0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004cb4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004cb8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8004cbc:	4620      	mov	r0, r4
 8004cbe:	4629      	mov	r1, r5
 8004cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cc2:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8004cc6:	da12      	bge.n	8004cee <scalbn+0xbe>
 8004cc8:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004ccc:	429f      	cmp	r7, r3
 8004cce:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8004cd2:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8004cd6:	dcdc      	bgt.n	8004c92 <scalbn+0x62>
 8004cd8:	a30b      	add	r3, pc, #44	; (adr r3, 8004d08 <scalbn+0xd8>)
 8004cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cde:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8004ce2:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8004ce6:	480f      	ldr	r0, [pc, #60]	; (8004d24 <scalbn+0xf4>)
 8004ce8:	f041 011f 	orr.w	r1, r1, #31
 8004cec:	e7b8      	b.n	8004c60 <scalbn+0x30>
 8004cee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004cf2:	3136      	adds	r1, #54	; 0x36
 8004cf4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004cf8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8004cfc:	4620      	mov	r0, r4
 8004cfe:	4629      	mov	r1, r5
 8004d00:	2200      	movs	r2, #0
 8004d02:	4b09      	ldr	r3, [pc, #36]	; (8004d28 <scalbn+0xf8>)
 8004d04:	e7ac      	b.n	8004c60 <scalbn+0x30>
 8004d06:	bf00      	nop
 8004d08:	c2f8f359 	.word	0xc2f8f359
 8004d0c:	01a56e1f 	.word	0x01a56e1f
 8004d10:	8800759c 	.word	0x8800759c
 8004d14:	7e37e43c 	.word	0x7e37e43c
 8004d18:	43500000 	.word	0x43500000
 8004d1c:	ffff3cb0 	.word	0xffff3cb0
 8004d20:	8800759c 	.word	0x8800759c
 8004d24:	c2f8f359 	.word	0xc2f8f359
 8004d28:	3c900000 	.word	0x3c900000

08004d2c <_init>:
 8004d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d2e:	bf00      	nop
 8004d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d32:	bc08      	pop	{r3}
 8004d34:	469e      	mov	lr, r3
 8004d36:	4770      	bx	lr

08004d38 <_fini>:
 8004d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d3a:	bf00      	nop
 8004d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d3e:	bc08      	pop	{r3}
 8004d40:	469e      	mov	lr, r3
 8004d42:	4770      	bx	lr
