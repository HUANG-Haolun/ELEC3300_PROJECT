
lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006670  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000aac  08006858  08006858  00016858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007304  08007304  00017304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08007308  08007308  00017308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000210  20000000  0800730c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001f24  20000210  0800751c  00020210  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20002134  0800751c  00022134  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000aa2f  00000000  00000000  00020239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000028e9  00000000  00000000  0002ac68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000be0  00000000  00000000  0002d558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000a98  00000000  00000000  0002e138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   0000925b  00000000  00000000  0002ebd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    00002ec0  00000000  00000000  00037e2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .comment      00000050  00000000  00000000  0003aceb  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00003560  00000000  00000000  0003ad3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000210 	.word	0x20000210
 8000204:	00000000 	.word	0x00000000
 8000208:	08006840 	.word	0x08006840

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000214 	.word	0x20000214
 8000224:	08006840 	.word	0x08006840

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__aeabi_d2uiz>:
 80009c4:	004a      	lsls	r2, r1, #1
 80009c6:	d211      	bcs.n	80009ec <__aeabi_d2uiz+0x28>
 80009c8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009cc:	d211      	bcs.n	80009f2 <__aeabi_d2uiz+0x2e>
 80009ce:	d50d      	bpl.n	80009ec <__aeabi_d2uiz+0x28>
 80009d0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009d8:	d40e      	bmi.n	80009f8 <__aeabi_d2uiz+0x34>
 80009da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009e6:	fa23 f002 	lsr.w	r0, r3, r2
 80009ea:	4770      	bx	lr
 80009ec:	f04f 0000 	mov.w	r0, #0
 80009f0:	4770      	bx	lr
 80009f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009f6:	d102      	bne.n	80009fe <__aeabi_d2uiz+0x3a>
 80009f8:	f04f 30ff 	mov.w	r0, #4294967295
 80009fc:	4770      	bx	lr
 80009fe:	f04f 0000 	mov.w	r0, #0
 8000a02:	4770      	bx	lr

08000a04 <__aeabi_frsub>:
 8000a04:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a08:	e002      	b.n	8000a10 <__addsf3>
 8000a0a:	bf00      	nop

08000a0c <__aeabi_fsub>:
 8000a0c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a10 <__addsf3>:
 8000a10:	0042      	lsls	r2, r0, #1
 8000a12:	bf1f      	itttt	ne
 8000a14:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a18:	ea92 0f03 	teqne	r2, r3
 8000a1c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a20:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a24:	d06a      	beq.n	8000afc <__addsf3+0xec>
 8000a26:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a2a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a2e:	bfc1      	itttt	gt
 8000a30:	18d2      	addgt	r2, r2, r3
 8000a32:	4041      	eorgt	r1, r0
 8000a34:	4048      	eorgt	r0, r1
 8000a36:	4041      	eorgt	r1, r0
 8000a38:	bfb8      	it	lt
 8000a3a:	425b      	neglt	r3, r3
 8000a3c:	2b19      	cmp	r3, #25
 8000a3e:	bf88      	it	hi
 8000a40:	4770      	bxhi	lr
 8000a42:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a46:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a4a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a4e:	bf18      	it	ne
 8000a50:	4240      	negne	r0, r0
 8000a52:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a56:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a5a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a5e:	bf18      	it	ne
 8000a60:	4249      	negne	r1, r1
 8000a62:	ea92 0f03 	teq	r2, r3
 8000a66:	d03f      	beq.n	8000ae8 <__addsf3+0xd8>
 8000a68:	f1a2 0201 	sub.w	r2, r2, #1
 8000a6c:	fa41 fc03 	asr.w	ip, r1, r3
 8000a70:	eb10 000c 	adds.w	r0, r0, ip
 8000a74:	f1c3 0320 	rsb	r3, r3, #32
 8000a78:	fa01 f103 	lsl.w	r1, r1, r3
 8000a7c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a80:	d502      	bpl.n	8000a88 <__addsf3+0x78>
 8000a82:	4249      	negs	r1, r1
 8000a84:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a88:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a8c:	d313      	bcc.n	8000ab6 <__addsf3+0xa6>
 8000a8e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a92:	d306      	bcc.n	8000aa2 <__addsf3+0x92>
 8000a94:	0840      	lsrs	r0, r0, #1
 8000a96:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a9a:	f102 0201 	add.w	r2, r2, #1
 8000a9e:	2afe      	cmp	r2, #254	; 0xfe
 8000aa0:	d251      	bcs.n	8000b46 <__addsf3+0x136>
 8000aa2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000aa6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000aaa:	bf08      	it	eq
 8000aac:	f020 0001 	biceq.w	r0, r0, #1
 8000ab0:	ea40 0003 	orr.w	r0, r0, r3
 8000ab4:	4770      	bx	lr
 8000ab6:	0049      	lsls	r1, r1, #1
 8000ab8:	eb40 0000 	adc.w	r0, r0, r0
 8000abc:	3a01      	subs	r2, #1
 8000abe:	bf28      	it	cs
 8000ac0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000ac4:	d2ed      	bcs.n	8000aa2 <__addsf3+0x92>
 8000ac6:	fab0 fc80 	clz	ip, r0
 8000aca:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ace:	ebb2 020c 	subs.w	r2, r2, ip
 8000ad2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ad6:	bfaa      	itet	ge
 8000ad8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000adc:	4252      	neglt	r2, r2
 8000ade:	4318      	orrge	r0, r3
 8000ae0:	bfbc      	itt	lt
 8000ae2:	40d0      	lsrlt	r0, r2
 8000ae4:	4318      	orrlt	r0, r3
 8000ae6:	4770      	bx	lr
 8000ae8:	f092 0f00 	teq	r2, #0
 8000aec:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000af0:	bf06      	itte	eq
 8000af2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000af6:	3201      	addeq	r2, #1
 8000af8:	3b01      	subne	r3, #1
 8000afa:	e7b5      	b.n	8000a68 <__addsf3+0x58>
 8000afc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b00:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b04:	bf18      	it	ne
 8000b06:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b0a:	d021      	beq.n	8000b50 <__addsf3+0x140>
 8000b0c:	ea92 0f03 	teq	r2, r3
 8000b10:	d004      	beq.n	8000b1c <__addsf3+0x10c>
 8000b12:	f092 0f00 	teq	r2, #0
 8000b16:	bf08      	it	eq
 8000b18:	4608      	moveq	r0, r1
 8000b1a:	4770      	bx	lr
 8000b1c:	ea90 0f01 	teq	r0, r1
 8000b20:	bf1c      	itt	ne
 8000b22:	2000      	movne	r0, #0
 8000b24:	4770      	bxne	lr
 8000b26:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b2a:	d104      	bne.n	8000b36 <__addsf3+0x126>
 8000b2c:	0040      	lsls	r0, r0, #1
 8000b2e:	bf28      	it	cs
 8000b30:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b34:	4770      	bx	lr
 8000b36:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b3a:	bf3c      	itt	cc
 8000b3c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b40:	4770      	bxcc	lr
 8000b42:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b46:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4e:	4770      	bx	lr
 8000b50:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b54:	bf16      	itet	ne
 8000b56:	4608      	movne	r0, r1
 8000b58:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b5c:	4601      	movne	r1, r0
 8000b5e:	0242      	lsls	r2, r0, #9
 8000b60:	bf06      	itte	eq
 8000b62:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b66:	ea90 0f01 	teqeq	r0, r1
 8000b6a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b6e:	4770      	bx	lr

08000b70 <__aeabi_ui2f>:
 8000b70:	f04f 0300 	mov.w	r3, #0
 8000b74:	e004      	b.n	8000b80 <__aeabi_i2f+0x8>
 8000b76:	bf00      	nop

08000b78 <__aeabi_i2f>:
 8000b78:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b7c:	bf48      	it	mi
 8000b7e:	4240      	negmi	r0, r0
 8000b80:	ea5f 0c00 	movs.w	ip, r0
 8000b84:	bf08      	it	eq
 8000b86:	4770      	bxeq	lr
 8000b88:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b8c:	4601      	mov	r1, r0
 8000b8e:	f04f 0000 	mov.w	r0, #0
 8000b92:	e01c      	b.n	8000bce <__aeabi_l2f+0x2a>

08000b94 <__aeabi_ul2f>:
 8000b94:	ea50 0201 	orrs.w	r2, r0, r1
 8000b98:	bf08      	it	eq
 8000b9a:	4770      	bxeq	lr
 8000b9c:	f04f 0300 	mov.w	r3, #0
 8000ba0:	e00a      	b.n	8000bb8 <__aeabi_l2f+0x14>
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_l2f>:
 8000ba4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ba8:	bf08      	it	eq
 8000baa:	4770      	bxeq	lr
 8000bac:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000bb0:	d502      	bpl.n	8000bb8 <__aeabi_l2f+0x14>
 8000bb2:	4240      	negs	r0, r0
 8000bb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bb8:	ea5f 0c01 	movs.w	ip, r1
 8000bbc:	bf02      	ittt	eq
 8000bbe:	4684      	moveq	ip, r0
 8000bc0:	4601      	moveq	r1, r0
 8000bc2:	2000      	moveq	r0, #0
 8000bc4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bc8:	bf08      	it	eq
 8000bca:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bce:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000bd2:	fabc f28c 	clz	r2, ip
 8000bd6:	3a08      	subs	r2, #8
 8000bd8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bdc:	db10      	blt.n	8000c00 <__aeabi_l2f+0x5c>
 8000bde:	fa01 fc02 	lsl.w	ip, r1, r2
 8000be2:	4463      	add	r3, ip
 8000be4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000be8:	f1c2 0220 	rsb	r2, r2, #32
 8000bec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bf0:	fa20 f202 	lsr.w	r2, r0, r2
 8000bf4:	eb43 0002 	adc.w	r0, r3, r2
 8000bf8:	bf08      	it	eq
 8000bfa:	f020 0001 	biceq.w	r0, r0, #1
 8000bfe:	4770      	bx	lr
 8000c00:	f102 0220 	add.w	r2, r2, #32
 8000c04:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c08:	f1c2 0220 	rsb	r2, r2, #32
 8000c0c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c10:	fa21 f202 	lsr.w	r2, r1, r2
 8000c14:	eb43 0002 	adc.w	r0, r3, r2
 8000c18:	bf08      	it	eq
 8000c1a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c1e:	4770      	bx	lr

08000c20 <__aeabi_fmul>:
 8000c20:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c28:	bf1e      	ittt	ne
 8000c2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c2e:	ea92 0f0c 	teqne	r2, ip
 8000c32:	ea93 0f0c 	teqne	r3, ip
 8000c36:	d06f      	beq.n	8000d18 <__aeabi_fmul+0xf8>
 8000c38:	441a      	add	r2, r3
 8000c3a:	ea80 0c01 	eor.w	ip, r0, r1
 8000c3e:	0240      	lsls	r0, r0, #9
 8000c40:	bf18      	it	ne
 8000c42:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c46:	d01e      	beq.n	8000c86 <__aeabi_fmul+0x66>
 8000c48:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c4c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c50:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c54:	fba0 3101 	umull	r3, r1, r0, r1
 8000c58:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c5c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c60:	bf3e      	ittt	cc
 8000c62:	0049      	lslcc	r1, r1, #1
 8000c64:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c68:	005b      	lslcc	r3, r3, #1
 8000c6a:	ea40 0001 	orr.w	r0, r0, r1
 8000c6e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c72:	2afd      	cmp	r2, #253	; 0xfd
 8000c74:	d81d      	bhi.n	8000cb2 <__aeabi_fmul+0x92>
 8000c76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c7a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c7e:	bf08      	it	eq
 8000c80:	f020 0001 	biceq.w	r0, r0, #1
 8000c84:	4770      	bx	lr
 8000c86:	f090 0f00 	teq	r0, #0
 8000c8a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c8e:	bf08      	it	eq
 8000c90:	0249      	lsleq	r1, r1, #9
 8000c92:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c96:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c9a:	3a7f      	subs	r2, #127	; 0x7f
 8000c9c:	bfc2      	ittt	gt
 8000c9e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ca2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ca6:	4770      	bxgt	lr
 8000ca8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cac:	f04f 0300 	mov.w	r3, #0
 8000cb0:	3a01      	subs	r2, #1
 8000cb2:	dc5d      	bgt.n	8000d70 <__aeabi_fmul+0x150>
 8000cb4:	f112 0f19 	cmn.w	r2, #25
 8000cb8:	bfdc      	itt	le
 8000cba:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000cbe:	4770      	bxle	lr
 8000cc0:	f1c2 0200 	rsb	r2, r2, #0
 8000cc4:	0041      	lsls	r1, r0, #1
 8000cc6:	fa21 f102 	lsr.w	r1, r1, r2
 8000cca:	f1c2 0220 	rsb	r2, r2, #32
 8000cce:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd2:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cd6:	f140 0000 	adc.w	r0, r0, #0
 8000cda:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cde:	bf08      	it	eq
 8000ce0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce4:	4770      	bx	lr
 8000ce6:	f092 0f00 	teq	r2, #0
 8000cea:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000cee:	bf02      	ittt	eq
 8000cf0:	0040      	lsleq	r0, r0, #1
 8000cf2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cf6:	3a01      	subeq	r2, #1
 8000cf8:	d0f9      	beq.n	8000cee <__aeabi_fmul+0xce>
 8000cfa:	ea40 000c 	orr.w	r0, r0, ip
 8000cfe:	f093 0f00 	teq	r3, #0
 8000d02:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d06:	bf02      	ittt	eq
 8000d08:	0049      	lsleq	r1, r1, #1
 8000d0a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d0e:	3b01      	subeq	r3, #1
 8000d10:	d0f9      	beq.n	8000d06 <__aeabi_fmul+0xe6>
 8000d12:	ea41 010c 	orr.w	r1, r1, ip
 8000d16:	e78f      	b.n	8000c38 <__aeabi_fmul+0x18>
 8000d18:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d1c:	ea92 0f0c 	teq	r2, ip
 8000d20:	bf18      	it	ne
 8000d22:	ea93 0f0c 	teqne	r3, ip
 8000d26:	d00a      	beq.n	8000d3e <__aeabi_fmul+0x11e>
 8000d28:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d2c:	bf18      	it	ne
 8000d2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d32:	d1d8      	bne.n	8000ce6 <__aeabi_fmul+0xc6>
 8000d34:	ea80 0001 	eor.w	r0, r0, r1
 8000d38:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d3c:	4770      	bx	lr
 8000d3e:	f090 0f00 	teq	r0, #0
 8000d42:	bf17      	itett	ne
 8000d44:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d48:	4608      	moveq	r0, r1
 8000d4a:	f091 0f00 	teqne	r1, #0
 8000d4e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d52:	d014      	beq.n	8000d7e <__aeabi_fmul+0x15e>
 8000d54:	ea92 0f0c 	teq	r2, ip
 8000d58:	d101      	bne.n	8000d5e <__aeabi_fmul+0x13e>
 8000d5a:	0242      	lsls	r2, r0, #9
 8000d5c:	d10f      	bne.n	8000d7e <__aeabi_fmul+0x15e>
 8000d5e:	ea93 0f0c 	teq	r3, ip
 8000d62:	d103      	bne.n	8000d6c <__aeabi_fmul+0x14c>
 8000d64:	024b      	lsls	r3, r1, #9
 8000d66:	bf18      	it	ne
 8000d68:	4608      	movne	r0, r1
 8000d6a:	d108      	bne.n	8000d7e <__aeabi_fmul+0x15e>
 8000d6c:	ea80 0001 	eor.w	r0, r0, r1
 8000d70:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d7c:	4770      	bx	lr
 8000d7e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d82:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_fdiv>:
 8000d88:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d8c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d90:	bf1e      	ittt	ne
 8000d92:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d96:	ea92 0f0c 	teqne	r2, ip
 8000d9a:	ea93 0f0c 	teqne	r3, ip
 8000d9e:	d069      	beq.n	8000e74 <__aeabi_fdiv+0xec>
 8000da0:	eba2 0203 	sub.w	r2, r2, r3
 8000da4:	ea80 0c01 	eor.w	ip, r0, r1
 8000da8:	0249      	lsls	r1, r1, #9
 8000daa:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000dae:	d037      	beq.n	8000e20 <__aeabi_fdiv+0x98>
 8000db0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000db4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000db8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	428b      	cmp	r3, r1
 8000dc2:	bf38      	it	cc
 8000dc4:	005b      	lslcc	r3, r3, #1
 8000dc6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000dca:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	bf24      	itt	cs
 8000dd2:	1a5b      	subcs	r3, r3, r1
 8000dd4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000dd8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ddc:	bf24      	itt	cs
 8000dde:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000de2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000de6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000dea:	bf24      	itt	cs
 8000dec:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000df0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000df4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000df8:	bf24      	itt	cs
 8000dfa:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dfe:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e02:	011b      	lsls	r3, r3, #4
 8000e04:	bf18      	it	ne
 8000e06:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e0a:	d1e0      	bne.n	8000dce <__aeabi_fdiv+0x46>
 8000e0c:	2afd      	cmp	r2, #253	; 0xfd
 8000e0e:	f63f af50 	bhi.w	8000cb2 <__aeabi_fmul+0x92>
 8000e12:	428b      	cmp	r3, r1
 8000e14:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e18:	bf08      	it	eq
 8000e1a:	f020 0001 	biceq.w	r0, r0, #1
 8000e1e:	4770      	bx	lr
 8000e20:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e24:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e28:	327f      	adds	r2, #127	; 0x7f
 8000e2a:	bfc2      	ittt	gt
 8000e2c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e30:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e34:	4770      	bxgt	lr
 8000e36:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e3a:	f04f 0300 	mov.w	r3, #0
 8000e3e:	3a01      	subs	r2, #1
 8000e40:	e737      	b.n	8000cb2 <__aeabi_fmul+0x92>
 8000e42:	f092 0f00 	teq	r2, #0
 8000e46:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e4a:	bf02      	ittt	eq
 8000e4c:	0040      	lsleq	r0, r0, #1
 8000e4e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e52:	3a01      	subeq	r2, #1
 8000e54:	d0f9      	beq.n	8000e4a <__aeabi_fdiv+0xc2>
 8000e56:	ea40 000c 	orr.w	r0, r0, ip
 8000e5a:	f093 0f00 	teq	r3, #0
 8000e5e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e62:	bf02      	ittt	eq
 8000e64:	0049      	lsleq	r1, r1, #1
 8000e66:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e6a:	3b01      	subeq	r3, #1
 8000e6c:	d0f9      	beq.n	8000e62 <__aeabi_fdiv+0xda>
 8000e6e:	ea41 010c 	orr.w	r1, r1, ip
 8000e72:	e795      	b.n	8000da0 <__aeabi_fdiv+0x18>
 8000e74:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d108      	bne.n	8000e90 <__aeabi_fdiv+0x108>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	f47f af7d 	bne.w	8000d7e <__aeabi_fmul+0x15e>
 8000e84:	ea93 0f0c 	teq	r3, ip
 8000e88:	f47f af70 	bne.w	8000d6c <__aeabi_fmul+0x14c>
 8000e8c:	4608      	mov	r0, r1
 8000e8e:	e776      	b.n	8000d7e <__aeabi_fmul+0x15e>
 8000e90:	ea93 0f0c 	teq	r3, ip
 8000e94:	d104      	bne.n	8000ea0 <__aeabi_fdiv+0x118>
 8000e96:	024b      	lsls	r3, r1, #9
 8000e98:	f43f af4c 	beq.w	8000d34 <__aeabi_fmul+0x114>
 8000e9c:	4608      	mov	r0, r1
 8000e9e:	e76e      	b.n	8000d7e <__aeabi_fmul+0x15e>
 8000ea0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ea4:	bf18      	it	ne
 8000ea6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eaa:	d1ca      	bne.n	8000e42 <__aeabi_fdiv+0xba>
 8000eac:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000eb0:	f47f af5c 	bne.w	8000d6c <__aeabi_fmul+0x14c>
 8000eb4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000eb8:	f47f af3c 	bne.w	8000d34 <__aeabi_fmul+0x114>
 8000ebc:	e75f      	b.n	8000d7e <__aeabi_fmul+0x15e>
 8000ebe:	bf00      	nop

08000ec0 <__gesf2>:
 8000ec0:	f04f 3cff 	mov.w	ip, #4294967295
 8000ec4:	e006      	b.n	8000ed4 <__cmpsf2+0x4>
 8000ec6:	bf00      	nop

08000ec8 <__lesf2>:
 8000ec8:	f04f 0c01 	mov.w	ip, #1
 8000ecc:	e002      	b.n	8000ed4 <__cmpsf2+0x4>
 8000ece:	bf00      	nop

08000ed0 <__cmpsf2>:
 8000ed0:	f04f 0c01 	mov.w	ip, #1
 8000ed4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ed8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000edc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ee0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ee4:	bf18      	it	ne
 8000ee6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000eea:	d011      	beq.n	8000f10 <__cmpsf2+0x40>
 8000eec:	b001      	add	sp, #4
 8000eee:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ef2:	bf18      	it	ne
 8000ef4:	ea90 0f01 	teqne	r0, r1
 8000ef8:	bf58      	it	pl
 8000efa:	ebb2 0003 	subspl.w	r0, r2, r3
 8000efe:	bf88      	it	hi
 8000f00:	17c8      	asrhi	r0, r1, #31
 8000f02:	bf38      	it	cc
 8000f04:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f08:	bf18      	it	ne
 8000f0a:	f040 0001 	orrne.w	r0, r0, #1
 8000f0e:	4770      	bx	lr
 8000f10:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f14:	d102      	bne.n	8000f1c <__cmpsf2+0x4c>
 8000f16:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f1a:	d105      	bne.n	8000f28 <__cmpsf2+0x58>
 8000f1c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f20:	d1e4      	bne.n	8000eec <__cmpsf2+0x1c>
 8000f22:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f26:	d0e1      	beq.n	8000eec <__cmpsf2+0x1c>
 8000f28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop

08000f30 <__aeabi_cfrcmple>:
 8000f30:	4684      	mov	ip, r0
 8000f32:	4608      	mov	r0, r1
 8000f34:	4661      	mov	r1, ip
 8000f36:	e7ff      	b.n	8000f38 <__aeabi_cfcmpeq>

08000f38 <__aeabi_cfcmpeq>:
 8000f38:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f3a:	f7ff ffc9 	bl	8000ed0 <__cmpsf2>
 8000f3e:	2800      	cmp	r0, #0
 8000f40:	bf48      	it	mi
 8000f42:	f110 0f00 	cmnmi.w	r0, #0
 8000f46:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f48 <__aeabi_fcmpeq>:
 8000f48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f4c:	f7ff fff4 	bl	8000f38 <__aeabi_cfcmpeq>
 8000f50:	bf0c      	ite	eq
 8000f52:	2001      	moveq	r0, #1
 8000f54:	2000      	movne	r0, #0
 8000f56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5a:	bf00      	nop

08000f5c <__aeabi_fcmplt>:
 8000f5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f60:	f7ff ffea 	bl	8000f38 <__aeabi_cfcmpeq>
 8000f64:	bf34      	ite	cc
 8000f66:	2001      	movcc	r0, #1
 8000f68:	2000      	movcs	r0, #0
 8000f6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f6e:	bf00      	nop

08000f70 <__aeabi_fcmple>:
 8000f70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f74:	f7ff ffe0 	bl	8000f38 <__aeabi_cfcmpeq>
 8000f78:	bf94      	ite	ls
 8000f7a:	2001      	movls	r0, #1
 8000f7c:	2000      	movhi	r0, #0
 8000f7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f82:	bf00      	nop

08000f84 <__aeabi_fcmpge>:
 8000f84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f88:	f7ff ffd2 	bl	8000f30 <__aeabi_cfrcmple>
 8000f8c:	bf94      	ite	ls
 8000f8e:	2001      	movls	r0, #1
 8000f90:	2000      	movhi	r0, #0
 8000f92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f96:	bf00      	nop

08000f98 <__aeabi_fcmpgt>:
 8000f98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f9c:	f7ff ffc8 	bl	8000f30 <__aeabi_cfrcmple>
 8000fa0:	bf34      	ite	cc
 8000fa2:	2001      	movcc	r0, #1
 8000fa4:	2000      	movcs	r0, #0
 8000fa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000faa:	bf00      	nop

08000fac <Ov7725_Init>:
uint16_t pixels[100][150];
/************************************************
 * Sensor_Init
 ************************************************/
ErrorStatus Ov7725_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	80fb      	strh	r3, [r7, #6]
	uint8_t Sensor_IDCode = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	717b      	strb	r3, [r7, #5]

	if (0 == SCCB_WriteByte(0x12, 0x80)) /*reset sensor */
 8000fba:	2180      	movs	r1, #128	; 0x80
 8000fbc:	2012      	movs	r0, #18
 8000fbe:	f000 f955 	bl	800126c <SCCB_WriteByte>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d101      	bne.n	8000fcc <Ov7725_Init+0x20>
	{
		return ERROR;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	e030      	b.n	800102e <Ov7725_Init+0x82>
	}

	if (0 == SCCB_ReadByte(&Sensor_IDCode, 1, 0x0b)) /* read sensor ID*/
 8000fcc:	1d7b      	adds	r3, r7, #5
 8000fce:	220b      	movs	r2, #11
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f000 f979 	bl	80012ca <SCCB_ReadByte>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d101      	bne.n	8000fe2 <Ov7725_Init+0x36>
	{
		return ERROR;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	e025      	b.n	800102e <Ov7725_Init+0x82>
	}
	// DEBUG("Sensor ID is 0x%x", Sensor_IDCode);

	if (Sensor_IDCode == OV7725_ID)
 8000fe2:	797b      	ldrb	r3, [r7, #5]
 8000fe4:	2b21      	cmp	r3, #33	; 0x21
 8000fe6:	d11f      	bne.n	8001028 <Ov7725_Init+0x7c>
	{
		for (i = 0; i < OV7725_REG_NUM; i++)
 8000fe8:	2300      	movs	r3, #0
 8000fea:	80fb      	strh	r3, [r7, #6]
 8000fec:	e015      	b.n	800101a <Ov7725_Init+0x6e>
		{
			if (0 == SCCB_WriteByte(Sensor_Config[i].Address, Sensor_Config[i].Value))
 8000fee:	88fb      	ldrh	r3, [r7, #6]
 8000ff0:	4a11      	ldr	r2, [pc, #68]	; (8001038 <Ov7725_Init+0x8c>)
 8000ff2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000ff6:	b29a      	uxth	r2, r3
 8000ff8:	88fb      	ldrh	r3, [r7, #6]
 8000ffa:	490f      	ldr	r1, [pc, #60]	; (8001038 <Ov7725_Init+0x8c>)
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	440b      	add	r3, r1
 8001000:	785b      	ldrb	r3, [r3, #1]
 8001002:	4619      	mov	r1, r3
 8001004:	4610      	mov	r0, r2
 8001006:	f000 f931 	bl	800126c <SCCB_WriteByte>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d101      	bne.n	8001014 <Ov7725_Init+0x68>
			{
				return ERROR;
 8001010:	2300      	movs	r3, #0
 8001012:	e00c      	b.n	800102e <Ov7725_Init+0x82>
		for (i = 0; i < OV7725_REG_NUM; i++)
 8001014:	88fb      	ldrh	r3, [r7, #6]
 8001016:	3301      	adds	r3, #1
 8001018:	80fb      	strh	r3, [r7, #6]
 800101a:	4b08      	ldr	r3, [pc, #32]	; (800103c <Ov7725_Init+0x90>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	b29b      	uxth	r3, r3
 8001020:	88fa      	ldrh	r2, [r7, #6]
 8001022:	429a      	cmp	r2, r3
 8001024:	d3e3      	bcc.n	8000fee <Ov7725_Init+0x42>
 8001026:	e001      	b.n	800102c <Ov7725_Init+0x80>
			}
		}
	}
	else
	{
		return ERROR;
 8001028:	2300      	movs	r3, #0
 800102a:	e000      	b.n	800102e <Ov7725_Init+0x82>
	}

	return SUCCESS;
 800102c:	2301      	movs	r3, #1
}
 800102e:	4618      	mov	r0, r3
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000000 	.word	0x20000000
 800103c:	2000009a 	.word	0x2000009a

08001040 <SCCB_delay>:

#define DEV_ADR  ADDR_OV7725 			 


static void SCCB_delay(void)
{	
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
   uint16_t i = 400; 
 8001046:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800104a:	80fb      	strh	r3, [r7, #6]
   while(i) 
 800104c:	e002      	b.n	8001054 <SCCB_delay+0x14>
   { 
     i--; 
 800104e:	88fb      	ldrh	r3, [r7, #6]
 8001050:	3b01      	subs	r3, #1
 8001052:	80fb      	strh	r3, [r7, #6]
   while(i) 
 8001054:	88fb      	ldrh	r3, [r7, #6]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d1f9      	bne.n	800104e <SCCB_delay+0xe>
   } 
}
 800105a:	bf00      	nop
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	bc80      	pop	{r7}
 8001064:	4770      	bx	lr
	...

08001068 <SCCB_Start>:


static int SCCB_Start(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
	SDA_H;
 800106c:	4b13      	ldr	r3, [pc, #76]	; (80010bc <SCCB_Start+0x54>)
 800106e:	2280      	movs	r2, #128	; 0x80
 8001070:	611a      	str	r2, [r3, #16]
	SCL_H;
 8001072:	4b12      	ldr	r3, [pc, #72]	; (80010bc <SCCB_Start+0x54>)
 8001074:	2240      	movs	r2, #64	; 0x40
 8001076:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8001078:	f7ff ffe2 	bl	8001040 <SCCB_delay>
	if(!SDA_read)
 800107c:	2180      	movs	r1, #128	; 0x80
 800107e:	480f      	ldr	r0, [pc, #60]	; (80010bc <SCCB_Start+0x54>)
 8001080:	f003 fc30 	bl	80048e4 <HAL_GPIO_ReadPin>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d101      	bne.n	800108e <SCCB_Start+0x26>
	return DISABLE;	
 800108a:	2300      	movs	r3, #0
 800108c:	e013      	b.n	80010b6 <SCCB_Start+0x4e>
	SDA_L;
 800108e:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <SCCB_Start+0x54>)
 8001090:	2280      	movs	r2, #128	; 0x80
 8001092:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8001094:	f7ff ffd4 	bl	8001040 <SCCB_delay>
	if(SDA_read) 
 8001098:	2180      	movs	r1, #128	; 0x80
 800109a:	4808      	ldr	r0, [pc, #32]	; (80010bc <SCCB_Start+0x54>)
 800109c:	f003 fc22 	bl	80048e4 <HAL_GPIO_ReadPin>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <SCCB_Start+0x42>
	return DISABLE;	
 80010a6:	2300      	movs	r3, #0
 80010a8:	e005      	b.n	80010b6 <SCCB_Start+0x4e>
	SDA_L;
 80010aa:	4b04      	ldr	r3, [pc, #16]	; (80010bc <SCCB_Start+0x54>)
 80010ac:	2280      	movs	r2, #128	; 0x80
 80010ae:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 80010b0:	f7ff ffc6 	bl	8001040 <SCCB_delay>
	return ENABLE;
 80010b4:	2301      	movs	r3, #1
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40011000 	.word	0x40011000

080010c0 <SCCB_Stop>:


static void SCCB_Stop(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
	SCL_L;
 80010c4:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <SCCB_Stop+0x30>)
 80010c6:	2240      	movs	r2, #64	; 0x40
 80010c8:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 80010ca:	f7ff ffb9 	bl	8001040 <SCCB_delay>
	SDA_L;
 80010ce:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <SCCB_Stop+0x30>)
 80010d0:	2280      	movs	r2, #128	; 0x80
 80010d2:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 80010d4:	f7ff ffb4 	bl	8001040 <SCCB_delay>
	SCL_H;
 80010d8:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <SCCB_Stop+0x30>)
 80010da:	2240      	movs	r2, #64	; 0x40
 80010dc:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 80010de:	f7ff ffaf 	bl	8001040 <SCCB_delay>
	SDA_H;
 80010e2:	4b03      	ldr	r3, [pc, #12]	; (80010f0 <SCCB_Stop+0x30>)
 80010e4:	2280      	movs	r2, #128	; 0x80
 80010e6:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 80010e8:	f7ff ffaa 	bl	8001040 <SCCB_delay>
}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40011000 	.word	0x40011000

080010f4 <SCCB_Ack>:


static void SCCB_Ack(void)
{	
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
	SCL_L;
 80010f8:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <SCCB_Ack+0x30>)
 80010fa:	2240      	movs	r2, #64	; 0x40
 80010fc:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 80010fe:	f7ff ff9f 	bl	8001040 <SCCB_delay>
	SDA_L;
 8001102:	4b08      	ldr	r3, [pc, #32]	; (8001124 <SCCB_Ack+0x30>)
 8001104:	2280      	movs	r2, #128	; 0x80
 8001106:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8001108:	f7ff ff9a 	bl	8001040 <SCCB_delay>
	SCL_H;
 800110c:	4b05      	ldr	r3, [pc, #20]	; (8001124 <SCCB_Ack+0x30>)
 800110e:	2240      	movs	r2, #64	; 0x40
 8001110:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8001112:	f7ff ff95 	bl	8001040 <SCCB_delay>
	SCL_L;
 8001116:	4b03      	ldr	r3, [pc, #12]	; (8001124 <SCCB_Ack+0x30>)
 8001118:	2240      	movs	r2, #64	; 0x40
 800111a:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 800111c:	f7ff ff90 	bl	8001040 <SCCB_delay>
}
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40011000 	.word	0x40011000

08001128 <SCCB_NoAck>:


static void SCCB_NoAck(void)
{	
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
	SCL_L;
 800112c:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <SCCB_NoAck+0x30>)
 800112e:	2240      	movs	r2, #64	; 0x40
 8001130:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8001132:	f7ff ff85 	bl	8001040 <SCCB_delay>
	SDA_H;
 8001136:	4b08      	ldr	r3, [pc, #32]	; (8001158 <SCCB_NoAck+0x30>)
 8001138:	2280      	movs	r2, #128	; 0x80
 800113a:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 800113c:	f7ff ff80 	bl	8001040 <SCCB_delay>
	SCL_H;
 8001140:	4b05      	ldr	r3, [pc, #20]	; (8001158 <SCCB_NoAck+0x30>)
 8001142:	2240      	movs	r2, #64	; 0x40
 8001144:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8001146:	f7ff ff7b 	bl	8001040 <SCCB_delay>
	SCL_L;
 800114a:	4b03      	ldr	r3, [pc, #12]	; (8001158 <SCCB_NoAck+0x30>)
 800114c:	2240      	movs	r2, #64	; 0x40
 800114e:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8001150:	f7ff ff76 	bl	8001040 <SCCB_delay>
}
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40011000 	.word	0x40011000

0800115c <SCCB_WaitAck>:


static int SCCB_WaitAck(void) 	
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
	SCL_L;
 8001160:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <SCCB_WaitAck+0x48>)
 8001162:	2240      	movs	r2, #64	; 0x40
 8001164:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8001166:	f7ff ff6b 	bl	8001040 <SCCB_delay>
	SDA_H;			
 800116a:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <SCCB_WaitAck+0x48>)
 800116c:	2280      	movs	r2, #128	; 0x80
 800116e:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8001170:	f7ff ff66 	bl	8001040 <SCCB_delay>
	SCL_H;
 8001174:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <SCCB_WaitAck+0x48>)
 8001176:	2240      	movs	r2, #64	; 0x40
 8001178:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 800117a:	f7ff ff61 	bl	8001040 <SCCB_delay>
	if(SDA_read)
 800117e:	2180      	movs	r1, #128	; 0x80
 8001180:	4808      	ldr	r0, [pc, #32]	; (80011a4 <SCCB_WaitAck+0x48>)
 8001182:	f003 fbaf 	bl	80048e4 <HAL_GPIO_ReadPin>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d004      	beq.n	8001196 <SCCB_WaitAck+0x3a>
	{
      SCL_L;
 800118c:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <SCCB_WaitAck+0x48>)
 800118e:	2240      	movs	r2, #64	; 0x40
 8001190:	615a      	str	r2, [r3, #20]
      return DISABLE;
 8001192:	2300      	movs	r3, #0
 8001194:	e003      	b.n	800119e <SCCB_WaitAck+0x42>
	}
	SCL_L;
 8001196:	4b03      	ldr	r3, [pc, #12]	; (80011a4 <SCCB_WaitAck+0x48>)
 8001198:	2240      	movs	r2, #64	; 0x40
 800119a:	615a      	str	r2, [r3, #20]
	return ENABLE;
 800119c:	2301      	movs	r3, #1
}
 800119e:	4618      	mov	r0, r3
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40011000 	.word	0x40011000

080011a8 <SCCB_SendByte>:


static void SCCB_SendByte(uint8_t SendByte) 
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
    uint8_t i=8;
 80011b2:	2308      	movs	r3, #8
 80011b4:	73fb      	strb	r3, [r7, #15]
    while(i--)
 80011b6:	e019      	b.n	80011ec <SCCB_SendByte+0x44>
    {
        SCL_L;
 80011b8:	4b12      	ldr	r3, [pc, #72]	; (8001204 <SCCB_SendByte+0x5c>)
 80011ba:	2240      	movs	r2, #64	; 0x40
 80011bc:	615a      	str	r2, [r3, #20]
        SCCB_delay();
 80011be:	f7ff ff3f 	bl	8001040 <SCCB_delay>
      if(SendByte&0x80)
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	da03      	bge.n	80011d2 <SCCB_SendByte+0x2a>
        SDA_H;  
 80011ca:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <SCCB_SendByte+0x5c>)
 80011cc:	2280      	movs	r2, #128	; 0x80
 80011ce:	611a      	str	r2, [r3, #16]
 80011d0:	e002      	b.n	80011d8 <SCCB_SendByte+0x30>
      else 
        SDA_L;   
 80011d2:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <SCCB_SendByte+0x5c>)
 80011d4:	2280      	movs	r2, #128	; 0x80
 80011d6:	615a      	str	r2, [r3, #20]
        SendByte<<=1;
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	71fb      	strb	r3, [r7, #7]
        SCCB_delay();
 80011de:	f7ff ff2f 	bl	8001040 <SCCB_delay>
		SCL_H;
 80011e2:	4b08      	ldr	r3, [pc, #32]	; (8001204 <SCCB_SendByte+0x5c>)
 80011e4:	2240      	movs	r2, #64	; 0x40
 80011e6:	611a      	str	r2, [r3, #16]
        SCCB_delay();
 80011e8:	f7ff ff2a 	bl	8001040 <SCCB_delay>
    while(i--)
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
 80011ee:	1e5a      	subs	r2, r3, #1
 80011f0:	73fa      	strb	r2, [r7, #15]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1e0      	bne.n	80011b8 <SCCB_SendByte+0x10>
    }
    SCL_L;
 80011f6:	4b03      	ldr	r3, [pc, #12]	; (8001204 <SCCB_SendByte+0x5c>)
 80011f8:	2240      	movs	r2, #64	; 0x40
 80011fa:	615a      	str	r2, [r3, #20]
}
 80011fc:	bf00      	nop
 80011fe:	3710      	adds	r7, #16
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40011000 	.word	0x40011000

08001208 <SCCB_ReceiveByte>:


static int SCCB_ReceiveByte(void)  
{ 
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
    uint8_t i=8;
 800120e:	2308      	movs	r3, #8
 8001210:	71fb      	strb	r3, [r7, #7]
    uint8_t ReceiveByte=0;
 8001212:	2300      	movs	r3, #0
 8001214:	71bb      	strb	r3, [r7, #6]

    SDA_H;				
 8001216:	4b14      	ldr	r3, [pc, #80]	; (8001268 <SCCB_ReceiveByte+0x60>)
 8001218:	2280      	movs	r2, #128	; 0x80
 800121a:	611a      	str	r2, [r3, #16]
    while(i--)
 800121c:	e017      	b.n	800124e <SCCB_ReceiveByte+0x46>
    {
      ReceiveByte<<=1;      
 800121e:	79bb      	ldrb	r3, [r7, #6]
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	71bb      	strb	r3, [r7, #6]
      SCL_L;
 8001224:	4b10      	ldr	r3, [pc, #64]	; (8001268 <SCCB_ReceiveByte+0x60>)
 8001226:	2240      	movs	r2, #64	; 0x40
 8001228:	615a      	str	r2, [r3, #20]
      SCCB_delay();
 800122a:	f7ff ff09 	bl	8001040 <SCCB_delay>
	  SCL_H;
 800122e:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <SCCB_ReceiveByte+0x60>)
 8001230:	2240      	movs	r2, #64	; 0x40
 8001232:	611a      	str	r2, [r3, #16]
      SCCB_delay();	
 8001234:	f7ff ff04 	bl	8001040 <SCCB_delay>
      if(SDA_read)
 8001238:	2180      	movs	r1, #128	; 0x80
 800123a:	480b      	ldr	r0, [pc, #44]	; (8001268 <SCCB_ReceiveByte+0x60>)
 800123c:	f003 fb52 	bl	80048e4 <HAL_GPIO_ReadPin>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d003      	beq.n	800124e <SCCB_ReceiveByte+0x46>
      {
        ReceiveByte|=0x01;
 8001246:	79bb      	ldrb	r3, [r7, #6]
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	71bb      	strb	r3, [r7, #6]
    while(i--)
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	1e5a      	subs	r2, r3, #1
 8001252:	71fa      	strb	r2, [r7, #7]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d1e2      	bne.n	800121e <SCCB_ReceiveByte+0x16>
      }
    }
    SCL_L;
 8001258:	4b03      	ldr	r3, [pc, #12]	; (8001268 <SCCB_ReceiveByte+0x60>)
 800125a:	2240      	movs	r2, #64	; 0x40
 800125c:	615a      	str	r2, [r3, #20]
    return ReceiveByte;
 800125e:	79bb      	ldrb	r3, [r7, #6]
}
 8001260:	4618      	mov	r0, r3
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40011000 	.word	0x40011000

0800126c <SCCB_WriteByte>:

          
int SCCB_WriteByte( uint16_t WriteAddress , uint8_t SendByte )
{		
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	460a      	mov	r2, r1
 8001276:	80fb      	strh	r3, [r7, #6]
 8001278:	4613      	mov	r3, r2
 800127a:	717b      	strb	r3, [r7, #5]
    if(!SCCB_Start())
 800127c:	f7ff fef4 	bl	8001068 <SCCB_Start>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d101      	bne.n	800128a <SCCB_WriteByte+0x1e>
	{
	    return DISABLE;
 8001286:	2300      	movs	r3, #0
 8001288:	e01b      	b.n	80012c2 <SCCB_WriteByte+0x56>
	}
    SCCB_SendByte( DEV_ADR );                
 800128a:	2042      	movs	r0, #66	; 0x42
 800128c:	f7ff ff8c 	bl	80011a8 <SCCB_SendByte>
    if( !SCCB_WaitAck() )
 8001290:	f7ff ff64 	bl	800115c <SCCB_WaitAck>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d103      	bne.n	80012a2 <SCCB_WriteByte+0x36>
	{
		SCCB_Stop(); 
 800129a:	f7ff ff11 	bl	80010c0 <SCCB_Stop>
		return DISABLE;
 800129e:	2300      	movs	r3, #0
 80012a0:	e00f      	b.n	80012c2 <SCCB_WriteByte+0x56>
	}
    SCCB_SendByte((uint8_t)(WriteAddress & 0x00FF));  
 80012a2:	88fb      	ldrh	r3, [r7, #6]
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff ff7e 	bl	80011a8 <SCCB_SendByte>
    SCCB_WaitAck();	
 80012ac:	f7ff ff56 	bl	800115c <SCCB_WaitAck>
    SCCB_SendByte(SendByte);
 80012b0:	797b      	ldrb	r3, [r7, #5]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff ff78 	bl	80011a8 <SCCB_SendByte>
    SCCB_WaitAck();   
 80012b8:	f7ff ff50 	bl	800115c <SCCB_WaitAck>
    SCCB_Stop(); 
 80012bc:	f7ff ff00 	bl	80010c0 <SCCB_Stop>
    return ENABLE;
 80012c0:	2301      	movs	r3, #1
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <SCCB_ReadByte>:

          
int SCCB_ReadByte(uint8_t* pBuffer, uint16_t length, uint8_t ReadAddress)
{	
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b082      	sub	sp, #8
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
 80012d2:	460b      	mov	r3, r1
 80012d4:	807b      	strh	r3, [r7, #2]
 80012d6:	4613      	mov	r3, r2
 80012d8:	707b      	strb	r3, [r7, #1]
    if(!SCCB_Start())
 80012da:	f7ff fec5 	bl	8001068 <SCCB_Start>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d101      	bne.n	80012e8 <SCCB_ReadByte+0x1e>
	{
	    return DISABLE;
 80012e4:	2300      	movs	r3, #0
 80012e6:	e040      	b.n	800136a <SCCB_ReadByte+0xa0>
	}
    SCCB_SendByte( DEV_ADR );       
 80012e8:	2042      	movs	r0, #66	; 0x42
 80012ea:	f7ff ff5d 	bl	80011a8 <SCCB_SendByte>
    if( !SCCB_WaitAck() )
 80012ee:	f7ff ff35 	bl	800115c <SCCB_WaitAck>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d103      	bne.n	8001300 <SCCB_ReadByte+0x36>
	{
		SCCB_Stop(); 
 80012f8:	f7ff fee2 	bl	80010c0 <SCCB_Stop>
		return DISABLE;
 80012fc:	2300      	movs	r3, #0
 80012fe:	e034      	b.n	800136a <SCCB_ReadByte+0xa0>
	}
    SCCB_SendByte( ReadAddress );     
 8001300:	787b      	ldrb	r3, [r7, #1]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff ff50 	bl	80011a8 <SCCB_SendByte>
    SCCB_WaitAck();	
 8001308:	f7ff ff28 	bl	800115c <SCCB_WaitAck>
    SCCB_Stop(); 
 800130c:	f7ff fed8 	bl	80010c0 <SCCB_Stop>
	
    if(!SCCB_Start())
 8001310:	f7ff feaa 	bl	8001068 <SCCB_Start>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d101      	bne.n	800131e <SCCB_ReadByte+0x54>
	{
		return DISABLE;
 800131a:	2300      	movs	r3, #0
 800131c:	e025      	b.n	800136a <SCCB_ReadByte+0xa0>
	}
    SCCB_SendByte( DEV_ADR + 1 );   
 800131e:	2043      	movs	r0, #67	; 0x43
 8001320:	f7ff ff42 	bl	80011a8 <SCCB_SendByte>
    if(!SCCB_WaitAck())
 8001324:	f7ff ff1a 	bl	800115c <SCCB_WaitAck>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d117      	bne.n	800135e <SCCB_ReadByte+0x94>
	{
		SCCB_Stop(); 
 800132e:	f7ff fec7 	bl	80010c0 <SCCB_Stop>
		return DISABLE;
 8001332:	2300      	movs	r3, #0
 8001334:	e019      	b.n	800136a <SCCB_ReadByte+0xa0>
	}
    while(length)
    {
      *pBuffer = SCCB_ReceiveByte();
 8001336:	f7ff ff67 	bl	8001208 <SCCB_ReceiveByte>
 800133a:	4603      	mov	r3, r0
 800133c:	b2da      	uxtb	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	701a      	strb	r2, [r3, #0]
      if(length == 1)
 8001342:	887b      	ldrh	r3, [r7, #2]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d102      	bne.n	800134e <SCCB_ReadByte+0x84>
	  {
		  SCCB_NoAck();
 8001348:	f7ff feee 	bl	8001128 <SCCB_NoAck>
 800134c:	e001      	b.n	8001352 <SCCB_ReadByte+0x88>
	  }
      else
	  {
		SCCB_Ack(); 
 800134e:	f7ff fed1 	bl	80010f4 <SCCB_Ack>
	  }
      pBuffer++;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	3301      	adds	r3, #1
 8001356:	607b      	str	r3, [r7, #4]
      length--;
 8001358:	887b      	ldrh	r3, [r7, #2]
 800135a:	3b01      	subs	r3, #1
 800135c:	807b      	strh	r3, [r7, #2]
    while(length)
 800135e:	887b      	ldrh	r3, [r7, #2]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d1e8      	bne.n	8001336 <SCCB_ReadByte+0x6c>
    }
    SCCB_Stop();
 8001364:	f7ff feac 	bl	80010c0 <SCCB_Stop>
    return ENABLE;
 8001368:	2301      	movs	r3, #1
}
 800136a:	4618      	mov	r0, r3
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
	...

08001374 <rgb2hsv>:
							 44, 43, 42, 0, 0, 0, 0, 0, 0};
uint16_t midterm_order[12] = {BLUE, RED, GREEN, ORANGE, WHITE, BLACK, BLUE, RED, GREEN, ORANGE, WHITE, BLACK};

// rgb to hsv
void rgb2hsv(uint16_t rgb, float *h, float *s, float *v)
{
 8001374:	b590      	push	{r4, r7, lr}
 8001376:	b089      	sub	sp, #36	; 0x24
 8001378:	af00      	add	r7, sp, #0
 800137a:	60b9      	str	r1, [r7, #8]
 800137c:	607a      	str	r2, [r7, #4]
 800137e:	603b      	str	r3, [r7, #0]
 8001380:	4603      	mov	r3, r0
 8001382:	81fb      	strh	r3, [r7, #14]
	uint16_t r = (rgb >> 11) & 0x1f;
 8001384:	89fb      	ldrh	r3, [r7, #14]
 8001386:	0adb      	lsrs	r3, r3, #11
 8001388:	83fb      	strh	r3, [r7, #30]
	uint16_t g = (rgb >> 5) & 0x3f;
 800138a:	89fb      	ldrh	r3, [r7, #14]
 800138c:	095b      	lsrs	r3, r3, #5
 800138e:	b29b      	uxth	r3, r3
 8001390:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001394:	83bb      	strh	r3, [r7, #28]
	uint16_t b = rgb & 0x1f;
 8001396:	89fb      	ldrh	r3, [r7, #14]
 8001398:	f003 031f 	and.w	r3, r3, #31
 800139c:	837b      	strh	r3, [r7, #26]
	float max = r > g ? r : g;
 800139e:	8bba      	ldrh	r2, [r7, #28]
 80013a0:	8bfb      	ldrh	r3, [r7, #30]
 80013a2:	4293      	cmp	r3, r2
 80013a4:	bf38      	it	cc
 80013a6:	4613      	movcc	r3, r2
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff fbe4 	bl	8000b78 <__aeabi_i2f>
 80013b0:	4603      	mov	r3, r0
 80013b2:	617b      	str	r3, [r7, #20]
	max = max > b ? max : b;
 80013b4:	8b7b      	ldrh	r3, [r7, #26]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff fbde 	bl	8000b78 <__aeabi_i2f>
 80013bc:	4603      	mov	r3, r0
 80013be:	4619      	mov	r1, r3
 80013c0:	6978      	ldr	r0, [r7, #20]
 80013c2:	f7ff fde9 	bl	8000f98 <__aeabi_fcmpgt>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <rgb2hsv+0x5c>
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	e004      	b.n	80013da <rgb2hsv+0x66>
 80013d0:	8b7b      	ldrh	r3, [r7, #26]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff fbd0 	bl	8000b78 <__aeabi_i2f>
 80013d8:	4603      	mov	r3, r0
 80013da:	617b      	str	r3, [r7, #20]
	float min = r < g ? r : g;
 80013dc:	8bba      	ldrh	r2, [r7, #28]
 80013de:	8bfb      	ldrh	r3, [r7, #30]
 80013e0:	4293      	cmp	r3, r2
 80013e2:	bf28      	it	cs
 80013e4:	4613      	movcs	r3, r2
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff fbc5 	bl	8000b78 <__aeabi_i2f>
 80013ee:	4603      	mov	r3, r0
 80013f0:	613b      	str	r3, [r7, #16]
	min = min < b ? min : b;
 80013f2:	8b7b      	ldrh	r3, [r7, #26]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff fbbf 	bl	8000b78 <__aeabi_i2f>
 80013fa:	4603      	mov	r3, r0
 80013fc:	4619      	mov	r1, r3
 80013fe:	6938      	ldr	r0, [r7, #16]
 8001400:	f7ff fdac 	bl	8000f5c <__aeabi_fcmplt>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <rgb2hsv+0x9a>
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	e004      	b.n	8001418 <rgb2hsv+0xa4>
 800140e:	8b7b      	ldrh	r3, [r7, #26]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff fbb1 	bl	8000b78 <__aeabi_i2f>
 8001416:	4603      	mov	r3, r0
 8001418:	613b      	str	r3, [r7, #16]
	*v = max;
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	697a      	ldr	r2, [r7, #20]
 800141e:	601a      	str	r2, [r3, #0]
	if (max == 0)
 8001420:	f04f 0100 	mov.w	r1, #0
 8001424:	6978      	ldr	r0, [r7, #20]
 8001426:	f7ff fd8f 	bl	8000f48 <__aeabi_fcmpeq>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d008      	beq.n	8001442 <rgb2hsv+0xce>
	{
		*s = 0;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f04f 0200 	mov.w	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
		*h = 0;
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	f04f 0200 	mov.w	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
		return;
 8001440:	e080      	b.n	8001544 <rgb2hsv+0x1d0>
	}
	*s = 255 * (max - min) / max;
 8001442:	6939      	ldr	r1, [r7, #16]
 8001444:	6978      	ldr	r0, [r7, #20]
 8001446:	f7ff fae1 	bl	8000a0c <__aeabi_fsub>
 800144a:	4603      	mov	r3, r0
 800144c:	493f      	ldr	r1, [pc, #252]	; (800154c <rgb2hsv+0x1d8>)
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff fbe6 	bl	8000c20 <__aeabi_fmul>
 8001454:	4603      	mov	r3, r0
 8001456:	6979      	ldr	r1, [r7, #20]
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff fc95 	bl	8000d88 <__aeabi_fdiv>
 800145e:	4603      	mov	r3, r0
 8001460:	461a      	mov	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	601a      	str	r2, [r3, #0]
	if (r == max)
 8001466:	8bfb      	ldrh	r3, [r7, #30]
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff fb85 	bl	8000b78 <__aeabi_i2f>
 800146e:	4603      	mov	r3, r0
 8001470:	4619      	mov	r1, r3
 8001472:	6978      	ldr	r0, [r7, #20]
 8001474:	f7ff fd68 	bl	8000f48 <__aeabi_fcmpeq>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d01d      	beq.n	80014ba <rgb2hsv+0x146>
	{
		*h = 0 + 43 * (g - b) / (max - min);
 800147e:	8bba      	ldrh	r2, [r7, #28]
 8001480:	8b7b      	ldrh	r3, [r7, #26]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	222b      	movs	r2, #43	; 0x2b
 8001486:	fb02 f303 	mul.w	r3, r2, r3
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fb74 	bl	8000b78 <__aeabi_i2f>
 8001490:	4604      	mov	r4, r0
 8001492:	6939      	ldr	r1, [r7, #16]
 8001494:	6978      	ldr	r0, [r7, #20]
 8001496:	f7ff fab9 	bl	8000a0c <__aeabi_fsub>
 800149a:	4603      	mov	r3, r0
 800149c:	4619      	mov	r1, r3
 800149e:	4620      	mov	r0, r4
 80014a0:	f7ff fc72 	bl	8000d88 <__aeabi_fdiv>
 80014a4:	4603      	mov	r3, r0
 80014a6:	f04f 0100 	mov.w	r1, #0
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff fab0 	bl	8000a10 <__addsf3>
 80014b0:	4603      	mov	r3, r0
 80014b2:	461a      	mov	r2, r3
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	e044      	b.n	8001544 <rgb2hsv+0x1d0>
	}
	else if (g == max)
 80014ba:	8bbb      	ldrh	r3, [r7, #28]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff fb5b 	bl	8000b78 <__aeabi_i2f>
 80014c2:	4603      	mov	r3, r0
 80014c4:	4619      	mov	r1, r3
 80014c6:	6978      	ldr	r0, [r7, #20]
 80014c8:	f7ff fd3e 	bl	8000f48 <__aeabi_fcmpeq>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d01c      	beq.n	800150c <rgb2hsv+0x198>
	{
		*h = 85 + 43 * (b - r) / (max - min);
 80014d2:	8b7a      	ldrh	r2, [r7, #26]
 80014d4:	8bfb      	ldrh	r3, [r7, #30]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	222b      	movs	r2, #43	; 0x2b
 80014da:	fb02 f303 	mul.w	r3, r2, r3
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff fb4a 	bl	8000b78 <__aeabi_i2f>
 80014e4:	4604      	mov	r4, r0
 80014e6:	6939      	ldr	r1, [r7, #16]
 80014e8:	6978      	ldr	r0, [r7, #20]
 80014ea:	f7ff fa8f 	bl	8000a0c <__aeabi_fsub>
 80014ee:	4603      	mov	r3, r0
 80014f0:	4619      	mov	r1, r3
 80014f2:	4620      	mov	r0, r4
 80014f4:	f7ff fc48 	bl	8000d88 <__aeabi_fdiv>
 80014f8:	4603      	mov	r3, r0
 80014fa:	4915      	ldr	r1, [pc, #84]	; (8001550 <rgb2hsv+0x1dc>)
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff fa87 	bl	8000a10 <__addsf3>
 8001502:	4603      	mov	r3, r0
 8001504:	461a      	mov	r2, r3
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	e01b      	b.n	8001544 <rgb2hsv+0x1d0>
	}
	else
	{
		*h = 171 + 43 * (r - g) / (max - min);
 800150c:	8bfa      	ldrh	r2, [r7, #30]
 800150e:	8bbb      	ldrh	r3, [r7, #28]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	222b      	movs	r2, #43	; 0x2b
 8001514:	fb02 f303 	mul.w	r3, r2, r3
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff fb2d 	bl	8000b78 <__aeabi_i2f>
 800151e:	4604      	mov	r4, r0
 8001520:	6939      	ldr	r1, [r7, #16]
 8001522:	6978      	ldr	r0, [r7, #20]
 8001524:	f7ff fa72 	bl	8000a0c <__aeabi_fsub>
 8001528:	4603      	mov	r3, r0
 800152a:	4619      	mov	r1, r3
 800152c:	4620      	mov	r0, r4
 800152e:	f7ff fc2b 	bl	8000d88 <__aeabi_fdiv>
 8001532:	4603      	mov	r3, r0
 8001534:	4907      	ldr	r1, [pc, #28]	; (8001554 <rgb2hsv+0x1e0>)
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff fa6a 	bl	8000a10 <__addsf3>
 800153c:	4603      	mov	r3, r0
 800153e:	461a      	mov	r2, r3
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	601a      	str	r2, [r3, #0]
	}
}
 8001544:	3724      	adds	r7, #36	; 0x24
 8001546:	46bd      	mov	sp, r7
 8001548:	bd90      	pop	{r4, r7, pc}
 800154a:	bf00      	nop
 800154c:	437f0000 	.word	0x437f0000
 8001550:	42aa0000 	.word	0x42aa0000
 8001554:	432b0000 	.word	0x432b0000

08001558 <KNearest_match>:

void KNearest_match(uint16_t square_colors[9], uint16_t real_colors[9], uint8_t times, char *face, uint8_t bt_flags)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08a      	sub	sp, #40	; 0x28
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	603b      	str	r3, [r7, #0]
 8001564:	4613      	mov	r3, r2
 8001566:	71fb      	strb	r3, [r7, #7]
	float h = 0;
 8001568:	f04f 0300 	mov.w	r3, #0
 800156c:	61fb      	str	r3, [r7, #28]
	float s = 0;
 800156e:	f04f 0300 	mov.w	r3, #0
 8001572:	61bb      	str	r3, [r7, #24]
	float v = 0;
 8001574:	f04f 0300 	mov.w	r3, #0
 8001578:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 9; i++)
 800157a:	2300      	movs	r3, #0
 800157c:	627b      	str	r3, [r7, #36]	; 0x24
 800157e:	e093      	b.n	80016a8 <KNearest_match+0x150>
	{
		uint16_t temp = square_colors[i];
 8001580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	68fa      	ldr	r2, [r7, #12]
 8001586:	4413      	add	r3, r2
 8001588:	881b      	ldrh	r3, [r3, #0]
 800158a:	843b      	strh	r3, [r7, #32]
		rgb2hsv(square_colors[i], &h, &s, &v);
 800158c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	68fa      	ldr	r2, [r7, #12]
 8001592:	4413      	add	r3, r2
 8001594:	8818      	ldrh	r0, [r3, #0]
 8001596:	f107 0314 	add.w	r3, r7, #20
 800159a:	f107 0218 	add.w	r2, r7, #24
 800159e:	f107 011c 	add.w	r1, r7, #28
 80015a2:	f7ff fee7 	bl	8001374 <rgb2hsv>
		uint8_t index = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		// red
		if (s < 185 && h > 80)
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	4943      	ldr	r1, [pc, #268]	; (80016bc <KNearest_match+0x164>)
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff fcd3 	bl	8000f5c <__aeabi_fcmplt>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d00b      	beq.n	80015d4 <KNearest_match+0x7c>
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	4940      	ldr	r1, [pc, #256]	; (80016c0 <KNearest_match+0x168>)
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff fce9 	bl	8000f98 <__aeabi_fcmpgt>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d003      	beq.n	80015d4 <KNearest_match+0x7c>
			index = 4;
 80015cc:	2304      	movs	r3, #4
 80015ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80015d2:	e042      	b.n	800165a <KNearest_match+0x102>
		else if (h < 25 || h > 336)
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	493b      	ldr	r1, [pc, #236]	; (80016c4 <KNearest_match+0x16c>)
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff fcbf 	bl	8000f5c <__aeabi_fcmplt>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d107      	bne.n	80015f4 <KNearest_match+0x9c>
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	4938      	ldr	r1, [pc, #224]	; (80016c8 <KNearest_match+0x170>)
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff fcd5 	bl	8000f98 <__aeabi_fcmpgt>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d003      	beq.n	80015fc <KNearest_match+0xa4>
			index = 1;
 80015f4:	2301      	movs	r3, #1
 80015f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80015fa:	e02e      	b.n	800165a <KNearest_match+0x102>
		else if (h < 50)
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	4933      	ldr	r1, [pc, #204]	; (80016cc <KNearest_match+0x174>)
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff fcab 	bl	8000f5c <__aeabi_fcmplt>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d003      	beq.n	8001614 <KNearest_match+0xbc>
			index = 2;
 800160c:	2302      	movs	r3, #2
 800160e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001612:	e022      	b.n	800165a <KNearest_match+0x102>
		else if (h < 85)
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	492e      	ldr	r1, [pc, #184]	; (80016d0 <KNearest_match+0x178>)
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff fc9f 	bl	8000f5c <__aeabi_fcmplt>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d003      	beq.n	800162c <KNearest_match+0xd4>
			index = 3;
 8001624:	2303      	movs	r3, #3
 8001626:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800162a:	e016      	b.n	800165a <KNearest_match+0x102>
		else if (h < 110)
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	4929      	ldr	r1, [pc, #164]	; (80016d4 <KNearest_match+0x17c>)
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff fc93 	bl	8000f5c <__aeabi_fcmplt>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d003      	beq.n	8001644 <KNearest_match+0xec>
			index = 0;
 800163c:	2300      	movs	r3, #0
 800163e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001642:	e00a      	b.n	800165a <KNearest_match+0x102>
		else if (h < 200)
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	4924      	ldr	r1, [pc, #144]	; (80016d8 <KNearest_match+0x180>)
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff fc87 	bl	8000f5c <__aeabi_fcmplt>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d002      	beq.n	800165a <KNearest_match+0x102>
			index = 5;
 8001654:	2305      	movs	r3, #5
 8001656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		real_colors[i] = true_colors[index];
 800165a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	68b9      	ldr	r1, [r7, #8]
 8001664:	440b      	add	r3, r1
 8001666:	491d      	ldr	r1, [pc, #116]	; (80016dc <KNearest_match+0x184>)
 8001668:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800166c:	801a      	strh	r2, [r3, #0]
		if (bt_flags == 1)
 800166e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001672:	2b01      	cmp	r3, #1
 8001674:	d115      	bne.n	80016a2 <KNearest_match+0x14a>
		{
			if (times > 3 && i > 2)
 8001676:	79fb      	ldrb	r3, [r7, #7]
 8001678:	2b03      	cmp	r3, #3
 800167a:	d902      	bls.n	8001682 <KNearest_match+0x12a>
 800167c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167e:	2b02      	cmp	r3, #2
 8001680:	dc17      	bgt.n	80016b2 <KNearest_match+0x15a>
				break;
			face[detection_order[times * 9 + i]] = face_colors[index];
 8001682:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8001686:	79fa      	ldrb	r2, [r7, #7]
 8001688:	4613      	mov	r3, r2
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	441a      	add	r2, r3
 800168e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001690:	4413      	add	r3, r2
 8001692:	4a13      	ldr	r2, [pc, #76]	; (80016e0 <KNearest_match+0x188>)
 8001694:	5cd3      	ldrb	r3, [r2, r3]
 8001696:	461a      	mov	r2, r3
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	4413      	add	r3, r2
 800169c:	4a11      	ldr	r2, [pc, #68]	; (80016e4 <KNearest_match+0x18c>)
 800169e:	5c52      	ldrb	r2, [r2, r1]
 80016a0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 9; i++)
 80016a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a4:	3301      	adds	r3, #1
 80016a6:	627b      	str	r3, [r7, #36]	; 0x24
 80016a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016aa:	2b08      	cmp	r3, #8
 80016ac:	f77f af68 	ble.w	8001580 <KNearest_match+0x28>
		}
	}
}
 80016b0:	e000      	b.n	80016b4 <KNearest_match+0x15c>
				break;
 80016b2:	bf00      	nop
}
 80016b4:	bf00      	nop
 80016b6:	3728      	adds	r7, #40	; 0x28
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	43390000 	.word	0x43390000
 80016c0:	42a00000 	.word	0x42a00000
 80016c4:	41c80000 	.word	0x41c80000
 80016c8:	43a80000 	.word	0x43a80000
 80016cc:	42480000 	.word	0x42480000
 80016d0:	42aa0000 	.word	0x42aa0000
 80016d4:	42dc0000 	.word	0x42dc0000
 80016d8:	43480000 	.word	0x43480000
 80016dc:	2000009c 	.word	0x2000009c
 80016e0:	200000b0 	.word	0x200000b0
 80016e4:	200000a8 	.word	0x200000a8

080016e8 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b088      	sub	sp, #32
 80016ec:	af00      	add	r7, sp, #0
  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80016ee:	1d3b      	adds	r3, r7, #4
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	60da      	str	r2, [r3, #12]
 80016fa:	611a      	str	r2, [r3, #16]
 80016fc:	615a      	str	r2, [r3, #20]
 80016fe:	619a      	str	r2, [r3, #24]

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001700:	4b28      	ldr	r3, [pc, #160]	; (80017a4 <MX_FSMC_Init+0xbc>)
 8001702:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001706:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001708:	4b26      	ldr	r3, [pc, #152]	; (80017a4 <MX_FSMC_Init+0xbc>)
 800170a:	4a27      	ldr	r2, [pc, #156]	; (80017a8 <MX_FSMC_Init+0xc0>)
 800170c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800170e:	4b25      	ldr	r3, [pc, #148]	; (80017a4 <MX_FSMC_Init+0xbc>)
 8001710:	2200      	movs	r2, #0
 8001712:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001714:	4b23      	ldr	r3, [pc, #140]	; (80017a4 <MX_FSMC_Init+0xbc>)
 8001716:	2200      	movs	r2, #0
 8001718:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800171a:	4b22      	ldr	r3, [pc, #136]	; (80017a4 <MX_FSMC_Init+0xbc>)
 800171c:	2200      	movs	r2, #0
 800171e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001720:	4b20      	ldr	r3, [pc, #128]	; (80017a4 <MX_FSMC_Init+0xbc>)
 8001722:	2210      	movs	r2, #16
 8001724:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001726:	4b1f      	ldr	r3, [pc, #124]	; (80017a4 <MX_FSMC_Init+0xbc>)
 8001728:	2200      	movs	r2, #0
 800172a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800172c:	4b1d      	ldr	r3, [pc, #116]	; (80017a4 <MX_FSMC_Init+0xbc>)
 800172e:	2200      	movs	r2, #0
 8001730:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001732:	4b1c      	ldr	r3, [pc, #112]	; (80017a4 <MX_FSMC_Init+0xbc>)
 8001734:	2200      	movs	r2, #0
 8001736:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001738:	4b1a      	ldr	r3, [pc, #104]	; (80017a4 <MX_FSMC_Init+0xbc>)
 800173a:	2200      	movs	r2, #0
 800173c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800173e:	4b19      	ldr	r3, [pc, #100]	; (80017a4 <MX_FSMC_Init+0xbc>)
 8001740:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001744:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001746:	4b17      	ldr	r3, [pc, #92]	; (80017a4 <MX_FSMC_Init+0xbc>)
 8001748:	2200      	movs	r2, #0
 800174a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 800174c:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <MX_FSMC_Init+0xbc>)
 800174e:	2200      	movs	r2, #0
 8001750:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001752:	4b14      	ldr	r3, [pc, #80]	; (80017a4 <MX_FSMC_Init+0xbc>)
 8001754:	2200      	movs	r2, #0
 8001756:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001758:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <MX_FSMC_Init+0xbc>)
 800175a:	2200      	movs	r2, #0
 800175c:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 800175e:	230f      	movs	r3, #15
 8001760:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001762:	230f      	movs	r3, #15
 8001764:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001766:	23ff      	movs	r3, #255	; 0xff
 8001768:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 800176a:	230f      	movs	r3, #15
 800176c:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800176e:	2310      	movs	r3, #16
 8001770:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001772:	2311      	movs	r3, #17
 8001774:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001776:	2300      	movs	r3, #0
 8001778:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800177a:	1d3b      	adds	r3, r7, #4
 800177c:	2200      	movs	r2, #0
 800177e:	4619      	mov	r1, r3
 8001780:	4808      	ldr	r0, [pc, #32]	; (80017a4 <MX_FSMC_Init+0xbc>)
 8001782:	f003 fd21 	bl	80051c8 <HAL_SRAM_Init>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 800178c:	f001 fa03 	bl	8002b96 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <MX_FSMC_Init+0xc4>)
 8001792:	69db      	ldr	r3, [r3, #28]
 8001794:	4a05      	ldr	r2, [pc, #20]	; (80017ac <MX_FSMC_Init+0xc4>)
 8001796:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800179a:	61d3      	str	r3, [r2, #28]

}
 800179c:	bf00      	nop
 800179e:	3720      	adds	r7, #32
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	2000022c 	.word	0x2000022c
 80017a8:	a0000104 	.word	0xa0000104
 80017ac:	40010000 	.word	0x40010000

080017b0 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b6:	f107 0308 	add.w	r3, r7, #8
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	605a      	str	r2, [r3, #4]
 80017c0:	609a      	str	r2, [r3, #8]
 80017c2:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 80017c4:	4b18      	ldr	r3, [pc, #96]	; (8001828 <HAL_FSMC_MspInit+0x78>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d129      	bne.n	8001820 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 80017cc:	4b16      	ldr	r3, [pc, #88]	; (8001828 <HAL_FSMC_MspInit+0x78>)
 80017ce:	2201      	movs	r2, #1
 80017d0:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80017d2:	4b16      	ldr	r3, [pc, #88]	; (800182c <HAL_FSMC_MspInit+0x7c>)
 80017d4:	695b      	ldr	r3, [r3, #20]
 80017d6:	4a15      	ldr	r2, [pc, #84]	; (800182c <HAL_FSMC_MspInit+0x7c>)
 80017d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017dc:	6153      	str	r3, [r2, #20]
 80017de:	4b13      	ldr	r3, [pc, #76]	; (800182c <HAL_FSMC_MspInit+0x7c>)
 80017e0:	695b      	ldr	r3, [r3, #20]
 80017e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e6:	607b      	str	r3, [r7, #4]
 80017e8:	687b      	ldr	r3, [r7, #4]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80017ea:	f64f 7380 	movw	r3, #65408	; 0xff80
 80017ee:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f0:	2302      	movs	r3, #2
 80017f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017f4:	2303      	movs	r3, #3
 80017f6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017f8:	f107 0308 	add.w	r3, r7, #8
 80017fc:	4619      	mov	r1, r3
 80017fe:	480c      	ldr	r0, [pc, #48]	; (8001830 <HAL_FSMC_MspInit+0x80>)
 8001800:	f002 fed8 	bl	80045b4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001804:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8001808:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180a:	2302      	movs	r3, #2
 800180c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800180e:	2303      	movs	r3, #3
 8001810:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001812:	f107 0308 	add.w	r3, r7, #8
 8001816:	4619      	mov	r1, r3
 8001818:	4806      	ldr	r0, [pc, #24]	; (8001834 <HAL_FSMC_MspInit+0x84>)
 800181a:	f002 fecb 	bl	80045b4 <HAL_GPIO_Init>
 800181e:	e000      	b.n	8001822 <HAL_FSMC_MspInit+0x72>
    return;
 8001820:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001822:	3718      	adds	r7, #24
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	20000270 	.word	0x20000270
 800182c:	40021000 	.word	0x40021000
 8001830:	40011800 	.word	0x40011800
 8001834:	40011400 	.word	0x40011400

08001838 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001840:	f7ff ffb6 	bl	80017b0 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001844:	bf00      	nop
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b08a      	sub	sp, #40	; 0x28
 8001850:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001852:	f107 0318 	add.w	r3, r7, #24
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]
 800185c:	609a      	str	r2, [r3, #8]
 800185e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001860:	4b6e      	ldr	r3, [pc, #440]	; (8001a1c <MX_GPIO_Init+0x1d0>)
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	4a6d      	ldr	r2, [pc, #436]	; (8001a1c <MX_GPIO_Init+0x1d0>)
 8001866:	f043 0310 	orr.w	r3, r3, #16
 800186a:	6193      	str	r3, [r2, #24]
 800186c:	4b6b      	ldr	r3, [pc, #428]	; (8001a1c <MX_GPIO_Init+0x1d0>)
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	f003 0310 	and.w	r3, r3, #16
 8001874:	617b      	str	r3, [r7, #20]
 8001876:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001878:	4b68      	ldr	r3, [pc, #416]	; (8001a1c <MX_GPIO_Init+0x1d0>)
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	4a67      	ldr	r2, [pc, #412]	; (8001a1c <MX_GPIO_Init+0x1d0>)
 800187e:	f043 0304 	orr.w	r3, r3, #4
 8001882:	6193      	str	r3, [r2, #24]
 8001884:	4b65      	ldr	r3, [pc, #404]	; (8001a1c <MX_GPIO_Init+0x1d0>)
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	f003 0304 	and.w	r3, r3, #4
 800188c:	613b      	str	r3, [r7, #16]
 800188e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001890:	4b62      	ldr	r3, [pc, #392]	; (8001a1c <MX_GPIO_Init+0x1d0>)
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	4a61      	ldr	r2, [pc, #388]	; (8001a1c <MX_GPIO_Init+0x1d0>)
 8001896:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800189a:	6193      	str	r3, [r2, #24]
 800189c:	4b5f      	ldr	r3, [pc, #380]	; (8001a1c <MX_GPIO_Init+0x1d0>)
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a8:	4b5c      	ldr	r3, [pc, #368]	; (8001a1c <MX_GPIO_Init+0x1d0>)
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	4a5b      	ldr	r2, [pc, #364]	; (8001a1c <MX_GPIO_Init+0x1d0>)
 80018ae:	f043 0308 	orr.w	r3, r3, #8
 80018b2:	6193      	str	r3, [r2, #24]
 80018b4:	4b59      	ldr	r3, [pc, #356]	; (8001a1c <MX_GPIO_Init+0x1d0>)
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	f003 0308 	and.w	r3, r3, #8
 80018bc:	60bb      	str	r3, [r7, #8]
 80018be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018c0:	4b56      	ldr	r3, [pc, #344]	; (8001a1c <MX_GPIO_Init+0x1d0>)
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	4a55      	ldr	r2, [pc, #340]	; (8001a1c <MX_GPIO_Init+0x1d0>)
 80018c6:	f043 0320 	orr.w	r3, r3, #32
 80018ca:	6193      	str	r3, [r2, #24]
 80018cc:	4b53      	ldr	r3, [pc, #332]	; (8001a1c <MX_GPIO_Init+0x1d0>)
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	f003 0320 	and.w	r3, r3, #32
 80018d4:	607b      	str	r3, [r7, #4]
 80018d6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80018d8:	2200      	movs	r2, #0
 80018da:	210c      	movs	r1, #12
 80018dc:	4850      	ldr	r0, [pc, #320]	; (8001a20 <MX_GPIO_Init+0x1d4>)
 80018de:	f003 f818 	bl	8004912 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80018e2:	2200      	movs	r2, #0
 80018e4:	21f0      	movs	r1, #240	; 0xf0
 80018e6:	484f      	ldr	r0, [pc, #316]	; (8001a24 <MX_GPIO_Init+0x1d8>)
 80018e8:	f003 f813 	bl	8004912 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_3, GPIO_PIN_RESET);
 80018ec:	2200      	movs	r2, #0
 80018ee:	f241 0108 	movw	r1, #4104	; 0x1008
 80018f2:	484d      	ldr	r0, [pc, #308]	; (8001a28 <MX_GPIO_Init+0x1dc>)
 80018f4:	f003 f80d 	bl	8004912 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 80018f8:	2200      	movs	r2, #0
 80018fa:	2102      	movs	r1, #2
 80018fc:	484b      	ldr	r0, [pc, #300]	; (8001a2c <MX_GPIO_Init+0x1e0>)
 80018fe:	f003 f808 	bl	8004912 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001902:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001906:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001908:	2300      	movs	r3, #0
 800190a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190c:	2300      	movs	r3, #0
 800190e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001910:	f107 0318 	add.w	r3, r7, #24
 8001914:	4619      	mov	r1, r3
 8001916:	4843      	ldr	r0, [pc, #268]	; (8001a24 <MX_GPIO_Init+0x1d8>)
 8001918:	f002 fe4c 	bl	80045b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800191c:	2308      	movs	r3, #8
 800191e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001920:	4b43      	ldr	r3, [pc, #268]	; (8001a30 <MX_GPIO_Init+0x1e4>)
 8001922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001924:	2300      	movs	r3, #0
 8001926:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001928:	f107 0318 	add.w	r3, r7, #24
 800192c:	4619      	mov	r1, r3
 800192e:	483d      	ldr	r0, [pc, #244]	; (8001a24 <MX_GPIO_Init+0x1d8>)
 8001930:	f002 fe40 	bl	80045b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = START_BT_Pin;
 8001934:	2301      	movs	r3, #1
 8001936:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001938:	4b3e      	ldr	r3, [pc, #248]	; (8001a34 <MX_GPIO_Init+0x1e8>)
 800193a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(START_BT_GPIO_Port, &GPIO_InitStruct);
 8001940:	f107 0318 	add.w	r3, r7, #24
 8001944:	4619      	mov	r1, r3
 8001946:	4836      	ldr	r0, [pc, #216]	; (8001a20 <MX_GPIO_Init+0x1d4>)
 8001948:	f002 fe34 	bl	80045b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800194c:	230c      	movs	r3, #12
 800194e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001950:	2301      	movs	r3, #1
 8001952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001958:	2303      	movs	r3, #3
 800195a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800195c:	f107 0318 	add.w	r3, r7, #24
 8001960:	4619      	mov	r1, r3
 8001962:	482f      	ldr	r0, [pc, #188]	; (8001a20 <MX_GPIO_Init+0x1d4>)
 8001964:	f002 fe26 	bl	80045b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001968:	2330      	movs	r3, #48	; 0x30
 800196a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800196c:	2301      	movs	r3, #1
 800196e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001974:	2303      	movs	r3, #3
 8001976:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001978:	f107 0318 	add.w	r3, r7, #24
 800197c:	4619      	mov	r1, r3
 800197e:	4829      	ldr	r0, [pc, #164]	; (8001a24 <MX_GPIO_Init+0x1d8>)
 8001980:	f002 fe18 	bl	80045b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001984:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001988:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800198a:	2300      	movs	r3, #0
 800198c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001992:	f107 0318 	add.w	r3, r7, #24
 8001996:	4619      	mov	r1, r3
 8001998:	4827      	ldr	r0, [pc, #156]	; (8001a38 <MX_GPIO_Init+0x1ec>)
 800199a:	f002 fe0b 	bl	80045b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_3;
 800199e:	f241 0308 	movw	r3, #4104	; 0x1008
 80019a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a4:	2301      	movs	r3, #1
 80019a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019ac:	2303      	movs	r3, #3
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019b0:	f107 0318 	add.w	r3, r7, #24
 80019b4:	4619      	mov	r1, r3
 80019b6:	481c      	ldr	r0, [pc, #112]	; (8001a28 <MX_GPIO_Init+0x1dc>)
 80019b8:	f002 fdfc 	bl	80045b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019bc:	23c0      	movs	r3, #192	; 0xc0
 80019be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80019c0:	2311      	movs	r3, #17
 80019c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019c8:	2303      	movs	r3, #3
 80019ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019cc:	f107 0318 	add.w	r3, r7, #24
 80019d0:	4619      	mov	r1, r3
 80019d2:	4814      	ldr	r0, [pc, #80]	; (8001a24 <MX_GPIO_Init+0x1d8>)
 80019d4:	f002 fdee 	bl	80045b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80019d8:	2302      	movs	r3, #2
 80019da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019dc:	2301      	movs	r3, #1
 80019de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019e4:	2303      	movs	r3, #3
 80019e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019e8:	f107 0318 	add.w	r3, r7, #24
 80019ec:	4619      	mov	r1, r3
 80019ee:	480f      	ldr	r0, [pc, #60]	; (8001a2c <MX_GPIO_Init+0x1e0>)
 80019f0:	f002 fde0 	bl	80045b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80019f4:	2200      	movs	r2, #0
 80019f6:	2100      	movs	r1, #0
 80019f8:	2006      	movs	r0, #6
 80019fa:	f002 fc9c 	bl	8004336 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80019fe:	2006      	movs	r0, #6
 8001a00:	f002 fcb5 	bl	800436e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001a04:	2200      	movs	r2, #0
 8001a06:	2100      	movs	r1, #0
 8001a08:	2009      	movs	r0, #9
 8001a0a:	f002 fc94 	bl	8004336 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001a0e:	2009      	movs	r0, #9
 8001a10:	f002 fcad 	bl	800436e <HAL_NVIC_EnableIRQ>

}
 8001a14:	bf00      	nop
 8001a16:	3728      	adds	r7, #40	; 0x28
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	40010800 	.word	0x40010800
 8001a24:	40011000 	.word	0x40011000
 8001a28:	40011400 	.word	0x40011400
 8001a2c:	40011800 	.word	0x40011800
 8001a30:	10210000 	.word	0x10210000
 8001a34:	10110000 	.word	0x10110000
 8001a38:	40010c00 	.word	0x40010c00

08001a3c <Delay>:
void LCD_REG_Config(void);
void LCD_FillColor(uint32_t ulAmout_Point, uint16_t usColor);
uint16_t LCD_Read_PixelData(void);

void Delay(__IO uint32_t nCount)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
	for (; nCount != 0; nCount--)
 8001a44:	e002      	b.n	8001a4c <Delay+0x10>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	607b      	str	r3, [r7, #4]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f9      	bne.n	8001a46 <Delay+0xa>
		;
}
 8001a52:	bf00      	nop
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bc80      	pop	{r7}
 8001a5c:	4770      	bx	lr

08001a5e <LCD_INIT>:

void LCD_INIT(void)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b082      	sub	sp, #8
 8001a62:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);
 8001a64:	2001      	movs	r0, #1
 8001a66:	f000 f829 	bl	8001abc <LCD_BackLed_Control>
	LCD_Rst();
 8001a6a:	f000 f80f 	bl	8001a8c <LCD_Rst>
	LCD_REG_Config();
 8001a6e:	f000 f85f 	bl	8001b30 <LCD_REG_Config>
	LCD_Clear(0, 0, 240, 320, BACKGROUND);
 8001a72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a76:	9300      	str	r3, [sp, #0]
 8001a78:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001a7c:	22f0      	movs	r2, #240	; 0xf0
 8001a7e:	2100      	movs	r1, #0
 8001a80:	2000      	movs	r0, #0
 8001a82:	f000 f9e6 	bl	8001e52 <LCD_Clear>
}
 8001a86:	bf00      	nop
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <LCD_Rst>:

void LCD_Rst(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8001a90:	2200      	movs	r2, #0
 8001a92:	2102      	movs	r1, #2
 8001a94:	4807      	ldr	r0, [pc, #28]	; (8001ab4 <LCD_Rst+0x28>)
 8001a96:	f002 ff3c 	bl	8004912 <HAL_GPIO_WritePin>
	Delay(0xAFFf << 2);
 8001a9a:	4807      	ldr	r0, [pc, #28]	; (8001ab8 <LCD_Rst+0x2c>)
 8001a9c:	f7ff ffce 	bl	8001a3c <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	2102      	movs	r1, #2
 8001aa4:	4803      	ldr	r0, [pc, #12]	; (8001ab4 <LCD_Rst+0x28>)
 8001aa6:	f002 ff34 	bl	8004912 <HAL_GPIO_WritePin>
	Delay(0xAFFf << 2);
 8001aaa:	4803      	ldr	r0, [pc, #12]	; (8001ab8 <LCD_Rst+0x2c>)
 8001aac:	f7ff ffc6 	bl	8001a3c <Delay>
}
 8001ab0:	bf00      	nop
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40011800 	.word	0x40011800
 8001ab8:	0002bffc 	.word	0x0002bffc

08001abc <LCD_BackLed_Control>:

void LCD_BackLed_Control(FunctionalState enumState)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	71fb      	strb	r3, [r7, #7]
	if (enumState)
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d006      	beq.n	8001ada <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT, LCD_BK_PIN, GPIO_PIN_RESET);
 8001acc:	2200      	movs	r2, #0
 8001ace:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ad2:	4807      	ldr	r0, [pc, #28]	; (8001af0 <LCD_BackLed_Control+0x34>)
 8001ad4:	f002 ff1d 	bl	8004912 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT, LCD_BK_PIN, GPIO_PIN_SET);
}
 8001ad8:	e005      	b.n	8001ae6 <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT, LCD_BK_PIN, GPIO_PIN_SET);
 8001ada:	2201      	movs	r2, #1
 8001adc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ae0:	4803      	ldr	r0, [pc, #12]	; (8001af0 <LCD_BackLed_Control+0x34>)
 8001ae2:	f002 ff16 	bl	8004912 <HAL_GPIO_WritePin>
}
 8001ae6:	bf00      	nop
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40011400 	.word	0x40011400

08001af4 <LCD_Write_Cmd>:

void LCD_Write_Cmd(uint16_t usCmd)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	80fb      	strh	r3, [r7, #6]
	*(__IO uint16_t *)(FSMC_Addr_LCD_CMD) = usCmd;
 8001afe:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001b02:	88fb      	ldrh	r3, [r7, #6]
 8001b04:	8013      	strh	r3, [r2, #0]
}
 8001b06:	bf00      	nop
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bc80      	pop	{r7}
 8001b0e:	4770      	bx	lr

08001b10 <LCD_Write_Data>:

void LCD_Write_Data(uint16_t usData)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4603      	mov	r3, r0
 8001b18:	80fb      	strh	r3, [r7, #6]
	*(__IO uint16_t *)(FSMC_Addr_LCD_DATA) = usData;
 8001b1a:	4a04      	ldr	r2, [pc, #16]	; (8001b2c <LCD_Write_Data+0x1c>)
 8001b1c:	88fb      	ldrh	r3, [r7, #6]
 8001b1e:	8013      	strh	r3, [r2, #0]
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	60020000 	.word	0x60020000

08001b30 <LCD_REG_Config>:
{
	return (*(__IO uint16_t *)(FSMC_Addr_LCD_DATA));
}

void LCD_REG_Config(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY();
	LCD_Write_Cmd(0xCF);
 8001b34:	20cf      	movs	r0, #207	; 0xcf
 8001b36:	f7ff ffdd 	bl	8001af4 <LCD_Write_Cmd>
	LCD_Write_Data(0x00);
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	f7ff ffe8 	bl	8001b10 <LCD_Write_Data>
	LCD_Write_Data(0x81);
 8001b40:	2081      	movs	r0, #129	; 0x81
 8001b42:	f7ff ffe5 	bl	8001b10 <LCD_Write_Data>
	LCD_Write_Data(0x30);
 8001b46:	2030      	movs	r0, #48	; 0x30
 8001b48:	f7ff ffe2 	bl	8001b10 <LCD_Write_Data>

	/*  Power on sequence control (EDh) */
	DEBUG_DELAY();
	LCD_Write_Cmd(0xED);
 8001b4c:	20ed      	movs	r0, #237	; 0xed
 8001b4e:	f7ff ffd1 	bl	8001af4 <LCD_Write_Cmd>
	LCD_Write_Data(0x64);
 8001b52:	2064      	movs	r0, #100	; 0x64
 8001b54:	f7ff ffdc 	bl	8001b10 <LCD_Write_Data>
	LCD_Write_Data(0x03);
 8001b58:	2003      	movs	r0, #3
 8001b5a:	f7ff ffd9 	bl	8001b10 <LCD_Write_Data>
	LCD_Write_Data(0x12);
 8001b5e:	2012      	movs	r0, #18
 8001b60:	f7ff ffd6 	bl	8001b10 <LCD_Write_Data>
	LCD_Write_Data(0x81);
 8001b64:	2081      	movs	r0, #129	; 0x81
 8001b66:	f7ff ffd3 	bl	8001b10 <LCD_Write_Data>

	/*  Driver timing control A (E8h) */
	DEBUG_DELAY();
	LCD_Write_Cmd(0xE8);
 8001b6a:	20e8      	movs	r0, #232	; 0xe8
 8001b6c:	f7ff ffc2 	bl	8001af4 <LCD_Write_Cmd>
	LCD_Write_Data(0x85);
 8001b70:	2085      	movs	r0, #133	; 0x85
 8001b72:	f7ff ffcd 	bl	8001b10 <LCD_Write_Data>
	LCD_Write_Data(0x10);
 8001b76:	2010      	movs	r0, #16
 8001b78:	f7ff ffca 	bl	8001b10 <LCD_Write_Data>
	LCD_Write_Data(0x78);
 8001b7c:	2078      	movs	r0, #120	; 0x78
 8001b7e:	f7ff ffc7 	bl	8001b10 <LCD_Write_Data>

	/*  Power control A (CBh) */
	DEBUG_DELAY();
	LCD_Write_Cmd(0xCB);
 8001b82:	20cb      	movs	r0, #203	; 0xcb
 8001b84:	f7ff ffb6 	bl	8001af4 <LCD_Write_Cmd>
	LCD_Write_Data(0x39);
 8001b88:	2039      	movs	r0, #57	; 0x39
 8001b8a:	f7ff ffc1 	bl	8001b10 <LCD_Write_Data>
	LCD_Write_Data(0x2C);
 8001b8e:	202c      	movs	r0, #44	; 0x2c
 8001b90:	f7ff ffbe 	bl	8001b10 <LCD_Write_Data>
	LCD_Write_Data(0x00);
 8001b94:	2000      	movs	r0, #0
 8001b96:	f7ff ffbb 	bl	8001b10 <LCD_Write_Data>
	LCD_Write_Data(0x34);
 8001b9a:	2034      	movs	r0, #52	; 0x34
 8001b9c:	f7ff ffb8 	bl	8001b10 <LCD_Write_Data>
	LCD_Write_Data(0x02);
 8001ba0:	2002      	movs	r0, #2
 8001ba2:	f7ff ffb5 	bl	8001b10 <LCD_Write_Data>

	/* Pump ratio control (F7h) */
	DEBUG_DELAY();
	LCD_Write_Cmd(0xF7);
 8001ba6:	20f7      	movs	r0, #247	; 0xf7
 8001ba8:	f7ff ffa4 	bl	8001af4 <LCD_Write_Cmd>
	LCD_Write_Data(0x20);
 8001bac:	2020      	movs	r0, #32
 8001bae:	f7ff ffaf 	bl	8001b10 <LCD_Write_Data>

	/* Driver timing control B */
	DEBUG_DELAY();
	LCD_Write_Cmd(0xEA);
 8001bb2:	20ea      	movs	r0, #234	; 0xea
 8001bb4:	f7ff ff9e 	bl	8001af4 <LCD_Write_Cmd>
	LCD_Write_Data(0x00);
 8001bb8:	2000      	movs	r0, #0
 8001bba:	f7ff ffa9 	bl	8001b10 <LCD_Write_Data>
	LCD_Write_Data(0x00);
 8001bbe:	2000      	movs	r0, #0
 8001bc0:	f7ff ffa6 	bl	8001b10 <LCD_Write_Data>

	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY();
	LCD_Write_Cmd(0xB1);
 8001bc4:	20b1      	movs	r0, #177	; 0xb1
 8001bc6:	f7ff ff95 	bl	8001af4 <LCD_Write_Cmd>
	LCD_Write_Data(0x00);
 8001bca:	2000      	movs	r0, #0
 8001bcc:	f7ff ffa0 	bl	8001b10 <LCD_Write_Data>
	LCD_Write_Data(0x1B);
 8001bd0:	201b      	movs	r0, #27
 8001bd2:	f7ff ff9d 	bl	8001b10 <LCD_Write_Data>

	/*  Display Function Control (B6h) */
	DEBUG_DELAY();
	LCD_Write_Cmd(0xB6);
 8001bd6:	20b6      	movs	r0, #182	; 0xb6
 8001bd8:	f7ff ff8c 	bl	8001af4 <LCD_Write_Cmd>
	LCD_Write_Data(0x0A);
 8001bdc:	200a      	movs	r0, #10
 8001bde:	f7ff ff97 	bl	8001b10 <LCD_Write_Data>
	LCD_Write_Data(0xA2);
 8001be2:	20a2      	movs	r0, #162	; 0xa2
 8001be4:	f7ff ff94 	bl	8001b10 <LCD_Write_Data>

	/* Power Control 1 (C0h) */
	DEBUG_DELAY();
	LCD_Write_Cmd(0xC0);
 8001be8:	20c0      	movs	r0, #192	; 0xc0
 8001bea:	f7ff ff83 	bl	8001af4 <LCD_Write_Cmd>
	LCD_Write_Data(0x35);
 8001bee:	2035      	movs	r0, #53	; 0x35
 8001bf0:	f7ff ff8e 	bl	8001b10 <LCD_Write_Data>

	/* Power Control 2 (C1h) */
	DEBUG_DELAY();
	LCD_Write_Cmd(0xC1);
 8001bf4:	20c1      	movs	r0, #193	; 0xc1
 8001bf6:	f7ff ff7d 	bl	8001af4 <LCD_Write_Cmd>
	LCD_Write_Data(0x11);
 8001bfa:	2011      	movs	r0, #17
 8001bfc:	f7ff ff88 	bl	8001b10 <LCD_Write_Data>

	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd(0xC5);
 8001c00:	20c5      	movs	r0, #197	; 0xc5
 8001c02:	f7ff ff77 	bl	8001af4 <LCD_Write_Cmd>
	LCD_Write_Data(0x45);
 8001c06:	2045      	movs	r0, #69	; 0x45
 8001c08:	f7ff ff82 	bl	8001b10 <LCD_Write_Data>
	LCD_Write_Data(0x45);
 8001c0c:	2045      	movs	r0, #69	; 0x45
 8001c0e:	f7ff ff7f 	bl	8001b10 <LCD_Write_Data>

	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd(0xC7);
 8001c12:	20c7      	movs	r0, #199	; 0xc7
 8001c14:	f7ff ff6e 	bl	8001af4 <LCD_Write_Cmd>
	LCD_Write_Data(0xA2);
 8001c18:	20a2      	movs	r0, #162	; 0xa2
 8001c1a:	f7ff ff79 	bl	8001b10 <LCD_Write_Data>

	/* Enable 3G (F2h) */
	LCD_Write_Cmd(0xF2);
 8001c1e:	20f2      	movs	r0, #242	; 0xf2
 8001c20:	f7ff ff68 	bl	8001af4 <LCD_Write_Cmd>
	LCD_Write_Data(0x00);
 8001c24:	2000      	movs	r0, #0
 8001c26:	f7ff ff73 	bl	8001b10 <LCD_Write_Data>

	/* Gamma Set (26h) */
	LCD_Write_Cmd(0x26);
 8001c2a:	2026      	movs	r0, #38	; 0x26
 8001c2c:	f7ff ff62 	bl	8001af4 <LCD_Write_Cmd>
	LCD_Write_Data(0x01);
 8001c30:	2001      	movs	r0, #1
 8001c32:	f7ff ff6d 	bl	8001b10 <LCD_Write_Data>
	DEBUG_DELAY();

	/* Positive Gamma Correction */
	LCD_Write_Cmd(0xE0); // Set Gamma
 8001c36:	20e0      	movs	r0, #224	; 0xe0
 8001c38:	f7ff ff5c 	bl	8001af4 <LCD_Write_Cmd>
	LCD_Write_Data(0x0F);
 8001c3c:	200f      	movs	r0, #15
 8001c3e:	f7ff ff67 	bl	8001b10 <LCD_Write_Data>
	LCD_Write_Data(0x26);
 8001c42:	2026      	movs	r0, #38	; 0x26
 8001c44:	f7ff ff64 	bl	8001b10 <LCD_Write_Data>
	LCD_Write_Data(0x24);
 8001c48:	2024      	movs	r0, #36	; 0x24
 8001c4a:	f7ff ff61 	bl	8001b10 <LCD_Write_Data>
	LCD_Write_Data(0x0B);
 8001c4e:	200b      	movs	r0, #11
 8001c50:	f7ff ff5e 	bl	8001b10 <LCD_Write_Data>
	LCD_Write_Data(0x0E);
 8001c54:	200e      	movs	r0, #14
 8001c56:	f7ff ff5b 	bl	8001b10 <LCD_Write_Data>
	LCD_Write_Data(0x09);
 8001c5a:	2009      	movs	r0, #9
 8001c5c:	f7ff ff58 	bl	8001b10 <LCD_Write_Data>
	LCD_Write_Data(0x54);
 8001c60:	2054      	movs	r0, #84	; 0x54
 8001c62:	f7ff ff55 	bl	8001b10 <LCD_Write_Data>
	LCD_Write_Data(0xA8);
 8001c66:	20a8      	movs	r0, #168	; 0xa8
 8001c68:	f7ff ff52 	bl	8001b10 <LCD_Write_Data>
	LCD_Write_Data(0x46);
 8001c6c:	2046      	movs	r0, #70	; 0x46
 8001c6e:	f7ff ff4f 	bl	8001b10 <LCD_Write_Data>
	LCD_Write_Data(0x0C);
 8001c72:	200c      	movs	r0, #12
 8001c74:	f7ff ff4c 	bl	8001b10 <LCD_Write_Data>
	LCD_Write_Data(0x17);
 8001c78:	2017      	movs	r0, #23
 8001c7a:	f7ff ff49 	bl	8001b10 <LCD_Write_Data>
	LCD_Write_Data(0x09);
 8001c7e:	2009      	movs	r0, #9
 8001c80:	f7ff ff46 	bl	8001b10 <LCD_Write_Data>
	LCD_Write_Data(0x0F);
 8001c84:	200f      	movs	r0, #15
 8001c86:	f7ff ff43 	bl	8001b10 <LCD_Write_Data>
	LCD_Write_Data(0x07);
 8001c8a:	2007      	movs	r0, #7
 8001c8c:	f7ff ff40 	bl	8001b10 <LCD_Write_Data>
	LCD_Write_Data(0x00);
 8001c90:	2000      	movs	r0, #0
 8001c92:	f7ff ff3d 	bl	8001b10 <LCD_Write_Data>

	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd(0XE1); // Set Gamma
 8001c96:	20e1      	movs	r0, #225	; 0xe1
 8001c98:	f7ff ff2c 	bl	8001af4 <LCD_Write_Cmd>
	LCD_Write_Data(0x00);
 8001c9c:	2000      	movs	r0, #0
 8001c9e:	f7ff ff37 	bl	8001b10 <LCD_Write_Data>
	LCD_Write_Data(0x19);
 8001ca2:	2019      	movs	r0, #25
 8001ca4:	f7ff ff34 	bl	8001b10 <LCD_Write_Data>
	LCD_Write_Data(0x1B);
 8001ca8:	201b      	movs	r0, #27
 8001caa:	f7ff ff31 	bl	8001b10 <LCD_Write_Data>
	LCD_Write_Data(0x04);
 8001cae:	2004      	movs	r0, #4
 8001cb0:	f7ff ff2e 	bl	8001b10 <LCD_Write_Data>
	LCD_Write_Data(0x10);
 8001cb4:	2010      	movs	r0, #16
 8001cb6:	f7ff ff2b 	bl	8001b10 <LCD_Write_Data>
	LCD_Write_Data(0x07);
 8001cba:	2007      	movs	r0, #7
 8001cbc:	f7ff ff28 	bl	8001b10 <LCD_Write_Data>
	LCD_Write_Data(0x2A);
 8001cc0:	202a      	movs	r0, #42	; 0x2a
 8001cc2:	f7ff ff25 	bl	8001b10 <LCD_Write_Data>
	LCD_Write_Data(0x47);
 8001cc6:	2047      	movs	r0, #71	; 0x47
 8001cc8:	f7ff ff22 	bl	8001b10 <LCD_Write_Data>
	LCD_Write_Data(0x39);
 8001ccc:	2039      	movs	r0, #57	; 0x39
 8001cce:	f7ff ff1f 	bl	8001b10 <LCD_Write_Data>
	LCD_Write_Data(0x03);
 8001cd2:	2003      	movs	r0, #3
 8001cd4:	f7ff ff1c 	bl	8001b10 <LCD_Write_Data>
	LCD_Write_Data(0x06);
 8001cd8:	2006      	movs	r0, #6
 8001cda:	f7ff ff19 	bl	8001b10 <LCD_Write_Data>
	LCD_Write_Data(0x06);
 8001cde:	2006      	movs	r0, #6
 8001ce0:	f7ff ff16 	bl	8001b10 <LCD_Write_Data>
	LCD_Write_Data(0x30);
 8001ce4:	2030      	movs	r0, #48	; 0x30
 8001ce6:	f7ff ff13 	bl	8001b10 <LCD_Write_Data>
	LCD_Write_Data(0x38);
 8001cea:	2038      	movs	r0, #56	; 0x38
 8001cec:	f7ff ff10 	bl	8001b10 <LCD_Write_Data>
	LCD_Write_Data(0x0F);
 8001cf0:	200f      	movs	r0, #15
 8001cf2:	f7ff ff0d 	bl	8001b10 <LCD_Write_Data>

	/* memory access control set */
	DEBUG_DELAY();
	LCD_Write_Cmd(0x36);
 8001cf6:	2036      	movs	r0, #54	; 0x36
 8001cf8:	f7ff fefc 	bl	8001af4 <LCD_Write_Cmd>
	LCD_Write_Data(0xC8);
 8001cfc:	20c8      	movs	r0, #200	; 0xc8
 8001cfe:	f7ff ff07 	bl	8001b10 <LCD_Write_Data>
	DEBUG_DELAY();

	/* column address control set */
	LCD_Write_Cmd(CMD_Set_COLUMN);
 8001d02:	202a      	movs	r0, #42	; 0x2a
 8001d04:	f7ff fef6 	bl	8001af4 <LCD_Write_Cmd>
	LCD_Write_Data(0x00);
 8001d08:	2000      	movs	r0, #0
 8001d0a:	f7ff ff01 	bl	8001b10 <LCD_Write_Data>
	LCD_Write_Data(0x00);
 8001d0e:	2000      	movs	r0, #0
 8001d10:	f7ff fefe 	bl	8001b10 <LCD_Write_Data>
	LCD_Write_Data(0x00);
 8001d14:	2000      	movs	r0, #0
 8001d16:	f7ff fefb 	bl	8001b10 <LCD_Write_Data>
	LCD_Write_Data(0xEF);
 8001d1a:	20ef      	movs	r0, #239	; 0xef
 8001d1c:	f7ff fef8 	bl	8001b10 <LCD_Write_Data>

	/* page address control set */
	DEBUG_DELAY();
	LCD_Write_Cmd(CMD_Set_PAGE);
 8001d20:	202b      	movs	r0, #43	; 0x2b
 8001d22:	f7ff fee7 	bl	8001af4 <LCD_Write_Cmd>
	LCD_Write_Data(0x00);
 8001d26:	2000      	movs	r0, #0
 8001d28:	f7ff fef2 	bl	8001b10 <LCD_Write_Data>
	LCD_Write_Data(0x00);
 8001d2c:	2000      	movs	r0, #0
 8001d2e:	f7ff feef 	bl	8001b10 <LCD_Write_Data>
	LCD_Write_Data(0x01);
 8001d32:	2001      	movs	r0, #1
 8001d34:	f7ff feec 	bl	8001b10 <LCD_Write_Data>
	LCD_Write_Data(0x3F);
 8001d38:	203f      	movs	r0, #63	; 0x3f
 8001d3a:	f7ff fee9 	bl	8001b10 <LCD_Write_Data>

	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY();
	LCD_Write_Cmd(0x3a);
 8001d3e:	203a      	movs	r0, #58	; 0x3a
 8001d40:	f7ff fed8 	bl	8001af4 <LCD_Write_Cmd>
	LCD_Write_Data(0x55);
 8001d44:	2055      	movs	r0, #85	; 0x55
 8001d46:	f7ff fee3 	bl	8001b10 <LCD_Write_Data>

	/* Sleep Out (11h)  */
	LCD_Write_Cmd(0x11);
 8001d4a:	2011      	movs	r0, #17
 8001d4c:	f7ff fed2 	bl	8001af4 <LCD_Write_Cmd>
	Delay(0xAFFf << 2);
 8001d50:	4803      	ldr	r0, [pc, #12]	; (8001d60 <LCD_REG_Config+0x230>)
 8001d52:	f7ff fe73 	bl	8001a3c <Delay>
	DEBUG_DELAY();

	/* Display ON (29h) */
	LCD_Write_Cmd(0x29);
 8001d56:	2029      	movs	r0, #41	; 0x29
 8001d58:	f7ff fecc 	bl	8001af4 <LCD_Write_Cmd>
}
 8001d5c:	bf00      	nop
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	0002bffc 	.word	0x0002bffc

08001d64 <LCD_OpenWindow>:

void LCD_OpenWindow(uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight)
{
 8001d64:	b590      	push	{r4, r7, lr}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4604      	mov	r4, r0
 8001d6c:	4608      	mov	r0, r1
 8001d6e:	4611      	mov	r1, r2
 8001d70:	461a      	mov	r2, r3
 8001d72:	4623      	mov	r3, r4
 8001d74:	80fb      	strh	r3, [r7, #6]
 8001d76:	4603      	mov	r3, r0
 8001d78:	80bb      	strh	r3, [r7, #4]
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	807b      	strh	r3, [r7, #2]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd(CMD_Set_COLUMN);
 8001d82:	202a      	movs	r0, #42	; 0x2a
 8001d84:	f7ff feb6 	bl	8001af4 <LCD_Write_Cmd>
	LCD_Write_Data(usCOLUMN >> 8);
 8001d88:	88fb      	ldrh	r3, [r7, #6]
 8001d8a:	0a1b      	lsrs	r3, r3, #8
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff febe 	bl	8001b10 <LCD_Write_Data>
	LCD_Write_Data(usCOLUMN & 0xff);
 8001d94:	88fb      	ldrh	r3, [r7, #6]
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff feb8 	bl	8001b10 <LCD_Write_Data>
	LCD_Write_Data((usCOLUMN + usWidth - 1) >> 8);
 8001da0:	88fa      	ldrh	r2, [r7, #6]
 8001da2:	887b      	ldrh	r3, [r7, #2]
 8001da4:	4413      	add	r3, r2
 8001da6:	3b01      	subs	r3, #1
 8001da8:	121b      	asrs	r3, r3, #8
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff feaf 	bl	8001b10 <LCD_Write_Data>
	LCD_Write_Data((usCOLUMN + usWidth - 1) & 0xff);
 8001db2:	88fa      	ldrh	r2, [r7, #6]
 8001db4:	887b      	ldrh	r3, [r7, #2]
 8001db6:	4413      	add	r3, r2
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff fea4 	bl	8001b10 <LCD_Write_Data>

	LCD_Write_Cmd(CMD_Set_PAGE);
 8001dc8:	202b      	movs	r0, #43	; 0x2b
 8001dca:	f7ff fe93 	bl	8001af4 <LCD_Write_Cmd>
	LCD_Write_Data(usPAGE >> 8);
 8001dce:	88bb      	ldrh	r3, [r7, #4]
 8001dd0:	0a1b      	lsrs	r3, r3, #8
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff fe9b 	bl	8001b10 <LCD_Write_Data>
	LCD_Write_Data(usPAGE & 0xff);
 8001dda:	88bb      	ldrh	r3, [r7, #4]
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff fe95 	bl	8001b10 <LCD_Write_Data>
	LCD_Write_Data((usPAGE + usHeight - 1) >> 8);
 8001de6:	88ba      	ldrh	r2, [r7, #4]
 8001de8:	883b      	ldrh	r3, [r7, #0]
 8001dea:	4413      	add	r3, r2
 8001dec:	3b01      	subs	r3, #1
 8001dee:	121b      	asrs	r3, r3, #8
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff fe8c 	bl	8001b10 <LCD_Write_Data>
	LCD_Write_Data((usPAGE + usHeight - 1) & 0xff);
 8001df8:	88ba      	ldrh	r2, [r7, #4]
 8001dfa:	883b      	ldrh	r3, [r7, #0]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	3b01      	subs	r3, #1
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff fe81 	bl	8001b10 <LCD_Write_Data>
}
 8001e0e:	bf00      	nop
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd90      	pop	{r4, r7, pc}

08001e16 <LCD_FillColor>:

void LCD_FillColor(uint32_t usPoint, uint16_t usColor)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b084      	sub	sp, #16
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
 8001e1e:	460b      	mov	r3, r1
 8001e20:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 8001e22:	2300      	movs	r3, #0
 8001e24:	60fb      	str	r3, [r7, #12]

	/* memory write */
	LCD_Write_Cmd(CMD_SetPixel);
 8001e26:	202c      	movs	r0, #44	; 0x2c
 8001e28:	f7ff fe64 	bl	8001af4 <LCD_Write_Cmd>

	for (i = 0; i < usPoint; i++)
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	e006      	b.n	8001e40 <LCD_FillColor+0x2a>
		LCD_Write_Data(usColor);
 8001e32:	887b      	ldrh	r3, [r7, #2]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff fe6b 	bl	8001b10 <LCD_Write_Data>
	for (i = 0; i < usPoint; i++)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d3f4      	bcc.n	8001e32 <LCD_FillColor+0x1c>
}
 8001e48:	bf00      	nop
 8001e4a:	bf00      	nop
 8001e4c:	3710      	adds	r7, #16
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <LCD_Clear>:

void LCD_Clear(uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor)
{
 8001e52:	b590      	push	{r4, r7, lr}
 8001e54:	b083      	sub	sp, #12
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	4604      	mov	r4, r0
 8001e5a:	4608      	mov	r0, r1
 8001e5c:	4611      	mov	r1, r2
 8001e5e:	461a      	mov	r2, r3
 8001e60:	4623      	mov	r3, r4
 8001e62:	80fb      	strh	r3, [r7, #6]
 8001e64:	4603      	mov	r3, r0
 8001e66:	80bb      	strh	r3, [r7, #4]
 8001e68:	460b      	mov	r3, r1
 8001e6a:	807b      	strh	r3, [r7, #2]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow(usCOLUMN, usPAGE, usWidth, usHeight);
 8001e70:	883b      	ldrh	r3, [r7, #0]
 8001e72:	887a      	ldrh	r2, [r7, #2]
 8001e74:	88b9      	ldrh	r1, [r7, #4]
 8001e76:	88f8      	ldrh	r0, [r7, #6]
 8001e78:	f7ff ff74 	bl	8001d64 <LCD_OpenWindow>
	LCD_FillColor(usWidth * usHeight, usColor);
 8001e7c:	887b      	ldrh	r3, [r7, #2]
 8001e7e:	883a      	ldrh	r2, [r7, #0]
 8001e80:	fb02 f303 	mul.w	r3, r2, r3
 8001e84:	461a      	mov	r2, r3
 8001e86:	8b3b      	ldrh	r3, [r7, #24]
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4610      	mov	r0, r2
 8001e8c:	f7ff ffc3 	bl	8001e16 <LCD_FillColor>
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd90      	pop	{r4, r7, pc}

08001e98 <LCD_DrawChar>:
		}
	}
}

void LCD_DrawChar(uint16_t usC, uint16_t usP, const char cChar)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	80fb      	strh	r3, [r7, #6]
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	80bb      	strh	r3, [r7, #4]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	ucRelativePositon = cChar - ' ';
 8001eaa:	78fb      	ldrb	r3, [r7, #3]
 8001eac:	3b20      	subs	r3, #32
 8001eae:	733b      	strb	r3, [r7, #12]

	LCD_OpenWindow(usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR);
 8001eb0:	88b9      	ldrh	r1, [r7, #4]
 8001eb2:	88f8      	ldrh	r0, [r7, #6]
 8001eb4:	2310      	movs	r3, #16
 8001eb6:	2208      	movs	r2, #8
 8001eb8:	f7ff ff54 	bl	8001d64 <LCD_OpenWindow>

	LCD_Write_Cmd(CMD_SetPixel);
 8001ebc:	202c      	movs	r0, #44	; 0x2c
 8001ebe:	f7ff fe19 	bl	8001af4 <LCD_Write_Cmd>

	for (ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage++)
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	73bb      	strb	r3, [r7, #14]
 8001ec6:	e023      	b.n	8001f10 <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608[ucRelativePositon][ucPage];
 8001ec8:	7b3a      	ldrb	r2, [r7, #12]
 8001eca:	7bbb      	ldrb	r3, [r7, #14]
 8001ecc:	4914      	ldr	r1, [pc, #80]	; (8001f20 <LCD_DrawChar+0x88>)
 8001ece:	0112      	lsls	r2, r2, #4
 8001ed0:	440a      	add	r2, r1
 8001ed2:	4413      	add	r3, r2
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	73fb      	strb	r3, [r7, #15]

		for (ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn++)
 8001ed8:	2300      	movs	r3, #0
 8001eda:	737b      	strb	r3, [r7, #13]
 8001edc:	e012      	b.n	8001f04 <LCD_DrawChar+0x6c>
		{
			if (ucTemp & 0x01)
 8001ede:	7bfb      	ldrb	r3, [r7, #15]
 8001ee0:	f003 0301 	and.w	r3, r3, #1
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d003      	beq.n	8001ef0 <LCD_DrawChar+0x58>
				LCD_Write_Data(0x001F);
 8001ee8:	201f      	movs	r0, #31
 8001eea:	f7ff fe11 	bl	8001b10 <LCD_Write_Data>
 8001eee:	e003      	b.n	8001ef8 <LCD_DrawChar+0x60>

			else
				LCD_Write_Data(0xFFFF);
 8001ef0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001ef4:	f7ff fe0c 	bl	8001b10 <LCD_Write_Data>

			ucTemp >>= 1;
 8001ef8:	7bfb      	ldrb	r3, [r7, #15]
 8001efa:	085b      	lsrs	r3, r3, #1
 8001efc:	73fb      	strb	r3, [r7, #15]
		for (ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn++)
 8001efe:	7b7b      	ldrb	r3, [r7, #13]
 8001f00:	3301      	adds	r3, #1
 8001f02:	737b      	strb	r3, [r7, #13]
 8001f04:	7b7b      	ldrb	r3, [r7, #13]
 8001f06:	2b07      	cmp	r3, #7
 8001f08:	d9e9      	bls.n	8001ede <LCD_DrawChar+0x46>
	for (ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage++)
 8001f0a:	7bbb      	ldrb	r3, [r7, #14]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	73bb      	strb	r3, [r7, #14]
 8001f10:	7bbb      	ldrb	r3, [r7, #14]
 8001f12:	2b0f      	cmp	r3, #15
 8001f14:	d9d8      	bls.n	8001ec8 <LCD_DrawChar+0x30>
		}
	}
}
 8001f16:	bf00      	nop
 8001f18:	bf00      	nop
 8001f1a:	3710      	adds	r7, #16
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	08006894 	.word	0x08006894

08001f24 <LCD_DrawString>:

void LCD_DrawString(uint16_t usC, uint16_t usP, const char *pStr)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	603a      	str	r2, [r7, #0]
 8001f2e:	80fb      	strh	r3, [r7, #6]
 8001f30:	460b      	mov	r3, r1
 8001f32:	80bb      	strh	r3, [r7, #4]
	while (*pStr != '\0')
 8001f34:	e01c      	b.n	8001f70 <LCD_DrawString+0x4c>
	{
		if ((usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR) > LCD_DispWindow_COLUMN)
 8001f36:	88fb      	ldrh	r3, [r7, #6]
 8001f38:	2be8      	cmp	r3, #232	; 0xe8
 8001f3a:	d904      	bls.n	8001f46 <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 8001f40:	88bb      	ldrh	r3, [r7, #4]
 8001f42:	3310      	adds	r3, #16
 8001f44:	80bb      	strh	r3, [r7, #4]
		}

		if ((usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR) > LCD_DispWindow_PAGE)
 8001f46:	88bb      	ldrh	r3, [r7, #4]
 8001f48:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8001f4c:	d903      	bls.n	8001f56 <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 8001f52:	2300      	movs	r3, #0
 8001f54:	80bb      	strh	r3, [r7, #4]
		}

		LCD_DrawChar(usC, usP, *pStr);
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	781a      	ldrb	r2, [r3, #0]
 8001f5a:	88b9      	ldrh	r1, [r7, #4]
 8001f5c:	88fb      	ldrh	r3, [r7, #6]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff ff9a 	bl	8001e98 <LCD_DrawChar>

		pStr++;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	3301      	adds	r3, #1
 8001f68:	603b      	str	r3, [r7, #0]

		usC += WIDTH_EN_CHAR;
 8001f6a:	88fb      	ldrh	r3, [r7, #6]
 8001f6c:	3308      	adds	r3, #8
 8001f6e:	80fb      	strh	r3, [r7, #6]
	while (*pStr != '\0')
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d1de      	bne.n	8001f36 <LCD_DrawString+0x12>
	}
}
 8001f78:	bf00      	nop
 8001f7a:	bf00      	nop
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
	...

08001f84 <LCD_DrawEllipse>:

// Task 3
volatile uint8_t ellipse[2 * 75 + 1][2 * 25 + 1];

void LCD_DrawEllipse(uint16_t usC, uint16_t usP, uint16_t SR, uint16_t LR, uint16_t usColor)
{
 8001f84:	b590      	push	{r4, r7, lr}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4604      	mov	r4, r0
 8001f8c:	4608      	mov	r0, r1
 8001f8e:	4611      	mov	r1, r2
 8001f90:	461a      	mov	r2, r3
 8001f92:	4623      	mov	r3, r4
 8001f94:	80fb      	strh	r3, [r7, #6]
 8001f96:	4603      	mov	r3, r0
 8001f98:	80bb      	strh	r3, [r7, #4]
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	807b      	strh	r3, [r7, #2]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	803b      	strh	r3, [r7, #0]
	memset(ellipse, 0, sizeof(ellipse));
 8001fa2:	f641 6215 	movw	r2, #7701	; 0x1e15
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	4818      	ldr	r0, [pc, #96]	; (800200c <LCD_DrawEllipse+0x88>)
 8001faa:	f003 ff4b 	bl	8005e44 <memset>
	uint8_t leftTopY = usC - SR;
 8001fae:	88fb      	ldrh	r3, [r7, #6]
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	887b      	ldrh	r3, [r7, #2]
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	73fb      	strb	r3, [r7, #15]
	uint8_t leftTopX = usP - LR;
 8001fba:	88bb      	ldrh	r3, [r7, #4]
 8001fbc:	b2da      	uxtb	r2, r3
 8001fbe:	883b      	ldrh	r3, [r7, #0]
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	73bb      	strb	r3, [r7, #14]
	LCD_OpenWindow(leftTopY, leftTopX, 2 * SR, 2 * LR);
 8001fc6:	7bfb      	ldrb	r3, [r7, #15]
 8001fc8:	b298      	uxth	r0, r3
 8001fca:	7bbb      	ldrb	r3, [r7, #14]
 8001fcc:	b299      	uxth	r1, r3
 8001fce:	887b      	ldrh	r3, [r7, #2]
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	883b      	ldrh	r3, [r7, #0]
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	f7ff fec3 	bl	8001d64 <LCD_OpenWindow>
	uint8_t usWidth = 2 * SR;
 8001fde:	887b      	ldrh	r3, [r7, #2]
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	737b      	strb	r3, [r7, #13]
	uint8_t usHeight = 2 * LR;
 8001fe6:	883b      	ldrh	r3, [r7, #0]
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	733b      	strb	r3, [r7, #12]
	LCD_FillColor(usWidth * usHeight, usColor);
 8001fee:	7b7b      	ldrb	r3, [r7, #13]
 8001ff0:	7b3a      	ldrb	r2, [r7, #12]
 8001ff2:	fb02 f303 	mul.w	r3, r2, r3
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	8c3b      	ldrh	r3, [r7, #32]
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4610      	mov	r0, r2
 8001ffe:	f7ff ff0a 	bl	8001e16 <LCD_FillColor>
}
 8002002:	bf00      	nop
 8002004:	3714      	adds	r7, #20
 8002006:	46bd      	mov	sp, r7
 8002008:	bd90      	pop	{r4, r7, pc}
 800200a:	bf00      	nop
 800200c:	20000274 	.word	0x20000274

08002010 <LCD_Cam_Gram>:
// This actually shows the image of the to the camera
void LCD_Cam_Gram()
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
	/* memory access control set */
	DEBUG_DELAY();
	LCD_Write_Cmd(0x36);
 8002014:	2036      	movs	r0, #54	; 0x36
 8002016:	f7ff fd6d 	bl	8001af4 <LCD_Write_Cmd>
	LCD_Write_Data(0x68);
 800201a:	2068      	movs	r0, #104	; 0x68
 800201c:	f7ff fd78 	bl	8001b10 <LCD_Write_Data>
	DEBUG_DELAY();

	/* column address control set */
	LCD_Write_Cmd(CMD_Set_COLUMN);
 8002020:	202a      	movs	r0, #42	; 0x2a
 8002022:	f7ff fd67 	bl	8001af4 <LCD_Write_Cmd>
	LCD_Write_Data(0x00);
 8002026:	2000      	movs	r0, #0
 8002028:	f7ff fd72 	bl	8001b10 <LCD_Write_Data>
	LCD_Write_Data(0x00);
 800202c:	2000      	movs	r0, #0
 800202e:	f7ff fd6f 	bl	8001b10 <LCD_Write_Data>
	LCD_Write_Data(0x01);
 8002032:	2001      	movs	r0, #1
 8002034:	f7ff fd6c 	bl	8001b10 <LCD_Write_Data>
	LCD_Write_Data(0x3F);
 8002038:	203f      	movs	r0, #63	; 0x3f
 800203a:	f7ff fd69 	bl	8001b10 <LCD_Write_Data>

	/* page address control set */
	DEBUG_DELAY();
	LCD_Write_Cmd(CMD_Set_PAGE);
 800203e:	202b      	movs	r0, #43	; 0x2b
 8002040:	f7ff fd58 	bl	8001af4 <LCD_Write_Cmd>
	LCD_Write_Data(0x00);
 8002044:	2000      	movs	r0, #0
 8002046:	f7ff fd63 	bl	8001b10 <LCD_Write_Data>
	LCD_Write_Data(0x00);
 800204a:	2000      	movs	r0, #0
 800204c:	f7ff fd60 	bl	8001b10 <LCD_Write_Data>
	LCD_Write_Data(0x00);
 8002050:	2000      	movs	r0, #0
 8002052:	f7ff fd5d 	bl	8001b10 <LCD_Write_Data>
	LCD_Write_Data(0xEF);
 8002056:	20ef      	movs	r0, #239	; 0xef
 8002058:	f7ff fd5a 	bl	8001b10 <LCD_Write_Data>

	LCD_Write_Cmd(0x2C);
 800205c:	202c      	movs	r0, #44	; 0x2c
 800205e:	f7ff fd49 	bl	8001af4 <LCD_Write_Cmd>
}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
	...

08002068 <drawCube>:

uint16_t cube_x[18] = {3, 10, 17, 31, 38, 45, 59, 66, 73, 87, 94, 101, 115, 122, 129, 143, 150, 157};
uint16_t cube_y[3] = {10, 17, 24};

void drawCube(char *face)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b088      	sub	sp, #32
 800206c:	af02      	add	r7, sp, #8
 800206e:	6078      	str	r0, [r7, #4]
	for (size_t i = 0; i < 6; i++)
 8002070:	2300      	movs	r3, #0
 8002072:	617b      	str	r3, [r7, #20]
 8002074:	e07e      	b.n	8002174 <drawCube+0x10c>
		for (size_t j = 0; j < 3; j++)
 8002076:	2300      	movs	r3, #0
 8002078:	613b      	str	r3, [r7, #16]
 800207a:	e075      	b.n	8002168 <drawCube+0x100>
			for (size_t k = 0; k < 3; k++)
 800207c:	2300      	movs	r3, #0
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	e06c      	b.n	800215c <drawCube+0xf4>
			{
				uint16_t color = BLACK;
 8002082:	2300      	movs	r3, #0
 8002084:	817b      	strh	r3, [r7, #10]
				switch (face[i * 9 + j * 3 + 2 - k])
 8002086:	697a      	ldr	r2, [r7, #20]
 8002088:	4613      	mov	r3, r2
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	1899      	adds	r1, r3, r2
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	4613      	mov	r3, r2
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	4413      	add	r3, r2
 8002096:	18ca      	adds	r2, r1, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	3302      	adds	r3, #2
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	4413      	add	r3, r2
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	3b42      	subs	r3, #66	; 0x42
 80020a6:	2b13      	cmp	r3, #19
 80020a8:	d841      	bhi.n	800212e <drawCube+0xc6>
 80020aa:	a201      	add	r2, pc, #4	; (adr r2, 80020b0 <drawCube+0x48>)
 80020ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020b0:	08002109 	.word	0x08002109
 80020b4:	0800212f 	.word	0x0800212f
 80020b8:	08002127 	.word	0x08002127
 80020bc:	0800212f 	.word	0x0800212f
 80020c0:	08002101 	.word	0x08002101
 80020c4:	0800212f 	.word	0x0800212f
 80020c8:	0800212f 	.word	0x0800212f
 80020cc:	0800212f 	.word	0x0800212f
 80020d0:	0800212f 	.word	0x0800212f
 80020d4:	0800212f 	.word	0x0800212f
 80020d8:	0800210f 	.word	0x0800210f
 80020dc:	0800212f 	.word	0x0800212f
 80020e0:	0800212f 	.word	0x0800212f
 80020e4:	0800212f 	.word	0x0800212f
 80020e8:	0800212f 	.word	0x0800212f
 80020ec:	0800212f 	.word	0x0800212f
 80020f0:	08002117 	.word	0x08002117
 80020f4:	0800212f 	.word	0x0800212f
 80020f8:	0800212f 	.word	0x0800212f
 80020fc:	0800211f 	.word	0x0800211f
				{
				case 'F':
					color = GREEN;
 8002100:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002104:	817b      	strh	r3, [r7, #10]
					break;
 8002106:	e013      	b.n	8002130 <drawCube+0xc8>
				case 'B':
					color = BLUE;
 8002108:	231f      	movs	r3, #31
 800210a:	817b      	strh	r3, [r7, #10]
					break;
 800210c:	e010      	b.n	8002130 <drawCube+0xc8>
				case 'L':
					color = RED;
 800210e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002112:	817b      	strh	r3, [r7, #10]
					break;
 8002114:	e00c      	b.n	8002130 <drawCube+0xc8>
				case 'R':
					color = ORANGE;
 8002116:	f64f 33a0 	movw	r3, #64416	; 0xfba0
 800211a:	817b      	strh	r3, [r7, #10]
					break;
 800211c:	e008      	b.n	8002130 <drawCube+0xc8>
				case 'U':
					color = YELLOW;
 800211e:	f64f 734e 	movw	r3, #65358	; 0xff4e
 8002122:	817b      	strh	r3, [r7, #10]
					break;
 8002124:	e004      	b.n	8002130 <drawCube+0xc8>
				case 'D':
					color = WHITE;
 8002126:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800212a:	817b      	strh	r3, [r7, #10]
					break;
 800212c:	e000      	b.n	8002130 <drawCube+0xc8>
				default:
					break;
 800212e:	bf00      	nop
				}
				LCD_DrawEllipse(cube_x[i * 3 + j], cube_y[k], 2, 2, color);
 8002130:	697a      	ldr	r2, [r7, #20]
 8002132:	4613      	mov	r3, r2
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	441a      	add	r2, r3
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	4413      	add	r3, r2
 800213c:	4a12      	ldr	r2, [pc, #72]	; (8002188 <drawCube+0x120>)
 800213e:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8002142:	4a12      	ldr	r2, [pc, #72]	; (800218c <drawCube+0x124>)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800214a:	897b      	ldrh	r3, [r7, #10]
 800214c:	9300      	str	r3, [sp, #0]
 800214e:	2302      	movs	r3, #2
 8002150:	2202      	movs	r2, #2
 8002152:	f7ff ff17 	bl	8001f84 <LCD_DrawEllipse>
			for (size_t k = 0; k < 3; k++)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	3301      	adds	r3, #1
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2b02      	cmp	r3, #2
 8002160:	d98f      	bls.n	8002082 <drawCube+0x1a>
		for (size_t j = 0; j < 3; j++)
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	3301      	adds	r3, #1
 8002166:	613b      	str	r3, [r7, #16]
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	2b02      	cmp	r3, #2
 800216c:	d986      	bls.n	800207c <drawCube+0x14>
	for (size_t i = 0; i < 6; i++)
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	3301      	adds	r3, #1
 8002172:	617b      	str	r3, [r7, #20]
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	2b05      	cmp	r3, #5
 8002178:	f67f af7d 	bls.w	8002076 <drawCube+0xe>
			}
}
 800217c:	bf00      	nop
 800217e:	bf00      	nop
 8002180:	3718      	adds	r7, #24
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	2000011c 	.word	0x2000011c
 800218c:	20000140 	.word	0x20000140

08002190 <K>:
extern void rotateInSpdMode(uint8_t ID, uint8_t dir, uint16_t speed);

volatile int rotate_flag = 0;
volatile unsigned char cube[6][9] = {0};
void K()
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
    HAL_Delay(800);
 8002194:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002198:	f001 ffd6 	bl	8004148 <HAL_Delay>
    rotateInPosMode(3, 0, 90, 1);
 800219c:	2301      	movs	r3, #1
 800219e:	225a      	movs	r2, #90	; 0x5a
 80021a0:	2100      	movs	r1, #0
 80021a2:	2003      	movs	r0, #3
 80021a4:	f000 fcfc 	bl	8002ba0 <rotateInPosMode>
    rotateInPosMode(1, 1, 90, 0);
 80021a8:	2300      	movs	r3, #0
 80021aa:	225a      	movs	r2, #90	; 0x5a
 80021ac:	2101      	movs	r1, #1
 80021ae:	2001      	movs	r0, #1
 80021b0:	f000 fcf6 	bl	8002ba0 <rotateInPosMode>
    ++rotate_flag;
 80021b4:	4b03      	ldr	r3, [pc, #12]	; (80021c4 <K+0x34>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	3301      	adds	r3, #1
 80021ba:	4a02      	ldr	r2, [pc, #8]	; (80021c4 <K+0x34>)
 80021bc:	6013      	str	r3, [r2, #0]
}
 80021be:	bf00      	nop
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	2000208c 	.word	0x2000208c

080021c8 <C>:

void C()

{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
    rotateInPosMode(2, 1, 119, 1);
 80021cc:	2301      	movs	r3, #1
 80021ce:	2277      	movs	r2, #119	; 0x77
 80021d0:	2101      	movs	r1, #1
 80021d2:	2002      	movs	r0, #2
 80021d4:	f000 fce4 	bl	8002ba0 <rotateInPosMode>
    HAL_Delay(50);
 80021d8:	2032      	movs	r0, #50	; 0x32
 80021da:	f001 ffb5 	bl	8004148 <HAL_Delay>
    rotateInPosMode(2, 0, 29, 1);
 80021de:	2301      	movs	r3, #1
 80021e0:	221d      	movs	r2, #29
 80021e2:	2100      	movs	r1, #0
 80021e4:	2002      	movs	r0, #2
 80021e6:	f000 fcdb 	bl	8002ba0 <rotateInPosMode>
}
 80021ea:	bf00      	nop
 80021ec:	bd80      	pop	{r7, pc}

080021ee <C1>:

void C1()

{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	af00      	add	r7, sp, #0
    rotateInPosMode(2, 0, 117, 1);
 80021f2:	2301      	movs	r3, #1
 80021f4:	2275      	movs	r2, #117	; 0x75
 80021f6:	2100      	movs	r1, #0
 80021f8:	2002      	movs	r0, #2
 80021fa:	f000 fcd1 	bl	8002ba0 <rotateInPosMode>
    HAL_Delay(50);
 80021fe:	2032      	movs	r0, #50	; 0x32
 8002200:	f001 ffa2 	bl	8004148 <HAL_Delay>
    rotateInPosMode(2, 1, 27, 1);
 8002204:	2301      	movs	r3, #1
 8002206:	221b      	movs	r2, #27
 8002208:	2101      	movs	r1, #1
 800220a:	2002      	movs	r0, #2
 800220c:	f000 fcc8 	bl	8002ba0 <rotateInPosMode>
}
 8002210:	bf00      	nop
 8002212:	bd80      	pop	{r7, pc}

08002214 <C2>:

void C2()

{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
    rotateInPosMode(2, 0, 207, 1);
 8002218:	2301      	movs	r3, #1
 800221a:	22cf      	movs	r2, #207	; 0xcf
 800221c:	2100      	movs	r1, #0
 800221e:	2002      	movs	r0, #2
 8002220:	f000 fcbe 	bl	8002ba0 <rotateInPosMode>
    HAL_Delay(50);
 8002224:	2032      	movs	r0, #50	; 0x32
 8002226:	f001 ff8f 	bl	8004148 <HAL_Delay>
    rotateInPosMode(2, 1, 27, 1);
 800222a:	2301      	movs	r3, #1
 800222c:	221b      	movs	r2, #27
 800222e:	2101      	movs	r1, #1
 8002230:	2002      	movs	r0, #2
 8002232:	f000 fcb5 	bl	8002ba0 <rotateInPosMode>
}
 8002236:	bf00      	nop
 8002238:	bd80      	pop	{r7, pc}
	...

0800223c <b>:

void b()
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
    while (rotate_flag % 4 != 0)
 8002240:	e001      	b.n	8002246 <b+0xa>
        K();
 8002242:	f7ff ffa5 	bl	8002190 <K>
    while (rotate_flag % 4 != 0)
 8002246:	4b07      	ldr	r3, [pc, #28]	; (8002264 <b+0x28>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0303 	and.w	r3, r3, #3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1f7      	bne.n	8002242 <b+0x6>
    HAL_Delay(500);
 8002252:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002256:	f001 ff77 	bl	8004148 <HAL_Delay>
    C();
 800225a:	f7ff ffb5 	bl	80021c8 <C>
}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	2000208c 	.word	0x2000208c

08002268 <b1>:

void b1()
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
    while (rotate_flag % 4 != 0)
 800226c:	e001      	b.n	8002272 <b1+0xa>
        K();
 800226e:	f7ff ff8f 	bl	8002190 <K>
    while (rotate_flag % 4 != 0)
 8002272:	4b07      	ldr	r3, [pc, #28]	; (8002290 <b1+0x28>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1f7      	bne.n	800226e <b1+0x6>
    HAL_Delay(500);
 800227e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002282:	f001 ff61 	bl	8004148 <HAL_Delay>
    C1();
 8002286:	f7ff ffb2 	bl	80021ee <C1>
}
 800228a:	bf00      	nop
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	2000208c 	.word	0x2000208c

08002294 <b2>:

void b2()
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
    while (rotate_flag % 4 != 0)
 8002298:	e001      	b.n	800229e <b2+0xa>
        K();
 800229a:	f7ff ff79 	bl	8002190 <K>
    while (rotate_flag % 4 != 0)
 800229e:	4b07      	ldr	r3, [pc, #28]	; (80022bc <b2+0x28>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0303 	and.w	r3, r3, #3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1f7      	bne.n	800229a <b2+0x6>
    HAL_Delay(500);
 80022aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80022ae:	f001 ff4b 	bl	8004148 <HAL_Delay>
    C2();
 80022b2:	f7ff ffaf 	bl	8002214 <C2>
}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	2000208c 	.word	0x2000208c

080022c0 <u>:

void u()
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
    while (rotate_flag % 4 != 1)
 80022c4:	e001      	b.n	80022ca <u+0xa>
        K();
 80022c6:	f7ff ff63 	bl	8002190 <K>
    while (rotate_flag % 4 != 1)
 80022ca:	4b09      	ldr	r3, [pc, #36]	; (80022f0 <u+0x30>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	425a      	negs	r2, r3
 80022d0:	f003 0303 	and.w	r3, r3, #3
 80022d4:	f002 0203 	and.w	r2, r2, #3
 80022d8:	bf58      	it	pl
 80022da:	4253      	negpl	r3, r2
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d1f2      	bne.n	80022c6 <u+0x6>
    HAL_Delay(500);
 80022e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80022e4:	f001 ff30 	bl	8004148 <HAL_Delay>
    C();
 80022e8:	f7ff ff6e 	bl	80021c8 <C>
}
 80022ec:	bf00      	nop
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	2000208c 	.word	0x2000208c

080022f4 <u1>:

void u1()
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
    while (rotate_flag % 4 != 1)
 80022f8:	e001      	b.n	80022fe <u1+0xa>
        K();
 80022fa:	f7ff ff49 	bl	8002190 <K>
    while (rotate_flag % 4 != 1)
 80022fe:	4b09      	ldr	r3, [pc, #36]	; (8002324 <u1+0x30>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	425a      	negs	r2, r3
 8002304:	f003 0303 	and.w	r3, r3, #3
 8002308:	f002 0203 	and.w	r2, r2, #3
 800230c:	bf58      	it	pl
 800230e:	4253      	negpl	r3, r2
 8002310:	2b01      	cmp	r3, #1
 8002312:	d1f2      	bne.n	80022fa <u1+0x6>
    HAL_Delay(500);
 8002314:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002318:	f001 ff16 	bl	8004148 <HAL_Delay>
    C1();
 800231c:	f7ff ff67 	bl	80021ee <C1>
}
 8002320:	bf00      	nop
 8002322:	bd80      	pop	{r7, pc}
 8002324:	2000208c 	.word	0x2000208c

08002328 <u2>:

void u2()
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
    while (rotate_flag % 4 != 1)
 800232c:	e001      	b.n	8002332 <u2+0xa>
        K();
 800232e:	f7ff ff2f 	bl	8002190 <K>
    while (rotate_flag % 4 != 1)
 8002332:	4b09      	ldr	r3, [pc, #36]	; (8002358 <u2+0x30>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	425a      	negs	r2, r3
 8002338:	f003 0303 	and.w	r3, r3, #3
 800233c:	f002 0203 	and.w	r2, r2, #3
 8002340:	bf58      	it	pl
 8002342:	4253      	negpl	r3, r2
 8002344:	2b01      	cmp	r3, #1
 8002346:	d1f2      	bne.n	800232e <u2+0x6>
    HAL_Delay(500);
 8002348:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800234c:	f001 fefc 	bl	8004148 <HAL_Delay>
    C2();
 8002350:	f7ff ff60 	bl	8002214 <C2>
}
 8002354:	bf00      	nop
 8002356:	bd80      	pop	{r7, pc}
 8002358:	2000208c 	.word	0x2000208c

0800235c <f>:

void f()
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
    while (rotate_flag % 4 != 2)
 8002360:	e001      	b.n	8002366 <f+0xa>
        K();
 8002362:	f7ff ff15 	bl	8002190 <K>
    while (rotate_flag % 4 != 2)
 8002366:	4b09      	ldr	r3, [pc, #36]	; (800238c <f+0x30>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	425a      	negs	r2, r3
 800236c:	f003 0303 	and.w	r3, r3, #3
 8002370:	f002 0203 	and.w	r2, r2, #3
 8002374:	bf58      	it	pl
 8002376:	4253      	negpl	r3, r2
 8002378:	2b02      	cmp	r3, #2
 800237a:	d1f2      	bne.n	8002362 <f+0x6>
    HAL_Delay(500);
 800237c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002380:	f001 fee2 	bl	8004148 <HAL_Delay>
    C();
 8002384:	f7ff ff20 	bl	80021c8 <C>
}
 8002388:	bf00      	nop
 800238a:	bd80      	pop	{r7, pc}
 800238c:	2000208c 	.word	0x2000208c

08002390 <f1>:

void f1()
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
    while (rotate_flag % 4 != 2)
 8002394:	e001      	b.n	800239a <f1+0xa>
        K();
 8002396:	f7ff fefb 	bl	8002190 <K>
    while (rotate_flag % 4 != 2)
 800239a:	4b09      	ldr	r3, [pc, #36]	; (80023c0 <f1+0x30>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	425a      	negs	r2, r3
 80023a0:	f003 0303 	and.w	r3, r3, #3
 80023a4:	f002 0203 	and.w	r2, r2, #3
 80023a8:	bf58      	it	pl
 80023aa:	4253      	negpl	r3, r2
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d1f2      	bne.n	8002396 <f1+0x6>
    HAL_Delay(500);
 80023b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80023b4:	f001 fec8 	bl	8004148 <HAL_Delay>
    C1();
 80023b8:	f7ff ff19 	bl	80021ee <C1>
}
 80023bc:	bf00      	nop
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	2000208c 	.word	0x2000208c

080023c4 <f2>:

void f2()
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
    while (rotate_flag % 4 != 2)
 80023c8:	e001      	b.n	80023ce <f2+0xa>
        K();
 80023ca:	f7ff fee1 	bl	8002190 <K>
    while (rotate_flag % 4 != 2)
 80023ce:	4b09      	ldr	r3, [pc, #36]	; (80023f4 <f2+0x30>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	425a      	negs	r2, r3
 80023d4:	f003 0303 	and.w	r3, r3, #3
 80023d8:	f002 0203 	and.w	r2, r2, #3
 80023dc:	bf58      	it	pl
 80023de:	4253      	negpl	r3, r2
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d1f2      	bne.n	80023ca <f2+0x6>
    HAL_Delay(500);
 80023e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80023e8:	f001 feae 	bl	8004148 <HAL_Delay>
    C2();
 80023ec:	f7ff ff12 	bl	8002214 <C2>
}
 80023f0:	bf00      	nop
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	2000208c 	.word	0x2000208c

080023f8 <d>:

void d()
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
    while (rotate_flag % 4 != 3)
 80023fc:	e001      	b.n	8002402 <d+0xa>
        K();
 80023fe:	f7ff fec7 	bl	8002190 <K>
    while (rotate_flag % 4 != 3)
 8002402:	4b09      	ldr	r3, [pc, #36]	; (8002428 <d+0x30>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	425a      	negs	r2, r3
 8002408:	f003 0303 	and.w	r3, r3, #3
 800240c:	f002 0203 	and.w	r2, r2, #3
 8002410:	bf58      	it	pl
 8002412:	4253      	negpl	r3, r2
 8002414:	2b03      	cmp	r3, #3
 8002416:	d1f2      	bne.n	80023fe <d+0x6>
    HAL_Delay(500);
 8002418:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800241c:	f001 fe94 	bl	8004148 <HAL_Delay>
    C();
 8002420:	f7ff fed2 	bl	80021c8 <C>
}
 8002424:	bf00      	nop
 8002426:	bd80      	pop	{r7, pc}
 8002428:	2000208c 	.word	0x2000208c

0800242c <d1>:

void d1()
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
    while (rotate_flag % 4 != 3)
 8002430:	e001      	b.n	8002436 <d1+0xa>
        K();
 8002432:	f7ff fead 	bl	8002190 <K>
    while (rotate_flag % 4 != 3)
 8002436:	4b09      	ldr	r3, [pc, #36]	; (800245c <d1+0x30>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	425a      	negs	r2, r3
 800243c:	f003 0303 	and.w	r3, r3, #3
 8002440:	f002 0203 	and.w	r2, r2, #3
 8002444:	bf58      	it	pl
 8002446:	4253      	negpl	r3, r2
 8002448:	2b03      	cmp	r3, #3
 800244a:	d1f2      	bne.n	8002432 <d1+0x6>
    HAL_Delay(500);
 800244c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002450:	f001 fe7a 	bl	8004148 <HAL_Delay>
    C1();
 8002454:	f7ff fecb 	bl	80021ee <C1>
}
 8002458:	bf00      	nop
 800245a:	bd80      	pop	{r7, pc}
 800245c:	2000208c 	.word	0x2000208c

08002460 <d2>:

void d2()
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
    while (rotate_flag % 4 != 3)
 8002464:	e001      	b.n	800246a <d2+0xa>
        K();
 8002466:	f7ff fe93 	bl	8002190 <K>
    while (rotate_flag % 4 != 3)
 800246a:	4b09      	ldr	r3, [pc, #36]	; (8002490 <d2+0x30>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	425a      	negs	r2, r3
 8002470:	f003 0303 	and.w	r3, r3, #3
 8002474:	f002 0203 	and.w	r2, r2, #3
 8002478:	bf58      	it	pl
 800247a:	4253      	negpl	r3, r2
 800247c:	2b03      	cmp	r3, #3
 800247e:	d1f2      	bne.n	8002466 <d2+0x6>
    HAL_Delay(500);
 8002480:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002484:	f001 fe60 	bl	8004148 <HAL_Delay>
    C2();
 8002488:	f7ff fec4 	bl	8002214 <C2>
}
 800248c:	bf00      	nop
 800248e:	bd80      	pop	{r7, pc}
 8002490:	2000208c 	.word	0x2000208c

08002494 <r>:

void r() { rotateInPosMode(1, 0, 270, 1); }
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
 8002498:	2301      	movs	r3, #1
 800249a:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800249e:	2100      	movs	r1, #0
 80024a0:	2001      	movs	r0, #1
 80024a2:	f000 fb7d 	bl	8002ba0 <rotateInPosMode>
 80024a6:	bf00      	nop
 80024a8:	bd80      	pop	{r7, pc}

080024aa <r1>:
void r1() { rotateInPosMode(1, 0, 180, 1); }
 80024aa:	b580      	push	{r7, lr}
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	2301      	movs	r3, #1
 80024b0:	22b4      	movs	r2, #180	; 0xb4
 80024b2:	2100      	movs	r1, #0
 80024b4:	2001      	movs	r0, #1
 80024b6:	f000 fb73 	bl	8002ba0 <rotateInPosMode>
 80024ba:	bf00      	nop
 80024bc:	bd80      	pop	{r7, pc}

080024be <r2>:
void r2() { rotateInPosMode(1, 0, 90, 1); }
 80024be:	b580      	push	{r7, lr}
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	2301      	movs	r3, #1
 80024c4:	225a      	movs	r2, #90	; 0x5a
 80024c6:	2100      	movs	r1, #0
 80024c8:	2001      	movs	r0, #1
 80024ca:	f000 fb69 	bl	8002ba0 <rotateInPosMode>
 80024ce:	bf00      	nop
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <l>:

void l() { rotateInPosMode(3, 1, 90, 1); }
 80024d2:	b580      	push	{r7, lr}
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	2301      	movs	r3, #1
 80024d8:	225a      	movs	r2, #90	; 0x5a
 80024da:	2101      	movs	r1, #1
 80024dc:	2003      	movs	r0, #3
 80024de:	f000 fb5f 	bl	8002ba0 <rotateInPosMode>
 80024e2:	bf00      	nop
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <l1>:
void l1() { rotateInPosMode(3, 1, 180, 1); }
 80024e6:	b580      	push	{r7, lr}
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	2301      	movs	r3, #1
 80024ec:	22b4      	movs	r2, #180	; 0xb4
 80024ee:	2101      	movs	r1, #1
 80024f0:	2003      	movs	r0, #3
 80024f2:	f000 fb55 	bl	8002ba0 <rotateInPosMode>
 80024f6:	bf00      	nop
 80024f8:	bd80      	pop	{r7, pc}

080024fa <l2>:
void l2() { rotateInPosMode(3, 1, 270, 1); }
 80024fa:	b580      	push	{r7, lr}
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	2301      	movs	r3, #1
 8002500:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8002504:	2101      	movs	r1, #1
 8002506:	2003      	movs	r0, #3
 8002508:	f000 fb4a 	bl	8002ba0 <rotateInPosMode>
 800250c:	bf00      	nop
 800250e:	bd80      	pop	{r7, pc}

08002510 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002510:	b590      	push	{r4, r7, lr}
 8002512:	b0eb      	sub	sp, #428	; 0x1ac
 8002514:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002516:	f001 fdb5 	bl	8004084 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800251a:	f000 faf7 	bl	8002b0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800251e:	f7ff f995 	bl	800184c <MX_GPIO_Init>
  MX_FSMC_Init();
 8002522:	f7ff f8e1 	bl	80016e8 <MX_FSMC_Init>
  MX_USART1_UART_Init();
 8002526:	f001 fc27 	bl	8003d78 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800252a:	f001 fc4f 	bl	8003dcc <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  motor_flag = 7;
 800252e:	4b4e      	ldr	r3, [pc, #312]	; (8002668 <main+0x158>)
 8002530:	2207      	movs	r2, #7
 8002532:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart1, (uint8_t *)&RxBuffer, 3);
 8002534:	2203      	movs	r2, #3
 8002536:	494d      	ldr	r1, [pc, #308]	; (800266c <main+0x15c>)
 8002538:	484d      	ldr	r0, [pc, #308]	; (8002670 <main+0x160>)
 800253a:	f002 ff6f 	bl	800541c <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart3, (uint8_t *)&rx_buffer, 1);
 800253e:	2201      	movs	r2, #1
 8002540:	494c      	ldr	r1, [pc, #304]	; (8002674 <main+0x164>)
 8002542:	484d      	ldr	r0, [pc, #308]	; (8002678 <main+0x168>)
 8002544:	f002 ff6a 	bl	800541c <HAL_UART_Receive_IT>
  LCD_INIT();
 8002548:	f7ff fa89 	bl	8001a5e <LCD_INIT>
  cube_t cube;
  memset(cube.face, 0, 54);
 800254c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002550:	2236      	movs	r2, #54	; 0x36
 8002552:	2100      	movs	r1, #0
 8002554:	4618      	mov	r0, r3
 8002556:	f003 fc75 	bl	8005e44 <memset>
  cube.face[4] = 'U';
 800255a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800255e:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002562:	2255      	movs	r2, #85	; 0x55
 8002564:	711a      	strb	r2, [r3, #4]
  cube.face[13] = 'R';
 8002566:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800256a:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800256e:	2252      	movs	r2, #82	; 0x52
 8002570:	735a      	strb	r2, [r3, #13]
  cube.face[22] = 'F';
 8002572:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002576:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800257a:	2246      	movs	r2, #70	; 0x46
 800257c:	759a      	strb	r2, [r3, #22]
  cube.face[31] = 'D';
 800257e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002582:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002586:	2244      	movs	r2, #68	; 0x44
 8002588:	77da      	strb	r2, [r3, #31]
  cube.face[40] = 'L';
 800258a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800258e:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002592:	224c      	movs	r2, #76	; 0x4c
 8002594:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  cube.face[49] = 'B';
 8002598:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800259c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80025a0:	2242      	movs	r2, #66	; 0x42
 80025a2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  // char line_buffer[54]  = "BBBFULRUBUURFRRRDFDFLUFDLRUUUFFDRLDLRRFLLBBLFDLUBBDDBD";
  // memcpy(cube.face, line_buffer, 54);
  LCD_Clear(50, 80, 140, 70, RED);
 80025a6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80025aa:	9300      	str	r3, [sp, #0]
 80025ac:	2346      	movs	r3, #70	; 0x46
 80025ae:	228c      	movs	r2, #140	; 0x8c
 80025b0:	2150      	movs	r1, #80	; 0x50
 80025b2:	2032      	movs	r0, #50	; 0x32
 80025b4:	f7ff fc4d 	bl	8001e52 <LCD_Clear>
  LCD_DrawString(75, 100, "PROGRAM START");
 80025b8:	4a30      	ldr	r2, [pc, #192]	; (800267c <main+0x16c>)
 80025ba:	2164      	movs	r1, #100	; 0x64
 80025bc:	204b      	movs	r0, #75	; 0x4b
 80025be:	f7ff fcb1 	bl	8001f24 <LCD_DrawString>
  // LCD_Clear(0, 0, 240, 40, CYAN);
  drawCube(cube.face);
 80025c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7ff fd4e 	bl	8002068 <drawCube>

  HAL_Delay(2000);
 80025cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80025d0:	f001 fdba 	bl	8004148 <HAL_Delay>

  while (Ov7725_Init() != SUCCESS)
 80025d4:	bf00      	nop
 80025d6:	f7fe fce9 	bl	8000fac <Ov7725_Init>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d1fa      	bne.n	80025d6 <main+0xc6>
    ;
  Ov7725_vsync = 0;
 80025e0:	4b27      	ldr	r3, [pc, #156]	; (8002680 <main+0x170>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	701a      	strb	r2, [r3, #0]
  uint8_t cnt = 0;
 80025e6:	2300      	movs	r3, #0
 80025e8:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
  uint8_t startCam = 0;
 80025ec:	2300      	movs	r3, #0
 80025ee:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
  while (1 && bt_flags != 4)
 80025f2:	e270      	b.n	8002ad6 <main+0x5c6>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    if (bt_flags == 2)
 80025f4:	4b23      	ldr	r3, [pc, #140]	; (8002684 <main+0x174>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d102      	bne.n	8002604 <main+0xf4>
      startCam = 1;
 80025fe:	2301      	movs	r3, #1
 8002600:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
    if (startCam)
 8002604:	f897 319e 	ldrb.w	r3, [r7, #414]	; 0x19e
 8002608:	2b00      	cmp	r3, #0
 800260a:	f000 8264 	beq.w	8002ad6 <main+0x5c6>
    {
      if (Ov7725_vsync == 2 && cnt < 12)
 800260e:	4b1c      	ldr	r3, [pc, #112]	; (8002680 <main+0x170>)
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	f040 81b7 	bne.w	8002988 <main+0x478>
 800261a:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 800261e:	2b0b      	cmp	r3, #11
 8002620:	f200 81b2 	bhi.w	8002988 <main+0x478>
      {
        FIFO_PREPARE;
 8002624:	4b18      	ldr	r3, [pc, #96]	; (8002688 <main+0x178>)
 8002626:	2204      	movs	r2, #4
 8002628:	615a      	str	r2, [r3, #20]
 800262a:	4b18      	ldr	r3, [pc, #96]	; (800268c <main+0x17c>)
 800262c:	2220      	movs	r2, #32
 800262e:	615a      	str	r2, [r3, #20]
 8002630:	4b16      	ldr	r3, [pc, #88]	; (800268c <main+0x17c>)
 8002632:	2220      	movs	r2, #32
 8002634:	611a      	str	r2, [r3, #16]
 8002636:	4b14      	ldr	r3, [pc, #80]	; (8002688 <main+0x178>)
 8002638:	2204      	movs	r2, #4
 800263a:	611a      	str	r2, [r3, #16]
 800263c:	4b13      	ldr	r3, [pc, #76]	; (800268c <main+0x17c>)
 800263e:	2220      	movs	r2, #32
 8002640:	615a      	str	r2, [r3, #20]
 8002642:	4b12      	ldr	r3, [pc, #72]	; (800268c <main+0x17c>)
 8002644:	2220      	movs	r2, #32
 8002646:	611a      	str	r2, [r3, #16]
        //	LCD_Rst();
        uint16_t temp_colors[9];
        uint16_t squareColors[9];
        //	uint16_t x, y;
        uint16_t Camera_Data;
        memset(squareColors, 0, sizeof(squareColors));
 8002648:	1d3b      	adds	r3, r7, #4
 800264a:	2212      	movs	r2, #18
 800264c:	2100      	movs	r1, #0
 800264e:	4618      	mov	r0, r3
 8002650:	f003 fbf8 	bl	8005e44 <memset>
        LCD_Cam_Gram();
 8002654:	f7ff fcdc 	bl	8002010 <LCD_Cam_Gram>
        for (int i = 0; i < 240; i++)
 8002658:	2300      	movs	r3, #0
 800265a:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 800265e:	e0d3      	b.n	8002808 <main+0x2f8>
        {
          for (int j = 0; j < 320; j++)
 8002660:	2300      	movs	r3, #0
 8002662:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8002666:	e0c4      	b.n	80027f2 <main+0x2e2>
 8002668:	20002092 	.word	0x20002092
 800266c:	20002094 	.word	0x20002094
 8002670:	200020a0 	.word	0x200020a0
 8002674:	20002091 	.word	0x20002091
 8002678:	200020e0 	.word	0x200020e0
 800267c:	08006858 	.word	0x08006858
 8002680:	20002090 	.word	0x20002090
 8002684:	2000209c 	.word	0x2000209c
 8002688:	40010800 	.word	0x40010800
 800268c:	40011000 	.word	0x40011000
          {
            READ_FIFO_PIXEL(Camera_Data);
 8002690:	2300      	movs	r3, #0
 8002692:	f8a7 3190 	strh.w	r3, [r7, #400]	; 0x190
 8002696:	4bb8      	ldr	r3, [pc, #736]	; (8002978 <main+0x468>)
 8002698:	2220      	movs	r2, #32
 800269a:	615a      	str	r2, [r3, #20]
 800269c:	4bb7      	ldr	r3, [pc, #732]	; (800297c <main+0x46c>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80026a6:	f8a7 3190 	strh.w	r3, [r7, #400]	; 0x190
 80026aa:	4bb3      	ldr	r3, [pc, #716]	; (8002978 <main+0x468>)
 80026ac:	2220      	movs	r2, #32
 80026ae:	611a      	str	r2, [r3, #16]
 80026b0:	4bb1      	ldr	r3, [pc, #708]	; (8002978 <main+0x468>)
 80026b2:	2220      	movs	r2, #32
 80026b4:	615a      	str	r2, [r3, #20]
 80026b6:	4bb1      	ldr	r3, [pc, #708]	; (800297c <main+0x46c>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	0a1b      	lsrs	r3, r3, #8
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	b29a      	uxth	r2, r3
 80026c0:	f8b7 3190 	ldrh.w	r3, [r7, #400]	; 0x190
 80026c4:	4313      	orrs	r3, r2
 80026c6:	f8a7 3190 	strh.w	r3, [r7, #400]	; 0x190
 80026ca:	4bab      	ldr	r3, [pc, #684]	; (8002978 <main+0x468>)
 80026cc:	2220      	movs	r2, #32
 80026ce:	611a      	str	r2, [r3, #16]
            LCD_Write_Data(Camera_Data);
 80026d0:	f8b7 3190 	ldrh.w	r3, [r7, #400]	; 0x190
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7ff fa1b 	bl	8001b10 <LCD_Write_Data>
            // bottom row
            if (j == 110 && i == 60)
 80026da:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80026de:	2b6e      	cmp	r3, #110	; 0x6e
 80026e0:	d10a      	bne.n	80026f8 <main+0x1e8>
 80026e2:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80026e6:	2b3c      	cmp	r3, #60	; 0x3c
 80026e8:	d106      	bne.n	80026f8 <main+0x1e8>
              squareColors[0] = Camera_Data;
 80026ea:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80026ee:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80026f2:	f8b7 2190 	ldrh.w	r2, [r7, #400]	; 0x190
 80026f6:	801a      	strh	r2, [r3, #0]

            if (j == 110 && i == 120)
 80026f8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80026fc:	2b6e      	cmp	r3, #110	; 0x6e
 80026fe:	d10a      	bne.n	8002716 <main+0x206>
 8002700:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8002704:	2b78      	cmp	r3, #120	; 0x78
 8002706:	d106      	bne.n	8002716 <main+0x206>
              squareColors[3] = Camera_Data;
 8002708:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800270c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002710:	f8b7 2190 	ldrh.w	r2, [r7, #400]	; 0x190
 8002714:	80da      	strh	r2, [r3, #6]

            if (j == 110 && i == 170)
 8002716:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800271a:	2b6e      	cmp	r3, #110	; 0x6e
 800271c:	d10a      	bne.n	8002734 <main+0x224>
 800271e:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8002722:	2baa      	cmp	r3, #170	; 0xaa
 8002724:	d106      	bne.n	8002734 <main+0x224>
              squareColors[6] = Camera_Data;
 8002726:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800272a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800272e:	f8b7 2190 	ldrh.w	r2, [r7, #400]	; 0x190
 8002732:	819a      	strh	r2, [r3, #12]

            // // middle row
            if (j == 160 && i == 60)
 8002734:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002738:	2ba0      	cmp	r3, #160	; 0xa0
 800273a:	d10a      	bne.n	8002752 <main+0x242>
 800273c:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8002740:	2b3c      	cmp	r3, #60	; 0x3c
 8002742:	d106      	bne.n	8002752 <main+0x242>
              squareColors[1] = Camera_Data;
 8002744:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002748:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800274c:	f8b7 2190 	ldrh.w	r2, [r7, #400]	; 0x190
 8002750:	805a      	strh	r2, [r3, #2]

            if (j == 160 && i == 120)
 8002752:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002756:	2ba0      	cmp	r3, #160	; 0xa0
 8002758:	d10a      	bne.n	8002770 <main+0x260>
 800275a:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800275e:	2b78      	cmp	r3, #120	; 0x78
 8002760:	d106      	bne.n	8002770 <main+0x260>
              squareColors[4] = Camera_Data;
 8002762:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002766:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800276a:	f8b7 2190 	ldrh.w	r2, [r7, #400]	; 0x190
 800276e:	811a      	strh	r2, [r3, #8]

            if (j == 160 && i == 170)
 8002770:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002774:	2ba0      	cmp	r3, #160	; 0xa0
 8002776:	d10a      	bne.n	800278e <main+0x27e>
 8002778:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800277c:	2baa      	cmp	r3, #170	; 0xaa
 800277e:	d106      	bne.n	800278e <main+0x27e>
              squareColors[7] = Camera_Data;
 8002780:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002784:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002788:	f8b7 2190 	ldrh.w	r2, [r7, #400]	; 0x190
 800278c:	81da      	strh	r2, [r3, #14]

            // top row

            if (j == 210 && i == 60)
 800278e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002792:	2bd2      	cmp	r3, #210	; 0xd2
 8002794:	d10a      	bne.n	80027ac <main+0x29c>
 8002796:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800279a:	2b3c      	cmp	r3, #60	; 0x3c
 800279c:	d106      	bne.n	80027ac <main+0x29c>
              squareColors[2] = Camera_Data;
 800279e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80027a2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80027a6:	f8b7 2190 	ldrh.w	r2, [r7, #400]	; 0x190
 80027aa:	809a      	strh	r2, [r3, #4]

            if (j == 210 && i == 120)
 80027ac:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80027b0:	2bd2      	cmp	r3, #210	; 0xd2
 80027b2:	d10a      	bne.n	80027ca <main+0x2ba>
 80027b4:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80027b8:	2b78      	cmp	r3, #120	; 0x78
 80027ba:	d106      	bne.n	80027ca <main+0x2ba>
              squareColors[5] = Camera_Data;
 80027bc:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80027c0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80027c4:	f8b7 2190 	ldrh.w	r2, [r7, #400]	; 0x190
 80027c8:	815a      	strh	r2, [r3, #10]

            if (j == 210 && i == 170)
 80027ca:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80027ce:	2bd2      	cmp	r3, #210	; 0xd2
 80027d0:	d10a      	bne.n	80027e8 <main+0x2d8>
 80027d2:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80027d6:	2baa      	cmp	r3, #170	; 0xaa
 80027d8:	d106      	bne.n	80027e8 <main+0x2d8>
              squareColors[8] = Camera_Data;
 80027da:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80027de:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80027e2:	f8b7 2190 	ldrh.w	r2, [r7, #400]	; 0x190
 80027e6:	821a      	strh	r2, [r3, #16]
          for (int j = 0; j < 320; j++)
 80027e8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80027ec:	3301      	adds	r3, #1
 80027ee:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 80027f2:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80027f6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80027fa:	f6ff af49 	blt.w	8002690 <main+0x180>
        for (int i = 0; i < 240; i++)
 80027fe:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8002802:	3301      	adds	r3, #1
 8002804:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8002808:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800280c:	2bef      	cmp	r3, #239	; 0xef
 800280e:	f77f af27 	ble.w	8002660 <main+0x150>
          }
        }
        // j , i
        KNearest_match(squareColors, temp_colors, cnt, cube.face, bt_flags);
 8002812:	4b5b      	ldr	r3, [pc, #364]	; (8002980 <main+0x470>)
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	b2db      	uxtb	r3, r3
 8002818:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 800281c:	f897 219f 	ldrb.w	r2, [r7, #415]	; 0x19f
 8002820:	f107 0118 	add.w	r1, r7, #24
 8002824:	1d38      	adds	r0, r7, #4
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	4623      	mov	r3, r4
 800282a:	f7fe fe95 	bl	8001558 <KNearest_match>

        LCD_DrawEllipse(110, 60, 10, 10, temp_colors[0]);  // 0 bottom left
 800282e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002832:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002836:	881b      	ldrh	r3, [r3, #0]
 8002838:	9300      	str	r3, [sp, #0]
 800283a:	230a      	movs	r3, #10
 800283c:	220a      	movs	r2, #10
 800283e:	213c      	movs	r1, #60	; 0x3c
 8002840:	206e      	movs	r0, #110	; 0x6e
 8002842:	f7ff fb9f 	bl	8001f84 <LCD_DrawEllipse>
        LCD_DrawEllipse(110, 120, 10, 10, temp_colors[3]); // 1 bottom mid
 8002846:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800284a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800284e:	88db      	ldrh	r3, [r3, #6]
 8002850:	9300      	str	r3, [sp, #0]
 8002852:	230a      	movs	r3, #10
 8002854:	220a      	movs	r2, #10
 8002856:	2178      	movs	r1, #120	; 0x78
 8002858:	206e      	movs	r0, #110	; 0x6e
 800285a:	f7ff fb93 	bl	8001f84 <LCD_DrawEllipse>
        LCD_DrawEllipse(110, 170, 10, 10, temp_colors[6]); // 2 bottom right
 800285e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002862:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002866:	899b      	ldrh	r3, [r3, #12]
 8002868:	9300      	str	r3, [sp, #0]
 800286a:	230a      	movs	r3, #10
 800286c:	220a      	movs	r2, #10
 800286e:	21aa      	movs	r1, #170	; 0xaa
 8002870:	206e      	movs	r0, #110	; 0x6e
 8002872:	f7ff fb87 	bl	8001f84 <LCD_DrawEllipse>

        LCD_DrawEllipse(160, 60, 10, 10, temp_colors[1]);  // 3 mid left
 8002876:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800287a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800287e:	885b      	ldrh	r3, [r3, #2]
 8002880:	9300      	str	r3, [sp, #0]
 8002882:	230a      	movs	r3, #10
 8002884:	220a      	movs	r2, #10
 8002886:	213c      	movs	r1, #60	; 0x3c
 8002888:	20a0      	movs	r0, #160	; 0xa0
 800288a:	f7ff fb7b 	bl	8001f84 <LCD_DrawEllipse>
        LCD_DrawEllipse(160, 120, 10, 10, temp_colors[4]); // 4 center
 800288e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002892:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002896:	891b      	ldrh	r3, [r3, #8]
 8002898:	9300      	str	r3, [sp, #0]
 800289a:	230a      	movs	r3, #10
 800289c:	220a      	movs	r2, #10
 800289e:	2178      	movs	r1, #120	; 0x78
 80028a0:	20a0      	movs	r0, #160	; 0xa0
 80028a2:	f7ff fb6f 	bl	8001f84 <LCD_DrawEllipse>
        LCD_DrawEllipse(160, 170, 10, 10, temp_colors[7]); // 5 mid right
 80028a6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80028aa:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80028ae:	89db      	ldrh	r3, [r3, #14]
 80028b0:	9300      	str	r3, [sp, #0]
 80028b2:	230a      	movs	r3, #10
 80028b4:	220a      	movs	r2, #10
 80028b6:	21aa      	movs	r1, #170	; 0xaa
 80028b8:	20a0      	movs	r0, #160	; 0xa0
 80028ba:	f7ff fb63 	bl	8001f84 <LCD_DrawEllipse>

        LCD_DrawEllipse(210, 60, 10, 10, temp_colors[2]);  // 6 top left
 80028be:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80028c2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80028c6:	889b      	ldrh	r3, [r3, #4]
 80028c8:	9300      	str	r3, [sp, #0]
 80028ca:	230a      	movs	r3, #10
 80028cc:	220a      	movs	r2, #10
 80028ce:	213c      	movs	r1, #60	; 0x3c
 80028d0:	20d2      	movs	r0, #210	; 0xd2
 80028d2:	f7ff fb57 	bl	8001f84 <LCD_DrawEllipse>
        LCD_DrawEllipse(210, 120, 10, 10, temp_colors[5]); // 7 top mid
 80028d6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80028da:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80028de:	895b      	ldrh	r3, [r3, #10]
 80028e0:	9300      	str	r3, [sp, #0]
 80028e2:	230a      	movs	r3, #10
 80028e4:	220a      	movs	r2, #10
 80028e6:	2178      	movs	r1, #120	; 0x78
 80028e8:	20d2      	movs	r0, #210	; 0xd2
 80028ea:	f7ff fb4b 	bl	8001f84 <LCD_DrawEllipse>
        LCD_DrawEllipse(210, 170, 10, 10, temp_colors[8]); // 8 top right
 80028ee:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80028f2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80028f6:	8a1b      	ldrh	r3, [r3, #16]
 80028f8:	9300      	str	r3, [sp, #0]
 80028fa:	230a      	movs	r3, #10
 80028fc:	220a      	movs	r2, #10
 80028fe:	21aa      	movs	r1, #170	; 0xaa
 8002900:	20d2      	movs	r0, #210	; 0xd2
 8002902:	f7ff fb3f 	bl	8001f84 <LCD_DrawEllipse>
        // HAL_Delay(2000);
        if (bt_flags == 1)
 8002906:	4b1e      	ldr	r3, [pc, #120]	; (8002980 <main+0x470>)
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	b2db      	uxtb	r3, r3
 800290c:	2b01      	cmp	r3, #1
 800290e:	d13b      	bne.n	8002988 <main+0x478>
        {
          bt_flags = 5;
 8002910:	4b1b      	ldr	r3, [pc, #108]	; (8002980 <main+0x470>)
 8002912:	2205      	movs	r2, #5
 8002914:	701a      	strb	r2, [r3, #0]
          drawCube(cube.face);
 8002916:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800291a:	4618      	mov	r0, r3
 800291c:	f7ff fba4 	bl	8002068 <drawCube>
          cnt++;
 8002920:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8002924:	3301      	adds	r3, #1
 8002926:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
          switch (cnt)
 800292a:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 800292e:	3b01      	subs	r3, #1
 8002930:	2b0a      	cmp	r3, #10
 8002932:	d819      	bhi.n	8002968 <main+0x458>
 8002934:	a201      	add	r2, pc, #4	; (adr r2, 800293c <main+0x42c>)
 8002936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800293a:	bf00      	nop
 800293c:	08002969 	.word	0x08002969
 8002940:	08002969 	.word	0x08002969
 8002944:	08002969 	.word	0x08002969
 8002948:	08002969 	.word	0x08002969
 800294c:	08002969 	.word	0x08002969
 8002950:	08002969 	.word	0x08002969
 8002954:	08002969 	.word	0x08002969
 8002958:	08002969 	.word	0x08002969
 800295c:	08002969 	.word	0x08002969
 8002960:	08002969 	.word	0x08002969
 8002964:	08002969 	.word	0x08002969
            K;
            K;
            break;
          }

          HAL_Delay(1000);
 8002968:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800296c:	f001 fbec 	bl	8004148 <HAL_Delay>
          Ov7725_vsync = 0;
 8002970:	4b04      	ldr	r3, [pc, #16]	; (8002984 <main+0x474>)
 8002972:	2200      	movs	r2, #0
 8002974:	701a      	strb	r2, [r3, #0]
 8002976:	e0ae      	b.n	8002ad6 <main+0x5c6>
 8002978:	40011000 	.word	0x40011000
 800297c:	40010c00 	.word	0x40010c00
 8002980:	2000209c 	.word	0x2000209c
 8002984:	20002090 	.word	0x20002090
          continue;
          cnt++;
        }
      }
      if (cnt == 12)
 8002988:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 800298c:	2b0c      	cmp	r3, #12
 800298e:	d119      	bne.n	80029c4 <main+0x4b4>
      {
        LCD_Clear(0, 0, 320, 320, CYAN);
 8002990:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800299a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800299e:	2100      	movs	r1, #0
 80029a0:	2000      	movs	r0, #0
 80029a2:	f7ff fa56 	bl	8001e52 <LCD_Clear>
        LCD_DrawString(75, 100, "DETECTION DONE");
 80029a6:	4a57      	ldr	r2, [pc, #348]	; (8002b04 <main+0x5f4>)
 80029a8:	2164      	movs	r1, #100	; 0x64
 80029aa:	204b      	movs	r0, #75	; 0x4b
 80029ac:	f7ff faba 	bl	8001f24 <LCD_DrawString>
        drawCube(cube.face);
 80029b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff fb57 	bl	8002068 <drawCube>
        cnt++;
 80029ba:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 80029be:	3301      	adds	r3, #1
 80029c0:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
      }

      if (bt_flags == 3)
 80029c4:	4b50      	ldr	r3, [pc, #320]	; (8002b08 <main+0x5f8>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b03      	cmp	r3, #3
 80029cc:	f040 8083 	bne.w	8002ad6 <main+0x5c6>
      {
        solve_Naive(&cube);
 80029d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029d4:	4618      	mov	r0, r3
 80029d6:	f000 ff55 	bl	8003884 <solve_Naive>
        for (uint16_t i = 0; i < cube.routeLen; i++)
 80029da:	2300      	movs	r3, #0
 80029dc:	f8a7 3192 	strh.w	r3, [r7, #402]	; 0x192
 80029e0:	e06e      	b.n	8002ac0 <main+0x5b0>
        {
          switch (cube.route[i])
 80029e2:	f8b7 3192 	ldrh.w	r3, [r7, #402]	; 0x192
 80029e6:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 80029ea:	f5a2 72ba 	sub.w	r2, r2, #372	; 0x174
 80029ee:	4413      	add	r3, r2
 80029f0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80029f4:	2b11      	cmp	r3, #17
 80029f6:	d85d      	bhi.n	8002ab4 <main+0x5a4>
 80029f8:	a201      	add	r2, pc, #4	; (adr r2, 8002a00 <main+0x4f0>)
 80029fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029fe:	bf00      	nop
 8002a00:	08002a49 	.word	0x08002a49
 8002a04:	08002a4f 	.word	0x08002a4f
 8002a08:	08002a55 	.word	0x08002a55
 8002a0c:	08002a5b 	.word	0x08002a5b
 8002a10:	08002a61 	.word	0x08002a61
 8002a14:	08002a67 	.word	0x08002a67
 8002a18:	08002a6d 	.word	0x08002a6d
 8002a1c:	08002a73 	.word	0x08002a73
 8002a20:	08002a79 	.word	0x08002a79
 8002a24:	08002a7f 	.word	0x08002a7f
 8002a28:	08002a85 	.word	0x08002a85
 8002a2c:	08002a8b 	.word	0x08002a8b
 8002a30:	08002a91 	.word	0x08002a91
 8002a34:	08002a97 	.word	0x08002a97
 8002a38:	08002a9d 	.word	0x08002a9d
 8002a3c:	08002aa3 	.word	0x08002aa3
 8002a40:	08002aa9 	.word	0x08002aa9
 8002a44:	08002aaf 	.word	0x08002aaf
          {
          case 0:
            l();
 8002a48:	f7ff fd43 	bl	80024d2 <l>
            break;
 8002a4c:	e033      	b.n	8002ab6 <main+0x5a6>
          case 1:
            l1();
 8002a4e:	f7ff fd4a 	bl	80024e6 <l1>
            break;
 8002a52:	e030      	b.n	8002ab6 <main+0x5a6>
          case 2:
            l2();
 8002a54:	f7ff fd51 	bl	80024fa <l2>
            break;
 8002a58:	e02d      	b.n	8002ab6 <main+0x5a6>
          case 3:
            r();
 8002a5a:	f7ff fd1b 	bl	8002494 <r>
            break;
 8002a5e:	e02a      	b.n	8002ab6 <main+0x5a6>
          case 4:
            r1();
 8002a60:	f7ff fd23 	bl	80024aa <r1>
            break;
 8002a64:	e027      	b.n	8002ab6 <main+0x5a6>
          case 5:
            r2();
 8002a66:	f7ff fd2a 	bl	80024be <r2>
            break;
 8002a6a:	e024      	b.n	8002ab6 <main+0x5a6>
          case 6:
            u();
 8002a6c:	f7ff fc28 	bl	80022c0 <u>
            break;
 8002a70:	e021      	b.n	8002ab6 <main+0x5a6>
          case 7:
            u1();
 8002a72:	f7ff fc3f 	bl	80022f4 <u1>
            break;
 8002a76:	e01e      	b.n	8002ab6 <main+0x5a6>
          case 8:
            u2();
 8002a78:	f7ff fc56 	bl	8002328 <u2>
            break;
 8002a7c:	e01b      	b.n	8002ab6 <main+0x5a6>
          case 9:
            d();
 8002a7e:	f7ff fcbb 	bl	80023f8 <d>
            break;
 8002a82:	e018      	b.n	8002ab6 <main+0x5a6>
          case 10:
            d1();
 8002a84:	f7ff fcd2 	bl	800242c <d1>
            break;
 8002a88:	e015      	b.n	8002ab6 <main+0x5a6>
          case 11:
            d2();
 8002a8a:	f7ff fce9 	bl	8002460 <d2>
            break;
 8002a8e:	e012      	b.n	8002ab6 <main+0x5a6>
          case 12:
            f();
 8002a90:	f7ff fc64 	bl	800235c <f>
            break;
 8002a94:	e00f      	b.n	8002ab6 <main+0x5a6>
          case 13:
            f1();
 8002a96:	f7ff fc7b 	bl	8002390 <f1>
            break;
 8002a9a:	e00c      	b.n	8002ab6 <main+0x5a6>
          case 14:
            f2();
 8002a9c:	f7ff fc92 	bl	80023c4 <f2>
            break;
 8002aa0:	e009      	b.n	8002ab6 <main+0x5a6>
          case 15:
            b();
 8002aa2:	f7ff fbcb 	bl	800223c <b>
            break;
 8002aa6:	e006      	b.n	8002ab6 <main+0x5a6>
          case 16:
            b1();
 8002aa8:	f7ff fbde 	bl	8002268 <b1>
            break;
 8002aac:	e003      	b.n	8002ab6 <main+0x5a6>
          case 17:
            b2();
 8002aae:	f7ff fbf1 	bl	8002294 <b2>
            break;
 8002ab2:	e000      	b.n	8002ab6 <main+0x5a6>
          default:
            break;
 8002ab4:	bf00      	nop
        for (uint16_t i = 0; i < cube.routeLen; i++)
 8002ab6:	f8b7 3192 	ldrh.w	r3, [r7, #402]	; 0x192
 8002aba:	3301      	adds	r3, #1
 8002abc:	f8a7 3192 	strh.w	r3, [r7, #402]	; 0x192
 8002ac0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002ac4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002ac8:	f893 3162 	ldrb.w	r3, [r3, #354]	; 0x162
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	f8b7 2192 	ldrh.w	r2, [r7, #402]	; 0x192
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d385      	bcc.n	80029e2 <main+0x4d2>
  while (1 && bt_flags != 4)
 8002ad6:	4b0c      	ldr	r3, [pc, #48]	; (8002b08 <main+0x5f8>)
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	2b04      	cmp	r3, #4
 8002ade:	f47f ad89 	bne.w	80025f4 <main+0xe4>
        }
      }
    }
  }

  LCD_Clear(0, 0, 240, 320, BACKGROUND);
 8002ae2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ae6:	9300      	str	r3, [sp, #0]
 8002ae8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002aec:	22f0      	movs	r2, #240	; 0xf0
 8002aee:	2100      	movs	r1, #0
 8002af0:	2000      	movs	r0, #0
 8002af2:	f7ff f9ae 	bl	8001e52 <LCD_Clear>
 8002af6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	f507 77d2 	add.w	r7, r7, #420	; 0x1a4
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd90      	pop	{r4, r7, pc}
 8002b02:	bf00      	nop
 8002b04:	08006868 	.word	0x08006868
 8002b08:	2000209c 	.word	0x2000209c

08002b0c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b090      	sub	sp, #64	; 0x40
 8002b10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b12:	f107 0318 	add.w	r3, r7, #24
 8002b16:	2228      	movs	r2, #40	; 0x28
 8002b18:	2100      	movs	r1, #0
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f003 f992 	bl	8005e44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b20:	1d3b      	adds	r3, r7, #4
 8002b22:	2200      	movs	r2, #0
 8002b24:	601a      	str	r2, [r3, #0]
 8002b26:	605a      	str	r2, [r3, #4]
 8002b28:	609a      	str	r2, [r3, #8]
 8002b2a:	60da      	str	r2, [r3, #12]
 8002b2c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b36:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b40:	2302      	movs	r3, #2
 8002b42:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b48:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002b4a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b50:	f107 0318 	add.w	r3, r7, #24
 8002b54:	4618      	mov	r0, r3
 8002b56:	f001 ff17 	bl	8004988 <HAL_RCC_OscConfig>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002b60:	f000 f819 	bl	8002b96 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b64:	230f      	movs	r3, #15
 8002b66:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b68:	2302      	movs	r3, #2
 8002b6a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002b70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b76:	2300      	movs	r3, #0
 8002b78:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002b7a:	1d3b      	adds	r3, r7, #4
 8002b7c:	2102      	movs	r1, #2
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f002 f966 	bl	8004e50 <HAL_RCC_ClockConfig>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002b8a:	f000 f804 	bl	8002b96 <Error_Handler>
  }
}
 8002b8e:	bf00      	nop
 8002b90:	3740      	adds	r7, #64	; 0x40
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002b96:	b480      	push	{r7}
 8002b98:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b9a:	b672      	cpsid	i
}
 8002b9c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b9e:	e7fe      	b.n	8002b9e <Error_Handler+0x8>

08002ba0 <rotateInPosMode>:
#include <string.h>
volatile uint8_t motor_flag;

uint8_t RxBuffer[RXBUFFERSIZE];
void rotateInPosMode(uint8_t ID, uint8_t dir, uint16_t angle, uint8_t wait_flag)
{
 8002ba0:	b590      	push	{r4, r7, lr}
 8002ba2:	b087      	sub	sp, #28
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	4604      	mov	r4, r0
 8002ba8:	4608      	mov	r0, r1
 8002baa:	4611      	mov	r1, r2
 8002bac:	461a      	mov	r2, r3
 8002bae:	4623      	mov	r3, r4
 8002bb0:	71fb      	strb	r3, [r7, #7]
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	71bb      	strb	r3, [r7, #6]
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	80bb      	strh	r3, [r7, #4]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	70fb      	strb	r3, [r7, #3]
    uint32_t steps = angle / STEP_DGREE * M_STEP;
 8002bbe:	88bb      	ldrh	r3, [r7, #4]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7fd fc83 	bl	80004cc <__aeabi_i2d>
 8002bc6:	a336      	add	r3, pc, #216	; (adr r3, 8002ca0 <rotateInPosMode+0x100>)
 8002bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bcc:	f7fd fe12 	bl	80007f4 <__aeabi_ddiv>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	4610      	mov	r0, r2
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	f04f 0200 	mov.w	r2, #0
 8002bdc:	4b32      	ldr	r3, [pc, #200]	; (8002ca8 <rotateInPosMode+0x108>)
 8002bde:	f7fd fcdf 	bl	80005a0 <__aeabi_dmul>
 8002be2:	4602      	mov	r2, r0
 8002be4:	460b      	mov	r3, r1
 8002be6:	4610      	mov	r0, r2
 8002be8:	4619      	mov	r1, r3
 8002bea:	f7fd feeb 	bl	80009c4 <__aeabi_d2uiz>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	617b      	str	r3, [r7, #20]
 8002bf2:	79fb      	ldrb	r3, [r7, #7]
    uint8_t TxBuffer[9];
    memcpy(TxBuffer, &ID, 1);
 8002bf4:	723b      	strb	r3, [r7, #8]
    TxBuffer[1] = POS_REG;
 8002bf6:	23fd      	movs	r3, #253	; 0xfd
 8002bf8:	727b      	strb	r3, [r7, #9]
    uint16_t speed = (SPEED | (uint8_t)dir << 15);
 8002bfa:	79bb      	ldrb	r3, [r7, #6]
 8002bfc:	03db      	lsls	r3, r3, #15
 8002bfe:	b21b      	sxth	r3, r3
 8002c00:	f043 0310 	orr.w	r3, r3, #16
 8002c04:	b21b      	sxth	r3, r3
 8002c06:	827b      	strh	r3, [r7, #18]
    TxBuffer[2] = (uint8_t)(speed >> 8);
 8002c08:	8a7b      	ldrh	r3, [r7, #18]
 8002c0a:	0a1b      	lsrs	r3, r3, #8
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	72bb      	strb	r3, [r7, #10]
    TxBuffer[3] = (uint8_t)(speed & 0x00FF);
 8002c12:	8a7b      	ldrh	r3, [r7, #18]
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	72fb      	strb	r3, [r7, #11]
    TxBuffer[4] = (uint8_t)ACCELERATION;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	733b      	strb	r3, [r7, #12]
    TxBuffer[5] = (uint8_t)(steps >> 16);
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	0c1b      	lsrs	r3, r3, #16
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	737b      	strb	r3, [r7, #13]
    TxBuffer[6] = (uint8_t)(steps >> 8);
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	0a1b      	lsrs	r3, r3, #8
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	73bb      	strb	r3, [r7, #14]
    TxBuffer[7] = (uint8_t)(steps & 0x00FF);
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	73fb      	strb	r3, [r7, #15]
    TxBuffer[8] = CHECK_BIT;
 8002c32:	236b      	movs	r3, #107	; 0x6b
 8002c34:	743b      	strb	r3, [r7, #16]
    HAL_Delay(50);
 8002c36:	2032      	movs	r0, #50	; 0x32
 8002c38:	f001 fa86 	bl	8004148 <HAL_Delay>
    while (!(motor_flag & (0x01 << (ID - 1))))
 8002c3c:	bf00      	nop
 8002c3e:	4b1b      	ldr	r3, [pc, #108]	; (8002cac <rotateInPosMode+0x10c>)
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	461a      	mov	r2, r3
 8002c46:	79fb      	ldrb	r3, [r7, #7]
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	fa42 f303 	asr.w	r3, r2, r3
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0f3      	beq.n	8002c3e <rotateInPosMode+0x9e>
        ;
    while (wait_flag && motor_flag != 7)
 8002c56:	78fb      	ldrb	r3, [r7, #3]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d004      	beq.n	8002c66 <rotateInPosMode+0xc6>
 8002c5c:	4b13      	ldr	r3, [pc, #76]	; (8002cac <rotateInPosMode+0x10c>)
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b07      	cmp	r3, #7
 8002c64:	d1f7      	bne.n	8002c56 <rotateInPosMode+0xb6>
        ;

    HAL_UART_Transmit(&huart1, (uint8_t *)&TxBuffer, 9, 0xFFFF);
 8002c66:	f107 0108 	add.w	r1, r7, #8
 8002c6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c6e:	2209      	movs	r2, #9
 8002c70:	480f      	ldr	r0, [pc, #60]	; (8002cb0 <rotateInPosMode+0x110>)
 8002c72:	f002 fb3a 	bl	80052ea <HAL_UART_Transmit>
    motor_flag &= ~(0x01 << (ID - 1));
 8002c76:	79fb      	ldrb	r3, [r7, #7]
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	b25b      	sxtb	r3, r3
 8002c82:	43db      	mvns	r3, r3
 8002c84:	b25a      	sxtb	r2, r3
 8002c86:	4b09      	ldr	r3, [pc, #36]	; (8002cac <rotateInPosMode+0x10c>)
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	b25b      	sxtb	r3, r3
 8002c8e:	4013      	ands	r3, r2
 8002c90:	b25b      	sxtb	r3, r3
 8002c92:	b2da      	uxtb	r2, r3
 8002c94:	4b05      	ldr	r3, [pc, #20]	; (8002cac <rotateInPosMode+0x10c>)
 8002c96:	701a      	strb	r2, [r3, #0]
}
 8002c98:	bf00      	nop
 8002c9a:	371c      	adds	r7, #28
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd90      	pop	{r4, r7, pc}
 8002ca0:	cccccccd 	.word	0xcccccccd
 8002ca4:	3ffccccc 	.word	0x3ffccccc
 8002ca8:	40300000 	.word	0x40300000
 8002cac:	20002092 	.word	0x20002092
 8002cb0:	200020a0 	.word	0x200020a0

08002cb4 <rotateCube>:
    {L, L},
    {B, B}};


void rotateCube(cube_t *c, uint8_t move)
{
 8002cb4:	b4f0      	push	{r4, r5, r6, r7}
 8002cb6:	b098      	sub	sp, #96	; 0x60
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	70fb      	strb	r3, [r7, #3]
    char temp[54];
    memcpy(temp, c->face, 54);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	461c      	mov	r4, r3
 8002cc4:	f107 0620 	add.w	r6, r7, #32
 8002cc8:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 8002ccc:	4635      	mov	r5, r6
 8002cce:	4623      	mov	r3, r4
 8002cd0:	6818      	ldr	r0, [r3, #0]
 8002cd2:	6859      	ldr	r1, [r3, #4]
 8002cd4:	689a      	ldr	r2, [r3, #8]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cda:	3410      	adds	r4, #16
 8002cdc:	3610      	adds	r6, #16
 8002cde:	4564      	cmp	r4, ip
 8002ce0:	d1f4      	bne.n	8002ccc <rotateCube+0x18>
 8002ce2:	4633      	mov	r3, r6
 8002ce4:	4622      	mov	r2, r4
 8002ce6:	6810      	ldr	r0, [r2, #0]
 8002ce8:	6018      	str	r0, [r3, #0]
 8002cea:	8892      	ldrh	r2, [r2, #4]
 8002cec:	809a      	strh	r2, [r3, #4]
    for (int i = 0; i < 54; i++)
 8002cee:	2300      	movs	r3, #0
 8002cf0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002cf2:	e014      	b.n	8002d1e <rotateCube+0x6a>
        c->face[i] = temp[transMat[move][i]];
 8002cf4:	78fb      	ldrb	r3, [r7, #3]
 8002cf6:	4a26      	ldr	r2, [pc, #152]	; (8002d90 <rotateCube+0xdc>)
 8002cf8:	2136      	movs	r1, #54	; 0x36
 8002cfa:	fb01 f303 	mul.w	r3, r1, r3
 8002cfe:	441a      	add	r2, r3
 8002d00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d02:	4413      	add	r3, r2
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	3360      	adds	r3, #96	; 0x60
 8002d08:	443b      	add	r3, r7
 8002d0a:	f813 1c40 	ldrb.w	r1, [r3, #-64]
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d12:	4413      	add	r3, r2
 8002d14:	460a      	mov	r2, r1
 8002d16:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 54; i++)
 8002d18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d20:	2b35      	cmp	r3, #53	; 0x35
 8002d22:	dde7      	ble.n	8002cf4 <rotateCube+0x40>
    c->route[c->routeLen++] = route_mask[move];
 8002d24:	78fa      	ldrb	r2, [r7, #3]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f893 3162 	ldrb.w	r3, [r3, #354]	; 0x162
 8002d2c:	1c59      	adds	r1, r3, #1
 8002d2e:	b2c8      	uxtb	r0, r1
 8002d30:	6879      	ldr	r1, [r7, #4]
 8002d32:	f881 0162 	strb.w	r0, [r1, #354]	; 0x162
 8002d36:	4619      	mov	r1, r3
 8002d38:	4b16      	ldr	r3, [pc, #88]	; (8002d94 <rotateCube+0xe0>)
 8002d3a:	5c9a      	ldrb	r2, [r3, r2]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	440b      	add	r3, r1
 8002d40:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    if(move == T)
 8002d44:	78fb      	ldrb	r3, [r7, #3]
 8002d46:	2b12      	cmp	r3, #18
 8002d48:	d11d      	bne.n	8002d86 <rotateCube+0xd2>
    {
        uint8_t route_temp[18];
        memcpy(route_temp, route_mask, 18);
 8002d4a:	4b12      	ldr	r3, [pc, #72]	; (8002d94 <rotateCube+0xe0>)
 8002d4c:	f107 040c 	add.w	r4, r7, #12
 8002d50:	461d      	mov	r5, r3
 8002d52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d56:	682b      	ldr	r3, [r5, #0]
 8002d58:	8023      	strh	r3, [r4, #0]
        for (int i = 0; i < 18; i++)
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d5e:	e00f      	b.n	8002d80 <rotateCube+0xcc>
            route_mask[i] = route_temp[route_trans[i]];
 8002d60:	4a0d      	ldr	r2, [pc, #52]	; (8002d98 <rotateCube+0xe4>)
 8002d62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d64:	4413      	add	r3, r2
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	3360      	adds	r3, #96	; 0x60
 8002d6a:	443b      	add	r3, r7
 8002d6c:	f813 1c54 	ldrb.w	r1, [r3, #-84]
 8002d70:	4a08      	ldr	r2, [pc, #32]	; (8002d94 <rotateCube+0xe0>)
 8002d72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d74:	4413      	add	r3, r2
 8002d76:	460a      	mov	r2, r1
 8002d78:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < 18; i++)
 8002d7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d82:	2b11      	cmp	r3, #17
 8002d84:	ddec      	ble.n	8002d60 <rotateCube+0xac>
    }
}
 8002d86:	bf00      	nop
 8002d88:	3760      	adds	r7, #96	; 0x60
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bcf0      	pop	{r4, r5, r6, r7}
 8002d8e:	4770      	bx	lr
 8002d90:	08006e84 	.word	0x08006e84
 8002d94:	20000148 	.word	0x20000148
 8002d98:	2000015c 	.word	0x2000015c

08002d9c <formular11>:
void formular11(cube_t *c)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b088      	sub	sp, #32
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
    uint8_t n = 0;
 8002da4:	2300      	movs	r3, #0
 8002da6:	77fb      	strb	r3, [r7, #31]
    for (size_t i = 1; i < 6; i++)
 8002da8:	2301      	movs	r3, #1
 8002daa:	61bb      	str	r3, [r7, #24]
 8002dac:	e038      	b.n	8002e20 <formular11+0x84>
    {
        n = 0;
 8002dae:	2300      	movs	r3, #0
 8002db0:	77fb      	strb	r3, [r7, #31]
        for (size_t j = 3; j < 6; j += 2)
 8002db2:	2303      	movs	r3, #3
 8002db4:	617b      	str	r3, [r7, #20]
 8002db6:	e02d      	b.n	8002e14 <formular11+0x78>
        {
            if (c->face[i * 9 + j] == 'D')
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	00db      	lsls	r3, r3, #3
 8002dbe:	441a      	add	r2, r3
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	5cd3      	ldrb	r3, [r2, r3]
 8002dc8:	2b44      	cmp	r3, #68	; 0x44
 8002dca:	d11d      	bne.n	8002e08 <formular11+0x6c>
            {
                while (c->face[face_index1[i - 1][n]] == 'D')
 8002dcc:	e003      	b.n	8002dd6 <formular11+0x3a>
                    rotateCube(c, U);
 8002dce:	2106      	movs	r1, #6
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f7ff ff6f 	bl	8002cb4 <rotateCube>
                while (c->face[face_index1[i - 1][n]] == 'D')
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	1e5a      	subs	r2, r3, #1
 8002dda:	7ffb      	ldrb	r3, [r7, #31]
 8002ddc:	4934      	ldr	r1, [pc, #208]	; (8002eb0 <formular11+0x114>)
 8002dde:	0052      	lsls	r2, r2, #1
 8002de0:	440a      	add	r2, r1
 8002de2:	4413      	add	r3, r2
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	461a      	mov	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	5c9b      	ldrb	r3, [r3, r2]
 8002dec:	2b44      	cmp	r3, #68	; 0x44
 8002dee:	d0ee      	beq.n	8002dce <formular11+0x32>
                rotateCube(c, rotate_index1[i - 1][n]);
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	1e5a      	subs	r2, r3, #1
 8002df4:	7ffb      	ldrb	r3, [r7, #31]
 8002df6:	492f      	ldr	r1, [pc, #188]	; (8002eb4 <formular11+0x118>)
 8002df8:	0052      	lsls	r2, r2, #1
 8002dfa:	440a      	add	r2, r1
 8002dfc:	4413      	add	r3, r2
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	4619      	mov	r1, r3
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f7ff ff56 	bl	8002cb4 <rotateCube>
            }
            n++;
 8002e08:	7ffb      	ldrb	r3, [r7, #31]
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	77fb      	strb	r3, [r7, #31]
        for (size_t j = 3; j < 6; j += 2)
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	3302      	adds	r3, #2
 8002e12:	617b      	str	r3, [r7, #20]
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	2b05      	cmp	r3, #5
 8002e18:	d9ce      	bls.n	8002db8 <formular11+0x1c>
    for (size_t i = 1; i < 6; i++)
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	61bb      	str	r3, [r7, #24]
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	2b05      	cmp	r3, #5
 8002e24:	d9c3      	bls.n	8002dae <formular11+0x12>
        }
    }
    for (size_t i = 1; i < 6; i++)
 8002e26:	2301      	movs	r3, #1
 8002e28:	613b      	str	r3, [r7, #16]
 8002e2a:	e038      	b.n	8002e9e <formular11+0x102>
    {
        n = 0;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	77fb      	strb	r3, [r7, #31]
        for (size_t j = 1; j < 8; j += 6)
 8002e30:	2301      	movs	r3, #1
 8002e32:	60fb      	str	r3, [r7, #12]
 8002e34:	e02d      	b.n	8002e92 <formular11+0xf6>
        {
            if (c->face[i * 9 + j] == 'D')
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	441a      	add	r2, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	4413      	add	r3, r2
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	5cd3      	ldrb	r3, [r2, r3]
 8002e46:	2b44      	cmp	r3, #68	; 0x44
 8002e48:	d11d      	bne.n	8002e86 <formular11+0xea>
            {
                while (c->face[face_index2[i - 1][n]] == 'D')
 8002e4a:	e003      	b.n	8002e54 <formular11+0xb8>
                    rotateCube(c, U);
 8002e4c:	2106      	movs	r1, #6
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f7ff ff30 	bl	8002cb4 <rotateCube>
                while (c->face[face_index2[i - 1][n]] == 'D')
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	1e5a      	subs	r2, r3, #1
 8002e58:	7ffb      	ldrb	r3, [r7, #31]
 8002e5a:	4917      	ldr	r1, [pc, #92]	; (8002eb8 <formular11+0x11c>)
 8002e5c:	0052      	lsls	r2, r2, #1
 8002e5e:	440a      	add	r2, r1
 8002e60:	4413      	add	r3, r2
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	461a      	mov	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	5c9b      	ldrb	r3, [r3, r2]
 8002e6a:	2b44      	cmp	r3, #68	; 0x44
 8002e6c:	d0ee      	beq.n	8002e4c <formular11+0xb0>
                rotateCube(c, rotate_index2[i - 1][n]);
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1e5a      	subs	r2, r3, #1
 8002e72:	7ffb      	ldrb	r3, [r7, #31]
 8002e74:	4911      	ldr	r1, [pc, #68]	; (8002ebc <formular11+0x120>)
 8002e76:	0052      	lsls	r2, r2, #1
 8002e78:	440a      	add	r2, r1
 8002e7a:	4413      	add	r3, r2
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	4619      	mov	r1, r3
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f7ff ff17 	bl	8002cb4 <rotateCube>
            }
            n++;
 8002e86:	7ffb      	ldrb	r3, [r7, #31]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	77fb      	strb	r3, [r7, #31]
        for (size_t j = 1; j < 8; j += 6)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	3306      	adds	r3, #6
 8002e90:	60fb      	str	r3, [r7, #12]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2b07      	cmp	r3, #7
 8002e96:	d9ce      	bls.n	8002e36 <formular11+0x9a>
    for (size_t i = 1; i < 6; i++)
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	613b      	str	r3, [r7, #16]
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	2b05      	cmp	r3, #5
 8002ea2:	d9c3      	bls.n	8002e2c <formular11+0x90>
        }
    }
}
 8002ea4:	bf00      	nop
 8002ea6:	bf00      	nop
 8002ea8:	3720      	adds	r7, #32
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	20000170 	.word	0x20000170
 8002eb4:	2000017c 	.word	0x2000017c
 8002eb8:	20000188 	.word	0x20000188
 8002ebc:	20000194 	.word	0x20000194

08002ec0 <formular12>:
void formular12(cube_t *c)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
    while (c->face[19] != c->face[22] || c->face[7] != 'D')
 8002ec8:	e003      	b.n	8002ed2 <formular12+0x12>
        rotateCube(c, U);
 8002eca:	2106      	movs	r1, #6
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f7ff fef1 	bl	8002cb4 <rotateCube>
    while (c->face[19] != c->face[22] || c->face[7] != 'D')
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	7cda      	ldrb	r2, [r3, #19]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	7d9b      	ldrb	r3, [r3, #22]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d1f5      	bne.n	8002eca <formular12+0xa>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	79db      	ldrb	r3, [r3, #7]
 8002ee2:	2b44      	cmp	r3, #68	; 0x44
 8002ee4:	d1f1      	bne.n	8002eca <formular12+0xa>
    rotateCube(c, F2);
 8002ee6:	210e      	movs	r1, #14
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f7ff fee3 	bl	8002cb4 <rotateCube>
    while (c->face[46] != c->face[49] || c->face[1] != 'D')
 8002eee:	e003      	b.n	8002ef8 <formular12+0x38>
        rotateCube(c, U);
 8002ef0:	2106      	movs	r1, #6
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f7ff fede 	bl	8002cb4 <rotateCube>
    while (c->face[46] != c->face[49] || c->face[1] != 'D')
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d1f3      	bne.n	8002ef0 <formular12+0x30>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	785b      	ldrb	r3, [r3, #1]
 8002f0c:	2b44      	cmp	r3, #68	; 0x44
 8002f0e:	d1ef      	bne.n	8002ef0 <formular12+0x30>
    rotateCube(c, B2);
 8002f10:	2111      	movs	r1, #17
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f7ff fece 	bl	8002cb4 <rotateCube>
    while (c->face[37] != c->face[40] || c->face[3] != 'D')
 8002f18:	e003      	b.n	8002f22 <formular12+0x62>
        rotateCube(c, U);
 8002f1a:	2106      	movs	r1, #6
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f7ff fec9 	bl	8002cb4 <rotateCube>
    while (c->face[37] != c->face[40] || c->face[3] != 'D')
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d1f3      	bne.n	8002f1a <formular12+0x5a>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	78db      	ldrb	r3, [r3, #3]
 8002f36:	2b44      	cmp	r3, #68	; 0x44
 8002f38:	d1ef      	bne.n	8002f1a <formular12+0x5a>
    rotateCube(c, L2);
 8002f3a:	2102      	movs	r1, #2
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f7ff feb9 	bl	8002cb4 <rotateCube>
    while (c->face[10] != c->face[13] || c->face[5] != 'D')
 8002f42:	e003      	b.n	8002f4c <formular12+0x8c>
        rotateCube(c, U);
 8002f44:	2106      	movs	r1, #6
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f7ff feb4 	bl	8002cb4 <rotateCube>
    while (c->face[10] != c->face[13] || c->face[5] != 'D')
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	7a9a      	ldrb	r2, [r3, #10]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	7b5b      	ldrb	r3, [r3, #13]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d1f5      	bne.n	8002f44 <formular12+0x84>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	795b      	ldrb	r3, [r3, #5]
 8002f5c:	2b44      	cmp	r3, #68	; 0x44
 8002f5e:	d1f1      	bne.n	8002f44 <formular12+0x84>
    rotateCube(c, R2);
 8002f60:	2105      	movs	r1, #5
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f7ff fea6 	bl	8002cb4 <rotateCube>
}
 8002f68:	bf00      	nop
 8002f6a:	3708      	adds	r7, #8
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <formular13>:
void formular13(cube_t *c)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
    rotateCube(c, R);
 8002f78:	2103      	movs	r1, #3
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f7ff fe9a 	bl	8002cb4 <rotateCube>
    rotateCube(c, U);
 8002f80:	2106      	movs	r1, #6
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f7ff fe96 	bl	8002cb4 <rotateCube>
    rotateCube(c, R3);
 8002f88:	2104      	movs	r1, #4
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f7ff fe92 	bl	8002cb4 <rotateCube>
}
 8002f90:	bf00      	nop
 8002f92:	3708      	adds	r7, #8
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <formular14>:
void formular14(cube_t *c)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
    rotateCube(c, F3);
 8002fa0:	210d      	movs	r1, #13
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f7ff fe86 	bl	8002cb4 <rotateCube>
    rotateCube(c, U3);
 8002fa8:	2107      	movs	r1, #7
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7ff fe82 	bl	8002cb4 <rotateCube>
    rotateCube(c, F);
 8002fb0:	210c      	movs	r1, #12
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7ff fe7e 	bl	8002cb4 <rotateCube>
}
 8002fb8:	bf00      	nop
 8002fba:	3708      	adds	r7, #8
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <formular15>:

void formular15(cube_t *c)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
    if (c->face[29] == c->face[31] && c->face[22] == c->face[26] && c->face[15] == c->face[13])
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	7f5a      	ldrb	r2, [r3, #29]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	7fdb      	ldrb	r3, [r3, #31]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d10b      	bne.n	8002fec <formular15+0x2c>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	7d9a      	ldrb	r2, [r3, #22]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	7e9b      	ldrb	r3, [r3, #26]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d105      	bne.n	8002fec <formular15+0x2c>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	7bda      	ldrb	r2, [r3, #15]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	7b5b      	ldrb	r3, [r3, #13]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d064      	beq.n	80030b6 <formular15+0xf6>
        return;
    size_t i = 0;
 8002fec:	2300      	movs	r3, #0
 8002fee:	60fb      	str	r3, [r7, #12]
    for (; i < 4;)
 8002ff0:	e055      	b.n	800309e <formular15+0xde>
    {
        if (c->face[8] == c->face[13] && c->face[22] == c->face[20] && c->face[9] == c->face[31])
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	7a1a      	ldrb	r2, [r3, #8]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	7b5b      	ldrb	r3, [r3, #13]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d10f      	bne.n	800301e <formular15+0x5e>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	7d9a      	ldrb	r2, [r3, #22]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	7d1b      	ldrb	r3, [r3, #20]
 8003006:	429a      	cmp	r2, r3
 8003008:	d109      	bne.n	800301e <formular15+0x5e>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	7a5a      	ldrb	r2, [r3, #9]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	7fdb      	ldrb	r3, [r3, #31]
 8003012:	429a      	cmp	r2, r3
 8003014:	d103      	bne.n	800301e <formular15+0x5e>
        {
            formular13(c);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7ff ffaa 	bl	8002f70 <formular13>
            return;
 800301c:	e04c      	b.n	80030b8 <formular15+0xf8>
        }
        else if (c->face[8] == c->face[31] && c->face[13] == c->face[20] && c->face[9] == c->face[22])
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	7a1a      	ldrb	r2, [r3, #8]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	7fdb      	ldrb	r3, [r3, #31]
 8003026:	429a      	cmp	r2, r3
 8003028:	d119      	bne.n	800305e <formular15+0x9e>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	7b5a      	ldrb	r2, [r3, #13]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	7d1b      	ldrb	r3, [r3, #20]
 8003032:	429a      	cmp	r2, r3
 8003034:	d113      	bne.n	800305e <formular15+0x9e>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	7a5a      	ldrb	r2, [r3, #9]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	7d9b      	ldrb	r3, [r3, #22]
 800303e:	429a      	cmp	r2, r3
 8003040:	d10d      	bne.n	800305e <formular15+0x9e>
        {
            formular13(c);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f7ff ff94 	bl	8002f70 <formular13>
            formular13(c);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f7ff ff91 	bl	8002f70 <formular13>
            rotateCube(c, U3);
 800304e:	2107      	movs	r1, #7
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f7ff fe2f 	bl	8002cb4 <rotateCube>
            formular13(c);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f7ff ff8a 	bl	8002f70 <formular13>
            return;
 800305c:	e02c      	b.n	80030b8 <formular15+0xf8>
        }
        else if (c->face[8] == c->face[22] && c->face[20] == c->face[31] && c->face[9] == c->face[13])
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	7a1a      	ldrb	r2, [r3, #8]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	7d9b      	ldrb	r3, [r3, #22]
 8003066:	429a      	cmp	r2, r3
 8003068:	d10f      	bne.n	800308a <formular15+0xca>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	7d1a      	ldrb	r2, [r3, #20]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	7fdb      	ldrb	r3, [r3, #31]
 8003072:	429a      	cmp	r2, r3
 8003074:	d109      	bne.n	800308a <formular15+0xca>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	7a5a      	ldrb	r2, [r3, #9]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	7b5b      	ldrb	r3, [r3, #13]
 800307e:	429a      	cmp	r2, r3
 8003080:	d103      	bne.n	800308a <formular15+0xca>
        {
            formular14(c);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f7ff ff88 	bl	8002f98 <formular14>
            return;
 8003088:	e016      	b.n	80030b8 <formular15+0xf8>
        }
        else
        {
            if (++i == 4)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	3301      	adds	r3, #1
 800308e:	60fb      	str	r3, [r7, #12]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2b04      	cmp	r3, #4
 8003094:	d007      	beq.n	80030a6 <formular15+0xe6>
                break;
            rotateCube(c, U);
 8003096:	2106      	movs	r1, #6
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f7ff fe0b 	bl	8002cb4 <rotateCube>
    for (; i < 4;)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2b03      	cmp	r3, #3
 80030a2:	d9a6      	bls.n	8002ff2 <formular15+0x32>
 80030a4:	e000      	b.n	80030a8 <formular15+0xe8>
                break;
 80030a6:	bf00      	nop
        }
    }
    if (i == 4)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2b04      	cmp	r3, #4
 80030ac:	d104      	bne.n	80030b8 <formular15+0xf8>
        formular13(c);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f7ff ff5e 	bl	8002f70 <formular13>
 80030b4:	e000      	b.n	80030b8 <formular15+0xf8>
        return;
 80030b6:	bf00      	nop
}
 80030b8:	3710      	adds	r7, #16
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <formular21>:
void formular21(cube_t *c)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b082      	sub	sp, #8
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
    rotateCube(c, U3);
 80030c6:	2107      	movs	r1, #7
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f7ff fdf3 	bl	8002cb4 <rotateCube>
    rotateCube(c, F3);
 80030ce:	210d      	movs	r1, #13
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f7ff fdef 	bl	8002cb4 <rotateCube>
    rotateCube(c, U);
 80030d6:	2106      	movs	r1, #6
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f7ff fdeb 	bl	8002cb4 <rotateCube>
    rotateCube(c, F);
 80030de:	210c      	movs	r1, #12
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f7ff fde7 	bl	8002cb4 <rotateCube>
    rotateCube(c, U);
 80030e6:	2106      	movs	r1, #6
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f7ff fde3 	bl	8002cb4 <rotateCube>
    rotateCube(c, R);
 80030ee:	2103      	movs	r1, #3
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f7ff fddf 	bl	8002cb4 <rotateCube>
    rotateCube(c, U3);
 80030f6:	2107      	movs	r1, #7
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f7ff fddb 	bl	8002cb4 <rotateCube>
    rotateCube(c, R3);
 80030fe:	2104      	movs	r1, #4
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f7ff fdd7 	bl	8002cb4 <rotateCube>
}
 8003106:	bf00      	nop
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <formular22>:
void formular22(cube_t *c)
{
 800310e:	b580      	push	{r7, lr}
 8003110:	b082      	sub	sp, #8
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
    rotateCube(c, U);
 8003116:	2106      	movs	r1, #6
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f7ff fdcb 	bl	8002cb4 <rotateCube>
    rotateCube(c, R);
 800311e:	2103      	movs	r1, #3
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f7ff fdc7 	bl	8002cb4 <rotateCube>
    rotateCube(c, U3);
 8003126:	2107      	movs	r1, #7
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f7ff fdc3 	bl	8002cb4 <rotateCube>
    rotateCube(c, R3);
 800312e:	2104      	movs	r1, #4
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f7ff fdbf 	bl	8002cb4 <rotateCube>
    rotateCube(c, U3);
 8003136:	2107      	movs	r1, #7
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f7ff fdbb 	bl	8002cb4 <rotateCube>
    rotateCube(c, F3);
 800313e:	210d      	movs	r1, #13
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f7ff fdb7 	bl	8002cb4 <rotateCube>
    rotateCube(c, U);
 8003146:	2106      	movs	r1, #6
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f7ff fdb3 	bl	8002cb4 <rotateCube>
    rotateCube(c, F);
 800314e:	210c      	movs	r1, #12
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f7ff fdaf 	bl	8002cb4 <rotateCube>
}
 8003156:	bf00      	nop
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <formular23>:
void formular23(cube_t *c)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b084      	sub	sp, #16
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
    if (c->face[23] == c->face[22] && c->face[12] == c->face[13])
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	7dda      	ldrb	r2, [r3, #23]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	7d9b      	ldrb	r3, [r3, #22]
 800316e:	429a      	cmp	r2, r3
 8003170:	d105      	bne.n	800317e <formular23+0x20>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	7b1a      	ldrb	r2, [r3, #12]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	7b5b      	ldrb	r3, [r3, #13]
 800317a:	429a      	cmp	r2, r3
 800317c:	d038      	beq.n	80031f0 <formular23+0x92>
        return;
    size_t i = 0;
 800317e:	2300      	movs	r3, #0
 8003180:	60fb      	str	r3, [r7, #12]
    for (; i < 4;)
 8003182:	e029      	b.n	80031d8 <formular23+0x7a>
    {
        if (c->face[19] == c->face[22] && c->face[7] == c->face[13])
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	7cda      	ldrb	r2, [r3, #19]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	7d9b      	ldrb	r3, [r3, #22]
 800318c:	429a      	cmp	r2, r3
 800318e:	d109      	bne.n	80031a4 <formular23+0x46>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	79da      	ldrb	r2, [r3, #7]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	7b5b      	ldrb	r3, [r3, #13]
 8003198:	429a      	cmp	r2, r3
 800319a:	d103      	bne.n	80031a4 <formular23+0x46>
        {
            formular22(c);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f7ff ffb6 	bl	800310e <formular22>
            break;
 80031a2:	e01e      	b.n	80031e2 <formular23+0x84>
        }
        else if (c->face[5] == c->face[22] && c->face[10] == c->face[13])
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	795a      	ldrb	r2, [r3, #5]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	7d9b      	ldrb	r3, [r3, #22]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d109      	bne.n	80031c4 <formular23+0x66>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	7a9a      	ldrb	r2, [r3, #10]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	7b5b      	ldrb	r3, [r3, #13]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d103      	bne.n	80031c4 <formular23+0x66>
        {
            formular21(c);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f7ff ff7e 	bl	80030be <formular21>
            break;
 80031c2:	e00e      	b.n	80031e2 <formular23+0x84>
        }
        else
        {
            if (++i == 4)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	3301      	adds	r3, #1
 80031c8:	60fb      	str	r3, [r7, #12]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2b04      	cmp	r3, #4
 80031ce:	d007      	beq.n	80031e0 <formular23+0x82>
                break;
            rotateCube(c, U);
 80031d0:	2106      	movs	r1, #6
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f7ff fd6e 	bl	8002cb4 <rotateCube>
    for (; i < 4;)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2b03      	cmp	r3, #3
 80031dc:	d9d2      	bls.n	8003184 <formular23+0x26>
 80031de:	e000      	b.n	80031e2 <formular23+0x84>
                break;
 80031e0:	bf00      	nop
        }
    }
    if (i == 4)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2b04      	cmp	r3, #4
 80031e6:	d104      	bne.n	80031f2 <formular23+0x94>
        formular21(c);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f7ff ff68 	bl	80030be <formular21>
 80031ee:	e000      	b.n	80031f2 <formular23+0x94>
        return;
 80031f0:	bf00      	nop
}
 80031f2:	3710      	adds	r7, #16
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <formular31>:
void formular31(cube_t *c)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
    rotateCube(c, F);
 8003200:	210c      	movs	r1, #12
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f7ff fd56 	bl	8002cb4 <rotateCube>
    rotateCube(c, R);
 8003208:	2103      	movs	r1, #3
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7ff fd52 	bl	8002cb4 <rotateCube>
    rotateCube(c, U);
 8003210:	2106      	movs	r1, #6
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f7ff fd4e 	bl	8002cb4 <rotateCube>
    rotateCube(c, R3);
 8003218:	2104      	movs	r1, #4
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f7ff fd4a 	bl	8002cb4 <rotateCube>
    rotateCube(c, U3);
 8003220:	2107      	movs	r1, #7
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f7ff fd46 	bl	8002cb4 <rotateCube>
    rotateCube(c, F3);
 8003228:	210d      	movs	r1, #13
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f7ff fd42 	bl	8002cb4 <rotateCube>
}
 8003230:	bf00      	nop
 8003232:	3708      	adds	r7, #8
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <formular32>:
void formular32(cube_t *c)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
    if (c->face[1] == c->face[4] && c->face[7] == c->face[4])
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	785a      	ldrb	r2, [r3, #1]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	791b      	ldrb	r3, [r3, #4]
 8003248:	429a      	cmp	r2, r3
 800324a:	d109      	bne.n	8003260 <formular32+0x28>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	79da      	ldrb	r2, [r3, #7]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	791b      	ldrb	r3, [r3, #4]
 8003254:	429a      	cmp	r2, r3
 8003256:	d103      	bne.n	8003260 <formular32+0x28>
        rotateCube(c, U);
 8003258:	2106      	movs	r1, #6
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f7ff fd2a 	bl	8002cb4 <rotateCube>
    if (c->face[3] == c->face[4] && c->face[5] == c->face[4])
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	78da      	ldrb	r2, [r3, #3]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	791b      	ldrb	r3, [r3, #4]
 8003268:	429a      	cmp	r2, r3
 800326a:	d10d      	bne.n	8003288 <formular32+0x50>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	795a      	ldrb	r2, [r3, #5]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	791b      	ldrb	r3, [r3, #4]
 8003274:	429a      	cmp	r2, r3
 8003276:	d107      	bne.n	8003288 <formular32+0x50>
    {
        formular31(c);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f7ff ffbd 	bl	80031f8 <formular31>
        return;
 800327e:	e029      	b.n	80032d4 <formular32+0x9c>
    }
    while (c->face[19] != c->face[4] || c->face[10] != c->face[4])
        rotateCube(c, U);
 8003280:	2106      	movs	r1, #6
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f7ff fd16 	bl	8002cb4 <rotateCube>
    while (c->face[19] != c->face[4] || c->face[10] != c->face[4])
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	7cda      	ldrb	r2, [r3, #19]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	791b      	ldrb	r3, [r3, #4]
 8003290:	429a      	cmp	r2, r3
 8003292:	d1f5      	bne.n	8003280 <formular32+0x48>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	7a9a      	ldrb	r2, [r3, #10]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	791b      	ldrb	r3, [r3, #4]
 800329c:	429a      	cmp	r2, r3
 800329e:	d1ef      	bne.n	8003280 <formular32+0x48>
    if (c->face[3] == c->face[4] && c->face[1] == c->face[4])
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	78da      	ldrb	r2, [r3, #3]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	791b      	ldrb	r3, [r3, #4]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d109      	bne.n	80032c0 <formular32+0x88>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	785a      	ldrb	r2, [r3, #1]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	791b      	ldrb	r3, [r3, #4]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d103      	bne.n	80032c0 <formular32+0x88>
        formular31(c);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f7ff ff9d 	bl	80031f8 <formular31>
 80032be:	e009      	b.n	80032d4 <formular32+0x9c>
    else
    {
        formular31(c);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f7ff ff99 	bl	80031f8 <formular31>
        rotateCube(c, U);
 80032c6:	2106      	movs	r1, #6
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f7ff fcf3 	bl	8002cb4 <rotateCube>
        formular31(c);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7ff ff92 	bl	80031f8 <formular31>
    }
}
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <formular41>:
void formular41(cube_t *c)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b082      	sub	sp, #8
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
    rotateCube(c, R3);
 80032e2:	2104      	movs	r1, #4
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f7ff fce5 	bl	8002cb4 <rotateCube>
    rotateCube(c, U2);
 80032ea:	2108      	movs	r1, #8
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f7ff fce1 	bl	8002cb4 <rotateCube>
    rotateCube(c, R);
 80032f2:	2103      	movs	r1, #3
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f7ff fcdd 	bl	8002cb4 <rotateCube>
    rotateCube(c, U);
 80032fa:	2106      	movs	r1, #6
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f7ff fcd9 	bl	8002cb4 <rotateCube>
    rotateCube(c, R3);
 8003302:	2104      	movs	r1, #4
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f7ff fcd5 	bl	8002cb4 <rotateCube>
    rotateCube(c, U);
 800330a:	2106      	movs	r1, #6
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f7ff fcd1 	bl	8002cb4 <rotateCube>
    rotateCube(c, R);
 8003312:	2103      	movs	r1, #3
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f7ff fccd 	bl	8002cb4 <rotateCube>
}
 800331a:	bf00      	nop
 800331c:	3708      	adds	r7, #8
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <formular42>:
void formular42(cube_t *c)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b082      	sub	sp, #8
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
    rotateCube(c, U3);
 800332a:	2107      	movs	r1, #7
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f7ff fcc1 	bl	8002cb4 <rotateCube>
    rotateCube(c, R);
 8003332:	2103      	movs	r1, #3
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f7ff fcbd 	bl	8002cb4 <rotateCube>
    rotateCube(c, U2);
 800333a:	2108      	movs	r1, #8
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f7ff fcb9 	bl	8002cb4 <rotateCube>
    rotateCube(c, R3);
 8003342:	2104      	movs	r1, #4
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f7ff fcb5 	bl	8002cb4 <rotateCube>
    rotateCube(c, U3);
 800334a:	2107      	movs	r1, #7
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f7ff fcb1 	bl	8002cb4 <rotateCube>
    rotateCube(c, R);
 8003352:	2103      	movs	r1, #3
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f7ff fcad 	bl	8002cb4 <rotateCube>
    rotateCube(c, U3);
 800335a:	2107      	movs	r1, #7
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f7ff fca9 	bl	8002cb4 <rotateCube>
    rotateCube(c, R3);
 8003362:	2104      	movs	r1, #4
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f7ff fca5 	bl	8002cb4 <rotateCube>
}
 800336a:	bf00      	nop
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <formular43>:
void formular43(cube_t *c)
{
 8003372:	b580      	push	{r7, lr}
 8003374:	b086      	sub	sp, #24
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
    uint8_t cnt = 0;
 800337a:	2300      	movs	r3, #0
 800337c:	75fb      	strb	r3, [r7, #23]
    for (size_t i = 0; i < 9; i++)
 800337e:	2300      	movs	r3, #0
 8003380:	613b      	str	r3, [r7, #16]
 8003382:	e00d      	b.n	80033a0 <formular43+0x2e>
    {
        if (c->face[i] == c->face[4])
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	4413      	add	r3, r2
 800338a:	781a      	ldrb	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	791b      	ldrb	r3, [r3, #4]
 8003390:	429a      	cmp	r2, r3
 8003392:	d102      	bne.n	800339a <formular43+0x28>
            cnt++;
 8003394:	7dfb      	ldrb	r3, [r7, #23]
 8003396:	3301      	adds	r3, #1
 8003398:	75fb      	strb	r3, [r7, #23]
    for (size_t i = 0; i < 9; i++)
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	3301      	adds	r3, #1
 800339e:	613b      	str	r3, [r7, #16]
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	2b08      	cmp	r3, #8
 80033a4:	d9ee      	bls.n	8003384 <formular43+0x12>
    }
    if (cnt == 6)
 80033a6:	7dfb      	ldrb	r3, [r7, #23]
 80033a8:	2b06      	cmp	r3, #6
 80033aa:	d142      	bne.n	8003432 <formular43+0xc0>
    {
        while (1)
        {
            uint8_t case1 = c->face[47] == c->face[4] && c->face[38] == c->face[4] && c->face[11] == c->face[4];
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	791b      	ldrb	r3, [r3, #4]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d10e      	bne.n	80033d8 <formular43+0x66>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	791b      	ldrb	r3, [r3, #4]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d107      	bne.n	80033d8 <formular43+0x66>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	7ada      	ldrb	r2, [r3, #11]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	791b      	ldrb	r3, [r3, #4]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d101      	bne.n	80033d8 <formular43+0x66>
 80033d4:	2301      	movs	r3, #1
 80033d6:	e000      	b.n	80033da <formular43+0x68>
 80033d8:	2300      	movs	r3, #0
 80033da:	72bb      	strb	r3, [r7, #10]
            uint8_t case2 = c->face[45] == c->face[4] && c->face[36] == c->face[4] && c->face[18] == c->face[4];
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	791b      	ldrb	r3, [r3, #4]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d10e      	bne.n	8003408 <formular43+0x96>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	791b      	ldrb	r3, [r3, #4]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d107      	bne.n	8003408 <formular43+0x96>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	7c9a      	ldrb	r2, [r3, #18]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	791b      	ldrb	r3, [r3, #4]
 8003400:	429a      	cmp	r2, r3
 8003402:	d101      	bne.n	8003408 <formular43+0x96>
 8003404:	2301      	movs	r3, #1
 8003406:	e000      	b.n	800340a <formular43+0x98>
 8003408:	2300      	movs	r3, #0
 800340a:	727b      	strb	r3, [r7, #9]
            if (case1)
 800340c:	7abb      	ldrb	r3, [r7, #10]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <formular43+0xa8>
            {
                formular41(c);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f7ff ff61 	bl	80032da <formular41>
                return;
 8003418:	e0c2      	b.n	80035a0 <formular43+0x22e>
            }
            else if (case2)
 800341a:	7a7b      	ldrb	r3, [r7, #9]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d003      	beq.n	8003428 <formular43+0xb6>
            {
                formular42(c);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f7ff ff7e 	bl	8003322 <formular42>
                return;
 8003426:	e0bb      	b.n	80035a0 <formular43+0x22e>
            }
            else
                rotateCube(c, U);
 8003428:	2106      	movs	r1, #6
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f7ff fc42 	bl	8002cb4 <rotateCube>
        {
 8003430:	e7bc      	b.n	80033ac <formular43+0x3a>
        }
    }
    else if (cnt == 5)
 8003432:	7dfb      	ldrb	r3, [r7, #23]
 8003434:	2b05      	cmp	r3, #5
 8003436:	d157      	bne.n	80034e8 <formular43+0x176>
    {
        while (1)
        {
            uint8_t case3 = c->face[11] == c->face[4] && c->face[36] == c->face[4] && c->face[18] == c->face[4] && c->face[20] == c->face[4];
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	7ada      	ldrb	r2, [r3, #11]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	791b      	ldrb	r3, [r3, #4]
 8003440:	429a      	cmp	r2, r3
 8003442:	d114      	bne.n	800346e <formular43+0xfc>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	791b      	ldrb	r3, [r3, #4]
 800344e:	429a      	cmp	r2, r3
 8003450:	d10d      	bne.n	800346e <formular43+0xfc>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	7c9a      	ldrb	r2, [r3, #18]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	791b      	ldrb	r3, [r3, #4]
 800345a:	429a      	cmp	r2, r3
 800345c:	d107      	bne.n	800346e <formular43+0xfc>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	7d1a      	ldrb	r2, [r3, #20]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	791b      	ldrb	r3, [r3, #4]
 8003466:	429a      	cmp	r2, r3
 8003468:	d101      	bne.n	800346e <formular43+0xfc>
 800346a:	2301      	movs	r3, #1
 800346c:	e000      	b.n	8003470 <formular43+0xfe>
 800346e:	2300      	movs	r3, #0
 8003470:	733b      	strb	r3, [r7, #12]
            uint8_t case4 = c->face[45] == c->face[4] && c->face[47] == c->face[4] && c->face[18] == c->face[4] && c->face[20] == c->face[4];
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	791b      	ldrb	r3, [r3, #4]
 800347c:	429a      	cmp	r2, r3
 800347e:	d114      	bne.n	80034aa <formular43+0x138>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	791b      	ldrb	r3, [r3, #4]
 800348a:	429a      	cmp	r2, r3
 800348c:	d10d      	bne.n	80034aa <formular43+0x138>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	7c9a      	ldrb	r2, [r3, #18]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	791b      	ldrb	r3, [r3, #4]
 8003496:	429a      	cmp	r2, r3
 8003498:	d107      	bne.n	80034aa <formular43+0x138>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	7d1a      	ldrb	r2, [r3, #20]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	791b      	ldrb	r3, [r3, #4]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d101      	bne.n	80034aa <formular43+0x138>
 80034a6:	2301      	movs	r3, #1
 80034a8:	e000      	b.n	80034ac <formular43+0x13a>
 80034aa:	2300      	movs	r3, #0
 80034ac:	72fb      	strb	r3, [r7, #11]
            if (case3)
 80034ae:	7b3b      	ldrb	r3, [r7, #12]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d00a      	beq.n	80034ca <formular43+0x158>
            {
                formular41(c);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f7ff ff10 	bl	80032da <formular41>
                rotateCube(c, U3);
 80034ba:	2107      	movs	r1, #7
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f7ff fbf9 	bl	8002cb4 <rotateCube>
                formular41(c);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f7ff ff09 	bl	80032da <formular41>
                break;
 80034c8:	e06a      	b.n	80035a0 <formular43+0x22e>
            }
            else if (case4)
 80034ca:	7afb      	ldrb	r3, [r7, #11]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d006      	beq.n	80034de <formular43+0x16c>
            {
                formular41(c);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f7ff ff02 	bl	80032da <formular41>
                formular41(c);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7ff feff 	bl	80032da <formular41>
                break;
 80034dc:	e060      	b.n	80035a0 <formular43+0x22e>
            }
            else
                rotateCube(c, U);
 80034de:	2106      	movs	r1, #6
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f7ff fbe7 	bl	8002cb4 <rotateCube>
        {
 80034e6:	e7a7      	b.n	8003438 <formular43+0xc6>
        }
    }
    else if (cnt == 7)
 80034e8:	7dfb      	ldrb	r3, [r7, #23]
 80034ea:	2b07      	cmp	r3, #7
 80034ec:	d158      	bne.n	80035a0 <formular43+0x22e>
    {
        while (1)
        {
            uint8_t case5 = c->face[18] == c->face[4] && c->face[20] == c->face[4];
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	7c9a      	ldrb	r2, [r3, #18]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	791b      	ldrb	r3, [r3, #4]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d107      	bne.n	800350a <formular43+0x198>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	7d1a      	ldrb	r2, [r3, #20]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	791b      	ldrb	r3, [r3, #4]
 8003502:	429a      	cmp	r2, r3
 8003504:	d101      	bne.n	800350a <formular43+0x198>
 8003506:	2301      	movs	r3, #1
 8003508:	e000      	b.n	800350c <formular43+0x19a>
 800350a:	2300      	movs	r3, #0
 800350c:	73fb      	strb	r3, [r7, #15]
            uint8_t case6 = c->face[45] == c->face[4] && c->face[20] == c->face[4];
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	791b      	ldrb	r3, [r3, #4]
 8003518:	429a      	cmp	r2, r3
 800351a:	d107      	bne.n	800352c <formular43+0x1ba>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	7d1a      	ldrb	r2, [r3, #20]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	791b      	ldrb	r3, [r3, #4]
 8003524:	429a      	cmp	r2, r3
 8003526:	d101      	bne.n	800352c <formular43+0x1ba>
 8003528:	2301      	movs	r3, #1
 800352a:	e000      	b.n	800352e <formular43+0x1bc>
 800352c:	2300      	movs	r3, #0
 800352e:	73bb      	strb	r3, [r7, #14]
            uint8_t case7 = c->face[47] == c->face[4] && c->face[9] == c->face[4];
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	791b      	ldrb	r3, [r3, #4]
 800353a:	429a      	cmp	r2, r3
 800353c:	d107      	bne.n	800354e <formular43+0x1dc>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	7a5a      	ldrb	r2, [r3, #9]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	791b      	ldrb	r3, [r3, #4]
 8003546:	429a      	cmp	r2, r3
 8003548:	d101      	bne.n	800354e <formular43+0x1dc>
 800354a:	2301      	movs	r3, #1
 800354c:	e000      	b.n	8003550 <formular43+0x1de>
 800354e:	2300      	movs	r3, #0
 8003550:	737b      	strb	r3, [r7, #13]
            if (case5)
 8003552:	7bfb      	ldrb	r3, [r7, #15]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d00a      	beq.n	800356e <formular43+0x1fc>
            {
                formular42(c);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f7ff fee2 	bl	8003322 <formular42>
                rotateCube(c, U2);
 800355e:	2108      	movs	r1, #8
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f7ff fba7 	bl	8002cb4 <rotateCube>
                formular41(c);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f7ff feb7 	bl	80032da <formular41>
                return;
 800356c:	e018      	b.n	80035a0 <formular43+0x22e>
            }
            else if (case6)
 800356e:	7bbb      	ldrb	r3, [r7, #14]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d006      	beq.n	8003582 <formular43+0x210>
            {
                formular42(c);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f7ff fed4 	bl	8003322 <formular42>
                formular41(c);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f7ff fead 	bl	80032da <formular41>
                return;
 8003580:	e00e      	b.n	80035a0 <formular43+0x22e>
            }
            else if (case7)
 8003582:	7b7b      	ldrb	r3, [r7, #13]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d006      	beq.n	8003596 <formular43+0x224>
            {
                formular41(c);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f7ff fea6 	bl	80032da <formular41>
                formular42(c);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f7ff fec7 	bl	8003322 <formular42>
                return;
 8003594:	e004      	b.n	80035a0 <formular43+0x22e>
            }
            else
            {
                rotateCube(c, U);
 8003596:	2106      	movs	r1, #6
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f7ff fb8b 	bl	8002cb4 <rotateCube>
        {
 800359e:	e7a6      	b.n	80034ee <formular43+0x17c>
            }
        }
    } // printf("case1 = %d, case2 = %d, case3 = %d, case4 = %d, case5 = %d, case6 = %d, case7 = %d\n", case1, case2, case3, case4, case5, case6, case7);
}
 80035a0:	3718      	adds	r7, #24
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <formular51>:
void formular51(cube_t *c)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b082      	sub	sp, #8
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
    rotateCube(c, R);
 80035ae:	2103      	movs	r1, #3
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f7ff fb7f 	bl	8002cb4 <rotateCube>
    rotateCube(c, B3);
 80035b6:	2110      	movs	r1, #16
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f7ff fb7b 	bl	8002cb4 <rotateCube>
    rotateCube(c, R);
 80035be:	2103      	movs	r1, #3
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f7ff fb77 	bl	8002cb4 <rotateCube>
    rotateCube(c, F2);
 80035c6:	210e      	movs	r1, #14
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f7ff fb73 	bl	8002cb4 <rotateCube>
    rotateCube(c, R3);
 80035ce:	2104      	movs	r1, #4
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f7ff fb6f 	bl	8002cb4 <rotateCube>
    rotateCube(c, B);
 80035d6:	210f      	movs	r1, #15
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f7ff fb6b 	bl	8002cb4 <rotateCube>
    rotateCube(c, R);
 80035de:	2103      	movs	r1, #3
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f7ff fb67 	bl	8002cb4 <rotateCube>
    rotateCube(c, F2);
 80035e6:	210e      	movs	r1, #14
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f7ff fb63 	bl	8002cb4 <rotateCube>
    rotateCube(c, R2);
 80035ee:	2105      	movs	r1, #5
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f7ff fb5f 	bl	8002cb4 <rotateCube>
}
 80035f6:	bf00      	nop
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
	...

08003600 <formular52>:
void formular52(cube_t *c)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
    printf("formular52\n");
 8003608:	4834      	ldr	r0, [pc, #208]	; (80036dc <formular52+0xdc>)
 800360a:	f002 fc91 	bl	8005f30 <puts>
    if (c->face[18] == c->face[20] && c->face[9] == c->face[11] && c->face[36] == c->face[38])
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	7c9a      	ldrb	r2, [r3, #18]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	7d1b      	ldrb	r3, [r3, #20]
 8003616:	429a      	cmp	r2, r3
 8003618:	d119      	bne.n	800364e <formular52+0x4e>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	7a5a      	ldrb	r2, [r3, #9]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	7adb      	ldrb	r3, [r3, #11]
 8003622:	429a      	cmp	r2, r3
 8003624:	d113      	bne.n	800364e <formular52+0x4e>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003632:	429a      	cmp	r2, r3
 8003634:	d10b      	bne.n	800364e <formular52+0x4e>
    {
        while (c->face[18] != c->face[22])
 8003636:	e003      	b.n	8003640 <formular52+0x40>
            rotateCube(c, U);
 8003638:	2106      	movs	r1, #6
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f7ff fb3a 	bl	8002cb4 <rotateCube>
        while (c->face[18] != c->face[22])
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	7c9a      	ldrb	r2, [r3, #18]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	7d9b      	ldrb	r3, [r3, #22]
 8003648:	429a      	cmp	r2, r3
 800364a:	d1f5      	bne.n	8003638 <formular52+0x38>
        return;
 800364c:	e042      	b.n	80036d4 <formular52+0xd4>
    }
    uint8_t routeCnt = 0;
 800364e:	2300      	movs	r3, #0
 8003650:	75fb      	strb	r3, [r7, #23]
    for (size_t i = 0; i < 4; i++)
 8003652:	2300      	movs	r3, #0
 8003654:	613b      	str	r3, [r7, #16]
 8003656:	e00f      	b.n	8003678 <formular52+0x78>
    {
        if (c->face[18] != c->face[20])
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	7c9a      	ldrb	r2, [r3, #18]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	7d1b      	ldrb	r3, [r3, #20]
 8003660:	429a      	cmp	r2, r3
 8003662:	d00d      	beq.n	8003680 <formular52+0x80>
        {
            rotateCube(c, U);
 8003664:	2106      	movs	r1, #6
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7ff fb24 	bl	8002cb4 <rotateCube>
            routeCnt++;
 800366c:	7dfb      	ldrb	r3, [r7, #23]
 800366e:	3301      	adds	r3, #1
 8003670:	75fb      	strb	r3, [r7, #23]
    for (size_t i = 0; i < 4; i++)
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	3301      	adds	r3, #1
 8003676:	613b      	str	r3, [r7, #16]
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	2b03      	cmp	r3, #3
 800367c:	d9ec      	bls.n	8003658 <formular52+0x58>
 800367e:	e000      	b.n	8003682 <formular52+0x82>
        }
        else
            break;
 8003680:	bf00      	nop
    }
    formular51(c);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f7ff ff8f 	bl	80035a6 <formular51>
    if (routeCnt == 4)
 8003688:	7dfb      	ldrb	r3, [r7, #23]
 800368a:	2b04      	cmp	r3, #4
 800368c:	d11c      	bne.n	80036c8 <formular52+0xc8>
    {
        for (size_t i = 0; i < 3; i++)
 800368e:	2300      	movs	r3, #0
 8003690:	60fb      	str	r3, [r7, #12]
 8003692:	e00c      	b.n	80036ae <formular52+0xae>
        {
            if (c->face[18] != c->face[20])
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	7c9a      	ldrb	r2, [r3, #18]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	7d1b      	ldrb	r3, [r3, #20]
 800369c:	429a      	cmp	r2, r3
 800369e:	d00a      	beq.n	80036b6 <formular52+0xb6>
                rotateCube(c, U);
 80036a0:	2106      	movs	r1, #6
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7ff fb06 	bl	8002cb4 <rotateCube>
        for (size_t i = 0; i < 3; i++)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	3301      	adds	r3, #1
 80036ac:	60fb      	str	r3, [r7, #12]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d9ef      	bls.n	8003694 <formular52+0x94>
 80036b4:	e000      	b.n	80036b8 <formular52+0xb8>
            else
                break;
 80036b6:	bf00      	nop
        }
        formular51(c);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7ff ff74 	bl	80035a6 <formular51>
    }
    while (c->face[18] != c->face[22])
 80036be:	e003      	b.n	80036c8 <formular52+0xc8>
        rotateCube(c, U);
 80036c0:	2106      	movs	r1, #6
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f7ff faf6 	bl	8002cb4 <rotateCube>
    while (c->face[18] != c->face[22])
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	7c9a      	ldrb	r2, [r3, #18]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	7d9b      	ldrb	r3, [r3, #22]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d1f5      	bne.n	80036c0 <formular52+0xc0>
}
 80036d4:	3718      	adds	r7, #24
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	08006878 	.word	0x08006878

080036e0 <formular61>:
void formular61(cube_t *c)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
    rotateCube(c, R);
 80036e8:	2103      	movs	r1, #3
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f7ff fae2 	bl	8002cb4 <rotateCube>
    rotateCube(c, U3);
 80036f0:	2107      	movs	r1, #7
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7ff fade 	bl	8002cb4 <rotateCube>
    rotateCube(c, R);
 80036f8:	2103      	movs	r1, #3
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f7ff fada 	bl	8002cb4 <rotateCube>
    rotateCube(c, U);
 8003700:	2106      	movs	r1, #6
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7ff fad6 	bl	8002cb4 <rotateCube>
    rotateCube(c, R);
 8003708:	2103      	movs	r1, #3
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f7ff fad2 	bl	8002cb4 <rotateCube>
    rotateCube(c, U);
 8003710:	2106      	movs	r1, #6
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7ff face 	bl	8002cb4 <rotateCube>
    rotateCube(c, R);
 8003718:	2103      	movs	r1, #3
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f7ff faca 	bl	8002cb4 <rotateCube>
    rotateCube(c, U3);
 8003720:	2107      	movs	r1, #7
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f7ff fac6 	bl	8002cb4 <rotateCube>
    rotateCube(c, R3);
 8003728:	2104      	movs	r1, #4
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f7ff fac2 	bl	8002cb4 <rotateCube>
    rotateCube(c, U3);
 8003730:	2107      	movs	r1, #7
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f7ff fabe 	bl	8002cb4 <rotateCube>
    rotateCube(c, R2);
 8003738:	2105      	movs	r1, #5
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f7ff faba 	bl	8002cb4 <rotateCube>
}
 8003740:	bf00      	nop
 8003742:	3708      	adds	r7, #8
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <formular62>:
void formular62(cube_t *c)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
    while (1)
    {
        if (c->face[19] == c->face[22] && c->face[37] == c->face[40])
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	7cda      	ldrb	r2, [r3, #19]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	7d9b      	ldrb	r3, [r3, #22]
 8003758:	429a      	cmp	r2, r3
 800375a:	d108      	bne.n	800376e <formular62+0x26>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003768:	429a      	cmp	r2, r3
 800376a:	f000 8086 	beq.w	800387a <formular62+0x132>
        {
            break;
        }
        if (c->face[19] == c->face[13] && c->face[10] == c->face[40] && c->face[37] == c->face[22])
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	7cda      	ldrb	r2, [r3, #19]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	7b5b      	ldrb	r3, [r3, #13]
 8003776:	429a      	cmp	r2, r3
 8003778:	d111      	bne.n	800379e <formular62+0x56>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	7a9a      	ldrb	r2, [r3, #10]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003784:	429a      	cmp	r2, r3
 8003786:	d10a      	bne.n	800379e <formular62+0x56>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	7d9b      	ldrb	r3, [r3, #22]
 8003792:	429a      	cmp	r2, r3
 8003794:	d103      	bne.n	800379e <formular62+0x56>
        {
            formular61(c);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f7ff ffa2 	bl	80036e0 <formular61>
            break;
 800379c:	e06e      	b.n	800387c <formular62+0x134>
        }
        else if (c->face[37] == c->face[13] && c->face[19] == c->face[40] && c->face[10] == c->face[22])
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	7b5b      	ldrb	r3, [r3, #13]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d113      	bne.n	80037d4 <formular62+0x8c>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	7cda      	ldrb	r2, [r3, #19]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d10c      	bne.n	80037d4 <formular62+0x8c>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	7a9a      	ldrb	r2, [r3, #10]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	7d9b      	ldrb	r3, [r3, #22]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d106      	bne.n	80037d4 <formular62+0x8c>
        {
            formular61(c);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f7ff ff8a 	bl	80036e0 <formular61>
            formular61(c);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f7ff ff87 	bl	80036e0 <formular61>
            break;
 80037d2:	e053      	b.n	800387c <formular62+0x134>
        }
        else if (c->face[19] == c->face[49] && c->face[46] == c->face[22] && c->face[37] == c->face[13] && c->face[10] == c->face[40])
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	7cda      	ldrb	r2, [r3, #19]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80037de:	429a      	cmp	r2, r3
 80037e0:	d11f      	bne.n	8003822 <formular62+0xda>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	7d9b      	ldrb	r3, [r3, #22]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d118      	bne.n	8003822 <formular62+0xda>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	7b5b      	ldrb	r3, [r3, #13]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d111      	bne.n	8003822 <formular62+0xda>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	7a9a      	ldrb	r2, [r3, #10]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003808:	429a      	cmp	r2, r3
 800380a:	d10a      	bne.n	8003822 <formular62+0xda>
        {
            formular61(c);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f7ff ff67 	bl	80036e0 <formular61>
            rotateCube(c, U);
 8003812:	2106      	movs	r1, #6
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f7ff fa4d 	bl	8002cb4 <rotateCube>
            formular61(c);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f7ff ff60 	bl	80036e0 <formular61>
            break;
 8003820:	e02c      	b.n	800387c <formular62+0x134>
        }
        else if (c->face[19] == c->face[13] && c->face[10] == c->face[22] && c->face[37] == c->face[49] && c->face[46] == c->face[40])
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	7cda      	ldrb	r2, [r3, #19]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	7b5b      	ldrb	r3, [r3, #13]
 800382a:	429a      	cmp	r2, r3
 800382c:	d120      	bne.n	8003870 <formular62+0x128>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	7a9a      	ldrb	r2, [r3, #10]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	7d9b      	ldrb	r3, [r3, #22]
 8003836:	429a      	cmp	r2, r3
 8003838:	d11a      	bne.n	8003870 <formular62+0x128>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003846:	429a      	cmp	r2, r3
 8003848:	d112      	bne.n	8003870 <formular62+0x128>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003856:	429a      	cmp	r2, r3
 8003858:	d10a      	bne.n	8003870 <formular62+0x128>
        {
            formular61(c);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f7ff ff40 	bl	80036e0 <formular61>
            rotateCube(c, U3);
 8003860:	2107      	movs	r1, #7
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f7ff fa26 	bl	8002cb4 <rotateCube>
            formular61(c);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f7ff ff39 	bl	80036e0 <formular61>
            break;
 800386e:	e005      	b.n	800387c <formular62+0x134>
        }
        else
            rotateCube(c, T);
 8003870:	2112      	movs	r1, #18
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7ff fa1e 	bl	8002cb4 <rotateCube>
        if (c->face[19] == c->face[22] && c->face[37] == c->face[40])
 8003878:	e76a      	b.n	8003750 <formular62+0x8>
            break;
 800387a:	bf00      	nop
    }
}
 800387c:	bf00      	nop
 800387e:	3708      	adds	r7, #8
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <solve_Naive>:
void solve_Naive(cube_t *c)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
    // 1. get the botton face cross
    while (c->face[1] != 'D' || c->face[3] != 'D' || c->face[5] != 'D' || c->face[7] != 'D')
 800388c:	e002      	b.n	8003894 <solve_Naive+0x10>
        formular11(c);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f7ff fa84 	bl	8002d9c <formular11>
    while (c->face[1] != 'D' || c->face[3] != 'D' || c->face[5] != 'D' || c->face[7] != 'D')
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	785b      	ldrb	r3, [r3, #1]
 8003898:	2b44      	cmp	r3, #68	; 0x44
 800389a:	d1f8      	bne.n	800388e <solve_Naive+0xa>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	78db      	ldrb	r3, [r3, #3]
 80038a0:	2b44      	cmp	r3, #68	; 0x44
 80038a2:	d1f4      	bne.n	800388e <solve_Naive+0xa>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	795b      	ldrb	r3, [r3, #5]
 80038a8:	2b44      	cmp	r3, #68	; 0x44
 80038aa:	d1f0      	bne.n	800388e <solve_Naive+0xa>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	79db      	ldrb	r3, [r3, #7]
 80038b0:	2b44      	cmp	r3, #68	; 0x44
 80038b2:	d1ec      	bne.n	800388e <solve_Naive+0xa>
    formular12(c);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f7ff fb03 	bl	8002ec0 <formular12>
    // 2. get the botton corner
    while (c->face[26] != c->face[22] || c->face[17] != c->face[13] || c->face[53] != c->face[49] || c->face[40] != c->face[44] ||
 80038ba:	e006      	b.n	80038ca <solve_Naive+0x46>
           c->face[24] != c->face[22] || c->face[15] != c->face[13] || c->face[51] != c->face[49] || c->face[40] != c->face[42])
    {
        formular15(c);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f7ff fb7f 	bl	8002fc0 <formular15>
        rotateCube(c, T);
 80038c2:	2112      	movs	r1, #18
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f7ff f9f5 	bl	8002cb4 <rotateCube>
    while (c->face[26] != c->face[22] || c->face[17] != c->face[13] || c->face[53] != c->face[49] || c->face[40] != c->face[44] ||
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	7e9a      	ldrb	r2, [r3, #26]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	7d9b      	ldrb	r3, [r3, #22]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d1f2      	bne.n	80038bc <solve_Naive+0x38>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	7c5a      	ldrb	r2, [r3, #17]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	7b5b      	ldrb	r3, [r3, #13]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d1ec      	bne.n	80038bc <solve_Naive+0x38>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d1e4      	bne.n	80038bc <solve_Naive+0x38>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80038fe:	429a      	cmp	r2, r3
 8003900:	d1dc      	bne.n	80038bc <solve_Naive+0x38>
           c->face[24] != c->face[22] || c->face[15] != c->face[13] || c->face[51] != c->face[49] || c->face[40] != c->face[42])
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	7e1a      	ldrb	r2, [r3, #24]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	7d9b      	ldrb	r3, [r3, #22]
    while (c->face[26] != c->face[22] || c->face[17] != c->face[13] || c->face[53] != c->face[49] || c->face[40] != c->face[44] ||
 800390a:	429a      	cmp	r2, r3
 800390c:	d1d6      	bne.n	80038bc <solve_Naive+0x38>
           c->face[24] != c->face[22] || c->face[15] != c->face[13] || c->face[51] != c->face[49] || c->face[40] != c->face[42])
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	7bda      	ldrb	r2, [r3, #15]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	7b5b      	ldrb	r3, [r3, #13]
 8003916:	429a      	cmp	r2, r3
 8003918:	d1d0      	bne.n	80038bc <solve_Naive+0x38>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003926:	429a      	cmp	r2, r3
 8003928:	d1c8      	bne.n	80038bc <solve_Naive+0x38>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003936:	429a      	cmp	r2, r3
 8003938:	d1c0      	bne.n	80038bc <solve_Naive+0x38>
    }
    while (c->face[23] != c->face[22] || c->face[14] != c->face[13] || c->face[50] != c->face[49] || c->face[40] != c->face[39] ||
 800393a:	e006      	b.n	800394a <solve_Naive+0xc6>
           c->face[21] != c->face[22] || c->face[12] != c->face[13] || c->face[48] != c->face[49] || c->face[40] != c->face[41])
    {
        formular23(c);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f7ff fc0e 	bl	800315e <formular23>
        rotateCube(c, T);
 8003942:	2112      	movs	r1, #18
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f7ff f9b5 	bl	8002cb4 <rotateCube>
    while (c->face[23] != c->face[22] || c->face[14] != c->face[13] || c->face[50] != c->face[49] || c->face[40] != c->face[39] ||
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	7dda      	ldrb	r2, [r3, #23]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	7d9b      	ldrb	r3, [r3, #22]
 8003952:	429a      	cmp	r2, r3
 8003954:	d1f2      	bne.n	800393c <solve_Naive+0xb8>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	7b9a      	ldrb	r2, [r3, #14]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	7b5b      	ldrb	r3, [r3, #13]
 800395e:	429a      	cmp	r2, r3
 8003960:	d1ec      	bne.n	800393c <solve_Naive+0xb8>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800396e:	429a      	cmp	r2, r3
 8003970:	d1e4      	bne.n	800393c <solve_Naive+0xb8>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800397e:	429a      	cmp	r2, r3
 8003980:	d1dc      	bne.n	800393c <solve_Naive+0xb8>
           c->face[21] != c->face[22] || c->face[12] != c->face[13] || c->face[48] != c->face[49] || c->face[40] != c->face[41])
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	7d5a      	ldrb	r2, [r3, #21]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	7d9b      	ldrb	r3, [r3, #22]
    while (c->face[23] != c->face[22] || c->face[14] != c->face[13] || c->face[50] != c->face[49] || c->face[40] != c->face[39] ||
 800398a:	429a      	cmp	r2, r3
 800398c:	d1d6      	bne.n	800393c <solve_Naive+0xb8>
           c->face[21] != c->face[22] || c->face[12] != c->face[13] || c->face[48] != c->face[49] || c->face[40] != c->face[41])
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	7b1a      	ldrb	r2, [r3, #12]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	7b5b      	ldrb	r3, [r3, #13]
 8003996:	429a      	cmp	r2, r3
 8003998:	d1d0      	bne.n	800393c <solve_Naive+0xb8>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d1c8      	bne.n	800393c <solve_Naive+0xb8>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d1c0      	bne.n	800393c <solve_Naive+0xb8>
    }
    while (c->face[1] != c->face[4] || c->face[3] != c->face[4] || c->face[5] != c->face[4] || c->face[7] != c->face[4])
 80039ba:	e002      	b.n	80039c2 <solve_Naive+0x13e>
    {
        formular32(c);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f7ff fc3b 	bl	8003238 <formular32>
    while (c->face[1] != c->face[4] || c->face[3] != c->face[4] || c->face[5] != c->face[4] || c->face[7] != c->face[4])
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	785a      	ldrb	r2, [r3, #1]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	791b      	ldrb	r3, [r3, #4]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d1f6      	bne.n	80039bc <solve_Naive+0x138>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	78da      	ldrb	r2, [r3, #3]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	791b      	ldrb	r3, [r3, #4]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d1f0      	bne.n	80039bc <solve_Naive+0x138>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	795a      	ldrb	r2, [r3, #5]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	791b      	ldrb	r3, [r3, #4]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d1ea      	bne.n	80039bc <solve_Naive+0x138>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	79da      	ldrb	r2, [r3, #7]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	791b      	ldrb	r3, [r3, #4]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d1e4      	bne.n	80039bc <solve_Naive+0x138>
    }
    formular43(c);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f7ff fcbd 	bl	8003372 <formular43>
    formular52(c);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f7ff fe01 	bl	8003600 <formular52>
    formular62(c);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f7ff fea2 	bl	8003748 <formular62>
    while (c->face[9] != c->face[13])
 8003a04:	e003      	b.n	8003a0e <solve_Naive+0x18a>
    {
        rotateCube(c, U);
 8003a06:	2106      	movs	r1, #6
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f7ff f953 	bl	8002cb4 <rotateCube>
    while (c->face[9] != c->face[13])
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	7a5a      	ldrb	r2, [r3, #9]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	7b5b      	ldrb	r3, [r3, #13]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d1f5      	bne.n	8003a06 <solve_Naive+0x182>
    }
}
 8003a1a:	bf00      	nop
 8003a1c:	bf00      	nop
 8003a1e:	3708      	adds	r7, #8
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003a2a:	4b15      	ldr	r3, [pc, #84]	; (8003a80 <HAL_MspInit+0x5c>)
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	4a14      	ldr	r2, [pc, #80]	; (8003a80 <HAL_MspInit+0x5c>)
 8003a30:	f043 0301 	orr.w	r3, r3, #1
 8003a34:	6193      	str	r3, [r2, #24]
 8003a36:	4b12      	ldr	r3, [pc, #72]	; (8003a80 <HAL_MspInit+0x5c>)
 8003a38:	699b      	ldr	r3, [r3, #24]
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	60bb      	str	r3, [r7, #8]
 8003a40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a42:	4b0f      	ldr	r3, [pc, #60]	; (8003a80 <HAL_MspInit+0x5c>)
 8003a44:	69db      	ldr	r3, [r3, #28]
 8003a46:	4a0e      	ldr	r2, [pc, #56]	; (8003a80 <HAL_MspInit+0x5c>)
 8003a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a4c:	61d3      	str	r3, [r2, #28]
 8003a4e:	4b0c      	ldr	r3, [pc, #48]	; (8003a80 <HAL_MspInit+0x5c>)
 8003a50:	69db      	ldr	r3, [r3, #28]
 8003a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a56:	607b      	str	r3, [r7, #4]
 8003a58:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003a5a:	4b0a      	ldr	r3, [pc, #40]	; (8003a84 <HAL_MspInit+0x60>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	60fb      	str	r3, [r7, #12]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003a66:	60fb      	str	r3, [r7, #12]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a6e:	60fb      	str	r3, [r7, #12]
 8003a70:	4a04      	ldr	r2, [pc, #16]	; (8003a84 <HAL_MspInit+0x60>)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a76:	bf00      	nop
 8003a78:	3714      	adds	r7, #20
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bc80      	pop	{r7}
 8003a7e:	4770      	bx	lr
 8003a80:	40021000 	.word	0x40021000
 8003a84:	40010000 	.word	0x40010000

08003a88 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a8c:	e7fe      	b.n	8003a8c <NMI_Handler+0x4>

08003a8e <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8003a8e:	b480      	push	{r7}
 8003a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a92:	e7fe      	b.n	8003a92 <HardFault_Handler+0x4>

08003a94 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a98:	e7fe      	b.n	8003a98 <MemManage_Handler+0x4>

08003a9a <BusFault_Handler>:

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a9e:	e7fe      	b.n	8003a9e <BusFault_Handler+0x4>

08003aa0 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003aa4:	e7fe      	b.n	8003aa4 <UsageFault_Handler+0x4>

08003aa6 <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003aaa:	bf00      	nop
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bc80      	pop	{r7}
 8003ab0:	4770      	bx	lr

08003ab2 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 8003ab2:	b480      	push	{r7}
 8003ab4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ab6:	bf00      	nop
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bc80      	pop	{r7}
 8003abc:	4770      	bx	lr

08003abe <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ac2:	bf00      	nop
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bc80      	pop	{r7}
 8003ac8:	4770      	bx	lr

08003aca <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8003aca:	b580      	push	{r7, lr}
 8003acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ace:	f000 fb1f 	bl	8004110 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ad2:	bf00      	nop
 8003ad4:	bd80      	pop	{r7, pc}
	...

08003ad8 <EXTI0_IRQHandler>:

/**
 * @brief This function handles EXTI line0 interrupt.
 */
void EXTI0_IRQHandler(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_0) != RESET)
 8003adc:	4b0e      	ldr	r3, [pc, #56]	; (8003b18 <EXTI0_IRQHandler+0x40>)
 8003ade:	695b      	ldr	r3, [r3, #20]
 8003ae0:	f003 0301 	and.w	r3, r3, #1
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d011      	beq.n	8003b0c <EXTI0_IRQHandler+0x34>
  {
    if (bt_flags == 0)
 8003ae8:	4b0c      	ldr	r3, [pc, #48]	; (8003b1c <EXTI0_IRQHandler+0x44>)
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d103      	bne.n	8003afa <EXTI0_IRQHandler+0x22>
      bt_flags = 2;
 8003af2:	4b0a      	ldr	r3, [pc, #40]	; (8003b1c <EXTI0_IRQHandler+0x44>)
 8003af4:	2202      	movs	r2, #2
 8003af6:	701a      	strb	r2, [r3, #0]
 8003af8:	e002      	b.n	8003b00 <EXTI0_IRQHandler+0x28>
    else
      bt_flags = 1;
 8003afa:	4b08      	ldr	r3, [pc, #32]	; (8003b1c <EXTI0_IRQHandler+0x44>)
 8003afc:	2201      	movs	r2, #1
 8003afe:	701a      	strb	r2, [r3, #0]
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 8003b00:	4b05      	ldr	r3, [pc, #20]	; (8003b18 <EXTI0_IRQHandler+0x40>)
 8003b02:	2201      	movs	r2, #1
 8003b04:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_PIN_0);
 8003b06:	2001      	movs	r0, #1
 8003b08:	f000 ff34 	bl	8004974 <HAL_GPIO_EXTI_Callback>
  }
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003b0c:	2001      	movs	r0, #1
 8003b0e:	f000 ff19 	bl	8004944 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003b12:	bf00      	nop
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	40010400 	.word	0x40010400
 8003b1c:	2000209c 	.word	0x2000209c

08003b20 <EXTI3_IRQHandler>:

/**
 * @brief This function handles EXTI line3 interrupt.
 */
void EXTI3_IRQHandler(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_3) != RESET)
 8003b24:	4b17      	ldr	r3, [pc, #92]	; (8003b84 <EXTI3_IRQHandler+0x64>)
 8003b26:	695b      	ldr	r3, [r3, #20]
 8003b28:	f003 0308 	and.w	r3, r3, #8
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d023      	beq.n	8003b78 <EXTI3_IRQHandler+0x58>
  {
    if (Ov7725_vsync == 0)
 8003b30:	4b15      	ldr	r3, [pc, #84]	; (8003b88 <EXTI3_IRQHandler+0x68>)
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d10f      	bne.n	8003b58 <EXTI3_IRQHandler+0x38>
    {
      FIFO_WRST_L();
 8003b38:	4b14      	ldr	r3, [pc, #80]	; (8003b8c <EXTI3_IRQHandler+0x6c>)
 8003b3a:	2210      	movs	r2, #16
 8003b3c:	615a      	str	r2, [r3, #20]
      FIFO_WE_H();
 8003b3e:	4b14      	ldr	r3, [pc, #80]	; (8003b90 <EXTI3_IRQHandler+0x70>)
 8003b40:	2208      	movs	r2, #8
 8003b42:	611a      	str	r2, [r3, #16]

      Ov7725_vsync = 1;
 8003b44:	4b10      	ldr	r3, [pc, #64]	; (8003b88 <EXTI3_IRQHandler+0x68>)
 8003b46:	2201      	movs	r2, #1
 8003b48:	701a      	strb	r2, [r3, #0]
      FIFO_WE_H();
 8003b4a:	4b11      	ldr	r3, [pc, #68]	; (8003b90 <EXTI3_IRQHandler+0x70>)
 8003b4c:	2208      	movs	r2, #8
 8003b4e:	611a      	str	r2, [r3, #16]
      FIFO_WRST_H();
 8003b50:	4b0e      	ldr	r3, [pc, #56]	; (8003b8c <EXTI3_IRQHandler+0x6c>)
 8003b52:	2210      	movs	r2, #16
 8003b54:	611a      	str	r2, [r3, #16]
 8003b56:	e009      	b.n	8003b6c <EXTI3_IRQHandler+0x4c>
    }
    else if (Ov7725_vsync == 1)
 8003b58:	4b0b      	ldr	r3, [pc, #44]	; (8003b88 <EXTI3_IRQHandler+0x68>)
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d105      	bne.n	8003b6c <EXTI3_IRQHandler+0x4c>
    {
      FIFO_WE_L();
 8003b60:	4b0b      	ldr	r3, [pc, #44]	; (8003b90 <EXTI3_IRQHandler+0x70>)
 8003b62:	2208      	movs	r2, #8
 8003b64:	615a      	str	r2, [r3, #20]
      Ov7725_vsync = 2;
 8003b66:	4b08      	ldr	r3, [pc, #32]	; (8003b88 <EXTI3_IRQHandler+0x68>)
 8003b68:	2202      	movs	r2, #2
 8003b6a:	701a      	strb	r2, [r3, #0]
    }

    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_3);
 8003b6c:	4b05      	ldr	r3, [pc, #20]	; (8003b84 <EXTI3_IRQHandler+0x64>)
 8003b6e:	2208      	movs	r2, #8
 8003b70:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_PIN_3);
 8003b72:	2008      	movs	r0, #8
 8003b74:	f000 fefe 	bl	8004974 <HAL_GPIO_EXTI_Callback>
  }
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8003b78:	2008      	movs	r0, #8
 8003b7a:	f000 fee3 	bl	8004944 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003b7e:	bf00      	nop
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	40010400 	.word	0x40010400
 8003b88:	20002090 	.word	0x20002090
 8003b8c:	40011000 	.word	0x40011000
 8003b90:	40011400 	.word	0x40011400

08003b94 <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  if (RxBuffer[2] == 0x6b)
 8003b98:	4b1c      	ldr	r3, [pc, #112]	; (8003c0c <USART1_IRQHandler+0x78>)
 8003b9a:	789b      	ldrb	r3, [r3, #2]
 8003b9c:	2b6b      	cmp	r3, #107	; 0x6b
 8003b9e:	d12a      	bne.n	8003bf6 <USART1_IRQHandler+0x62>
  {
    if (RxBuffer[1] == 0x9f)
 8003ba0:	4b1a      	ldr	r3, [pc, #104]	; (8003c0c <USART1_IRQHandler+0x78>)
 8003ba2:	785b      	ldrb	r3, [r3, #1]
 8003ba4:	2b9f      	cmp	r3, #159	; 0x9f
 8003ba6:	d110      	bne.n	8003bca <USART1_IRQHandler+0x36>
    {
      motor_flag |= 0x01 << (RxBuffer[0] - 1);
 8003ba8:	4b18      	ldr	r3, [pc, #96]	; (8003c0c <USART1_IRQHandler+0x78>)
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	3b01      	subs	r3, #1
 8003bae:	2201      	movs	r2, #1
 8003bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb4:	b25a      	sxtb	r2, r3
 8003bb6:	4b16      	ldr	r3, [pc, #88]	; (8003c10 <USART1_IRQHandler+0x7c>)
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	b25b      	sxtb	r3, r3
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	b25b      	sxtb	r3, r3
 8003bc2:	b2da      	uxtb	r2, r3
 8003bc4:	4b12      	ldr	r3, [pc, #72]	; (8003c10 <USART1_IRQHandler+0x7c>)
 8003bc6:	701a      	strb	r2, [r3, #0]
 8003bc8:	e015      	b.n	8003bf6 <USART1_IRQHandler+0x62>
    }
    else if (RxBuffer[1] == 0x02)
 8003bca:	4b10      	ldr	r3, [pc, #64]	; (8003c0c <USART1_IRQHandler+0x78>)
 8003bcc:	785b      	ldrb	r3, [r3, #1]
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d111      	bne.n	8003bf6 <USART1_IRQHandler+0x62>
    {
      motor_flag &= ~(0x01 << (RxBuffer[0] - 1));
 8003bd2:	4b0e      	ldr	r3, [pc, #56]	; (8003c0c <USART1_IRQHandler+0x78>)
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	2201      	movs	r2, #1
 8003bda:	fa02 f303 	lsl.w	r3, r2, r3
 8003bde:	b25b      	sxtb	r3, r3
 8003be0:	43db      	mvns	r3, r3
 8003be2:	b25a      	sxtb	r2, r3
 8003be4:	4b0a      	ldr	r3, [pc, #40]	; (8003c10 <USART1_IRQHandler+0x7c>)
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	b25b      	sxtb	r3, r3
 8003bec:	4013      	ands	r3, r2
 8003bee:	b25b      	sxtb	r3, r3
 8003bf0:	b2da      	uxtb	r2, r3
 8003bf2:	4b07      	ldr	r3, [pc, #28]	; (8003c10 <USART1_IRQHandler+0x7c>)
 8003bf4:	701a      	strb	r2, [r3, #0]
    }
  }
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003bf6:	4807      	ldr	r0, [pc, #28]	; (8003c14 <USART1_IRQHandler+0x80>)
 8003bf8:	f001 fc64 	bl	80054c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  HAL_UART_Receive_IT(&huart1, (uint8_t *)&RxBuffer, RXBUFFERSIZE);
 8003bfc:	2203      	movs	r2, #3
 8003bfe:	4903      	ldr	r1, [pc, #12]	; (8003c0c <USART1_IRQHandler+0x78>)
 8003c00:	4804      	ldr	r0, [pc, #16]	; (8003c14 <USART1_IRQHandler+0x80>)
 8003c02:	f001 fc0b 	bl	800541c <HAL_UART_Receive_IT>

  /* USER CODE END USART1_IRQn 1 */
}
 8003c06:	bf00      	nop
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	20002094 	.word	0x20002094
 8003c10:	20002092 	.word	0x20002092
 8003c14:	200020a0 	.word	0x200020a0

08003c18 <USART3_IRQHandler>:

/**
 * @brief This function handles USART3 global interrupt.
 */
void USART3_IRQHandler(void)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003c1c:	4802      	ldr	r0, [pc, #8]	; (8003c28 <USART3_IRQHandler+0x10>)
 8003c1e:	f001 fc51 	bl	80054c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003c22:	bf00      	nop
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	200020e0 	.word	0x200020e0

08003c2c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c38:	2300      	movs	r3, #0
 8003c3a:	617b      	str	r3, [r7, #20]
 8003c3c:	e00a      	b.n	8003c54 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003c3e:	f3af 8000 	nop.w
 8003c42:	4601      	mov	r1, r0
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	1c5a      	adds	r2, r3, #1
 8003c48:	60ba      	str	r2, [r7, #8]
 8003c4a:	b2ca      	uxtb	r2, r1
 8003c4c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	3301      	adds	r3, #1
 8003c52:	617b      	str	r3, [r7, #20]
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	dbf0      	blt.n	8003c3e <_read+0x12>
	}

return len;
 8003c5c:	687b      	ldr	r3, [r7, #4]
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3718      	adds	r7, #24
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b086      	sub	sp, #24
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	60f8      	str	r0, [r7, #12]
 8003c6e:	60b9      	str	r1, [r7, #8]
 8003c70:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c72:	2300      	movs	r3, #0
 8003c74:	617b      	str	r3, [r7, #20]
 8003c76:	e009      	b.n	8003c8c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	1c5a      	adds	r2, r3, #1
 8003c7c:	60ba      	str	r2, [r7, #8]
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	4618      	mov	r0, r3
 8003c82:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	3301      	adds	r3, #1
 8003c8a:	617b      	str	r3, [r7, #20]
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	dbf1      	blt.n	8003c78 <_write+0x12>
	}
	return len;
 8003c94:	687b      	ldr	r3, [r7, #4]
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3718      	adds	r7, #24
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <_close>:

int _close(int file)
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b083      	sub	sp, #12
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
	return -1;
 8003ca6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	370c      	adds	r7, #12
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bc80      	pop	{r7}
 8003cb2:	4770      	bx	lr

08003cb4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003cc4:	605a      	str	r2, [r3, #4]
	return 0;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bc80      	pop	{r7}
 8003cd0:	4770      	bx	lr

08003cd2 <_isatty>:

int _isatty(int file)
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	b083      	sub	sp, #12
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
	return 1;
 8003cda:	2301      	movs	r3, #1
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bc80      	pop	{r7}
 8003ce4:	4770      	bx	lr

08003ce6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	b085      	sub	sp, #20
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	60f8      	str	r0, [r7, #12]
 8003cee:	60b9      	str	r1, [r7, #8]
 8003cf0:	607a      	str	r2, [r7, #4]
	return 0;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3714      	adds	r7, #20
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bc80      	pop	{r7}
 8003cfc:	4770      	bx	lr
	...

08003d00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b086      	sub	sp, #24
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d08:	4a14      	ldr	r2, [pc, #80]	; (8003d5c <_sbrk+0x5c>)
 8003d0a:	4b15      	ldr	r3, [pc, #84]	; (8003d60 <_sbrk+0x60>)
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d14:	4b13      	ldr	r3, [pc, #76]	; (8003d64 <_sbrk+0x64>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d102      	bne.n	8003d22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d1c:	4b11      	ldr	r3, [pc, #68]	; (8003d64 <_sbrk+0x64>)
 8003d1e:	4a12      	ldr	r2, [pc, #72]	; (8003d68 <_sbrk+0x68>)
 8003d20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d22:	4b10      	ldr	r3, [pc, #64]	; (8003d64 <_sbrk+0x64>)
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4413      	add	r3, r2
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d207      	bcs.n	8003d40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d30:	f002 f85e 	bl	8005df0 <__errno>
 8003d34:	4603      	mov	r3, r0
 8003d36:	220c      	movs	r2, #12
 8003d38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d3e:	e009      	b.n	8003d54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d40:	4b08      	ldr	r3, [pc, #32]	; (8003d64 <_sbrk+0x64>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d46:	4b07      	ldr	r3, [pc, #28]	; (8003d64 <_sbrk+0x64>)
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	4a05      	ldr	r2, [pc, #20]	; (8003d64 <_sbrk+0x64>)
 8003d50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d52:	68fb      	ldr	r3, [r7, #12]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3718      	adds	r7, #24
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	20010000 	.word	0x20010000
 8003d60:	00000400 	.word	0x00000400
 8003d64:	20002098 	.word	0x20002098
 8003d68:	20002138 	.word	0x20002138

08003d6c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d70:	bf00      	nop
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bc80      	pop	{r7}
 8003d76:	4770      	bx	lr

08003d78 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8003d7c:	4b11      	ldr	r3, [pc, #68]	; (8003dc4 <MX_USART1_UART_Init+0x4c>)
 8003d7e:	4a12      	ldr	r2, [pc, #72]	; (8003dc8 <MX_USART1_UART_Init+0x50>)
 8003d80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003d82:	4b10      	ldr	r3, [pc, #64]	; (8003dc4 <MX_USART1_UART_Init+0x4c>)
 8003d84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003d88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003d8a:	4b0e      	ldr	r3, [pc, #56]	; (8003dc4 <MX_USART1_UART_Init+0x4c>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003d90:	4b0c      	ldr	r3, [pc, #48]	; (8003dc4 <MX_USART1_UART_Init+0x4c>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003d96:	4b0b      	ldr	r3, [pc, #44]	; (8003dc4 <MX_USART1_UART_Init+0x4c>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003d9c:	4b09      	ldr	r3, [pc, #36]	; (8003dc4 <MX_USART1_UART_Init+0x4c>)
 8003d9e:	220c      	movs	r2, #12
 8003da0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003da2:	4b08      	ldr	r3, [pc, #32]	; (8003dc4 <MX_USART1_UART_Init+0x4c>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003da8:	4b06      	ldr	r3, [pc, #24]	; (8003dc4 <MX_USART1_UART_Init+0x4c>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003dae:	4805      	ldr	r0, [pc, #20]	; (8003dc4 <MX_USART1_UART_Init+0x4c>)
 8003db0:	f001 fa4e 	bl	8005250 <HAL_UART_Init>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d001      	beq.n	8003dbe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003dba:	f7fe feec 	bl	8002b96 <Error_Handler>
  }

}
 8003dbe:	bf00      	nop
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	200020a0 	.word	0x200020a0
 8003dc8:	40013800 	.word	0x40013800

08003dcc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8003dd0:	4b11      	ldr	r3, [pc, #68]	; (8003e18 <MX_USART3_UART_Init+0x4c>)
 8003dd2:	4a12      	ldr	r2, [pc, #72]	; (8003e1c <MX_USART3_UART_Init+0x50>)
 8003dd4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8003dd6:	4b10      	ldr	r3, [pc, #64]	; (8003e18 <MX_USART3_UART_Init+0x4c>)
 8003dd8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003ddc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003dde:	4b0e      	ldr	r3, [pc, #56]	; (8003e18 <MX_USART3_UART_Init+0x4c>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003de4:	4b0c      	ldr	r3, [pc, #48]	; (8003e18 <MX_USART3_UART_Init+0x4c>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003dea:	4b0b      	ldr	r3, [pc, #44]	; (8003e18 <MX_USART3_UART_Init+0x4c>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003df0:	4b09      	ldr	r3, [pc, #36]	; (8003e18 <MX_USART3_UART_Init+0x4c>)
 8003df2:	220c      	movs	r2, #12
 8003df4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003df6:	4b08      	ldr	r3, [pc, #32]	; (8003e18 <MX_USART3_UART_Init+0x4c>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003dfc:	4b06      	ldr	r3, [pc, #24]	; (8003e18 <MX_USART3_UART_Init+0x4c>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003e02:	4805      	ldr	r0, [pc, #20]	; (8003e18 <MX_USART3_UART_Init+0x4c>)
 8003e04:	f001 fa24 	bl	8005250 <HAL_UART_Init>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d001      	beq.n	8003e12 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003e0e:	f7fe fec2 	bl	8002b96 <Error_Handler>
  }

}
 8003e12:	bf00      	nop
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	200020e0 	.word	0x200020e0
 8003e1c:	40004800 	.word	0x40004800

08003e20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b08c      	sub	sp, #48	; 0x30
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e28:	f107 031c 	add.w	r3, r7, #28
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	601a      	str	r2, [r3, #0]
 8003e30:	605a      	str	r2, [r3, #4]
 8003e32:	609a      	str	r2, [r3, #8]
 8003e34:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a49      	ldr	r2, [pc, #292]	; (8003f60 <HAL_UART_MspInit+0x140>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d13a      	bne.n	8003eb6 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003e40:	4b48      	ldr	r3, [pc, #288]	; (8003f64 <HAL_UART_MspInit+0x144>)
 8003e42:	699b      	ldr	r3, [r3, #24]
 8003e44:	4a47      	ldr	r2, [pc, #284]	; (8003f64 <HAL_UART_MspInit+0x144>)
 8003e46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e4a:	6193      	str	r3, [r2, #24]
 8003e4c:	4b45      	ldr	r3, [pc, #276]	; (8003f64 <HAL_UART_MspInit+0x144>)
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e54:	61bb      	str	r3, [r7, #24]
 8003e56:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e58:	4b42      	ldr	r3, [pc, #264]	; (8003f64 <HAL_UART_MspInit+0x144>)
 8003e5a:	699b      	ldr	r3, [r3, #24]
 8003e5c:	4a41      	ldr	r2, [pc, #260]	; (8003f64 <HAL_UART_MspInit+0x144>)
 8003e5e:	f043 0304 	orr.w	r3, r3, #4
 8003e62:	6193      	str	r3, [r2, #24]
 8003e64:	4b3f      	ldr	r3, [pc, #252]	; (8003f64 <HAL_UART_MspInit+0x144>)
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	f003 0304 	and.w	r3, r3, #4
 8003e6c:	617b      	str	r3, [r7, #20]
 8003e6e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003e70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e76:	2302      	movs	r3, #2
 8003e78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e7e:	f107 031c 	add.w	r3, r7, #28
 8003e82:	4619      	mov	r1, r3
 8003e84:	4838      	ldr	r0, [pc, #224]	; (8003f68 <HAL_UART_MspInit+0x148>)
 8003e86:	f000 fb95 	bl	80045b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003e8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e90:	2300      	movs	r3, #0
 8003e92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e94:	2300      	movs	r3, #0
 8003e96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e98:	f107 031c 	add.w	r3, r7, #28
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	4832      	ldr	r0, [pc, #200]	; (8003f68 <HAL_UART_MspInit+0x148>)
 8003ea0:	f000 fb88 	bl	80045b4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	2100      	movs	r1, #0
 8003ea8:	2025      	movs	r0, #37	; 0x25
 8003eaa:	f000 fa44 	bl	8004336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003eae:	2025      	movs	r0, #37	; 0x25
 8003eb0:	f000 fa5d 	bl	800436e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003eb4:	e050      	b.n	8003f58 <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART3)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a2c      	ldr	r2, [pc, #176]	; (8003f6c <HAL_UART_MspInit+0x14c>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d14b      	bne.n	8003f58 <HAL_UART_MspInit+0x138>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003ec0:	4b28      	ldr	r3, [pc, #160]	; (8003f64 <HAL_UART_MspInit+0x144>)
 8003ec2:	69db      	ldr	r3, [r3, #28]
 8003ec4:	4a27      	ldr	r2, [pc, #156]	; (8003f64 <HAL_UART_MspInit+0x144>)
 8003ec6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003eca:	61d3      	str	r3, [r2, #28]
 8003ecc:	4b25      	ldr	r3, [pc, #148]	; (8003f64 <HAL_UART_MspInit+0x144>)
 8003ece:	69db      	ldr	r3, [r3, #28]
 8003ed0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ed4:	613b      	str	r3, [r7, #16]
 8003ed6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ed8:	4b22      	ldr	r3, [pc, #136]	; (8003f64 <HAL_UART_MspInit+0x144>)
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	4a21      	ldr	r2, [pc, #132]	; (8003f64 <HAL_UART_MspInit+0x144>)
 8003ede:	f043 0310 	orr.w	r3, r3, #16
 8003ee2:	6193      	str	r3, [r2, #24]
 8003ee4:	4b1f      	ldr	r3, [pc, #124]	; (8003f64 <HAL_UART_MspInit+0x144>)
 8003ee6:	699b      	ldr	r3, [r3, #24]
 8003ee8:	f003 0310 	and.w	r3, r3, #16
 8003eec:	60fb      	str	r3, [r7, #12]
 8003eee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003ef0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ef4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003efa:	2303      	movs	r3, #3
 8003efc:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003efe:	f107 031c 	add.w	r3, r7, #28
 8003f02:	4619      	mov	r1, r3
 8003f04:	481a      	ldr	r0, [pc, #104]	; (8003f70 <HAL_UART_MspInit+0x150>)
 8003f06:	f000 fb55 	bl	80045b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003f0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f10:	2300      	movs	r3, #0
 8003f12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f14:	2300      	movs	r3, #0
 8003f16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f18:	f107 031c 	add.w	r3, r7, #28
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	4814      	ldr	r0, [pc, #80]	; (8003f70 <HAL_UART_MspInit+0x150>)
 8003f20:	f000 fb48 	bl	80045b4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8003f24:	4b13      	ldr	r3, [pc, #76]	; (8003f74 <HAL_UART_MspInit+0x154>)
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f2c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003f30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f34:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003f38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f3c:	f043 0310 	orr.w	r3, r3, #16
 8003f40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f42:	4a0c      	ldr	r2, [pc, #48]	; (8003f74 <HAL_UART_MspInit+0x154>)
 8003f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f46:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003f48:	2200      	movs	r2, #0
 8003f4a:	2100      	movs	r1, #0
 8003f4c:	2027      	movs	r0, #39	; 0x27
 8003f4e:	f000 f9f2 	bl	8004336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003f52:	2027      	movs	r0, #39	; 0x27
 8003f54:	f000 fa0b 	bl	800436e <HAL_NVIC_EnableIRQ>
}
 8003f58:	bf00      	nop
 8003f5a:	3730      	adds	r7, #48	; 0x30
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	40013800 	.word	0x40013800
 8003f64:	40021000 	.word	0x40021000
 8003f68:	40010800 	.word	0x40010800
 8003f6c:	40004800 	.word	0x40004800
 8003f70:	40011000 	.word	0x40011000
 8003f74:	40010000 	.word	0x40010000

08003f78 <HAL_UART_RxCpltCallback>:
}

/* USER CODE BEGIN 1 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);
  HAL_UART_Transmit(&huart3, (uint8_t *)&rx_buffer, 1,0xFFFF);
 8003f80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f84:	2201      	movs	r2, #1
 8003f86:	4929      	ldr	r1, [pc, #164]	; (800402c <HAL_UART_RxCpltCallback+0xb4>)
 8003f88:	4829      	ldr	r0, [pc, #164]	; (8004030 <HAL_UART_RxCpltCallback+0xb8>)
 8003f8a:	f001 f9ae 	bl	80052ea <HAL_UART_Transmit>
  while(HAL_UART_GetState(&huart3) == HAL_UART_STATE_BUSY_TX);
 8003f8e:	bf00      	nop
 8003f90:	4827      	ldr	r0, [pc, #156]	; (8004030 <HAL_UART_RxCpltCallback+0xb8>)
 8003f92:	f001 fba3 	bl	80056dc <HAL_UART_GetState>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b21      	cmp	r3, #33	; 0x21
 8003f9a:	d0f9      	beq.n	8003f90 <HAL_UART_RxCpltCallback+0x18>
  HAL_UART_Receive_IT(&huart3, (uint8_t *)&rx_buffer, 1);
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	4923      	ldr	r1, [pc, #140]	; (800402c <HAL_UART_RxCpltCallback+0xb4>)
 8003fa0:	4823      	ldr	r0, [pc, #140]	; (8004030 <HAL_UART_RxCpltCallback+0xb8>)
 8003fa2:	f001 fa3b 	bl	800541c <HAL_UART_Receive_IT>
  //c means confrim face, s means start robot,b means begin solve ,e means end solve
  switch(rx_buffer)
 8003fa6:	4b21      	ldr	r3, [pc, #132]	; (800402c <HAL_UART_RxCpltCallback+0xb4>)
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	3b62      	subs	r3, #98	; 0x62
 8003fae:	2b11      	cmp	r3, #17
 8003fb0:	d836      	bhi.n	8004020 <HAL_UART_RxCpltCallback+0xa8>
 8003fb2:	a201      	add	r2, pc, #4	; (adr r2, 8003fb8 <HAL_UART_RxCpltCallback+0x40>)
 8003fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb8:	08004011 	.word	0x08004011
 8003fbc:	08004001 	.word	0x08004001
 8003fc0:	08004021 	.word	0x08004021
 8003fc4:	08004019 	.word	0x08004019
 8003fc8:	08004021 	.word	0x08004021
 8003fcc:	08004021 	.word	0x08004021
 8003fd0:	08004021 	.word	0x08004021
 8003fd4:	08004021 	.word	0x08004021
 8003fd8:	08004021 	.word	0x08004021
 8003fdc:	08004021 	.word	0x08004021
 8003fe0:	08004021 	.word	0x08004021
 8003fe4:	08004021 	.word	0x08004021
 8003fe8:	08004021 	.word	0x08004021
 8003fec:	08004021 	.word	0x08004021
 8003ff0:	08004021 	.word	0x08004021
 8003ff4:	08004021 	.word	0x08004021
 8003ff8:	08004021 	.word	0x08004021
 8003ffc:	08004009 	.word	0x08004009
  {
    case 'c':
      bt_flags = 1;
 8004000:	4b0c      	ldr	r3, [pc, #48]	; (8004034 <HAL_UART_RxCpltCallback+0xbc>)
 8004002:	2201      	movs	r2, #1
 8004004:	701a      	strb	r2, [r3, #0]
      break;
 8004006:	e00c      	b.n	8004022 <HAL_UART_RxCpltCallback+0xaa>
    case 's':
      bt_flags = 2;
 8004008:	4b0a      	ldr	r3, [pc, #40]	; (8004034 <HAL_UART_RxCpltCallback+0xbc>)
 800400a:	2202      	movs	r2, #2
 800400c:	701a      	strb	r2, [r3, #0]
      break;
 800400e:	e008      	b.n	8004022 <HAL_UART_RxCpltCallback+0xaa>
    case 'b':
      bt_flags = 3;
 8004010:	4b08      	ldr	r3, [pc, #32]	; (8004034 <HAL_UART_RxCpltCallback+0xbc>)
 8004012:	2203      	movs	r2, #3
 8004014:	701a      	strb	r2, [r3, #0]
      break;
 8004016:	e004      	b.n	8004022 <HAL_UART_RxCpltCallback+0xaa>
    case 'e':
      bt_flags = 4;
 8004018:	4b06      	ldr	r3, [pc, #24]	; (8004034 <HAL_UART_RxCpltCallback+0xbc>)
 800401a:	2204      	movs	r2, #4
 800401c:	701a      	strb	r2, [r3, #0]
      break;
 800401e:	e000      	b.n	8004022 <HAL_UART_RxCpltCallback+0xaa>
    default:
      break;
 8004020:	bf00      	nop
  }
}
 8004022:	bf00      	nop
 8004024:	3708      	adds	r7, #8
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	20002091 	.word	0x20002091
 8004030:	200020e0 	.word	0x200020e0
 8004034:	2000209c 	.word	0x2000209c

08004038 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004038:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800403a:	e003      	b.n	8004044 <LoopCopyDataInit>

0800403c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800403c:	4b0b      	ldr	r3, [pc, #44]	; (800406c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800403e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004040:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004042:	3104      	adds	r1, #4

08004044 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004044:	480a      	ldr	r0, [pc, #40]	; (8004070 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8004046:	4b0b      	ldr	r3, [pc, #44]	; (8004074 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004048:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800404a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800404c:	d3f6      	bcc.n	800403c <CopyDataInit>
  ldr r2, =_sbss
 800404e:	4a0a      	ldr	r2, [pc, #40]	; (8004078 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004050:	e002      	b.n	8004058 <LoopFillZerobss>

08004052 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004052:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004054:	f842 3b04 	str.w	r3, [r2], #4

08004058 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004058:	4b08      	ldr	r3, [pc, #32]	; (800407c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800405a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800405c:	d3f9      	bcc.n	8004052 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800405e:	f7ff fe85 	bl	8003d6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004062:	f001 fecb 	bl	8005dfc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004066:	f7fe fa53 	bl	8002510 <main>
  bx lr
 800406a:	4770      	bx	lr
  ldr r3, =_sidata
 800406c:	0800730c 	.word	0x0800730c
  ldr r0, =_sdata
 8004070:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004074:	20000210 	.word	0x20000210
  ldr r2, =_sbss
 8004078:	20000210 	.word	0x20000210
  ldr r3, = _ebss
 800407c:	20002134 	.word	0x20002134

08004080 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004080:	e7fe      	b.n	8004080 <ADC1_2_IRQHandler>
	...

08004084 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004088:	4b08      	ldr	r3, [pc, #32]	; (80040ac <HAL_Init+0x28>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a07      	ldr	r2, [pc, #28]	; (80040ac <HAL_Init+0x28>)
 800408e:	f043 0310 	orr.w	r3, r3, #16
 8004092:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004094:	2003      	movs	r0, #3
 8004096:	f000 f943 	bl	8004320 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800409a:	2000      	movs	r0, #0
 800409c:	f000 f808 	bl	80040b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80040a0:	f7ff fcc0 	bl	8003a24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	40022000 	.word	0x40022000

080040b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80040b8:	4b12      	ldr	r3, [pc, #72]	; (8004104 <HAL_InitTick+0x54>)
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	4b12      	ldr	r3, [pc, #72]	; (8004108 <HAL_InitTick+0x58>)
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	4619      	mov	r1, r3
 80040c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80040ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ce:	4618      	mov	r0, r3
 80040d0:	f000 f95b 	bl	800438a <HAL_SYSTICK_Config>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e00e      	b.n	80040fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2b0f      	cmp	r3, #15
 80040e2:	d80a      	bhi.n	80040fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040e4:	2200      	movs	r2, #0
 80040e6:	6879      	ldr	r1, [r7, #4]
 80040e8:	f04f 30ff 	mov.w	r0, #4294967295
 80040ec:	f000 f923 	bl	8004336 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80040f0:	4a06      	ldr	r2, [pc, #24]	; (800410c <HAL_InitTick+0x5c>)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
 80040f8:	e000      	b.n	80040fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3708      	adds	r7, #8
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	200001a0 	.word	0x200001a0
 8004108:	200001a8 	.word	0x200001a8
 800410c:	200001a4 	.word	0x200001a4

08004110 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004110:	b480      	push	{r7}
 8004112:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004114:	4b05      	ldr	r3, [pc, #20]	; (800412c <HAL_IncTick+0x1c>)
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	461a      	mov	r2, r3
 800411a:	4b05      	ldr	r3, [pc, #20]	; (8004130 <HAL_IncTick+0x20>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4413      	add	r3, r2
 8004120:	4a03      	ldr	r2, [pc, #12]	; (8004130 <HAL_IncTick+0x20>)
 8004122:	6013      	str	r3, [r2, #0]
}
 8004124:	bf00      	nop
 8004126:	46bd      	mov	sp, r7
 8004128:	bc80      	pop	{r7}
 800412a:	4770      	bx	lr
 800412c:	200001a8 	.word	0x200001a8
 8004130:	20002120 	.word	0x20002120

08004134 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004134:	b480      	push	{r7}
 8004136:	af00      	add	r7, sp, #0
  return uwTick;
 8004138:	4b02      	ldr	r3, [pc, #8]	; (8004144 <HAL_GetTick+0x10>)
 800413a:	681b      	ldr	r3, [r3, #0]
}
 800413c:	4618      	mov	r0, r3
 800413e:	46bd      	mov	sp, r7
 8004140:	bc80      	pop	{r7}
 8004142:	4770      	bx	lr
 8004144:	20002120 	.word	0x20002120

08004148 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004150:	f7ff fff0 	bl	8004134 <HAL_GetTick>
 8004154:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004160:	d005      	beq.n	800416e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004162:	4b0a      	ldr	r3, [pc, #40]	; (800418c <HAL_Delay+0x44>)
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	461a      	mov	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	4413      	add	r3, r2
 800416c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800416e:	bf00      	nop
 8004170:	f7ff ffe0 	bl	8004134 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	429a      	cmp	r2, r3
 800417e:	d8f7      	bhi.n	8004170 <HAL_Delay+0x28>
  {
  }
}
 8004180:	bf00      	nop
 8004182:	bf00      	nop
 8004184:	3710      	adds	r7, #16
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	200001a8 	.word	0x200001a8

08004190 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004190:	b480      	push	{r7}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f003 0307 	and.w	r3, r3, #7
 800419e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041a0:	4b0c      	ldr	r3, [pc, #48]	; (80041d4 <NVIC_SetPriorityGrouping+0x44>)
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041a6:	68ba      	ldr	r2, [r7, #8]
 80041a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80041ac:	4013      	ands	r3, r2
 80041ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80041bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041c2:	4a04      	ldr	r2, [pc, #16]	; (80041d4 <NVIC_SetPriorityGrouping+0x44>)
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	60d3      	str	r3, [r2, #12]
}
 80041c8:	bf00      	nop
 80041ca:	3714      	adds	r7, #20
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bc80      	pop	{r7}
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	e000ed00 	.word	0xe000ed00

080041d8 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80041d8:	b480      	push	{r7}
 80041da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041dc:	4b04      	ldr	r3, [pc, #16]	; (80041f0 <NVIC_GetPriorityGrouping+0x18>)
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	0a1b      	lsrs	r3, r3, #8
 80041e2:	f003 0307 	and.w	r3, r3, #7
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bc80      	pop	{r7}
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	e000ed00 	.word	0xe000ed00

080041f4 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	4603      	mov	r3, r0
 80041fc:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80041fe:	79fb      	ldrb	r3, [r7, #7]
 8004200:	f003 021f 	and.w	r2, r3, #31
 8004204:	4906      	ldr	r1, [pc, #24]	; (8004220 <NVIC_EnableIRQ+0x2c>)
 8004206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800420a:	095b      	lsrs	r3, r3, #5
 800420c:	2001      	movs	r0, #1
 800420e:	fa00 f202 	lsl.w	r2, r0, r2
 8004212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004216:	bf00      	nop
 8004218:	370c      	adds	r7, #12
 800421a:	46bd      	mov	sp, r7
 800421c:	bc80      	pop	{r7}
 800421e:	4770      	bx	lr
 8004220:	e000e100 	.word	0xe000e100

08004224 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	4603      	mov	r3, r0
 800422c:	6039      	str	r1, [r7, #0]
 800422e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8004230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004234:	2b00      	cmp	r3, #0
 8004236:	da0b      	bge.n	8004250 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	b2da      	uxtb	r2, r3
 800423c:	490c      	ldr	r1, [pc, #48]	; (8004270 <NVIC_SetPriority+0x4c>)
 800423e:	79fb      	ldrb	r3, [r7, #7]
 8004240:	f003 030f 	and.w	r3, r3, #15
 8004244:	3b04      	subs	r3, #4
 8004246:	0112      	lsls	r2, r2, #4
 8004248:	b2d2      	uxtb	r2, r2
 800424a:	440b      	add	r3, r1
 800424c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800424e:	e009      	b.n	8004264 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	b2da      	uxtb	r2, r3
 8004254:	4907      	ldr	r1, [pc, #28]	; (8004274 <NVIC_SetPriority+0x50>)
 8004256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800425a:	0112      	lsls	r2, r2, #4
 800425c:	b2d2      	uxtb	r2, r2
 800425e:	440b      	add	r3, r1
 8004260:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004264:	bf00      	nop
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	bc80      	pop	{r7}
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	e000ed00 	.word	0xe000ed00
 8004274:	e000e100 	.word	0xe000e100

08004278 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004278:	b480      	push	{r7}
 800427a:	b089      	sub	sp, #36	; 0x24
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f003 0307 	and.w	r3, r3, #7
 800428a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	f1c3 0307 	rsb	r3, r3, #7
 8004292:	2b04      	cmp	r3, #4
 8004294:	bf28      	it	cs
 8004296:	2304      	movcs	r3, #4
 8004298:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	3304      	adds	r3, #4
 800429e:	2b06      	cmp	r3, #6
 80042a0:	d902      	bls.n	80042a8 <NVIC_EncodePriority+0x30>
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	3b03      	subs	r3, #3
 80042a6:	e000      	b.n	80042aa <NVIC_EncodePriority+0x32>
 80042a8:	2300      	movs	r3, #0
 80042aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042ac:	f04f 32ff 	mov.w	r2, #4294967295
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	fa02 f303 	lsl.w	r3, r2, r3
 80042b6:	43da      	mvns	r2, r3
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	401a      	ands	r2, r3
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042c0:	f04f 31ff 	mov.w	r1, #4294967295
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	fa01 f303 	lsl.w	r3, r1, r3
 80042ca:	43d9      	mvns	r1, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042d0:	4313      	orrs	r3, r2
         );
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3724      	adds	r7, #36	; 0x24
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bc80      	pop	{r7}
 80042da:	4770      	bx	lr

080042dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	3b01      	subs	r3, #1
 80042e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042ec:	d301      	bcc.n	80042f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042ee:	2301      	movs	r3, #1
 80042f0:	e00f      	b.n	8004312 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042f2:	4a0a      	ldr	r2, [pc, #40]	; (800431c <SysTick_Config+0x40>)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	3b01      	subs	r3, #1
 80042f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042fa:	210f      	movs	r1, #15
 80042fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004300:	f7ff ff90 	bl	8004224 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004304:	4b05      	ldr	r3, [pc, #20]	; (800431c <SysTick_Config+0x40>)
 8004306:	2200      	movs	r2, #0
 8004308:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800430a:	4b04      	ldr	r3, [pc, #16]	; (800431c <SysTick_Config+0x40>)
 800430c:	2207      	movs	r2, #7
 800430e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3708      	adds	r7, #8
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	e000e010 	.word	0xe000e010

08004320 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f7ff ff31 	bl	8004190 <NVIC_SetPriorityGrouping>
}
 800432e:	bf00      	nop
 8004330:	3708      	adds	r7, #8
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004336:	b580      	push	{r7, lr}
 8004338:	b086      	sub	sp, #24
 800433a:	af00      	add	r7, sp, #0
 800433c:	4603      	mov	r3, r0
 800433e:	60b9      	str	r1, [r7, #8]
 8004340:	607a      	str	r2, [r7, #4]
 8004342:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004344:	2300      	movs	r3, #0
 8004346:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004348:	f7ff ff46 	bl	80041d8 <NVIC_GetPriorityGrouping>
 800434c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	68b9      	ldr	r1, [r7, #8]
 8004352:	6978      	ldr	r0, [r7, #20]
 8004354:	f7ff ff90 	bl	8004278 <NVIC_EncodePriority>
 8004358:	4602      	mov	r2, r0
 800435a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800435e:	4611      	mov	r1, r2
 8004360:	4618      	mov	r0, r3
 8004362:	f7ff ff5f 	bl	8004224 <NVIC_SetPriority>
}
 8004366:	bf00      	nop
 8004368:	3718      	adds	r7, #24
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800436e:	b580      	push	{r7, lr}
 8004370:	b082      	sub	sp, #8
 8004372:	af00      	add	r7, sp, #0
 8004374:	4603      	mov	r3, r0
 8004376:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800437c:	4618      	mov	r0, r3
 800437e:	f7ff ff39 	bl	80041f4 <NVIC_EnableIRQ>
}
 8004382:	bf00      	nop
 8004384:	3708      	adds	r7, #8
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}

0800438a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800438a:	b580      	push	{r7, lr}
 800438c:	b082      	sub	sp, #8
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f7ff ffa2 	bl	80042dc <SysTick_Config>
 8004398:	4603      	mov	r3, r0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3708      	adds	r7, #8
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
	...

080043a4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043ac:	2300      	movs	r3, #0
 80043ae:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d005      	beq.n	80043c6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2204      	movs	r2, #4
 80043be:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	73fb      	strb	r3, [r7, #15]
 80043c4:	e0d6      	b.n	8004574 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f022 020e 	bic.w	r2, r2, #14
 80043d4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f022 0201 	bic.w	r2, r2, #1
 80043e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	461a      	mov	r2, r3
 80043ec:	4b64      	ldr	r3, [pc, #400]	; (8004580 <HAL_DMA_Abort_IT+0x1dc>)
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d958      	bls.n	80044a4 <HAL_DMA_Abort_IT+0x100>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a63      	ldr	r2, [pc, #396]	; (8004584 <HAL_DMA_Abort_IT+0x1e0>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d04f      	beq.n	800449c <HAL_DMA_Abort_IT+0xf8>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a61      	ldr	r2, [pc, #388]	; (8004588 <HAL_DMA_Abort_IT+0x1e4>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d048      	beq.n	8004498 <HAL_DMA_Abort_IT+0xf4>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a60      	ldr	r2, [pc, #384]	; (800458c <HAL_DMA_Abort_IT+0x1e8>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d040      	beq.n	8004492 <HAL_DMA_Abort_IT+0xee>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a5e      	ldr	r2, [pc, #376]	; (8004590 <HAL_DMA_Abort_IT+0x1ec>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d038      	beq.n	800448c <HAL_DMA_Abort_IT+0xe8>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a5d      	ldr	r2, [pc, #372]	; (8004594 <HAL_DMA_Abort_IT+0x1f0>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d030      	beq.n	8004486 <HAL_DMA_Abort_IT+0xe2>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a5b      	ldr	r2, [pc, #364]	; (8004598 <HAL_DMA_Abort_IT+0x1f4>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d028      	beq.n	8004480 <HAL_DMA_Abort_IT+0xdc>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a53      	ldr	r2, [pc, #332]	; (8004580 <HAL_DMA_Abort_IT+0x1dc>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d020      	beq.n	800447a <HAL_DMA_Abort_IT+0xd6>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a57      	ldr	r2, [pc, #348]	; (800459c <HAL_DMA_Abort_IT+0x1f8>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d019      	beq.n	8004476 <HAL_DMA_Abort_IT+0xd2>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a56      	ldr	r2, [pc, #344]	; (80045a0 <HAL_DMA_Abort_IT+0x1fc>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d012      	beq.n	8004472 <HAL_DMA_Abort_IT+0xce>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a54      	ldr	r2, [pc, #336]	; (80045a4 <HAL_DMA_Abort_IT+0x200>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d00a      	beq.n	800446c <HAL_DMA_Abort_IT+0xc8>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a53      	ldr	r2, [pc, #332]	; (80045a8 <HAL_DMA_Abort_IT+0x204>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d102      	bne.n	8004466 <HAL_DMA_Abort_IT+0xc2>
 8004460:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004464:	e01b      	b.n	800449e <HAL_DMA_Abort_IT+0xfa>
 8004466:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800446a:	e018      	b.n	800449e <HAL_DMA_Abort_IT+0xfa>
 800446c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004470:	e015      	b.n	800449e <HAL_DMA_Abort_IT+0xfa>
 8004472:	2310      	movs	r3, #16
 8004474:	e013      	b.n	800449e <HAL_DMA_Abort_IT+0xfa>
 8004476:	2301      	movs	r3, #1
 8004478:	e011      	b.n	800449e <HAL_DMA_Abort_IT+0xfa>
 800447a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800447e:	e00e      	b.n	800449e <HAL_DMA_Abort_IT+0xfa>
 8004480:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004484:	e00b      	b.n	800449e <HAL_DMA_Abort_IT+0xfa>
 8004486:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800448a:	e008      	b.n	800449e <HAL_DMA_Abort_IT+0xfa>
 800448c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004490:	e005      	b.n	800449e <HAL_DMA_Abort_IT+0xfa>
 8004492:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004496:	e002      	b.n	800449e <HAL_DMA_Abort_IT+0xfa>
 8004498:	2310      	movs	r3, #16
 800449a:	e000      	b.n	800449e <HAL_DMA_Abort_IT+0xfa>
 800449c:	2301      	movs	r3, #1
 800449e:	4a43      	ldr	r2, [pc, #268]	; (80045ac <HAL_DMA_Abort_IT+0x208>)
 80044a0:	6053      	str	r3, [r2, #4]
 80044a2:	e057      	b.n	8004554 <HAL_DMA_Abort_IT+0x1b0>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a36      	ldr	r2, [pc, #216]	; (8004584 <HAL_DMA_Abort_IT+0x1e0>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d04f      	beq.n	800454e <HAL_DMA_Abort_IT+0x1aa>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a35      	ldr	r2, [pc, #212]	; (8004588 <HAL_DMA_Abort_IT+0x1e4>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d048      	beq.n	800454a <HAL_DMA_Abort_IT+0x1a6>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a33      	ldr	r2, [pc, #204]	; (800458c <HAL_DMA_Abort_IT+0x1e8>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d040      	beq.n	8004544 <HAL_DMA_Abort_IT+0x1a0>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a32      	ldr	r2, [pc, #200]	; (8004590 <HAL_DMA_Abort_IT+0x1ec>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d038      	beq.n	800453e <HAL_DMA_Abort_IT+0x19a>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a30      	ldr	r2, [pc, #192]	; (8004594 <HAL_DMA_Abort_IT+0x1f0>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d030      	beq.n	8004538 <HAL_DMA_Abort_IT+0x194>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a2f      	ldr	r2, [pc, #188]	; (8004598 <HAL_DMA_Abort_IT+0x1f4>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d028      	beq.n	8004532 <HAL_DMA_Abort_IT+0x18e>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a26      	ldr	r2, [pc, #152]	; (8004580 <HAL_DMA_Abort_IT+0x1dc>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d020      	beq.n	800452c <HAL_DMA_Abort_IT+0x188>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a2b      	ldr	r2, [pc, #172]	; (800459c <HAL_DMA_Abort_IT+0x1f8>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d019      	beq.n	8004528 <HAL_DMA_Abort_IT+0x184>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a29      	ldr	r2, [pc, #164]	; (80045a0 <HAL_DMA_Abort_IT+0x1fc>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d012      	beq.n	8004524 <HAL_DMA_Abort_IT+0x180>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a28      	ldr	r2, [pc, #160]	; (80045a4 <HAL_DMA_Abort_IT+0x200>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d00a      	beq.n	800451e <HAL_DMA_Abort_IT+0x17a>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a26      	ldr	r2, [pc, #152]	; (80045a8 <HAL_DMA_Abort_IT+0x204>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d102      	bne.n	8004518 <HAL_DMA_Abort_IT+0x174>
 8004512:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004516:	e01b      	b.n	8004550 <HAL_DMA_Abort_IT+0x1ac>
 8004518:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800451c:	e018      	b.n	8004550 <HAL_DMA_Abort_IT+0x1ac>
 800451e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004522:	e015      	b.n	8004550 <HAL_DMA_Abort_IT+0x1ac>
 8004524:	2310      	movs	r3, #16
 8004526:	e013      	b.n	8004550 <HAL_DMA_Abort_IT+0x1ac>
 8004528:	2301      	movs	r3, #1
 800452a:	e011      	b.n	8004550 <HAL_DMA_Abort_IT+0x1ac>
 800452c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004530:	e00e      	b.n	8004550 <HAL_DMA_Abort_IT+0x1ac>
 8004532:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004536:	e00b      	b.n	8004550 <HAL_DMA_Abort_IT+0x1ac>
 8004538:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800453c:	e008      	b.n	8004550 <HAL_DMA_Abort_IT+0x1ac>
 800453e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004542:	e005      	b.n	8004550 <HAL_DMA_Abort_IT+0x1ac>
 8004544:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004548:	e002      	b.n	8004550 <HAL_DMA_Abort_IT+0x1ac>
 800454a:	2310      	movs	r3, #16
 800454c:	e000      	b.n	8004550 <HAL_DMA_Abort_IT+0x1ac>
 800454e:	2301      	movs	r3, #1
 8004550:	4a17      	ldr	r2, [pc, #92]	; (80045b0 <HAL_DMA_Abort_IT+0x20c>)
 8004552:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004568:	2b00      	cmp	r3, #0
 800456a:	d003      	beq.n	8004574 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	4798      	blx	r3
    } 
  }
  return status;
 8004574:	7bfb      	ldrb	r3, [r7, #15]
}
 8004576:	4618      	mov	r0, r3
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	40020080 	.word	0x40020080
 8004584:	40020008 	.word	0x40020008
 8004588:	4002001c 	.word	0x4002001c
 800458c:	40020030 	.word	0x40020030
 8004590:	40020044 	.word	0x40020044
 8004594:	40020058 	.word	0x40020058
 8004598:	4002006c 	.word	0x4002006c
 800459c:	40020408 	.word	0x40020408
 80045a0:	4002041c 	.word	0x4002041c
 80045a4:	40020430 	.word	0x40020430
 80045a8:	40020444 	.word	0x40020444
 80045ac:	40020400 	.word	0x40020400
 80045b0:	40020000 	.word	0x40020000

080045b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b08b      	sub	sp, #44	; 0x2c
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80045be:	2300      	movs	r3, #0
 80045c0:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 80045c2:	2300      	movs	r3, #0
 80045c4:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 80045c6:	2300      	movs	r3, #0
 80045c8:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 80045ca:	2300      	movs	r3, #0
 80045cc:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 80045ce:	2300      	movs	r3, #0
 80045d0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80045d2:	2300      	movs	r3, #0
 80045d4:	627b      	str	r3, [r7, #36]	; 0x24
 80045d6:	e179      	b.n	80048cc <HAL_GPIO_Init+0x318>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 80045d8:	2201      	movs	r2, #1
 80045da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045dc:	fa02 f303 	lsl.w	r3, r2, r3
 80045e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	69fa      	ldr	r2, [r7, #28]
 80045e8:	4013      	ands	r3, r2
 80045ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80045ec:	69ba      	ldr	r2, [r7, #24]
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	f040 8168 	bne.w	80048c6 <HAL_GPIO_Init+0x312>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	4a96      	ldr	r2, [pc, #600]	; (8004854 <HAL_GPIO_Init+0x2a0>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d05e      	beq.n	80046be <HAL_GPIO_Init+0x10a>
 8004600:	4a94      	ldr	r2, [pc, #592]	; (8004854 <HAL_GPIO_Init+0x2a0>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d875      	bhi.n	80046f2 <HAL_GPIO_Init+0x13e>
 8004606:	4a94      	ldr	r2, [pc, #592]	; (8004858 <HAL_GPIO_Init+0x2a4>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d058      	beq.n	80046be <HAL_GPIO_Init+0x10a>
 800460c:	4a92      	ldr	r2, [pc, #584]	; (8004858 <HAL_GPIO_Init+0x2a4>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d86f      	bhi.n	80046f2 <HAL_GPIO_Init+0x13e>
 8004612:	4a92      	ldr	r2, [pc, #584]	; (800485c <HAL_GPIO_Init+0x2a8>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d052      	beq.n	80046be <HAL_GPIO_Init+0x10a>
 8004618:	4a90      	ldr	r2, [pc, #576]	; (800485c <HAL_GPIO_Init+0x2a8>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d869      	bhi.n	80046f2 <HAL_GPIO_Init+0x13e>
 800461e:	4a90      	ldr	r2, [pc, #576]	; (8004860 <HAL_GPIO_Init+0x2ac>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d04c      	beq.n	80046be <HAL_GPIO_Init+0x10a>
 8004624:	4a8e      	ldr	r2, [pc, #568]	; (8004860 <HAL_GPIO_Init+0x2ac>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d863      	bhi.n	80046f2 <HAL_GPIO_Init+0x13e>
 800462a:	4a8e      	ldr	r2, [pc, #568]	; (8004864 <HAL_GPIO_Init+0x2b0>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d046      	beq.n	80046be <HAL_GPIO_Init+0x10a>
 8004630:	4a8c      	ldr	r2, [pc, #560]	; (8004864 <HAL_GPIO_Init+0x2b0>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d85d      	bhi.n	80046f2 <HAL_GPIO_Init+0x13e>
 8004636:	2b12      	cmp	r3, #18
 8004638:	d82a      	bhi.n	8004690 <HAL_GPIO_Init+0xdc>
 800463a:	2b12      	cmp	r3, #18
 800463c:	d859      	bhi.n	80046f2 <HAL_GPIO_Init+0x13e>
 800463e:	a201      	add	r2, pc, #4	; (adr r2, 8004644 <HAL_GPIO_Init+0x90>)
 8004640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004644:	080046bf 	.word	0x080046bf
 8004648:	08004699 	.word	0x08004699
 800464c:	080046ab 	.word	0x080046ab
 8004650:	080046ed 	.word	0x080046ed
 8004654:	080046f3 	.word	0x080046f3
 8004658:	080046f3 	.word	0x080046f3
 800465c:	080046f3 	.word	0x080046f3
 8004660:	080046f3 	.word	0x080046f3
 8004664:	080046f3 	.word	0x080046f3
 8004668:	080046f3 	.word	0x080046f3
 800466c:	080046f3 	.word	0x080046f3
 8004670:	080046f3 	.word	0x080046f3
 8004674:	080046f3 	.word	0x080046f3
 8004678:	080046f3 	.word	0x080046f3
 800467c:	080046f3 	.word	0x080046f3
 8004680:	080046f3 	.word	0x080046f3
 8004684:	080046f3 	.word	0x080046f3
 8004688:	080046a1 	.word	0x080046a1
 800468c:	080046b5 	.word	0x080046b5
 8004690:	4a75      	ldr	r2, [pc, #468]	; (8004868 <HAL_GPIO_Init+0x2b4>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d013      	beq.n	80046be <HAL_GPIO_Init+0x10a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004696:	e02c      	b.n	80046f2 <HAL_GPIO_Init+0x13e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	623b      	str	r3, [r7, #32]
          break;
 800469e:	e029      	b.n	80046f4 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	3304      	adds	r3, #4
 80046a6:	623b      	str	r3, [r7, #32]
          break;
 80046a8:	e024      	b.n	80046f4 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	3308      	adds	r3, #8
 80046b0:	623b      	str	r3, [r7, #32]
          break;
 80046b2:	e01f      	b.n	80046f4 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	330c      	adds	r3, #12
 80046ba:	623b      	str	r3, [r7, #32]
          break;
 80046bc:	e01a      	b.n	80046f4 <HAL_GPIO_Init+0x140>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d102      	bne.n	80046cc <HAL_GPIO_Init+0x118>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80046c6:	2304      	movs	r3, #4
 80046c8:	623b      	str	r3, [r7, #32]
          break;
 80046ca:	e013      	b.n	80046f4 <HAL_GPIO_Init+0x140>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d105      	bne.n	80046e0 <HAL_GPIO_Init+0x12c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80046d4:	2308      	movs	r3, #8
 80046d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	69fa      	ldr	r2, [r7, #28]
 80046dc:	611a      	str	r2, [r3, #16]
          break;
 80046de:	e009      	b.n	80046f4 <HAL_GPIO_Init+0x140>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80046e0:	2308      	movs	r3, #8
 80046e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	69fa      	ldr	r2, [r7, #28]
 80046e8:	615a      	str	r2, [r3, #20]
          break;
 80046ea:	e003      	b.n	80046f4 <HAL_GPIO_Init+0x140>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80046ec:	2300      	movs	r3, #0
 80046ee:	623b      	str	r3, [r7, #32]
          break;
 80046f0:	e000      	b.n	80046f4 <HAL_GPIO_Init+0x140>
          break;
 80046f2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	2bff      	cmp	r3, #255	; 0xff
 80046f8:	d801      	bhi.n	80046fe <HAL_GPIO_Init+0x14a>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	e001      	b.n	8004702 <HAL_GPIO_Init+0x14e>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	3304      	adds	r3, #4
 8004702:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	2bff      	cmp	r3, #255	; 0xff
 8004708:	d802      	bhi.n	8004710 <HAL_GPIO_Init+0x15c>
 800470a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	e002      	b.n	8004716 <HAL_GPIO_Init+0x162>
 8004710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004712:	3b08      	subs	r3, #8
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	210f      	movs	r1, #15
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	fa01 f303 	lsl.w	r3, r1, r3
 8004724:	43db      	mvns	r3, r3
 8004726:	401a      	ands	r2, r3
 8004728:	6a39      	ldr	r1, [r7, #32]
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	fa01 f303 	lsl.w	r3, r1, r3
 8004730:	431a      	orrs	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800473e:	2b00      	cmp	r3, #0
 8004740:	f000 80c1 	beq.w	80048c6 <HAL_GPIO_Init+0x312>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004744:	4b49      	ldr	r3, [pc, #292]	; (800486c <HAL_GPIO_Init+0x2b8>)
 8004746:	699b      	ldr	r3, [r3, #24]
 8004748:	4a48      	ldr	r2, [pc, #288]	; (800486c <HAL_GPIO_Init+0x2b8>)
 800474a:	f043 0301 	orr.w	r3, r3, #1
 800474e:	6193      	str	r3, [r2, #24]
 8004750:	4b46      	ldr	r3, [pc, #280]	; (800486c <HAL_GPIO_Init+0x2b8>)
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	f003 0301 	and.w	r3, r3, #1
 8004758:	60bb      	str	r3, [r7, #8]
 800475a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 800475c:	4a44      	ldr	r2, [pc, #272]	; (8004870 <HAL_GPIO_Init+0x2bc>)
 800475e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004760:	089b      	lsrs	r3, r3, #2
 8004762:	3302      	adds	r3, #2
 8004764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004768:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800476a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476c:	f003 0303 	and.w	r3, r3, #3
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	220f      	movs	r2, #15
 8004774:	fa02 f303 	lsl.w	r3, r2, r3
 8004778:	43db      	mvns	r3, r3
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	4013      	ands	r3, r2
 800477e:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4a3c      	ldr	r2, [pc, #240]	; (8004874 <HAL_GPIO_Init+0x2c0>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d01f      	beq.n	80047c8 <HAL_GPIO_Init+0x214>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4a3b      	ldr	r2, [pc, #236]	; (8004878 <HAL_GPIO_Init+0x2c4>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d019      	beq.n	80047c4 <HAL_GPIO_Init+0x210>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a3a      	ldr	r2, [pc, #232]	; (800487c <HAL_GPIO_Init+0x2c8>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d013      	beq.n	80047c0 <HAL_GPIO_Init+0x20c>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a39      	ldr	r2, [pc, #228]	; (8004880 <HAL_GPIO_Init+0x2cc>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d00d      	beq.n	80047bc <HAL_GPIO_Init+0x208>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4a38      	ldr	r2, [pc, #224]	; (8004884 <HAL_GPIO_Init+0x2d0>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d007      	beq.n	80047b8 <HAL_GPIO_Init+0x204>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4a37      	ldr	r2, [pc, #220]	; (8004888 <HAL_GPIO_Init+0x2d4>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d101      	bne.n	80047b4 <HAL_GPIO_Init+0x200>
 80047b0:	2305      	movs	r3, #5
 80047b2:	e00a      	b.n	80047ca <HAL_GPIO_Init+0x216>
 80047b4:	2306      	movs	r3, #6
 80047b6:	e008      	b.n	80047ca <HAL_GPIO_Init+0x216>
 80047b8:	2304      	movs	r3, #4
 80047ba:	e006      	b.n	80047ca <HAL_GPIO_Init+0x216>
 80047bc:	2303      	movs	r3, #3
 80047be:	e004      	b.n	80047ca <HAL_GPIO_Init+0x216>
 80047c0:	2302      	movs	r3, #2
 80047c2:	e002      	b.n	80047ca <HAL_GPIO_Init+0x216>
 80047c4:	2301      	movs	r3, #1
 80047c6:	e000      	b.n	80047ca <HAL_GPIO_Init+0x216>
 80047c8:	2300      	movs	r3, #0
 80047ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047cc:	f002 0203 	and.w	r2, r2, #3
 80047d0:	0092      	lsls	r2, r2, #2
 80047d2:	4093      	lsls	r3, r2
 80047d4:	697a      	ldr	r2, [r7, #20]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 80047da:	4925      	ldr	r1, [pc, #148]	; (8004870 <HAL_GPIO_Init+0x2bc>)
 80047dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047de:	089b      	lsrs	r3, r3, #2
 80047e0:	3302      	adds	r3, #2
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d006      	beq.n	8004802 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80047f4:	4b25      	ldr	r3, [pc, #148]	; (800488c <HAL_GPIO_Init+0x2d8>)
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	4924      	ldr	r1, [pc, #144]	; (800488c <HAL_GPIO_Init+0x2d8>)
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	600b      	str	r3, [r1, #0]
 8004800:	e006      	b.n	8004810 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004802:	4b22      	ldr	r3, [pc, #136]	; (800488c <HAL_GPIO_Init+0x2d8>)
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	43db      	mvns	r3, r3
 800480a:	4920      	ldr	r1, [pc, #128]	; (800488c <HAL_GPIO_Init+0x2d8>)
 800480c:	4013      	ands	r3, r2
 800480e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d006      	beq.n	800482a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800481c:	4b1b      	ldr	r3, [pc, #108]	; (800488c <HAL_GPIO_Init+0x2d8>)
 800481e:	685a      	ldr	r2, [r3, #4]
 8004820:	491a      	ldr	r1, [pc, #104]	; (800488c <HAL_GPIO_Init+0x2d8>)
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	4313      	orrs	r3, r2
 8004826:	604b      	str	r3, [r1, #4]
 8004828:	e006      	b.n	8004838 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800482a:	4b18      	ldr	r3, [pc, #96]	; (800488c <HAL_GPIO_Init+0x2d8>)
 800482c:	685a      	ldr	r2, [r3, #4]
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	43db      	mvns	r3, r3
 8004832:	4916      	ldr	r1, [pc, #88]	; (800488c <HAL_GPIO_Init+0x2d8>)
 8004834:	4013      	ands	r3, r2
 8004836:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d025      	beq.n	8004890 <HAL_GPIO_Init+0x2dc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004844:	4b11      	ldr	r3, [pc, #68]	; (800488c <HAL_GPIO_Init+0x2d8>)
 8004846:	689a      	ldr	r2, [r3, #8]
 8004848:	4910      	ldr	r1, [pc, #64]	; (800488c <HAL_GPIO_Init+0x2d8>)
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	4313      	orrs	r3, r2
 800484e:	608b      	str	r3, [r1, #8]
 8004850:	e025      	b.n	800489e <HAL_GPIO_Init+0x2ea>
 8004852:	bf00      	nop
 8004854:	10320000 	.word	0x10320000
 8004858:	10310000 	.word	0x10310000
 800485c:	10220000 	.word	0x10220000
 8004860:	10210000 	.word	0x10210000
 8004864:	10120000 	.word	0x10120000
 8004868:	10110000 	.word	0x10110000
 800486c:	40021000 	.word	0x40021000
 8004870:	40010000 	.word	0x40010000
 8004874:	40010800 	.word	0x40010800
 8004878:	40010c00 	.word	0x40010c00
 800487c:	40011000 	.word	0x40011000
 8004880:	40011400 	.word	0x40011400
 8004884:	40011800 	.word	0x40011800
 8004888:	40011c00 	.word	0x40011c00
 800488c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004890:	4b13      	ldr	r3, [pc, #76]	; (80048e0 <HAL_GPIO_Init+0x32c>)
 8004892:	689a      	ldr	r2, [r3, #8]
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	43db      	mvns	r3, r3
 8004898:	4911      	ldr	r1, [pc, #68]	; (80048e0 <HAL_GPIO_Init+0x32c>)
 800489a:	4013      	ands	r3, r2
 800489c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d006      	beq.n	80048b8 <HAL_GPIO_Init+0x304>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80048aa:	4b0d      	ldr	r3, [pc, #52]	; (80048e0 <HAL_GPIO_Init+0x32c>)
 80048ac:	68da      	ldr	r2, [r3, #12]
 80048ae:	490c      	ldr	r1, [pc, #48]	; (80048e0 <HAL_GPIO_Init+0x32c>)
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	60cb      	str	r3, [r1, #12]
 80048b6:	e006      	b.n	80048c6 <HAL_GPIO_Init+0x312>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80048b8:	4b09      	ldr	r3, [pc, #36]	; (80048e0 <HAL_GPIO_Init+0x32c>)
 80048ba:	68da      	ldr	r2, [r3, #12]
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	43db      	mvns	r3, r3
 80048c0:	4907      	ldr	r1, [pc, #28]	; (80048e0 <HAL_GPIO_Init+0x32c>)
 80048c2:	4013      	ands	r3, r2
 80048c4:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80048c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c8:	3301      	adds	r3, #1
 80048ca:	627b      	str	r3, [r7, #36]	; 0x24
 80048cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ce:	2b0f      	cmp	r3, #15
 80048d0:	f67f ae82 	bls.w	80045d8 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 80048d4:	bf00      	nop
 80048d6:	bf00      	nop
 80048d8:	372c      	adds	r7, #44	; 0x2c
 80048da:	46bd      	mov	sp, r7
 80048dc:	bc80      	pop	{r7}
 80048de:	4770      	bx	lr
 80048e0:	40010400 	.word	0x40010400

080048e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	460b      	mov	r3, r1
 80048ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	689a      	ldr	r2, [r3, #8]
 80048f4:	887b      	ldrh	r3, [r7, #2]
 80048f6:	4013      	ands	r3, r2
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d002      	beq.n	8004902 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80048fc:	2301      	movs	r3, #1
 80048fe:	73fb      	strb	r3, [r7, #15]
 8004900:	e001      	b.n	8004906 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004902:	2300      	movs	r3, #0
 8004904:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004906:	7bfb      	ldrb	r3, [r7, #15]
}
 8004908:	4618      	mov	r0, r3
 800490a:	3714      	adds	r7, #20
 800490c:	46bd      	mov	sp, r7
 800490e:	bc80      	pop	{r7}
 8004910:	4770      	bx	lr

08004912 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004912:	b480      	push	{r7}
 8004914:	b083      	sub	sp, #12
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
 800491a:	460b      	mov	r3, r1
 800491c:	807b      	strh	r3, [r7, #2]
 800491e:	4613      	mov	r3, r2
 8004920:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004922:	787b      	ldrb	r3, [r7, #1]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d003      	beq.n	8004930 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004928:	887a      	ldrh	r2, [r7, #2]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800492e:	e003      	b.n	8004938 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004930:	887b      	ldrh	r3, [r7, #2]
 8004932:	041a      	lsls	r2, r3, #16
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	611a      	str	r2, [r3, #16]
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	bc80      	pop	{r7}
 8004940:	4770      	bx	lr
	...

08004944 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
 800494a:	4603      	mov	r3, r0
 800494c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800494e:	4b08      	ldr	r3, [pc, #32]	; (8004970 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004950:	695a      	ldr	r2, [r3, #20]
 8004952:	88fb      	ldrh	r3, [r7, #6]
 8004954:	4013      	ands	r3, r2
 8004956:	2b00      	cmp	r3, #0
 8004958:	d006      	beq.n	8004968 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800495a:	4a05      	ldr	r2, [pc, #20]	; (8004970 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800495c:	88fb      	ldrh	r3, [r7, #6]
 800495e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004960:	88fb      	ldrh	r3, [r7, #6]
 8004962:	4618      	mov	r0, r3
 8004964:	f000 f806 	bl	8004974 <HAL_GPIO_EXTI_Callback>
  }
}
 8004968:	bf00      	nop
 800496a:	3708      	adds	r7, #8
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	40010400 	.word	0x40010400

08004974 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	4603      	mov	r3, r0
 800497c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800497e:	bf00      	nop
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	bc80      	pop	{r7}
 8004986:	4770      	bx	lr

08004988 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8004990:	2300      	movs	r3, #0
 8004992:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0301 	and.w	r3, r3, #1
 800499c:	2b00      	cmp	r3, #0
 800499e:	f000 8087 	beq.w	8004ab0 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80049a2:	4b92      	ldr	r3, [pc, #584]	; (8004bec <HAL_RCC_OscConfig+0x264>)
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	f003 030c 	and.w	r3, r3, #12
 80049aa:	2b04      	cmp	r3, #4
 80049ac:	d00c      	beq.n	80049c8 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80049ae:	4b8f      	ldr	r3, [pc, #572]	; (8004bec <HAL_RCC_OscConfig+0x264>)
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f003 030c 	and.w	r3, r3, #12
 80049b6:	2b08      	cmp	r3, #8
 80049b8:	d112      	bne.n	80049e0 <HAL_RCC_OscConfig+0x58>
 80049ba:	4b8c      	ldr	r3, [pc, #560]	; (8004bec <HAL_RCC_OscConfig+0x264>)
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049c6:	d10b      	bne.n	80049e0 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049c8:	4b88      	ldr	r3, [pc, #544]	; (8004bec <HAL_RCC_OscConfig+0x264>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d06c      	beq.n	8004aae <HAL_RCC_OscConfig+0x126>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d168      	bne.n	8004aae <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e22d      	b.n	8004e3c <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049e8:	d106      	bne.n	80049f8 <HAL_RCC_OscConfig+0x70>
 80049ea:	4b80      	ldr	r3, [pc, #512]	; (8004bec <HAL_RCC_OscConfig+0x264>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a7f      	ldr	r2, [pc, #508]	; (8004bec <HAL_RCC_OscConfig+0x264>)
 80049f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049f4:	6013      	str	r3, [r2, #0]
 80049f6:	e02e      	b.n	8004a56 <HAL_RCC_OscConfig+0xce>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d10c      	bne.n	8004a1a <HAL_RCC_OscConfig+0x92>
 8004a00:	4b7a      	ldr	r3, [pc, #488]	; (8004bec <HAL_RCC_OscConfig+0x264>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a79      	ldr	r2, [pc, #484]	; (8004bec <HAL_RCC_OscConfig+0x264>)
 8004a06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a0a:	6013      	str	r3, [r2, #0]
 8004a0c:	4b77      	ldr	r3, [pc, #476]	; (8004bec <HAL_RCC_OscConfig+0x264>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a76      	ldr	r2, [pc, #472]	; (8004bec <HAL_RCC_OscConfig+0x264>)
 8004a12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a16:	6013      	str	r3, [r2, #0]
 8004a18:	e01d      	b.n	8004a56 <HAL_RCC_OscConfig+0xce>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a22:	d10c      	bne.n	8004a3e <HAL_RCC_OscConfig+0xb6>
 8004a24:	4b71      	ldr	r3, [pc, #452]	; (8004bec <HAL_RCC_OscConfig+0x264>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a70      	ldr	r2, [pc, #448]	; (8004bec <HAL_RCC_OscConfig+0x264>)
 8004a2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a2e:	6013      	str	r3, [r2, #0]
 8004a30:	4b6e      	ldr	r3, [pc, #440]	; (8004bec <HAL_RCC_OscConfig+0x264>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a6d      	ldr	r2, [pc, #436]	; (8004bec <HAL_RCC_OscConfig+0x264>)
 8004a36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a3a:	6013      	str	r3, [r2, #0]
 8004a3c:	e00b      	b.n	8004a56 <HAL_RCC_OscConfig+0xce>
 8004a3e:	4b6b      	ldr	r3, [pc, #428]	; (8004bec <HAL_RCC_OscConfig+0x264>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a6a      	ldr	r2, [pc, #424]	; (8004bec <HAL_RCC_OscConfig+0x264>)
 8004a44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a48:	6013      	str	r3, [r2, #0]
 8004a4a:	4b68      	ldr	r3, [pc, #416]	; (8004bec <HAL_RCC_OscConfig+0x264>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a67      	ldr	r2, [pc, #412]	; (8004bec <HAL_RCC_OscConfig+0x264>)
 8004a50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a54:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d013      	beq.n	8004a86 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a5e:	f7ff fb69 	bl	8004134 <HAL_GetTick>
 8004a62:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a64:	e008      	b.n	8004a78 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a66:	f7ff fb65 	bl	8004134 <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	2b64      	cmp	r3, #100	; 0x64
 8004a72:	d901      	bls.n	8004a78 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e1e1      	b.n	8004e3c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a78:	4b5c      	ldr	r3, [pc, #368]	; (8004bec <HAL_RCC_OscConfig+0x264>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d0f0      	beq.n	8004a66 <HAL_RCC_OscConfig+0xde>
 8004a84:	e014      	b.n	8004ab0 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a86:	f7ff fb55 	bl	8004134 <HAL_GetTick>
 8004a8a:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a8c:	e008      	b.n	8004aa0 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a8e:	f7ff fb51 	bl	8004134 <HAL_GetTick>
 8004a92:	4602      	mov	r2, r0
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	2b64      	cmp	r3, #100	; 0x64
 8004a9a:	d901      	bls.n	8004aa0 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e1cd      	b.n	8004e3c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004aa0:	4b52      	ldr	r3, [pc, #328]	; (8004bec <HAL_RCC_OscConfig+0x264>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1f0      	bne.n	8004a8e <HAL_RCC_OscConfig+0x106>
 8004aac:	e000      	b.n	8004ab0 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aae:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0302 	and.w	r3, r3, #2
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d063      	beq.n	8004b84 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004abc:	4b4b      	ldr	r3, [pc, #300]	; (8004bec <HAL_RCC_OscConfig+0x264>)
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f003 030c 	and.w	r3, r3, #12
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d00b      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004ac8:	4b48      	ldr	r3, [pc, #288]	; (8004bec <HAL_RCC_OscConfig+0x264>)
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f003 030c 	and.w	r3, r3, #12
 8004ad0:	2b08      	cmp	r3, #8
 8004ad2:	d11c      	bne.n	8004b0e <HAL_RCC_OscConfig+0x186>
 8004ad4:	4b45      	ldr	r3, [pc, #276]	; (8004bec <HAL_RCC_OscConfig+0x264>)
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d116      	bne.n	8004b0e <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ae0:	4b42      	ldr	r3, [pc, #264]	; (8004bec <HAL_RCC_OscConfig+0x264>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0302 	and.w	r3, r3, #2
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d005      	beq.n	8004af8 <HAL_RCC_OscConfig+0x170>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d001      	beq.n	8004af8 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e1a1      	b.n	8004e3c <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004af8:	4b3c      	ldr	r3, [pc, #240]	; (8004bec <HAL_RCC_OscConfig+0x264>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	695b      	ldr	r3, [r3, #20]
 8004b04:	00db      	lsls	r3, r3, #3
 8004b06:	4939      	ldr	r1, [pc, #228]	; (8004bec <HAL_RCC_OscConfig+0x264>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b0c:	e03a      	b.n	8004b84 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d020      	beq.n	8004b58 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b16:	4b36      	ldr	r3, [pc, #216]	; (8004bf0 <HAL_RCC_OscConfig+0x268>)
 8004b18:	2201      	movs	r2, #1
 8004b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b1c:	f7ff fb0a 	bl	8004134 <HAL_GetTick>
 8004b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b22:	e008      	b.n	8004b36 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b24:	f7ff fb06 	bl	8004134 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d901      	bls.n	8004b36 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e182      	b.n	8004e3c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b36:	4b2d      	ldr	r3, [pc, #180]	; (8004bec <HAL_RCC_OscConfig+0x264>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d0f0      	beq.n	8004b24 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b42:	4b2a      	ldr	r3, [pc, #168]	; (8004bec <HAL_RCC_OscConfig+0x264>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	695b      	ldr	r3, [r3, #20]
 8004b4e:	00db      	lsls	r3, r3, #3
 8004b50:	4926      	ldr	r1, [pc, #152]	; (8004bec <HAL_RCC_OscConfig+0x264>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	600b      	str	r3, [r1, #0]
 8004b56:	e015      	b.n	8004b84 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b58:	4b25      	ldr	r3, [pc, #148]	; (8004bf0 <HAL_RCC_OscConfig+0x268>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b5e:	f7ff fae9 	bl	8004134 <HAL_GetTick>
 8004b62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b64:	e008      	b.n	8004b78 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b66:	f7ff fae5 	bl	8004134 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d901      	bls.n	8004b78 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e161      	b.n	8004e3c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b78:	4b1c      	ldr	r3, [pc, #112]	; (8004bec <HAL_RCC_OscConfig+0x264>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0302 	and.w	r3, r3, #2
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d1f0      	bne.n	8004b66 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0308 	and.w	r3, r3, #8
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d039      	beq.n	8004c04 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	699b      	ldr	r3, [r3, #24]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d019      	beq.n	8004bcc <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b98:	4b16      	ldr	r3, [pc, #88]	; (8004bf4 <HAL_RCC_OscConfig+0x26c>)
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b9e:	f7ff fac9 	bl	8004134 <HAL_GetTick>
 8004ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ba4:	e008      	b.n	8004bb8 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ba6:	f7ff fac5 	bl	8004134 <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d901      	bls.n	8004bb8 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e141      	b.n	8004e3c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bb8:	4b0c      	ldr	r3, [pc, #48]	; (8004bec <HAL_RCC_OscConfig+0x264>)
 8004bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbc:	f003 0302 	and.w	r3, r3, #2
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d0f0      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8004bc4:	2001      	movs	r0, #1
 8004bc6:	f000 fadf 	bl	8005188 <RCC_Delay>
 8004bca:	e01b      	b.n	8004c04 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bcc:	4b09      	ldr	r3, [pc, #36]	; (8004bf4 <HAL_RCC_OscConfig+0x26c>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bd2:	f7ff faaf 	bl	8004134 <HAL_GetTick>
 8004bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bd8:	e00e      	b.n	8004bf8 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bda:	f7ff faab 	bl	8004134 <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d907      	bls.n	8004bf8 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e127      	b.n	8004e3c <HAL_RCC_OscConfig+0x4b4>
 8004bec:	40021000 	.word	0x40021000
 8004bf0:	42420000 	.word	0x42420000
 8004bf4:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bf8:	4b92      	ldr	r3, [pc, #584]	; (8004e44 <HAL_RCC_OscConfig+0x4bc>)
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1ea      	bne.n	8004bda <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0304 	and.w	r3, r3, #4
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	f000 80a6 	beq.w	8004d5e <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c12:	2300      	movs	r3, #0
 8004c14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c16:	4b8b      	ldr	r3, [pc, #556]	; (8004e44 <HAL_RCC_OscConfig+0x4bc>)
 8004c18:	69db      	ldr	r3, [r3, #28]
 8004c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10d      	bne.n	8004c3e <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c22:	4b88      	ldr	r3, [pc, #544]	; (8004e44 <HAL_RCC_OscConfig+0x4bc>)
 8004c24:	69db      	ldr	r3, [r3, #28]
 8004c26:	4a87      	ldr	r2, [pc, #540]	; (8004e44 <HAL_RCC_OscConfig+0x4bc>)
 8004c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c2c:	61d3      	str	r3, [r2, #28]
 8004c2e:	4b85      	ldr	r3, [pc, #532]	; (8004e44 <HAL_RCC_OscConfig+0x4bc>)
 8004c30:	69db      	ldr	r3, [r3, #28]
 8004c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c36:	60fb      	str	r3, [r7, #12]
 8004c38:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c3e:	4b82      	ldr	r3, [pc, #520]	; (8004e48 <HAL_RCC_OscConfig+0x4c0>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d118      	bne.n	8004c7c <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c4a:	4b7f      	ldr	r3, [pc, #508]	; (8004e48 <HAL_RCC_OscConfig+0x4c0>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a7e      	ldr	r2, [pc, #504]	; (8004e48 <HAL_RCC_OscConfig+0x4c0>)
 8004c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c56:	f7ff fa6d 	bl	8004134 <HAL_GetTick>
 8004c5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c5c:	e008      	b.n	8004c70 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c5e:	f7ff fa69 	bl	8004134 <HAL_GetTick>
 8004c62:	4602      	mov	r2, r0
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	2b64      	cmp	r3, #100	; 0x64
 8004c6a:	d901      	bls.n	8004c70 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e0e5      	b.n	8004e3c <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c70:	4b75      	ldr	r3, [pc, #468]	; (8004e48 <HAL_RCC_OscConfig+0x4c0>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d0f0      	beq.n	8004c5e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d106      	bne.n	8004c92 <HAL_RCC_OscConfig+0x30a>
 8004c84:	4b6f      	ldr	r3, [pc, #444]	; (8004e44 <HAL_RCC_OscConfig+0x4bc>)
 8004c86:	6a1b      	ldr	r3, [r3, #32]
 8004c88:	4a6e      	ldr	r2, [pc, #440]	; (8004e44 <HAL_RCC_OscConfig+0x4bc>)
 8004c8a:	f043 0301 	orr.w	r3, r3, #1
 8004c8e:	6213      	str	r3, [r2, #32]
 8004c90:	e02d      	b.n	8004cee <HAL_RCC_OscConfig+0x366>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d10c      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x32c>
 8004c9a:	4b6a      	ldr	r3, [pc, #424]	; (8004e44 <HAL_RCC_OscConfig+0x4bc>)
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
 8004c9e:	4a69      	ldr	r2, [pc, #420]	; (8004e44 <HAL_RCC_OscConfig+0x4bc>)
 8004ca0:	f023 0301 	bic.w	r3, r3, #1
 8004ca4:	6213      	str	r3, [r2, #32]
 8004ca6:	4b67      	ldr	r3, [pc, #412]	; (8004e44 <HAL_RCC_OscConfig+0x4bc>)
 8004ca8:	6a1b      	ldr	r3, [r3, #32]
 8004caa:	4a66      	ldr	r2, [pc, #408]	; (8004e44 <HAL_RCC_OscConfig+0x4bc>)
 8004cac:	f023 0304 	bic.w	r3, r3, #4
 8004cb0:	6213      	str	r3, [r2, #32]
 8004cb2:	e01c      	b.n	8004cee <HAL_RCC_OscConfig+0x366>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	2b05      	cmp	r3, #5
 8004cba:	d10c      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x34e>
 8004cbc:	4b61      	ldr	r3, [pc, #388]	; (8004e44 <HAL_RCC_OscConfig+0x4bc>)
 8004cbe:	6a1b      	ldr	r3, [r3, #32]
 8004cc0:	4a60      	ldr	r2, [pc, #384]	; (8004e44 <HAL_RCC_OscConfig+0x4bc>)
 8004cc2:	f043 0304 	orr.w	r3, r3, #4
 8004cc6:	6213      	str	r3, [r2, #32]
 8004cc8:	4b5e      	ldr	r3, [pc, #376]	; (8004e44 <HAL_RCC_OscConfig+0x4bc>)
 8004cca:	6a1b      	ldr	r3, [r3, #32]
 8004ccc:	4a5d      	ldr	r2, [pc, #372]	; (8004e44 <HAL_RCC_OscConfig+0x4bc>)
 8004cce:	f043 0301 	orr.w	r3, r3, #1
 8004cd2:	6213      	str	r3, [r2, #32]
 8004cd4:	e00b      	b.n	8004cee <HAL_RCC_OscConfig+0x366>
 8004cd6:	4b5b      	ldr	r3, [pc, #364]	; (8004e44 <HAL_RCC_OscConfig+0x4bc>)
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
 8004cda:	4a5a      	ldr	r2, [pc, #360]	; (8004e44 <HAL_RCC_OscConfig+0x4bc>)
 8004cdc:	f023 0301 	bic.w	r3, r3, #1
 8004ce0:	6213      	str	r3, [r2, #32]
 8004ce2:	4b58      	ldr	r3, [pc, #352]	; (8004e44 <HAL_RCC_OscConfig+0x4bc>)
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	4a57      	ldr	r2, [pc, #348]	; (8004e44 <HAL_RCC_OscConfig+0x4bc>)
 8004ce8:	f023 0304 	bic.w	r3, r3, #4
 8004cec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d015      	beq.n	8004d22 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cf6:	f7ff fa1d 	bl	8004134 <HAL_GetTick>
 8004cfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cfc:	e00a      	b.n	8004d14 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cfe:	f7ff fa19 	bl	8004134 <HAL_GetTick>
 8004d02:	4602      	mov	r2, r0
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d901      	bls.n	8004d14 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e093      	b.n	8004e3c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d14:	4b4b      	ldr	r3, [pc, #300]	; (8004e44 <HAL_RCC_OscConfig+0x4bc>)
 8004d16:	6a1b      	ldr	r3, [r3, #32]
 8004d18:	f003 0302 	and.w	r3, r3, #2
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d0ee      	beq.n	8004cfe <HAL_RCC_OscConfig+0x376>
 8004d20:	e014      	b.n	8004d4c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d22:	f7ff fa07 	bl	8004134 <HAL_GetTick>
 8004d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d28:	e00a      	b.n	8004d40 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d2a:	f7ff fa03 	bl	8004134 <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d901      	bls.n	8004d40 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e07d      	b.n	8004e3c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d40:	4b40      	ldr	r3, [pc, #256]	; (8004e44 <HAL_RCC_OscConfig+0x4bc>)
 8004d42:	6a1b      	ldr	r3, [r3, #32]
 8004d44:	f003 0302 	and.w	r3, r3, #2
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1ee      	bne.n	8004d2a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004d4c:	7dfb      	ldrb	r3, [r7, #23]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d105      	bne.n	8004d5e <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d52:	4b3c      	ldr	r3, [pc, #240]	; (8004e44 <HAL_RCC_OscConfig+0x4bc>)
 8004d54:	69db      	ldr	r3, [r3, #28]
 8004d56:	4a3b      	ldr	r2, [pc, #236]	; (8004e44 <HAL_RCC_OscConfig+0x4bc>)
 8004d58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d5c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	69db      	ldr	r3, [r3, #28]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d069      	beq.n	8004e3a <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d66:	4b37      	ldr	r3, [pc, #220]	; (8004e44 <HAL_RCC_OscConfig+0x4bc>)
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f003 030c 	and.w	r3, r3, #12
 8004d6e:	2b08      	cmp	r3, #8
 8004d70:	d061      	beq.n	8004e36 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	69db      	ldr	r3, [r3, #28]
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d146      	bne.n	8004e08 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d7a:	4b34      	ldr	r3, [pc, #208]	; (8004e4c <HAL_RCC_OscConfig+0x4c4>)
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d80:	f7ff f9d8 	bl	8004134 <HAL_GetTick>
 8004d84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d86:	e008      	b.n	8004d9a <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d88:	f7ff f9d4 	bl	8004134 <HAL_GetTick>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d901      	bls.n	8004d9a <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e050      	b.n	8004e3c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d9a:	4b2a      	ldr	r3, [pc, #168]	; (8004e44 <HAL_RCC_OscConfig+0x4bc>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d1f0      	bne.n	8004d88 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a1b      	ldr	r3, [r3, #32]
 8004daa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dae:	d108      	bne.n	8004dc2 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004db0:	4b24      	ldr	r3, [pc, #144]	; (8004e44 <HAL_RCC_OscConfig+0x4bc>)
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	4921      	ldr	r1, [pc, #132]	; (8004e44 <HAL_RCC_OscConfig+0x4bc>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004dc2:	4b20      	ldr	r3, [pc, #128]	; (8004e44 <HAL_RCC_OscConfig+0x4bc>)
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a19      	ldr	r1, [r3, #32]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd2:	430b      	orrs	r3, r1
 8004dd4:	491b      	ldr	r1, [pc, #108]	; (8004e44 <HAL_RCC_OscConfig+0x4bc>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dda:	4b1c      	ldr	r3, [pc, #112]	; (8004e4c <HAL_RCC_OscConfig+0x4c4>)
 8004ddc:	2201      	movs	r2, #1
 8004dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004de0:	f7ff f9a8 	bl	8004134 <HAL_GetTick>
 8004de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004de6:	e008      	b.n	8004dfa <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004de8:	f7ff f9a4 	bl	8004134 <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d901      	bls.n	8004dfa <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e020      	b.n	8004e3c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004dfa:	4b12      	ldr	r3, [pc, #72]	; (8004e44 <HAL_RCC_OscConfig+0x4bc>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d0f0      	beq.n	8004de8 <HAL_RCC_OscConfig+0x460>
 8004e06:	e018      	b.n	8004e3a <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e08:	4b10      	ldr	r3, [pc, #64]	; (8004e4c <HAL_RCC_OscConfig+0x4c4>)
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e0e:	f7ff f991 	bl	8004134 <HAL_GetTick>
 8004e12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e14:	e008      	b.n	8004e28 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e16:	f7ff f98d 	bl	8004134 <HAL_GetTick>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d901      	bls.n	8004e28 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e009      	b.n	8004e3c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e28:	4b06      	ldr	r3, [pc, #24]	; (8004e44 <HAL_RCC_OscConfig+0x4bc>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1f0      	bne.n	8004e16 <HAL_RCC_OscConfig+0x48e>
 8004e34:	e001      	b.n	8004e3a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e000      	b.n	8004e3c <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8004e3a:	2300      	movs	r3, #0
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3718      	adds	r7, #24
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	40021000 	.word	0x40021000
 8004e48:	40007000 	.word	0x40007000
 8004e4c:	42420060 	.word	0x42420060

08004e50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8004e5e:	4b7e      	ldr	r3, [pc, #504]	; (8005058 <HAL_RCC_ClockConfig+0x208>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0307 	and.w	r3, r3, #7
 8004e66:	683a      	ldr	r2, [r7, #0]
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d910      	bls.n	8004e8e <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e6c:	4b7a      	ldr	r3, [pc, #488]	; (8005058 <HAL_RCC_ClockConfig+0x208>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f023 0207 	bic.w	r2, r3, #7
 8004e74:	4978      	ldr	r1, [pc, #480]	; (8005058 <HAL_RCC_ClockConfig+0x208>)
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004e7c:	4b76      	ldr	r3, [pc, #472]	; (8005058 <HAL_RCC_ClockConfig+0x208>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0307 	and.w	r3, r3, #7
 8004e84:	683a      	ldr	r2, [r7, #0]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d001      	beq.n	8004e8e <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e0e0      	b.n	8005050 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0302 	and.w	r3, r3, #2
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d020      	beq.n	8004edc <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0304 	and.w	r3, r3, #4
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d005      	beq.n	8004eb2 <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ea6:	4b6d      	ldr	r3, [pc, #436]	; (800505c <HAL_RCC_ClockConfig+0x20c>)
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	4a6c      	ldr	r2, [pc, #432]	; (800505c <HAL_RCC_ClockConfig+0x20c>)
 8004eac:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004eb0:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0308 	and.w	r3, r3, #8
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d005      	beq.n	8004eca <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ebe:	4b67      	ldr	r3, [pc, #412]	; (800505c <HAL_RCC_ClockConfig+0x20c>)
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	4a66      	ldr	r2, [pc, #408]	; (800505c <HAL_RCC_ClockConfig+0x20c>)
 8004ec4:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004ec8:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004eca:	4b64      	ldr	r3, [pc, #400]	; (800505c <HAL_RCC_ClockConfig+0x20c>)
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	4961      	ldr	r1, [pc, #388]	; (800505c <HAL_RCC_ClockConfig+0x20c>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0301 	and.w	r3, r3, #1
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d06a      	beq.n	8004fbe <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d107      	bne.n	8004f00 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ef0:	4b5a      	ldr	r3, [pc, #360]	; (800505c <HAL_RCC_ClockConfig+0x20c>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d115      	bne.n	8004f28 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e0a7      	b.n	8005050 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d107      	bne.n	8004f18 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f08:	4b54      	ldr	r3, [pc, #336]	; (800505c <HAL_RCC_ClockConfig+0x20c>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d109      	bne.n	8004f28 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e09b      	b.n	8005050 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f18:	4b50      	ldr	r3, [pc, #320]	; (800505c <HAL_RCC_ClockConfig+0x20c>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0302 	and.w	r3, r3, #2
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d101      	bne.n	8004f28 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e093      	b.n	8005050 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f28:	4b4c      	ldr	r3, [pc, #304]	; (800505c <HAL_RCC_ClockConfig+0x20c>)
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f023 0203 	bic.w	r2, r3, #3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	4949      	ldr	r1, [pc, #292]	; (800505c <HAL_RCC_ClockConfig+0x20c>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f3a:	f7ff f8fb 	bl	8004134 <HAL_GetTick>
 8004f3e:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d112      	bne.n	8004f6e <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f48:	e00a      	b.n	8004f60 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f4a:	f7ff f8f3 	bl	8004134 <HAL_GetTick>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d901      	bls.n	8004f60 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e077      	b.n	8005050 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f60:	4b3e      	ldr	r3, [pc, #248]	; (800505c <HAL_RCC_ClockConfig+0x20c>)
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	f003 030c 	and.w	r3, r3, #12
 8004f68:	2b04      	cmp	r3, #4
 8004f6a:	d1ee      	bne.n	8004f4a <HAL_RCC_ClockConfig+0xfa>
 8004f6c:	e027      	b.n	8004fbe <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d11d      	bne.n	8004fb2 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f76:	e00a      	b.n	8004f8e <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f78:	f7ff f8dc 	bl	8004134 <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d901      	bls.n	8004f8e <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e060      	b.n	8005050 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f8e:	4b33      	ldr	r3, [pc, #204]	; (800505c <HAL_RCC_ClockConfig+0x20c>)
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	f003 030c 	and.w	r3, r3, #12
 8004f96:	2b08      	cmp	r3, #8
 8004f98:	d1ee      	bne.n	8004f78 <HAL_RCC_ClockConfig+0x128>
 8004f9a:	e010      	b.n	8004fbe <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f9c:	f7ff f8ca 	bl	8004134 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d901      	bls.n	8004fb2 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e04e      	b.n	8005050 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004fb2:	4b2a      	ldr	r3, [pc, #168]	; (800505c <HAL_RCC_ClockConfig+0x20c>)
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f003 030c 	and.w	r3, r3, #12
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1ee      	bne.n	8004f9c <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8004fbe:	4b26      	ldr	r3, [pc, #152]	; (8005058 <HAL_RCC_ClockConfig+0x208>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0307 	and.w	r3, r3, #7
 8004fc6:	683a      	ldr	r2, [r7, #0]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d210      	bcs.n	8004fee <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fcc:	4b22      	ldr	r3, [pc, #136]	; (8005058 <HAL_RCC_ClockConfig+0x208>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f023 0207 	bic.w	r2, r3, #7
 8004fd4:	4920      	ldr	r1, [pc, #128]	; (8005058 <HAL_RCC_ClockConfig+0x208>)
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004fdc:	4b1e      	ldr	r3, [pc, #120]	; (8005058 <HAL_RCC_ClockConfig+0x208>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0307 	and.w	r3, r3, #7
 8004fe4:	683a      	ldr	r2, [r7, #0]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d001      	beq.n	8004fee <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e030      	b.n	8005050 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0304 	and.w	r3, r3, #4
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d008      	beq.n	800500c <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ffa:	4b18      	ldr	r3, [pc, #96]	; (800505c <HAL_RCC_ClockConfig+0x20c>)
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	4915      	ldr	r1, [pc, #84]	; (800505c <HAL_RCC_ClockConfig+0x20c>)
 8005008:	4313      	orrs	r3, r2
 800500a:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0308 	and.w	r3, r3, #8
 8005014:	2b00      	cmp	r3, #0
 8005016:	d009      	beq.n	800502c <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005018:	4b10      	ldr	r3, [pc, #64]	; (800505c <HAL_RCC_ClockConfig+0x20c>)
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	00db      	lsls	r3, r3, #3
 8005026:	490d      	ldr	r1, [pc, #52]	; (800505c <HAL_RCC_ClockConfig+0x20c>)
 8005028:	4313      	orrs	r3, r2
 800502a:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800502c:	f000 f81c 	bl	8005068 <HAL_RCC_GetSysClockFreq>
 8005030:	4602      	mov	r2, r0
 8005032:	4b0a      	ldr	r3, [pc, #40]	; (800505c <HAL_RCC_ClockConfig+0x20c>)
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	091b      	lsrs	r3, r3, #4
 8005038:	f003 030f 	and.w	r3, r3, #15
 800503c:	4908      	ldr	r1, [pc, #32]	; (8005060 <HAL_RCC_ClockConfig+0x210>)
 800503e:	5ccb      	ldrb	r3, [r1, r3]
 8005040:	fa22 f303 	lsr.w	r3, r2, r3
 8005044:	4a07      	ldr	r2, [pc, #28]	; (8005064 <HAL_RCC_ClockConfig+0x214>)
 8005046:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005048:	2000      	movs	r0, #0
 800504a:	f7ff f831 	bl	80040b0 <HAL_InitTick>
  
  return HAL_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	3710      	adds	r7, #16
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	40022000 	.word	0x40022000
 800505c:	40021000 	.word	0x40021000
 8005060:	08007288 	.word	0x08007288
 8005064:	200001a0 	.word	0x200001a0

08005068 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005068:	b490      	push	{r4, r7}
 800506a:	b08a      	sub	sp, #40	; 0x28
 800506c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800506e:	4b29      	ldr	r3, [pc, #164]	; (8005114 <HAL_RCC_GetSysClockFreq+0xac>)
 8005070:	1d3c      	adds	r4, r7, #4
 8005072:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005074:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005078:	f240 2301 	movw	r3, #513	; 0x201
 800507c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800507e:	2300      	movs	r3, #0
 8005080:	61fb      	str	r3, [r7, #28]
 8005082:	2300      	movs	r3, #0
 8005084:	61bb      	str	r3, [r7, #24]
 8005086:	2300      	movs	r3, #0
 8005088:	627b      	str	r3, [r7, #36]	; 0x24
 800508a:	2300      	movs	r3, #0
 800508c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800508e:	2300      	movs	r3, #0
 8005090:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005092:	4b21      	ldr	r3, [pc, #132]	; (8005118 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	f003 030c 	and.w	r3, r3, #12
 800509e:	2b04      	cmp	r3, #4
 80050a0:	d002      	beq.n	80050a8 <HAL_RCC_GetSysClockFreq+0x40>
 80050a2:	2b08      	cmp	r3, #8
 80050a4:	d003      	beq.n	80050ae <HAL_RCC_GetSysClockFreq+0x46>
 80050a6:	e02b      	b.n	8005100 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80050a8:	4b1c      	ldr	r3, [pc, #112]	; (800511c <HAL_RCC_GetSysClockFreq+0xb4>)
 80050aa:	623b      	str	r3, [r7, #32]
      break;
 80050ac:	e02b      	b.n	8005106 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	0c9b      	lsrs	r3, r3, #18
 80050b2:	f003 030f 	and.w	r3, r3, #15
 80050b6:	3328      	adds	r3, #40	; 0x28
 80050b8:	443b      	add	r3, r7
 80050ba:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80050be:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d012      	beq.n	80050f0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80050ca:	4b13      	ldr	r3, [pc, #76]	; (8005118 <HAL_RCC_GetSysClockFreq+0xb0>)
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	0c5b      	lsrs	r3, r3, #17
 80050d0:	f003 0301 	and.w	r3, r3, #1
 80050d4:	3328      	adds	r3, #40	; 0x28
 80050d6:	443b      	add	r3, r7
 80050d8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80050dc:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	4a0e      	ldr	r2, [pc, #56]	; (800511c <HAL_RCC_GetSysClockFreq+0xb4>)
 80050e2:	fb03 f202 	mul.w	r2, r3, r2
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ec:	627b      	str	r3, [r7, #36]	; 0x24
 80050ee:	e004      	b.n	80050fa <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	4a0b      	ldr	r2, [pc, #44]	; (8005120 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050f4:	fb02 f303 	mul.w	r3, r2, r3
 80050f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80050fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fc:	623b      	str	r3, [r7, #32]
      break;
 80050fe:	e002      	b.n	8005106 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005100:	4b06      	ldr	r3, [pc, #24]	; (800511c <HAL_RCC_GetSysClockFreq+0xb4>)
 8005102:	623b      	str	r3, [r7, #32]
      break;
 8005104:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005106:	6a3b      	ldr	r3, [r7, #32]
}
 8005108:	4618      	mov	r0, r3
 800510a:	3728      	adds	r7, #40	; 0x28
 800510c:	46bd      	mov	sp, r7
 800510e:	bc90      	pop	{r4, r7}
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop
 8005114:	08006884 	.word	0x08006884
 8005118:	40021000 	.word	0x40021000
 800511c:	007a1200 	.word	0x007a1200
 8005120:	003d0900 	.word	0x003d0900

08005124 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005124:	b480      	push	{r7}
 8005126:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005128:	4b02      	ldr	r3, [pc, #8]	; (8005134 <HAL_RCC_GetHCLKFreq+0x10>)
 800512a:	681b      	ldr	r3, [r3, #0]
}
 800512c:	4618      	mov	r0, r3
 800512e:	46bd      	mov	sp, r7
 8005130:	bc80      	pop	{r7}
 8005132:	4770      	bx	lr
 8005134:	200001a0 	.word	0x200001a0

08005138 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800513c:	f7ff fff2 	bl	8005124 <HAL_RCC_GetHCLKFreq>
 8005140:	4602      	mov	r2, r0
 8005142:	4b05      	ldr	r3, [pc, #20]	; (8005158 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	0a1b      	lsrs	r3, r3, #8
 8005148:	f003 0307 	and.w	r3, r3, #7
 800514c:	4903      	ldr	r1, [pc, #12]	; (800515c <HAL_RCC_GetPCLK1Freq+0x24>)
 800514e:	5ccb      	ldrb	r3, [r1, r3]
 8005150:	fa22 f303 	lsr.w	r3, r2, r3
}    
 8005154:	4618      	mov	r0, r3
 8005156:	bd80      	pop	{r7, pc}
 8005158:	40021000 	.word	0x40021000
 800515c:	08007298 	.word	0x08007298

08005160 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005164:	f7ff ffde 	bl	8005124 <HAL_RCC_GetHCLKFreq>
 8005168:	4602      	mov	r2, r0
 800516a:	4b05      	ldr	r3, [pc, #20]	; (8005180 <HAL_RCC_GetPCLK2Freq+0x20>)
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	0adb      	lsrs	r3, r3, #11
 8005170:	f003 0307 	and.w	r3, r3, #7
 8005174:	4903      	ldr	r1, [pc, #12]	; (8005184 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005176:	5ccb      	ldrb	r3, [r1, r3]
 8005178:	fa22 f303 	lsr.w	r3, r2, r3
} 
 800517c:	4618      	mov	r0, r3
 800517e:	bd80      	pop	{r7, pc}
 8005180:	40021000 	.word	0x40021000
 8005184:	08007298 	.word	0x08007298

08005188 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005188:	b480      	push	{r7}
 800518a:	b085      	sub	sp, #20
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005190:	4b0b      	ldr	r3, [pc, #44]	; (80051c0 <RCC_Delay+0x38>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a0b      	ldr	r2, [pc, #44]	; (80051c4 <RCC_Delay+0x3c>)
 8005196:	fba2 2303 	umull	r2, r3, r2, r3
 800519a:	0a5b      	lsrs	r3, r3, #9
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	fb02 f303 	mul.w	r3, r2, r3
 80051a2:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80051a4:	bf00      	nop
}
 80051a6:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	1e5a      	subs	r2, r3, #1
 80051ac:	60fa      	str	r2, [r7, #12]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1f8      	bne.n	80051a4 <RCC_Delay+0x1c>
}
 80051b2:	bf00      	nop
 80051b4:	bf00      	nop
 80051b6:	3714      	adds	r7, #20
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bc80      	pop	{r7}
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	200001a0 	.word	0x200001a0
 80051c4:	10624dd3 	.word	0x10624dd3

080051c8 <HAL_SRAM_Init>:
  * @param  Timing: Pointer to SRAM control timing structure 
  * @param  ExtTiming: Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing, FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d101      	bne.n	80051de <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e034      	b.n	8005248 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d106      	bne.n	80051f8 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80051f2:	68f8      	ldr	r0, [r7, #12]
 80051f4:	f7fc fb20 	bl	8001838 <HAL_SRAM_MspInit>
  }
  
  /* Initialize SRAM control Interface */
  FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	3308      	adds	r3, #8
 8005200:	4619      	mov	r1, r3
 8005202:	4610      	mov	r0, r2
 8005204:	f000 fd08 	bl	8005c18 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6818      	ldr	r0, [r3, #0]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	461a      	mov	r2, r3
 8005212:	68b9      	ldr	r1, [r7, #8]
 8005214:	f000 fd80 	bl	8005d18 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6858      	ldr	r0, [r3, #4]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	689a      	ldr	r2, [r3, #8]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005224:	6879      	ldr	r1, [r7, #4]
 8005226:	f000 fdab 	bl	8005d80 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	6892      	ldr	r2, [r2, #8]
 8005232:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	6892      	ldr	r2, [r2, #8]
 800523e:	f041 0101 	orr.w	r1, r1, #1
 8005242:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3710      	adds	r7, #16
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b082      	sub	sp, #8
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d101      	bne.n	8005262 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e03f      	b.n	80052e2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005268:	b2db      	uxtb	r3, r3
 800526a:	2b00      	cmp	r3, #0
 800526c:	d106      	bne.n	800527c <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f7fe fdd2 	bl	8003e20 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2224      	movs	r2, #36	; 0x24
 8005280:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68da      	ldr	r2, [r3, #12]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005292:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 fba7 	bl	80059e8 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	691a      	ldr	r2, [r3, #16]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	695a      	ldr	r2, [r3, #20]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052b8:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68da      	ldr	r2, [r3, #12]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052c8:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2220      	movs	r2, #32
 80052d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2220      	movs	r2, #32
 80052dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3708      	adds	r7, #8
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}

080052ea <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052ea:	b580      	push	{r7, lr}
 80052ec:	b088      	sub	sp, #32
 80052ee:	af02      	add	r7, sp, #8
 80052f0:	60f8      	str	r0, [r7, #12]
 80052f2:	60b9      	str	r1, [r7, #8]
 80052f4:	603b      	str	r3, [r7, #0]
 80052f6:	4613      	mov	r3, r2
 80052f8:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80052fa:	2300      	movs	r3, #0
 80052fc:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005304:	b2db      	uxtb	r3, r3
 8005306:	2b20      	cmp	r3, #32
 8005308:	f040 8083 	bne.w	8005412 <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL) || (Size == 0U))
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d002      	beq.n	8005318 <HAL_UART_Transmit+0x2e>
 8005312:	88fb      	ldrh	r3, [r7, #6]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d101      	bne.n	800531c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e07b      	b.n	8005414 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005322:	2b01      	cmp	r3, #1
 8005324:	d101      	bne.n	800532a <HAL_UART_Transmit+0x40>
 8005326:	2302      	movs	r3, #2
 8005328:	e074      	b.n	8005414 <HAL_UART_Transmit+0x12a>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2200      	movs	r2, #0
 8005336:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2221      	movs	r2, #33	; 0x21
 800533c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005340:	f7fe fef8 	bl	8004134 <HAL_GetTick>
 8005344:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	88fa      	ldrh	r2, [r7, #6]
 800534a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	88fa      	ldrh	r2, [r7, #6]
 8005350:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8005352:	e042      	b.n	80053da <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005358:	b29b      	uxth	r3, r3
 800535a:	3b01      	subs	r3, #1
 800535c:	b29a      	uxth	r2, r3
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800536a:	d122      	bne.n	80053b2 <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	9300      	str	r3, [sp, #0]
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	2200      	movs	r2, #0
 8005374:	2180      	movs	r1, #128	; 0x80
 8005376:	68f8      	ldr	r0, [r7, #12]
 8005378:	f000 f9cd 	bl	8005716 <UART_WaitOnFlagUntilTimeout>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d001      	beq.n	8005386 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e046      	b.n	8005414 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	881b      	ldrh	r3, [r3, #0]
 800538e:	461a      	mov	r2, r3
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005398:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d103      	bne.n	80053aa <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	3302      	adds	r3, #2
 80053a6:	60bb      	str	r3, [r7, #8]
 80053a8:	e017      	b.n	80053da <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData +=1U;
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	3301      	adds	r3, #1
 80053ae:	60bb      	str	r3, [r7, #8]
 80053b0:	e013      	b.n	80053da <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	9300      	str	r3, [sp, #0]
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	2200      	movs	r2, #0
 80053ba:	2180      	movs	r1, #128	; 0x80
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	f000 f9aa 	bl	8005716 <UART_WaitOnFlagUntilTimeout>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d001      	beq.n	80053cc <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80053c8:	2303      	movs	r3, #3
 80053ca:	e023      	b.n	8005414 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	1c5a      	adds	r2, r3, #1
 80053d0:	60ba      	str	r2, [r7, #8]
 80053d2:	781a      	ldrb	r2, [r3, #0]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053de:	b29b      	uxth	r3, r3
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d1b7      	bne.n	8005354 <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	9300      	str	r3, [sp, #0]
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	2200      	movs	r2, #0
 80053ec:	2140      	movs	r1, #64	; 0x40
 80053ee:	68f8      	ldr	r0, [r7, #12]
 80053f0:	f000 f991 	bl	8005716 <UART_WaitOnFlagUntilTimeout>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d001      	beq.n	80053fe <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e00a      	b.n	8005414 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2220      	movs	r2, #32
 8005402:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800540e:	2300      	movs	r3, #0
 8005410:	e000      	b.n	8005414 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005412:	2302      	movs	r3, #2
  }
}
 8005414:	4618      	mov	r0, r3
 8005416:	3718      	adds	r7, #24
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <HAL_UART_Receive_IT>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800541c:	b480      	push	{r7}
 800541e:	b085      	sub	sp, #20
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	4613      	mov	r3, r2
 8005428:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005430:	b2db      	uxtb	r3, r3
 8005432:	2b20      	cmp	r3, #32
 8005434:	d140      	bne.n	80054b8 <HAL_UART_Receive_IT+0x9c>
  {
    if((pData == NULL) || (Size == 0U))
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d002      	beq.n	8005442 <HAL_UART_Receive_IT+0x26>
 800543c:	88fb      	ldrh	r3, [r7, #6]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d101      	bne.n	8005446 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e039      	b.n	80054ba <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800544c:	2b01      	cmp	r3, #1
 800544e:	d101      	bne.n	8005454 <HAL_UART_Receive_IT+0x38>
 8005450:	2302      	movs	r3, #2
 8005452:	e032      	b.n	80054ba <HAL_UART_Receive_IT+0x9e>
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	68ba      	ldr	r2, [r7, #8]
 8005460:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	88fa      	ldrh	r2, [r7, #6]
 8005466:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	88fa      	ldrh	r2, [r7, #6]
 800546c:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2222      	movs	r2, #34	; 0x22
 8005478:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68da      	ldr	r2, [r3, #12]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005492:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	695a      	ldr	r2, [r3, #20]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f042 0201 	orr.w	r2, r2, #1
 80054a2:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68da      	ldr	r2, [r3, #12]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f042 0220 	orr.w	r2, r2, #32
 80054b2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80054b4:	2300      	movs	r3, #0
 80054b6:	e000      	b.n	80054ba <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80054b8:	2302      	movs	r3, #2
  }
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3714      	adds	r7, #20
 80054be:	46bd      	mov	sp, r7
 80054c0:	bc80      	pop	{r7}
 80054c2:	4770      	bx	lr

080054c4 <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b088      	sub	sp, #32
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 80054e4:	2300      	movs	r3, #0
 80054e6:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 80054e8:	2300      	movs	r3, #0
 80054ea:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	f003 030f 	and.w	r3, r3, #15
 80054f2:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d10d      	bne.n	8005516 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	f003 0320 	and.w	r3, r3, #32
 8005500:	2b00      	cmp	r3, #0
 8005502:	d008      	beq.n	8005516 <HAL_UART_IRQHandler+0x52>
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	f003 0320 	and.w	r3, r3, #32
 800550a:	2b00      	cmp	r3, #0
 800550c:	d003      	beq.n	8005516 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 f9e9 	bl	80058e6 <UART_Receive_IT>
      return;
 8005514:	e0cb      	b.n	80056ae <HAL_UART_IRQHandler+0x1ea>
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	2b00      	cmp	r3, #0
 800551a:	f000 80ab 	beq.w	8005674 <HAL_UART_IRQHandler+0x1b0>
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	f003 0301 	and.w	r3, r3, #1
 8005524:	2b00      	cmp	r3, #0
 8005526:	d105      	bne.n	8005534 <HAL_UART_IRQHandler+0x70>
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800552e:	2b00      	cmp	r3, #0
 8005530:	f000 80a0 	beq.w	8005674 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	f003 0301 	and.w	r3, r3, #1
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00a      	beq.n	8005554 <HAL_UART_IRQHandler+0x90>
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005544:	2b00      	cmp	r3, #0
 8005546:	d005      	beq.n	8005554 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800554c:	f043 0201 	orr.w	r2, r3, #1
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	f003 0304 	and.w	r3, r3, #4
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00a      	beq.n	8005574 <HAL_UART_IRQHandler+0xb0>
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	f003 0301 	and.w	r3, r3, #1
 8005564:	2b00      	cmp	r3, #0
 8005566:	d005      	beq.n	8005574 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800556c:	f043 0202 	orr.w	r2, r3, #2
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	f003 0302 	and.w	r3, r3, #2
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00a      	beq.n	8005594 <HAL_UART_IRQHandler+0xd0>
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	f003 0301 	and.w	r3, r3, #1
 8005584:	2b00      	cmp	r3, #0
 8005586:	d005      	beq.n	8005594 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800558c:	f043 0204 	orr.w	r2, r3, #4
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	f003 0308 	and.w	r3, r3, #8
 800559a:	2b00      	cmp	r3, #0
 800559c:	d00a      	beq.n	80055b4 <HAL_UART_IRQHandler+0xf0>
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	f003 0301 	and.w	r3, r3, #1
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d005      	beq.n	80055b4 <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ac:	f043 0208 	orr.w	r2, r3, #8
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d077      	beq.n	80056ac <HAL_UART_IRQHandler+0x1e8>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	f003 0320 	and.w	r3, r3, #32
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d007      	beq.n	80055d6 <HAL_UART_IRQHandler+0x112>
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	f003 0320 	and.w	r3, r3, #32
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d002      	beq.n	80055d6 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f000 f988 	bl	80058e6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	695b      	ldr	r3, [r3, #20]
 80055dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	bf14      	ite	ne
 80055e4:	2301      	movne	r3, #1
 80055e6:	2300      	moveq	r3, #0
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055f0:	f003 0308 	and.w	r3, r3, #8
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d102      	bne.n	80055fe <HAL_UART_IRQHandler+0x13a>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d031      	beq.n	8005662 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 f8d3 	bl	80057aa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800560e:	2b00      	cmp	r3, #0
 8005610:	d023      	beq.n	800565a <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	695a      	ldr	r2, [r3, #20]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005620:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005626:	2b00      	cmp	r3, #0
 8005628:	d013      	beq.n	8005652 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800562e:	4a21      	ldr	r2, [pc, #132]	; (80056b4 <HAL_UART_IRQHandler+0x1f0>)
 8005630:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005636:	4618      	mov	r0, r3
 8005638:	f7fe feb4 	bl	80043a4 <HAL_DMA_Abort_IT>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d016      	beq.n	8005670 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800564c:	4610      	mov	r0, r2
 800564e:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005650:	e00e      	b.n	8005670 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 f839 	bl	80056ca <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005658:	e00a      	b.n	8005670 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 f835 	bl	80056ca <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005660:	e006      	b.n	8005670 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 f831 	bl	80056ca <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800566e:	e01d      	b.n	80056ac <HAL_UART_IRQHandler+0x1e8>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005670:	bf00      	nop
    return;
 8005672:	e01b      	b.n	80056ac <HAL_UART_IRQHandler+0x1e8>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800567a:	2b00      	cmp	r3, #0
 800567c:	d008      	beq.n	8005690 <HAL_UART_IRQHandler+0x1cc>
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005684:	2b00      	cmp	r3, #0
 8005686:	d003      	beq.n	8005690 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 f8bf 	bl	800580c <UART_Transmit_IT>
    return;
 800568e:	e00e      	b.n	80056ae <HAL_UART_IRQHandler+0x1ea>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005696:	2b00      	cmp	r3, #0
 8005698:	d009      	beq.n	80056ae <HAL_UART_IRQHandler+0x1ea>
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d004      	beq.n	80056ae <HAL_UART_IRQHandler+0x1ea>
  {
    UART_EndTransmit_IT(huart);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 f906 	bl	80058b6 <UART_EndTransmit_IT>
    return;
 80056aa:	e000      	b.n	80056ae <HAL_UART_IRQHandler+0x1ea>
    return;
 80056ac:	bf00      	nop
  }
}
 80056ae:	3720      	adds	r7, #32
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	080057e5 	.word	0x080057e5

080056b8 <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 80056c0:	bf00      	nop
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bc80      	pop	{r7}
 80056c8:	4770      	bx	lr

080056ca <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80056ca:	b480      	push	{r7}
 80056cc:	b083      	sub	sp, #12
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 80056d2:	bf00      	nop
 80056d4:	370c      	adds	r7, #12
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bc80      	pop	{r7}
 80056da:	4770      	bx	lr

080056dc <HAL_UART_GetState>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  uint32_t temp1= 0x00U, temp2 = 0x00U;
 80056e4:	2300      	movs	r3, #0
 80056e6:	60fb      	str	r3, [r7, #12]
 80056e8:	2300      	movs	r3, #0
 80056ea:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	60bb      	str	r3, [r7, #8]
  
  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	b2da      	uxtb	r2, r3
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	b2db      	uxtb	r3, r3
 8005708:	4313      	orrs	r3, r2
 800570a:	b2db      	uxtb	r3, r3
}
 800570c:	4618      	mov	r0, r3
 800570e:	3714      	adds	r7, #20
 8005710:	46bd      	mov	sp, r7
 8005712:	bc80      	pop	{r7}
 8005714:	4770      	bx	lr

08005716 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005716:	b580      	push	{r7, lr}
 8005718:	b084      	sub	sp, #16
 800571a:	af00      	add	r7, sp, #0
 800571c:	60f8      	str	r0, [r7, #12]
 800571e:	60b9      	str	r1, [r7, #8]
 8005720:	603b      	str	r3, [r7, #0]
 8005722:	4613      	mov	r3, r2
 8005724:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8005726:	e02c      	b.n	8005782 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800572e:	d028      	beq.n	8005782 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d007      	beq.n	8005746 <UART_WaitOnFlagUntilTimeout+0x30>
 8005736:	f7fe fcfd 	bl	8004134 <HAL_GetTick>
 800573a:	4602      	mov	r2, r0
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	69ba      	ldr	r2, [r7, #24]
 8005742:	429a      	cmp	r2, r3
 8005744:	d21d      	bcs.n	8005782 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68da      	ldr	r2, [r3, #12]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005754:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	695a      	ldr	r2, [r3, #20]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f022 0201 	bic.w	r2, r2, #1
 8005764:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2220      	movs	r2, #32
 800576a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2220      	movs	r2, #32
 8005772:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2200      	movs	r2, #0
 800577a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e00f      	b.n	80057a2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	4013      	ands	r3, r2
 800578c:	68ba      	ldr	r2, [r7, #8]
 800578e:	429a      	cmp	r2, r3
 8005790:	bf0c      	ite	eq
 8005792:	2301      	moveq	r3, #1
 8005794:	2300      	movne	r3, #0
 8005796:	b2db      	uxtb	r3, r3
 8005798:	461a      	mov	r2, r3
 800579a:	79fb      	ldrb	r3, [r7, #7]
 800579c:	429a      	cmp	r2, r3
 800579e:	d0c3      	beq.n	8005728 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3710      	adds	r7, #16
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}

080057aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057aa:	b480      	push	{r7}
 80057ac:	b083      	sub	sp, #12
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	68da      	ldr	r2, [r3, #12]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80057c0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	695a      	ldr	r2, [r3, #20]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f022 0201 	bic.w	r2, r2, #1
 80057d0:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2220      	movs	r2, #32
 80057d6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80057da:	bf00      	nop
 80057dc:	370c      	adds	r7, #12
 80057de:	46bd      	mov	sp, r7
 80057e0:	bc80      	pop	{r7}
 80057e2:	4770      	bx	lr

080057e4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2200      	movs	r2, #0
 80057f6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2200      	movs	r2, #0
 80057fc:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 80057fe:	68f8      	ldr	r0, [r7, #12]
 8005800:	f7ff ff63 	bl	80056ca <HAL_UART_ErrorCallback>
}
 8005804:	bf00      	nop
 8005806:	3710      	adds	r7, #16
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800580c:	b480      	push	{r7}
 800580e:	b085      	sub	sp, #20
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800581a:	b2db      	uxtb	r3, r3
 800581c:	2b21      	cmp	r3, #33	; 0x21
 800581e:	d144      	bne.n	80058aa <UART_Transmit_IT+0x9e>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005828:	d11a      	bne.n	8005860 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a1b      	ldr	r3, [r3, #32]
 800582e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	881b      	ldrh	r3, [r3, #0]
 8005834:	461a      	mov	r2, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800583e:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d105      	bne.n	8005854 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6a1b      	ldr	r3, [r3, #32]
 800584c:	1c9a      	adds	r2, r3, #2
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	621a      	str	r2, [r3, #32]
 8005852:	e00e      	b.n	8005872 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a1b      	ldr	r3, [r3, #32]
 8005858:	1c5a      	adds	r2, r3, #1
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	621a      	str	r2, [r3, #32]
 800585e:	e008      	b.n	8005872 <UART_Transmit_IT+0x66>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a1b      	ldr	r3, [r3, #32]
 8005864:	1c59      	adds	r1, r3, #1
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	6211      	str	r1, [r2, #32]
 800586a:	781a      	ldrb	r2, [r3, #0]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005876:	b29b      	uxth	r3, r3
 8005878:	3b01      	subs	r3, #1
 800587a:	b29b      	uxth	r3, r3
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	4619      	mov	r1, r3
 8005880:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005882:	2b00      	cmp	r3, #0
 8005884:	d10f      	bne.n	80058a6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	68da      	ldr	r2, [r3, #12]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005894:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	68da      	ldr	r2, [r3, #12]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058a4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80058a6:	2300      	movs	r3, #0
 80058a8:	e000      	b.n	80058ac <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80058aa:	2302      	movs	r3, #2
  }
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3714      	adds	r7, #20
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bc80      	pop	{r7}
 80058b4:	4770      	bx	lr

080058b6 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80058b6:	b580      	push	{r7, lr}
 80058b8:	b082      	sub	sp, #8
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68da      	ldr	r2, [r3, #12]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058cc:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2220      	movs	r2, #32
 80058d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f7ff feee 	bl	80056b8 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3708      	adds	r7, #8
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80058e6:	b580      	push	{r7, lr}
 80058e8:	b084      	sub	sp, #16
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	2b22      	cmp	r3, #34	; 0x22
 80058f8:	d171      	bne.n	80059de <UART_Receive_IT+0xf8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005902:	d123      	bne.n	800594c <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005908:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d10e      	bne.n	8005930 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	b29b      	uxth	r3, r3
 800591a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800591e:	b29a      	uxth	r2, r3
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005928:	1c9a      	adds	r2, r3, #2
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	629a      	str	r2, [r3, #40]	; 0x28
 800592e:	e029      	b.n	8005984 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	b29b      	uxth	r3, r3
 8005938:	b2db      	uxtb	r3, r3
 800593a:	b29a      	uxth	r2, r3
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005944:	1c5a      	adds	r2, r3, #1
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	629a      	str	r2, [r3, #40]	; 0x28
 800594a:	e01b      	b.n	8005984 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	691b      	ldr	r3, [r3, #16]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d10a      	bne.n	800596a <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	6858      	ldr	r0, [r3, #4]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800595e:	1c59      	adds	r1, r3, #1
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	6291      	str	r1, [r2, #40]	; 0x28
 8005964:	b2c2      	uxtb	r2, r0
 8005966:	701a      	strb	r2, [r3, #0]
 8005968:	e00c      	b.n	8005984 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	b2da      	uxtb	r2, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005976:	1c58      	adds	r0, r3, #1
 8005978:	6879      	ldr	r1, [r7, #4]
 800597a:	6288      	str	r0, [r1, #40]	; 0x28
 800597c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005980:	b2d2      	uxtb	r2, r2
 8005982:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005988:	b29b      	uxth	r3, r3
 800598a:	3b01      	subs	r3, #1
 800598c:	b29b      	uxth	r3, r3
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	4619      	mov	r1, r3
 8005992:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005994:	2b00      	cmp	r3, #0
 8005996:	d120      	bne.n	80059da <UART_Receive_IT+0xf4>
    {
      /* Disable the IRDA Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68da      	ldr	r2, [r3, #12]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f022 0220 	bic.w	r2, r2, #32
 80059a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68da      	ldr	r2, [r3, #12]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059b6:	60da      	str	r2, [r3, #12]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	695a      	ldr	r2, [r3, #20]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f022 0201 	bic.w	r2, r2, #1
 80059c6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2220      	movs	r2, #32
 80059cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      HAL_UART_RxCpltCallback(huart);
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f7fe fad1 	bl	8003f78 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 80059d6:	2300      	movs	r3, #0
 80059d8:	e002      	b.n	80059e0 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80059da:	2300      	movs	r3, #0
 80059dc:	e000      	b.n	80059e0 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80059de:	2302      	movs	r3, #2
  }
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3710      	adds	r7, #16
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059e8:	b5b0      	push	{r4, r5, r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80059f0:	2300      	movs	r3, #0
 80059f2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	68da      	ldr	r2, [r3, #12]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	430a      	orrs	r2, r1
 8005a08:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	689a      	ldr	r2, [r3, #8]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	431a      	orrs	r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	695b      	ldr	r3, [r3, #20]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005a2a:	f023 030c 	bic.w	r3, r3, #12
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	6812      	ldr	r2, [r2, #0]
 8005a32:	68f9      	ldr	r1, [r7, #12]
 8005a34:	430b      	orrs	r3, r1
 8005a36:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	695b      	ldr	r3, [r3, #20]
 8005a3e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	699a      	ldr	r2, [r3, #24]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	430a      	orrs	r2, r1
 8005a4c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a6f      	ldr	r2, [pc, #444]	; (8005c10 <UART_SetConfig+0x228>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d16b      	bne.n	8005b30 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005a58:	f7ff fb82 	bl	8005160 <HAL_RCC_GetPCLK2Freq>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	4613      	mov	r3, r2
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	4413      	add	r3, r2
 8005a64:	009a      	lsls	r2, r3, #2
 8005a66:	441a      	add	r2, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a72:	4a68      	ldr	r2, [pc, #416]	; (8005c14 <UART_SetConfig+0x22c>)
 8005a74:	fba2 2303 	umull	r2, r3, r2, r3
 8005a78:	095b      	lsrs	r3, r3, #5
 8005a7a:	011c      	lsls	r4, r3, #4
 8005a7c:	f7ff fb70 	bl	8005160 <HAL_RCC_GetPCLK2Freq>
 8005a80:	4602      	mov	r2, r0
 8005a82:	4613      	mov	r3, r2
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	4413      	add	r3, r2
 8005a88:	009a      	lsls	r2, r3, #2
 8005a8a:	441a      	add	r2, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	fbb2 f5f3 	udiv	r5, r2, r3
 8005a96:	f7ff fb63 	bl	8005160 <HAL_RCC_GetPCLK2Freq>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	4413      	add	r3, r2
 8005aa2:	009a      	lsls	r2, r3, #2
 8005aa4:	441a      	add	r2, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ab0:	4a58      	ldr	r2, [pc, #352]	; (8005c14 <UART_SetConfig+0x22c>)
 8005ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab6:	095b      	lsrs	r3, r3, #5
 8005ab8:	2264      	movs	r2, #100	; 0x64
 8005aba:	fb02 f303 	mul.w	r3, r2, r3
 8005abe:	1aeb      	subs	r3, r5, r3
 8005ac0:	011b      	lsls	r3, r3, #4
 8005ac2:	3332      	adds	r3, #50	; 0x32
 8005ac4:	4a53      	ldr	r2, [pc, #332]	; (8005c14 <UART_SetConfig+0x22c>)
 8005ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8005aca:	095b      	lsrs	r3, r3, #5
 8005acc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ad0:	441c      	add	r4, r3
 8005ad2:	f7ff fb45 	bl	8005160 <HAL_RCC_GetPCLK2Freq>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	4613      	mov	r3, r2
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	4413      	add	r3, r2
 8005ade:	009a      	lsls	r2, r3, #2
 8005ae0:	441a      	add	r2, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	fbb2 f5f3 	udiv	r5, r2, r3
 8005aec:	f7ff fb38 	bl	8005160 <HAL_RCC_GetPCLK2Freq>
 8005af0:	4602      	mov	r2, r0
 8005af2:	4613      	mov	r3, r2
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	4413      	add	r3, r2
 8005af8:	009a      	lsls	r2, r3, #2
 8005afa:	441a      	add	r2, r3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b06:	4a43      	ldr	r2, [pc, #268]	; (8005c14 <UART_SetConfig+0x22c>)
 8005b08:	fba2 2303 	umull	r2, r3, r2, r3
 8005b0c:	095b      	lsrs	r3, r3, #5
 8005b0e:	2264      	movs	r2, #100	; 0x64
 8005b10:	fb02 f303 	mul.w	r3, r2, r3
 8005b14:	1aeb      	subs	r3, r5, r3
 8005b16:	011b      	lsls	r3, r3, #4
 8005b18:	3332      	adds	r3, #50	; 0x32
 8005b1a:	4a3e      	ldr	r2, [pc, #248]	; (8005c14 <UART_SetConfig+0x22c>)
 8005b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b20:	095b      	lsrs	r3, r3, #5
 8005b22:	f003 020f 	and.w	r2, r3, #15
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4422      	add	r2, r4
 8005b2c:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8005b2e:	e06a      	b.n	8005c06 <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005b30:	f7ff fb02 	bl	8005138 <HAL_RCC_GetPCLK1Freq>
 8005b34:	4602      	mov	r2, r0
 8005b36:	4613      	mov	r3, r2
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	4413      	add	r3, r2
 8005b3c:	009a      	lsls	r2, r3, #2
 8005b3e:	441a      	add	r2, r3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b4a:	4a32      	ldr	r2, [pc, #200]	; (8005c14 <UART_SetConfig+0x22c>)
 8005b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b50:	095b      	lsrs	r3, r3, #5
 8005b52:	011c      	lsls	r4, r3, #4
 8005b54:	f7ff faf0 	bl	8005138 <HAL_RCC_GetPCLK1Freq>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	4413      	add	r3, r2
 8005b60:	009a      	lsls	r2, r3, #2
 8005b62:	441a      	add	r2, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	fbb2 f5f3 	udiv	r5, r2, r3
 8005b6e:	f7ff fae3 	bl	8005138 <HAL_RCC_GetPCLK1Freq>
 8005b72:	4602      	mov	r2, r0
 8005b74:	4613      	mov	r3, r2
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	4413      	add	r3, r2
 8005b7a:	009a      	lsls	r2, r3, #2
 8005b7c:	441a      	add	r2, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b88:	4a22      	ldr	r2, [pc, #136]	; (8005c14 <UART_SetConfig+0x22c>)
 8005b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b8e:	095b      	lsrs	r3, r3, #5
 8005b90:	2264      	movs	r2, #100	; 0x64
 8005b92:	fb02 f303 	mul.w	r3, r2, r3
 8005b96:	1aeb      	subs	r3, r5, r3
 8005b98:	011b      	lsls	r3, r3, #4
 8005b9a:	3332      	adds	r3, #50	; 0x32
 8005b9c:	4a1d      	ldr	r2, [pc, #116]	; (8005c14 <UART_SetConfig+0x22c>)
 8005b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba2:	095b      	lsrs	r3, r3, #5
 8005ba4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ba8:	441c      	add	r4, r3
 8005baa:	f7ff fac5 	bl	8005138 <HAL_RCC_GetPCLK1Freq>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	4613      	mov	r3, r2
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	4413      	add	r3, r2
 8005bb6:	009a      	lsls	r2, r3, #2
 8005bb8:	441a      	add	r2, r3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	fbb2 f5f3 	udiv	r5, r2, r3
 8005bc4:	f7ff fab8 	bl	8005138 <HAL_RCC_GetPCLK1Freq>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	4613      	mov	r3, r2
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	4413      	add	r3, r2
 8005bd0:	009a      	lsls	r2, r3, #2
 8005bd2:	441a      	add	r2, r3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bde:	4a0d      	ldr	r2, [pc, #52]	; (8005c14 <UART_SetConfig+0x22c>)
 8005be0:	fba2 2303 	umull	r2, r3, r2, r3
 8005be4:	095b      	lsrs	r3, r3, #5
 8005be6:	2264      	movs	r2, #100	; 0x64
 8005be8:	fb02 f303 	mul.w	r3, r2, r3
 8005bec:	1aeb      	subs	r3, r5, r3
 8005bee:	011b      	lsls	r3, r3, #4
 8005bf0:	3332      	adds	r3, #50	; 0x32
 8005bf2:	4a08      	ldr	r2, [pc, #32]	; (8005c14 <UART_SetConfig+0x22c>)
 8005bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf8:	095b      	lsrs	r3, r3, #5
 8005bfa:	f003 020f 	and.w	r2, r3, #15
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4422      	add	r2, r4
 8005c04:	609a      	str	r2, [r3, #8]
}
 8005c06:	bf00      	nop
 8005c08:	3710      	adds	r7, #16
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bdb0      	pop	{r4, r5, r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	40013800 	.word	0x40013800
 8005c14:	51eb851f 	.word	0x51eb851f

08005c18 <FSMC_NORSRAM_Init>:
  * @param  Device: Pointer to NORSRAM device instance
  * @param  Init: Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef *Init)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_EXTENDED_MODE(Init->ExtendedMode));
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c2c:	683a      	ldr	r2, [r7, #0]
 8005c2e:	6812      	ldr	r2, [r2, #0]
 8005c30:	f023 0101 	bic.w	r1, r3, #1
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	2b08      	cmp	r3, #8
 8005c40:	d132      	bne.n	8005ca8 <FSMC_NORSRAM_Init+0x90>
  {
    MODIFY_REG(Device->BTCR[Init->NSBank], BCR_CLEAR_MASK, (uint32_t)(FSMC_NORSRAM_FLASH_ACCESS_ENABLE
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005c4c:	4b31      	ldr	r3, [pc, #196]	; (8005d14 <FSMC_NORSRAM_Init+0xfc>)
 8005c4e:	4013      	ands	r3, r2
 8005c50:	683a      	ldr	r2, [r7, #0]
 8005c52:	6851      	ldr	r1, [r2, #4]
 8005c54:	683a      	ldr	r2, [r7, #0]
 8005c56:	6892      	ldr	r2, [r2, #8]
 8005c58:	4311      	orrs	r1, r2
 8005c5a:	683a      	ldr	r2, [r7, #0]
 8005c5c:	68d2      	ldr	r2, [r2, #12]
 8005c5e:	4311      	orrs	r1, r2
 8005c60:	683a      	ldr	r2, [r7, #0]
 8005c62:	6912      	ldr	r2, [r2, #16]
 8005c64:	4311      	orrs	r1, r2
 8005c66:	683a      	ldr	r2, [r7, #0]
 8005c68:	6952      	ldr	r2, [r2, #20]
 8005c6a:	4311      	orrs	r1, r2
 8005c6c:	683a      	ldr	r2, [r7, #0]
 8005c6e:	6992      	ldr	r2, [r2, #24]
 8005c70:	4311      	orrs	r1, r2
 8005c72:	683a      	ldr	r2, [r7, #0]
 8005c74:	69d2      	ldr	r2, [r2, #28]
 8005c76:	4311      	orrs	r1, r2
 8005c78:	683a      	ldr	r2, [r7, #0]
 8005c7a:	6a12      	ldr	r2, [r2, #32]
 8005c7c:	4311      	orrs	r1, r2
 8005c7e:	683a      	ldr	r2, [r7, #0]
 8005c80:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c82:	4311      	orrs	r1, r2
 8005c84:	683a      	ldr	r2, [r7, #0]
 8005c86:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005c88:	4311      	orrs	r1, r2
 8005c8a:	683a      	ldr	r2, [r7, #0]
 8005c8c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005c8e:	4311      	orrs	r1, r2
 8005c90:	683a      	ldr	r2, [r7, #0]
 8005c92:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005c94:	430a      	orrs	r2, r1
 8005c96:	4313      	orrs	r3, r2
 8005c98:	683a      	ldr	r2, [r7, #0]
 8005c9a:	6812      	ldr	r2, [r2, #0]
 8005c9c:	f043 0140 	orr.w	r1, r3, #64	; 0x40
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005ca6:	e02f      	b.n	8005d08 <FSMC_NORSRAM_Init+0xf0>
                                                                     )
              );
  }
  else
  {
    MODIFY_REG(Device->BTCR[Init->NSBank], BCR_CLEAR_MASK, (uint32_t)(FSMC_NORSRAM_FLASH_ACCESS_DISABLE
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005cb2:	4b18      	ldr	r3, [pc, #96]	; (8005d14 <FSMC_NORSRAM_Init+0xfc>)
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	683a      	ldr	r2, [r7, #0]
 8005cb8:	6851      	ldr	r1, [r2, #4]
 8005cba:	683a      	ldr	r2, [r7, #0]
 8005cbc:	6892      	ldr	r2, [r2, #8]
 8005cbe:	4311      	orrs	r1, r2
 8005cc0:	683a      	ldr	r2, [r7, #0]
 8005cc2:	68d2      	ldr	r2, [r2, #12]
 8005cc4:	4311      	orrs	r1, r2
 8005cc6:	683a      	ldr	r2, [r7, #0]
 8005cc8:	6912      	ldr	r2, [r2, #16]
 8005cca:	4311      	orrs	r1, r2
 8005ccc:	683a      	ldr	r2, [r7, #0]
 8005cce:	6952      	ldr	r2, [r2, #20]
 8005cd0:	4311      	orrs	r1, r2
 8005cd2:	683a      	ldr	r2, [r7, #0]
 8005cd4:	6992      	ldr	r2, [r2, #24]
 8005cd6:	4311      	orrs	r1, r2
 8005cd8:	683a      	ldr	r2, [r7, #0]
 8005cda:	69d2      	ldr	r2, [r2, #28]
 8005cdc:	4311      	orrs	r1, r2
 8005cde:	683a      	ldr	r2, [r7, #0]
 8005ce0:	6a12      	ldr	r2, [r2, #32]
 8005ce2:	4311      	orrs	r1, r2
 8005ce4:	683a      	ldr	r2, [r7, #0]
 8005ce6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005ce8:	4311      	orrs	r1, r2
 8005cea:	683a      	ldr	r2, [r7, #0]
 8005cec:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005cee:	4311      	orrs	r1, r2
 8005cf0:	683a      	ldr	r2, [r7, #0]
 8005cf2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005cf4:	4311      	orrs	r1, r2
 8005cf6:	683a      	ldr	r2, [r7, #0]
 8005cf8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005cfa:	4311      	orrs	r1, r2
 8005cfc:	683a      	ldr	r2, [r7, #0]
 8005cfe:	6812      	ldr	r2, [r2, #0]
 8005d00:	4319      	orrs	r1, r3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
               | Init->WriteBurst
                                                                     )
              );
  }

  return HAL_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	370c      	adds	r7, #12
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bc80      	pop	{r7}
 8005d12:	4770      	bx	lr
 8005d14:	fff70081 	.word	0xfff70081

08005d18 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing: Pointer to NORSRAM Timing structure
  * @param  Bank: NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b085      	sub	sp, #20
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	60b9      	str	r1, [r7, #8]
 8005d22:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U],                                                        \
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	1c5a      	adds	r2, r3, #1
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d2e:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	011b      	lsls	r3, r3, #4
 8005d3c:	431a      	orrs	r2, r3
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	021b      	lsls	r3, r3, #8
 8005d44:	431a      	orrs	r2, r3
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	041b      	lsls	r3, r3, #16
 8005d4c:	431a      	orrs	r2, r3
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	3b01      	subs	r3, #1
 8005d54:	051b      	lsls	r3, r3, #20
 8005d56:	431a      	orrs	r2, r3
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	695b      	ldr	r3, [r3, #20]
 8005d5c:	3b02      	subs	r3, #2
 8005d5e:	061b      	lsls	r3, r3, #24
 8005d60:	431a      	orrs	r2, r3
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	699b      	ldr	r3, [r3, #24]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	3201      	adds	r2, #1
 8005d6c:	4319      	orrs	r1, r3
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                        ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos)       | \
                        (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)        | \
                        (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)        | \
                        (Timing->AccessMode)));

  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3714      	adds	r7, #20
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bc80      	pop	{r7}
 8005d7e:	4770      	bx	lr

08005d80 <FSMC_NORSRAM_Extended_Timing_Init>:
  *            @arg FSMC_EXTENDED_MODE_DISABLE
  *            @arg FSMC_EXTENDED_MODE_ENABLE
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b085      	sub	sp, #20
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	607a      	str	r2, [r7, #4]
 8005d8c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d94:	d11d      	bne.n	8005dd2 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(STM32F101xE) || defined(STM32F103xE) || defined(STM32F101xG) || defined(STM32F103xG)
    MODIFY_REG(Device->BWTR[Bank],                                                      \
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005d9e:	4b13      	ldr	r3, [pc, #76]	; (8005dec <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8005da0:	4013      	ands	r3, r2
 8005da2:	68ba      	ldr	r2, [r7, #8]
 8005da4:	6811      	ldr	r1, [r2, #0]
 8005da6:	68ba      	ldr	r2, [r7, #8]
 8005da8:	6852      	ldr	r2, [r2, #4]
 8005daa:	0112      	lsls	r2, r2, #4
 8005dac:	4311      	orrs	r1, r2
 8005dae:	68ba      	ldr	r2, [r7, #8]
 8005db0:	6892      	ldr	r2, [r2, #8]
 8005db2:	0212      	lsls	r2, r2, #8
 8005db4:	4311      	orrs	r1, r2
 8005db6:	68ba      	ldr	r2, [r7, #8]
 8005db8:	6992      	ldr	r2, [r2, #24]
 8005dba:	4311      	orrs	r1, r2
 8005dbc:	68ba      	ldr	r2, [r7, #8]
 8005dbe:	68d2      	ldr	r2, [r2, #12]
 8005dc0:	0412      	lsls	r2, r2, #16
 8005dc2:	430a      	orrs	r2, r1
 8005dc4:	ea43 0102 	orr.w	r1, r3, r2
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005dd0:	e005      	b.n	8005dde <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                          (((Timing->DataLatency) - 2U)  << FSMC_BWTRx_DATLAT_Pos)));
#endif /* STM32F101xE || STM32F103xE || STM32F101xG || STM32F103xG */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8005dda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3714      	adds	r7, #20
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bc80      	pop	{r7}
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	cff00000 	.word	0xcff00000

08005df0 <__errno>:
 8005df0:	4b01      	ldr	r3, [pc, #4]	; (8005df8 <__errno+0x8>)
 8005df2:	6818      	ldr	r0, [r3, #0]
 8005df4:	4770      	bx	lr
 8005df6:	bf00      	nop
 8005df8:	200001ac 	.word	0x200001ac

08005dfc <__libc_init_array>:
 8005dfc:	b570      	push	{r4, r5, r6, lr}
 8005dfe:	2600      	movs	r6, #0
 8005e00:	4d0c      	ldr	r5, [pc, #48]	; (8005e34 <__libc_init_array+0x38>)
 8005e02:	4c0d      	ldr	r4, [pc, #52]	; (8005e38 <__libc_init_array+0x3c>)
 8005e04:	1b64      	subs	r4, r4, r5
 8005e06:	10a4      	asrs	r4, r4, #2
 8005e08:	42a6      	cmp	r6, r4
 8005e0a:	d109      	bne.n	8005e20 <__libc_init_array+0x24>
 8005e0c:	f000 fd18 	bl	8006840 <_init>
 8005e10:	2600      	movs	r6, #0
 8005e12:	4d0a      	ldr	r5, [pc, #40]	; (8005e3c <__libc_init_array+0x40>)
 8005e14:	4c0a      	ldr	r4, [pc, #40]	; (8005e40 <__libc_init_array+0x44>)
 8005e16:	1b64      	subs	r4, r4, r5
 8005e18:	10a4      	asrs	r4, r4, #2
 8005e1a:	42a6      	cmp	r6, r4
 8005e1c:	d105      	bne.n	8005e2a <__libc_init_array+0x2e>
 8005e1e:	bd70      	pop	{r4, r5, r6, pc}
 8005e20:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e24:	4798      	blx	r3
 8005e26:	3601      	adds	r6, #1
 8005e28:	e7ee      	b.n	8005e08 <__libc_init_array+0xc>
 8005e2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e2e:	4798      	blx	r3
 8005e30:	3601      	adds	r6, #1
 8005e32:	e7f2      	b.n	8005e1a <__libc_init_array+0x1e>
 8005e34:	08007304 	.word	0x08007304
 8005e38:	08007304 	.word	0x08007304
 8005e3c:	08007304 	.word	0x08007304
 8005e40:	08007308 	.word	0x08007308

08005e44 <memset>:
 8005e44:	4603      	mov	r3, r0
 8005e46:	4402      	add	r2, r0
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d100      	bne.n	8005e4e <memset+0xa>
 8005e4c:	4770      	bx	lr
 8005e4e:	f803 1b01 	strb.w	r1, [r3], #1
 8005e52:	e7f9      	b.n	8005e48 <memset+0x4>

08005e54 <_puts_r>:
 8005e54:	b570      	push	{r4, r5, r6, lr}
 8005e56:	460e      	mov	r6, r1
 8005e58:	4605      	mov	r5, r0
 8005e5a:	b118      	cbz	r0, 8005e64 <_puts_r+0x10>
 8005e5c:	6983      	ldr	r3, [r0, #24]
 8005e5e:	b90b      	cbnz	r3, 8005e64 <_puts_r+0x10>
 8005e60:	f000 fa44 	bl	80062ec <__sinit>
 8005e64:	69ab      	ldr	r3, [r5, #24]
 8005e66:	68ac      	ldr	r4, [r5, #8]
 8005e68:	b913      	cbnz	r3, 8005e70 <_puts_r+0x1c>
 8005e6a:	4628      	mov	r0, r5
 8005e6c:	f000 fa3e 	bl	80062ec <__sinit>
 8005e70:	4b2c      	ldr	r3, [pc, #176]	; (8005f24 <_puts_r+0xd0>)
 8005e72:	429c      	cmp	r4, r3
 8005e74:	d120      	bne.n	8005eb8 <_puts_r+0x64>
 8005e76:	686c      	ldr	r4, [r5, #4]
 8005e78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e7a:	07db      	lsls	r3, r3, #31
 8005e7c:	d405      	bmi.n	8005e8a <_puts_r+0x36>
 8005e7e:	89a3      	ldrh	r3, [r4, #12]
 8005e80:	0598      	lsls	r0, r3, #22
 8005e82:	d402      	bmi.n	8005e8a <_puts_r+0x36>
 8005e84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e86:	f000 facf 	bl	8006428 <__retarget_lock_acquire_recursive>
 8005e8a:	89a3      	ldrh	r3, [r4, #12]
 8005e8c:	0719      	lsls	r1, r3, #28
 8005e8e:	d51d      	bpl.n	8005ecc <_puts_r+0x78>
 8005e90:	6923      	ldr	r3, [r4, #16]
 8005e92:	b1db      	cbz	r3, 8005ecc <_puts_r+0x78>
 8005e94:	3e01      	subs	r6, #1
 8005e96:	68a3      	ldr	r3, [r4, #8]
 8005e98:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005e9c:	3b01      	subs	r3, #1
 8005e9e:	60a3      	str	r3, [r4, #8]
 8005ea0:	bb39      	cbnz	r1, 8005ef2 <_puts_r+0x9e>
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	da38      	bge.n	8005f18 <_puts_r+0xc4>
 8005ea6:	4622      	mov	r2, r4
 8005ea8:	210a      	movs	r1, #10
 8005eaa:	4628      	mov	r0, r5
 8005eac:	f000 f848 	bl	8005f40 <__swbuf_r>
 8005eb0:	3001      	adds	r0, #1
 8005eb2:	d011      	beq.n	8005ed8 <_puts_r+0x84>
 8005eb4:	250a      	movs	r5, #10
 8005eb6:	e011      	b.n	8005edc <_puts_r+0x88>
 8005eb8:	4b1b      	ldr	r3, [pc, #108]	; (8005f28 <_puts_r+0xd4>)
 8005eba:	429c      	cmp	r4, r3
 8005ebc:	d101      	bne.n	8005ec2 <_puts_r+0x6e>
 8005ebe:	68ac      	ldr	r4, [r5, #8]
 8005ec0:	e7da      	b.n	8005e78 <_puts_r+0x24>
 8005ec2:	4b1a      	ldr	r3, [pc, #104]	; (8005f2c <_puts_r+0xd8>)
 8005ec4:	429c      	cmp	r4, r3
 8005ec6:	bf08      	it	eq
 8005ec8:	68ec      	ldreq	r4, [r5, #12]
 8005eca:	e7d5      	b.n	8005e78 <_puts_r+0x24>
 8005ecc:	4621      	mov	r1, r4
 8005ece:	4628      	mov	r0, r5
 8005ed0:	f000 f888 	bl	8005fe4 <__swsetup_r>
 8005ed4:	2800      	cmp	r0, #0
 8005ed6:	d0dd      	beq.n	8005e94 <_puts_r+0x40>
 8005ed8:	f04f 35ff 	mov.w	r5, #4294967295
 8005edc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ede:	07da      	lsls	r2, r3, #31
 8005ee0:	d405      	bmi.n	8005eee <_puts_r+0x9a>
 8005ee2:	89a3      	ldrh	r3, [r4, #12]
 8005ee4:	059b      	lsls	r3, r3, #22
 8005ee6:	d402      	bmi.n	8005eee <_puts_r+0x9a>
 8005ee8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005eea:	f000 fa9e 	bl	800642a <__retarget_lock_release_recursive>
 8005eee:	4628      	mov	r0, r5
 8005ef0:	bd70      	pop	{r4, r5, r6, pc}
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	da04      	bge.n	8005f00 <_puts_r+0xac>
 8005ef6:	69a2      	ldr	r2, [r4, #24]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	dc06      	bgt.n	8005f0a <_puts_r+0xb6>
 8005efc:	290a      	cmp	r1, #10
 8005efe:	d004      	beq.n	8005f0a <_puts_r+0xb6>
 8005f00:	6823      	ldr	r3, [r4, #0]
 8005f02:	1c5a      	adds	r2, r3, #1
 8005f04:	6022      	str	r2, [r4, #0]
 8005f06:	7019      	strb	r1, [r3, #0]
 8005f08:	e7c5      	b.n	8005e96 <_puts_r+0x42>
 8005f0a:	4622      	mov	r2, r4
 8005f0c:	4628      	mov	r0, r5
 8005f0e:	f000 f817 	bl	8005f40 <__swbuf_r>
 8005f12:	3001      	adds	r0, #1
 8005f14:	d1bf      	bne.n	8005e96 <_puts_r+0x42>
 8005f16:	e7df      	b.n	8005ed8 <_puts_r+0x84>
 8005f18:	250a      	movs	r5, #10
 8005f1a:	6823      	ldr	r3, [r4, #0]
 8005f1c:	1c5a      	adds	r2, r3, #1
 8005f1e:	6022      	str	r2, [r4, #0]
 8005f20:	701d      	strb	r5, [r3, #0]
 8005f22:	e7db      	b.n	8005edc <_puts_r+0x88>
 8005f24:	080072c4 	.word	0x080072c4
 8005f28:	080072e4 	.word	0x080072e4
 8005f2c:	080072a4 	.word	0x080072a4

08005f30 <puts>:
 8005f30:	4b02      	ldr	r3, [pc, #8]	; (8005f3c <puts+0xc>)
 8005f32:	4601      	mov	r1, r0
 8005f34:	6818      	ldr	r0, [r3, #0]
 8005f36:	f7ff bf8d 	b.w	8005e54 <_puts_r>
 8005f3a:	bf00      	nop
 8005f3c:	200001ac 	.word	0x200001ac

08005f40 <__swbuf_r>:
 8005f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f42:	460e      	mov	r6, r1
 8005f44:	4614      	mov	r4, r2
 8005f46:	4605      	mov	r5, r0
 8005f48:	b118      	cbz	r0, 8005f52 <__swbuf_r+0x12>
 8005f4a:	6983      	ldr	r3, [r0, #24]
 8005f4c:	b90b      	cbnz	r3, 8005f52 <__swbuf_r+0x12>
 8005f4e:	f000 f9cd 	bl	80062ec <__sinit>
 8005f52:	4b21      	ldr	r3, [pc, #132]	; (8005fd8 <__swbuf_r+0x98>)
 8005f54:	429c      	cmp	r4, r3
 8005f56:	d12b      	bne.n	8005fb0 <__swbuf_r+0x70>
 8005f58:	686c      	ldr	r4, [r5, #4]
 8005f5a:	69a3      	ldr	r3, [r4, #24]
 8005f5c:	60a3      	str	r3, [r4, #8]
 8005f5e:	89a3      	ldrh	r3, [r4, #12]
 8005f60:	071a      	lsls	r2, r3, #28
 8005f62:	d52f      	bpl.n	8005fc4 <__swbuf_r+0x84>
 8005f64:	6923      	ldr	r3, [r4, #16]
 8005f66:	b36b      	cbz	r3, 8005fc4 <__swbuf_r+0x84>
 8005f68:	6923      	ldr	r3, [r4, #16]
 8005f6a:	6820      	ldr	r0, [r4, #0]
 8005f6c:	b2f6      	uxtb	r6, r6
 8005f6e:	1ac0      	subs	r0, r0, r3
 8005f70:	6963      	ldr	r3, [r4, #20]
 8005f72:	4637      	mov	r7, r6
 8005f74:	4283      	cmp	r3, r0
 8005f76:	dc04      	bgt.n	8005f82 <__swbuf_r+0x42>
 8005f78:	4621      	mov	r1, r4
 8005f7a:	4628      	mov	r0, r5
 8005f7c:	f000 f922 	bl	80061c4 <_fflush_r>
 8005f80:	bb30      	cbnz	r0, 8005fd0 <__swbuf_r+0x90>
 8005f82:	68a3      	ldr	r3, [r4, #8]
 8005f84:	3001      	adds	r0, #1
 8005f86:	3b01      	subs	r3, #1
 8005f88:	60a3      	str	r3, [r4, #8]
 8005f8a:	6823      	ldr	r3, [r4, #0]
 8005f8c:	1c5a      	adds	r2, r3, #1
 8005f8e:	6022      	str	r2, [r4, #0]
 8005f90:	701e      	strb	r6, [r3, #0]
 8005f92:	6963      	ldr	r3, [r4, #20]
 8005f94:	4283      	cmp	r3, r0
 8005f96:	d004      	beq.n	8005fa2 <__swbuf_r+0x62>
 8005f98:	89a3      	ldrh	r3, [r4, #12]
 8005f9a:	07db      	lsls	r3, r3, #31
 8005f9c:	d506      	bpl.n	8005fac <__swbuf_r+0x6c>
 8005f9e:	2e0a      	cmp	r6, #10
 8005fa0:	d104      	bne.n	8005fac <__swbuf_r+0x6c>
 8005fa2:	4621      	mov	r1, r4
 8005fa4:	4628      	mov	r0, r5
 8005fa6:	f000 f90d 	bl	80061c4 <_fflush_r>
 8005faa:	b988      	cbnz	r0, 8005fd0 <__swbuf_r+0x90>
 8005fac:	4638      	mov	r0, r7
 8005fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fb0:	4b0a      	ldr	r3, [pc, #40]	; (8005fdc <__swbuf_r+0x9c>)
 8005fb2:	429c      	cmp	r4, r3
 8005fb4:	d101      	bne.n	8005fba <__swbuf_r+0x7a>
 8005fb6:	68ac      	ldr	r4, [r5, #8]
 8005fb8:	e7cf      	b.n	8005f5a <__swbuf_r+0x1a>
 8005fba:	4b09      	ldr	r3, [pc, #36]	; (8005fe0 <__swbuf_r+0xa0>)
 8005fbc:	429c      	cmp	r4, r3
 8005fbe:	bf08      	it	eq
 8005fc0:	68ec      	ldreq	r4, [r5, #12]
 8005fc2:	e7ca      	b.n	8005f5a <__swbuf_r+0x1a>
 8005fc4:	4621      	mov	r1, r4
 8005fc6:	4628      	mov	r0, r5
 8005fc8:	f000 f80c 	bl	8005fe4 <__swsetup_r>
 8005fcc:	2800      	cmp	r0, #0
 8005fce:	d0cb      	beq.n	8005f68 <__swbuf_r+0x28>
 8005fd0:	f04f 37ff 	mov.w	r7, #4294967295
 8005fd4:	e7ea      	b.n	8005fac <__swbuf_r+0x6c>
 8005fd6:	bf00      	nop
 8005fd8:	080072c4 	.word	0x080072c4
 8005fdc:	080072e4 	.word	0x080072e4
 8005fe0:	080072a4 	.word	0x080072a4

08005fe4 <__swsetup_r>:
 8005fe4:	4b32      	ldr	r3, [pc, #200]	; (80060b0 <__swsetup_r+0xcc>)
 8005fe6:	b570      	push	{r4, r5, r6, lr}
 8005fe8:	681d      	ldr	r5, [r3, #0]
 8005fea:	4606      	mov	r6, r0
 8005fec:	460c      	mov	r4, r1
 8005fee:	b125      	cbz	r5, 8005ffa <__swsetup_r+0x16>
 8005ff0:	69ab      	ldr	r3, [r5, #24]
 8005ff2:	b913      	cbnz	r3, 8005ffa <__swsetup_r+0x16>
 8005ff4:	4628      	mov	r0, r5
 8005ff6:	f000 f979 	bl	80062ec <__sinit>
 8005ffa:	4b2e      	ldr	r3, [pc, #184]	; (80060b4 <__swsetup_r+0xd0>)
 8005ffc:	429c      	cmp	r4, r3
 8005ffe:	d10f      	bne.n	8006020 <__swsetup_r+0x3c>
 8006000:	686c      	ldr	r4, [r5, #4]
 8006002:	89a3      	ldrh	r3, [r4, #12]
 8006004:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006008:	0719      	lsls	r1, r3, #28
 800600a:	d42c      	bmi.n	8006066 <__swsetup_r+0x82>
 800600c:	06dd      	lsls	r5, r3, #27
 800600e:	d411      	bmi.n	8006034 <__swsetup_r+0x50>
 8006010:	2309      	movs	r3, #9
 8006012:	6033      	str	r3, [r6, #0]
 8006014:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006018:	f04f 30ff 	mov.w	r0, #4294967295
 800601c:	81a3      	strh	r3, [r4, #12]
 800601e:	e03e      	b.n	800609e <__swsetup_r+0xba>
 8006020:	4b25      	ldr	r3, [pc, #148]	; (80060b8 <__swsetup_r+0xd4>)
 8006022:	429c      	cmp	r4, r3
 8006024:	d101      	bne.n	800602a <__swsetup_r+0x46>
 8006026:	68ac      	ldr	r4, [r5, #8]
 8006028:	e7eb      	b.n	8006002 <__swsetup_r+0x1e>
 800602a:	4b24      	ldr	r3, [pc, #144]	; (80060bc <__swsetup_r+0xd8>)
 800602c:	429c      	cmp	r4, r3
 800602e:	bf08      	it	eq
 8006030:	68ec      	ldreq	r4, [r5, #12]
 8006032:	e7e6      	b.n	8006002 <__swsetup_r+0x1e>
 8006034:	0758      	lsls	r0, r3, #29
 8006036:	d512      	bpl.n	800605e <__swsetup_r+0x7a>
 8006038:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800603a:	b141      	cbz	r1, 800604e <__swsetup_r+0x6a>
 800603c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006040:	4299      	cmp	r1, r3
 8006042:	d002      	beq.n	800604a <__swsetup_r+0x66>
 8006044:	4630      	mov	r0, r6
 8006046:	f000 fa57 	bl	80064f8 <_free_r>
 800604a:	2300      	movs	r3, #0
 800604c:	6363      	str	r3, [r4, #52]	; 0x34
 800604e:	89a3      	ldrh	r3, [r4, #12]
 8006050:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006054:	81a3      	strh	r3, [r4, #12]
 8006056:	2300      	movs	r3, #0
 8006058:	6063      	str	r3, [r4, #4]
 800605a:	6923      	ldr	r3, [r4, #16]
 800605c:	6023      	str	r3, [r4, #0]
 800605e:	89a3      	ldrh	r3, [r4, #12]
 8006060:	f043 0308 	orr.w	r3, r3, #8
 8006064:	81a3      	strh	r3, [r4, #12]
 8006066:	6923      	ldr	r3, [r4, #16]
 8006068:	b94b      	cbnz	r3, 800607e <__swsetup_r+0x9a>
 800606a:	89a3      	ldrh	r3, [r4, #12]
 800606c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006070:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006074:	d003      	beq.n	800607e <__swsetup_r+0x9a>
 8006076:	4621      	mov	r1, r4
 8006078:	4630      	mov	r0, r6
 800607a:	f000 f9fd 	bl	8006478 <__smakebuf_r>
 800607e:	89a0      	ldrh	r0, [r4, #12]
 8006080:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006084:	f010 0301 	ands.w	r3, r0, #1
 8006088:	d00a      	beq.n	80060a0 <__swsetup_r+0xbc>
 800608a:	2300      	movs	r3, #0
 800608c:	60a3      	str	r3, [r4, #8]
 800608e:	6963      	ldr	r3, [r4, #20]
 8006090:	425b      	negs	r3, r3
 8006092:	61a3      	str	r3, [r4, #24]
 8006094:	6923      	ldr	r3, [r4, #16]
 8006096:	b943      	cbnz	r3, 80060aa <__swsetup_r+0xc6>
 8006098:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800609c:	d1ba      	bne.n	8006014 <__swsetup_r+0x30>
 800609e:	bd70      	pop	{r4, r5, r6, pc}
 80060a0:	0781      	lsls	r1, r0, #30
 80060a2:	bf58      	it	pl
 80060a4:	6963      	ldrpl	r3, [r4, #20]
 80060a6:	60a3      	str	r3, [r4, #8]
 80060a8:	e7f4      	b.n	8006094 <__swsetup_r+0xb0>
 80060aa:	2000      	movs	r0, #0
 80060ac:	e7f7      	b.n	800609e <__swsetup_r+0xba>
 80060ae:	bf00      	nop
 80060b0:	200001ac 	.word	0x200001ac
 80060b4:	080072c4 	.word	0x080072c4
 80060b8:	080072e4 	.word	0x080072e4
 80060bc:	080072a4 	.word	0x080072a4

080060c0 <__sflush_r>:
 80060c0:	898a      	ldrh	r2, [r1, #12]
 80060c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060c4:	4605      	mov	r5, r0
 80060c6:	0710      	lsls	r0, r2, #28
 80060c8:	460c      	mov	r4, r1
 80060ca:	d457      	bmi.n	800617c <__sflush_r+0xbc>
 80060cc:	684b      	ldr	r3, [r1, #4]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	dc04      	bgt.n	80060dc <__sflush_r+0x1c>
 80060d2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	dc01      	bgt.n	80060dc <__sflush_r+0x1c>
 80060d8:	2000      	movs	r0, #0
 80060da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80060de:	2e00      	cmp	r6, #0
 80060e0:	d0fa      	beq.n	80060d8 <__sflush_r+0x18>
 80060e2:	2300      	movs	r3, #0
 80060e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80060e8:	682f      	ldr	r7, [r5, #0]
 80060ea:	602b      	str	r3, [r5, #0]
 80060ec:	d032      	beq.n	8006154 <__sflush_r+0x94>
 80060ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80060f0:	89a3      	ldrh	r3, [r4, #12]
 80060f2:	075a      	lsls	r2, r3, #29
 80060f4:	d505      	bpl.n	8006102 <__sflush_r+0x42>
 80060f6:	6863      	ldr	r3, [r4, #4]
 80060f8:	1ac0      	subs	r0, r0, r3
 80060fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80060fc:	b10b      	cbz	r3, 8006102 <__sflush_r+0x42>
 80060fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006100:	1ac0      	subs	r0, r0, r3
 8006102:	2300      	movs	r3, #0
 8006104:	4602      	mov	r2, r0
 8006106:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006108:	4628      	mov	r0, r5
 800610a:	6a21      	ldr	r1, [r4, #32]
 800610c:	47b0      	blx	r6
 800610e:	1c43      	adds	r3, r0, #1
 8006110:	89a3      	ldrh	r3, [r4, #12]
 8006112:	d106      	bne.n	8006122 <__sflush_r+0x62>
 8006114:	6829      	ldr	r1, [r5, #0]
 8006116:	291d      	cmp	r1, #29
 8006118:	d82c      	bhi.n	8006174 <__sflush_r+0xb4>
 800611a:	4a29      	ldr	r2, [pc, #164]	; (80061c0 <__sflush_r+0x100>)
 800611c:	40ca      	lsrs	r2, r1
 800611e:	07d6      	lsls	r6, r2, #31
 8006120:	d528      	bpl.n	8006174 <__sflush_r+0xb4>
 8006122:	2200      	movs	r2, #0
 8006124:	6062      	str	r2, [r4, #4]
 8006126:	6922      	ldr	r2, [r4, #16]
 8006128:	04d9      	lsls	r1, r3, #19
 800612a:	6022      	str	r2, [r4, #0]
 800612c:	d504      	bpl.n	8006138 <__sflush_r+0x78>
 800612e:	1c42      	adds	r2, r0, #1
 8006130:	d101      	bne.n	8006136 <__sflush_r+0x76>
 8006132:	682b      	ldr	r3, [r5, #0]
 8006134:	b903      	cbnz	r3, 8006138 <__sflush_r+0x78>
 8006136:	6560      	str	r0, [r4, #84]	; 0x54
 8006138:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800613a:	602f      	str	r7, [r5, #0]
 800613c:	2900      	cmp	r1, #0
 800613e:	d0cb      	beq.n	80060d8 <__sflush_r+0x18>
 8006140:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006144:	4299      	cmp	r1, r3
 8006146:	d002      	beq.n	800614e <__sflush_r+0x8e>
 8006148:	4628      	mov	r0, r5
 800614a:	f000 f9d5 	bl	80064f8 <_free_r>
 800614e:	2000      	movs	r0, #0
 8006150:	6360      	str	r0, [r4, #52]	; 0x34
 8006152:	e7c2      	b.n	80060da <__sflush_r+0x1a>
 8006154:	6a21      	ldr	r1, [r4, #32]
 8006156:	2301      	movs	r3, #1
 8006158:	4628      	mov	r0, r5
 800615a:	47b0      	blx	r6
 800615c:	1c41      	adds	r1, r0, #1
 800615e:	d1c7      	bne.n	80060f0 <__sflush_r+0x30>
 8006160:	682b      	ldr	r3, [r5, #0]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d0c4      	beq.n	80060f0 <__sflush_r+0x30>
 8006166:	2b1d      	cmp	r3, #29
 8006168:	d001      	beq.n	800616e <__sflush_r+0xae>
 800616a:	2b16      	cmp	r3, #22
 800616c:	d101      	bne.n	8006172 <__sflush_r+0xb2>
 800616e:	602f      	str	r7, [r5, #0]
 8006170:	e7b2      	b.n	80060d8 <__sflush_r+0x18>
 8006172:	89a3      	ldrh	r3, [r4, #12]
 8006174:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006178:	81a3      	strh	r3, [r4, #12]
 800617a:	e7ae      	b.n	80060da <__sflush_r+0x1a>
 800617c:	690f      	ldr	r7, [r1, #16]
 800617e:	2f00      	cmp	r7, #0
 8006180:	d0aa      	beq.n	80060d8 <__sflush_r+0x18>
 8006182:	0793      	lsls	r3, r2, #30
 8006184:	bf18      	it	ne
 8006186:	2300      	movne	r3, #0
 8006188:	680e      	ldr	r6, [r1, #0]
 800618a:	bf08      	it	eq
 800618c:	694b      	ldreq	r3, [r1, #20]
 800618e:	1bf6      	subs	r6, r6, r7
 8006190:	600f      	str	r7, [r1, #0]
 8006192:	608b      	str	r3, [r1, #8]
 8006194:	2e00      	cmp	r6, #0
 8006196:	dd9f      	ble.n	80060d8 <__sflush_r+0x18>
 8006198:	4633      	mov	r3, r6
 800619a:	463a      	mov	r2, r7
 800619c:	4628      	mov	r0, r5
 800619e:	6a21      	ldr	r1, [r4, #32]
 80061a0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80061a4:	47e0      	blx	ip
 80061a6:	2800      	cmp	r0, #0
 80061a8:	dc06      	bgt.n	80061b8 <__sflush_r+0xf8>
 80061aa:	89a3      	ldrh	r3, [r4, #12]
 80061ac:	f04f 30ff 	mov.w	r0, #4294967295
 80061b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061b4:	81a3      	strh	r3, [r4, #12]
 80061b6:	e790      	b.n	80060da <__sflush_r+0x1a>
 80061b8:	4407      	add	r7, r0
 80061ba:	1a36      	subs	r6, r6, r0
 80061bc:	e7ea      	b.n	8006194 <__sflush_r+0xd4>
 80061be:	bf00      	nop
 80061c0:	20400001 	.word	0x20400001

080061c4 <_fflush_r>:
 80061c4:	b538      	push	{r3, r4, r5, lr}
 80061c6:	690b      	ldr	r3, [r1, #16]
 80061c8:	4605      	mov	r5, r0
 80061ca:	460c      	mov	r4, r1
 80061cc:	b913      	cbnz	r3, 80061d4 <_fflush_r+0x10>
 80061ce:	2500      	movs	r5, #0
 80061d0:	4628      	mov	r0, r5
 80061d2:	bd38      	pop	{r3, r4, r5, pc}
 80061d4:	b118      	cbz	r0, 80061de <_fflush_r+0x1a>
 80061d6:	6983      	ldr	r3, [r0, #24]
 80061d8:	b90b      	cbnz	r3, 80061de <_fflush_r+0x1a>
 80061da:	f000 f887 	bl	80062ec <__sinit>
 80061de:	4b14      	ldr	r3, [pc, #80]	; (8006230 <_fflush_r+0x6c>)
 80061e0:	429c      	cmp	r4, r3
 80061e2:	d11b      	bne.n	800621c <_fflush_r+0x58>
 80061e4:	686c      	ldr	r4, [r5, #4]
 80061e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d0ef      	beq.n	80061ce <_fflush_r+0xa>
 80061ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80061f0:	07d0      	lsls	r0, r2, #31
 80061f2:	d404      	bmi.n	80061fe <_fflush_r+0x3a>
 80061f4:	0599      	lsls	r1, r3, #22
 80061f6:	d402      	bmi.n	80061fe <_fflush_r+0x3a>
 80061f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061fa:	f000 f915 	bl	8006428 <__retarget_lock_acquire_recursive>
 80061fe:	4628      	mov	r0, r5
 8006200:	4621      	mov	r1, r4
 8006202:	f7ff ff5d 	bl	80060c0 <__sflush_r>
 8006206:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006208:	4605      	mov	r5, r0
 800620a:	07da      	lsls	r2, r3, #31
 800620c:	d4e0      	bmi.n	80061d0 <_fflush_r+0xc>
 800620e:	89a3      	ldrh	r3, [r4, #12]
 8006210:	059b      	lsls	r3, r3, #22
 8006212:	d4dd      	bmi.n	80061d0 <_fflush_r+0xc>
 8006214:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006216:	f000 f908 	bl	800642a <__retarget_lock_release_recursive>
 800621a:	e7d9      	b.n	80061d0 <_fflush_r+0xc>
 800621c:	4b05      	ldr	r3, [pc, #20]	; (8006234 <_fflush_r+0x70>)
 800621e:	429c      	cmp	r4, r3
 8006220:	d101      	bne.n	8006226 <_fflush_r+0x62>
 8006222:	68ac      	ldr	r4, [r5, #8]
 8006224:	e7df      	b.n	80061e6 <_fflush_r+0x22>
 8006226:	4b04      	ldr	r3, [pc, #16]	; (8006238 <_fflush_r+0x74>)
 8006228:	429c      	cmp	r4, r3
 800622a:	bf08      	it	eq
 800622c:	68ec      	ldreq	r4, [r5, #12]
 800622e:	e7da      	b.n	80061e6 <_fflush_r+0x22>
 8006230:	080072c4 	.word	0x080072c4
 8006234:	080072e4 	.word	0x080072e4
 8006238:	080072a4 	.word	0x080072a4

0800623c <std>:
 800623c:	2300      	movs	r3, #0
 800623e:	b510      	push	{r4, lr}
 8006240:	4604      	mov	r4, r0
 8006242:	e9c0 3300 	strd	r3, r3, [r0]
 8006246:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800624a:	6083      	str	r3, [r0, #8]
 800624c:	8181      	strh	r1, [r0, #12]
 800624e:	6643      	str	r3, [r0, #100]	; 0x64
 8006250:	81c2      	strh	r2, [r0, #14]
 8006252:	6183      	str	r3, [r0, #24]
 8006254:	4619      	mov	r1, r3
 8006256:	2208      	movs	r2, #8
 8006258:	305c      	adds	r0, #92	; 0x5c
 800625a:	f7ff fdf3 	bl	8005e44 <memset>
 800625e:	4b05      	ldr	r3, [pc, #20]	; (8006274 <std+0x38>)
 8006260:	6224      	str	r4, [r4, #32]
 8006262:	6263      	str	r3, [r4, #36]	; 0x24
 8006264:	4b04      	ldr	r3, [pc, #16]	; (8006278 <std+0x3c>)
 8006266:	62a3      	str	r3, [r4, #40]	; 0x28
 8006268:	4b04      	ldr	r3, [pc, #16]	; (800627c <std+0x40>)
 800626a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800626c:	4b04      	ldr	r3, [pc, #16]	; (8006280 <std+0x44>)
 800626e:	6323      	str	r3, [r4, #48]	; 0x30
 8006270:	bd10      	pop	{r4, pc}
 8006272:	bf00      	nop
 8006274:	080066d1 	.word	0x080066d1
 8006278:	080066f3 	.word	0x080066f3
 800627c:	0800672b 	.word	0x0800672b
 8006280:	0800674f 	.word	0x0800674f

08006284 <_cleanup_r>:
 8006284:	4901      	ldr	r1, [pc, #4]	; (800628c <_cleanup_r+0x8>)
 8006286:	f000 b8af 	b.w	80063e8 <_fwalk_reent>
 800628a:	bf00      	nop
 800628c:	080061c5 	.word	0x080061c5

08006290 <__sfmoreglue>:
 8006290:	2268      	movs	r2, #104	; 0x68
 8006292:	b570      	push	{r4, r5, r6, lr}
 8006294:	1e4d      	subs	r5, r1, #1
 8006296:	4355      	muls	r5, r2
 8006298:	460e      	mov	r6, r1
 800629a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800629e:	f000 f993 	bl	80065c8 <_malloc_r>
 80062a2:	4604      	mov	r4, r0
 80062a4:	b140      	cbz	r0, 80062b8 <__sfmoreglue+0x28>
 80062a6:	2100      	movs	r1, #0
 80062a8:	e9c0 1600 	strd	r1, r6, [r0]
 80062ac:	300c      	adds	r0, #12
 80062ae:	60a0      	str	r0, [r4, #8]
 80062b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80062b4:	f7ff fdc6 	bl	8005e44 <memset>
 80062b8:	4620      	mov	r0, r4
 80062ba:	bd70      	pop	{r4, r5, r6, pc}

080062bc <__sfp_lock_acquire>:
 80062bc:	4801      	ldr	r0, [pc, #4]	; (80062c4 <__sfp_lock_acquire+0x8>)
 80062be:	f000 b8b3 	b.w	8006428 <__retarget_lock_acquire_recursive>
 80062c2:	bf00      	nop
 80062c4:	20002125 	.word	0x20002125

080062c8 <__sfp_lock_release>:
 80062c8:	4801      	ldr	r0, [pc, #4]	; (80062d0 <__sfp_lock_release+0x8>)
 80062ca:	f000 b8ae 	b.w	800642a <__retarget_lock_release_recursive>
 80062ce:	bf00      	nop
 80062d0:	20002125 	.word	0x20002125

080062d4 <__sinit_lock_acquire>:
 80062d4:	4801      	ldr	r0, [pc, #4]	; (80062dc <__sinit_lock_acquire+0x8>)
 80062d6:	f000 b8a7 	b.w	8006428 <__retarget_lock_acquire_recursive>
 80062da:	bf00      	nop
 80062dc:	20002126 	.word	0x20002126

080062e0 <__sinit_lock_release>:
 80062e0:	4801      	ldr	r0, [pc, #4]	; (80062e8 <__sinit_lock_release+0x8>)
 80062e2:	f000 b8a2 	b.w	800642a <__retarget_lock_release_recursive>
 80062e6:	bf00      	nop
 80062e8:	20002126 	.word	0x20002126

080062ec <__sinit>:
 80062ec:	b510      	push	{r4, lr}
 80062ee:	4604      	mov	r4, r0
 80062f0:	f7ff fff0 	bl	80062d4 <__sinit_lock_acquire>
 80062f4:	69a3      	ldr	r3, [r4, #24]
 80062f6:	b11b      	cbz	r3, 8006300 <__sinit+0x14>
 80062f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062fc:	f7ff bff0 	b.w	80062e0 <__sinit_lock_release>
 8006300:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006304:	6523      	str	r3, [r4, #80]	; 0x50
 8006306:	4b13      	ldr	r3, [pc, #76]	; (8006354 <__sinit+0x68>)
 8006308:	4a13      	ldr	r2, [pc, #76]	; (8006358 <__sinit+0x6c>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	62a2      	str	r2, [r4, #40]	; 0x28
 800630e:	42a3      	cmp	r3, r4
 8006310:	bf08      	it	eq
 8006312:	2301      	moveq	r3, #1
 8006314:	4620      	mov	r0, r4
 8006316:	bf08      	it	eq
 8006318:	61a3      	streq	r3, [r4, #24]
 800631a:	f000 f81f 	bl	800635c <__sfp>
 800631e:	6060      	str	r0, [r4, #4]
 8006320:	4620      	mov	r0, r4
 8006322:	f000 f81b 	bl	800635c <__sfp>
 8006326:	60a0      	str	r0, [r4, #8]
 8006328:	4620      	mov	r0, r4
 800632a:	f000 f817 	bl	800635c <__sfp>
 800632e:	2200      	movs	r2, #0
 8006330:	2104      	movs	r1, #4
 8006332:	60e0      	str	r0, [r4, #12]
 8006334:	6860      	ldr	r0, [r4, #4]
 8006336:	f7ff ff81 	bl	800623c <std>
 800633a:	2201      	movs	r2, #1
 800633c:	2109      	movs	r1, #9
 800633e:	68a0      	ldr	r0, [r4, #8]
 8006340:	f7ff ff7c 	bl	800623c <std>
 8006344:	2202      	movs	r2, #2
 8006346:	2112      	movs	r1, #18
 8006348:	68e0      	ldr	r0, [r4, #12]
 800634a:	f7ff ff77 	bl	800623c <std>
 800634e:	2301      	movs	r3, #1
 8006350:	61a3      	str	r3, [r4, #24]
 8006352:	e7d1      	b.n	80062f8 <__sinit+0xc>
 8006354:	080072a0 	.word	0x080072a0
 8006358:	08006285 	.word	0x08006285

0800635c <__sfp>:
 800635c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800635e:	4607      	mov	r7, r0
 8006360:	f7ff ffac 	bl	80062bc <__sfp_lock_acquire>
 8006364:	4b1e      	ldr	r3, [pc, #120]	; (80063e0 <__sfp+0x84>)
 8006366:	681e      	ldr	r6, [r3, #0]
 8006368:	69b3      	ldr	r3, [r6, #24]
 800636a:	b913      	cbnz	r3, 8006372 <__sfp+0x16>
 800636c:	4630      	mov	r0, r6
 800636e:	f7ff ffbd 	bl	80062ec <__sinit>
 8006372:	3648      	adds	r6, #72	; 0x48
 8006374:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006378:	3b01      	subs	r3, #1
 800637a:	d503      	bpl.n	8006384 <__sfp+0x28>
 800637c:	6833      	ldr	r3, [r6, #0]
 800637e:	b30b      	cbz	r3, 80063c4 <__sfp+0x68>
 8006380:	6836      	ldr	r6, [r6, #0]
 8006382:	e7f7      	b.n	8006374 <__sfp+0x18>
 8006384:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006388:	b9d5      	cbnz	r5, 80063c0 <__sfp+0x64>
 800638a:	4b16      	ldr	r3, [pc, #88]	; (80063e4 <__sfp+0x88>)
 800638c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006390:	60e3      	str	r3, [r4, #12]
 8006392:	6665      	str	r5, [r4, #100]	; 0x64
 8006394:	f000 f847 	bl	8006426 <__retarget_lock_init_recursive>
 8006398:	f7ff ff96 	bl	80062c8 <__sfp_lock_release>
 800639c:	2208      	movs	r2, #8
 800639e:	4629      	mov	r1, r5
 80063a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80063a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80063a8:	6025      	str	r5, [r4, #0]
 80063aa:	61a5      	str	r5, [r4, #24]
 80063ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80063b0:	f7ff fd48 	bl	8005e44 <memset>
 80063b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80063b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80063bc:	4620      	mov	r0, r4
 80063be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063c0:	3468      	adds	r4, #104	; 0x68
 80063c2:	e7d9      	b.n	8006378 <__sfp+0x1c>
 80063c4:	2104      	movs	r1, #4
 80063c6:	4638      	mov	r0, r7
 80063c8:	f7ff ff62 	bl	8006290 <__sfmoreglue>
 80063cc:	4604      	mov	r4, r0
 80063ce:	6030      	str	r0, [r6, #0]
 80063d0:	2800      	cmp	r0, #0
 80063d2:	d1d5      	bne.n	8006380 <__sfp+0x24>
 80063d4:	f7ff ff78 	bl	80062c8 <__sfp_lock_release>
 80063d8:	230c      	movs	r3, #12
 80063da:	603b      	str	r3, [r7, #0]
 80063dc:	e7ee      	b.n	80063bc <__sfp+0x60>
 80063de:	bf00      	nop
 80063e0:	080072a0 	.word	0x080072a0
 80063e4:	ffff0001 	.word	0xffff0001

080063e8 <_fwalk_reent>:
 80063e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063ec:	4606      	mov	r6, r0
 80063ee:	4688      	mov	r8, r1
 80063f0:	2700      	movs	r7, #0
 80063f2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80063f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80063fa:	f1b9 0901 	subs.w	r9, r9, #1
 80063fe:	d505      	bpl.n	800640c <_fwalk_reent+0x24>
 8006400:	6824      	ldr	r4, [r4, #0]
 8006402:	2c00      	cmp	r4, #0
 8006404:	d1f7      	bne.n	80063f6 <_fwalk_reent+0xe>
 8006406:	4638      	mov	r0, r7
 8006408:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800640c:	89ab      	ldrh	r3, [r5, #12]
 800640e:	2b01      	cmp	r3, #1
 8006410:	d907      	bls.n	8006422 <_fwalk_reent+0x3a>
 8006412:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006416:	3301      	adds	r3, #1
 8006418:	d003      	beq.n	8006422 <_fwalk_reent+0x3a>
 800641a:	4629      	mov	r1, r5
 800641c:	4630      	mov	r0, r6
 800641e:	47c0      	blx	r8
 8006420:	4307      	orrs	r7, r0
 8006422:	3568      	adds	r5, #104	; 0x68
 8006424:	e7e9      	b.n	80063fa <_fwalk_reent+0x12>

08006426 <__retarget_lock_init_recursive>:
 8006426:	4770      	bx	lr

08006428 <__retarget_lock_acquire_recursive>:
 8006428:	4770      	bx	lr

0800642a <__retarget_lock_release_recursive>:
 800642a:	4770      	bx	lr

0800642c <__swhatbuf_r>:
 800642c:	b570      	push	{r4, r5, r6, lr}
 800642e:	460e      	mov	r6, r1
 8006430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006434:	4614      	mov	r4, r2
 8006436:	2900      	cmp	r1, #0
 8006438:	461d      	mov	r5, r3
 800643a:	b096      	sub	sp, #88	; 0x58
 800643c:	da08      	bge.n	8006450 <__swhatbuf_r+0x24>
 800643e:	2200      	movs	r2, #0
 8006440:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006444:	602a      	str	r2, [r5, #0]
 8006446:	061a      	lsls	r2, r3, #24
 8006448:	d410      	bmi.n	800646c <__swhatbuf_r+0x40>
 800644a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800644e:	e00e      	b.n	800646e <__swhatbuf_r+0x42>
 8006450:	466a      	mov	r2, sp
 8006452:	f000 f9a3 	bl	800679c <_fstat_r>
 8006456:	2800      	cmp	r0, #0
 8006458:	dbf1      	blt.n	800643e <__swhatbuf_r+0x12>
 800645a:	9a01      	ldr	r2, [sp, #4]
 800645c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006460:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006464:	425a      	negs	r2, r3
 8006466:	415a      	adcs	r2, r3
 8006468:	602a      	str	r2, [r5, #0]
 800646a:	e7ee      	b.n	800644a <__swhatbuf_r+0x1e>
 800646c:	2340      	movs	r3, #64	; 0x40
 800646e:	2000      	movs	r0, #0
 8006470:	6023      	str	r3, [r4, #0]
 8006472:	b016      	add	sp, #88	; 0x58
 8006474:	bd70      	pop	{r4, r5, r6, pc}
	...

08006478 <__smakebuf_r>:
 8006478:	898b      	ldrh	r3, [r1, #12]
 800647a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800647c:	079d      	lsls	r5, r3, #30
 800647e:	4606      	mov	r6, r0
 8006480:	460c      	mov	r4, r1
 8006482:	d507      	bpl.n	8006494 <__smakebuf_r+0x1c>
 8006484:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006488:	6023      	str	r3, [r4, #0]
 800648a:	6123      	str	r3, [r4, #16]
 800648c:	2301      	movs	r3, #1
 800648e:	6163      	str	r3, [r4, #20]
 8006490:	b002      	add	sp, #8
 8006492:	bd70      	pop	{r4, r5, r6, pc}
 8006494:	466a      	mov	r2, sp
 8006496:	ab01      	add	r3, sp, #4
 8006498:	f7ff ffc8 	bl	800642c <__swhatbuf_r>
 800649c:	9900      	ldr	r1, [sp, #0]
 800649e:	4605      	mov	r5, r0
 80064a0:	4630      	mov	r0, r6
 80064a2:	f000 f891 	bl	80065c8 <_malloc_r>
 80064a6:	b948      	cbnz	r0, 80064bc <__smakebuf_r+0x44>
 80064a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064ac:	059a      	lsls	r2, r3, #22
 80064ae:	d4ef      	bmi.n	8006490 <__smakebuf_r+0x18>
 80064b0:	f023 0303 	bic.w	r3, r3, #3
 80064b4:	f043 0302 	orr.w	r3, r3, #2
 80064b8:	81a3      	strh	r3, [r4, #12]
 80064ba:	e7e3      	b.n	8006484 <__smakebuf_r+0xc>
 80064bc:	4b0d      	ldr	r3, [pc, #52]	; (80064f4 <__smakebuf_r+0x7c>)
 80064be:	62b3      	str	r3, [r6, #40]	; 0x28
 80064c0:	89a3      	ldrh	r3, [r4, #12]
 80064c2:	6020      	str	r0, [r4, #0]
 80064c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064c8:	81a3      	strh	r3, [r4, #12]
 80064ca:	9b00      	ldr	r3, [sp, #0]
 80064cc:	6120      	str	r0, [r4, #16]
 80064ce:	6163      	str	r3, [r4, #20]
 80064d0:	9b01      	ldr	r3, [sp, #4]
 80064d2:	b15b      	cbz	r3, 80064ec <__smakebuf_r+0x74>
 80064d4:	4630      	mov	r0, r6
 80064d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064da:	f000 f971 	bl	80067c0 <_isatty_r>
 80064de:	b128      	cbz	r0, 80064ec <__smakebuf_r+0x74>
 80064e0:	89a3      	ldrh	r3, [r4, #12]
 80064e2:	f023 0303 	bic.w	r3, r3, #3
 80064e6:	f043 0301 	orr.w	r3, r3, #1
 80064ea:	81a3      	strh	r3, [r4, #12]
 80064ec:	89a0      	ldrh	r0, [r4, #12]
 80064ee:	4305      	orrs	r5, r0
 80064f0:	81a5      	strh	r5, [r4, #12]
 80064f2:	e7cd      	b.n	8006490 <__smakebuf_r+0x18>
 80064f4:	08006285 	.word	0x08006285

080064f8 <_free_r>:
 80064f8:	b538      	push	{r3, r4, r5, lr}
 80064fa:	4605      	mov	r5, r0
 80064fc:	2900      	cmp	r1, #0
 80064fe:	d040      	beq.n	8006582 <_free_r+0x8a>
 8006500:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006504:	1f0c      	subs	r4, r1, #4
 8006506:	2b00      	cmp	r3, #0
 8006508:	bfb8      	it	lt
 800650a:	18e4      	addlt	r4, r4, r3
 800650c:	f000 f97a 	bl	8006804 <__malloc_lock>
 8006510:	4a1c      	ldr	r2, [pc, #112]	; (8006584 <_free_r+0x8c>)
 8006512:	6813      	ldr	r3, [r2, #0]
 8006514:	b933      	cbnz	r3, 8006524 <_free_r+0x2c>
 8006516:	6063      	str	r3, [r4, #4]
 8006518:	6014      	str	r4, [r2, #0]
 800651a:	4628      	mov	r0, r5
 800651c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006520:	f000 b976 	b.w	8006810 <__malloc_unlock>
 8006524:	42a3      	cmp	r3, r4
 8006526:	d908      	bls.n	800653a <_free_r+0x42>
 8006528:	6820      	ldr	r0, [r4, #0]
 800652a:	1821      	adds	r1, r4, r0
 800652c:	428b      	cmp	r3, r1
 800652e:	bf01      	itttt	eq
 8006530:	6819      	ldreq	r1, [r3, #0]
 8006532:	685b      	ldreq	r3, [r3, #4]
 8006534:	1809      	addeq	r1, r1, r0
 8006536:	6021      	streq	r1, [r4, #0]
 8006538:	e7ed      	b.n	8006516 <_free_r+0x1e>
 800653a:	461a      	mov	r2, r3
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	b10b      	cbz	r3, 8006544 <_free_r+0x4c>
 8006540:	42a3      	cmp	r3, r4
 8006542:	d9fa      	bls.n	800653a <_free_r+0x42>
 8006544:	6811      	ldr	r1, [r2, #0]
 8006546:	1850      	adds	r0, r2, r1
 8006548:	42a0      	cmp	r0, r4
 800654a:	d10b      	bne.n	8006564 <_free_r+0x6c>
 800654c:	6820      	ldr	r0, [r4, #0]
 800654e:	4401      	add	r1, r0
 8006550:	1850      	adds	r0, r2, r1
 8006552:	4283      	cmp	r3, r0
 8006554:	6011      	str	r1, [r2, #0]
 8006556:	d1e0      	bne.n	800651a <_free_r+0x22>
 8006558:	6818      	ldr	r0, [r3, #0]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	4401      	add	r1, r0
 800655e:	6011      	str	r1, [r2, #0]
 8006560:	6053      	str	r3, [r2, #4]
 8006562:	e7da      	b.n	800651a <_free_r+0x22>
 8006564:	d902      	bls.n	800656c <_free_r+0x74>
 8006566:	230c      	movs	r3, #12
 8006568:	602b      	str	r3, [r5, #0]
 800656a:	e7d6      	b.n	800651a <_free_r+0x22>
 800656c:	6820      	ldr	r0, [r4, #0]
 800656e:	1821      	adds	r1, r4, r0
 8006570:	428b      	cmp	r3, r1
 8006572:	bf01      	itttt	eq
 8006574:	6819      	ldreq	r1, [r3, #0]
 8006576:	685b      	ldreq	r3, [r3, #4]
 8006578:	1809      	addeq	r1, r1, r0
 800657a:	6021      	streq	r1, [r4, #0]
 800657c:	6063      	str	r3, [r4, #4]
 800657e:	6054      	str	r4, [r2, #4]
 8006580:	e7cb      	b.n	800651a <_free_r+0x22>
 8006582:	bd38      	pop	{r3, r4, r5, pc}
 8006584:	20002128 	.word	0x20002128

08006588 <sbrk_aligned>:
 8006588:	b570      	push	{r4, r5, r6, lr}
 800658a:	4e0e      	ldr	r6, [pc, #56]	; (80065c4 <sbrk_aligned+0x3c>)
 800658c:	460c      	mov	r4, r1
 800658e:	6831      	ldr	r1, [r6, #0]
 8006590:	4605      	mov	r5, r0
 8006592:	b911      	cbnz	r1, 800659a <sbrk_aligned+0x12>
 8006594:	f000 f88c 	bl	80066b0 <_sbrk_r>
 8006598:	6030      	str	r0, [r6, #0]
 800659a:	4621      	mov	r1, r4
 800659c:	4628      	mov	r0, r5
 800659e:	f000 f887 	bl	80066b0 <_sbrk_r>
 80065a2:	1c43      	adds	r3, r0, #1
 80065a4:	d00a      	beq.n	80065bc <sbrk_aligned+0x34>
 80065a6:	1cc4      	adds	r4, r0, #3
 80065a8:	f024 0403 	bic.w	r4, r4, #3
 80065ac:	42a0      	cmp	r0, r4
 80065ae:	d007      	beq.n	80065c0 <sbrk_aligned+0x38>
 80065b0:	1a21      	subs	r1, r4, r0
 80065b2:	4628      	mov	r0, r5
 80065b4:	f000 f87c 	bl	80066b0 <_sbrk_r>
 80065b8:	3001      	adds	r0, #1
 80065ba:	d101      	bne.n	80065c0 <sbrk_aligned+0x38>
 80065bc:	f04f 34ff 	mov.w	r4, #4294967295
 80065c0:	4620      	mov	r0, r4
 80065c2:	bd70      	pop	{r4, r5, r6, pc}
 80065c4:	2000212c 	.word	0x2000212c

080065c8 <_malloc_r>:
 80065c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065cc:	1ccd      	adds	r5, r1, #3
 80065ce:	f025 0503 	bic.w	r5, r5, #3
 80065d2:	3508      	adds	r5, #8
 80065d4:	2d0c      	cmp	r5, #12
 80065d6:	bf38      	it	cc
 80065d8:	250c      	movcc	r5, #12
 80065da:	2d00      	cmp	r5, #0
 80065dc:	4607      	mov	r7, r0
 80065de:	db01      	blt.n	80065e4 <_malloc_r+0x1c>
 80065e0:	42a9      	cmp	r1, r5
 80065e2:	d905      	bls.n	80065f0 <_malloc_r+0x28>
 80065e4:	230c      	movs	r3, #12
 80065e6:	2600      	movs	r6, #0
 80065e8:	603b      	str	r3, [r7, #0]
 80065ea:	4630      	mov	r0, r6
 80065ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065f0:	4e2e      	ldr	r6, [pc, #184]	; (80066ac <_malloc_r+0xe4>)
 80065f2:	f000 f907 	bl	8006804 <__malloc_lock>
 80065f6:	6833      	ldr	r3, [r6, #0]
 80065f8:	461c      	mov	r4, r3
 80065fa:	bb34      	cbnz	r4, 800664a <_malloc_r+0x82>
 80065fc:	4629      	mov	r1, r5
 80065fe:	4638      	mov	r0, r7
 8006600:	f7ff ffc2 	bl	8006588 <sbrk_aligned>
 8006604:	1c43      	adds	r3, r0, #1
 8006606:	4604      	mov	r4, r0
 8006608:	d14d      	bne.n	80066a6 <_malloc_r+0xde>
 800660a:	6834      	ldr	r4, [r6, #0]
 800660c:	4626      	mov	r6, r4
 800660e:	2e00      	cmp	r6, #0
 8006610:	d140      	bne.n	8006694 <_malloc_r+0xcc>
 8006612:	6823      	ldr	r3, [r4, #0]
 8006614:	4631      	mov	r1, r6
 8006616:	4638      	mov	r0, r7
 8006618:	eb04 0803 	add.w	r8, r4, r3
 800661c:	f000 f848 	bl	80066b0 <_sbrk_r>
 8006620:	4580      	cmp	r8, r0
 8006622:	d13a      	bne.n	800669a <_malloc_r+0xd2>
 8006624:	6821      	ldr	r1, [r4, #0]
 8006626:	3503      	adds	r5, #3
 8006628:	1a6d      	subs	r5, r5, r1
 800662a:	f025 0503 	bic.w	r5, r5, #3
 800662e:	3508      	adds	r5, #8
 8006630:	2d0c      	cmp	r5, #12
 8006632:	bf38      	it	cc
 8006634:	250c      	movcc	r5, #12
 8006636:	4638      	mov	r0, r7
 8006638:	4629      	mov	r1, r5
 800663a:	f7ff ffa5 	bl	8006588 <sbrk_aligned>
 800663e:	3001      	adds	r0, #1
 8006640:	d02b      	beq.n	800669a <_malloc_r+0xd2>
 8006642:	6823      	ldr	r3, [r4, #0]
 8006644:	442b      	add	r3, r5
 8006646:	6023      	str	r3, [r4, #0]
 8006648:	e00e      	b.n	8006668 <_malloc_r+0xa0>
 800664a:	6822      	ldr	r2, [r4, #0]
 800664c:	1b52      	subs	r2, r2, r5
 800664e:	d41e      	bmi.n	800668e <_malloc_r+0xc6>
 8006650:	2a0b      	cmp	r2, #11
 8006652:	d916      	bls.n	8006682 <_malloc_r+0xba>
 8006654:	1961      	adds	r1, r4, r5
 8006656:	42a3      	cmp	r3, r4
 8006658:	6025      	str	r5, [r4, #0]
 800665a:	bf18      	it	ne
 800665c:	6059      	strne	r1, [r3, #4]
 800665e:	6863      	ldr	r3, [r4, #4]
 8006660:	bf08      	it	eq
 8006662:	6031      	streq	r1, [r6, #0]
 8006664:	5162      	str	r2, [r4, r5]
 8006666:	604b      	str	r3, [r1, #4]
 8006668:	4638      	mov	r0, r7
 800666a:	f104 060b 	add.w	r6, r4, #11
 800666e:	f000 f8cf 	bl	8006810 <__malloc_unlock>
 8006672:	f026 0607 	bic.w	r6, r6, #7
 8006676:	1d23      	adds	r3, r4, #4
 8006678:	1af2      	subs	r2, r6, r3
 800667a:	d0b6      	beq.n	80065ea <_malloc_r+0x22>
 800667c:	1b9b      	subs	r3, r3, r6
 800667e:	50a3      	str	r3, [r4, r2]
 8006680:	e7b3      	b.n	80065ea <_malloc_r+0x22>
 8006682:	6862      	ldr	r2, [r4, #4]
 8006684:	42a3      	cmp	r3, r4
 8006686:	bf0c      	ite	eq
 8006688:	6032      	streq	r2, [r6, #0]
 800668a:	605a      	strne	r2, [r3, #4]
 800668c:	e7ec      	b.n	8006668 <_malloc_r+0xa0>
 800668e:	4623      	mov	r3, r4
 8006690:	6864      	ldr	r4, [r4, #4]
 8006692:	e7b2      	b.n	80065fa <_malloc_r+0x32>
 8006694:	4634      	mov	r4, r6
 8006696:	6876      	ldr	r6, [r6, #4]
 8006698:	e7b9      	b.n	800660e <_malloc_r+0x46>
 800669a:	230c      	movs	r3, #12
 800669c:	4638      	mov	r0, r7
 800669e:	603b      	str	r3, [r7, #0]
 80066a0:	f000 f8b6 	bl	8006810 <__malloc_unlock>
 80066a4:	e7a1      	b.n	80065ea <_malloc_r+0x22>
 80066a6:	6025      	str	r5, [r4, #0]
 80066a8:	e7de      	b.n	8006668 <_malloc_r+0xa0>
 80066aa:	bf00      	nop
 80066ac:	20002128 	.word	0x20002128

080066b0 <_sbrk_r>:
 80066b0:	b538      	push	{r3, r4, r5, lr}
 80066b2:	2300      	movs	r3, #0
 80066b4:	4d05      	ldr	r5, [pc, #20]	; (80066cc <_sbrk_r+0x1c>)
 80066b6:	4604      	mov	r4, r0
 80066b8:	4608      	mov	r0, r1
 80066ba:	602b      	str	r3, [r5, #0]
 80066bc:	f7fd fb20 	bl	8003d00 <_sbrk>
 80066c0:	1c43      	adds	r3, r0, #1
 80066c2:	d102      	bne.n	80066ca <_sbrk_r+0x1a>
 80066c4:	682b      	ldr	r3, [r5, #0]
 80066c6:	b103      	cbz	r3, 80066ca <_sbrk_r+0x1a>
 80066c8:	6023      	str	r3, [r4, #0]
 80066ca:	bd38      	pop	{r3, r4, r5, pc}
 80066cc:	20002130 	.word	0x20002130

080066d0 <__sread>:
 80066d0:	b510      	push	{r4, lr}
 80066d2:	460c      	mov	r4, r1
 80066d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066d8:	f000 f8a0 	bl	800681c <_read_r>
 80066dc:	2800      	cmp	r0, #0
 80066de:	bfab      	itete	ge
 80066e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80066e2:	89a3      	ldrhlt	r3, [r4, #12]
 80066e4:	181b      	addge	r3, r3, r0
 80066e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80066ea:	bfac      	ite	ge
 80066ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80066ee:	81a3      	strhlt	r3, [r4, #12]
 80066f0:	bd10      	pop	{r4, pc}

080066f2 <__swrite>:
 80066f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066f6:	461f      	mov	r7, r3
 80066f8:	898b      	ldrh	r3, [r1, #12]
 80066fa:	4605      	mov	r5, r0
 80066fc:	05db      	lsls	r3, r3, #23
 80066fe:	460c      	mov	r4, r1
 8006700:	4616      	mov	r6, r2
 8006702:	d505      	bpl.n	8006710 <__swrite+0x1e>
 8006704:	2302      	movs	r3, #2
 8006706:	2200      	movs	r2, #0
 8006708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800670c:	f000 f868 	bl	80067e0 <_lseek_r>
 8006710:	89a3      	ldrh	r3, [r4, #12]
 8006712:	4632      	mov	r2, r6
 8006714:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006718:	81a3      	strh	r3, [r4, #12]
 800671a:	4628      	mov	r0, r5
 800671c:	463b      	mov	r3, r7
 800671e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006722:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006726:	f000 b817 	b.w	8006758 <_write_r>

0800672a <__sseek>:
 800672a:	b510      	push	{r4, lr}
 800672c:	460c      	mov	r4, r1
 800672e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006732:	f000 f855 	bl	80067e0 <_lseek_r>
 8006736:	1c43      	adds	r3, r0, #1
 8006738:	89a3      	ldrh	r3, [r4, #12]
 800673a:	bf15      	itete	ne
 800673c:	6560      	strne	r0, [r4, #84]	; 0x54
 800673e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006742:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006746:	81a3      	strheq	r3, [r4, #12]
 8006748:	bf18      	it	ne
 800674a:	81a3      	strhne	r3, [r4, #12]
 800674c:	bd10      	pop	{r4, pc}

0800674e <__sclose>:
 800674e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006752:	f000 b813 	b.w	800677c <_close_r>
	...

08006758 <_write_r>:
 8006758:	b538      	push	{r3, r4, r5, lr}
 800675a:	4604      	mov	r4, r0
 800675c:	4608      	mov	r0, r1
 800675e:	4611      	mov	r1, r2
 8006760:	2200      	movs	r2, #0
 8006762:	4d05      	ldr	r5, [pc, #20]	; (8006778 <_write_r+0x20>)
 8006764:	602a      	str	r2, [r5, #0]
 8006766:	461a      	mov	r2, r3
 8006768:	f7fd fa7d 	bl	8003c66 <_write>
 800676c:	1c43      	adds	r3, r0, #1
 800676e:	d102      	bne.n	8006776 <_write_r+0x1e>
 8006770:	682b      	ldr	r3, [r5, #0]
 8006772:	b103      	cbz	r3, 8006776 <_write_r+0x1e>
 8006774:	6023      	str	r3, [r4, #0]
 8006776:	bd38      	pop	{r3, r4, r5, pc}
 8006778:	20002130 	.word	0x20002130

0800677c <_close_r>:
 800677c:	b538      	push	{r3, r4, r5, lr}
 800677e:	2300      	movs	r3, #0
 8006780:	4d05      	ldr	r5, [pc, #20]	; (8006798 <_close_r+0x1c>)
 8006782:	4604      	mov	r4, r0
 8006784:	4608      	mov	r0, r1
 8006786:	602b      	str	r3, [r5, #0]
 8006788:	f7fd fa89 	bl	8003c9e <_close>
 800678c:	1c43      	adds	r3, r0, #1
 800678e:	d102      	bne.n	8006796 <_close_r+0x1a>
 8006790:	682b      	ldr	r3, [r5, #0]
 8006792:	b103      	cbz	r3, 8006796 <_close_r+0x1a>
 8006794:	6023      	str	r3, [r4, #0]
 8006796:	bd38      	pop	{r3, r4, r5, pc}
 8006798:	20002130 	.word	0x20002130

0800679c <_fstat_r>:
 800679c:	b538      	push	{r3, r4, r5, lr}
 800679e:	2300      	movs	r3, #0
 80067a0:	4d06      	ldr	r5, [pc, #24]	; (80067bc <_fstat_r+0x20>)
 80067a2:	4604      	mov	r4, r0
 80067a4:	4608      	mov	r0, r1
 80067a6:	4611      	mov	r1, r2
 80067a8:	602b      	str	r3, [r5, #0]
 80067aa:	f7fd fa83 	bl	8003cb4 <_fstat>
 80067ae:	1c43      	adds	r3, r0, #1
 80067b0:	d102      	bne.n	80067b8 <_fstat_r+0x1c>
 80067b2:	682b      	ldr	r3, [r5, #0]
 80067b4:	b103      	cbz	r3, 80067b8 <_fstat_r+0x1c>
 80067b6:	6023      	str	r3, [r4, #0]
 80067b8:	bd38      	pop	{r3, r4, r5, pc}
 80067ba:	bf00      	nop
 80067bc:	20002130 	.word	0x20002130

080067c0 <_isatty_r>:
 80067c0:	b538      	push	{r3, r4, r5, lr}
 80067c2:	2300      	movs	r3, #0
 80067c4:	4d05      	ldr	r5, [pc, #20]	; (80067dc <_isatty_r+0x1c>)
 80067c6:	4604      	mov	r4, r0
 80067c8:	4608      	mov	r0, r1
 80067ca:	602b      	str	r3, [r5, #0]
 80067cc:	f7fd fa81 	bl	8003cd2 <_isatty>
 80067d0:	1c43      	adds	r3, r0, #1
 80067d2:	d102      	bne.n	80067da <_isatty_r+0x1a>
 80067d4:	682b      	ldr	r3, [r5, #0]
 80067d6:	b103      	cbz	r3, 80067da <_isatty_r+0x1a>
 80067d8:	6023      	str	r3, [r4, #0]
 80067da:	bd38      	pop	{r3, r4, r5, pc}
 80067dc:	20002130 	.word	0x20002130

080067e0 <_lseek_r>:
 80067e0:	b538      	push	{r3, r4, r5, lr}
 80067e2:	4604      	mov	r4, r0
 80067e4:	4608      	mov	r0, r1
 80067e6:	4611      	mov	r1, r2
 80067e8:	2200      	movs	r2, #0
 80067ea:	4d05      	ldr	r5, [pc, #20]	; (8006800 <_lseek_r+0x20>)
 80067ec:	602a      	str	r2, [r5, #0]
 80067ee:	461a      	mov	r2, r3
 80067f0:	f7fd fa79 	bl	8003ce6 <_lseek>
 80067f4:	1c43      	adds	r3, r0, #1
 80067f6:	d102      	bne.n	80067fe <_lseek_r+0x1e>
 80067f8:	682b      	ldr	r3, [r5, #0]
 80067fa:	b103      	cbz	r3, 80067fe <_lseek_r+0x1e>
 80067fc:	6023      	str	r3, [r4, #0]
 80067fe:	bd38      	pop	{r3, r4, r5, pc}
 8006800:	20002130 	.word	0x20002130

08006804 <__malloc_lock>:
 8006804:	4801      	ldr	r0, [pc, #4]	; (800680c <__malloc_lock+0x8>)
 8006806:	f7ff be0f 	b.w	8006428 <__retarget_lock_acquire_recursive>
 800680a:	bf00      	nop
 800680c:	20002124 	.word	0x20002124

08006810 <__malloc_unlock>:
 8006810:	4801      	ldr	r0, [pc, #4]	; (8006818 <__malloc_unlock+0x8>)
 8006812:	f7ff be0a 	b.w	800642a <__retarget_lock_release_recursive>
 8006816:	bf00      	nop
 8006818:	20002124 	.word	0x20002124

0800681c <_read_r>:
 800681c:	b538      	push	{r3, r4, r5, lr}
 800681e:	4604      	mov	r4, r0
 8006820:	4608      	mov	r0, r1
 8006822:	4611      	mov	r1, r2
 8006824:	2200      	movs	r2, #0
 8006826:	4d05      	ldr	r5, [pc, #20]	; (800683c <_read_r+0x20>)
 8006828:	602a      	str	r2, [r5, #0]
 800682a:	461a      	mov	r2, r3
 800682c:	f7fd f9fe 	bl	8003c2c <_read>
 8006830:	1c43      	adds	r3, r0, #1
 8006832:	d102      	bne.n	800683a <_read_r+0x1e>
 8006834:	682b      	ldr	r3, [r5, #0]
 8006836:	b103      	cbz	r3, 800683a <_read_r+0x1e>
 8006838:	6023      	str	r3, [r4, #0]
 800683a:	bd38      	pop	{r3, r4, r5, pc}
 800683c:	20002130 	.word	0x20002130

08006840 <_init>:
 8006840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006842:	bf00      	nop
 8006844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006846:	bc08      	pop	{r3}
 8006848:	469e      	mov	lr, r3
 800684a:	4770      	bx	lr

0800684c <_fini>:
 800684c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800684e:	bf00      	nop
 8006850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006852:	bc08      	pop	{r3}
 8006854:	469e      	mov	lr, r3
 8006856:	4770      	bx	lr
