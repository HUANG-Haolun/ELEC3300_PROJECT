
lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d14  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000af0  08006f00  08006f00  00016f00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080079f0  080079f0  000179f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080079f4  080079f4  000179f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e4  20000000  080079f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001f24  200001e4  08007bdc  000201e4  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20002108  08007bdc  00022108  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000aabc  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002976  00000000  00000000  0002acc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000be8  00000000  00000000  0002d640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000aa0  00000000  00000000  0002e228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   000092e4  00000000  00000000  0002ecc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    00002edb  00000000  00000000  00037fac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .comment      00000050  00000000  00000000  0003ae87  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000037b4  00000000  00000000  0003aed8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001e4 	.word	0x200001e4
 8000204:	00000000 	.word	0x00000000
 8000208:	08006ee4 	.word	0x08006ee4

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001e8 	.word	0x200001e8
 8000224:	08006ee4 	.word	0x08006ee4

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpun>:
 8000ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x10>
 8000ade:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ae2:	d10a      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000ae4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x20>
 8000aee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000af2:	d102      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	f04f 0001 	mov.w	r0, #1
 8000afe:	4770      	bx	lr

08000b00 <__aeabi_d2uiz>:
 8000b00:	004a      	lsls	r2, r1, #1
 8000b02:	d211      	bcs.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d211      	bcs.n	8000b2e <__aeabi_d2uiz+0x2e>
 8000b0a:	d50d      	bpl.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d40e      	bmi.n	8000b34 <__aeabi_d2uiz+0x34>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	fa23 f002 	lsr.w	r0, r3, r2
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_d2uiz+0x3a>
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr

08000b40 <Ov7725_Init>:
uint16_t pixels[100][150];
/************************************************
 * Sensor_Init
 ************************************************/
ErrorStatus Ov7725_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	80fb      	strh	r3, [r7, #6]
	uint8_t Sensor_IDCode = 0;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	717b      	strb	r3, [r7, #5]

	if (0 == SCCB_WriteByte(0x12, 0x80)) /*reset sensor */
 8000b4e:	2180      	movs	r1, #128	; 0x80
 8000b50:	2012      	movs	r0, #18
 8000b52:	f000 f955 	bl	8000e00 <SCCB_WriteByte>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d101      	bne.n	8000b60 <Ov7725_Init+0x20>
	{
		return ERROR;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	e030      	b.n	8000bc2 <Ov7725_Init+0x82>
	}

	if (0 == SCCB_ReadByte(&Sensor_IDCode, 1, 0x0b)) /* read sensor ID*/
 8000b60:	1d7b      	adds	r3, r7, #5
 8000b62:	220b      	movs	r2, #11
 8000b64:	2101      	movs	r1, #1
 8000b66:	4618      	mov	r0, r3
 8000b68:	f000 f979 	bl	8000e5e <SCCB_ReadByte>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d101      	bne.n	8000b76 <Ov7725_Init+0x36>
	{
		return ERROR;
 8000b72:	2300      	movs	r3, #0
 8000b74:	e025      	b.n	8000bc2 <Ov7725_Init+0x82>
	}
	// DEBUG("Sensor ID is 0x%x", Sensor_IDCode);

	if (Sensor_IDCode == OV7725_ID)
 8000b76:	797b      	ldrb	r3, [r7, #5]
 8000b78:	2b21      	cmp	r3, #33	; 0x21
 8000b7a:	d11f      	bne.n	8000bbc <Ov7725_Init+0x7c>
	{
		for (i = 0; i < OV7725_REG_NUM; i++)
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	80fb      	strh	r3, [r7, #6]
 8000b80:	e015      	b.n	8000bae <Ov7725_Init+0x6e>
		{
			if (0 == SCCB_WriteByte(Sensor_Config[i].Address, Sensor_Config[i].Value))
 8000b82:	88fb      	ldrh	r3, [r7, #6]
 8000b84:	4a11      	ldr	r2, [pc, #68]	; (8000bcc <Ov7725_Init+0x8c>)
 8000b86:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000b8a:	b29a      	uxth	r2, r3
 8000b8c:	88fb      	ldrh	r3, [r7, #6]
 8000b8e:	490f      	ldr	r1, [pc, #60]	; (8000bcc <Ov7725_Init+0x8c>)
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	440b      	add	r3, r1
 8000b94:	785b      	ldrb	r3, [r3, #1]
 8000b96:	4619      	mov	r1, r3
 8000b98:	4610      	mov	r0, r2
 8000b9a:	f000 f931 	bl	8000e00 <SCCB_WriteByte>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d101      	bne.n	8000ba8 <Ov7725_Init+0x68>
			{
				return ERROR;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	e00c      	b.n	8000bc2 <Ov7725_Init+0x82>
		for (i = 0; i < OV7725_REG_NUM; i++)
 8000ba8:	88fb      	ldrh	r3, [r7, #6]
 8000baa:	3301      	adds	r3, #1
 8000bac:	80fb      	strh	r3, [r7, #6]
 8000bae:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <Ov7725_Init+0x90>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	88fa      	ldrh	r2, [r7, #6]
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d3e3      	bcc.n	8000b82 <Ov7725_Init+0x42>
 8000bba:	e001      	b.n	8000bc0 <Ov7725_Init+0x80>
			}
		}
	}
	else
	{
		return ERROR;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	e000      	b.n	8000bc2 <Ov7725_Init+0x82>
	}

	return SUCCESS;
 8000bc0:	2301      	movs	r3, #1
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000000 	.word	0x20000000
 8000bd0:	2000009a 	.word	0x2000009a

08000bd4 <SCCB_delay>:

#define DEV_ADR  ADDR_OV7725 			 


static void SCCB_delay(void)
{	
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
   uint16_t i = 400; 
 8000bda:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000bde:	80fb      	strh	r3, [r7, #6]
   while(i) 
 8000be0:	e002      	b.n	8000be8 <SCCB_delay+0x14>
   { 
     i--; 
 8000be2:	88fb      	ldrh	r3, [r7, #6]
 8000be4:	3b01      	subs	r3, #1
 8000be6:	80fb      	strh	r3, [r7, #6]
   while(i) 
 8000be8:	88fb      	ldrh	r3, [r7, #6]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d1f9      	bne.n	8000be2 <SCCB_delay+0xe>
   } 
}
 8000bee:	bf00      	nop
 8000bf0:	bf00      	nop
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bc80      	pop	{r7}
 8000bf8:	4770      	bx	lr
	...

08000bfc <SCCB_Start>:


static int SCCB_Start(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
	SDA_H;
 8000c00:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <SCCB_Start+0x54>)
 8000c02:	2280      	movs	r2, #128	; 0x80
 8000c04:	611a      	str	r2, [r3, #16]
	SCL_H;
 8000c06:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <SCCB_Start+0x54>)
 8000c08:	2240      	movs	r2, #64	; 0x40
 8000c0a:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000c0c:	f7ff ffe2 	bl	8000bd4 <SCCB_delay>
	if(!SDA_read)
 8000c10:	2180      	movs	r1, #128	; 0x80
 8000c12:	480f      	ldr	r0, [pc, #60]	; (8000c50 <SCCB_Start+0x54>)
 8000c14:	f003 fab2 	bl	800417c <HAL_GPIO_ReadPin>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d101      	bne.n	8000c22 <SCCB_Start+0x26>
	return DISABLE;	
 8000c1e:	2300      	movs	r3, #0
 8000c20:	e013      	b.n	8000c4a <SCCB_Start+0x4e>
	SDA_L;
 8000c22:	4b0b      	ldr	r3, [pc, #44]	; (8000c50 <SCCB_Start+0x54>)
 8000c24:	2280      	movs	r2, #128	; 0x80
 8000c26:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000c28:	f7ff ffd4 	bl	8000bd4 <SCCB_delay>
	if(SDA_read) 
 8000c2c:	2180      	movs	r1, #128	; 0x80
 8000c2e:	4808      	ldr	r0, [pc, #32]	; (8000c50 <SCCB_Start+0x54>)
 8000c30:	f003 faa4 	bl	800417c <HAL_GPIO_ReadPin>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <SCCB_Start+0x42>
	return DISABLE;	
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	e005      	b.n	8000c4a <SCCB_Start+0x4e>
	SDA_L;
 8000c3e:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <SCCB_Start+0x54>)
 8000c40:	2280      	movs	r2, #128	; 0x80
 8000c42:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000c44:	f7ff ffc6 	bl	8000bd4 <SCCB_delay>
	return ENABLE;
 8000c48:	2301      	movs	r3, #1
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40011000 	.word	0x40011000

08000c54 <SCCB_Stop>:


static void SCCB_Stop(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
	SCL_L;
 8000c58:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <SCCB_Stop+0x30>)
 8000c5a:	2240      	movs	r2, #64	; 0x40
 8000c5c:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000c5e:	f7ff ffb9 	bl	8000bd4 <SCCB_delay>
	SDA_L;
 8000c62:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <SCCB_Stop+0x30>)
 8000c64:	2280      	movs	r2, #128	; 0x80
 8000c66:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000c68:	f7ff ffb4 	bl	8000bd4 <SCCB_delay>
	SCL_H;
 8000c6c:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <SCCB_Stop+0x30>)
 8000c6e:	2240      	movs	r2, #64	; 0x40
 8000c70:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000c72:	f7ff ffaf 	bl	8000bd4 <SCCB_delay>
	SDA_H;
 8000c76:	4b03      	ldr	r3, [pc, #12]	; (8000c84 <SCCB_Stop+0x30>)
 8000c78:	2280      	movs	r2, #128	; 0x80
 8000c7a:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000c7c:	f7ff ffaa 	bl	8000bd4 <SCCB_delay>
}
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40011000 	.word	0x40011000

08000c88 <SCCB_Ack>:


static void SCCB_Ack(void)
{	
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
	SCL_L;
 8000c8c:	4b0a      	ldr	r3, [pc, #40]	; (8000cb8 <SCCB_Ack+0x30>)
 8000c8e:	2240      	movs	r2, #64	; 0x40
 8000c90:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000c92:	f7ff ff9f 	bl	8000bd4 <SCCB_delay>
	SDA_L;
 8000c96:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <SCCB_Ack+0x30>)
 8000c98:	2280      	movs	r2, #128	; 0x80
 8000c9a:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000c9c:	f7ff ff9a 	bl	8000bd4 <SCCB_delay>
	SCL_H;
 8000ca0:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <SCCB_Ack+0x30>)
 8000ca2:	2240      	movs	r2, #64	; 0x40
 8000ca4:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000ca6:	f7ff ff95 	bl	8000bd4 <SCCB_delay>
	SCL_L;
 8000caa:	4b03      	ldr	r3, [pc, #12]	; (8000cb8 <SCCB_Ack+0x30>)
 8000cac:	2240      	movs	r2, #64	; 0x40
 8000cae:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000cb0:	f7ff ff90 	bl	8000bd4 <SCCB_delay>
}
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40011000 	.word	0x40011000

08000cbc <SCCB_NoAck>:


static void SCCB_NoAck(void)
{	
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
	SCL_L;
 8000cc0:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <SCCB_NoAck+0x30>)
 8000cc2:	2240      	movs	r2, #64	; 0x40
 8000cc4:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000cc6:	f7ff ff85 	bl	8000bd4 <SCCB_delay>
	SDA_H;
 8000cca:	4b08      	ldr	r3, [pc, #32]	; (8000cec <SCCB_NoAck+0x30>)
 8000ccc:	2280      	movs	r2, #128	; 0x80
 8000cce:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000cd0:	f7ff ff80 	bl	8000bd4 <SCCB_delay>
	SCL_H;
 8000cd4:	4b05      	ldr	r3, [pc, #20]	; (8000cec <SCCB_NoAck+0x30>)
 8000cd6:	2240      	movs	r2, #64	; 0x40
 8000cd8:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000cda:	f7ff ff7b 	bl	8000bd4 <SCCB_delay>
	SCL_L;
 8000cde:	4b03      	ldr	r3, [pc, #12]	; (8000cec <SCCB_NoAck+0x30>)
 8000ce0:	2240      	movs	r2, #64	; 0x40
 8000ce2:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000ce4:	f7ff ff76 	bl	8000bd4 <SCCB_delay>
}
 8000ce8:	bf00      	nop
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40011000 	.word	0x40011000

08000cf0 <SCCB_WaitAck>:


static int SCCB_WaitAck(void) 	
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
	SCL_L;
 8000cf4:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <SCCB_WaitAck+0x48>)
 8000cf6:	2240      	movs	r2, #64	; 0x40
 8000cf8:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000cfa:	f7ff ff6b 	bl	8000bd4 <SCCB_delay>
	SDA_H;			
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <SCCB_WaitAck+0x48>)
 8000d00:	2280      	movs	r2, #128	; 0x80
 8000d02:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000d04:	f7ff ff66 	bl	8000bd4 <SCCB_delay>
	SCL_H;
 8000d08:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <SCCB_WaitAck+0x48>)
 8000d0a:	2240      	movs	r2, #64	; 0x40
 8000d0c:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000d0e:	f7ff ff61 	bl	8000bd4 <SCCB_delay>
	if(SDA_read)
 8000d12:	2180      	movs	r1, #128	; 0x80
 8000d14:	4808      	ldr	r0, [pc, #32]	; (8000d38 <SCCB_WaitAck+0x48>)
 8000d16:	f003 fa31 	bl	800417c <HAL_GPIO_ReadPin>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d004      	beq.n	8000d2a <SCCB_WaitAck+0x3a>
	{
      SCL_L;
 8000d20:	4b05      	ldr	r3, [pc, #20]	; (8000d38 <SCCB_WaitAck+0x48>)
 8000d22:	2240      	movs	r2, #64	; 0x40
 8000d24:	615a      	str	r2, [r3, #20]
      return DISABLE;
 8000d26:	2300      	movs	r3, #0
 8000d28:	e003      	b.n	8000d32 <SCCB_WaitAck+0x42>
	}
	SCL_L;
 8000d2a:	4b03      	ldr	r3, [pc, #12]	; (8000d38 <SCCB_WaitAck+0x48>)
 8000d2c:	2240      	movs	r2, #64	; 0x40
 8000d2e:	615a      	str	r2, [r3, #20]
	return ENABLE;
 8000d30:	2301      	movs	r3, #1
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40011000 	.word	0x40011000

08000d3c <SCCB_SendByte>:


static void SCCB_SendByte(uint8_t SendByte) 
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
    uint8_t i=8;
 8000d46:	2308      	movs	r3, #8
 8000d48:	73fb      	strb	r3, [r7, #15]
    while(i--)
 8000d4a:	e019      	b.n	8000d80 <SCCB_SendByte+0x44>
    {
        SCL_L;
 8000d4c:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <SCCB_SendByte+0x5c>)
 8000d4e:	2240      	movs	r2, #64	; 0x40
 8000d50:	615a      	str	r2, [r3, #20]
        SCCB_delay();
 8000d52:	f7ff ff3f 	bl	8000bd4 <SCCB_delay>
      if(SendByte&0x80)
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	da03      	bge.n	8000d66 <SCCB_SendByte+0x2a>
        SDA_H;  
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <SCCB_SendByte+0x5c>)
 8000d60:	2280      	movs	r2, #128	; 0x80
 8000d62:	611a      	str	r2, [r3, #16]
 8000d64:	e002      	b.n	8000d6c <SCCB_SendByte+0x30>
      else 
        SDA_L;   
 8000d66:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <SCCB_SendByte+0x5c>)
 8000d68:	2280      	movs	r2, #128	; 0x80
 8000d6a:	615a      	str	r2, [r3, #20]
        SendByte<<=1;
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	71fb      	strb	r3, [r7, #7]
        SCCB_delay();
 8000d72:	f7ff ff2f 	bl	8000bd4 <SCCB_delay>
		SCL_H;
 8000d76:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <SCCB_SendByte+0x5c>)
 8000d78:	2240      	movs	r2, #64	; 0x40
 8000d7a:	611a      	str	r2, [r3, #16]
        SCCB_delay();
 8000d7c:	f7ff ff2a 	bl	8000bd4 <SCCB_delay>
    while(i--)
 8000d80:	7bfb      	ldrb	r3, [r7, #15]
 8000d82:	1e5a      	subs	r2, r3, #1
 8000d84:	73fa      	strb	r2, [r7, #15]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d1e0      	bne.n	8000d4c <SCCB_SendByte+0x10>
    }
    SCL_L;
 8000d8a:	4b03      	ldr	r3, [pc, #12]	; (8000d98 <SCCB_SendByte+0x5c>)
 8000d8c:	2240      	movs	r2, #64	; 0x40
 8000d8e:	615a      	str	r2, [r3, #20]
}
 8000d90:	bf00      	nop
 8000d92:	3710      	adds	r7, #16
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40011000 	.word	0x40011000

08000d9c <SCCB_ReceiveByte>:


static int SCCB_ReceiveByte(void)  
{ 
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
    uint8_t i=8;
 8000da2:	2308      	movs	r3, #8
 8000da4:	71fb      	strb	r3, [r7, #7]
    uint8_t ReceiveByte=0;
 8000da6:	2300      	movs	r3, #0
 8000da8:	71bb      	strb	r3, [r7, #6]

    SDA_H;				
 8000daa:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <SCCB_ReceiveByte+0x60>)
 8000dac:	2280      	movs	r2, #128	; 0x80
 8000dae:	611a      	str	r2, [r3, #16]
    while(i--)
 8000db0:	e017      	b.n	8000de2 <SCCB_ReceiveByte+0x46>
    {
      ReceiveByte<<=1;      
 8000db2:	79bb      	ldrb	r3, [r7, #6]
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	71bb      	strb	r3, [r7, #6]
      SCL_L;
 8000db8:	4b10      	ldr	r3, [pc, #64]	; (8000dfc <SCCB_ReceiveByte+0x60>)
 8000dba:	2240      	movs	r2, #64	; 0x40
 8000dbc:	615a      	str	r2, [r3, #20]
      SCCB_delay();
 8000dbe:	f7ff ff09 	bl	8000bd4 <SCCB_delay>
	  SCL_H;
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <SCCB_ReceiveByte+0x60>)
 8000dc4:	2240      	movs	r2, #64	; 0x40
 8000dc6:	611a      	str	r2, [r3, #16]
      SCCB_delay();	
 8000dc8:	f7ff ff04 	bl	8000bd4 <SCCB_delay>
      if(SDA_read)
 8000dcc:	2180      	movs	r1, #128	; 0x80
 8000dce:	480b      	ldr	r0, [pc, #44]	; (8000dfc <SCCB_ReceiveByte+0x60>)
 8000dd0:	f003 f9d4 	bl	800417c <HAL_GPIO_ReadPin>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d003      	beq.n	8000de2 <SCCB_ReceiveByte+0x46>
      {
        ReceiveByte|=0x01;
 8000dda:	79bb      	ldrb	r3, [r7, #6]
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	71bb      	strb	r3, [r7, #6]
    while(i--)
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	1e5a      	subs	r2, r3, #1
 8000de6:	71fa      	strb	r2, [r7, #7]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d1e2      	bne.n	8000db2 <SCCB_ReceiveByte+0x16>
      }
    }
    SCL_L;
 8000dec:	4b03      	ldr	r3, [pc, #12]	; (8000dfc <SCCB_ReceiveByte+0x60>)
 8000dee:	2240      	movs	r2, #64	; 0x40
 8000df0:	615a      	str	r2, [r3, #20]
    return ReceiveByte;
 8000df2:	79bb      	ldrb	r3, [r7, #6]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40011000 	.word	0x40011000

08000e00 <SCCB_WriteByte>:

          
int SCCB_WriteByte( uint16_t WriteAddress , uint8_t SendByte )
{		
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	460a      	mov	r2, r1
 8000e0a:	80fb      	strh	r3, [r7, #6]
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	717b      	strb	r3, [r7, #5]
    if(!SCCB_Start())
 8000e10:	f7ff fef4 	bl	8000bfc <SCCB_Start>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d101      	bne.n	8000e1e <SCCB_WriteByte+0x1e>
	{
	    return DISABLE;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	e01b      	b.n	8000e56 <SCCB_WriteByte+0x56>
	}
    SCCB_SendByte( DEV_ADR );                
 8000e1e:	2042      	movs	r0, #66	; 0x42
 8000e20:	f7ff ff8c 	bl	8000d3c <SCCB_SendByte>
    if( !SCCB_WaitAck() )
 8000e24:	f7ff ff64 	bl	8000cf0 <SCCB_WaitAck>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d103      	bne.n	8000e36 <SCCB_WriteByte+0x36>
	{
		SCCB_Stop(); 
 8000e2e:	f7ff ff11 	bl	8000c54 <SCCB_Stop>
		return DISABLE;
 8000e32:	2300      	movs	r3, #0
 8000e34:	e00f      	b.n	8000e56 <SCCB_WriteByte+0x56>
	}
    SCCB_SendByte((uint8_t)(WriteAddress & 0x00FF));  
 8000e36:	88fb      	ldrh	r3, [r7, #6]
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff ff7e 	bl	8000d3c <SCCB_SendByte>
    SCCB_WaitAck();	
 8000e40:	f7ff ff56 	bl	8000cf0 <SCCB_WaitAck>
    SCCB_SendByte(SendByte);
 8000e44:	797b      	ldrb	r3, [r7, #5]
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff ff78 	bl	8000d3c <SCCB_SendByte>
    SCCB_WaitAck();   
 8000e4c:	f7ff ff50 	bl	8000cf0 <SCCB_WaitAck>
    SCCB_Stop(); 
 8000e50:	f7ff ff00 	bl	8000c54 <SCCB_Stop>
    return ENABLE;
 8000e54:	2301      	movs	r3, #1
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <SCCB_ReadByte>:

          
int SCCB_ReadByte(uint8_t* pBuffer, uint16_t length, uint8_t ReadAddress)
{	
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b082      	sub	sp, #8
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
 8000e66:	460b      	mov	r3, r1
 8000e68:	807b      	strh	r3, [r7, #2]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	707b      	strb	r3, [r7, #1]
    if(!SCCB_Start())
 8000e6e:	f7ff fec5 	bl	8000bfc <SCCB_Start>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d101      	bne.n	8000e7c <SCCB_ReadByte+0x1e>
	{
	    return DISABLE;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	e040      	b.n	8000efe <SCCB_ReadByte+0xa0>
	}
    SCCB_SendByte( DEV_ADR );       
 8000e7c:	2042      	movs	r0, #66	; 0x42
 8000e7e:	f7ff ff5d 	bl	8000d3c <SCCB_SendByte>
    if( !SCCB_WaitAck() )
 8000e82:	f7ff ff35 	bl	8000cf0 <SCCB_WaitAck>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d103      	bne.n	8000e94 <SCCB_ReadByte+0x36>
	{
		SCCB_Stop(); 
 8000e8c:	f7ff fee2 	bl	8000c54 <SCCB_Stop>
		return DISABLE;
 8000e90:	2300      	movs	r3, #0
 8000e92:	e034      	b.n	8000efe <SCCB_ReadByte+0xa0>
	}
    SCCB_SendByte( ReadAddress );     
 8000e94:	787b      	ldrb	r3, [r7, #1]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff ff50 	bl	8000d3c <SCCB_SendByte>
    SCCB_WaitAck();	
 8000e9c:	f7ff ff28 	bl	8000cf0 <SCCB_WaitAck>
    SCCB_Stop(); 
 8000ea0:	f7ff fed8 	bl	8000c54 <SCCB_Stop>
	
    if(!SCCB_Start())
 8000ea4:	f7ff feaa 	bl	8000bfc <SCCB_Start>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d101      	bne.n	8000eb2 <SCCB_ReadByte+0x54>
	{
		return DISABLE;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	e025      	b.n	8000efe <SCCB_ReadByte+0xa0>
	}
    SCCB_SendByte( DEV_ADR + 1 );   
 8000eb2:	2043      	movs	r0, #67	; 0x43
 8000eb4:	f7ff ff42 	bl	8000d3c <SCCB_SendByte>
    if(!SCCB_WaitAck())
 8000eb8:	f7ff ff1a 	bl	8000cf0 <SCCB_WaitAck>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d117      	bne.n	8000ef2 <SCCB_ReadByte+0x94>
	{
		SCCB_Stop(); 
 8000ec2:	f7ff fec7 	bl	8000c54 <SCCB_Stop>
		return DISABLE;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	e019      	b.n	8000efe <SCCB_ReadByte+0xa0>
	}
    while(length)
    {
      *pBuffer = SCCB_ReceiveByte();
 8000eca:	f7ff ff67 	bl	8000d9c <SCCB_ReceiveByte>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	701a      	strb	r2, [r3, #0]
      if(length == 1)
 8000ed6:	887b      	ldrh	r3, [r7, #2]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d102      	bne.n	8000ee2 <SCCB_ReadByte+0x84>
	  {
		  SCCB_NoAck();
 8000edc:	f7ff feee 	bl	8000cbc <SCCB_NoAck>
 8000ee0:	e001      	b.n	8000ee6 <SCCB_ReadByte+0x88>
	  }
      else
	  {
		SCCB_Ack(); 
 8000ee2:	f7ff fed1 	bl	8000c88 <SCCB_Ack>
	  }
      pBuffer++;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	607b      	str	r3, [r7, #4]
      length--;
 8000eec:	887b      	ldrh	r3, [r7, #2]
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	807b      	strh	r3, [r7, #2]
    while(length)
 8000ef2:	887b      	ldrh	r3, [r7, #2]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d1e8      	bne.n	8000eca <SCCB_ReadByte+0x6c>
    }
    SCCB_Stop();
 8000ef8:	f7ff feac 	bl	8000c54 <SCCB_Stop>
    return ENABLE;
 8000efc:	2301      	movs	r3, #1
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
	...

08000f08 <KNearest_match>:
	return 0;
}

// KNN match
void KNearest_match(uint16_t square_colors[9], uint16_t real_colors[9], uint8_t times, char *face, uint8_t bt_flags)
{
 8000f08:	b5b0      	push	{r4, r5, r7, lr}
 8000f0a:	b08e      	sub	sp, #56	; 0x38
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	603b      	str	r3, [r7, #0]
 8000f14:	4613      	mov	r3, r2
 8000f16:	71fb      	strb	r3, [r7, #7]
	// midCube[1] = (square_colors[4] >> 5) & 0x3F;
	// midCube[2] = (square_colors[4] >> 11) & 0x1F;
	// int8_t diffR = midCube[0] - midColor[0];
	// int8_t diffG = midCube[1] - midColor[1];
	// int8_t diffB = midCube[2] - midColor[2];
	for (int i = 0; i < 9; i++)
 8000f18:	2300      	movs	r3, #0
 8000f1a:	637b      	str	r3, [r7, #52]	; 0x34
 8000f1c:	e0d5      	b.n	80010ca <KNearest_match+0x1c2>
	{
		int8_t temp[3];
		float h = 0;
 8000f1e:	f04f 0300 	mov.w	r3, #0
 8000f22:	627b      	str	r3, [r7, #36]	; 0x24
		float s = 0;
 8000f24:	f04f 0300 	mov.w	r3, #0
 8000f28:	623b      	str	r3, [r7, #32]
		float v = 0;
 8000f2a:	f04f 0300 	mov.w	r3, #0
 8000f2e:	61fb      	str	r3, [r7, #28]
		temp[0] = square_colors[i] & 0x1F;
 8000f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	68fa      	ldr	r2, [r7, #12]
 8000f36:	4413      	add	r3, r2
 8000f38:	881b      	ldrh	r3, [r3, #0]
 8000f3a:	b25b      	sxtb	r3, r3
 8000f3c:	f003 031f 	and.w	r3, r3, #31
 8000f40:	b25b      	sxtb	r3, r3
 8000f42:	753b      	strb	r3, [r7, #20]
		temp[1] = (square_colors[i] >> 5) & 0x3F;
 8000f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	68fa      	ldr	r2, [r7, #12]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	881b      	ldrh	r3, [r3, #0]
 8000f4e:	095b      	lsrs	r3, r3, #5
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	b25b      	sxtb	r3, r3
 8000f54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000f58:	b25b      	sxtb	r3, r3
 8000f5a:	757b      	strb	r3, [r7, #21]
		temp[2] = (square_colors[i] >> 11) & 0x1F;
 8000f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	68fa      	ldr	r2, [r7, #12]
 8000f62:	4413      	add	r3, r2
 8000f64:	881b      	ldrh	r3, [r3, #0]
 8000f66:	0adb      	lsrs	r3, r3, #11
 8000f68:	b29b      	uxth	r3, r3
 8000f6a:	b25b      	sxtb	r3, r3
 8000f6c:	f003 031f 	and.w	r3, r3, #31
 8000f70:	b25b      	sxtb	r3, r3
 8000f72:	75bb      	strb	r3, [r7, #22]
		// rgb_to_hsv(temp[0], temp[1], temp[2], &h, &s, &v);
		uint16_t min_dist = 0xFFFF;
 8000f74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f78:	867b      	strh	r3, [r7, #50]	; 0x32
		int min_index = -1;
 8000f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (size_t i = 0; i < 6; i++)
 8000f80:	2300      	movs	r3, #0
 8000f82:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f84:	e076      	b.n	8001074 <KNearest_match+0x16c>
		{
			int8_t temp2[3];
			temp2[0] = true_colors[i] & 0x1F;
 8000f86:	4a55      	ldr	r2, [pc, #340]	; (80010dc <KNearest_match+0x1d4>)
 8000f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f8e:	b25b      	sxtb	r3, r3
 8000f90:	f003 031f 	and.w	r3, r3, #31
 8000f94:	b25b      	sxtb	r3, r3
 8000f96:	743b      	strb	r3, [r7, #16]
			temp2[1] = (true_colors[i] >> 5) & 0x3F;
 8000f98:	4a50      	ldr	r2, [pc, #320]	; (80010dc <KNearest_match+0x1d4>)
 8000f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fa0:	095b      	lsrs	r3, r3, #5
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	b25b      	sxtb	r3, r3
 8000fa6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000faa:	b25b      	sxtb	r3, r3
 8000fac:	747b      	strb	r3, [r7, #17]
			temp2[2] = (true_colors[i] >> 11) & 0x1F;
 8000fae:	4a4b      	ldr	r2, [pc, #300]	; (80010dc <KNearest_match+0x1d4>)
 8000fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fb6:	0adb      	lsrs	r3, r3, #11
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	b25b      	sxtb	r3, r3
 8000fbc:	f003 031f 	and.w	r3, r3, #31
 8000fc0:	b25b      	sxtb	r3, r3
 8000fc2:	74bb      	strb	r3, [r7, #18]
			uint16_t dist = sqrt(pow(temp[0] - temp2[0], 2) + pow(temp[1] - temp2[1], 2) + pow(temp[2] - temp2[2], 2));
 8000fc4:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff fa7b 	bl	80004cc <__aeabi_i2d>
 8000fd6:	f04f 0200 	mov.w	r2, #0
 8000fda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fde:	f005 f87b 	bl	80060d8 <pow>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	460d      	mov	r5, r1
 8000fe6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000fea:	461a      	mov	r2, r3
 8000fec:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff fa6a 	bl	80004cc <__aeabi_i2d>
 8000ff8:	f04f 0200 	mov.w	r2, #0
 8000ffc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001000:	f005 f86a 	bl	80060d8 <pow>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	4620      	mov	r0, r4
 800100a:	4629      	mov	r1, r5
 800100c:	f7ff f912 	bl	8000234 <__adddf3>
 8001010:	4602      	mov	r2, r0
 8001012:	460b      	mov	r3, r1
 8001014:	4614      	mov	r4, r2
 8001016:	461d      	mov	r5, r3
 8001018:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800101c:	461a      	mov	r2, r3
 800101e:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff fa51 	bl	80004cc <__aeabi_i2d>
 800102a:	f04f 0200 	mov.w	r2, #0
 800102e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001032:	f005 f851 	bl	80060d8 <pow>
 8001036:	4602      	mov	r2, r0
 8001038:	460b      	mov	r3, r1
 800103a:	4620      	mov	r0, r4
 800103c:	4629      	mov	r1, r5
 800103e:	f7ff f8f9 	bl	8000234 <__adddf3>
 8001042:	4602      	mov	r2, r0
 8001044:	460b      	mov	r3, r1
 8001046:	4610      	mov	r0, r2
 8001048:	4619      	mov	r1, r3
 800104a:	f005 f8ad 	bl	80061a8 <sqrt>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
 8001052:	4610      	mov	r0, r2
 8001054:	4619      	mov	r1, r3
 8001056:	f7ff fd53 	bl	8000b00 <__aeabi_d2uiz>
 800105a:	4603      	mov	r3, r0
 800105c:	837b      	strh	r3, [r7, #26]
			if (dist < min_dist)
 800105e:	8b7a      	ldrh	r2, [r7, #26]
 8001060:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001062:	429a      	cmp	r2, r3
 8001064:	d203      	bcs.n	800106e <KNearest_match+0x166>
			{
				min_dist = dist;
 8001066:	8b7b      	ldrh	r3, [r7, #26]
 8001068:	867b      	strh	r3, [r7, #50]	; 0x32
				min_index = i;
 800106a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800106c:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (size_t i = 0; i < 6; i++)
 800106e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001070:	3301      	adds	r3, #1
 8001072:	62bb      	str	r3, [r7, #40]	; 0x28
 8001074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001076:	2b05      	cmp	r3, #5
 8001078:	d985      	bls.n	8000f86 <KNearest_match+0x7e>
			}
		}
		real_colors[i] = true_colors[min_index];
 800107a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	68ba      	ldr	r2, [r7, #8]
 8001080:	4413      	add	r3, r2
 8001082:	4916      	ldr	r1, [pc, #88]	; (80010dc <KNearest_match+0x1d4>)
 8001084:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001086:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800108a:	801a      	strh	r2, [r3, #0]
		if (bt_flags == 1)
 800108c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001090:	2b01      	cmp	r3, #1
 8001092:	d117      	bne.n	80010c4 <KNearest_match+0x1bc>
		{
			if (times > 3 && i > 2)
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	2b03      	cmp	r3, #3
 8001098:	d904      	bls.n	80010a4 <KNearest_match+0x19c>
 800109a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800109c:	2b02      	cmp	r3, #2
 800109e:	dd01      	ble.n	80010a4 <KNearest_match+0x19c>
				break;
 80010a0:	bf00      	nop
			face[detection_order[times * 9 + i]] = face_colors[min_index];
		}
	}
}
 80010a2:	e016      	b.n	80010d2 <KNearest_match+0x1ca>
			face[detection_order[times * 9 + i]] = face_colors[min_index];
 80010a4:	79fa      	ldrb	r2, [r7, #7]
 80010a6:	4613      	mov	r3, r2
 80010a8:	00db      	lsls	r3, r3, #3
 80010aa:	441a      	add	r2, r3
 80010ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010ae:	4413      	add	r3, r2
 80010b0:	4a0b      	ldr	r2, [pc, #44]	; (80010e0 <KNearest_match+0x1d8>)
 80010b2:	5cd3      	ldrb	r3, [r2, r3]
 80010b4:	461a      	mov	r2, r3
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	4413      	add	r3, r2
 80010ba:	490a      	ldr	r1, [pc, #40]	; (80010e4 <KNearest_match+0x1dc>)
 80010bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010be:	440a      	add	r2, r1
 80010c0:	7812      	ldrb	r2, [r2, #0]
 80010c2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 9; i++)
 80010c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010c6:	3301      	adds	r3, #1
 80010c8:	637b      	str	r3, [r7, #52]	; 0x34
 80010ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010cc:	2b08      	cmp	r3, #8
 80010ce:	f77f af26 	ble.w	8000f1e <KNearest_match+0x16>
}
 80010d2:	bf00      	nop
 80010d4:	3738      	adds	r7, #56	; 0x38
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bdb0      	pop	{r4, r5, r7, pc}
 80010da:	bf00      	nop
 80010dc:	2000009c 	.word	0x2000009c
 80010e0:	200000b0 	.word	0x200000b0
 80010e4:	200000a8 	.word	0x200000a8

080010e8 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b088      	sub	sp, #32
 80010ec:	af00      	add	r7, sp, #0
  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80010ee:	1d3b      	adds	r3, r7, #4
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]
 80010fc:	615a      	str	r2, [r3, #20]
 80010fe:	619a      	str	r2, [r3, #24]

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001100:	4b28      	ldr	r3, [pc, #160]	; (80011a4 <MX_FSMC_Init+0xbc>)
 8001102:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001106:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001108:	4b26      	ldr	r3, [pc, #152]	; (80011a4 <MX_FSMC_Init+0xbc>)
 800110a:	4a27      	ldr	r2, [pc, #156]	; (80011a8 <MX_FSMC_Init+0xc0>)
 800110c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800110e:	4b25      	ldr	r3, [pc, #148]	; (80011a4 <MX_FSMC_Init+0xbc>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001114:	4b23      	ldr	r3, [pc, #140]	; (80011a4 <MX_FSMC_Init+0xbc>)
 8001116:	2200      	movs	r2, #0
 8001118:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800111a:	4b22      	ldr	r3, [pc, #136]	; (80011a4 <MX_FSMC_Init+0xbc>)
 800111c:	2200      	movs	r2, #0
 800111e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001120:	4b20      	ldr	r3, [pc, #128]	; (80011a4 <MX_FSMC_Init+0xbc>)
 8001122:	2210      	movs	r2, #16
 8001124:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001126:	4b1f      	ldr	r3, [pc, #124]	; (80011a4 <MX_FSMC_Init+0xbc>)
 8001128:	2200      	movs	r2, #0
 800112a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800112c:	4b1d      	ldr	r3, [pc, #116]	; (80011a4 <MX_FSMC_Init+0xbc>)
 800112e:	2200      	movs	r2, #0
 8001130:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001132:	4b1c      	ldr	r3, [pc, #112]	; (80011a4 <MX_FSMC_Init+0xbc>)
 8001134:	2200      	movs	r2, #0
 8001136:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001138:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <MX_FSMC_Init+0xbc>)
 800113a:	2200      	movs	r2, #0
 800113c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800113e:	4b19      	ldr	r3, [pc, #100]	; (80011a4 <MX_FSMC_Init+0xbc>)
 8001140:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001144:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001146:	4b17      	ldr	r3, [pc, #92]	; (80011a4 <MX_FSMC_Init+0xbc>)
 8001148:	2200      	movs	r2, #0
 800114a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 800114c:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <MX_FSMC_Init+0xbc>)
 800114e:	2200      	movs	r2, #0
 8001150:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001152:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <MX_FSMC_Init+0xbc>)
 8001154:	2200      	movs	r2, #0
 8001156:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001158:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <MX_FSMC_Init+0xbc>)
 800115a:	2200      	movs	r2, #0
 800115c:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 800115e:	230f      	movs	r3, #15
 8001160:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001162:	230f      	movs	r3, #15
 8001164:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001166:	23ff      	movs	r3, #255	; 0xff
 8001168:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 800116a:	230f      	movs	r3, #15
 800116c:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800116e:	2310      	movs	r3, #16
 8001170:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001172:	2311      	movs	r3, #17
 8001174:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001176:	2300      	movs	r3, #0
 8001178:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800117a:	1d3b      	adds	r3, r7, #4
 800117c:	2200      	movs	r2, #0
 800117e:	4619      	mov	r1, r3
 8001180:	4808      	ldr	r0, [pc, #32]	; (80011a4 <MX_FSMC_Init+0xbc>)
 8001182:	f003 fc6d 	bl	8004a60 <HAL_SRAM_Init>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 800118c:	f001 f94f 	bl	800242e <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <MX_FSMC_Init+0xc4>)
 8001192:	69db      	ldr	r3, [r3, #28]
 8001194:	4a05      	ldr	r2, [pc, #20]	; (80011ac <MX_FSMC_Init+0xc4>)
 8001196:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800119a:	61d3      	str	r3, [r2, #28]

}
 800119c:	bf00      	nop
 800119e:	3720      	adds	r7, #32
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000200 	.word	0x20000200
 80011a8:	a0000104 	.word	0xa0000104
 80011ac:	40010000 	.word	0x40010000

080011b0 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b6:	f107 0308 	add.w	r3, r7, #8
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 80011c4:	4b18      	ldr	r3, [pc, #96]	; (8001228 <HAL_FSMC_MspInit+0x78>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d129      	bne.n	8001220 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 80011cc:	4b16      	ldr	r3, [pc, #88]	; (8001228 <HAL_FSMC_MspInit+0x78>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80011d2:	4b16      	ldr	r3, [pc, #88]	; (800122c <HAL_FSMC_MspInit+0x7c>)
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	4a15      	ldr	r2, [pc, #84]	; (800122c <HAL_FSMC_MspInit+0x7c>)
 80011d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011dc:	6153      	str	r3, [r2, #20]
 80011de:	4b13      	ldr	r3, [pc, #76]	; (800122c <HAL_FSMC_MspInit+0x7c>)
 80011e0:	695b      	ldr	r3, [r3, #20]
 80011e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011e6:	607b      	str	r3, [r7, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80011ea:	f64f 7380 	movw	r3, #65408	; 0xff80
 80011ee:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f0:	2302      	movs	r3, #2
 80011f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011f4:	2303      	movs	r3, #3
 80011f6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011f8:	f107 0308 	add.w	r3, r7, #8
 80011fc:	4619      	mov	r1, r3
 80011fe:	480c      	ldr	r0, [pc, #48]	; (8001230 <HAL_FSMC_MspInit+0x80>)
 8001200:	f002 fe24 	bl	8003e4c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001204:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8001208:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120a:	2302      	movs	r3, #2
 800120c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800120e:	2303      	movs	r3, #3
 8001210:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001212:	f107 0308 	add.w	r3, r7, #8
 8001216:	4619      	mov	r1, r3
 8001218:	4806      	ldr	r0, [pc, #24]	; (8001234 <HAL_FSMC_MspInit+0x84>)
 800121a:	f002 fe17 	bl	8003e4c <HAL_GPIO_Init>
 800121e:	e000      	b.n	8001222 <HAL_FSMC_MspInit+0x72>
    return;
 8001220:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001222:	3718      	adds	r7, #24
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	20000244 	.word	0x20000244
 800122c:	40021000 	.word	0x40021000
 8001230:	40011800 	.word	0x40011800
 8001234:	40011400 	.word	0x40011400

08001238 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001240:	f7ff ffb6 	bl	80011b0 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001244:	bf00      	nop
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08a      	sub	sp, #40	; 0x28
 8001250:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001252:	f107 0318 	add.w	r3, r7, #24
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001260:	4b6e      	ldr	r3, [pc, #440]	; (800141c <MX_GPIO_Init+0x1d0>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	4a6d      	ldr	r2, [pc, #436]	; (800141c <MX_GPIO_Init+0x1d0>)
 8001266:	f043 0310 	orr.w	r3, r3, #16
 800126a:	6193      	str	r3, [r2, #24]
 800126c:	4b6b      	ldr	r3, [pc, #428]	; (800141c <MX_GPIO_Init+0x1d0>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	f003 0310 	and.w	r3, r3, #16
 8001274:	617b      	str	r3, [r7, #20]
 8001276:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001278:	4b68      	ldr	r3, [pc, #416]	; (800141c <MX_GPIO_Init+0x1d0>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	4a67      	ldr	r2, [pc, #412]	; (800141c <MX_GPIO_Init+0x1d0>)
 800127e:	f043 0304 	orr.w	r3, r3, #4
 8001282:	6193      	str	r3, [r2, #24]
 8001284:	4b65      	ldr	r3, [pc, #404]	; (800141c <MX_GPIO_Init+0x1d0>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	f003 0304 	and.w	r3, r3, #4
 800128c:	613b      	str	r3, [r7, #16]
 800128e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001290:	4b62      	ldr	r3, [pc, #392]	; (800141c <MX_GPIO_Init+0x1d0>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	4a61      	ldr	r2, [pc, #388]	; (800141c <MX_GPIO_Init+0x1d0>)
 8001296:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800129a:	6193      	str	r3, [r2, #24]
 800129c:	4b5f      	ldr	r3, [pc, #380]	; (800141c <MX_GPIO_Init+0x1d0>)
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a8:	4b5c      	ldr	r3, [pc, #368]	; (800141c <MX_GPIO_Init+0x1d0>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	4a5b      	ldr	r2, [pc, #364]	; (800141c <MX_GPIO_Init+0x1d0>)
 80012ae:	f043 0308 	orr.w	r3, r3, #8
 80012b2:	6193      	str	r3, [r2, #24]
 80012b4:	4b59      	ldr	r3, [pc, #356]	; (800141c <MX_GPIO_Init+0x1d0>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	f003 0308 	and.w	r3, r3, #8
 80012bc:	60bb      	str	r3, [r7, #8]
 80012be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012c0:	4b56      	ldr	r3, [pc, #344]	; (800141c <MX_GPIO_Init+0x1d0>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	4a55      	ldr	r2, [pc, #340]	; (800141c <MX_GPIO_Init+0x1d0>)
 80012c6:	f043 0320 	orr.w	r3, r3, #32
 80012ca:	6193      	str	r3, [r2, #24]
 80012cc:	4b53      	ldr	r3, [pc, #332]	; (800141c <MX_GPIO_Init+0x1d0>)
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	f003 0320 	and.w	r3, r3, #32
 80012d4:	607b      	str	r3, [r7, #4]
 80012d6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80012d8:	2200      	movs	r2, #0
 80012da:	210c      	movs	r1, #12
 80012dc:	4850      	ldr	r0, [pc, #320]	; (8001420 <MX_GPIO_Init+0x1d4>)
 80012de:	f002 ff64 	bl	80041aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80012e2:	2200      	movs	r2, #0
 80012e4:	21f0      	movs	r1, #240	; 0xf0
 80012e6:	484f      	ldr	r0, [pc, #316]	; (8001424 <MX_GPIO_Init+0x1d8>)
 80012e8:	f002 ff5f 	bl	80041aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_3, GPIO_PIN_RESET);
 80012ec:	2200      	movs	r2, #0
 80012ee:	f241 0108 	movw	r1, #4104	; 0x1008
 80012f2:	484d      	ldr	r0, [pc, #308]	; (8001428 <MX_GPIO_Init+0x1dc>)
 80012f4:	f002 ff59 	bl	80041aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 80012f8:	2200      	movs	r2, #0
 80012fa:	2102      	movs	r1, #2
 80012fc:	484b      	ldr	r0, [pc, #300]	; (800142c <MX_GPIO_Init+0x1e0>)
 80012fe:	f002 ff54 	bl	80041aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001302:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001306:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001308:	2300      	movs	r3, #0
 800130a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001310:	f107 0318 	add.w	r3, r7, #24
 8001314:	4619      	mov	r1, r3
 8001316:	4843      	ldr	r0, [pc, #268]	; (8001424 <MX_GPIO_Init+0x1d8>)
 8001318:	f002 fd98 	bl	8003e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800131c:	2308      	movs	r3, #8
 800131e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001320:	4b43      	ldr	r3, [pc, #268]	; (8001430 <MX_GPIO_Init+0x1e4>)
 8001322:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001328:	f107 0318 	add.w	r3, r7, #24
 800132c:	4619      	mov	r1, r3
 800132e:	483d      	ldr	r0, [pc, #244]	; (8001424 <MX_GPIO_Init+0x1d8>)
 8001330:	f002 fd8c 	bl	8003e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = START_BT_Pin;
 8001334:	2301      	movs	r3, #1
 8001336:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001338:	4b3e      	ldr	r3, [pc, #248]	; (8001434 <MX_GPIO_Init+0x1e8>)
 800133a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(START_BT_GPIO_Port, &GPIO_InitStruct);
 8001340:	f107 0318 	add.w	r3, r7, #24
 8001344:	4619      	mov	r1, r3
 8001346:	4836      	ldr	r0, [pc, #216]	; (8001420 <MX_GPIO_Init+0x1d4>)
 8001348:	f002 fd80 	bl	8003e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800134c:	230c      	movs	r3, #12
 800134e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001350:	2301      	movs	r3, #1
 8001352:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001358:	2303      	movs	r3, #3
 800135a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135c:	f107 0318 	add.w	r3, r7, #24
 8001360:	4619      	mov	r1, r3
 8001362:	482f      	ldr	r0, [pc, #188]	; (8001420 <MX_GPIO_Init+0x1d4>)
 8001364:	f002 fd72 	bl	8003e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001368:	2330      	movs	r3, #48	; 0x30
 800136a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136c:	2301      	movs	r3, #1
 800136e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001374:	2303      	movs	r3, #3
 8001376:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001378:	f107 0318 	add.w	r3, r7, #24
 800137c:	4619      	mov	r1, r3
 800137e:	4829      	ldr	r0, [pc, #164]	; (8001424 <MX_GPIO_Init+0x1d8>)
 8001380:	f002 fd64 	bl	8003e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001384:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001388:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800138a:	2300      	movs	r3, #0
 800138c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001392:	f107 0318 	add.w	r3, r7, #24
 8001396:	4619      	mov	r1, r3
 8001398:	4827      	ldr	r0, [pc, #156]	; (8001438 <MX_GPIO_Init+0x1ec>)
 800139a:	f002 fd57 	bl	8003e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_3;
 800139e:	f241 0308 	movw	r3, #4104	; 0x1008
 80013a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a4:	2301      	movs	r3, #1
 80013a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013ac:	2303      	movs	r3, #3
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013b0:	f107 0318 	add.w	r3, r7, #24
 80013b4:	4619      	mov	r1, r3
 80013b6:	481c      	ldr	r0, [pc, #112]	; (8001428 <MX_GPIO_Init+0x1dc>)
 80013b8:	f002 fd48 	bl	8003e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013bc:	23c0      	movs	r3, #192	; 0xc0
 80013be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80013c0:	2311      	movs	r3, #17
 80013c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013c8:	2303      	movs	r3, #3
 80013ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013cc:	f107 0318 	add.w	r3, r7, #24
 80013d0:	4619      	mov	r1, r3
 80013d2:	4814      	ldr	r0, [pc, #80]	; (8001424 <MX_GPIO_Init+0x1d8>)
 80013d4:	f002 fd3a 	bl	8003e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80013d8:	2302      	movs	r3, #2
 80013da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013dc:	2301      	movs	r3, #1
 80013de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013e4:	2303      	movs	r3, #3
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013e8:	f107 0318 	add.w	r3, r7, #24
 80013ec:	4619      	mov	r1, r3
 80013ee:	480f      	ldr	r0, [pc, #60]	; (800142c <MX_GPIO_Init+0x1e0>)
 80013f0:	f002 fd2c 	bl	8003e4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80013f4:	2200      	movs	r2, #0
 80013f6:	2100      	movs	r1, #0
 80013f8:	2006      	movs	r0, #6
 80013fa:	f002 fbe8 	bl	8003bce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80013fe:	2006      	movs	r0, #6
 8001400:	f002 fc01 	bl	8003c06 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001404:	2200      	movs	r2, #0
 8001406:	2100      	movs	r1, #0
 8001408:	2009      	movs	r0, #9
 800140a:	f002 fbe0 	bl	8003bce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800140e:	2009      	movs	r0, #9
 8001410:	f002 fbf9 	bl	8003c06 <HAL_NVIC_EnableIRQ>

}
 8001414:	bf00      	nop
 8001416:	3728      	adds	r7, #40	; 0x28
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40021000 	.word	0x40021000
 8001420:	40010800 	.word	0x40010800
 8001424:	40011000 	.word	0x40011000
 8001428:	40011400 	.word	0x40011400
 800142c:	40011800 	.word	0x40011800
 8001430:	10210000 	.word	0x10210000
 8001434:	10110000 	.word	0x10110000
 8001438:	40010c00 	.word	0x40010c00

0800143c <Delay>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	e002      	b.n	800144c <Delay+0x10>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	3b01      	subs	r3, #1
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1f9      	bne.n	8001446 <Delay+0xa>
 8001452:	bf00      	nop
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr

0800145e <LCD_INIT>:

void LCD_INIT ( void )
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b082      	sub	sp, #8
 8001462:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 8001464:	2001      	movs	r0, #1
 8001466:	f000 f829 	bl	80014bc <LCD_BackLed_Control>
	LCD_Rst();
 800146a:	f000 f80f 	bl	800148c <LCD_Rst>
	LCD_REG_Config();
 800146e:	f000 f85f 	bl	8001530 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 8001472:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001476:	9300      	str	r3, [sp, #0]
 8001478:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800147c:	22f0      	movs	r2, #240	; 0xf0
 800147e:	2100      	movs	r1, #0
 8001480:	2000      	movs	r0, #0
 8001482:	f000 f9e6 	bl	8001852 <LCD_Clear>
}
 8001486:	bf00      	nop
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <LCD_Rst>:



void LCD_Rst ( void )
{			
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8001490:	2200      	movs	r2, #0
 8001492:	2102      	movs	r1, #2
 8001494:	4807      	ldr	r0, [pc, #28]	; (80014b4 <LCD_Rst+0x28>)
 8001496:	f002 fe88 	bl	80041aa <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 800149a:	4807      	ldr	r0, [pc, #28]	; (80014b8 <LCD_Rst+0x2c>)
 800149c:	f7ff ffce 	bl	800143c <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 80014a0:	2201      	movs	r2, #1
 80014a2:	2102      	movs	r1, #2
 80014a4:	4803      	ldr	r0, [pc, #12]	; (80014b4 <LCD_Rst+0x28>)
 80014a6:	f002 fe80 	bl	80041aa <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 80014aa:	4803      	ldr	r0, [pc, #12]	; (80014b8 <LCD_Rst+0x2c>)
 80014ac:	f7ff ffc6 	bl	800143c <Delay>
}
 80014b0:	bf00      	nop
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40011800 	.word	0x40011800
 80014b8:	0002bffc 	.word	0x0002bffc

080014bc <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d006      	beq.n	80014da <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 80014cc:	2200      	movs	r2, #0
 80014ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014d2:	4807      	ldr	r0, [pc, #28]	; (80014f0 <LCD_BackLed_Control+0x34>)
 80014d4:	f002 fe69 	bl	80041aa <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 80014d8:	e005      	b.n	80014e6 <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 80014da:	2201      	movs	r2, #1
 80014dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014e0:	4803      	ldr	r0, [pc, #12]	; (80014f0 <LCD_BackLed_Control+0x34>)
 80014e2:	f002 fe62 	bl	80041aa <HAL_GPIO_WritePin>
}
 80014e6:	bf00      	nop
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40011400 	.word	0x40011400

080014f4 <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80014fe:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001502:	88fb      	ldrh	r3, [r7, #6]
 8001504:	8013      	strh	r3, [r2, #0]
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr

08001510 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800151a:	4a04      	ldr	r2, [pc, #16]	; (800152c <LCD_Write_Data+0x1c>)
 800151c:	88fb      	ldrh	r3, [r7, #6]
 800151e:	8013      	strh	r3, [r2, #0]
}
 8001520:	bf00      	nop
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	bc80      	pop	{r7}
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	60020000 	.word	0x60020000

08001530 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 8001534:	20cf      	movs	r0, #207	; 0xcf
 8001536:	f7ff ffdd 	bl	80014f4 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 800153a:	2000      	movs	r0, #0
 800153c:	f7ff ffe8 	bl	8001510 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 8001540:	2081      	movs	r0, #129	; 0x81
 8001542:	f7ff ffe5 	bl	8001510 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 8001546:	2030      	movs	r0, #48	; 0x30
 8001548:	f7ff ffe2 	bl	8001510 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 800154c:	20ed      	movs	r0, #237	; 0xed
 800154e:	f7ff ffd1 	bl	80014f4 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 8001552:	2064      	movs	r0, #100	; 0x64
 8001554:	f7ff ffdc 	bl	8001510 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8001558:	2003      	movs	r0, #3
 800155a:	f7ff ffd9 	bl	8001510 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 800155e:	2012      	movs	r0, #18
 8001560:	f7ff ffd6 	bl	8001510 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 8001564:	2081      	movs	r0, #129	; 0x81
 8001566:	f7ff ffd3 	bl	8001510 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 800156a:	20e8      	movs	r0, #232	; 0xe8
 800156c:	f7ff ffc2 	bl	80014f4 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 8001570:	2085      	movs	r0, #133	; 0x85
 8001572:	f7ff ffcd 	bl	8001510 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8001576:	2010      	movs	r0, #16
 8001578:	f7ff ffca 	bl	8001510 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 800157c:	2078      	movs	r0, #120	; 0x78
 800157e:	f7ff ffc7 	bl	8001510 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 8001582:	20cb      	movs	r0, #203	; 0xcb
 8001584:	f7ff ffb6 	bl	80014f4 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8001588:	2039      	movs	r0, #57	; 0x39
 800158a:	f7ff ffc1 	bl	8001510 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 800158e:	202c      	movs	r0, #44	; 0x2c
 8001590:	f7ff ffbe 	bl	8001510 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001594:	2000      	movs	r0, #0
 8001596:	f7ff ffbb 	bl	8001510 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 800159a:	2034      	movs	r0, #52	; 0x34
 800159c:	f7ff ffb8 	bl	8001510 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 80015a0:	2002      	movs	r0, #2
 80015a2:	f7ff ffb5 	bl	8001510 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 80015a6:	20f7      	movs	r0, #247	; 0xf7
 80015a8:	f7ff ffa4 	bl	80014f4 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 80015ac:	2020      	movs	r0, #32
 80015ae:	f7ff ffaf 	bl	8001510 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 80015b2:	20ea      	movs	r0, #234	; 0xea
 80015b4:	f7ff ff9e 	bl	80014f4 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80015b8:	2000      	movs	r0, #0
 80015ba:	f7ff ffa9 	bl	8001510 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80015be:	2000      	movs	r0, #0
 80015c0:	f7ff ffa6 	bl	8001510 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 80015c4:	20b1      	movs	r0, #177	; 0xb1
 80015c6:	f7ff ff95 	bl	80014f4 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80015ca:	2000      	movs	r0, #0
 80015cc:	f7ff ffa0 	bl	8001510 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 80015d0:	201b      	movs	r0, #27
 80015d2:	f7ff ff9d 	bl	8001510 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 80015d6:	20b6      	movs	r0, #182	; 0xb6
 80015d8:	f7ff ff8c 	bl	80014f4 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 80015dc:	200a      	movs	r0, #10
 80015de:	f7ff ff97 	bl	8001510 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 80015e2:	20a2      	movs	r0, #162	; 0xa2
 80015e4:	f7ff ff94 	bl	8001510 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 80015e8:	20c0      	movs	r0, #192	; 0xc0
 80015ea:	f7ff ff83 	bl	80014f4 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 80015ee:	2035      	movs	r0, #53	; 0x35
 80015f0:	f7ff ff8e 	bl	8001510 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 80015f4:	20c1      	movs	r0, #193	; 0xc1
 80015f6:	f7ff ff7d 	bl	80014f4 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 80015fa:	2011      	movs	r0, #17
 80015fc:	f7ff ff88 	bl	8001510 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 8001600:	20c5      	movs	r0, #197	; 0xc5
 8001602:	f7ff ff77 	bl	80014f4 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 8001606:	2045      	movs	r0, #69	; 0x45
 8001608:	f7ff ff82 	bl	8001510 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 800160c:	2045      	movs	r0, #69	; 0x45
 800160e:	f7ff ff7f 	bl	8001510 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 8001612:	20c7      	movs	r0, #199	; 0xc7
 8001614:	f7ff ff6e 	bl	80014f4 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8001618:	20a2      	movs	r0, #162	; 0xa2
 800161a:	f7ff ff79 	bl	8001510 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 800161e:	20f2      	movs	r0, #242	; 0xf2
 8001620:	f7ff ff68 	bl	80014f4 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001624:	2000      	movs	r0, #0
 8001626:	f7ff ff73 	bl	8001510 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 800162a:	2026      	movs	r0, #38	; 0x26
 800162c:	f7ff ff62 	bl	80014f4 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 8001630:	2001      	movs	r0, #1
 8001632:	f7ff ff6d 	bl	8001510 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 8001636:	20e0      	movs	r0, #224	; 0xe0
 8001638:	f7ff ff5c 	bl	80014f4 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 800163c:	200f      	movs	r0, #15
 800163e:	f7ff ff67 	bl	8001510 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 8001642:	2026      	movs	r0, #38	; 0x26
 8001644:	f7ff ff64 	bl	8001510 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 8001648:	2024      	movs	r0, #36	; 0x24
 800164a:	f7ff ff61 	bl	8001510 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 800164e:	200b      	movs	r0, #11
 8001650:	f7ff ff5e 	bl	8001510 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 8001654:	200e      	movs	r0, #14
 8001656:	f7ff ff5b 	bl	8001510 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 800165a:	2009      	movs	r0, #9
 800165c:	f7ff ff58 	bl	8001510 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 8001660:	2054      	movs	r0, #84	; 0x54
 8001662:	f7ff ff55 	bl	8001510 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 8001666:	20a8      	movs	r0, #168	; 0xa8
 8001668:	f7ff ff52 	bl	8001510 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 800166c:	2046      	movs	r0, #70	; 0x46
 800166e:	f7ff ff4f 	bl	8001510 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 8001672:	200c      	movs	r0, #12
 8001674:	f7ff ff4c 	bl	8001510 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8001678:	2017      	movs	r0, #23
 800167a:	f7ff ff49 	bl	8001510 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 800167e:	2009      	movs	r0, #9
 8001680:	f7ff ff46 	bl	8001510 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8001684:	200f      	movs	r0, #15
 8001686:	f7ff ff43 	bl	8001510 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 800168a:	2007      	movs	r0, #7
 800168c:	f7ff ff40 	bl	8001510 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001690:	2000      	movs	r0, #0
 8001692:	f7ff ff3d 	bl	8001510 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 8001696:	20e1      	movs	r0, #225	; 0xe1
 8001698:	f7ff ff2c 	bl	80014f4 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800169c:	2000      	movs	r0, #0
 800169e:	f7ff ff37 	bl	8001510 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 80016a2:	2019      	movs	r0, #25
 80016a4:	f7ff ff34 	bl	8001510 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 80016a8:	201b      	movs	r0, #27
 80016aa:	f7ff ff31 	bl	8001510 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 80016ae:	2004      	movs	r0, #4
 80016b0:	f7ff ff2e 	bl	8001510 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 80016b4:	2010      	movs	r0, #16
 80016b6:	f7ff ff2b 	bl	8001510 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 80016ba:	2007      	movs	r0, #7
 80016bc:	f7ff ff28 	bl	8001510 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 80016c0:	202a      	movs	r0, #42	; 0x2a
 80016c2:	f7ff ff25 	bl	8001510 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 80016c6:	2047      	movs	r0, #71	; 0x47
 80016c8:	f7ff ff22 	bl	8001510 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 80016cc:	2039      	movs	r0, #57	; 0x39
 80016ce:	f7ff ff1f 	bl	8001510 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 80016d2:	2003      	movs	r0, #3
 80016d4:	f7ff ff1c 	bl	8001510 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 80016d8:	2006      	movs	r0, #6
 80016da:	f7ff ff19 	bl	8001510 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 80016de:	2006      	movs	r0, #6
 80016e0:	f7ff ff16 	bl	8001510 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 80016e4:	2030      	movs	r0, #48	; 0x30
 80016e6:	f7ff ff13 	bl	8001510 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 80016ea:	2038      	movs	r0, #56	; 0x38
 80016ec:	f7ff ff10 	bl	8001510 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 80016f0:	200f      	movs	r0, #15
 80016f2:	f7ff ff0d 	bl	8001510 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 80016f6:	2036      	movs	r0, #54	; 0x36
 80016f8:	f7ff fefc 	bl	80014f4 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );    
 80016fc:	20c8      	movs	r0, #200	; 0xc8
 80016fe:	f7ff ff07 	bl	8001510 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 8001702:	202a      	movs	r0, #42	; 0x2a
 8001704:	f7ff fef6 	bl	80014f4 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001708:	2000      	movs	r0, #0
 800170a:	f7ff ff01 	bl	8001510 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800170e:	2000      	movs	r0, #0
 8001710:	f7ff fefe 	bl	8001510 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001714:	2000      	movs	r0, #0
 8001716:	f7ff fefb 	bl	8001510 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 800171a:	20ef      	movs	r0, #239	; 0xef
 800171c:	f7ff fef8 	bl	8001510 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8001720:	202b      	movs	r0, #43	; 0x2b
 8001722:	f7ff fee7 	bl	80014f4 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001726:	2000      	movs	r0, #0
 8001728:	f7ff fef2 	bl	8001510 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800172c:	2000      	movs	r0, #0
 800172e:	f7ff feef 	bl	8001510 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 8001732:	2001      	movs	r0, #1
 8001734:	f7ff feec 	bl	8001510 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8001738:	203f      	movs	r0, #63	; 0x3f
 800173a:	f7ff fee9 	bl	8001510 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 800173e:	203a      	movs	r0, #58	; 0x3a
 8001740:	f7ff fed8 	bl	80014f4 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 8001744:	2055      	movs	r0, #85	; 0x55
 8001746:	f7ff fee3 	bl	8001510 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 800174a:	2011      	movs	r0, #17
 800174c:	f7ff fed2 	bl	80014f4 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 8001750:	4803      	ldr	r0, [pc, #12]	; (8001760 <LCD_REG_Config+0x230>)
 8001752:	f7ff fe73 	bl	800143c <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 8001756:	2029      	movs	r0, #41	; 0x29
 8001758:	f7ff fecc 	bl	80014f4 <LCD_Write_Cmd>
	
	
}
 800175c:	bf00      	nop
 800175e:	bd80      	pop	{r7, pc}
 8001760:	0002bffc 	.word	0x0002bffc

08001764 <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8001764:	b590      	push	{r4, r7, lr}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	4604      	mov	r4, r0
 800176c:	4608      	mov	r0, r1
 800176e:	4611      	mov	r1, r2
 8001770:	461a      	mov	r2, r3
 8001772:	4623      	mov	r3, r4
 8001774:	80fb      	strh	r3, [r7, #6]
 8001776:	4603      	mov	r3, r0
 8001778:	80bb      	strh	r3, [r7, #4]
 800177a:	460b      	mov	r3, r1
 800177c:	807b      	strh	r3, [r7, #2]
 800177e:	4613      	mov	r3, r2
 8001780:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 8001782:	202a      	movs	r0, #42	; 0x2a
 8001784:	f7ff feb6 	bl	80014f4 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8001788:	88fb      	ldrh	r3, [r7, #6]
 800178a:	0a1b      	lsrs	r3, r3, #8
 800178c:	b29b      	uxth	r3, r3
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff febe 	bl	8001510 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 8001794:	88fb      	ldrh	r3, [r7, #6]
 8001796:	b2db      	uxtb	r3, r3
 8001798:	b29b      	uxth	r3, r3
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff feb8 	bl	8001510 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 80017a0:	88fa      	ldrh	r2, [r7, #6]
 80017a2:	887b      	ldrh	r3, [r7, #2]
 80017a4:	4413      	add	r3, r2
 80017a6:	3b01      	subs	r3, #1
 80017a8:	121b      	asrs	r3, r3, #8
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff feaf 	bl	8001510 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 80017b2:	88fa      	ldrh	r2, [r7, #6]
 80017b4:	887b      	ldrh	r3, [r7, #2]
 80017b6:	4413      	add	r3, r2
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	3b01      	subs	r3, #1
 80017bc:	b29b      	uxth	r3, r3
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff fea4 	bl	8001510 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 80017c8:	202b      	movs	r0, #43	; 0x2b
 80017ca:	f7ff fe93 	bl	80014f4 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 80017ce:	88bb      	ldrh	r3, [r7, #4]
 80017d0:	0a1b      	lsrs	r3, r3, #8
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff fe9b 	bl	8001510 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 80017da:	88bb      	ldrh	r3, [r7, #4]
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	b29b      	uxth	r3, r3
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff fe95 	bl	8001510 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 80017e6:	88ba      	ldrh	r2, [r7, #4]
 80017e8:	883b      	ldrh	r3, [r7, #0]
 80017ea:	4413      	add	r3, r2
 80017ec:	3b01      	subs	r3, #1
 80017ee:	121b      	asrs	r3, r3, #8
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7ff fe8c 	bl	8001510 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 80017f8:	88ba      	ldrh	r2, [r7, #4]
 80017fa:	883b      	ldrh	r3, [r7, #0]
 80017fc:	4413      	add	r3, r2
 80017fe:	b29b      	uxth	r3, r3
 8001800:	3b01      	subs	r3, #1
 8001802:	b29b      	uxth	r3, r3
 8001804:	b2db      	uxtb	r3, r3
 8001806:	b29b      	uxth	r3, r3
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff fe81 	bl	8001510 <LCD_Write_Data>
	
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	bd90      	pop	{r4, r7, pc}

08001816 <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b084      	sub	sp, #16
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
 800181e:	460b      	mov	r3, r1
 8001820:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 8001822:	2300      	movs	r3, #0
 8001824:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 8001826:	202c      	movs	r0, #44	; 0x2c
 8001828:	f7ff fe64 	bl	80014f4 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 800182c:	2300      	movs	r3, #0
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	e006      	b.n	8001840 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 8001832:	887b      	ldrh	r3, [r7, #2]
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff fe6b 	bl	8001510 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	3301      	adds	r3, #1
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fa      	ldr	r2, [r7, #12]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	429a      	cmp	r2, r3
 8001846:	d3f4      	bcc.n	8001832 <LCD_FillColor+0x1c>
		
}
 8001848:	bf00      	nop
 800184a:	bf00      	nop
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 8001852:	b590      	push	{r4, r7, lr}
 8001854:	b083      	sub	sp, #12
 8001856:	af00      	add	r7, sp, #0
 8001858:	4604      	mov	r4, r0
 800185a:	4608      	mov	r0, r1
 800185c:	4611      	mov	r1, r2
 800185e:	461a      	mov	r2, r3
 8001860:	4623      	mov	r3, r4
 8001862:	80fb      	strh	r3, [r7, #6]
 8001864:	4603      	mov	r3, r0
 8001866:	80bb      	strh	r3, [r7, #4]
 8001868:	460b      	mov	r3, r1
 800186a:	807b      	strh	r3, [r7, #2]
 800186c:	4613      	mov	r3, r2
 800186e:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8001870:	883b      	ldrh	r3, [r7, #0]
 8001872:	887a      	ldrh	r2, [r7, #2]
 8001874:	88b9      	ldrh	r1, [r7, #4]
 8001876:	88f8      	ldrh	r0, [r7, #6]
 8001878:	f7ff ff74 	bl	8001764 <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 800187c:	887b      	ldrh	r3, [r7, #2]
 800187e:	883a      	ldrh	r2, [r7, #0]
 8001880:	fb02 f303 	mul.w	r3, r2, r3
 8001884:	461a      	mov	r2, r3
 8001886:	8b3b      	ldrh	r3, [r7, #24]
 8001888:	4619      	mov	r1, r3
 800188a:	4610      	mov	r0, r2
 800188c:	f7ff ffc3 	bl	8001816 <LCD_FillColor>
	
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	bd90      	pop	{r4, r7, pc}

08001898 <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	80fb      	strh	r3, [r7, #6]
 80018a2:	460b      	mov	r3, r1
 80018a4:	80bb      	strh	r3, [r7, #4]
 80018a6:	4613      	mov	r3, r2
 80018a8:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 80018aa:	78fb      	ldrb	r3, [r7, #3]
 80018ac:	3b20      	subs	r3, #32
 80018ae:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 80018b0:	88b9      	ldrh	r1, [r7, #4]
 80018b2:	88f8      	ldrh	r0, [r7, #6]
 80018b4:	2310      	movs	r3, #16
 80018b6:	2208      	movs	r2, #8
 80018b8:	f7ff ff54 	bl	8001764 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 80018bc:	202c      	movs	r0, #44	; 0x2c
 80018be:	f7ff fe19 	bl	80014f4 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80018c2:	2300      	movs	r3, #0
 80018c4:	73bb      	strb	r3, [r7, #14]
 80018c6:	e023      	b.n	8001910 <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 80018c8:	7b3a      	ldrb	r2, [r7, #12]
 80018ca:	7bbb      	ldrb	r3, [r7, #14]
 80018cc:	4914      	ldr	r1, [pc, #80]	; (8001920 <LCD_DrawChar+0x88>)
 80018ce:	0112      	lsls	r2, r2, #4
 80018d0:	440a      	add	r2, r1
 80018d2:	4413      	add	r3, r2
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80018d8:	2300      	movs	r3, #0
 80018da:	737b      	strb	r3, [r7, #13]
 80018dc:	e012      	b.n	8001904 <LCD_DrawChar+0x6c>
		{
			if ( ucTemp & 0x01 )
 80018de:	7bfb      	ldrb	r3, [r7, #15]
 80018e0:	f003 0301 	and.w	r3, r3, #1
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d003      	beq.n	80018f0 <LCD_DrawChar+0x58>
				LCD_Write_Data ( 0x001F );
 80018e8:	201f      	movs	r0, #31
 80018ea:	f7ff fe11 	bl	8001510 <LCD_Write_Data>
 80018ee:	e003      	b.n	80018f8 <LCD_DrawChar+0x60>
			
			else
				LCD_Write_Data (  0xFFFF );								
 80018f0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80018f4:	f7ff fe0c 	bl	8001510 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 80018f8:	7bfb      	ldrb	r3, [r7, #15]
 80018fa:	085b      	lsrs	r3, r3, #1
 80018fc:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80018fe:	7b7b      	ldrb	r3, [r7, #13]
 8001900:	3301      	adds	r3, #1
 8001902:	737b      	strb	r3, [r7, #13]
 8001904:	7b7b      	ldrb	r3, [r7, #13]
 8001906:	2b07      	cmp	r3, #7
 8001908:	d9e9      	bls.n	80018de <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 800190a:	7bbb      	ldrb	r3, [r7, #14]
 800190c:	3301      	adds	r3, #1
 800190e:	73bb      	strb	r3, [r7, #14]
 8001910:	7bbb      	ldrb	r3, [r7, #14]
 8001912:	2b0f      	cmp	r3, #15
 8001914:	d9d8      	bls.n	80018c8 <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 8001916:	bf00      	nop
 8001918:	bf00      	nop
 800191a:	3710      	adds	r7, #16
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	08006f50 	.word	0x08006f50

08001924 <LCD_DrawString>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	603a      	str	r2, [r7, #0]
 800192e:	80fb      	strh	r3, [r7, #6]
 8001930:	460b      	mov	r3, r1
 8001932:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 8001934:	e01c      	b.n	8001970 <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8001936:	88fb      	ldrh	r3, [r7, #6]
 8001938:	2be8      	cmp	r3, #232	; 0xe8
 800193a:	d904      	bls.n	8001946 <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 800193c:	2300      	movs	r3, #0
 800193e:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 8001940:	88bb      	ldrh	r3, [r7, #4]
 8001942:	3310      	adds	r3, #16
 8001944:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8001946:	88bb      	ldrh	r3, [r7, #4]
 8001948:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 800194c:	d903      	bls.n	8001956 <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 800194e:	2300      	movs	r3, #0
 8001950:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 8001952:	2300      	movs	r3, #0
 8001954:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	781a      	ldrb	r2, [r3, #0]
 800195a:	88b9      	ldrh	r1, [r7, #4]
 800195c:	88fb      	ldrh	r3, [r7, #6]
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff ff9a 	bl	8001898 <LCD_DrawChar>
		
		pStr ++;
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	3301      	adds	r3, #1
 8001968:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 800196a:	88fb      	ldrh	r3, [r7, #6]
 800196c:	3308      	adds	r3, #8
 800196e:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1de      	bne.n	8001936 <LCD_DrawString+0x12>
		
	}
	
}
 8001978:	bf00      	nop
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
	...

08001984 <LCD_DrawEllipse>:

//Task 3
volatile uint8_t ellipse[2 * 75 + 1][2 * 25 + 1];

void LCD_DrawEllipse ( uint16_t usC, uint16_t usP, uint16_t SR, uint16_t LR, uint16_t usColor)
{	
 8001984:	b590      	push	{r4, r7, lr}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	4604      	mov	r4, r0
 800198c:	4608      	mov	r0, r1
 800198e:	4611      	mov	r1, r2
 8001990:	461a      	mov	r2, r3
 8001992:	4623      	mov	r3, r4
 8001994:	80fb      	strh	r3, [r7, #6]
 8001996:	4603      	mov	r3, r0
 8001998:	80bb      	strh	r3, [r7, #4]
 800199a:	460b      	mov	r3, r1
 800199c:	807b      	strh	r3, [r7, #2]
 800199e:	4613      	mov	r3, r2
 80019a0:	803b      	strh	r3, [r7, #0]
	/*
	 *  Task 3 : Implement LCD_DrawEllipse by using LCD_DrawDot
	 */
	memset(ellipse, 0, sizeof(ellipse));
 80019a2:	f641 6215 	movw	r2, #7701	; 0x1e15
 80019a6:	2100      	movs	r1, #0
 80019a8:	481a      	ldr	r0, [pc, #104]	; (8001a14 <LCD_DrawEllipse+0x90>)
 80019aa:	f003 fe97 	bl	80056dc <memset>
	// memset(ellipse, 1, 50 * (2 * SR + 1));
	uint8_t leftTopY = usC - SR;
 80019ae:	88fb      	ldrh	r3, [r7, #6]
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	887b      	ldrh	r3, [r7, #2]
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	73fb      	strb	r3, [r7, #15]
	uint8_t leftTopX = usP - LR;
 80019ba:	88bb      	ldrh	r3, [r7, #4]
 80019bc:	b2da      	uxtb	r2, r3
 80019be:	883b      	ldrh	r3, [r7, #0]
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	73bb      	strb	r3, [r7, #14]
	LCD_OpenWindow(leftTopY, leftTopX, 2 * SR + 1, 2 * LR + 1);
 80019c6:	7bfb      	ldrb	r3, [r7, #15]
 80019c8:	b298      	uxth	r0, r3
 80019ca:	7bbb      	ldrb	r3, [r7, #14]
 80019cc:	b299      	uxth	r1, r3
 80019ce:	887b      	ldrh	r3, [r7, #2]
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	3301      	adds	r3, #1
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	883b      	ldrh	r3, [r7, #0]
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	b29b      	uxth	r3, r3
 80019de:	3301      	adds	r3, #1
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	f7ff febf 	bl	8001764 <LCD_OpenWindow>
	uint8_t usWidth = 2*SR;
 80019e6:	887b      	ldrh	r3, [r7, #2]
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	737b      	strb	r3, [r7, #13]
	uint8_t usHeight = 2*LR;
 80019ee:	883b      	ldrh	r3, [r7, #0]
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	733b      	strb	r3, [r7, #12]
	LCD_FillColor ( usWidth * usHeight, usColor );
 80019f6:	7b7b      	ldrb	r3, [r7, #13]
 80019f8:	7b3a      	ldrb	r2, [r7, #12]
 80019fa:	fb02 f303 	mul.w	r3, r2, r3
 80019fe:	461a      	mov	r2, r3
 8001a00:	8c3b      	ldrh	r3, [r7, #32]
 8001a02:	4619      	mov	r1, r3
 8001a04:	4610      	mov	r0, r2
 8001a06:	f7ff ff06 	bl	8001816 <LCD_FillColor>
	// 			LCD_Write_Data(0xffff);
	// 	}
	// }
	
	
}
 8001a0a:	bf00      	nop
 8001a0c:	3714      	adds	r7, #20
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd90      	pop	{r4, r7, pc}
 8001a12:	bf00      	nop
 8001a14:	20000248 	.word	0x20000248

08001a18 <LCD_Cam_Gram>:
// This actually shows the image of the to the camera
void LCD_Cam_Gram()
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 );
 8001a1c:	2036      	movs	r0, #54	; 0x36
 8001a1e:	f7ff fd69 	bl	80014f4 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x68 );
 8001a22:	2068      	movs	r0, #104	; 0x68
 8001a24:	f7ff fd74 	bl	8001510 <LCD_Write_Data>
	DEBUG_DELAY ();

	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN );
 8001a28:	202a      	movs	r0, #42	; 0x2a
 8001a2a:	f7ff fd63 	bl	80014f4 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001a2e:	2000      	movs	r0, #0
 8001a30:	f7ff fd6e 	bl	8001510 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001a34:	2000      	movs	r0, #0
 8001a36:	f7ff fd6b 	bl	8001510 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 8001a3a:	2001      	movs	r0, #1
 8001a3c:	f7ff fd68 	bl	8001510 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8001a40:	203f      	movs	r0, #63	; 0x3f
 8001a42:	f7ff fd65 	bl	8001510 <LCD_Write_Data>

	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE );
 8001a46:	202b      	movs	r0, #43	; 0x2b
 8001a48:	f7ff fd54 	bl	80014f4 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001a4c:	2000      	movs	r0, #0
 8001a4e:	f7ff fd5f 	bl	8001510 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001a52:	2000      	movs	r0, #0
 8001a54:	f7ff fd5c 	bl	8001510 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001a58:	2000      	movs	r0, #0
 8001a5a:	f7ff fd59 	bl	8001510 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8001a5e:	20ef      	movs	r0, #239	; 0xef
 8001a60:	f7ff fd56 	bl	8001510 <LCD_Write_Data>

	LCD_Write_Cmd ( 0x2C );
 8001a64:	202c      	movs	r0, #44	; 0x2c
 8001a66:	f7ff fd45 	bl	80014f4 <LCD_Write_Cmd>

}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <K>:
extern void rotateInSpdMode(uint8_t ID, uint8_t dir, uint16_t speed);

volatile int rotate_flag = 0;
volatile unsigned char cube[6][9] = {0};
void K()
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
    HAL_Delay(800);
 8001a74:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001a78:	f001 ffb2 	bl	80039e0 <HAL_Delay>
    rotateInPosMode(3, 0, 90, 1);
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	225a      	movs	r2, #90	; 0x5a
 8001a80:	2100      	movs	r1, #0
 8001a82:	2003      	movs	r0, #3
 8001a84:	f000 fcd8 	bl	8002438 <rotateInPosMode>
    rotateInPosMode(1, 1, 90, 0);
 8001a88:	2300      	movs	r3, #0
 8001a8a:	225a      	movs	r2, #90	; 0x5a
 8001a8c:	2101      	movs	r1, #1
 8001a8e:	2001      	movs	r0, #1
 8001a90:	f000 fcd2 	bl	8002438 <rotateInPosMode>
    ++rotate_flag;
 8001a94:	4b03      	ldr	r3, [pc, #12]	; (8001aa4 <K+0x34>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	4a02      	ldr	r2, [pc, #8]	; (8001aa4 <K+0x34>)
 8001a9c:	6013      	str	r3, [r2, #0]
}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20002060 	.word	0x20002060

08001aa8 <C>:

void C()

{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
    rotateInPosMode(2, 1, 119, 1);
 8001aac:	2301      	movs	r3, #1
 8001aae:	2277      	movs	r2, #119	; 0x77
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	2002      	movs	r0, #2
 8001ab4:	f000 fcc0 	bl	8002438 <rotateInPosMode>
    HAL_Delay(50);
 8001ab8:	2032      	movs	r0, #50	; 0x32
 8001aba:	f001 ff91 	bl	80039e0 <HAL_Delay>
    rotateInPosMode(2, 0, 29, 1);
 8001abe:	2301      	movs	r3, #1
 8001ac0:	221d      	movs	r2, #29
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	2002      	movs	r0, #2
 8001ac6:	f000 fcb7 	bl	8002438 <rotateInPosMode>
}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}

08001ace <C1>:

void C1()

{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	af00      	add	r7, sp, #0
    rotateInPosMode(2, 0, 117, 1);
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	2275      	movs	r2, #117	; 0x75
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	2002      	movs	r0, #2
 8001ada:	f000 fcad 	bl	8002438 <rotateInPosMode>
    HAL_Delay(50);
 8001ade:	2032      	movs	r0, #50	; 0x32
 8001ae0:	f001 ff7e 	bl	80039e0 <HAL_Delay>
    rotateInPosMode(2, 1, 27, 1);
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	221b      	movs	r2, #27
 8001ae8:	2101      	movs	r1, #1
 8001aea:	2002      	movs	r0, #2
 8001aec:	f000 fca4 	bl	8002438 <rotateInPosMode>
}
 8001af0:	bf00      	nop
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <C2>:

void C2()

{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
    rotateInPosMode(2, 0, 207, 1);
 8001af8:	2301      	movs	r3, #1
 8001afa:	22cf      	movs	r2, #207	; 0xcf
 8001afc:	2100      	movs	r1, #0
 8001afe:	2002      	movs	r0, #2
 8001b00:	f000 fc9a 	bl	8002438 <rotateInPosMode>
    HAL_Delay(50);
 8001b04:	2032      	movs	r0, #50	; 0x32
 8001b06:	f001 ff6b 	bl	80039e0 <HAL_Delay>
    rotateInPosMode(2, 1, 27, 1);
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	221b      	movs	r2, #27
 8001b0e:	2101      	movs	r1, #1
 8001b10:	2002      	movs	r0, #2
 8001b12:	f000 fc91 	bl	8002438 <rotateInPosMode>
}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
	...

08001b1c <b>:

void b()
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
    while (rotate_flag % 4 != 0)
 8001b20:	e001      	b.n	8001b26 <b+0xa>
        K();
 8001b22:	f7ff ffa5 	bl	8001a70 <K>
    while (rotate_flag % 4 != 0)
 8001b26:	4b07      	ldr	r3, [pc, #28]	; (8001b44 <b+0x28>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0303 	and.w	r3, r3, #3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1f7      	bne.n	8001b22 <b+0x6>
    HAL_Delay(500);
 8001b32:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b36:	f001 ff53 	bl	80039e0 <HAL_Delay>
    C();
 8001b3a:	f7ff ffb5 	bl	8001aa8 <C>
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20002060 	.word	0x20002060

08001b48 <b1>:

void b1()
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
    while (rotate_flag % 4 != 0)
 8001b4c:	e001      	b.n	8001b52 <b1+0xa>
        K();
 8001b4e:	f7ff ff8f 	bl	8001a70 <K>
    while (rotate_flag % 4 != 0)
 8001b52:	4b07      	ldr	r3, [pc, #28]	; (8001b70 <b1+0x28>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0303 	and.w	r3, r3, #3
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1f7      	bne.n	8001b4e <b1+0x6>
    HAL_Delay(500);
 8001b5e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b62:	f001 ff3d 	bl	80039e0 <HAL_Delay>
    C1();
 8001b66:	f7ff ffb2 	bl	8001ace <C1>
}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20002060 	.word	0x20002060

08001b74 <b2>:

void b2()
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
    while (rotate_flag % 4 != 0)
 8001b78:	e001      	b.n	8001b7e <b2+0xa>
        K();
 8001b7a:	f7ff ff79 	bl	8001a70 <K>
    while (rotate_flag % 4 != 0)
 8001b7e:	4b07      	ldr	r3, [pc, #28]	; (8001b9c <b2+0x28>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0303 	and.w	r3, r3, #3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1f7      	bne.n	8001b7a <b2+0x6>
    HAL_Delay(500);
 8001b8a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b8e:	f001 ff27 	bl	80039e0 <HAL_Delay>
    C2();
 8001b92:	f7ff ffaf 	bl	8001af4 <C2>
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20002060 	.word	0x20002060

08001ba0 <u>:

void u()
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
    while (rotate_flag % 4 != 1)
 8001ba4:	e001      	b.n	8001baa <u+0xa>
        K();
 8001ba6:	f7ff ff63 	bl	8001a70 <K>
    while (rotate_flag % 4 != 1)
 8001baa:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <u+0x30>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	425a      	negs	r2, r3
 8001bb0:	f003 0303 	and.w	r3, r3, #3
 8001bb4:	f002 0203 	and.w	r2, r2, #3
 8001bb8:	bf58      	it	pl
 8001bba:	4253      	negpl	r3, r2
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d1f2      	bne.n	8001ba6 <u+0x6>
    HAL_Delay(500);
 8001bc0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bc4:	f001 ff0c 	bl	80039e0 <HAL_Delay>
    C();
 8001bc8:	f7ff ff6e 	bl	8001aa8 <C>
}
 8001bcc:	bf00      	nop
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20002060 	.word	0x20002060

08001bd4 <u1>:

void u1()
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
    while (rotate_flag % 4 != 1)
 8001bd8:	e001      	b.n	8001bde <u1+0xa>
        K();
 8001bda:	f7ff ff49 	bl	8001a70 <K>
    while (rotate_flag % 4 != 1)
 8001bde:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <u1+0x30>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	425a      	negs	r2, r3
 8001be4:	f003 0303 	and.w	r3, r3, #3
 8001be8:	f002 0203 	and.w	r2, r2, #3
 8001bec:	bf58      	it	pl
 8001bee:	4253      	negpl	r3, r2
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d1f2      	bne.n	8001bda <u1+0x6>
    HAL_Delay(500);
 8001bf4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bf8:	f001 fef2 	bl	80039e0 <HAL_Delay>
    C1();
 8001bfc:	f7ff ff67 	bl	8001ace <C1>
}
 8001c00:	bf00      	nop
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	20002060 	.word	0x20002060

08001c08 <u2>:

void u2()
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
    while (rotate_flag % 4 != 1)
 8001c0c:	e001      	b.n	8001c12 <u2+0xa>
        K();
 8001c0e:	f7ff ff2f 	bl	8001a70 <K>
    while (rotate_flag % 4 != 1)
 8001c12:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <u2+0x30>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	425a      	negs	r2, r3
 8001c18:	f003 0303 	and.w	r3, r3, #3
 8001c1c:	f002 0203 	and.w	r2, r2, #3
 8001c20:	bf58      	it	pl
 8001c22:	4253      	negpl	r3, r2
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d1f2      	bne.n	8001c0e <u2+0x6>
    HAL_Delay(500);
 8001c28:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c2c:	f001 fed8 	bl	80039e0 <HAL_Delay>
    C2();
 8001c30:	f7ff ff60 	bl	8001af4 <C2>
}
 8001c34:	bf00      	nop
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	20002060 	.word	0x20002060

08001c3c <f>:

void f()
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
    while (rotate_flag % 4 != 2)
 8001c40:	e001      	b.n	8001c46 <f+0xa>
        K();
 8001c42:	f7ff ff15 	bl	8001a70 <K>
    while (rotate_flag % 4 != 2)
 8001c46:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <f+0x30>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	425a      	negs	r2, r3
 8001c4c:	f003 0303 	and.w	r3, r3, #3
 8001c50:	f002 0203 	and.w	r2, r2, #3
 8001c54:	bf58      	it	pl
 8001c56:	4253      	negpl	r3, r2
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d1f2      	bne.n	8001c42 <f+0x6>
    HAL_Delay(500);
 8001c5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c60:	f001 febe 	bl	80039e0 <HAL_Delay>
    C();
 8001c64:	f7ff ff20 	bl	8001aa8 <C>
}
 8001c68:	bf00      	nop
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	20002060 	.word	0x20002060

08001c70 <f1>:

void f1()
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
    while (rotate_flag % 4 != 2)
 8001c74:	e001      	b.n	8001c7a <f1+0xa>
        K();
 8001c76:	f7ff fefb 	bl	8001a70 <K>
    while (rotate_flag % 4 != 2)
 8001c7a:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <f1+0x30>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	425a      	negs	r2, r3
 8001c80:	f003 0303 	and.w	r3, r3, #3
 8001c84:	f002 0203 	and.w	r2, r2, #3
 8001c88:	bf58      	it	pl
 8001c8a:	4253      	negpl	r3, r2
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d1f2      	bne.n	8001c76 <f1+0x6>
    HAL_Delay(500);
 8001c90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c94:	f001 fea4 	bl	80039e0 <HAL_Delay>
    C1();
 8001c98:	f7ff ff19 	bl	8001ace <C1>
}
 8001c9c:	bf00      	nop
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	20002060 	.word	0x20002060

08001ca4 <f2>:

void f2()
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
    while (rotate_flag % 4 != 2)
 8001ca8:	e001      	b.n	8001cae <f2+0xa>
        K();
 8001caa:	f7ff fee1 	bl	8001a70 <K>
    while (rotate_flag % 4 != 2)
 8001cae:	4b09      	ldr	r3, [pc, #36]	; (8001cd4 <f2+0x30>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	425a      	negs	r2, r3
 8001cb4:	f003 0303 	and.w	r3, r3, #3
 8001cb8:	f002 0203 	and.w	r2, r2, #3
 8001cbc:	bf58      	it	pl
 8001cbe:	4253      	negpl	r3, r2
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d1f2      	bne.n	8001caa <f2+0x6>
    HAL_Delay(500);
 8001cc4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001cc8:	f001 fe8a 	bl	80039e0 <HAL_Delay>
    C2();
 8001ccc:	f7ff ff12 	bl	8001af4 <C2>
}
 8001cd0:	bf00      	nop
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	20002060 	.word	0x20002060

08001cd8 <d>:

void d()
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
    while (rotate_flag % 4 != 3)
 8001cdc:	e001      	b.n	8001ce2 <d+0xa>
        K();
 8001cde:	f7ff fec7 	bl	8001a70 <K>
    while (rotate_flag % 4 != 3)
 8001ce2:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <d+0x30>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	425a      	negs	r2, r3
 8001ce8:	f003 0303 	and.w	r3, r3, #3
 8001cec:	f002 0203 	and.w	r2, r2, #3
 8001cf0:	bf58      	it	pl
 8001cf2:	4253      	negpl	r3, r2
 8001cf4:	2b03      	cmp	r3, #3
 8001cf6:	d1f2      	bne.n	8001cde <d+0x6>
    HAL_Delay(500);
 8001cf8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001cfc:	f001 fe70 	bl	80039e0 <HAL_Delay>
    C();
 8001d00:	f7ff fed2 	bl	8001aa8 <C>
}
 8001d04:	bf00      	nop
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	20002060 	.word	0x20002060

08001d0c <d1>:

void d1()
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
    while (rotate_flag % 4 != 3)
 8001d10:	e001      	b.n	8001d16 <d1+0xa>
        K();
 8001d12:	f7ff fead 	bl	8001a70 <K>
    while (rotate_flag % 4 != 3)
 8001d16:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <d1+0x30>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	425a      	negs	r2, r3
 8001d1c:	f003 0303 	and.w	r3, r3, #3
 8001d20:	f002 0203 	and.w	r2, r2, #3
 8001d24:	bf58      	it	pl
 8001d26:	4253      	negpl	r3, r2
 8001d28:	2b03      	cmp	r3, #3
 8001d2a:	d1f2      	bne.n	8001d12 <d1+0x6>
    HAL_Delay(500);
 8001d2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d30:	f001 fe56 	bl	80039e0 <HAL_Delay>
    C1();
 8001d34:	f7ff fecb 	bl	8001ace <C1>
}
 8001d38:	bf00      	nop
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	20002060 	.word	0x20002060

08001d40 <d2>:

void d2()
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
    while (rotate_flag % 4 != 3)
 8001d44:	e001      	b.n	8001d4a <d2+0xa>
        K();
 8001d46:	f7ff fe93 	bl	8001a70 <K>
    while (rotate_flag % 4 != 3)
 8001d4a:	4b09      	ldr	r3, [pc, #36]	; (8001d70 <d2+0x30>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	425a      	negs	r2, r3
 8001d50:	f003 0303 	and.w	r3, r3, #3
 8001d54:	f002 0203 	and.w	r2, r2, #3
 8001d58:	bf58      	it	pl
 8001d5a:	4253      	negpl	r3, r2
 8001d5c:	2b03      	cmp	r3, #3
 8001d5e:	d1f2      	bne.n	8001d46 <d2+0x6>
    HAL_Delay(500);
 8001d60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d64:	f001 fe3c 	bl	80039e0 <HAL_Delay>
    C2();
 8001d68:	f7ff fec4 	bl	8001af4 <C2>
}
 8001d6c:	bf00      	nop
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	20002060 	.word	0x20002060

08001d74 <r>:

void r() { rotateInPosMode(1, 0, 270, 1); }
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	2301      	movs	r3, #1
 8001d7a:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8001d7e:	2100      	movs	r1, #0
 8001d80:	2001      	movs	r0, #1
 8001d82:	f000 fb59 	bl	8002438 <rotateInPosMode>
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <r1>:
void r1() { rotateInPosMode(1, 0, 180, 1); }
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	2301      	movs	r3, #1
 8001d90:	22b4      	movs	r2, #180	; 0xb4
 8001d92:	2100      	movs	r1, #0
 8001d94:	2001      	movs	r0, #1
 8001d96:	f000 fb4f 	bl	8002438 <rotateInPosMode>
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <r2>:
void r2() { rotateInPosMode(1, 0, 90, 1); }
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	2301      	movs	r3, #1
 8001da4:	225a      	movs	r2, #90	; 0x5a
 8001da6:	2100      	movs	r1, #0
 8001da8:	2001      	movs	r0, #1
 8001daa:	f000 fb45 	bl	8002438 <rotateInPosMode>
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <l>:

void l() { rotateInPosMode(3, 1, 90, 1); }
 8001db2:	b580      	push	{r7, lr}
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	2301      	movs	r3, #1
 8001db8:	225a      	movs	r2, #90	; 0x5a
 8001dba:	2101      	movs	r1, #1
 8001dbc:	2003      	movs	r0, #3
 8001dbe:	f000 fb3b 	bl	8002438 <rotateInPosMode>
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <l1>:
void l1() { rotateInPosMode(3, 1, 180, 1); }
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	2301      	movs	r3, #1
 8001dcc:	22b4      	movs	r2, #180	; 0xb4
 8001dce:	2101      	movs	r1, #1
 8001dd0:	2003      	movs	r0, #3
 8001dd2:	f000 fb31 	bl	8002438 <rotateInPosMode>
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <l2>:
void l2() { rotateInPosMode(3, 1, 270, 1); }
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	2301      	movs	r3, #1
 8001de0:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8001de4:	2101      	movs	r1, #1
 8001de6:	2003      	movs	r0, #3
 8001de8:	f000 fb26 	bl	8002438 <rotateInPosMode>
 8001dec:	bf00      	nop
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001df0:	b590      	push	{r4, r7, lr}
 8001df2:	b0eb      	sub	sp, #428	; 0x1ac
 8001df4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001df6:	f001 fd91 	bl	800391c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dfa:	f000 fad3 	bl	80023a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dfe:	f7ff fa25 	bl	800124c <MX_GPIO_Init>
  MX_FSMC_Init();
 8001e02:	f7ff f971 	bl	80010e8 <MX_FSMC_Init>
  MX_USART1_UART_Init();
 8001e06:	f001 fc03 	bl	8003610 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001e0a:	f001 fc2b 	bl	8003664 <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  motor_flag = 7;
 8001e0e:	4b39      	ldr	r3, [pc, #228]	; (8001ef4 <main+0x104>)
 8001e10:	2207      	movs	r2, #7
 8001e12:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart1, (uint8_t *)&RxBuffer, 3);
 8001e14:	2203      	movs	r2, #3
 8001e16:	4938      	ldr	r1, [pc, #224]	; (8001ef8 <main+0x108>)
 8001e18:	4838      	ldr	r0, [pc, #224]	; (8001efc <main+0x10c>)
 8001e1a:	f002 ff4b 	bl	8004cb4 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart3, (uint8_t *)&rx_buffer, 1);
 8001e1e:	2201      	movs	r2, #1
 8001e20:	4937      	ldr	r1, [pc, #220]	; (8001f00 <main+0x110>)
 8001e22:	4838      	ldr	r0, [pc, #224]	; (8001f04 <main+0x114>)
 8001e24:	f002 ff46 	bl	8004cb4 <HAL_UART_Receive_IT>
  LCD_INIT();
 8001e28:	f7ff fb19 	bl	800145e <LCD_INIT>
  cube_t cube;
  memset(cube.face, 0, 54);
 8001e2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e30:	2236      	movs	r2, #54	; 0x36
 8001e32:	2100      	movs	r1, #0
 8001e34:	4618      	mov	r0, r3
 8001e36:	f003 fc51 	bl	80056dc <memset>
  // char line_buffer[54]  = "BBBFULRUBUURFRRRDFDFLUFDLRUUUFFDRLDLRRFLLBBLFDLUBBDDBD";
  // memcpy(cube.face, line_buffer, 54);
  LCD_Clear(50, 80, 140, 70, RED);
 8001e3a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001e3e:	9300      	str	r3, [sp, #0]
 8001e40:	2346      	movs	r3, #70	; 0x46
 8001e42:	228c      	movs	r2, #140	; 0x8c
 8001e44:	2150      	movs	r1, #80	; 0x50
 8001e46:	2032      	movs	r0, #50	; 0x32
 8001e48:	f7ff fd03 	bl	8001852 <LCD_Clear>
  LCD_DrawString(75, 100, "CAMERA TESTER");
 8001e4c:	4a2e      	ldr	r2, [pc, #184]	; (8001f08 <main+0x118>)
 8001e4e:	2164      	movs	r1, #100	; 0x64
 8001e50:	204b      	movs	r0, #75	; 0x4b
 8001e52:	f7ff fd67 	bl	8001924 <LCD_DrawString>

  HAL_Delay(2000);
 8001e56:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001e5a:	f001 fdc1 	bl	80039e0 <HAL_Delay>

  while (Ov7725_Init() != SUCCESS)
 8001e5e:	bf00      	nop
 8001e60:	f7fe fe6e 	bl	8000b40 <Ov7725_Init>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d1fa      	bne.n	8001e60 <main+0x70>
    ;
  Ov7725_vsync = 0;
 8001e6a:	4b28      	ldr	r3, [pc, #160]	; (8001f0c <main+0x11c>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	701a      	strb	r2, [r3, #0]
  uint8_t cnt = 0;
 8001e70:	2300      	movs	r3, #0
 8001e72:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
  uint8_t startCam = 0;
 8001e76:	2300      	movs	r3, #0
 8001e78:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
  while (1 && bt_flags != 4)
 8001e7c:	e277      	b.n	800236e <main+0x57e>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    if (bt_flags == 2)
 8001e7e:	4b24      	ldr	r3, [pc, #144]	; (8001f10 <main+0x120>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d102      	bne.n	8001e8e <main+0x9e>
    {
      startCam = 1;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
    }
    if (startCam)
 8001e8e:	f897 319e 	ldrb.w	r3, [r7, #414]	; 0x19e
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f000 826b 	beq.w	800236e <main+0x57e>
    {
      if (Ov7725_vsync == 2 && cnt < 12)
 8001e98:	4b1c      	ldr	r3, [pc, #112]	; (8001f0c <main+0x11c>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	f040 81bc 	bne.w	800221c <main+0x42c>
 8001ea4:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8001ea8:	2b0b      	cmp	r3, #11
 8001eaa:	f200 81b7 	bhi.w	800221c <main+0x42c>
      {
        FIFO_PREPARE;
 8001eae:	4b19      	ldr	r3, [pc, #100]	; (8001f14 <main+0x124>)
 8001eb0:	2204      	movs	r2, #4
 8001eb2:	615a      	str	r2, [r3, #20]
 8001eb4:	4b18      	ldr	r3, [pc, #96]	; (8001f18 <main+0x128>)
 8001eb6:	2220      	movs	r2, #32
 8001eb8:	615a      	str	r2, [r3, #20]
 8001eba:	4b17      	ldr	r3, [pc, #92]	; (8001f18 <main+0x128>)
 8001ebc:	2220      	movs	r2, #32
 8001ebe:	611a      	str	r2, [r3, #16]
 8001ec0:	4b14      	ldr	r3, [pc, #80]	; (8001f14 <main+0x124>)
 8001ec2:	2204      	movs	r2, #4
 8001ec4:	611a      	str	r2, [r3, #16]
 8001ec6:	4b14      	ldr	r3, [pc, #80]	; (8001f18 <main+0x128>)
 8001ec8:	2220      	movs	r2, #32
 8001eca:	615a      	str	r2, [r3, #20]
 8001ecc:	4b12      	ldr	r3, [pc, #72]	; (8001f18 <main+0x128>)
 8001ece:	2220      	movs	r2, #32
 8001ed0:	611a      	str	r2, [r3, #16]
        //	LCD_Rst();
        uint16_t temp_colors[9];
        uint16_t squareColors[9];
        //	uint16_t x, y;
        uint16_t Camera_Data;
        memset(squareColors, 0, sizeof(squareColors));
 8001ed2:	1d3b      	adds	r3, r7, #4
 8001ed4:	2212      	movs	r2, #18
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f003 fbff 	bl	80056dc <memset>
        LCD_Cam_Gram();
 8001ede:	f7ff fd9b 	bl	8001a18 <LCD_Cam_Gram>
        for (int i = 0; i < 240; i++)
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8001ee8:	e0d4      	b.n	8002094 <main+0x2a4>
        {
          for (int j = 0; j < 320; j++)
 8001eea:	2300      	movs	r3, #0
 8001eec:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8001ef0:	e0c5      	b.n	800207e <main+0x28e>
 8001ef2:	bf00      	nop
 8001ef4:	20002066 	.word	0x20002066
 8001ef8:	20002068 	.word	0x20002068
 8001efc:	20002074 	.word	0x20002074
 8001f00:	20002065 	.word	0x20002065
 8001f04:	200020b4 	.word	0x200020b4
 8001f08:	08006f00 	.word	0x08006f00
 8001f0c:	20002064 	.word	0x20002064
 8001f10:	20002070 	.word	0x20002070
 8001f14:	40010800 	.word	0x40010800
 8001f18:	40011000 	.word	0x40011000
          {
            READ_FIFO_PIXEL(Camera_Data);
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	f8a7 3190 	strh.w	r3, [r7, #400]	; 0x190
 8001f22:	4bb9      	ldr	r3, [pc, #740]	; (8002208 <main+0x418>)
 8001f24:	2220      	movs	r2, #32
 8001f26:	615a      	str	r2, [r3, #20]
 8001f28:	4bb8      	ldr	r3, [pc, #736]	; (800220c <main+0x41c>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f32:	f8a7 3190 	strh.w	r3, [r7, #400]	; 0x190
 8001f36:	4bb4      	ldr	r3, [pc, #720]	; (8002208 <main+0x418>)
 8001f38:	2220      	movs	r2, #32
 8001f3a:	611a      	str	r2, [r3, #16]
 8001f3c:	4bb2      	ldr	r3, [pc, #712]	; (8002208 <main+0x418>)
 8001f3e:	2220      	movs	r2, #32
 8001f40:	615a      	str	r2, [r3, #20]
 8001f42:	4bb2      	ldr	r3, [pc, #712]	; (800220c <main+0x41c>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	0a1b      	lsrs	r3, r3, #8
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	f8b7 3190 	ldrh.w	r3, [r7, #400]	; 0x190
 8001f50:	4313      	orrs	r3, r2
 8001f52:	f8a7 3190 	strh.w	r3, [r7, #400]	; 0x190
 8001f56:	4bac      	ldr	r3, [pc, #688]	; (8002208 <main+0x418>)
 8001f58:	2220      	movs	r2, #32
 8001f5a:	611a      	str	r2, [r3, #16]
            LCD_Write_Data(Camera_Data);
 8001f5c:	f8b7 3190 	ldrh.w	r3, [r7, #400]	; 0x190
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff fad5 	bl	8001510 <LCD_Write_Data>
            // bottom row
            if (j == 110 && i == 60)
 8001f66:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001f6a:	2b6e      	cmp	r3, #110	; 0x6e
 8001f6c:	d10a      	bne.n	8001f84 <main+0x194>
 8001f6e:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001f72:	2b3c      	cmp	r3, #60	; 0x3c
 8001f74:	d106      	bne.n	8001f84 <main+0x194>
              squareColors[0] = Camera_Data;
 8001f76:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001f7a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001f7e:	f8b7 2190 	ldrh.w	r2, [r7, #400]	; 0x190
 8001f82:	801a      	strh	r2, [r3, #0]

            if (j == 110 && i == 120)
 8001f84:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001f88:	2b6e      	cmp	r3, #110	; 0x6e
 8001f8a:	d10a      	bne.n	8001fa2 <main+0x1b2>
 8001f8c:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001f90:	2b78      	cmp	r3, #120	; 0x78
 8001f92:	d106      	bne.n	8001fa2 <main+0x1b2>
              squareColors[3] = Camera_Data;
 8001f94:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001f98:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001f9c:	f8b7 2190 	ldrh.w	r2, [r7, #400]	; 0x190
 8001fa0:	80da      	strh	r2, [r3, #6]

            if (j == 110 && i == 170)
 8001fa2:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001fa6:	2b6e      	cmp	r3, #110	; 0x6e
 8001fa8:	d10a      	bne.n	8001fc0 <main+0x1d0>
 8001faa:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001fae:	2baa      	cmp	r3, #170	; 0xaa
 8001fb0:	d106      	bne.n	8001fc0 <main+0x1d0>
              squareColors[6] = Camera_Data;
 8001fb2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001fb6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001fba:	f8b7 2190 	ldrh.w	r2, [r7, #400]	; 0x190
 8001fbe:	819a      	strh	r2, [r3, #12]

            // // middle row
            if (j == 160 && i == 60)
 8001fc0:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001fc4:	2ba0      	cmp	r3, #160	; 0xa0
 8001fc6:	d10a      	bne.n	8001fde <main+0x1ee>
 8001fc8:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001fcc:	2b3c      	cmp	r3, #60	; 0x3c
 8001fce:	d106      	bne.n	8001fde <main+0x1ee>
              squareColors[1] = Camera_Data;
 8001fd0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001fd4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001fd8:	f8b7 2190 	ldrh.w	r2, [r7, #400]	; 0x190
 8001fdc:	805a      	strh	r2, [r3, #2]

            if (j == 160 && i == 120)
 8001fde:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001fe2:	2ba0      	cmp	r3, #160	; 0xa0
 8001fe4:	d10a      	bne.n	8001ffc <main+0x20c>
 8001fe6:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001fea:	2b78      	cmp	r3, #120	; 0x78
 8001fec:	d106      	bne.n	8001ffc <main+0x20c>
              squareColors[4] = Camera_Data;
 8001fee:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001ff2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001ff6:	f8b7 2190 	ldrh.w	r2, [r7, #400]	; 0x190
 8001ffa:	811a      	strh	r2, [r3, #8]

            if (j == 160 && i == 170)
 8001ffc:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002000:	2ba0      	cmp	r3, #160	; 0xa0
 8002002:	d10a      	bne.n	800201a <main+0x22a>
 8002004:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8002008:	2baa      	cmp	r3, #170	; 0xaa
 800200a:	d106      	bne.n	800201a <main+0x22a>
              squareColors[7] = Camera_Data;
 800200c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002010:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002014:	f8b7 2190 	ldrh.w	r2, [r7, #400]	; 0x190
 8002018:	81da      	strh	r2, [r3, #14]

            // top row

            if (j == 210 && i == 60)
 800201a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800201e:	2bd2      	cmp	r3, #210	; 0xd2
 8002020:	d10a      	bne.n	8002038 <main+0x248>
 8002022:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8002026:	2b3c      	cmp	r3, #60	; 0x3c
 8002028:	d106      	bne.n	8002038 <main+0x248>
              squareColors[2] = Camera_Data;
 800202a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800202e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002032:	f8b7 2190 	ldrh.w	r2, [r7, #400]	; 0x190
 8002036:	809a      	strh	r2, [r3, #4]

            if (j == 210 && i == 120)
 8002038:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800203c:	2bd2      	cmp	r3, #210	; 0xd2
 800203e:	d10a      	bne.n	8002056 <main+0x266>
 8002040:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8002044:	2b78      	cmp	r3, #120	; 0x78
 8002046:	d106      	bne.n	8002056 <main+0x266>
              squareColors[5] = Camera_Data;
 8002048:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800204c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002050:	f8b7 2190 	ldrh.w	r2, [r7, #400]	; 0x190
 8002054:	815a      	strh	r2, [r3, #10]

            if (j == 210 && i == 170)
 8002056:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800205a:	2bd2      	cmp	r3, #210	; 0xd2
 800205c:	d10a      	bne.n	8002074 <main+0x284>
 800205e:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8002062:	2baa      	cmp	r3, #170	; 0xaa
 8002064:	d106      	bne.n	8002074 <main+0x284>
              squareColors[8] = Camera_Data;
 8002066:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800206a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800206e:	f8b7 2190 	ldrh.w	r2, [r7, #400]	; 0x190
 8002072:	821a      	strh	r2, [r3, #16]
          for (int j = 0; j < 320; j++)
 8002074:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002078:	3301      	adds	r3, #1
 800207a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 800207e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002082:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002086:	f6ff af49 	blt.w	8001f1c <main+0x12c>
        for (int i = 0; i < 240; i++)
 800208a:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800208e:	3301      	adds	r3, #1
 8002090:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8002094:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8002098:	2bef      	cmp	r3, #239	; 0xef
 800209a:	f77f af26 	ble.w	8001eea <main+0xfa>
          }
        }
        // j , i
        KNearest_match(squareColors, temp_colors, cnt, cube.face, bt_flags);
 800209e:	4b5c      	ldr	r3, [pc, #368]	; (8002210 <main+0x420>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80020a8:	f897 219f 	ldrb.w	r2, [r7, #415]	; 0x19f
 80020ac:	f107 0118 	add.w	r1, r7, #24
 80020b0:	1d38      	adds	r0, r7, #4
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	4623      	mov	r3, r4
 80020b6:	f7fe ff27 	bl	8000f08 <KNearest_match>

        LCD_DrawEllipse(110, 60, 10, 10, temp_colors[0]);  // 0 bottom left
 80020ba:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80020be:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80020c2:	881b      	ldrh	r3, [r3, #0]
 80020c4:	9300      	str	r3, [sp, #0]
 80020c6:	230a      	movs	r3, #10
 80020c8:	220a      	movs	r2, #10
 80020ca:	213c      	movs	r1, #60	; 0x3c
 80020cc:	206e      	movs	r0, #110	; 0x6e
 80020ce:	f7ff fc59 	bl	8001984 <LCD_DrawEllipse>
        LCD_DrawEllipse(110, 120, 10, 10, temp_colors[3]); // 1 bottom mid
 80020d2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80020d6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80020da:	88db      	ldrh	r3, [r3, #6]
 80020dc:	9300      	str	r3, [sp, #0]
 80020de:	230a      	movs	r3, #10
 80020e0:	220a      	movs	r2, #10
 80020e2:	2178      	movs	r1, #120	; 0x78
 80020e4:	206e      	movs	r0, #110	; 0x6e
 80020e6:	f7ff fc4d 	bl	8001984 <LCD_DrawEllipse>
        LCD_DrawEllipse(110, 170, 10, 10, temp_colors[6]); // 2 bottom right
 80020ea:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80020ee:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80020f2:	899b      	ldrh	r3, [r3, #12]
 80020f4:	9300      	str	r3, [sp, #0]
 80020f6:	230a      	movs	r3, #10
 80020f8:	220a      	movs	r2, #10
 80020fa:	21aa      	movs	r1, #170	; 0xaa
 80020fc:	206e      	movs	r0, #110	; 0x6e
 80020fe:	f7ff fc41 	bl	8001984 <LCD_DrawEllipse>

        LCD_DrawEllipse(160, 60, 10, 10, temp_colors[1]);  // 3 mid left
 8002102:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002106:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800210a:	885b      	ldrh	r3, [r3, #2]
 800210c:	9300      	str	r3, [sp, #0]
 800210e:	230a      	movs	r3, #10
 8002110:	220a      	movs	r2, #10
 8002112:	213c      	movs	r1, #60	; 0x3c
 8002114:	20a0      	movs	r0, #160	; 0xa0
 8002116:	f7ff fc35 	bl	8001984 <LCD_DrawEllipse>
        LCD_DrawEllipse(160, 120, 10, 10, temp_colors[4]); // 4 center
 800211a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800211e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002122:	891b      	ldrh	r3, [r3, #8]
 8002124:	9300      	str	r3, [sp, #0]
 8002126:	230a      	movs	r3, #10
 8002128:	220a      	movs	r2, #10
 800212a:	2178      	movs	r1, #120	; 0x78
 800212c:	20a0      	movs	r0, #160	; 0xa0
 800212e:	f7ff fc29 	bl	8001984 <LCD_DrawEllipse>
        LCD_DrawEllipse(160, 170, 10, 10, temp_colors[7]); // 5 mid right
 8002132:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002136:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800213a:	89db      	ldrh	r3, [r3, #14]
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	230a      	movs	r3, #10
 8002140:	220a      	movs	r2, #10
 8002142:	21aa      	movs	r1, #170	; 0xaa
 8002144:	20a0      	movs	r0, #160	; 0xa0
 8002146:	f7ff fc1d 	bl	8001984 <LCD_DrawEllipse>

        LCD_DrawEllipse(210, 60, 10, 10, temp_colors[2]);  // 6 top left
 800214a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800214e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002152:	889b      	ldrh	r3, [r3, #4]
 8002154:	9300      	str	r3, [sp, #0]
 8002156:	230a      	movs	r3, #10
 8002158:	220a      	movs	r2, #10
 800215a:	213c      	movs	r1, #60	; 0x3c
 800215c:	20d2      	movs	r0, #210	; 0xd2
 800215e:	f7ff fc11 	bl	8001984 <LCD_DrawEllipse>
        LCD_DrawEllipse(210, 120, 10, 10, temp_colors[5]); // 7 top mid
 8002162:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002166:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800216a:	895b      	ldrh	r3, [r3, #10]
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	230a      	movs	r3, #10
 8002170:	220a      	movs	r2, #10
 8002172:	2178      	movs	r1, #120	; 0x78
 8002174:	20d2      	movs	r0, #210	; 0xd2
 8002176:	f7ff fc05 	bl	8001984 <LCD_DrawEllipse>
        LCD_DrawEllipse(210, 170, 10, 10, temp_colors[8]); // 8 top right
 800217a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800217e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002182:	8a1b      	ldrh	r3, [r3, #16]
 8002184:	9300      	str	r3, [sp, #0]
 8002186:	230a      	movs	r3, #10
 8002188:	220a      	movs	r2, #10
 800218a:	21aa      	movs	r1, #170	; 0xaa
 800218c:	20d2      	movs	r0, #210	; 0xd2
 800218e:	f7ff fbf9 	bl	8001984 <LCD_DrawEllipse>
        if (bt_flags == 1)
 8002192:	4b1f      	ldr	r3, [pc, #124]	; (8002210 <main+0x420>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	b2db      	uxtb	r3, r3
 8002198:	2b01      	cmp	r3, #1
 800219a:	d10e      	bne.n	80021ba <main+0x3ca>
        {
          bt_flags = 5;
 800219c:	4b1c      	ldr	r3, [pc, #112]	; (8002210 <main+0x420>)
 800219e:	2205      	movs	r2, #5
 80021a0:	701a      	strb	r2, [r3, #0]
          cnt++;
 80021a2:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 80021a6:	3301      	adds	r3, #1
 80021a8:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
          HAL_UART_Transmit(&huart3, (uint8_t *)cube.face, 54, 100);
 80021ac:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80021b0:	2364      	movs	r3, #100	; 0x64
 80021b2:	2236      	movs	r2, #54	; 0x36
 80021b4:	4817      	ldr	r0, [pc, #92]	; (8002214 <main+0x424>)
 80021b6:	f002 fce4 	bl	8004b82 <HAL_UART_Transmit>
        }

        switch (cnt)
 80021ba:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 80021be:	3b01      	subs	r3, #1
 80021c0:	2b0a      	cmp	r3, #10
 80021c2:	d819      	bhi.n	80021f8 <main+0x408>
 80021c4:	a201      	add	r2, pc, #4	; (adr r2, 80021cc <main+0x3dc>)
 80021c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ca:	bf00      	nop
 80021cc:	080021f9 	.word	0x080021f9
 80021d0:	080021f9 	.word	0x080021f9
 80021d4:	080021f9 	.word	0x080021f9
 80021d8:	080021f9 	.word	0x080021f9
 80021dc:	080021f9 	.word	0x080021f9
 80021e0:	080021f9 	.word	0x080021f9
 80021e4:	080021f9 	.word	0x080021f9
 80021e8:	080021f9 	.word	0x080021f9
 80021ec:	080021f9 	.word	0x080021f9
 80021f0:	080021f9 	.word	0x080021f9
 80021f4:	080021f9 	.word	0x080021f9
          K;
          K;
          break;
        }

        HAL_Delay(1000);
 80021f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021fc:	f001 fbf0 	bl	80039e0 <HAL_Delay>
        Ov7725_vsync = 0;
 8002200:	4b05      	ldr	r3, [pc, #20]	; (8002218 <main+0x428>)
 8002202:	2200      	movs	r2, #0
 8002204:	701a      	strb	r2, [r3, #0]
 8002206:	e0b2      	b.n	800236e <main+0x57e>
 8002208:	40011000 	.word	0x40011000
 800220c:	40010c00 	.word	0x40010c00
 8002210:	20002070 	.word	0x20002070
 8002214:	200020b4 	.word	0x200020b4
 8002218:	20002064 	.word	0x20002064
        continue;
      }
      if (cnt == 12)
 800221c:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8002220:	2b0c      	cmp	r3, #12
 8002222:	d11c      	bne.n	800225e <main+0x46e>
      {
        LCD_Clear(0, 0, 240, 320, BACKGROUND);
 8002224:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002228:	9300      	str	r3, [sp, #0]
 800222a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800222e:	22f0      	movs	r2, #240	; 0xf0
 8002230:	2100      	movs	r1, #0
 8002232:	2000      	movs	r0, #0
 8002234:	f7ff fb0d 	bl	8001852 <LCD_Clear>
        LCD_Clear(50, 80, 140, 70, ORANGE);
 8002238:	f64f 33a0 	movw	r3, #64416	; 0xfba0
 800223c:	9300      	str	r3, [sp, #0]
 800223e:	2346      	movs	r3, #70	; 0x46
 8002240:	228c      	movs	r2, #140	; 0x8c
 8002242:	2150      	movs	r1, #80	; 0x50
 8002244:	2032      	movs	r0, #50	; 0x32
 8002246:	f7ff fb04 	bl	8001852 <LCD_Clear>
        LCD_DrawString(75, 100, "DETECTION DONE, WAITING FOR COMMAND");
 800224a:	4a54      	ldr	r2, [pc, #336]	; (800239c <main+0x5ac>)
 800224c:	2164      	movs	r1, #100	; 0x64
 800224e:	204b      	movs	r0, #75	; 0x4b
 8002250:	f7ff fb68 	bl	8001924 <LCD_DrawString>
        cnt++;
 8002254:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8002258:	3301      	adds	r3, #1
 800225a:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
      }
      if (bt_flags == 3)
 800225e:	4b50      	ldr	r3, [pc, #320]	; (80023a0 <main+0x5b0>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	b2db      	uxtb	r3, r3
 8002264:	2b03      	cmp	r3, #3
 8002266:	f040 8082 	bne.w	800236e <main+0x57e>
      {
        solve_Naive(&cube);
 800226a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800226e:	4618      	mov	r0, r3
 8002270:	f000 ff54 	bl	800311c <solve_Naive>
        for (uint16_t i = 0; i < cube.routeLen; i++)
 8002274:	2300      	movs	r3, #0
 8002276:	f8a7 3192 	strh.w	r3, [r7, #402]	; 0x192
 800227a:	e06d      	b.n	8002358 <main+0x568>
        {
          switch (cube.route[i])
 800227c:	f8b7 3192 	ldrh.w	r3, [r7, #402]	; 0x192
 8002280:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8002284:	f5a2 72ba 	sub.w	r2, r2, #372	; 0x174
 8002288:	4413      	add	r3, r2
 800228a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800228e:	2b11      	cmp	r3, #17
 8002290:	d85c      	bhi.n	800234c <main+0x55c>
 8002292:	a201      	add	r2, pc, #4	; (adr r2, 8002298 <main+0x4a8>)
 8002294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002298:	080022e1 	.word	0x080022e1
 800229c:	080022e7 	.word	0x080022e7
 80022a0:	080022ed 	.word	0x080022ed
 80022a4:	080022f3 	.word	0x080022f3
 80022a8:	080022f9 	.word	0x080022f9
 80022ac:	080022ff 	.word	0x080022ff
 80022b0:	08002305 	.word	0x08002305
 80022b4:	0800230b 	.word	0x0800230b
 80022b8:	08002311 	.word	0x08002311
 80022bc:	08002317 	.word	0x08002317
 80022c0:	0800231d 	.word	0x0800231d
 80022c4:	08002323 	.word	0x08002323
 80022c8:	08002329 	.word	0x08002329
 80022cc:	0800232f 	.word	0x0800232f
 80022d0:	08002335 	.word	0x08002335
 80022d4:	0800233b 	.word	0x0800233b
 80022d8:	08002341 	.word	0x08002341
 80022dc:	08002347 	.word	0x08002347
          {
          case 0:
            l();
 80022e0:	f7ff fd67 	bl	8001db2 <l>
            break;
 80022e4:	e033      	b.n	800234e <main+0x55e>
          case 1:
            l1();
 80022e6:	f7ff fd6e 	bl	8001dc6 <l1>
            break;
 80022ea:	e030      	b.n	800234e <main+0x55e>
          case 2:
            l2();
 80022ec:	f7ff fd75 	bl	8001dda <l2>
            break;
 80022f0:	e02d      	b.n	800234e <main+0x55e>
          case 3:
            r();
 80022f2:	f7ff fd3f 	bl	8001d74 <r>
            break;
 80022f6:	e02a      	b.n	800234e <main+0x55e>
          case 4:
            r1();
 80022f8:	f7ff fd47 	bl	8001d8a <r1>
            break;
 80022fc:	e027      	b.n	800234e <main+0x55e>
          case 5:
            r2();
 80022fe:	f7ff fd4e 	bl	8001d9e <r2>
            break;
 8002302:	e024      	b.n	800234e <main+0x55e>
          case 6:
            u();
 8002304:	f7ff fc4c 	bl	8001ba0 <u>
            break;
 8002308:	e021      	b.n	800234e <main+0x55e>
          case 7:
            u1();
 800230a:	f7ff fc63 	bl	8001bd4 <u1>
            break;
 800230e:	e01e      	b.n	800234e <main+0x55e>
          case 8:
            u2();
 8002310:	f7ff fc7a 	bl	8001c08 <u2>
            break;
 8002314:	e01b      	b.n	800234e <main+0x55e>
          case 9:
            d();
 8002316:	f7ff fcdf 	bl	8001cd8 <d>
            break;
 800231a:	e018      	b.n	800234e <main+0x55e>
          case 10:
            d1();
 800231c:	f7ff fcf6 	bl	8001d0c <d1>
            break;
 8002320:	e015      	b.n	800234e <main+0x55e>
          case 11:
            d2();
 8002322:	f7ff fd0d 	bl	8001d40 <d2>
            break;
 8002326:	e012      	b.n	800234e <main+0x55e>
          case 12:
            f();
 8002328:	f7ff fc88 	bl	8001c3c <f>
            break;
 800232c:	e00f      	b.n	800234e <main+0x55e>
          case 13:
            f1();
 800232e:	f7ff fc9f 	bl	8001c70 <f1>
            break;
 8002332:	e00c      	b.n	800234e <main+0x55e>
          case 14:
            f2();
 8002334:	f7ff fcb6 	bl	8001ca4 <f2>
            break;
 8002338:	e009      	b.n	800234e <main+0x55e>
          case 15:
            b();
 800233a:	f7ff fbef 	bl	8001b1c <b>
            break;
 800233e:	e006      	b.n	800234e <main+0x55e>
          case 16:
            b1();
 8002340:	f7ff fc02 	bl	8001b48 <b1>
            break;
 8002344:	e003      	b.n	800234e <main+0x55e>
          case 17:
            b2();
 8002346:	f7ff fc15 	bl	8001b74 <b2>
            break;
 800234a:	e000      	b.n	800234e <main+0x55e>
          default:
            break;
 800234c:	bf00      	nop
        for (uint16_t i = 0; i < cube.routeLen; i++)
 800234e:	f8b7 3192 	ldrh.w	r3, [r7, #402]	; 0x192
 8002352:	3301      	adds	r3, #1
 8002354:	f8a7 3192 	strh.w	r3, [r7, #402]	; 0x192
 8002358:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800235c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002360:	f893 3162 	ldrb.w	r3, [r3, #354]	; 0x162
 8002364:	b29b      	uxth	r3, r3
 8002366:	f8b7 2192 	ldrh.w	r2, [r7, #402]	; 0x192
 800236a:	429a      	cmp	r2, r3
 800236c:	d386      	bcc.n	800227c <main+0x48c>
  while (1 && bt_flags != 4)
 800236e:	4b0c      	ldr	r3, [pc, #48]	; (80023a0 <main+0x5b0>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	b2db      	uxtb	r3, r3
 8002374:	2b04      	cmp	r3, #4
 8002376:	f47f ad82 	bne.w	8001e7e <main+0x8e>
        }
      }
    }
  }

  LCD_Clear(0, 0, 240, 320, BACKGROUND);
 800237a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800237e:	9300      	str	r3, [sp, #0]
 8002380:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002384:	22f0      	movs	r2, #240	; 0xf0
 8002386:	2100      	movs	r1, #0
 8002388:	2000      	movs	r0, #0
 800238a:	f7ff fa62 	bl	8001852 <LCD_Clear>
 800238e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8002390:	4618      	mov	r0, r3
 8002392:	f507 77d2 	add.w	r7, r7, #420	; 0x1a4
 8002396:	46bd      	mov	sp, r7
 8002398:	bd90      	pop	{r4, r7, pc}
 800239a:	bf00      	nop
 800239c:	08006f10 	.word	0x08006f10
 80023a0:	20002070 	.word	0x20002070

080023a4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b090      	sub	sp, #64	; 0x40
 80023a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023aa:	f107 0318 	add.w	r3, r7, #24
 80023ae:	2228      	movs	r2, #40	; 0x28
 80023b0:	2100      	movs	r1, #0
 80023b2:	4618      	mov	r0, r3
 80023b4:	f003 f992 	bl	80056dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023b8:	1d3b      	adds	r3, r7, #4
 80023ba:	2200      	movs	r2, #0
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	605a      	str	r2, [r3, #4]
 80023c0:	609a      	str	r2, [r3, #8]
 80023c2:	60da      	str	r2, [r3, #12]
 80023c4:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023c6:	2301      	movs	r3, #1
 80023c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80023d0:	2300      	movs	r3, #0
 80023d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023d4:	2301      	movs	r3, #1
 80023d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023d8:	2302      	movs	r3, #2
 80023da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80023e2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80023e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023e8:	f107 0318 	add.w	r3, r7, #24
 80023ec:	4618      	mov	r0, r3
 80023ee:	f001 ff17 	bl	8004220 <HAL_RCC_OscConfig>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80023f8:	f000 f819 	bl	800242e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80023fc:	230f      	movs	r3, #15
 80023fe:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002400:	2302      	movs	r3, #2
 8002402:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002404:	2300      	movs	r3, #0
 8002406:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002408:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800240c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800240e:	2300      	movs	r3, #0
 8002410:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002412:	1d3b      	adds	r3, r7, #4
 8002414:	2102      	movs	r1, #2
 8002416:	4618      	mov	r0, r3
 8002418:	f002 f966 	bl	80046e8 <HAL_RCC_ClockConfig>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002422:	f000 f804 	bl	800242e <Error_Handler>
  }
}
 8002426:	bf00      	nop
 8002428:	3740      	adds	r7, #64	; 0x40
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800242e:	b480      	push	{r7}
 8002430:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002432:	b672      	cpsid	i
}
 8002434:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002436:	e7fe      	b.n	8002436 <Error_Handler+0x8>

08002438 <rotateInPosMode>:
#include <string.h>
volatile uint8_t motor_flag;

uint8_t RxBuffer[RXBUFFERSIZE];
void rotateInPosMode(uint8_t ID, uint8_t dir, uint16_t angle, uint8_t wait_flag)
{
 8002438:	b590      	push	{r4, r7, lr}
 800243a:	b087      	sub	sp, #28
 800243c:	af00      	add	r7, sp, #0
 800243e:	4604      	mov	r4, r0
 8002440:	4608      	mov	r0, r1
 8002442:	4611      	mov	r1, r2
 8002444:	461a      	mov	r2, r3
 8002446:	4623      	mov	r3, r4
 8002448:	71fb      	strb	r3, [r7, #7]
 800244a:	4603      	mov	r3, r0
 800244c:	71bb      	strb	r3, [r7, #6]
 800244e:	460b      	mov	r3, r1
 8002450:	80bb      	strh	r3, [r7, #4]
 8002452:	4613      	mov	r3, r2
 8002454:	70fb      	strb	r3, [r7, #3]
    uint32_t steps = angle / STEP_DGREE * M_STEP;
 8002456:	88bb      	ldrh	r3, [r7, #4]
 8002458:	4618      	mov	r0, r3
 800245a:	f7fe f837 	bl	80004cc <__aeabi_i2d>
 800245e:	a336      	add	r3, pc, #216	; (adr r3, 8002538 <rotateInPosMode+0x100>)
 8002460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002464:	f7fe f9c6 	bl	80007f4 <__aeabi_ddiv>
 8002468:	4602      	mov	r2, r0
 800246a:	460b      	mov	r3, r1
 800246c:	4610      	mov	r0, r2
 800246e:	4619      	mov	r1, r3
 8002470:	f04f 0200 	mov.w	r2, #0
 8002474:	4b32      	ldr	r3, [pc, #200]	; (8002540 <rotateInPosMode+0x108>)
 8002476:	f7fe f893 	bl	80005a0 <__aeabi_dmul>
 800247a:	4602      	mov	r2, r0
 800247c:	460b      	mov	r3, r1
 800247e:	4610      	mov	r0, r2
 8002480:	4619      	mov	r1, r3
 8002482:	f7fe fb3d 	bl	8000b00 <__aeabi_d2uiz>
 8002486:	4603      	mov	r3, r0
 8002488:	617b      	str	r3, [r7, #20]
 800248a:	79fb      	ldrb	r3, [r7, #7]
    uint8_t TxBuffer[9];
    memcpy(TxBuffer, &ID, 1);
 800248c:	723b      	strb	r3, [r7, #8]
    TxBuffer[1] = POS_REG;
 800248e:	23fd      	movs	r3, #253	; 0xfd
 8002490:	727b      	strb	r3, [r7, #9]
    uint16_t speed = (SPEED | (uint8_t)dir << 15);
 8002492:	79bb      	ldrb	r3, [r7, #6]
 8002494:	03db      	lsls	r3, r3, #15
 8002496:	b21b      	sxth	r3, r3
 8002498:	f043 0310 	orr.w	r3, r3, #16
 800249c:	b21b      	sxth	r3, r3
 800249e:	827b      	strh	r3, [r7, #18]
    TxBuffer[2] = (uint8_t)(speed >> 8);
 80024a0:	8a7b      	ldrh	r3, [r7, #18]
 80024a2:	0a1b      	lsrs	r3, r3, #8
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	72bb      	strb	r3, [r7, #10]
    TxBuffer[3] = (uint8_t)(speed & 0x00FF);
 80024aa:	8a7b      	ldrh	r3, [r7, #18]
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	72fb      	strb	r3, [r7, #11]
    TxBuffer[4] = (uint8_t)ACCELERATION;
 80024b0:	2300      	movs	r3, #0
 80024b2:	733b      	strb	r3, [r7, #12]
    TxBuffer[5] = (uint8_t)(steps >> 16);
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	0c1b      	lsrs	r3, r3, #16
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	737b      	strb	r3, [r7, #13]
    TxBuffer[6] = (uint8_t)(steps >> 8);
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	0a1b      	lsrs	r3, r3, #8
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	73bb      	strb	r3, [r7, #14]
    TxBuffer[7] = (uint8_t)(steps & 0x00FF);
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	73fb      	strb	r3, [r7, #15]
    TxBuffer[8] = CHECK_BIT;
 80024ca:	236b      	movs	r3, #107	; 0x6b
 80024cc:	743b      	strb	r3, [r7, #16]
    HAL_Delay(50);
 80024ce:	2032      	movs	r0, #50	; 0x32
 80024d0:	f001 fa86 	bl	80039e0 <HAL_Delay>
    while (!(motor_flag & (0x01 << (ID - 1))))
 80024d4:	bf00      	nop
 80024d6:	4b1b      	ldr	r3, [pc, #108]	; (8002544 <rotateInPosMode+0x10c>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	461a      	mov	r2, r3
 80024de:	79fb      	ldrb	r3, [r7, #7]
 80024e0:	3b01      	subs	r3, #1
 80024e2:	fa42 f303 	asr.w	r3, r2, r3
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d0f3      	beq.n	80024d6 <rotateInPosMode+0x9e>
        ;
    while (wait_flag && motor_flag != 7)
 80024ee:	78fb      	ldrb	r3, [r7, #3]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d004      	beq.n	80024fe <rotateInPosMode+0xc6>
 80024f4:	4b13      	ldr	r3, [pc, #76]	; (8002544 <rotateInPosMode+0x10c>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b07      	cmp	r3, #7
 80024fc:	d1f7      	bne.n	80024ee <rotateInPosMode+0xb6>
        ;

    HAL_UART_Transmit(&huart1, (uint8_t *)&TxBuffer, 9, 0xFFFF);
 80024fe:	f107 0108 	add.w	r1, r7, #8
 8002502:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002506:	2209      	movs	r2, #9
 8002508:	480f      	ldr	r0, [pc, #60]	; (8002548 <rotateInPosMode+0x110>)
 800250a:	f002 fb3a 	bl	8004b82 <HAL_UART_Transmit>
    motor_flag &= ~(0x01 << (ID - 1));
 800250e:	79fb      	ldrb	r3, [r7, #7]
 8002510:	3b01      	subs	r3, #1
 8002512:	2201      	movs	r2, #1
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	b25b      	sxtb	r3, r3
 800251a:	43db      	mvns	r3, r3
 800251c:	b25a      	sxtb	r2, r3
 800251e:	4b09      	ldr	r3, [pc, #36]	; (8002544 <rotateInPosMode+0x10c>)
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	b2db      	uxtb	r3, r3
 8002524:	b25b      	sxtb	r3, r3
 8002526:	4013      	ands	r3, r2
 8002528:	b25b      	sxtb	r3, r3
 800252a:	b2da      	uxtb	r2, r3
 800252c:	4b05      	ldr	r3, [pc, #20]	; (8002544 <rotateInPosMode+0x10c>)
 800252e:	701a      	strb	r2, [r3, #0]
}
 8002530:	bf00      	nop
 8002532:	371c      	adds	r7, #28
 8002534:	46bd      	mov	sp, r7
 8002536:	bd90      	pop	{r4, r7, pc}
 8002538:	cccccccd 	.word	0xcccccccd
 800253c:	3ffccccc 	.word	0x3ffccccc
 8002540:	40300000 	.word	0x40300000
 8002544:	20002066 	.word	0x20002066
 8002548:	20002074 	.word	0x20002074

0800254c <rotateCube>:
    {L, L},
    {B, B}};


void rotateCube(cube_t *c, uint8_t move)
{
 800254c:	b4f0      	push	{r4, r5, r6, r7}
 800254e:	b098      	sub	sp, #96	; 0x60
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	460b      	mov	r3, r1
 8002556:	70fb      	strb	r3, [r7, #3]
    char temp[54];
    memcpy(temp, c->face, 54);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	461c      	mov	r4, r3
 800255c:	f107 0620 	add.w	r6, r7, #32
 8002560:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 8002564:	4635      	mov	r5, r6
 8002566:	4623      	mov	r3, r4
 8002568:	6818      	ldr	r0, [r3, #0]
 800256a:	6859      	ldr	r1, [r3, #4]
 800256c:	689a      	ldr	r2, [r3, #8]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002572:	3410      	adds	r4, #16
 8002574:	3610      	adds	r6, #16
 8002576:	4564      	cmp	r4, ip
 8002578:	d1f4      	bne.n	8002564 <rotateCube+0x18>
 800257a:	4633      	mov	r3, r6
 800257c:	4622      	mov	r2, r4
 800257e:	6810      	ldr	r0, [r2, #0]
 8002580:	6018      	str	r0, [r3, #0]
 8002582:	8892      	ldrh	r2, [r2, #4]
 8002584:	809a      	strh	r2, [r3, #4]
    for (int i = 0; i < 54; i++)
 8002586:	2300      	movs	r3, #0
 8002588:	65fb      	str	r3, [r7, #92]	; 0x5c
 800258a:	e014      	b.n	80025b6 <rotateCube+0x6a>
        c->face[i] = temp[transMat[move][i]];
 800258c:	78fb      	ldrb	r3, [r7, #3]
 800258e:	4a26      	ldr	r2, [pc, #152]	; (8002628 <rotateCube+0xdc>)
 8002590:	2136      	movs	r1, #54	; 0x36
 8002592:	fb01 f303 	mul.w	r3, r1, r3
 8002596:	441a      	add	r2, r3
 8002598:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800259a:	4413      	add	r3, r2
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	3360      	adds	r3, #96	; 0x60
 80025a0:	443b      	add	r3, r7
 80025a2:	f813 1c40 	ldrb.w	r1, [r3, #-64]
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025aa:	4413      	add	r3, r2
 80025ac:	460a      	mov	r2, r1
 80025ae:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 54; i++)
 80025b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025b2:	3301      	adds	r3, #1
 80025b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80025b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025b8:	2b35      	cmp	r3, #53	; 0x35
 80025ba:	dde7      	ble.n	800258c <rotateCube+0x40>
    c->route[c->routeLen++] = route_mask[move];
 80025bc:	78fa      	ldrb	r2, [r7, #3]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f893 3162 	ldrb.w	r3, [r3, #354]	; 0x162
 80025c4:	1c59      	adds	r1, r3, #1
 80025c6:	b2c8      	uxtb	r0, r1
 80025c8:	6879      	ldr	r1, [r7, #4]
 80025ca:	f881 0162 	strb.w	r0, [r1, #354]	; 0x162
 80025ce:	4619      	mov	r1, r3
 80025d0:	4b16      	ldr	r3, [pc, #88]	; (800262c <rotateCube+0xe0>)
 80025d2:	5c9a      	ldrb	r2, [r3, r2]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	440b      	add	r3, r1
 80025d8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    if(move == T)
 80025dc:	78fb      	ldrb	r3, [r7, #3]
 80025de:	2b12      	cmp	r3, #18
 80025e0:	d11d      	bne.n	800261e <rotateCube+0xd2>
    {
        uint8_t route_temp[18];
        memcpy(route_temp, route_mask, 18);
 80025e2:	4b12      	ldr	r3, [pc, #72]	; (800262c <rotateCube+0xe0>)
 80025e4:	f107 040c 	add.w	r4, r7, #12
 80025e8:	461d      	mov	r5, r3
 80025ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025ee:	682b      	ldr	r3, [r5, #0]
 80025f0:	8023      	strh	r3, [r4, #0]
        for (int i = 0; i < 18; i++)
 80025f2:	2300      	movs	r3, #0
 80025f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80025f6:	e00f      	b.n	8002618 <rotateCube+0xcc>
            route_mask[i] = route_temp[route_trans[i]];
 80025f8:	4a0d      	ldr	r2, [pc, #52]	; (8002630 <rotateCube+0xe4>)
 80025fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025fc:	4413      	add	r3, r2
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	3360      	adds	r3, #96	; 0x60
 8002602:	443b      	add	r3, r7
 8002604:	f813 1c54 	ldrb.w	r1, [r3, #-84]
 8002608:	4a08      	ldr	r2, [pc, #32]	; (800262c <rotateCube+0xe0>)
 800260a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800260c:	4413      	add	r3, r2
 800260e:	460a      	mov	r2, r1
 8002610:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < 18; i++)
 8002612:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002614:	3301      	adds	r3, #1
 8002616:	65bb      	str	r3, [r7, #88]	; 0x58
 8002618:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800261a:	2b11      	cmp	r3, #17
 800261c:	ddec      	ble.n	80025f8 <rotateCube+0xac>
    }
}
 800261e:	bf00      	nop
 8002620:	3760      	adds	r7, #96	; 0x60
 8002622:	46bd      	mov	sp, r7
 8002624:	bcf0      	pop	{r4, r5, r6, r7}
 8002626:	4770      	bx	lr
 8002628:	08007540 	.word	0x08007540
 800262c:	2000011c 	.word	0x2000011c
 8002630:	20000130 	.word	0x20000130

08002634 <formular11>:
void formular11(cube_t *c)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b088      	sub	sp, #32
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
    uint8_t n = 0;
 800263c:	2300      	movs	r3, #0
 800263e:	77fb      	strb	r3, [r7, #31]
    for (size_t i = 1; i < 6; i++)
 8002640:	2301      	movs	r3, #1
 8002642:	61bb      	str	r3, [r7, #24]
 8002644:	e038      	b.n	80026b8 <formular11+0x84>
    {
        n = 0;
 8002646:	2300      	movs	r3, #0
 8002648:	77fb      	strb	r3, [r7, #31]
        for (size_t j = 3; j < 6; j += 2)
 800264a:	2303      	movs	r3, #3
 800264c:	617b      	str	r3, [r7, #20]
 800264e:	e02d      	b.n	80026ac <formular11+0x78>
        {
            if (c->face[i * 9 + j] == 'D')
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	4613      	mov	r3, r2
 8002654:	00db      	lsls	r3, r3, #3
 8002656:	441a      	add	r2, r3
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	4413      	add	r3, r2
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	5cd3      	ldrb	r3, [r2, r3]
 8002660:	2b44      	cmp	r3, #68	; 0x44
 8002662:	d11d      	bne.n	80026a0 <formular11+0x6c>
            {
                while (c->face[face_index1[i - 1][n]] == 'D')
 8002664:	e003      	b.n	800266e <formular11+0x3a>
                    rotateCube(c, U);
 8002666:	2106      	movs	r1, #6
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f7ff ff6f 	bl	800254c <rotateCube>
                while (c->face[face_index1[i - 1][n]] == 'D')
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	1e5a      	subs	r2, r3, #1
 8002672:	7ffb      	ldrb	r3, [r7, #31]
 8002674:	4934      	ldr	r1, [pc, #208]	; (8002748 <formular11+0x114>)
 8002676:	0052      	lsls	r2, r2, #1
 8002678:	440a      	add	r2, r1
 800267a:	4413      	add	r3, r2
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	461a      	mov	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	5c9b      	ldrb	r3, [r3, r2]
 8002684:	2b44      	cmp	r3, #68	; 0x44
 8002686:	d0ee      	beq.n	8002666 <formular11+0x32>
                rotateCube(c, rotate_index1[i - 1][n]);
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	1e5a      	subs	r2, r3, #1
 800268c:	7ffb      	ldrb	r3, [r7, #31]
 800268e:	492f      	ldr	r1, [pc, #188]	; (800274c <formular11+0x118>)
 8002690:	0052      	lsls	r2, r2, #1
 8002692:	440a      	add	r2, r1
 8002694:	4413      	add	r3, r2
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	4619      	mov	r1, r3
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f7ff ff56 	bl	800254c <rotateCube>
            }
            n++;
 80026a0:	7ffb      	ldrb	r3, [r7, #31]
 80026a2:	3301      	adds	r3, #1
 80026a4:	77fb      	strb	r3, [r7, #31]
        for (size_t j = 3; j < 6; j += 2)
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	3302      	adds	r3, #2
 80026aa:	617b      	str	r3, [r7, #20]
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	2b05      	cmp	r3, #5
 80026b0:	d9ce      	bls.n	8002650 <formular11+0x1c>
    for (size_t i = 1; i < 6; i++)
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	3301      	adds	r3, #1
 80026b6:	61bb      	str	r3, [r7, #24]
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	2b05      	cmp	r3, #5
 80026bc:	d9c3      	bls.n	8002646 <formular11+0x12>
        }
    }
    for (size_t i = 1; i < 6; i++)
 80026be:	2301      	movs	r3, #1
 80026c0:	613b      	str	r3, [r7, #16]
 80026c2:	e038      	b.n	8002736 <formular11+0x102>
    {
        n = 0;
 80026c4:	2300      	movs	r3, #0
 80026c6:	77fb      	strb	r3, [r7, #31]
        for (size_t j = 1; j < 8; j += 6)
 80026c8:	2301      	movs	r3, #1
 80026ca:	60fb      	str	r3, [r7, #12]
 80026cc:	e02d      	b.n	800272a <formular11+0xf6>
        {
            if (c->face[i * 9 + j] == 'D')
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	4613      	mov	r3, r2
 80026d2:	00db      	lsls	r3, r3, #3
 80026d4:	441a      	add	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	4413      	add	r3, r2
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	5cd3      	ldrb	r3, [r2, r3]
 80026de:	2b44      	cmp	r3, #68	; 0x44
 80026e0:	d11d      	bne.n	800271e <formular11+0xea>
            {
                while (c->face[face_index2[i - 1][n]] == 'D')
 80026e2:	e003      	b.n	80026ec <formular11+0xb8>
                    rotateCube(c, U);
 80026e4:	2106      	movs	r1, #6
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f7ff ff30 	bl	800254c <rotateCube>
                while (c->face[face_index2[i - 1][n]] == 'D')
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1e5a      	subs	r2, r3, #1
 80026f0:	7ffb      	ldrb	r3, [r7, #31]
 80026f2:	4917      	ldr	r1, [pc, #92]	; (8002750 <formular11+0x11c>)
 80026f4:	0052      	lsls	r2, r2, #1
 80026f6:	440a      	add	r2, r1
 80026f8:	4413      	add	r3, r2
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	461a      	mov	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	5c9b      	ldrb	r3, [r3, r2]
 8002702:	2b44      	cmp	r3, #68	; 0x44
 8002704:	d0ee      	beq.n	80026e4 <formular11+0xb0>
                rotateCube(c, rotate_index2[i - 1][n]);
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1e5a      	subs	r2, r3, #1
 800270a:	7ffb      	ldrb	r3, [r7, #31]
 800270c:	4911      	ldr	r1, [pc, #68]	; (8002754 <formular11+0x120>)
 800270e:	0052      	lsls	r2, r2, #1
 8002710:	440a      	add	r2, r1
 8002712:	4413      	add	r3, r2
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	4619      	mov	r1, r3
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f7ff ff17 	bl	800254c <rotateCube>
            }
            n++;
 800271e:	7ffb      	ldrb	r3, [r7, #31]
 8002720:	3301      	adds	r3, #1
 8002722:	77fb      	strb	r3, [r7, #31]
        for (size_t j = 1; j < 8; j += 6)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	3306      	adds	r3, #6
 8002728:	60fb      	str	r3, [r7, #12]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2b07      	cmp	r3, #7
 800272e:	d9ce      	bls.n	80026ce <formular11+0x9a>
    for (size_t i = 1; i < 6; i++)
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	3301      	adds	r3, #1
 8002734:	613b      	str	r3, [r7, #16]
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	2b05      	cmp	r3, #5
 800273a:	d9c3      	bls.n	80026c4 <formular11+0x90>
        }
    }
}
 800273c:	bf00      	nop
 800273e:	bf00      	nop
 8002740:	3720      	adds	r7, #32
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	20000144 	.word	0x20000144
 800274c:	20000150 	.word	0x20000150
 8002750:	2000015c 	.word	0x2000015c
 8002754:	20000168 	.word	0x20000168

08002758 <formular12>:
void formular12(cube_t *c)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
    while (c->face[19] != c->face[22] || c->face[7] != 'D')
 8002760:	e003      	b.n	800276a <formular12+0x12>
        rotateCube(c, U);
 8002762:	2106      	movs	r1, #6
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f7ff fef1 	bl	800254c <rotateCube>
    while (c->face[19] != c->face[22] || c->face[7] != 'D')
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	7cda      	ldrb	r2, [r3, #19]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	7d9b      	ldrb	r3, [r3, #22]
 8002772:	429a      	cmp	r2, r3
 8002774:	d1f5      	bne.n	8002762 <formular12+0xa>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	79db      	ldrb	r3, [r3, #7]
 800277a:	2b44      	cmp	r3, #68	; 0x44
 800277c:	d1f1      	bne.n	8002762 <formular12+0xa>
    rotateCube(c, F2);
 800277e:	210e      	movs	r1, #14
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f7ff fee3 	bl	800254c <rotateCube>
    while (c->face[46] != c->face[49] || c->face[1] != 'D')
 8002786:	e003      	b.n	8002790 <formular12+0x38>
        rotateCube(c, U);
 8002788:	2106      	movs	r1, #6
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f7ff fede 	bl	800254c <rotateCube>
    while (c->face[46] != c->face[49] || c->face[1] != 'D')
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800279c:	429a      	cmp	r2, r3
 800279e:	d1f3      	bne.n	8002788 <formular12+0x30>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	785b      	ldrb	r3, [r3, #1]
 80027a4:	2b44      	cmp	r3, #68	; 0x44
 80027a6:	d1ef      	bne.n	8002788 <formular12+0x30>
    rotateCube(c, B2);
 80027a8:	2111      	movs	r1, #17
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7ff fece 	bl	800254c <rotateCube>
    while (c->face[37] != c->face[40] || c->face[3] != 'D')
 80027b0:	e003      	b.n	80027ba <formular12+0x62>
        rotateCube(c, U);
 80027b2:	2106      	movs	r1, #6
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f7ff fec9 	bl	800254c <rotateCube>
    while (c->face[37] != c->face[40] || c->face[3] != 'D')
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d1f3      	bne.n	80027b2 <formular12+0x5a>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	78db      	ldrb	r3, [r3, #3]
 80027ce:	2b44      	cmp	r3, #68	; 0x44
 80027d0:	d1ef      	bne.n	80027b2 <formular12+0x5a>
    rotateCube(c, L2);
 80027d2:	2102      	movs	r1, #2
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f7ff feb9 	bl	800254c <rotateCube>
    while (c->face[10] != c->face[13] || c->face[5] != 'D')
 80027da:	e003      	b.n	80027e4 <formular12+0x8c>
        rotateCube(c, U);
 80027dc:	2106      	movs	r1, #6
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7ff feb4 	bl	800254c <rotateCube>
    while (c->face[10] != c->face[13] || c->face[5] != 'D')
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	7a9a      	ldrb	r2, [r3, #10]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	7b5b      	ldrb	r3, [r3, #13]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d1f5      	bne.n	80027dc <formular12+0x84>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	795b      	ldrb	r3, [r3, #5]
 80027f4:	2b44      	cmp	r3, #68	; 0x44
 80027f6:	d1f1      	bne.n	80027dc <formular12+0x84>
    rotateCube(c, R2);
 80027f8:	2105      	movs	r1, #5
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f7ff fea6 	bl	800254c <rotateCube>
}
 8002800:	bf00      	nop
 8002802:	3708      	adds	r7, #8
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <formular13>:
void formular13(cube_t *c)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
    rotateCube(c, R);
 8002810:	2103      	movs	r1, #3
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f7ff fe9a 	bl	800254c <rotateCube>
    rotateCube(c, U);
 8002818:	2106      	movs	r1, #6
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f7ff fe96 	bl	800254c <rotateCube>
    rotateCube(c, R3);
 8002820:	2104      	movs	r1, #4
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f7ff fe92 	bl	800254c <rotateCube>
}
 8002828:	bf00      	nop
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <formular14>:
void formular14(cube_t *c)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
    rotateCube(c, F3);
 8002838:	210d      	movs	r1, #13
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f7ff fe86 	bl	800254c <rotateCube>
    rotateCube(c, U3);
 8002840:	2107      	movs	r1, #7
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f7ff fe82 	bl	800254c <rotateCube>
    rotateCube(c, F);
 8002848:	210c      	movs	r1, #12
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f7ff fe7e 	bl	800254c <rotateCube>
}
 8002850:	bf00      	nop
 8002852:	3708      	adds	r7, #8
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <formular15>:

void formular15(cube_t *c)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
    if (c->face[29] == c->face[31] && c->face[22] == c->face[26] && c->face[15] == c->face[13])
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	7f5a      	ldrb	r2, [r3, #29]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	7fdb      	ldrb	r3, [r3, #31]
 8002868:	429a      	cmp	r2, r3
 800286a:	d10b      	bne.n	8002884 <formular15+0x2c>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	7d9a      	ldrb	r2, [r3, #22]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	7e9b      	ldrb	r3, [r3, #26]
 8002874:	429a      	cmp	r2, r3
 8002876:	d105      	bne.n	8002884 <formular15+0x2c>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	7bda      	ldrb	r2, [r3, #15]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	7b5b      	ldrb	r3, [r3, #13]
 8002880:	429a      	cmp	r2, r3
 8002882:	d064      	beq.n	800294e <formular15+0xf6>
        return;
    size_t i = 0;
 8002884:	2300      	movs	r3, #0
 8002886:	60fb      	str	r3, [r7, #12]
    for (; i < 4;)
 8002888:	e055      	b.n	8002936 <formular15+0xde>
    {
        if (c->face[8] == c->face[13] && c->face[22] == c->face[20] && c->face[9] == c->face[31])
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	7a1a      	ldrb	r2, [r3, #8]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	7b5b      	ldrb	r3, [r3, #13]
 8002892:	429a      	cmp	r2, r3
 8002894:	d10f      	bne.n	80028b6 <formular15+0x5e>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	7d9a      	ldrb	r2, [r3, #22]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	7d1b      	ldrb	r3, [r3, #20]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d109      	bne.n	80028b6 <formular15+0x5e>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	7a5a      	ldrb	r2, [r3, #9]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	7fdb      	ldrb	r3, [r3, #31]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d103      	bne.n	80028b6 <formular15+0x5e>
        {
            formular13(c);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7ff ffaa 	bl	8002808 <formular13>
            return;
 80028b4:	e04c      	b.n	8002950 <formular15+0xf8>
        }
        else if (c->face[8] == c->face[31] && c->face[13] == c->face[20] && c->face[9] == c->face[22])
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	7a1a      	ldrb	r2, [r3, #8]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	7fdb      	ldrb	r3, [r3, #31]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d119      	bne.n	80028f6 <formular15+0x9e>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	7b5a      	ldrb	r2, [r3, #13]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	7d1b      	ldrb	r3, [r3, #20]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d113      	bne.n	80028f6 <formular15+0x9e>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	7a5a      	ldrb	r2, [r3, #9]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	7d9b      	ldrb	r3, [r3, #22]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d10d      	bne.n	80028f6 <formular15+0x9e>
        {
            formular13(c);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f7ff ff94 	bl	8002808 <formular13>
            formular13(c);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f7ff ff91 	bl	8002808 <formular13>
            rotateCube(c, U3);
 80028e6:	2107      	movs	r1, #7
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f7ff fe2f 	bl	800254c <rotateCube>
            formular13(c);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7ff ff8a 	bl	8002808 <formular13>
            return;
 80028f4:	e02c      	b.n	8002950 <formular15+0xf8>
        }
        else if (c->face[8] == c->face[22] && c->face[20] == c->face[31] && c->face[9] == c->face[13])
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	7a1a      	ldrb	r2, [r3, #8]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	7d9b      	ldrb	r3, [r3, #22]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d10f      	bne.n	8002922 <formular15+0xca>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	7d1a      	ldrb	r2, [r3, #20]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	7fdb      	ldrb	r3, [r3, #31]
 800290a:	429a      	cmp	r2, r3
 800290c:	d109      	bne.n	8002922 <formular15+0xca>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	7a5a      	ldrb	r2, [r3, #9]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	7b5b      	ldrb	r3, [r3, #13]
 8002916:	429a      	cmp	r2, r3
 8002918:	d103      	bne.n	8002922 <formular15+0xca>
        {
            formular14(c);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f7ff ff88 	bl	8002830 <formular14>
            return;
 8002920:	e016      	b.n	8002950 <formular15+0xf8>
        }
        else
        {
            if (++i == 4)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	3301      	adds	r3, #1
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2b04      	cmp	r3, #4
 800292c:	d007      	beq.n	800293e <formular15+0xe6>
                break;
            rotateCube(c, U);
 800292e:	2106      	movs	r1, #6
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f7ff fe0b 	bl	800254c <rotateCube>
    for (; i < 4;)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2b03      	cmp	r3, #3
 800293a:	d9a6      	bls.n	800288a <formular15+0x32>
 800293c:	e000      	b.n	8002940 <formular15+0xe8>
                break;
 800293e:	bf00      	nop
        }
    }
    if (i == 4)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2b04      	cmp	r3, #4
 8002944:	d104      	bne.n	8002950 <formular15+0xf8>
        formular13(c);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7ff ff5e 	bl	8002808 <formular13>
 800294c:	e000      	b.n	8002950 <formular15+0xf8>
        return;
 800294e:	bf00      	nop
}
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <formular21>:
void formular21(cube_t *c)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b082      	sub	sp, #8
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
    rotateCube(c, U3);
 800295e:	2107      	movs	r1, #7
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f7ff fdf3 	bl	800254c <rotateCube>
    rotateCube(c, F3);
 8002966:	210d      	movs	r1, #13
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f7ff fdef 	bl	800254c <rotateCube>
    rotateCube(c, U);
 800296e:	2106      	movs	r1, #6
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f7ff fdeb 	bl	800254c <rotateCube>
    rotateCube(c, F);
 8002976:	210c      	movs	r1, #12
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f7ff fde7 	bl	800254c <rotateCube>
    rotateCube(c, U);
 800297e:	2106      	movs	r1, #6
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f7ff fde3 	bl	800254c <rotateCube>
    rotateCube(c, R);
 8002986:	2103      	movs	r1, #3
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f7ff fddf 	bl	800254c <rotateCube>
    rotateCube(c, U3);
 800298e:	2107      	movs	r1, #7
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f7ff fddb 	bl	800254c <rotateCube>
    rotateCube(c, R3);
 8002996:	2104      	movs	r1, #4
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f7ff fdd7 	bl	800254c <rotateCube>
}
 800299e:	bf00      	nop
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <formular22>:
void formular22(cube_t *c)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b082      	sub	sp, #8
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
    rotateCube(c, U);
 80029ae:	2106      	movs	r1, #6
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f7ff fdcb 	bl	800254c <rotateCube>
    rotateCube(c, R);
 80029b6:	2103      	movs	r1, #3
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f7ff fdc7 	bl	800254c <rotateCube>
    rotateCube(c, U3);
 80029be:	2107      	movs	r1, #7
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f7ff fdc3 	bl	800254c <rotateCube>
    rotateCube(c, R3);
 80029c6:	2104      	movs	r1, #4
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f7ff fdbf 	bl	800254c <rotateCube>
    rotateCube(c, U3);
 80029ce:	2107      	movs	r1, #7
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f7ff fdbb 	bl	800254c <rotateCube>
    rotateCube(c, F3);
 80029d6:	210d      	movs	r1, #13
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f7ff fdb7 	bl	800254c <rotateCube>
    rotateCube(c, U);
 80029de:	2106      	movs	r1, #6
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f7ff fdb3 	bl	800254c <rotateCube>
    rotateCube(c, F);
 80029e6:	210c      	movs	r1, #12
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f7ff fdaf 	bl	800254c <rotateCube>
}
 80029ee:	bf00      	nop
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <formular23>:
void formular23(cube_t *c)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b084      	sub	sp, #16
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
    if (c->face[23] == c->face[22] && c->face[12] == c->face[13])
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	7dda      	ldrb	r2, [r3, #23]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	7d9b      	ldrb	r3, [r3, #22]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d105      	bne.n	8002a16 <formular23+0x20>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	7b1a      	ldrb	r2, [r3, #12]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	7b5b      	ldrb	r3, [r3, #13]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d038      	beq.n	8002a88 <formular23+0x92>
        return;
    size_t i = 0;
 8002a16:	2300      	movs	r3, #0
 8002a18:	60fb      	str	r3, [r7, #12]
    for (; i < 4;)
 8002a1a:	e029      	b.n	8002a70 <formular23+0x7a>
    {
        if (c->face[19] == c->face[22] && c->face[7] == c->face[13])
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	7cda      	ldrb	r2, [r3, #19]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	7d9b      	ldrb	r3, [r3, #22]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d109      	bne.n	8002a3c <formular23+0x46>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	79da      	ldrb	r2, [r3, #7]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	7b5b      	ldrb	r3, [r3, #13]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d103      	bne.n	8002a3c <formular23+0x46>
        {
            formular22(c);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f7ff ffb6 	bl	80029a6 <formular22>
            break;
 8002a3a:	e01e      	b.n	8002a7a <formular23+0x84>
        }
        else if (c->face[5] == c->face[22] && c->face[10] == c->face[13])
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	795a      	ldrb	r2, [r3, #5]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	7d9b      	ldrb	r3, [r3, #22]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d109      	bne.n	8002a5c <formular23+0x66>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	7a9a      	ldrb	r2, [r3, #10]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	7b5b      	ldrb	r3, [r3, #13]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d103      	bne.n	8002a5c <formular23+0x66>
        {
            formular21(c);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f7ff ff7e 	bl	8002956 <formular21>
            break;
 8002a5a:	e00e      	b.n	8002a7a <formular23+0x84>
        }
        else
        {
            if (++i == 4)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	3301      	adds	r3, #1
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2b04      	cmp	r3, #4
 8002a66:	d007      	beq.n	8002a78 <formular23+0x82>
                break;
            rotateCube(c, U);
 8002a68:	2106      	movs	r1, #6
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f7ff fd6e 	bl	800254c <rotateCube>
    for (; i < 4;)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2b03      	cmp	r3, #3
 8002a74:	d9d2      	bls.n	8002a1c <formular23+0x26>
 8002a76:	e000      	b.n	8002a7a <formular23+0x84>
                break;
 8002a78:	bf00      	nop
        }
    }
    if (i == 4)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2b04      	cmp	r3, #4
 8002a7e:	d104      	bne.n	8002a8a <formular23+0x94>
        formular21(c);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f7ff ff68 	bl	8002956 <formular21>
 8002a86:	e000      	b.n	8002a8a <formular23+0x94>
        return;
 8002a88:	bf00      	nop
}
 8002a8a:	3710      	adds	r7, #16
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <formular31>:
void formular31(cube_t *c)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
    rotateCube(c, F);
 8002a98:	210c      	movs	r1, #12
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f7ff fd56 	bl	800254c <rotateCube>
    rotateCube(c, R);
 8002aa0:	2103      	movs	r1, #3
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f7ff fd52 	bl	800254c <rotateCube>
    rotateCube(c, U);
 8002aa8:	2106      	movs	r1, #6
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f7ff fd4e 	bl	800254c <rotateCube>
    rotateCube(c, R3);
 8002ab0:	2104      	movs	r1, #4
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f7ff fd4a 	bl	800254c <rotateCube>
    rotateCube(c, U3);
 8002ab8:	2107      	movs	r1, #7
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f7ff fd46 	bl	800254c <rotateCube>
    rotateCube(c, F3);
 8002ac0:	210d      	movs	r1, #13
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f7ff fd42 	bl	800254c <rotateCube>
}
 8002ac8:	bf00      	nop
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <formular32>:
void formular32(cube_t *c)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
    if (c->face[1] == c->face[4] && c->face[7] == c->face[4])
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	785a      	ldrb	r2, [r3, #1]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	791b      	ldrb	r3, [r3, #4]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d109      	bne.n	8002af8 <formular32+0x28>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	79da      	ldrb	r2, [r3, #7]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	791b      	ldrb	r3, [r3, #4]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d103      	bne.n	8002af8 <formular32+0x28>
        rotateCube(c, U);
 8002af0:	2106      	movs	r1, #6
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f7ff fd2a 	bl	800254c <rotateCube>
    if (c->face[3] == c->face[4] && c->face[5] == c->face[4])
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	78da      	ldrb	r2, [r3, #3]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	791b      	ldrb	r3, [r3, #4]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d10d      	bne.n	8002b20 <formular32+0x50>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	795a      	ldrb	r2, [r3, #5]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	791b      	ldrb	r3, [r3, #4]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d107      	bne.n	8002b20 <formular32+0x50>
    {
        formular31(c);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f7ff ffbd 	bl	8002a90 <formular31>
        return;
 8002b16:	e029      	b.n	8002b6c <formular32+0x9c>
    }
    while (c->face[19] != c->face[4] || c->face[10] != c->face[4])
        rotateCube(c, U);
 8002b18:	2106      	movs	r1, #6
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f7ff fd16 	bl	800254c <rotateCube>
    while (c->face[19] != c->face[4] || c->face[10] != c->face[4])
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	7cda      	ldrb	r2, [r3, #19]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	791b      	ldrb	r3, [r3, #4]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d1f5      	bne.n	8002b18 <formular32+0x48>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	7a9a      	ldrb	r2, [r3, #10]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	791b      	ldrb	r3, [r3, #4]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d1ef      	bne.n	8002b18 <formular32+0x48>
    if (c->face[3] == c->face[4] && c->face[1] == c->face[4])
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	78da      	ldrb	r2, [r3, #3]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	791b      	ldrb	r3, [r3, #4]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d109      	bne.n	8002b58 <formular32+0x88>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	785a      	ldrb	r2, [r3, #1]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	791b      	ldrb	r3, [r3, #4]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d103      	bne.n	8002b58 <formular32+0x88>
        formular31(c);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f7ff ff9d 	bl	8002a90 <formular31>
 8002b56:	e009      	b.n	8002b6c <formular32+0x9c>
    else
    {
        formular31(c);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f7ff ff99 	bl	8002a90 <formular31>
        rotateCube(c, U);
 8002b5e:	2106      	movs	r1, #6
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f7ff fcf3 	bl	800254c <rotateCube>
        formular31(c);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f7ff ff92 	bl	8002a90 <formular31>
    }
}
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <formular41>:
void formular41(cube_t *c)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b082      	sub	sp, #8
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
    rotateCube(c, R3);
 8002b7a:	2104      	movs	r1, #4
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f7ff fce5 	bl	800254c <rotateCube>
    rotateCube(c, U2);
 8002b82:	2108      	movs	r1, #8
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f7ff fce1 	bl	800254c <rotateCube>
    rotateCube(c, R);
 8002b8a:	2103      	movs	r1, #3
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f7ff fcdd 	bl	800254c <rotateCube>
    rotateCube(c, U);
 8002b92:	2106      	movs	r1, #6
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f7ff fcd9 	bl	800254c <rotateCube>
    rotateCube(c, R3);
 8002b9a:	2104      	movs	r1, #4
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f7ff fcd5 	bl	800254c <rotateCube>
    rotateCube(c, U);
 8002ba2:	2106      	movs	r1, #6
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f7ff fcd1 	bl	800254c <rotateCube>
    rotateCube(c, R);
 8002baa:	2103      	movs	r1, #3
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f7ff fccd 	bl	800254c <rotateCube>
}
 8002bb2:	bf00      	nop
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <formular42>:
void formular42(cube_t *c)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b082      	sub	sp, #8
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
    rotateCube(c, U3);
 8002bc2:	2107      	movs	r1, #7
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f7ff fcc1 	bl	800254c <rotateCube>
    rotateCube(c, R);
 8002bca:	2103      	movs	r1, #3
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f7ff fcbd 	bl	800254c <rotateCube>
    rotateCube(c, U2);
 8002bd2:	2108      	movs	r1, #8
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f7ff fcb9 	bl	800254c <rotateCube>
    rotateCube(c, R3);
 8002bda:	2104      	movs	r1, #4
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f7ff fcb5 	bl	800254c <rotateCube>
    rotateCube(c, U3);
 8002be2:	2107      	movs	r1, #7
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f7ff fcb1 	bl	800254c <rotateCube>
    rotateCube(c, R);
 8002bea:	2103      	movs	r1, #3
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f7ff fcad 	bl	800254c <rotateCube>
    rotateCube(c, U3);
 8002bf2:	2107      	movs	r1, #7
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f7ff fca9 	bl	800254c <rotateCube>
    rotateCube(c, R3);
 8002bfa:	2104      	movs	r1, #4
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f7ff fca5 	bl	800254c <rotateCube>
}
 8002c02:	bf00      	nop
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <formular43>:
void formular43(cube_t *c)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b086      	sub	sp, #24
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
    uint8_t cnt = 0;
 8002c12:	2300      	movs	r3, #0
 8002c14:	75fb      	strb	r3, [r7, #23]
    for (size_t i = 0; i < 9; i++)
 8002c16:	2300      	movs	r3, #0
 8002c18:	613b      	str	r3, [r7, #16]
 8002c1a:	e00d      	b.n	8002c38 <formular43+0x2e>
    {
        if (c->face[i] == c->face[4])
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	4413      	add	r3, r2
 8002c22:	781a      	ldrb	r2, [r3, #0]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	791b      	ldrb	r3, [r3, #4]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d102      	bne.n	8002c32 <formular43+0x28>
            cnt++;
 8002c2c:	7dfb      	ldrb	r3, [r7, #23]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	75fb      	strb	r3, [r7, #23]
    for (size_t i = 0; i < 9; i++)
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	3301      	adds	r3, #1
 8002c36:	613b      	str	r3, [r7, #16]
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	2b08      	cmp	r3, #8
 8002c3c:	d9ee      	bls.n	8002c1c <formular43+0x12>
    }
    if (cnt == 6)
 8002c3e:	7dfb      	ldrb	r3, [r7, #23]
 8002c40:	2b06      	cmp	r3, #6
 8002c42:	d142      	bne.n	8002cca <formular43+0xc0>
    {
        while (1)
        {
            uint8_t case1 = c->face[47] == c->face[4] && c->face[38] == c->face[4] && c->face[11] == c->face[4];
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	791b      	ldrb	r3, [r3, #4]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d10e      	bne.n	8002c70 <formular43+0x66>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	791b      	ldrb	r3, [r3, #4]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d107      	bne.n	8002c70 <formular43+0x66>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	7ada      	ldrb	r2, [r3, #11]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	791b      	ldrb	r3, [r3, #4]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d101      	bne.n	8002c70 <formular43+0x66>
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e000      	b.n	8002c72 <formular43+0x68>
 8002c70:	2300      	movs	r3, #0
 8002c72:	72bb      	strb	r3, [r7, #10]
            uint8_t case2 = c->face[45] == c->face[4] && c->face[36] == c->face[4] && c->face[18] == c->face[4];
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	791b      	ldrb	r3, [r3, #4]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d10e      	bne.n	8002ca0 <formular43+0x96>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	791b      	ldrb	r3, [r3, #4]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d107      	bne.n	8002ca0 <formular43+0x96>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	7c9a      	ldrb	r2, [r3, #18]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	791b      	ldrb	r3, [r3, #4]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d101      	bne.n	8002ca0 <formular43+0x96>
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e000      	b.n	8002ca2 <formular43+0x98>
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	727b      	strb	r3, [r7, #9]
            if (case1)
 8002ca4:	7abb      	ldrb	r3, [r7, #10]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d003      	beq.n	8002cb2 <formular43+0xa8>
            {
                formular41(c);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f7ff ff61 	bl	8002b72 <formular41>
                return;
 8002cb0:	e0c2      	b.n	8002e38 <formular43+0x22e>
            }
            else if (case2)
 8002cb2:	7a7b      	ldrb	r3, [r7, #9]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d003      	beq.n	8002cc0 <formular43+0xb6>
            {
                formular42(c);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f7ff ff7e 	bl	8002bba <formular42>
                return;
 8002cbe:	e0bb      	b.n	8002e38 <formular43+0x22e>
            }
            else
                rotateCube(c, U);
 8002cc0:	2106      	movs	r1, #6
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f7ff fc42 	bl	800254c <rotateCube>
        {
 8002cc8:	e7bc      	b.n	8002c44 <formular43+0x3a>
        }
    }
    else if (cnt == 5)
 8002cca:	7dfb      	ldrb	r3, [r7, #23]
 8002ccc:	2b05      	cmp	r3, #5
 8002cce:	d157      	bne.n	8002d80 <formular43+0x176>
    {
        while (1)
        {
            uint8_t case3 = c->face[11] == c->face[4] && c->face[36] == c->face[4] && c->face[18] == c->face[4] && c->face[20] == c->face[4];
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	7ada      	ldrb	r2, [r3, #11]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	791b      	ldrb	r3, [r3, #4]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d114      	bne.n	8002d06 <formular43+0xfc>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	791b      	ldrb	r3, [r3, #4]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d10d      	bne.n	8002d06 <formular43+0xfc>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	7c9a      	ldrb	r2, [r3, #18]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	791b      	ldrb	r3, [r3, #4]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d107      	bne.n	8002d06 <formular43+0xfc>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	7d1a      	ldrb	r2, [r3, #20]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	791b      	ldrb	r3, [r3, #4]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d101      	bne.n	8002d06 <formular43+0xfc>
 8002d02:	2301      	movs	r3, #1
 8002d04:	e000      	b.n	8002d08 <formular43+0xfe>
 8002d06:	2300      	movs	r3, #0
 8002d08:	733b      	strb	r3, [r7, #12]
            uint8_t case4 = c->face[45] == c->face[4] && c->face[47] == c->face[4] && c->face[18] == c->face[4] && c->face[20] == c->face[4];
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	791b      	ldrb	r3, [r3, #4]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d114      	bne.n	8002d42 <formular43+0x138>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	791b      	ldrb	r3, [r3, #4]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d10d      	bne.n	8002d42 <formular43+0x138>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	7c9a      	ldrb	r2, [r3, #18]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	791b      	ldrb	r3, [r3, #4]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d107      	bne.n	8002d42 <formular43+0x138>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	7d1a      	ldrb	r2, [r3, #20]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	791b      	ldrb	r3, [r3, #4]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d101      	bne.n	8002d42 <formular43+0x138>
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e000      	b.n	8002d44 <formular43+0x13a>
 8002d42:	2300      	movs	r3, #0
 8002d44:	72fb      	strb	r3, [r7, #11]
            if (case3)
 8002d46:	7b3b      	ldrb	r3, [r7, #12]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00a      	beq.n	8002d62 <formular43+0x158>
            {
                formular41(c);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f7ff ff10 	bl	8002b72 <formular41>
                rotateCube(c, U3);
 8002d52:	2107      	movs	r1, #7
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f7ff fbf9 	bl	800254c <rotateCube>
                formular41(c);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f7ff ff09 	bl	8002b72 <formular41>
                break;
 8002d60:	e06a      	b.n	8002e38 <formular43+0x22e>
            }
            else if (case4)
 8002d62:	7afb      	ldrb	r3, [r7, #11]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d006      	beq.n	8002d76 <formular43+0x16c>
            {
                formular41(c);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f7ff ff02 	bl	8002b72 <formular41>
                formular41(c);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f7ff feff 	bl	8002b72 <formular41>
                break;
 8002d74:	e060      	b.n	8002e38 <formular43+0x22e>
            }
            else
                rotateCube(c, U);
 8002d76:	2106      	movs	r1, #6
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f7ff fbe7 	bl	800254c <rotateCube>
        {
 8002d7e:	e7a7      	b.n	8002cd0 <formular43+0xc6>
        }
    }
    else if (cnt == 7)
 8002d80:	7dfb      	ldrb	r3, [r7, #23]
 8002d82:	2b07      	cmp	r3, #7
 8002d84:	d158      	bne.n	8002e38 <formular43+0x22e>
    {
        while (1)
        {
            uint8_t case5 = c->face[18] == c->face[4] && c->face[20] == c->face[4];
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	7c9a      	ldrb	r2, [r3, #18]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	791b      	ldrb	r3, [r3, #4]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d107      	bne.n	8002da2 <formular43+0x198>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	7d1a      	ldrb	r2, [r3, #20]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	791b      	ldrb	r3, [r3, #4]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d101      	bne.n	8002da2 <formular43+0x198>
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e000      	b.n	8002da4 <formular43+0x19a>
 8002da2:	2300      	movs	r3, #0
 8002da4:	73fb      	strb	r3, [r7, #15]
            uint8_t case6 = c->face[45] == c->face[4] && c->face[20] == c->face[4];
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	791b      	ldrb	r3, [r3, #4]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d107      	bne.n	8002dc4 <formular43+0x1ba>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	7d1a      	ldrb	r2, [r3, #20]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	791b      	ldrb	r3, [r3, #4]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d101      	bne.n	8002dc4 <formular43+0x1ba>
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e000      	b.n	8002dc6 <formular43+0x1bc>
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	73bb      	strb	r3, [r7, #14]
            uint8_t case7 = c->face[47] == c->face[4] && c->face[9] == c->face[4];
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	791b      	ldrb	r3, [r3, #4]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d107      	bne.n	8002de6 <formular43+0x1dc>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	7a5a      	ldrb	r2, [r3, #9]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	791b      	ldrb	r3, [r3, #4]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d101      	bne.n	8002de6 <formular43+0x1dc>
 8002de2:	2301      	movs	r3, #1
 8002de4:	e000      	b.n	8002de8 <formular43+0x1de>
 8002de6:	2300      	movs	r3, #0
 8002de8:	737b      	strb	r3, [r7, #13]
            if (case5)
 8002dea:	7bfb      	ldrb	r3, [r7, #15]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d00a      	beq.n	8002e06 <formular43+0x1fc>
            {
                formular42(c);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f7ff fee2 	bl	8002bba <formular42>
                rotateCube(c, U2);
 8002df6:	2108      	movs	r1, #8
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f7ff fba7 	bl	800254c <rotateCube>
                formular41(c);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f7ff feb7 	bl	8002b72 <formular41>
                return;
 8002e04:	e018      	b.n	8002e38 <formular43+0x22e>
            }
            else if (case6)
 8002e06:	7bbb      	ldrb	r3, [r7, #14]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d006      	beq.n	8002e1a <formular43+0x210>
            {
                formular42(c);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f7ff fed4 	bl	8002bba <formular42>
                formular41(c);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f7ff fead 	bl	8002b72 <formular41>
                return;
 8002e18:	e00e      	b.n	8002e38 <formular43+0x22e>
            }
            else if (case7)
 8002e1a:	7b7b      	ldrb	r3, [r7, #13]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d006      	beq.n	8002e2e <formular43+0x224>
            {
                formular41(c);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f7ff fea6 	bl	8002b72 <formular41>
                formular42(c);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f7ff fec7 	bl	8002bba <formular42>
                return;
 8002e2c:	e004      	b.n	8002e38 <formular43+0x22e>
            }
            else
            {
                rotateCube(c, U);
 8002e2e:	2106      	movs	r1, #6
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f7ff fb8b 	bl	800254c <rotateCube>
        {
 8002e36:	e7a6      	b.n	8002d86 <formular43+0x17c>
            }
        }
    } // printf("case1 = %d, case2 = %d, case3 = %d, case4 = %d, case5 = %d, case6 = %d, case7 = %d\n", case1, case2, case3, case4, case5, case6, case7);
}
 8002e38:	3718      	adds	r7, #24
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <formular51>:
void formular51(cube_t *c)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b082      	sub	sp, #8
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
    rotateCube(c, R);
 8002e46:	2103      	movs	r1, #3
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f7ff fb7f 	bl	800254c <rotateCube>
    rotateCube(c, B3);
 8002e4e:	2110      	movs	r1, #16
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f7ff fb7b 	bl	800254c <rotateCube>
    rotateCube(c, R);
 8002e56:	2103      	movs	r1, #3
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f7ff fb77 	bl	800254c <rotateCube>
    rotateCube(c, F2);
 8002e5e:	210e      	movs	r1, #14
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f7ff fb73 	bl	800254c <rotateCube>
    rotateCube(c, R3);
 8002e66:	2104      	movs	r1, #4
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f7ff fb6f 	bl	800254c <rotateCube>
    rotateCube(c, B);
 8002e6e:	210f      	movs	r1, #15
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f7ff fb6b 	bl	800254c <rotateCube>
    rotateCube(c, R);
 8002e76:	2103      	movs	r1, #3
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f7ff fb67 	bl	800254c <rotateCube>
    rotateCube(c, F2);
 8002e7e:	210e      	movs	r1, #14
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f7ff fb63 	bl	800254c <rotateCube>
    rotateCube(c, R2);
 8002e86:	2105      	movs	r1, #5
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f7ff fb5f 	bl	800254c <rotateCube>
}
 8002e8e:	bf00      	nop
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
	...

08002e98 <formular52>:
void formular52(cube_t *c)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
    printf("formular52\n");
 8002ea0:	4834      	ldr	r0, [pc, #208]	; (8002f74 <formular52+0xdc>)
 8002ea2:	f002 fc91 	bl	80057c8 <puts>
    if (c->face[18] == c->face[20] && c->face[9] == c->face[11] && c->face[36] == c->face[38])
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	7c9a      	ldrb	r2, [r3, #18]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	7d1b      	ldrb	r3, [r3, #20]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d119      	bne.n	8002ee6 <formular52+0x4e>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	7a5a      	ldrb	r2, [r3, #9]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	7adb      	ldrb	r3, [r3, #11]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d113      	bne.n	8002ee6 <formular52+0x4e>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d10b      	bne.n	8002ee6 <formular52+0x4e>
    {
        while (c->face[18] != c->face[22])
 8002ece:	e003      	b.n	8002ed8 <formular52+0x40>
            rotateCube(c, U);
 8002ed0:	2106      	movs	r1, #6
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f7ff fb3a 	bl	800254c <rotateCube>
        while (c->face[18] != c->face[22])
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	7c9a      	ldrb	r2, [r3, #18]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	7d9b      	ldrb	r3, [r3, #22]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d1f5      	bne.n	8002ed0 <formular52+0x38>
        return;
 8002ee4:	e042      	b.n	8002f6c <formular52+0xd4>
    }
    uint8_t routeCnt = 0;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	75fb      	strb	r3, [r7, #23]
    for (size_t i = 0; i < 4; i++)
 8002eea:	2300      	movs	r3, #0
 8002eec:	613b      	str	r3, [r7, #16]
 8002eee:	e00f      	b.n	8002f10 <formular52+0x78>
    {
        if (c->face[18] != c->face[20])
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	7c9a      	ldrb	r2, [r3, #18]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	7d1b      	ldrb	r3, [r3, #20]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d00d      	beq.n	8002f18 <formular52+0x80>
        {
            rotateCube(c, U);
 8002efc:	2106      	movs	r1, #6
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f7ff fb24 	bl	800254c <rotateCube>
            routeCnt++;
 8002f04:	7dfb      	ldrb	r3, [r7, #23]
 8002f06:	3301      	adds	r3, #1
 8002f08:	75fb      	strb	r3, [r7, #23]
    for (size_t i = 0; i < 4; i++)
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	613b      	str	r3, [r7, #16]
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	2b03      	cmp	r3, #3
 8002f14:	d9ec      	bls.n	8002ef0 <formular52+0x58>
 8002f16:	e000      	b.n	8002f1a <formular52+0x82>
        }
        else
            break;
 8002f18:	bf00      	nop
    }
    formular51(c);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7ff ff8f 	bl	8002e3e <formular51>
    if (routeCnt == 4)
 8002f20:	7dfb      	ldrb	r3, [r7, #23]
 8002f22:	2b04      	cmp	r3, #4
 8002f24:	d11c      	bne.n	8002f60 <formular52+0xc8>
    {
        for (size_t i = 0; i < 3; i++)
 8002f26:	2300      	movs	r3, #0
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	e00c      	b.n	8002f46 <formular52+0xae>
        {
            if (c->face[18] != c->face[20])
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	7c9a      	ldrb	r2, [r3, #18]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	7d1b      	ldrb	r3, [r3, #20]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d00a      	beq.n	8002f4e <formular52+0xb6>
                rotateCube(c, U);
 8002f38:	2106      	movs	r1, #6
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f7ff fb06 	bl	800254c <rotateCube>
        for (size_t i = 0; i < 3; i++)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	3301      	adds	r3, #1
 8002f44:	60fb      	str	r3, [r7, #12]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d9ef      	bls.n	8002f2c <formular52+0x94>
 8002f4c:	e000      	b.n	8002f50 <formular52+0xb8>
            else
                break;
 8002f4e:	bf00      	nop
        }
        formular51(c);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f7ff ff74 	bl	8002e3e <formular51>
    }
    while (c->face[18] != c->face[22])
 8002f56:	e003      	b.n	8002f60 <formular52+0xc8>
        rotateCube(c, U);
 8002f58:	2106      	movs	r1, #6
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f7ff faf6 	bl	800254c <rotateCube>
    while (c->face[18] != c->face[22])
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	7c9a      	ldrb	r2, [r3, #18]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	7d9b      	ldrb	r3, [r3, #22]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d1f5      	bne.n	8002f58 <formular52+0xc0>
}
 8002f6c:	3718      	adds	r7, #24
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	08006f34 	.word	0x08006f34

08002f78 <formular61>:
void formular61(cube_t *c)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
    rotateCube(c, R);
 8002f80:	2103      	movs	r1, #3
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f7ff fae2 	bl	800254c <rotateCube>
    rotateCube(c, U3);
 8002f88:	2107      	movs	r1, #7
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f7ff fade 	bl	800254c <rotateCube>
    rotateCube(c, R);
 8002f90:	2103      	movs	r1, #3
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f7ff fada 	bl	800254c <rotateCube>
    rotateCube(c, U);
 8002f98:	2106      	movs	r1, #6
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f7ff fad6 	bl	800254c <rotateCube>
    rotateCube(c, R);
 8002fa0:	2103      	movs	r1, #3
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f7ff fad2 	bl	800254c <rotateCube>
    rotateCube(c, U);
 8002fa8:	2106      	movs	r1, #6
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7ff face 	bl	800254c <rotateCube>
    rotateCube(c, R);
 8002fb0:	2103      	movs	r1, #3
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7ff faca 	bl	800254c <rotateCube>
    rotateCube(c, U3);
 8002fb8:	2107      	movs	r1, #7
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f7ff fac6 	bl	800254c <rotateCube>
    rotateCube(c, R3);
 8002fc0:	2104      	movs	r1, #4
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f7ff fac2 	bl	800254c <rotateCube>
    rotateCube(c, U3);
 8002fc8:	2107      	movs	r1, #7
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f7ff fabe 	bl	800254c <rotateCube>
    rotateCube(c, R2);
 8002fd0:	2105      	movs	r1, #5
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f7ff faba 	bl	800254c <rotateCube>
}
 8002fd8:	bf00      	nop
 8002fda:	3708      	adds	r7, #8
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <formular62>:
void formular62(cube_t *c)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
    while (1)
    {
        if (c->face[19] == c->face[22] && c->face[37] == c->face[40])
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	7cda      	ldrb	r2, [r3, #19]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	7d9b      	ldrb	r3, [r3, #22]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d108      	bne.n	8003006 <formular62+0x26>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003000:	429a      	cmp	r2, r3
 8003002:	f000 8086 	beq.w	8003112 <formular62+0x132>
        {
            break;
        }
        if (c->face[19] == c->face[13] && c->face[10] == c->face[40] && c->face[37] == c->face[22])
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	7cda      	ldrb	r2, [r3, #19]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	7b5b      	ldrb	r3, [r3, #13]
 800300e:	429a      	cmp	r2, r3
 8003010:	d111      	bne.n	8003036 <formular62+0x56>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	7a9a      	ldrb	r2, [r3, #10]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800301c:	429a      	cmp	r2, r3
 800301e:	d10a      	bne.n	8003036 <formular62+0x56>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	7d9b      	ldrb	r3, [r3, #22]
 800302a:	429a      	cmp	r2, r3
 800302c:	d103      	bne.n	8003036 <formular62+0x56>
        {
            formular61(c);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f7ff ffa2 	bl	8002f78 <formular61>
            break;
 8003034:	e06e      	b.n	8003114 <formular62+0x134>
        }
        else if (c->face[37] == c->face[13] && c->face[19] == c->face[40] && c->face[10] == c->face[22])
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	7b5b      	ldrb	r3, [r3, #13]
 8003040:	429a      	cmp	r2, r3
 8003042:	d113      	bne.n	800306c <formular62+0x8c>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	7cda      	ldrb	r2, [r3, #19]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800304e:	429a      	cmp	r2, r3
 8003050:	d10c      	bne.n	800306c <formular62+0x8c>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	7a9a      	ldrb	r2, [r3, #10]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	7d9b      	ldrb	r3, [r3, #22]
 800305a:	429a      	cmp	r2, r3
 800305c:	d106      	bne.n	800306c <formular62+0x8c>
        {
            formular61(c);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f7ff ff8a 	bl	8002f78 <formular61>
            formular61(c);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f7ff ff87 	bl	8002f78 <formular61>
            break;
 800306a:	e053      	b.n	8003114 <formular62+0x134>
        }
        else if (c->face[19] == c->face[49] && c->face[46] == c->face[22] && c->face[37] == c->face[13] && c->face[10] == c->face[40])
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	7cda      	ldrb	r2, [r3, #19]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003076:	429a      	cmp	r2, r3
 8003078:	d11f      	bne.n	80030ba <formular62+0xda>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	7d9b      	ldrb	r3, [r3, #22]
 8003084:	429a      	cmp	r2, r3
 8003086:	d118      	bne.n	80030ba <formular62+0xda>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	7b5b      	ldrb	r3, [r3, #13]
 8003092:	429a      	cmp	r2, r3
 8003094:	d111      	bne.n	80030ba <formular62+0xda>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	7a9a      	ldrb	r2, [r3, #10]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d10a      	bne.n	80030ba <formular62+0xda>
        {
            formular61(c);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f7ff ff67 	bl	8002f78 <formular61>
            rotateCube(c, U);
 80030aa:	2106      	movs	r1, #6
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f7ff fa4d 	bl	800254c <rotateCube>
            formular61(c);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f7ff ff60 	bl	8002f78 <formular61>
            break;
 80030b8:	e02c      	b.n	8003114 <formular62+0x134>
        }
        else if (c->face[19] == c->face[13] && c->face[10] == c->face[22] && c->face[37] == c->face[49] && c->face[46] == c->face[40])
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	7cda      	ldrb	r2, [r3, #19]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	7b5b      	ldrb	r3, [r3, #13]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d120      	bne.n	8003108 <formular62+0x128>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	7a9a      	ldrb	r2, [r3, #10]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	7d9b      	ldrb	r3, [r3, #22]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d11a      	bne.n	8003108 <formular62+0x128>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80030de:	429a      	cmp	r2, r3
 80030e0:	d112      	bne.n	8003108 <formular62+0x128>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d10a      	bne.n	8003108 <formular62+0x128>
        {
            formular61(c);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f7ff ff40 	bl	8002f78 <formular61>
            rotateCube(c, U3);
 80030f8:	2107      	movs	r1, #7
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7ff fa26 	bl	800254c <rotateCube>
            formular61(c);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f7ff ff39 	bl	8002f78 <formular61>
            break;
 8003106:	e005      	b.n	8003114 <formular62+0x134>
        }
        else
            rotateCube(c, T);
 8003108:	2112      	movs	r1, #18
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f7ff fa1e 	bl	800254c <rotateCube>
        if (c->face[19] == c->face[22] && c->face[37] == c->face[40])
 8003110:	e76a      	b.n	8002fe8 <formular62+0x8>
            break;
 8003112:	bf00      	nop
    }
}
 8003114:	bf00      	nop
 8003116:	3708      	adds	r7, #8
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <solve_Naive>:
void solve_Naive(cube_t *c)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
    // 1. get the botton face cross
    while (c->face[1] != 'D' || c->face[3] != 'D' || c->face[5] != 'D' || c->face[7] != 'D')
 8003124:	e002      	b.n	800312c <solve_Naive+0x10>
        formular11(c);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7ff fa84 	bl	8002634 <formular11>
    while (c->face[1] != 'D' || c->face[3] != 'D' || c->face[5] != 'D' || c->face[7] != 'D')
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	785b      	ldrb	r3, [r3, #1]
 8003130:	2b44      	cmp	r3, #68	; 0x44
 8003132:	d1f8      	bne.n	8003126 <solve_Naive+0xa>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	78db      	ldrb	r3, [r3, #3]
 8003138:	2b44      	cmp	r3, #68	; 0x44
 800313a:	d1f4      	bne.n	8003126 <solve_Naive+0xa>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	795b      	ldrb	r3, [r3, #5]
 8003140:	2b44      	cmp	r3, #68	; 0x44
 8003142:	d1f0      	bne.n	8003126 <solve_Naive+0xa>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	79db      	ldrb	r3, [r3, #7]
 8003148:	2b44      	cmp	r3, #68	; 0x44
 800314a:	d1ec      	bne.n	8003126 <solve_Naive+0xa>
    formular12(c);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f7ff fb03 	bl	8002758 <formular12>
    // 2. get the botton corner
    while (c->face[26] != c->face[22] || c->face[17] != c->face[13] || c->face[53] != c->face[49] || c->face[40] != c->face[44] ||
 8003152:	e006      	b.n	8003162 <solve_Naive+0x46>
           c->face[24] != c->face[22] || c->face[15] != c->face[13] || c->face[51] != c->face[49] || c->face[40] != c->face[42])
    {
        formular15(c);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f7ff fb7f 	bl	8002858 <formular15>
        rotateCube(c, T);
 800315a:	2112      	movs	r1, #18
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f7ff f9f5 	bl	800254c <rotateCube>
    while (c->face[26] != c->face[22] || c->face[17] != c->face[13] || c->face[53] != c->face[49] || c->face[40] != c->face[44] ||
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	7e9a      	ldrb	r2, [r3, #26]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	7d9b      	ldrb	r3, [r3, #22]
 800316a:	429a      	cmp	r2, r3
 800316c:	d1f2      	bne.n	8003154 <solve_Naive+0x38>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	7c5a      	ldrb	r2, [r3, #17]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	7b5b      	ldrb	r3, [r3, #13]
 8003176:	429a      	cmp	r2, r3
 8003178:	d1ec      	bne.n	8003154 <solve_Naive+0x38>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003186:	429a      	cmp	r2, r3
 8003188:	d1e4      	bne.n	8003154 <solve_Naive+0x38>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003196:	429a      	cmp	r2, r3
 8003198:	d1dc      	bne.n	8003154 <solve_Naive+0x38>
           c->face[24] != c->face[22] || c->face[15] != c->face[13] || c->face[51] != c->face[49] || c->face[40] != c->face[42])
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	7e1a      	ldrb	r2, [r3, #24]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	7d9b      	ldrb	r3, [r3, #22]
    while (c->face[26] != c->face[22] || c->face[17] != c->face[13] || c->face[53] != c->face[49] || c->face[40] != c->face[44] ||
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d1d6      	bne.n	8003154 <solve_Naive+0x38>
           c->face[24] != c->face[22] || c->face[15] != c->face[13] || c->face[51] != c->face[49] || c->face[40] != c->face[42])
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	7bda      	ldrb	r2, [r3, #15]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	7b5b      	ldrb	r3, [r3, #13]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d1d0      	bne.n	8003154 <solve_Naive+0x38>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80031be:	429a      	cmp	r2, r3
 80031c0:	d1c8      	bne.n	8003154 <solve_Naive+0x38>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d1c0      	bne.n	8003154 <solve_Naive+0x38>
    }
    while (c->face[23] != c->face[22] || c->face[14] != c->face[13] || c->face[50] != c->face[49] || c->face[40] != c->face[39] ||
 80031d2:	e006      	b.n	80031e2 <solve_Naive+0xc6>
           c->face[21] != c->face[22] || c->face[12] != c->face[13] || c->face[48] != c->face[49] || c->face[40] != c->face[41])
    {
        formular23(c);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f7ff fc0e 	bl	80029f6 <formular23>
        rotateCube(c, T);
 80031da:	2112      	movs	r1, #18
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f7ff f9b5 	bl	800254c <rotateCube>
    while (c->face[23] != c->face[22] || c->face[14] != c->face[13] || c->face[50] != c->face[49] || c->face[40] != c->face[39] ||
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	7dda      	ldrb	r2, [r3, #23]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	7d9b      	ldrb	r3, [r3, #22]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d1f2      	bne.n	80031d4 <solve_Naive+0xb8>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	7b9a      	ldrb	r2, [r3, #14]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	7b5b      	ldrb	r3, [r3, #13]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d1ec      	bne.n	80031d4 <solve_Naive+0xb8>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003206:	429a      	cmp	r2, r3
 8003208:	d1e4      	bne.n	80031d4 <solve_Naive+0xb8>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003216:	429a      	cmp	r2, r3
 8003218:	d1dc      	bne.n	80031d4 <solve_Naive+0xb8>
           c->face[21] != c->face[22] || c->face[12] != c->face[13] || c->face[48] != c->face[49] || c->face[40] != c->face[41])
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	7d5a      	ldrb	r2, [r3, #21]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	7d9b      	ldrb	r3, [r3, #22]
    while (c->face[23] != c->face[22] || c->face[14] != c->face[13] || c->face[50] != c->face[49] || c->face[40] != c->face[39] ||
 8003222:	429a      	cmp	r2, r3
 8003224:	d1d6      	bne.n	80031d4 <solve_Naive+0xb8>
           c->face[21] != c->face[22] || c->face[12] != c->face[13] || c->face[48] != c->face[49] || c->face[40] != c->face[41])
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	7b1a      	ldrb	r2, [r3, #12]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	7b5b      	ldrb	r3, [r3, #13]
 800322e:	429a      	cmp	r2, r3
 8003230:	d1d0      	bne.n	80031d4 <solve_Naive+0xb8>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800323e:	429a      	cmp	r2, r3
 8003240:	d1c8      	bne.n	80031d4 <solve_Naive+0xb8>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800324e:	429a      	cmp	r2, r3
 8003250:	d1c0      	bne.n	80031d4 <solve_Naive+0xb8>
    }
    while (c->face[1] != c->face[4] || c->face[3] != c->face[4] || c->face[5] != c->face[4] || c->face[7] != c->face[4])
 8003252:	e002      	b.n	800325a <solve_Naive+0x13e>
    {
        formular32(c);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f7ff fc3b 	bl	8002ad0 <formular32>
    while (c->face[1] != c->face[4] || c->face[3] != c->face[4] || c->face[5] != c->face[4] || c->face[7] != c->face[4])
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	785a      	ldrb	r2, [r3, #1]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	791b      	ldrb	r3, [r3, #4]
 8003262:	429a      	cmp	r2, r3
 8003264:	d1f6      	bne.n	8003254 <solve_Naive+0x138>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	78da      	ldrb	r2, [r3, #3]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	791b      	ldrb	r3, [r3, #4]
 800326e:	429a      	cmp	r2, r3
 8003270:	d1f0      	bne.n	8003254 <solve_Naive+0x138>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	795a      	ldrb	r2, [r3, #5]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	791b      	ldrb	r3, [r3, #4]
 800327a:	429a      	cmp	r2, r3
 800327c:	d1ea      	bne.n	8003254 <solve_Naive+0x138>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	79da      	ldrb	r2, [r3, #7]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	791b      	ldrb	r3, [r3, #4]
 8003286:	429a      	cmp	r2, r3
 8003288:	d1e4      	bne.n	8003254 <solve_Naive+0x138>
    }
    formular43(c);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f7ff fcbd 	bl	8002c0a <formular43>
    formular52(c);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f7ff fe01 	bl	8002e98 <formular52>
    formular62(c);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7ff fea2 	bl	8002fe0 <formular62>
    while (c->face[9] != c->face[13])
 800329c:	e003      	b.n	80032a6 <solve_Naive+0x18a>
    {
        rotateCube(c, U);
 800329e:	2106      	movs	r1, #6
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f7ff f953 	bl	800254c <rotateCube>
    while (c->face[9] != c->face[13])
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	7a5a      	ldrb	r2, [r3, #9]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	7b5b      	ldrb	r3, [r3, #13]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d1f5      	bne.n	800329e <solve_Naive+0x182>
    }
}
 80032b2:	bf00      	nop
 80032b4:	bf00      	nop
 80032b6:	3708      	adds	r7, #8
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80032c2:	4b15      	ldr	r3, [pc, #84]	; (8003318 <HAL_MspInit+0x5c>)
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	4a14      	ldr	r2, [pc, #80]	; (8003318 <HAL_MspInit+0x5c>)
 80032c8:	f043 0301 	orr.w	r3, r3, #1
 80032cc:	6193      	str	r3, [r2, #24]
 80032ce:	4b12      	ldr	r3, [pc, #72]	; (8003318 <HAL_MspInit+0x5c>)
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	60bb      	str	r3, [r7, #8]
 80032d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032da:	4b0f      	ldr	r3, [pc, #60]	; (8003318 <HAL_MspInit+0x5c>)
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	4a0e      	ldr	r2, [pc, #56]	; (8003318 <HAL_MspInit+0x5c>)
 80032e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032e4:	61d3      	str	r3, [r2, #28]
 80032e6:	4b0c      	ldr	r3, [pc, #48]	; (8003318 <HAL_MspInit+0x5c>)
 80032e8:	69db      	ldr	r3, [r3, #28]
 80032ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ee:	607b      	str	r3, [r7, #4]
 80032f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80032f2:	4b0a      	ldr	r3, [pc, #40]	; (800331c <HAL_MspInit+0x60>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	60fb      	str	r3, [r7, #12]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80032fe:	60fb      	str	r3, [r7, #12]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003306:	60fb      	str	r3, [r7, #12]
 8003308:	4a04      	ldr	r2, [pc, #16]	; (800331c <HAL_MspInit+0x60>)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800330e:	bf00      	nop
 8003310:	3714      	adds	r7, #20
 8003312:	46bd      	mov	sp, r7
 8003314:	bc80      	pop	{r7}
 8003316:	4770      	bx	lr
 8003318:	40021000 	.word	0x40021000
 800331c:	40010000 	.word	0x40010000

08003320 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003324:	e7fe      	b.n	8003324 <NMI_Handler+0x4>

08003326 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8003326:	b480      	push	{r7}
 8003328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800332a:	e7fe      	b.n	800332a <HardFault_Handler+0x4>

0800332c <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003330:	e7fe      	b.n	8003330 <MemManage_Handler+0x4>

08003332 <BusFault_Handler>:

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8003332:	b480      	push	{r7}
 8003334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003336:	e7fe      	b.n	8003336 <BusFault_Handler+0x4>

08003338 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800333c:	e7fe      	b.n	800333c <UsageFault_Handler+0x4>

0800333e <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 800333e:	b480      	push	{r7}
 8003340:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003342:	bf00      	nop
 8003344:	46bd      	mov	sp, r7
 8003346:	bc80      	pop	{r7}
 8003348:	4770      	bx	lr

0800334a <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 800334a:	b480      	push	{r7}
 800334c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800334e:	bf00      	nop
 8003350:	46bd      	mov	sp, r7
 8003352:	bc80      	pop	{r7}
 8003354:	4770      	bx	lr

08003356 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 8003356:	b480      	push	{r7}
 8003358:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800335a:	bf00      	nop
 800335c:	46bd      	mov	sp, r7
 800335e:	bc80      	pop	{r7}
 8003360:	4770      	bx	lr

08003362 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003366:	f000 fb1f 	bl	80039a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800336a:	bf00      	nop
 800336c:	bd80      	pop	{r7, pc}
	...

08003370 <EXTI0_IRQHandler>:

/**
 * @brief This function handles EXTI line0 interrupt.
 */
void EXTI0_IRQHandler(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_0) != RESET)
 8003374:	4b0e      	ldr	r3, [pc, #56]	; (80033b0 <EXTI0_IRQHandler+0x40>)
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	2b00      	cmp	r3, #0
 800337e:	d011      	beq.n	80033a4 <EXTI0_IRQHandler+0x34>
  {
    if (bt_flags == 0)
 8003380:	4b0c      	ldr	r3, [pc, #48]	; (80033b4 <EXTI0_IRQHandler+0x44>)
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b00      	cmp	r3, #0
 8003388:	d103      	bne.n	8003392 <EXTI0_IRQHandler+0x22>
      bt_flags = 2;
 800338a:	4b0a      	ldr	r3, [pc, #40]	; (80033b4 <EXTI0_IRQHandler+0x44>)
 800338c:	2202      	movs	r2, #2
 800338e:	701a      	strb	r2, [r3, #0]
 8003390:	e002      	b.n	8003398 <EXTI0_IRQHandler+0x28>
    else
      bt_flags = 1;
 8003392:	4b08      	ldr	r3, [pc, #32]	; (80033b4 <EXTI0_IRQHandler+0x44>)
 8003394:	2201      	movs	r2, #1
 8003396:	701a      	strb	r2, [r3, #0]
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 8003398:	4b05      	ldr	r3, [pc, #20]	; (80033b0 <EXTI0_IRQHandler+0x40>)
 800339a:	2201      	movs	r2, #1
 800339c:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_PIN_0);
 800339e:	2001      	movs	r0, #1
 80033a0:	f000 ff34 	bl	800420c <HAL_GPIO_EXTI_Callback>
  }
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80033a4:	2001      	movs	r0, #1
 80033a6:	f000 ff19 	bl	80041dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80033aa:	bf00      	nop
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	40010400 	.word	0x40010400
 80033b4:	20002070 	.word	0x20002070

080033b8 <EXTI3_IRQHandler>:

/**
 * @brief This function handles EXTI line3 interrupt.
 */
void EXTI3_IRQHandler(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_3) != RESET)
 80033bc:	4b17      	ldr	r3, [pc, #92]	; (800341c <EXTI3_IRQHandler+0x64>)
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	f003 0308 	and.w	r3, r3, #8
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d023      	beq.n	8003410 <EXTI3_IRQHandler+0x58>
  {
    if (Ov7725_vsync == 0)
 80033c8:	4b15      	ldr	r3, [pc, #84]	; (8003420 <EXTI3_IRQHandler+0x68>)
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d10f      	bne.n	80033f0 <EXTI3_IRQHandler+0x38>
    {
      FIFO_WRST_L();
 80033d0:	4b14      	ldr	r3, [pc, #80]	; (8003424 <EXTI3_IRQHandler+0x6c>)
 80033d2:	2210      	movs	r2, #16
 80033d4:	615a      	str	r2, [r3, #20]
      FIFO_WE_H();
 80033d6:	4b14      	ldr	r3, [pc, #80]	; (8003428 <EXTI3_IRQHandler+0x70>)
 80033d8:	2208      	movs	r2, #8
 80033da:	611a      	str	r2, [r3, #16]

      Ov7725_vsync = 1;
 80033dc:	4b10      	ldr	r3, [pc, #64]	; (8003420 <EXTI3_IRQHandler+0x68>)
 80033de:	2201      	movs	r2, #1
 80033e0:	701a      	strb	r2, [r3, #0]
      FIFO_WE_H();
 80033e2:	4b11      	ldr	r3, [pc, #68]	; (8003428 <EXTI3_IRQHandler+0x70>)
 80033e4:	2208      	movs	r2, #8
 80033e6:	611a      	str	r2, [r3, #16]
      FIFO_WRST_H();
 80033e8:	4b0e      	ldr	r3, [pc, #56]	; (8003424 <EXTI3_IRQHandler+0x6c>)
 80033ea:	2210      	movs	r2, #16
 80033ec:	611a      	str	r2, [r3, #16]
 80033ee:	e009      	b.n	8003404 <EXTI3_IRQHandler+0x4c>
    }
    else if (Ov7725_vsync == 1)
 80033f0:	4b0b      	ldr	r3, [pc, #44]	; (8003420 <EXTI3_IRQHandler+0x68>)
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d105      	bne.n	8003404 <EXTI3_IRQHandler+0x4c>
    {
      FIFO_WE_L();
 80033f8:	4b0b      	ldr	r3, [pc, #44]	; (8003428 <EXTI3_IRQHandler+0x70>)
 80033fa:	2208      	movs	r2, #8
 80033fc:	615a      	str	r2, [r3, #20]
      Ov7725_vsync = 2;
 80033fe:	4b08      	ldr	r3, [pc, #32]	; (8003420 <EXTI3_IRQHandler+0x68>)
 8003400:	2202      	movs	r2, #2
 8003402:	701a      	strb	r2, [r3, #0]
    }

    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_3);
 8003404:	4b05      	ldr	r3, [pc, #20]	; (800341c <EXTI3_IRQHandler+0x64>)
 8003406:	2208      	movs	r2, #8
 8003408:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_PIN_3);
 800340a:	2008      	movs	r0, #8
 800340c:	f000 fefe 	bl	800420c <HAL_GPIO_EXTI_Callback>
  }
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8003410:	2008      	movs	r0, #8
 8003412:	f000 fee3 	bl	80041dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003416:	bf00      	nop
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	40010400 	.word	0x40010400
 8003420:	20002064 	.word	0x20002064
 8003424:	40011000 	.word	0x40011000
 8003428:	40011400 	.word	0x40011400

0800342c <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  if (RxBuffer[2] == 0x6b)
 8003430:	4b1c      	ldr	r3, [pc, #112]	; (80034a4 <USART1_IRQHandler+0x78>)
 8003432:	789b      	ldrb	r3, [r3, #2]
 8003434:	2b6b      	cmp	r3, #107	; 0x6b
 8003436:	d12a      	bne.n	800348e <USART1_IRQHandler+0x62>
  {
    if (RxBuffer[1] == 0x9f)
 8003438:	4b1a      	ldr	r3, [pc, #104]	; (80034a4 <USART1_IRQHandler+0x78>)
 800343a:	785b      	ldrb	r3, [r3, #1]
 800343c:	2b9f      	cmp	r3, #159	; 0x9f
 800343e:	d110      	bne.n	8003462 <USART1_IRQHandler+0x36>
    {
      motor_flag |= 0x01 << (RxBuffer[0] - 1);
 8003440:	4b18      	ldr	r3, [pc, #96]	; (80034a4 <USART1_IRQHandler+0x78>)
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	3b01      	subs	r3, #1
 8003446:	2201      	movs	r2, #1
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	b25a      	sxtb	r2, r3
 800344e:	4b16      	ldr	r3, [pc, #88]	; (80034a8 <USART1_IRQHandler+0x7c>)
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	b2db      	uxtb	r3, r3
 8003454:	b25b      	sxtb	r3, r3
 8003456:	4313      	orrs	r3, r2
 8003458:	b25b      	sxtb	r3, r3
 800345a:	b2da      	uxtb	r2, r3
 800345c:	4b12      	ldr	r3, [pc, #72]	; (80034a8 <USART1_IRQHandler+0x7c>)
 800345e:	701a      	strb	r2, [r3, #0]
 8003460:	e015      	b.n	800348e <USART1_IRQHandler+0x62>
    }
    else if (RxBuffer[1] == 0x02)
 8003462:	4b10      	ldr	r3, [pc, #64]	; (80034a4 <USART1_IRQHandler+0x78>)
 8003464:	785b      	ldrb	r3, [r3, #1]
 8003466:	2b02      	cmp	r3, #2
 8003468:	d111      	bne.n	800348e <USART1_IRQHandler+0x62>
    {
      motor_flag &= ~(0x01 << (RxBuffer[0] - 1));
 800346a:	4b0e      	ldr	r3, [pc, #56]	; (80034a4 <USART1_IRQHandler+0x78>)
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	3b01      	subs	r3, #1
 8003470:	2201      	movs	r2, #1
 8003472:	fa02 f303 	lsl.w	r3, r2, r3
 8003476:	b25b      	sxtb	r3, r3
 8003478:	43db      	mvns	r3, r3
 800347a:	b25a      	sxtb	r2, r3
 800347c:	4b0a      	ldr	r3, [pc, #40]	; (80034a8 <USART1_IRQHandler+0x7c>)
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	b2db      	uxtb	r3, r3
 8003482:	b25b      	sxtb	r3, r3
 8003484:	4013      	ands	r3, r2
 8003486:	b25b      	sxtb	r3, r3
 8003488:	b2da      	uxtb	r2, r3
 800348a:	4b07      	ldr	r3, [pc, #28]	; (80034a8 <USART1_IRQHandler+0x7c>)
 800348c:	701a      	strb	r2, [r3, #0]
    }
  }
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800348e:	4807      	ldr	r0, [pc, #28]	; (80034ac <USART1_IRQHandler+0x80>)
 8003490:	f001 fc64 	bl	8004d5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  HAL_UART_Receive_IT(&huart1, (uint8_t *)&RxBuffer, RXBUFFERSIZE);
 8003494:	2203      	movs	r2, #3
 8003496:	4903      	ldr	r1, [pc, #12]	; (80034a4 <USART1_IRQHandler+0x78>)
 8003498:	4804      	ldr	r0, [pc, #16]	; (80034ac <USART1_IRQHandler+0x80>)
 800349a:	f001 fc0b 	bl	8004cb4 <HAL_UART_Receive_IT>

  /* USER CODE END USART1_IRQn 1 */
}
 800349e:	bf00      	nop
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	20002068 	.word	0x20002068
 80034a8:	20002066 	.word	0x20002066
 80034ac:	20002074 	.word	0x20002074

080034b0 <USART3_IRQHandler>:

/**
 * @brief This function handles USART3 global interrupt.
 */
void USART3_IRQHandler(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80034b4:	4802      	ldr	r0, [pc, #8]	; (80034c0 <USART3_IRQHandler+0x10>)
 80034b6:	f001 fc51 	bl	8004d5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80034ba:	bf00      	nop
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	200020b4 	.word	0x200020b4

080034c4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034d0:	2300      	movs	r3, #0
 80034d2:	617b      	str	r3, [r7, #20]
 80034d4:	e00a      	b.n	80034ec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80034d6:	f3af 8000 	nop.w
 80034da:	4601      	mov	r1, r0
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	1c5a      	adds	r2, r3, #1
 80034e0:	60ba      	str	r2, [r7, #8]
 80034e2:	b2ca      	uxtb	r2, r1
 80034e4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	3301      	adds	r3, #1
 80034ea:	617b      	str	r3, [r7, #20]
 80034ec:	697a      	ldr	r2, [r7, #20]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	dbf0      	blt.n	80034d6 <_read+0x12>
	}

return len;
 80034f4:	687b      	ldr	r3, [r7, #4]
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3718      	adds	r7, #24
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}

080034fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b086      	sub	sp, #24
 8003502:	af00      	add	r7, sp, #0
 8003504:	60f8      	str	r0, [r7, #12]
 8003506:	60b9      	str	r1, [r7, #8]
 8003508:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800350a:	2300      	movs	r3, #0
 800350c:	617b      	str	r3, [r7, #20]
 800350e:	e009      	b.n	8003524 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	1c5a      	adds	r2, r3, #1
 8003514:	60ba      	str	r2, [r7, #8]
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	4618      	mov	r0, r3
 800351a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	3301      	adds	r3, #1
 8003522:	617b      	str	r3, [r7, #20]
 8003524:	697a      	ldr	r2, [r7, #20]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	429a      	cmp	r2, r3
 800352a:	dbf1      	blt.n	8003510 <_write+0x12>
	}
	return len;
 800352c:	687b      	ldr	r3, [r7, #4]
}
 800352e:	4618      	mov	r0, r3
 8003530:	3718      	adds	r7, #24
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <_close>:

int _close(int file)
{
 8003536:	b480      	push	{r7}
 8003538:	b083      	sub	sp, #12
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
	return -1;
 800353e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003542:	4618      	mov	r0, r3
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	bc80      	pop	{r7}
 800354a:	4770      	bx	lr

0800354c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800355c:	605a      	str	r2, [r3, #4]
	return 0;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	bc80      	pop	{r7}
 8003568:	4770      	bx	lr

0800356a <_isatty>:

int _isatty(int file)
{
 800356a:	b480      	push	{r7}
 800356c:	b083      	sub	sp, #12
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
	return 1;
 8003572:	2301      	movs	r3, #1
}
 8003574:	4618      	mov	r0, r3
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	bc80      	pop	{r7}
 800357c:	4770      	bx	lr

0800357e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800357e:	b480      	push	{r7}
 8003580:	b085      	sub	sp, #20
 8003582:	af00      	add	r7, sp, #0
 8003584:	60f8      	str	r0, [r7, #12]
 8003586:	60b9      	str	r1, [r7, #8]
 8003588:	607a      	str	r2, [r7, #4]
	return 0;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3714      	adds	r7, #20
 8003590:	46bd      	mov	sp, r7
 8003592:	bc80      	pop	{r7}
 8003594:	4770      	bx	lr
	...

08003598 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035a0:	4a14      	ldr	r2, [pc, #80]	; (80035f4 <_sbrk+0x5c>)
 80035a2:	4b15      	ldr	r3, [pc, #84]	; (80035f8 <_sbrk+0x60>)
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035ac:	4b13      	ldr	r3, [pc, #76]	; (80035fc <_sbrk+0x64>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d102      	bne.n	80035ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035b4:	4b11      	ldr	r3, [pc, #68]	; (80035fc <_sbrk+0x64>)
 80035b6:	4a12      	ldr	r2, [pc, #72]	; (8003600 <_sbrk+0x68>)
 80035b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035ba:	4b10      	ldr	r3, [pc, #64]	; (80035fc <_sbrk+0x64>)
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4413      	add	r3, r2
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d207      	bcs.n	80035d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035c8:	f002 f85e 	bl	8005688 <__errno>
 80035cc:	4603      	mov	r3, r0
 80035ce:	220c      	movs	r2, #12
 80035d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80035d2:	f04f 33ff 	mov.w	r3, #4294967295
 80035d6:	e009      	b.n	80035ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035d8:	4b08      	ldr	r3, [pc, #32]	; (80035fc <_sbrk+0x64>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035de:	4b07      	ldr	r3, [pc, #28]	; (80035fc <_sbrk+0x64>)
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4413      	add	r3, r2
 80035e6:	4a05      	ldr	r2, [pc, #20]	; (80035fc <_sbrk+0x64>)
 80035e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035ea:	68fb      	ldr	r3, [r7, #12]
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3718      	adds	r7, #24
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	20010000 	.word	0x20010000
 80035f8:	00000400 	.word	0x00000400
 80035fc:	2000206c 	.word	0x2000206c
 8003600:	20002108 	.word	0x20002108

08003604 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003604:	b480      	push	{r7}
 8003606:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003608:	bf00      	nop
 800360a:	46bd      	mov	sp, r7
 800360c:	bc80      	pop	{r7}
 800360e:	4770      	bx	lr

08003610 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8003614:	4b11      	ldr	r3, [pc, #68]	; (800365c <MX_USART1_UART_Init+0x4c>)
 8003616:	4a12      	ldr	r2, [pc, #72]	; (8003660 <MX_USART1_UART_Init+0x50>)
 8003618:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800361a:	4b10      	ldr	r3, [pc, #64]	; (800365c <MX_USART1_UART_Init+0x4c>)
 800361c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003620:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003622:	4b0e      	ldr	r3, [pc, #56]	; (800365c <MX_USART1_UART_Init+0x4c>)
 8003624:	2200      	movs	r2, #0
 8003626:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003628:	4b0c      	ldr	r3, [pc, #48]	; (800365c <MX_USART1_UART_Init+0x4c>)
 800362a:	2200      	movs	r2, #0
 800362c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800362e:	4b0b      	ldr	r3, [pc, #44]	; (800365c <MX_USART1_UART_Init+0x4c>)
 8003630:	2200      	movs	r2, #0
 8003632:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003634:	4b09      	ldr	r3, [pc, #36]	; (800365c <MX_USART1_UART_Init+0x4c>)
 8003636:	220c      	movs	r2, #12
 8003638:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800363a:	4b08      	ldr	r3, [pc, #32]	; (800365c <MX_USART1_UART_Init+0x4c>)
 800363c:	2200      	movs	r2, #0
 800363e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003640:	4b06      	ldr	r3, [pc, #24]	; (800365c <MX_USART1_UART_Init+0x4c>)
 8003642:	2200      	movs	r2, #0
 8003644:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003646:	4805      	ldr	r0, [pc, #20]	; (800365c <MX_USART1_UART_Init+0x4c>)
 8003648:	f001 fa4e 	bl	8004ae8 <HAL_UART_Init>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003652:	f7fe feec 	bl	800242e <Error_Handler>
  }

}
 8003656:	bf00      	nop
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	20002074 	.word	0x20002074
 8003660:	40013800 	.word	0x40013800

08003664 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8003668:	4b11      	ldr	r3, [pc, #68]	; (80036b0 <MX_USART3_UART_Init+0x4c>)
 800366a:	4a12      	ldr	r2, [pc, #72]	; (80036b4 <MX_USART3_UART_Init+0x50>)
 800366c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800366e:	4b10      	ldr	r3, [pc, #64]	; (80036b0 <MX_USART3_UART_Init+0x4c>)
 8003670:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003674:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003676:	4b0e      	ldr	r3, [pc, #56]	; (80036b0 <MX_USART3_UART_Init+0x4c>)
 8003678:	2200      	movs	r2, #0
 800367a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800367c:	4b0c      	ldr	r3, [pc, #48]	; (80036b0 <MX_USART3_UART_Init+0x4c>)
 800367e:	2200      	movs	r2, #0
 8003680:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003682:	4b0b      	ldr	r3, [pc, #44]	; (80036b0 <MX_USART3_UART_Init+0x4c>)
 8003684:	2200      	movs	r2, #0
 8003686:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003688:	4b09      	ldr	r3, [pc, #36]	; (80036b0 <MX_USART3_UART_Init+0x4c>)
 800368a:	220c      	movs	r2, #12
 800368c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800368e:	4b08      	ldr	r3, [pc, #32]	; (80036b0 <MX_USART3_UART_Init+0x4c>)
 8003690:	2200      	movs	r2, #0
 8003692:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003694:	4b06      	ldr	r3, [pc, #24]	; (80036b0 <MX_USART3_UART_Init+0x4c>)
 8003696:	2200      	movs	r2, #0
 8003698:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800369a:	4805      	ldr	r0, [pc, #20]	; (80036b0 <MX_USART3_UART_Init+0x4c>)
 800369c:	f001 fa24 	bl	8004ae8 <HAL_UART_Init>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80036a6:	f7fe fec2 	bl	800242e <Error_Handler>
  }

}
 80036aa:	bf00      	nop
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	200020b4 	.word	0x200020b4
 80036b4:	40004800 	.word	0x40004800

080036b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b08c      	sub	sp, #48	; 0x30
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036c0:	f107 031c 	add.w	r3, r7, #28
 80036c4:	2200      	movs	r2, #0
 80036c6:	601a      	str	r2, [r3, #0]
 80036c8:	605a      	str	r2, [r3, #4]
 80036ca:	609a      	str	r2, [r3, #8]
 80036cc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a49      	ldr	r2, [pc, #292]	; (80037f8 <HAL_UART_MspInit+0x140>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d13a      	bne.n	800374e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80036d8:	4b48      	ldr	r3, [pc, #288]	; (80037fc <HAL_UART_MspInit+0x144>)
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	4a47      	ldr	r2, [pc, #284]	; (80037fc <HAL_UART_MspInit+0x144>)
 80036de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036e2:	6193      	str	r3, [r2, #24]
 80036e4:	4b45      	ldr	r3, [pc, #276]	; (80037fc <HAL_UART_MspInit+0x144>)
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036ec:	61bb      	str	r3, [r7, #24]
 80036ee:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036f0:	4b42      	ldr	r3, [pc, #264]	; (80037fc <HAL_UART_MspInit+0x144>)
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	4a41      	ldr	r2, [pc, #260]	; (80037fc <HAL_UART_MspInit+0x144>)
 80036f6:	f043 0304 	orr.w	r3, r3, #4
 80036fa:	6193      	str	r3, [r2, #24]
 80036fc:	4b3f      	ldr	r3, [pc, #252]	; (80037fc <HAL_UART_MspInit+0x144>)
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	617b      	str	r3, [r7, #20]
 8003706:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003708:	f44f 7300 	mov.w	r3, #512	; 0x200
 800370c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800370e:	2302      	movs	r3, #2
 8003710:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003712:	2303      	movs	r3, #3
 8003714:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003716:	f107 031c 	add.w	r3, r7, #28
 800371a:	4619      	mov	r1, r3
 800371c:	4838      	ldr	r0, [pc, #224]	; (8003800 <HAL_UART_MspInit+0x148>)
 800371e:	f000 fb95 	bl	8003e4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003722:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003726:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003728:	2300      	movs	r3, #0
 800372a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800372c:	2300      	movs	r3, #0
 800372e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003730:	f107 031c 	add.w	r3, r7, #28
 8003734:	4619      	mov	r1, r3
 8003736:	4832      	ldr	r0, [pc, #200]	; (8003800 <HAL_UART_MspInit+0x148>)
 8003738:	f000 fb88 	bl	8003e4c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800373c:	2200      	movs	r2, #0
 800373e:	2100      	movs	r1, #0
 8003740:	2025      	movs	r0, #37	; 0x25
 8003742:	f000 fa44 	bl	8003bce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003746:	2025      	movs	r0, #37	; 0x25
 8003748:	f000 fa5d 	bl	8003c06 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800374c:	e050      	b.n	80037f0 <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART3)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a2c      	ldr	r2, [pc, #176]	; (8003804 <HAL_UART_MspInit+0x14c>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d14b      	bne.n	80037f0 <HAL_UART_MspInit+0x138>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003758:	4b28      	ldr	r3, [pc, #160]	; (80037fc <HAL_UART_MspInit+0x144>)
 800375a:	69db      	ldr	r3, [r3, #28]
 800375c:	4a27      	ldr	r2, [pc, #156]	; (80037fc <HAL_UART_MspInit+0x144>)
 800375e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003762:	61d3      	str	r3, [r2, #28]
 8003764:	4b25      	ldr	r3, [pc, #148]	; (80037fc <HAL_UART_MspInit+0x144>)
 8003766:	69db      	ldr	r3, [r3, #28]
 8003768:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800376c:	613b      	str	r3, [r7, #16]
 800376e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003770:	4b22      	ldr	r3, [pc, #136]	; (80037fc <HAL_UART_MspInit+0x144>)
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	4a21      	ldr	r2, [pc, #132]	; (80037fc <HAL_UART_MspInit+0x144>)
 8003776:	f043 0310 	orr.w	r3, r3, #16
 800377a:	6193      	str	r3, [r2, #24]
 800377c:	4b1f      	ldr	r3, [pc, #124]	; (80037fc <HAL_UART_MspInit+0x144>)
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	f003 0310 	and.w	r3, r3, #16
 8003784:	60fb      	str	r3, [r7, #12]
 8003786:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003788:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800378c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800378e:	2302      	movs	r3, #2
 8003790:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003792:	2303      	movs	r3, #3
 8003794:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003796:	f107 031c 	add.w	r3, r7, #28
 800379a:	4619      	mov	r1, r3
 800379c:	481a      	ldr	r0, [pc, #104]	; (8003808 <HAL_UART_MspInit+0x150>)
 800379e:	f000 fb55 	bl	8003e4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80037a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80037a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037a8:	2300      	movs	r3, #0
 80037aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ac:	2300      	movs	r3, #0
 80037ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037b0:	f107 031c 	add.w	r3, r7, #28
 80037b4:	4619      	mov	r1, r3
 80037b6:	4814      	ldr	r0, [pc, #80]	; (8003808 <HAL_UART_MspInit+0x150>)
 80037b8:	f000 fb48 	bl	8003e4c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 80037bc:	4b13      	ldr	r3, [pc, #76]	; (800380c <HAL_UART_MspInit+0x154>)
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80037c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037cc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80037d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d4:	f043 0310 	orr.w	r3, r3, #16
 80037d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037da:	4a0c      	ldr	r2, [pc, #48]	; (800380c <HAL_UART_MspInit+0x154>)
 80037dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037de:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80037e0:	2200      	movs	r2, #0
 80037e2:	2100      	movs	r1, #0
 80037e4:	2027      	movs	r0, #39	; 0x27
 80037e6:	f000 f9f2 	bl	8003bce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80037ea:	2027      	movs	r0, #39	; 0x27
 80037ec:	f000 fa0b 	bl	8003c06 <HAL_NVIC_EnableIRQ>
}
 80037f0:	bf00      	nop
 80037f2:	3730      	adds	r7, #48	; 0x30
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	40013800 	.word	0x40013800
 80037fc:	40021000 	.word	0x40021000
 8003800:	40010800 	.word	0x40010800
 8003804:	40004800 	.word	0x40004800
 8003808:	40011000 	.word	0x40011000
 800380c:	40010000 	.word	0x40010000

08003810 <HAL_UART_RxCpltCallback>:
}

/* USER CODE BEGIN 1 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  UNUSED(huart);
  HAL_UART_Transmit(&huart3, (uint8_t *)&rx_buffer, 1,0xFFFF);
 8003818:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800381c:	2201      	movs	r2, #1
 800381e:	4929      	ldr	r1, [pc, #164]	; (80038c4 <HAL_UART_RxCpltCallback+0xb4>)
 8003820:	4829      	ldr	r0, [pc, #164]	; (80038c8 <HAL_UART_RxCpltCallback+0xb8>)
 8003822:	f001 f9ae 	bl	8004b82 <HAL_UART_Transmit>
  while(HAL_UART_GetState(&huart3) == HAL_UART_STATE_BUSY_TX);
 8003826:	bf00      	nop
 8003828:	4827      	ldr	r0, [pc, #156]	; (80038c8 <HAL_UART_RxCpltCallback+0xb8>)
 800382a:	f001 fba3 	bl	8004f74 <HAL_UART_GetState>
 800382e:	4603      	mov	r3, r0
 8003830:	2b21      	cmp	r3, #33	; 0x21
 8003832:	d0f9      	beq.n	8003828 <HAL_UART_RxCpltCallback+0x18>
  HAL_UART_Receive_IT(&huart3, (uint8_t *)&rx_buffer, 1);
 8003834:	2201      	movs	r2, #1
 8003836:	4923      	ldr	r1, [pc, #140]	; (80038c4 <HAL_UART_RxCpltCallback+0xb4>)
 8003838:	4823      	ldr	r0, [pc, #140]	; (80038c8 <HAL_UART_RxCpltCallback+0xb8>)
 800383a:	f001 fa3b 	bl	8004cb4 <HAL_UART_Receive_IT>
  //c means confrim face, s means start robot,b means begin solve ,e means end solve
  switch(rx_buffer)
 800383e:	4b21      	ldr	r3, [pc, #132]	; (80038c4 <HAL_UART_RxCpltCallback+0xb4>)
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	b2db      	uxtb	r3, r3
 8003844:	3b62      	subs	r3, #98	; 0x62
 8003846:	2b11      	cmp	r3, #17
 8003848:	d836      	bhi.n	80038b8 <HAL_UART_RxCpltCallback+0xa8>
 800384a:	a201      	add	r2, pc, #4	; (adr r2, 8003850 <HAL_UART_RxCpltCallback+0x40>)
 800384c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003850:	080038a9 	.word	0x080038a9
 8003854:	08003899 	.word	0x08003899
 8003858:	080038b9 	.word	0x080038b9
 800385c:	080038b1 	.word	0x080038b1
 8003860:	080038b9 	.word	0x080038b9
 8003864:	080038b9 	.word	0x080038b9
 8003868:	080038b9 	.word	0x080038b9
 800386c:	080038b9 	.word	0x080038b9
 8003870:	080038b9 	.word	0x080038b9
 8003874:	080038b9 	.word	0x080038b9
 8003878:	080038b9 	.word	0x080038b9
 800387c:	080038b9 	.word	0x080038b9
 8003880:	080038b9 	.word	0x080038b9
 8003884:	080038b9 	.word	0x080038b9
 8003888:	080038b9 	.word	0x080038b9
 800388c:	080038b9 	.word	0x080038b9
 8003890:	080038b9 	.word	0x080038b9
 8003894:	080038a1 	.word	0x080038a1
  {
    case 'c':
      bt_flags = 1;
 8003898:	4b0c      	ldr	r3, [pc, #48]	; (80038cc <HAL_UART_RxCpltCallback+0xbc>)
 800389a:	2201      	movs	r2, #1
 800389c:	701a      	strb	r2, [r3, #0]
      break;
 800389e:	e00c      	b.n	80038ba <HAL_UART_RxCpltCallback+0xaa>
    case 's':
      bt_flags = 2;
 80038a0:	4b0a      	ldr	r3, [pc, #40]	; (80038cc <HAL_UART_RxCpltCallback+0xbc>)
 80038a2:	2202      	movs	r2, #2
 80038a4:	701a      	strb	r2, [r3, #0]
      break;
 80038a6:	e008      	b.n	80038ba <HAL_UART_RxCpltCallback+0xaa>
    case 'b':
      bt_flags = 3;
 80038a8:	4b08      	ldr	r3, [pc, #32]	; (80038cc <HAL_UART_RxCpltCallback+0xbc>)
 80038aa:	2203      	movs	r2, #3
 80038ac:	701a      	strb	r2, [r3, #0]
      break;
 80038ae:	e004      	b.n	80038ba <HAL_UART_RxCpltCallback+0xaa>
    case 'e':
      bt_flags = 4;
 80038b0:	4b06      	ldr	r3, [pc, #24]	; (80038cc <HAL_UART_RxCpltCallback+0xbc>)
 80038b2:	2204      	movs	r2, #4
 80038b4:	701a      	strb	r2, [r3, #0]
      break;
 80038b6:	e000      	b.n	80038ba <HAL_UART_RxCpltCallback+0xaa>
    default:
      break;
 80038b8:	bf00      	nop
  }
}
 80038ba:	bf00      	nop
 80038bc:	3708      	adds	r7, #8
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	20002065 	.word	0x20002065
 80038c8:	200020b4 	.word	0x200020b4
 80038cc:	20002070 	.word	0x20002070

080038d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80038d0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80038d2:	e003      	b.n	80038dc <LoopCopyDataInit>

080038d4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80038d4:	4b0b      	ldr	r3, [pc, #44]	; (8003904 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80038d6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80038d8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80038da:	3104      	adds	r1, #4

080038dc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80038dc:	480a      	ldr	r0, [pc, #40]	; (8003908 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80038de:	4b0b      	ldr	r3, [pc, #44]	; (800390c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80038e0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80038e2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80038e4:	d3f6      	bcc.n	80038d4 <CopyDataInit>
  ldr r2, =_sbss
 80038e6:	4a0a      	ldr	r2, [pc, #40]	; (8003910 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80038e8:	e002      	b.n	80038f0 <LoopFillZerobss>

080038ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80038ea:	2300      	movs	r3, #0
  str r3, [r2], #4
 80038ec:	f842 3b04 	str.w	r3, [r2], #4

080038f0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80038f0:	4b08      	ldr	r3, [pc, #32]	; (8003914 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80038f2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80038f4:	d3f9      	bcc.n	80038ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80038f6:	f7ff fe85 	bl	8003604 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80038fa:	f001 fecb 	bl	8005694 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80038fe:	f7fe fa77 	bl	8001df0 <main>
  bx lr
 8003902:	4770      	bx	lr
  ldr r3, =_sidata
 8003904:	080079f8 	.word	0x080079f8
  ldr r0, =_sdata
 8003908:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800390c:	200001e4 	.word	0x200001e4
  ldr r2, =_sbss
 8003910:	200001e4 	.word	0x200001e4
  ldr r3, = _ebss
 8003914:	20002108 	.word	0x20002108

08003918 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003918:	e7fe      	b.n	8003918 <ADC1_2_IRQHandler>
	...

0800391c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003920:	4b08      	ldr	r3, [pc, #32]	; (8003944 <HAL_Init+0x28>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a07      	ldr	r2, [pc, #28]	; (8003944 <HAL_Init+0x28>)
 8003926:	f043 0310 	orr.w	r3, r3, #16
 800392a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800392c:	2003      	movs	r0, #3
 800392e:	f000 f943 	bl	8003bb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003932:	2000      	movs	r0, #0
 8003934:	f000 f808 	bl	8003948 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003938:	f7ff fcc0 	bl	80032bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	40022000 	.word	0x40022000

08003948 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003950:	4b12      	ldr	r3, [pc, #72]	; (800399c <HAL_InitTick+0x54>)
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	4b12      	ldr	r3, [pc, #72]	; (80039a0 <HAL_InitTick+0x58>)
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	4619      	mov	r1, r3
 800395a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800395e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003962:	fbb2 f3f3 	udiv	r3, r2, r3
 8003966:	4618      	mov	r0, r3
 8003968:	f000 f95b 	bl	8003c22 <HAL_SYSTICK_Config>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e00e      	b.n	8003994 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2b0f      	cmp	r3, #15
 800397a:	d80a      	bhi.n	8003992 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800397c:	2200      	movs	r2, #0
 800397e:	6879      	ldr	r1, [r7, #4]
 8003980:	f04f 30ff 	mov.w	r0, #4294967295
 8003984:	f000 f923 	bl	8003bce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003988:	4a06      	ldr	r2, [pc, #24]	; (80039a4 <HAL_InitTick+0x5c>)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800398e:	2300      	movs	r3, #0
 8003990:	e000      	b.n	8003994 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
}
 8003994:	4618      	mov	r0, r3
 8003996:	3708      	adds	r7, #8
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	20000174 	.word	0x20000174
 80039a0:	2000017c 	.word	0x2000017c
 80039a4:	20000178 	.word	0x20000178

080039a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039a8:	b480      	push	{r7}
 80039aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039ac:	4b05      	ldr	r3, [pc, #20]	; (80039c4 <HAL_IncTick+0x1c>)
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	461a      	mov	r2, r3
 80039b2:	4b05      	ldr	r3, [pc, #20]	; (80039c8 <HAL_IncTick+0x20>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4413      	add	r3, r2
 80039b8:	4a03      	ldr	r2, [pc, #12]	; (80039c8 <HAL_IncTick+0x20>)
 80039ba:	6013      	str	r3, [r2, #0]
}
 80039bc:	bf00      	nop
 80039be:	46bd      	mov	sp, r7
 80039c0:	bc80      	pop	{r7}
 80039c2:	4770      	bx	lr
 80039c4:	2000017c 	.word	0x2000017c
 80039c8:	200020f4 	.word	0x200020f4

080039cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
  return uwTick;
 80039d0:	4b02      	ldr	r3, [pc, #8]	; (80039dc <HAL_GetTick+0x10>)
 80039d2:	681b      	ldr	r3, [r3, #0]
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bc80      	pop	{r7}
 80039da:	4770      	bx	lr
 80039dc:	200020f4 	.word	0x200020f4

080039e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039e8:	f7ff fff0 	bl	80039cc <HAL_GetTick>
 80039ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f8:	d005      	beq.n	8003a06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039fa:	4b0a      	ldr	r3, [pc, #40]	; (8003a24 <HAL_Delay+0x44>)
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	461a      	mov	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	4413      	add	r3, r2
 8003a04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003a06:	bf00      	nop
 8003a08:	f7ff ffe0 	bl	80039cc <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d8f7      	bhi.n	8003a08 <HAL_Delay+0x28>
  {
  }
}
 8003a18:	bf00      	nop
 8003a1a:	bf00      	nop
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	2000017c 	.word	0x2000017c

08003a28 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b085      	sub	sp, #20
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f003 0307 	and.w	r3, r3, #7
 8003a36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a38:	4b0c      	ldr	r3, [pc, #48]	; (8003a6c <NVIC_SetPriorityGrouping+0x44>)
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a3e:	68ba      	ldr	r2, [r7, #8]
 8003a40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a44:	4013      	ands	r3, r2
 8003a46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a5a:	4a04      	ldr	r2, [pc, #16]	; (8003a6c <NVIC_SetPriorityGrouping+0x44>)
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	60d3      	str	r3, [r2, #12]
}
 8003a60:	bf00      	nop
 8003a62:	3714      	adds	r7, #20
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bc80      	pop	{r7}
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	e000ed00 	.word	0xe000ed00

08003a70 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8003a70:	b480      	push	{r7}
 8003a72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a74:	4b04      	ldr	r3, [pc, #16]	; (8003a88 <NVIC_GetPriorityGrouping+0x18>)
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	0a1b      	lsrs	r3, r3, #8
 8003a7a:	f003 0307 	and.w	r3, r3, #7
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bc80      	pop	{r7}
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	e000ed00 	.word	0xe000ed00

08003a8c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	4603      	mov	r3, r0
 8003a94:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003a96:	79fb      	ldrb	r3, [r7, #7]
 8003a98:	f003 021f 	and.w	r2, r3, #31
 8003a9c:	4906      	ldr	r1, [pc, #24]	; (8003ab8 <NVIC_EnableIRQ+0x2c>)
 8003a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aa2:	095b      	lsrs	r3, r3, #5
 8003aa4:	2001      	movs	r0, #1
 8003aa6:	fa00 f202 	lsl.w	r2, r0, r2
 8003aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003aae:	bf00      	nop
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bc80      	pop	{r7}
 8003ab6:	4770      	bx	lr
 8003ab8:	e000e100 	.word	0xe000e100

08003abc <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	6039      	str	r1, [r7, #0]
 8003ac6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8003ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	da0b      	bge.n	8003ae8 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	b2da      	uxtb	r2, r3
 8003ad4:	490c      	ldr	r1, [pc, #48]	; (8003b08 <NVIC_SetPriority+0x4c>)
 8003ad6:	79fb      	ldrb	r3, [r7, #7]
 8003ad8:	f003 030f 	and.w	r3, r3, #15
 8003adc:	3b04      	subs	r3, #4
 8003ade:	0112      	lsls	r2, r2, #4
 8003ae0:	b2d2      	uxtb	r2, r2
 8003ae2:	440b      	add	r3, r1
 8003ae4:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ae6:	e009      	b.n	8003afc <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	b2da      	uxtb	r2, r3
 8003aec:	4907      	ldr	r1, [pc, #28]	; (8003b0c <NVIC_SetPriority+0x50>)
 8003aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003af2:	0112      	lsls	r2, r2, #4
 8003af4:	b2d2      	uxtb	r2, r2
 8003af6:	440b      	add	r3, r1
 8003af8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bc80      	pop	{r7}
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	e000ed00 	.word	0xe000ed00
 8003b0c:	e000e100 	.word	0xe000e100

08003b10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b089      	sub	sp, #36	; 0x24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f003 0307 	and.w	r3, r3, #7
 8003b22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	f1c3 0307 	rsb	r3, r3, #7
 8003b2a:	2b04      	cmp	r3, #4
 8003b2c:	bf28      	it	cs
 8003b2e:	2304      	movcs	r3, #4
 8003b30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	3304      	adds	r3, #4
 8003b36:	2b06      	cmp	r3, #6
 8003b38:	d902      	bls.n	8003b40 <NVIC_EncodePriority+0x30>
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	3b03      	subs	r3, #3
 8003b3e:	e000      	b.n	8003b42 <NVIC_EncodePriority+0x32>
 8003b40:	2300      	movs	r3, #0
 8003b42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b44:	f04f 32ff 	mov.w	r2, #4294967295
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4e:	43da      	mvns	r2, r3
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	401a      	ands	r2, r3
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b58:	f04f 31ff 	mov.w	r1, #4294967295
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b62:	43d9      	mvns	r1, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b68:	4313      	orrs	r3, r2
         );
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3724      	adds	r7, #36	; 0x24
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bc80      	pop	{r7}
 8003b72:	4770      	bx	lr

08003b74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b84:	d301      	bcc.n	8003b8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b86:	2301      	movs	r3, #1
 8003b88:	e00f      	b.n	8003baa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b8a:	4a0a      	ldr	r2, [pc, #40]	; (8003bb4 <SysTick_Config+0x40>)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b92:	210f      	movs	r1, #15
 8003b94:	f04f 30ff 	mov.w	r0, #4294967295
 8003b98:	f7ff ff90 	bl	8003abc <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b9c:	4b05      	ldr	r3, [pc, #20]	; (8003bb4 <SysTick_Config+0x40>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ba2:	4b04      	ldr	r3, [pc, #16]	; (8003bb4 <SysTick_Config+0x40>)
 8003ba4:	2207      	movs	r2, #7
 8003ba6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	e000e010 	.word	0xe000e010

08003bb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f7ff ff31 	bl	8003a28 <NVIC_SetPriorityGrouping>
}
 8003bc6:	bf00      	nop
 8003bc8:	3708      	adds	r7, #8
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b086      	sub	sp, #24
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	60b9      	str	r1, [r7, #8]
 8003bd8:	607a      	str	r2, [r7, #4]
 8003bda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003be0:	f7ff ff46 	bl	8003a70 <NVIC_GetPriorityGrouping>
 8003be4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	68b9      	ldr	r1, [r7, #8]
 8003bea:	6978      	ldr	r0, [r7, #20]
 8003bec:	f7ff ff90 	bl	8003b10 <NVIC_EncodePriority>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bf6:	4611      	mov	r1, r2
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7ff ff5f 	bl	8003abc <NVIC_SetPriority>
}
 8003bfe:	bf00      	nop
 8003c00:	3718      	adds	r7, #24
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b082      	sub	sp, #8
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7ff ff39 	bl	8003a8c <NVIC_EnableIRQ>
}
 8003c1a:	bf00      	nop
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c22:	b580      	push	{r7, lr}
 8003c24:	b082      	sub	sp, #8
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f7ff ffa2 	bl	8003b74 <SysTick_Config>
 8003c30:	4603      	mov	r3, r0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3708      	adds	r7, #8
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
	...

08003c3c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c44:	2300      	movs	r3, #0
 8003c46:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d005      	beq.n	8003c5e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2204      	movs	r2, #4
 8003c56:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	73fb      	strb	r3, [r7, #15]
 8003c5c:	e0d6      	b.n	8003e0c <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f022 020e 	bic.w	r2, r2, #14
 8003c6c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f022 0201 	bic.w	r2, r2, #1
 8003c7c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	461a      	mov	r2, r3
 8003c84:	4b64      	ldr	r3, [pc, #400]	; (8003e18 <HAL_DMA_Abort_IT+0x1dc>)
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d958      	bls.n	8003d3c <HAL_DMA_Abort_IT+0x100>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a63      	ldr	r2, [pc, #396]	; (8003e1c <HAL_DMA_Abort_IT+0x1e0>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d04f      	beq.n	8003d34 <HAL_DMA_Abort_IT+0xf8>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a61      	ldr	r2, [pc, #388]	; (8003e20 <HAL_DMA_Abort_IT+0x1e4>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d048      	beq.n	8003d30 <HAL_DMA_Abort_IT+0xf4>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a60      	ldr	r2, [pc, #384]	; (8003e24 <HAL_DMA_Abort_IT+0x1e8>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d040      	beq.n	8003d2a <HAL_DMA_Abort_IT+0xee>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a5e      	ldr	r2, [pc, #376]	; (8003e28 <HAL_DMA_Abort_IT+0x1ec>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d038      	beq.n	8003d24 <HAL_DMA_Abort_IT+0xe8>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a5d      	ldr	r2, [pc, #372]	; (8003e2c <HAL_DMA_Abort_IT+0x1f0>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d030      	beq.n	8003d1e <HAL_DMA_Abort_IT+0xe2>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a5b      	ldr	r2, [pc, #364]	; (8003e30 <HAL_DMA_Abort_IT+0x1f4>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d028      	beq.n	8003d18 <HAL_DMA_Abort_IT+0xdc>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a53      	ldr	r2, [pc, #332]	; (8003e18 <HAL_DMA_Abort_IT+0x1dc>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d020      	beq.n	8003d12 <HAL_DMA_Abort_IT+0xd6>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a57      	ldr	r2, [pc, #348]	; (8003e34 <HAL_DMA_Abort_IT+0x1f8>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d019      	beq.n	8003d0e <HAL_DMA_Abort_IT+0xd2>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a56      	ldr	r2, [pc, #344]	; (8003e38 <HAL_DMA_Abort_IT+0x1fc>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d012      	beq.n	8003d0a <HAL_DMA_Abort_IT+0xce>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a54      	ldr	r2, [pc, #336]	; (8003e3c <HAL_DMA_Abort_IT+0x200>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d00a      	beq.n	8003d04 <HAL_DMA_Abort_IT+0xc8>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a53      	ldr	r2, [pc, #332]	; (8003e40 <HAL_DMA_Abort_IT+0x204>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d102      	bne.n	8003cfe <HAL_DMA_Abort_IT+0xc2>
 8003cf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cfc:	e01b      	b.n	8003d36 <HAL_DMA_Abort_IT+0xfa>
 8003cfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d02:	e018      	b.n	8003d36 <HAL_DMA_Abort_IT+0xfa>
 8003d04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d08:	e015      	b.n	8003d36 <HAL_DMA_Abort_IT+0xfa>
 8003d0a:	2310      	movs	r3, #16
 8003d0c:	e013      	b.n	8003d36 <HAL_DMA_Abort_IT+0xfa>
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e011      	b.n	8003d36 <HAL_DMA_Abort_IT+0xfa>
 8003d12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d16:	e00e      	b.n	8003d36 <HAL_DMA_Abort_IT+0xfa>
 8003d18:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003d1c:	e00b      	b.n	8003d36 <HAL_DMA_Abort_IT+0xfa>
 8003d1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d22:	e008      	b.n	8003d36 <HAL_DMA_Abort_IT+0xfa>
 8003d24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d28:	e005      	b.n	8003d36 <HAL_DMA_Abort_IT+0xfa>
 8003d2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d2e:	e002      	b.n	8003d36 <HAL_DMA_Abort_IT+0xfa>
 8003d30:	2310      	movs	r3, #16
 8003d32:	e000      	b.n	8003d36 <HAL_DMA_Abort_IT+0xfa>
 8003d34:	2301      	movs	r3, #1
 8003d36:	4a43      	ldr	r2, [pc, #268]	; (8003e44 <HAL_DMA_Abort_IT+0x208>)
 8003d38:	6053      	str	r3, [r2, #4]
 8003d3a:	e057      	b.n	8003dec <HAL_DMA_Abort_IT+0x1b0>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a36      	ldr	r2, [pc, #216]	; (8003e1c <HAL_DMA_Abort_IT+0x1e0>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d04f      	beq.n	8003de6 <HAL_DMA_Abort_IT+0x1aa>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a35      	ldr	r2, [pc, #212]	; (8003e20 <HAL_DMA_Abort_IT+0x1e4>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d048      	beq.n	8003de2 <HAL_DMA_Abort_IT+0x1a6>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a33      	ldr	r2, [pc, #204]	; (8003e24 <HAL_DMA_Abort_IT+0x1e8>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d040      	beq.n	8003ddc <HAL_DMA_Abort_IT+0x1a0>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a32      	ldr	r2, [pc, #200]	; (8003e28 <HAL_DMA_Abort_IT+0x1ec>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d038      	beq.n	8003dd6 <HAL_DMA_Abort_IT+0x19a>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a30      	ldr	r2, [pc, #192]	; (8003e2c <HAL_DMA_Abort_IT+0x1f0>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d030      	beq.n	8003dd0 <HAL_DMA_Abort_IT+0x194>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a2f      	ldr	r2, [pc, #188]	; (8003e30 <HAL_DMA_Abort_IT+0x1f4>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d028      	beq.n	8003dca <HAL_DMA_Abort_IT+0x18e>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a26      	ldr	r2, [pc, #152]	; (8003e18 <HAL_DMA_Abort_IT+0x1dc>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d020      	beq.n	8003dc4 <HAL_DMA_Abort_IT+0x188>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a2b      	ldr	r2, [pc, #172]	; (8003e34 <HAL_DMA_Abort_IT+0x1f8>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d019      	beq.n	8003dc0 <HAL_DMA_Abort_IT+0x184>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a29      	ldr	r2, [pc, #164]	; (8003e38 <HAL_DMA_Abort_IT+0x1fc>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d012      	beq.n	8003dbc <HAL_DMA_Abort_IT+0x180>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a28      	ldr	r2, [pc, #160]	; (8003e3c <HAL_DMA_Abort_IT+0x200>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d00a      	beq.n	8003db6 <HAL_DMA_Abort_IT+0x17a>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a26      	ldr	r2, [pc, #152]	; (8003e40 <HAL_DMA_Abort_IT+0x204>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d102      	bne.n	8003db0 <HAL_DMA_Abort_IT+0x174>
 8003daa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003dae:	e01b      	b.n	8003de8 <HAL_DMA_Abort_IT+0x1ac>
 8003db0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003db4:	e018      	b.n	8003de8 <HAL_DMA_Abort_IT+0x1ac>
 8003db6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003dba:	e015      	b.n	8003de8 <HAL_DMA_Abort_IT+0x1ac>
 8003dbc:	2310      	movs	r3, #16
 8003dbe:	e013      	b.n	8003de8 <HAL_DMA_Abort_IT+0x1ac>
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e011      	b.n	8003de8 <HAL_DMA_Abort_IT+0x1ac>
 8003dc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003dc8:	e00e      	b.n	8003de8 <HAL_DMA_Abort_IT+0x1ac>
 8003dca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003dce:	e00b      	b.n	8003de8 <HAL_DMA_Abort_IT+0x1ac>
 8003dd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003dd4:	e008      	b.n	8003de8 <HAL_DMA_Abort_IT+0x1ac>
 8003dd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003dda:	e005      	b.n	8003de8 <HAL_DMA_Abort_IT+0x1ac>
 8003ddc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003de0:	e002      	b.n	8003de8 <HAL_DMA_Abort_IT+0x1ac>
 8003de2:	2310      	movs	r3, #16
 8003de4:	e000      	b.n	8003de8 <HAL_DMA_Abort_IT+0x1ac>
 8003de6:	2301      	movs	r3, #1
 8003de8:	4a17      	ldr	r2, [pc, #92]	; (8003e48 <HAL_DMA_Abort_IT+0x20c>)
 8003dea:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d003      	beq.n	8003e0c <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	4798      	blx	r3
    } 
  }
  return status;
 8003e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	40020080 	.word	0x40020080
 8003e1c:	40020008 	.word	0x40020008
 8003e20:	4002001c 	.word	0x4002001c
 8003e24:	40020030 	.word	0x40020030
 8003e28:	40020044 	.word	0x40020044
 8003e2c:	40020058 	.word	0x40020058
 8003e30:	4002006c 	.word	0x4002006c
 8003e34:	40020408 	.word	0x40020408
 8003e38:	4002041c 	.word	0x4002041c
 8003e3c:	40020430 	.word	0x40020430
 8003e40:	40020444 	.word	0x40020444
 8003e44:	40020400 	.word	0x40020400
 8003e48:	40020000 	.word	0x40020000

08003e4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b08b      	sub	sp, #44	; 0x2c
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e56:	2300      	movs	r3, #0
 8003e58:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8003e62:	2300      	movs	r3, #0
 8003e64:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8003e66:	2300      	movs	r3, #0
 8003e68:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e6e:	e179      	b.n	8004164 <HAL_GPIO_Init+0x318>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8003e70:	2201      	movs	r2, #1
 8003e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e74:	fa02 f303 	lsl.w	r3, r2, r3
 8003e78:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	69fa      	ldr	r2, [r7, #28]
 8003e80:	4013      	ands	r3, r2
 8003e82:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	f040 8168 	bne.w	800415e <HAL_GPIO_Init+0x312>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	4a96      	ldr	r2, [pc, #600]	; (80040ec <HAL_GPIO_Init+0x2a0>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d05e      	beq.n	8003f56 <HAL_GPIO_Init+0x10a>
 8003e98:	4a94      	ldr	r2, [pc, #592]	; (80040ec <HAL_GPIO_Init+0x2a0>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d875      	bhi.n	8003f8a <HAL_GPIO_Init+0x13e>
 8003e9e:	4a94      	ldr	r2, [pc, #592]	; (80040f0 <HAL_GPIO_Init+0x2a4>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d058      	beq.n	8003f56 <HAL_GPIO_Init+0x10a>
 8003ea4:	4a92      	ldr	r2, [pc, #584]	; (80040f0 <HAL_GPIO_Init+0x2a4>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d86f      	bhi.n	8003f8a <HAL_GPIO_Init+0x13e>
 8003eaa:	4a92      	ldr	r2, [pc, #584]	; (80040f4 <HAL_GPIO_Init+0x2a8>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d052      	beq.n	8003f56 <HAL_GPIO_Init+0x10a>
 8003eb0:	4a90      	ldr	r2, [pc, #576]	; (80040f4 <HAL_GPIO_Init+0x2a8>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d869      	bhi.n	8003f8a <HAL_GPIO_Init+0x13e>
 8003eb6:	4a90      	ldr	r2, [pc, #576]	; (80040f8 <HAL_GPIO_Init+0x2ac>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d04c      	beq.n	8003f56 <HAL_GPIO_Init+0x10a>
 8003ebc:	4a8e      	ldr	r2, [pc, #568]	; (80040f8 <HAL_GPIO_Init+0x2ac>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d863      	bhi.n	8003f8a <HAL_GPIO_Init+0x13e>
 8003ec2:	4a8e      	ldr	r2, [pc, #568]	; (80040fc <HAL_GPIO_Init+0x2b0>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d046      	beq.n	8003f56 <HAL_GPIO_Init+0x10a>
 8003ec8:	4a8c      	ldr	r2, [pc, #560]	; (80040fc <HAL_GPIO_Init+0x2b0>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d85d      	bhi.n	8003f8a <HAL_GPIO_Init+0x13e>
 8003ece:	2b12      	cmp	r3, #18
 8003ed0:	d82a      	bhi.n	8003f28 <HAL_GPIO_Init+0xdc>
 8003ed2:	2b12      	cmp	r3, #18
 8003ed4:	d859      	bhi.n	8003f8a <HAL_GPIO_Init+0x13e>
 8003ed6:	a201      	add	r2, pc, #4	; (adr r2, 8003edc <HAL_GPIO_Init+0x90>)
 8003ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003edc:	08003f57 	.word	0x08003f57
 8003ee0:	08003f31 	.word	0x08003f31
 8003ee4:	08003f43 	.word	0x08003f43
 8003ee8:	08003f85 	.word	0x08003f85
 8003eec:	08003f8b 	.word	0x08003f8b
 8003ef0:	08003f8b 	.word	0x08003f8b
 8003ef4:	08003f8b 	.word	0x08003f8b
 8003ef8:	08003f8b 	.word	0x08003f8b
 8003efc:	08003f8b 	.word	0x08003f8b
 8003f00:	08003f8b 	.word	0x08003f8b
 8003f04:	08003f8b 	.word	0x08003f8b
 8003f08:	08003f8b 	.word	0x08003f8b
 8003f0c:	08003f8b 	.word	0x08003f8b
 8003f10:	08003f8b 	.word	0x08003f8b
 8003f14:	08003f8b 	.word	0x08003f8b
 8003f18:	08003f8b 	.word	0x08003f8b
 8003f1c:	08003f8b 	.word	0x08003f8b
 8003f20:	08003f39 	.word	0x08003f39
 8003f24:	08003f4d 	.word	0x08003f4d
 8003f28:	4a75      	ldr	r2, [pc, #468]	; (8004100 <HAL_GPIO_Init+0x2b4>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d013      	beq.n	8003f56 <HAL_GPIO_Init+0x10a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003f2e:	e02c      	b.n	8003f8a <HAL_GPIO_Init+0x13e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	623b      	str	r3, [r7, #32]
          break;
 8003f36:	e029      	b.n	8003f8c <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	3304      	adds	r3, #4
 8003f3e:	623b      	str	r3, [r7, #32]
          break;
 8003f40:	e024      	b.n	8003f8c <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	3308      	adds	r3, #8
 8003f48:	623b      	str	r3, [r7, #32]
          break;
 8003f4a:	e01f      	b.n	8003f8c <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	330c      	adds	r3, #12
 8003f52:	623b      	str	r3, [r7, #32]
          break;
 8003f54:	e01a      	b.n	8003f8c <HAL_GPIO_Init+0x140>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d102      	bne.n	8003f64 <HAL_GPIO_Init+0x118>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003f5e:	2304      	movs	r3, #4
 8003f60:	623b      	str	r3, [r7, #32]
          break;
 8003f62:	e013      	b.n	8003f8c <HAL_GPIO_Init+0x140>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d105      	bne.n	8003f78 <HAL_GPIO_Init+0x12c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003f6c:	2308      	movs	r3, #8
 8003f6e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	69fa      	ldr	r2, [r7, #28]
 8003f74:	611a      	str	r2, [r3, #16]
          break;
 8003f76:	e009      	b.n	8003f8c <HAL_GPIO_Init+0x140>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003f78:	2308      	movs	r3, #8
 8003f7a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	69fa      	ldr	r2, [r7, #28]
 8003f80:	615a      	str	r2, [r3, #20]
          break;
 8003f82:	e003      	b.n	8003f8c <HAL_GPIO_Init+0x140>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003f84:	2300      	movs	r3, #0
 8003f86:	623b      	str	r3, [r7, #32]
          break;
 8003f88:	e000      	b.n	8003f8c <HAL_GPIO_Init+0x140>
          break;
 8003f8a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	2bff      	cmp	r3, #255	; 0xff
 8003f90:	d801      	bhi.n	8003f96 <HAL_GPIO_Init+0x14a>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	e001      	b.n	8003f9a <HAL_GPIO_Init+0x14e>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	3304      	adds	r3, #4
 8003f9a:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	2bff      	cmp	r3, #255	; 0xff
 8003fa0:	d802      	bhi.n	8003fa8 <HAL_GPIO_Init+0x15c>
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	e002      	b.n	8003fae <HAL_GPIO_Init+0x162>
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003faa:	3b08      	subs	r3, #8
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	210f      	movs	r1, #15
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8003fbc:	43db      	mvns	r3, r3
 8003fbe:	401a      	ands	r2, r3
 8003fc0:	6a39      	ldr	r1, [r7, #32]
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc8:	431a      	orrs	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f000 80c1 	beq.w	800415e <HAL_GPIO_Init+0x312>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003fdc:	4b49      	ldr	r3, [pc, #292]	; (8004104 <HAL_GPIO_Init+0x2b8>)
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	4a48      	ldr	r2, [pc, #288]	; (8004104 <HAL_GPIO_Init+0x2b8>)
 8003fe2:	f043 0301 	orr.w	r3, r3, #1
 8003fe6:	6193      	str	r3, [r2, #24]
 8003fe8:	4b46      	ldr	r3, [pc, #280]	; (8004104 <HAL_GPIO_Init+0x2b8>)
 8003fea:	699b      	ldr	r3, [r3, #24]
 8003fec:	f003 0301 	and.w	r3, r3, #1
 8003ff0:	60bb      	str	r3, [r7, #8]
 8003ff2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8003ff4:	4a44      	ldr	r2, [pc, #272]	; (8004108 <HAL_GPIO_Init+0x2bc>)
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff8:	089b      	lsrs	r3, r3, #2
 8003ffa:	3302      	adds	r3, #2
 8003ffc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004000:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8004002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004004:	f003 0303 	and.w	r3, r3, #3
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	220f      	movs	r2, #15
 800400c:	fa02 f303 	lsl.w	r3, r2, r3
 8004010:	43db      	mvns	r3, r3
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	4013      	ands	r3, r2
 8004016:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a3c      	ldr	r2, [pc, #240]	; (800410c <HAL_GPIO_Init+0x2c0>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d01f      	beq.n	8004060 <HAL_GPIO_Init+0x214>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a3b      	ldr	r2, [pc, #236]	; (8004110 <HAL_GPIO_Init+0x2c4>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d019      	beq.n	800405c <HAL_GPIO_Init+0x210>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a3a      	ldr	r2, [pc, #232]	; (8004114 <HAL_GPIO_Init+0x2c8>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d013      	beq.n	8004058 <HAL_GPIO_Init+0x20c>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a39      	ldr	r2, [pc, #228]	; (8004118 <HAL_GPIO_Init+0x2cc>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d00d      	beq.n	8004054 <HAL_GPIO_Init+0x208>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a38      	ldr	r2, [pc, #224]	; (800411c <HAL_GPIO_Init+0x2d0>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d007      	beq.n	8004050 <HAL_GPIO_Init+0x204>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a37      	ldr	r2, [pc, #220]	; (8004120 <HAL_GPIO_Init+0x2d4>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d101      	bne.n	800404c <HAL_GPIO_Init+0x200>
 8004048:	2305      	movs	r3, #5
 800404a:	e00a      	b.n	8004062 <HAL_GPIO_Init+0x216>
 800404c:	2306      	movs	r3, #6
 800404e:	e008      	b.n	8004062 <HAL_GPIO_Init+0x216>
 8004050:	2304      	movs	r3, #4
 8004052:	e006      	b.n	8004062 <HAL_GPIO_Init+0x216>
 8004054:	2303      	movs	r3, #3
 8004056:	e004      	b.n	8004062 <HAL_GPIO_Init+0x216>
 8004058:	2302      	movs	r3, #2
 800405a:	e002      	b.n	8004062 <HAL_GPIO_Init+0x216>
 800405c:	2301      	movs	r3, #1
 800405e:	e000      	b.n	8004062 <HAL_GPIO_Init+0x216>
 8004060:	2300      	movs	r3, #0
 8004062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004064:	f002 0203 	and.w	r2, r2, #3
 8004068:	0092      	lsls	r2, r2, #2
 800406a:	4093      	lsls	r3, r2
 800406c:	697a      	ldr	r2, [r7, #20]
 800406e:	4313      	orrs	r3, r2
 8004070:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8004072:	4925      	ldr	r1, [pc, #148]	; (8004108 <HAL_GPIO_Init+0x2bc>)
 8004074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004076:	089b      	lsrs	r3, r3, #2
 8004078:	3302      	adds	r3, #2
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d006      	beq.n	800409a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800408c:	4b25      	ldr	r3, [pc, #148]	; (8004124 <HAL_GPIO_Init+0x2d8>)
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	4924      	ldr	r1, [pc, #144]	; (8004124 <HAL_GPIO_Init+0x2d8>)
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	4313      	orrs	r3, r2
 8004096:	600b      	str	r3, [r1, #0]
 8004098:	e006      	b.n	80040a8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800409a:	4b22      	ldr	r3, [pc, #136]	; (8004124 <HAL_GPIO_Init+0x2d8>)
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	43db      	mvns	r3, r3
 80040a2:	4920      	ldr	r1, [pc, #128]	; (8004124 <HAL_GPIO_Init+0x2d8>)
 80040a4:	4013      	ands	r3, r2
 80040a6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d006      	beq.n	80040c2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80040b4:	4b1b      	ldr	r3, [pc, #108]	; (8004124 <HAL_GPIO_Init+0x2d8>)
 80040b6:	685a      	ldr	r2, [r3, #4]
 80040b8:	491a      	ldr	r1, [pc, #104]	; (8004124 <HAL_GPIO_Init+0x2d8>)
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	4313      	orrs	r3, r2
 80040be:	604b      	str	r3, [r1, #4]
 80040c0:	e006      	b.n	80040d0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80040c2:	4b18      	ldr	r3, [pc, #96]	; (8004124 <HAL_GPIO_Init+0x2d8>)
 80040c4:	685a      	ldr	r2, [r3, #4]
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	43db      	mvns	r3, r3
 80040ca:	4916      	ldr	r1, [pc, #88]	; (8004124 <HAL_GPIO_Init+0x2d8>)
 80040cc:	4013      	ands	r3, r2
 80040ce:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d025      	beq.n	8004128 <HAL_GPIO_Init+0x2dc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80040dc:	4b11      	ldr	r3, [pc, #68]	; (8004124 <HAL_GPIO_Init+0x2d8>)
 80040de:	689a      	ldr	r2, [r3, #8]
 80040e0:	4910      	ldr	r1, [pc, #64]	; (8004124 <HAL_GPIO_Init+0x2d8>)
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	608b      	str	r3, [r1, #8]
 80040e8:	e025      	b.n	8004136 <HAL_GPIO_Init+0x2ea>
 80040ea:	bf00      	nop
 80040ec:	10320000 	.word	0x10320000
 80040f0:	10310000 	.word	0x10310000
 80040f4:	10220000 	.word	0x10220000
 80040f8:	10210000 	.word	0x10210000
 80040fc:	10120000 	.word	0x10120000
 8004100:	10110000 	.word	0x10110000
 8004104:	40021000 	.word	0x40021000
 8004108:	40010000 	.word	0x40010000
 800410c:	40010800 	.word	0x40010800
 8004110:	40010c00 	.word	0x40010c00
 8004114:	40011000 	.word	0x40011000
 8004118:	40011400 	.word	0x40011400
 800411c:	40011800 	.word	0x40011800
 8004120:	40011c00 	.word	0x40011c00
 8004124:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004128:	4b13      	ldr	r3, [pc, #76]	; (8004178 <HAL_GPIO_Init+0x32c>)
 800412a:	689a      	ldr	r2, [r3, #8]
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	43db      	mvns	r3, r3
 8004130:	4911      	ldr	r1, [pc, #68]	; (8004178 <HAL_GPIO_Init+0x32c>)
 8004132:	4013      	ands	r3, r2
 8004134:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d006      	beq.n	8004150 <HAL_GPIO_Init+0x304>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004142:	4b0d      	ldr	r3, [pc, #52]	; (8004178 <HAL_GPIO_Init+0x32c>)
 8004144:	68da      	ldr	r2, [r3, #12]
 8004146:	490c      	ldr	r1, [pc, #48]	; (8004178 <HAL_GPIO_Init+0x32c>)
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	4313      	orrs	r3, r2
 800414c:	60cb      	str	r3, [r1, #12]
 800414e:	e006      	b.n	800415e <HAL_GPIO_Init+0x312>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004150:	4b09      	ldr	r3, [pc, #36]	; (8004178 <HAL_GPIO_Init+0x32c>)
 8004152:	68da      	ldr	r2, [r3, #12]
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	43db      	mvns	r3, r3
 8004158:	4907      	ldr	r1, [pc, #28]	; (8004178 <HAL_GPIO_Init+0x32c>)
 800415a:	4013      	ands	r3, r2
 800415c:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 800415e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004160:	3301      	adds	r3, #1
 8004162:	627b      	str	r3, [r7, #36]	; 0x24
 8004164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004166:	2b0f      	cmp	r3, #15
 8004168:	f67f ae82 	bls.w	8003e70 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 800416c:	bf00      	nop
 800416e:	bf00      	nop
 8004170:	372c      	adds	r7, #44	; 0x2c
 8004172:	46bd      	mov	sp, r7
 8004174:	bc80      	pop	{r7}
 8004176:	4770      	bx	lr
 8004178:	40010400 	.word	0x40010400

0800417c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	460b      	mov	r3, r1
 8004186:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	689a      	ldr	r2, [r3, #8]
 800418c:	887b      	ldrh	r3, [r7, #2]
 800418e:	4013      	ands	r3, r2
 8004190:	2b00      	cmp	r3, #0
 8004192:	d002      	beq.n	800419a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004194:	2301      	movs	r3, #1
 8004196:	73fb      	strb	r3, [r7, #15]
 8004198:	e001      	b.n	800419e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800419a:	2300      	movs	r3, #0
 800419c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800419e:	7bfb      	ldrb	r3, [r7, #15]
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3714      	adds	r7, #20
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bc80      	pop	{r7}
 80041a8:	4770      	bx	lr

080041aa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041aa:	b480      	push	{r7}
 80041ac:	b083      	sub	sp, #12
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
 80041b2:	460b      	mov	r3, r1
 80041b4:	807b      	strh	r3, [r7, #2]
 80041b6:	4613      	mov	r3, r2
 80041b8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80041ba:	787b      	ldrb	r3, [r7, #1]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d003      	beq.n	80041c8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041c0:	887a      	ldrh	r2, [r7, #2]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80041c6:	e003      	b.n	80041d0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80041c8:	887b      	ldrh	r3, [r7, #2]
 80041ca:	041a      	lsls	r2, r3, #16
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	611a      	str	r2, [r3, #16]
}
 80041d0:	bf00      	nop
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bc80      	pop	{r7}
 80041d8:	4770      	bx	lr
	...

080041dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	4603      	mov	r3, r0
 80041e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80041e6:	4b08      	ldr	r3, [pc, #32]	; (8004208 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041e8:	695a      	ldr	r2, [r3, #20]
 80041ea:	88fb      	ldrh	r3, [r7, #6]
 80041ec:	4013      	ands	r3, r2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d006      	beq.n	8004200 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80041f2:	4a05      	ldr	r2, [pc, #20]	; (8004208 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041f4:	88fb      	ldrh	r3, [r7, #6]
 80041f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80041f8:	88fb      	ldrh	r3, [r7, #6]
 80041fa:	4618      	mov	r0, r3
 80041fc:	f000 f806 	bl	800420c <HAL_GPIO_EXTI_Callback>
  }
}
 8004200:	bf00      	nop
 8004202:	3708      	adds	r7, #8
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	40010400 	.word	0x40010400

0800420c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	4603      	mov	r3, r0
 8004214:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004216:	bf00      	nop
 8004218:	370c      	adds	r7, #12
 800421a:	46bd      	mov	sp, r7
 800421c:	bc80      	pop	{r7}
 800421e:	4770      	bx	lr

08004220 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8004228:	2300      	movs	r3, #0
 800422a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0301 	and.w	r3, r3, #1
 8004234:	2b00      	cmp	r3, #0
 8004236:	f000 8087 	beq.w	8004348 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800423a:	4b92      	ldr	r3, [pc, #584]	; (8004484 <HAL_RCC_OscConfig+0x264>)
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f003 030c 	and.w	r3, r3, #12
 8004242:	2b04      	cmp	r3, #4
 8004244:	d00c      	beq.n	8004260 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004246:	4b8f      	ldr	r3, [pc, #572]	; (8004484 <HAL_RCC_OscConfig+0x264>)
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f003 030c 	and.w	r3, r3, #12
 800424e:	2b08      	cmp	r3, #8
 8004250:	d112      	bne.n	8004278 <HAL_RCC_OscConfig+0x58>
 8004252:	4b8c      	ldr	r3, [pc, #560]	; (8004484 <HAL_RCC_OscConfig+0x264>)
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800425a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800425e:	d10b      	bne.n	8004278 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004260:	4b88      	ldr	r3, [pc, #544]	; (8004484 <HAL_RCC_OscConfig+0x264>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d06c      	beq.n	8004346 <HAL_RCC_OscConfig+0x126>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d168      	bne.n	8004346 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e22d      	b.n	80046d4 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004280:	d106      	bne.n	8004290 <HAL_RCC_OscConfig+0x70>
 8004282:	4b80      	ldr	r3, [pc, #512]	; (8004484 <HAL_RCC_OscConfig+0x264>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a7f      	ldr	r2, [pc, #508]	; (8004484 <HAL_RCC_OscConfig+0x264>)
 8004288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800428c:	6013      	str	r3, [r2, #0]
 800428e:	e02e      	b.n	80042ee <HAL_RCC_OscConfig+0xce>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d10c      	bne.n	80042b2 <HAL_RCC_OscConfig+0x92>
 8004298:	4b7a      	ldr	r3, [pc, #488]	; (8004484 <HAL_RCC_OscConfig+0x264>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a79      	ldr	r2, [pc, #484]	; (8004484 <HAL_RCC_OscConfig+0x264>)
 800429e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042a2:	6013      	str	r3, [r2, #0]
 80042a4:	4b77      	ldr	r3, [pc, #476]	; (8004484 <HAL_RCC_OscConfig+0x264>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a76      	ldr	r2, [pc, #472]	; (8004484 <HAL_RCC_OscConfig+0x264>)
 80042aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042ae:	6013      	str	r3, [r2, #0]
 80042b0:	e01d      	b.n	80042ee <HAL_RCC_OscConfig+0xce>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042ba:	d10c      	bne.n	80042d6 <HAL_RCC_OscConfig+0xb6>
 80042bc:	4b71      	ldr	r3, [pc, #452]	; (8004484 <HAL_RCC_OscConfig+0x264>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a70      	ldr	r2, [pc, #448]	; (8004484 <HAL_RCC_OscConfig+0x264>)
 80042c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042c6:	6013      	str	r3, [r2, #0]
 80042c8:	4b6e      	ldr	r3, [pc, #440]	; (8004484 <HAL_RCC_OscConfig+0x264>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a6d      	ldr	r2, [pc, #436]	; (8004484 <HAL_RCC_OscConfig+0x264>)
 80042ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042d2:	6013      	str	r3, [r2, #0]
 80042d4:	e00b      	b.n	80042ee <HAL_RCC_OscConfig+0xce>
 80042d6:	4b6b      	ldr	r3, [pc, #428]	; (8004484 <HAL_RCC_OscConfig+0x264>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a6a      	ldr	r2, [pc, #424]	; (8004484 <HAL_RCC_OscConfig+0x264>)
 80042dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042e0:	6013      	str	r3, [r2, #0]
 80042e2:	4b68      	ldr	r3, [pc, #416]	; (8004484 <HAL_RCC_OscConfig+0x264>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a67      	ldr	r2, [pc, #412]	; (8004484 <HAL_RCC_OscConfig+0x264>)
 80042e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042ec:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d013      	beq.n	800431e <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042f6:	f7ff fb69 	bl	80039cc <HAL_GetTick>
 80042fa:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042fc:	e008      	b.n	8004310 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042fe:	f7ff fb65 	bl	80039cc <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	2b64      	cmp	r3, #100	; 0x64
 800430a:	d901      	bls.n	8004310 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e1e1      	b.n	80046d4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004310:	4b5c      	ldr	r3, [pc, #368]	; (8004484 <HAL_RCC_OscConfig+0x264>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d0f0      	beq.n	80042fe <HAL_RCC_OscConfig+0xde>
 800431c:	e014      	b.n	8004348 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800431e:	f7ff fb55 	bl	80039cc <HAL_GetTick>
 8004322:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004324:	e008      	b.n	8004338 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004326:	f7ff fb51 	bl	80039cc <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	2b64      	cmp	r3, #100	; 0x64
 8004332:	d901      	bls.n	8004338 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e1cd      	b.n	80046d4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004338:	4b52      	ldr	r3, [pc, #328]	; (8004484 <HAL_RCC_OscConfig+0x264>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1f0      	bne.n	8004326 <HAL_RCC_OscConfig+0x106>
 8004344:	e000      	b.n	8004348 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004346:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0302 	and.w	r3, r3, #2
 8004350:	2b00      	cmp	r3, #0
 8004352:	d063      	beq.n	800441c <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004354:	4b4b      	ldr	r3, [pc, #300]	; (8004484 <HAL_RCC_OscConfig+0x264>)
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f003 030c 	and.w	r3, r3, #12
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00b      	beq.n	8004378 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004360:	4b48      	ldr	r3, [pc, #288]	; (8004484 <HAL_RCC_OscConfig+0x264>)
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f003 030c 	and.w	r3, r3, #12
 8004368:	2b08      	cmp	r3, #8
 800436a:	d11c      	bne.n	80043a6 <HAL_RCC_OscConfig+0x186>
 800436c:	4b45      	ldr	r3, [pc, #276]	; (8004484 <HAL_RCC_OscConfig+0x264>)
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d116      	bne.n	80043a6 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004378:	4b42      	ldr	r3, [pc, #264]	; (8004484 <HAL_RCC_OscConfig+0x264>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0302 	and.w	r3, r3, #2
 8004380:	2b00      	cmp	r3, #0
 8004382:	d005      	beq.n	8004390 <HAL_RCC_OscConfig+0x170>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d001      	beq.n	8004390 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e1a1      	b.n	80046d4 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004390:	4b3c      	ldr	r3, [pc, #240]	; (8004484 <HAL_RCC_OscConfig+0x264>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	695b      	ldr	r3, [r3, #20]
 800439c:	00db      	lsls	r3, r3, #3
 800439e:	4939      	ldr	r1, [pc, #228]	; (8004484 <HAL_RCC_OscConfig+0x264>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043a4:	e03a      	b.n	800441c <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d020      	beq.n	80043f0 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043ae:	4b36      	ldr	r3, [pc, #216]	; (8004488 <HAL_RCC_OscConfig+0x268>)
 80043b0:	2201      	movs	r2, #1
 80043b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043b4:	f7ff fb0a 	bl	80039cc <HAL_GetTick>
 80043b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043ba:	e008      	b.n	80043ce <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043bc:	f7ff fb06 	bl	80039cc <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e182      	b.n	80046d4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043ce:	4b2d      	ldr	r3, [pc, #180]	; (8004484 <HAL_RCC_OscConfig+0x264>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d0f0      	beq.n	80043bc <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043da:	4b2a      	ldr	r3, [pc, #168]	; (8004484 <HAL_RCC_OscConfig+0x264>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	00db      	lsls	r3, r3, #3
 80043e8:	4926      	ldr	r1, [pc, #152]	; (8004484 <HAL_RCC_OscConfig+0x264>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	600b      	str	r3, [r1, #0]
 80043ee:	e015      	b.n	800441c <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043f0:	4b25      	ldr	r3, [pc, #148]	; (8004488 <HAL_RCC_OscConfig+0x268>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f6:	f7ff fae9 	bl	80039cc <HAL_GetTick>
 80043fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043fc:	e008      	b.n	8004410 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043fe:	f7ff fae5 	bl	80039cc <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	2b02      	cmp	r3, #2
 800440a:	d901      	bls.n	8004410 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e161      	b.n	80046d4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004410:	4b1c      	ldr	r3, [pc, #112]	; (8004484 <HAL_RCC_OscConfig+0x264>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0302 	and.w	r3, r3, #2
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1f0      	bne.n	80043fe <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0308 	and.w	r3, r3, #8
 8004424:	2b00      	cmp	r3, #0
 8004426:	d039      	beq.n	800449c <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d019      	beq.n	8004464 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004430:	4b16      	ldr	r3, [pc, #88]	; (800448c <HAL_RCC_OscConfig+0x26c>)
 8004432:	2201      	movs	r2, #1
 8004434:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004436:	f7ff fac9 	bl	80039cc <HAL_GetTick>
 800443a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800443c:	e008      	b.n	8004450 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800443e:	f7ff fac5 	bl	80039cc <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	2b02      	cmp	r3, #2
 800444a:	d901      	bls.n	8004450 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e141      	b.n	80046d4 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004450:	4b0c      	ldr	r3, [pc, #48]	; (8004484 <HAL_RCC_OscConfig+0x264>)
 8004452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004454:	f003 0302 	and.w	r3, r3, #2
 8004458:	2b00      	cmp	r3, #0
 800445a:	d0f0      	beq.n	800443e <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 800445c:	2001      	movs	r0, #1
 800445e:	f000 fadf 	bl	8004a20 <RCC_Delay>
 8004462:	e01b      	b.n	800449c <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004464:	4b09      	ldr	r3, [pc, #36]	; (800448c <HAL_RCC_OscConfig+0x26c>)
 8004466:	2200      	movs	r2, #0
 8004468:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800446a:	f7ff faaf 	bl	80039cc <HAL_GetTick>
 800446e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004470:	e00e      	b.n	8004490 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004472:	f7ff faab 	bl	80039cc <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	2b02      	cmp	r3, #2
 800447e:	d907      	bls.n	8004490 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e127      	b.n	80046d4 <HAL_RCC_OscConfig+0x4b4>
 8004484:	40021000 	.word	0x40021000
 8004488:	42420000 	.word	0x42420000
 800448c:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004490:	4b92      	ldr	r3, [pc, #584]	; (80046dc <HAL_RCC_OscConfig+0x4bc>)
 8004492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d1ea      	bne.n	8004472 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0304 	and.w	r3, r3, #4
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	f000 80a6 	beq.w	80045f6 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044aa:	2300      	movs	r3, #0
 80044ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044ae:	4b8b      	ldr	r3, [pc, #556]	; (80046dc <HAL_RCC_OscConfig+0x4bc>)
 80044b0:	69db      	ldr	r3, [r3, #28]
 80044b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d10d      	bne.n	80044d6 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044ba:	4b88      	ldr	r3, [pc, #544]	; (80046dc <HAL_RCC_OscConfig+0x4bc>)
 80044bc:	69db      	ldr	r3, [r3, #28]
 80044be:	4a87      	ldr	r2, [pc, #540]	; (80046dc <HAL_RCC_OscConfig+0x4bc>)
 80044c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044c4:	61d3      	str	r3, [r2, #28]
 80044c6:	4b85      	ldr	r3, [pc, #532]	; (80046dc <HAL_RCC_OscConfig+0x4bc>)
 80044c8:	69db      	ldr	r3, [r3, #28]
 80044ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ce:	60fb      	str	r3, [r7, #12]
 80044d0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80044d2:	2301      	movs	r3, #1
 80044d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044d6:	4b82      	ldr	r3, [pc, #520]	; (80046e0 <HAL_RCC_OscConfig+0x4c0>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d118      	bne.n	8004514 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044e2:	4b7f      	ldr	r3, [pc, #508]	; (80046e0 <HAL_RCC_OscConfig+0x4c0>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a7e      	ldr	r2, [pc, #504]	; (80046e0 <HAL_RCC_OscConfig+0x4c0>)
 80044e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044ee:	f7ff fa6d 	bl	80039cc <HAL_GetTick>
 80044f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044f4:	e008      	b.n	8004508 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044f6:	f7ff fa69 	bl	80039cc <HAL_GetTick>
 80044fa:	4602      	mov	r2, r0
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	2b64      	cmp	r3, #100	; 0x64
 8004502:	d901      	bls.n	8004508 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e0e5      	b.n	80046d4 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004508:	4b75      	ldr	r3, [pc, #468]	; (80046e0 <HAL_RCC_OscConfig+0x4c0>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004510:	2b00      	cmp	r3, #0
 8004512:	d0f0      	beq.n	80044f6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d106      	bne.n	800452a <HAL_RCC_OscConfig+0x30a>
 800451c:	4b6f      	ldr	r3, [pc, #444]	; (80046dc <HAL_RCC_OscConfig+0x4bc>)
 800451e:	6a1b      	ldr	r3, [r3, #32]
 8004520:	4a6e      	ldr	r2, [pc, #440]	; (80046dc <HAL_RCC_OscConfig+0x4bc>)
 8004522:	f043 0301 	orr.w	r3, r3, #1
 8004526:	6213      	str	r3, [r2, #32]
 8004528:	e02d      	b.n	8004586 <HAL_RCC_OscConfig+0x366>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10c      	bne.n	800454c <HAL_RCC_OscConfig+0x32c>
 8004532:	4b6a      	ldr	r3, [pc, #424]	; (80046dc <HAL_RCC_OscConfig+0x4bc>)
 8004534:	6a1b      	ldr	r3, [r3, #32]
 8004536:	4a69      	ldr	r2, [pc, #420]	; (80046dc <HAL_RCC_OscConfig+0x4bc>)
 8004538:	f023 0301 	bic.w	r3, r3, #1
 800453c:	6213      	str	r3, [r2, #32]
 800453e:	4b67      	ldr	r3, [pc, #412]	; (80046dc <HAL_RCC_OscConfig+0x4bc>)
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	4a66      	ldr	r2, [pc, #408]	; (80046dc <HAL_RCC_OscConfig+0x4bc>)
 8004544:	f023 0304 	bic.w	r3, r3, #4
 8004548:	6213      	str	r3, [r2, #32]
 800454a:	e01c      	b.n	8004586 <HAL_RCC_OscConfig+0x366>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	2b05      	cmp	r3, #5
 8004552:	d10c      	bne.n	800456e <HAL_RCC_OscConfig+0x34e>
 8004554:	4b61      	ldr	r3, [pc, #388]	; (80046dc <HAL_RCC_OscConfig+0x4bc>)
 8004556:	6a1b      	ldr	r3, [r3, #32]
 8004558:	4a60      	ldr	r2, [pc, #384]	; (80046dc <HAL_RCC_OscConfig+0x4bc>)
 800455a:	f043 0304 	orr.w	r3, r3, #4
 800455e:	6213      	str	r3, [r2, #32]
 8004560:	4b5e      	ldr	r3, [pc, #376]	; (80046dc <HAL_RCC_OscConfig+0x4bc>)
 8004562:	6a1b      	ldr	r3, [r3, #32]
 8004564:	4a5d      	ldr	r2, [pc, #372]	; (80046dc <HAL_RCC_OscConfig+0x4bc>)
 8004566:	f043 0301 	orr.w	r3, r3, #1
 800456a:	6213      	str	r3, [r2, #32]
 800456c:	e00b      	b.n	8004586 <HAL_RCC_OscConfig+0x366>
 800456e:	4b5b      	ldr	r3, [pc, #364]	; (80046dc <HAL_RCC_OscConfig+0x4bc>)
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	4a5a      	ldr	r2, [pc, #360]	; (80046dc <HAL_RCC_OscConfig+0x4bc>)
 8004574:	f023 0301 	bic.w	r3, r3, #1
 8004578:	6213      	str	r3, [r2, #32]
 800457a:	4b58      	ldr	r3, [pc, #352]	; (80046dc <HAL_RCC_OscConfig+0x4bc>)
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	4a57      	ldr	r2, [pc, #348]	; (80046dc <HAL_RCC_OscConfig+0x4bc>)
 8004580:	f023 0304 	bic.w	r3, r3, #4
 8004584:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d015      	beq.n	80045ba <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800458e:	f7ff fa1d 	bl	80039cc <HAL_GetTick>
 8004592:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004594:	e00a      	b.n	80045ac <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004596:	f7ff fa19 	bl	80039cc <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d901      	bls.n	80045ac <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e093      	b.n	80046d4 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ac:	4b4b      	ldr	r3, [pc, #300]	; (80046dc <HAL_RCC_OscConfig+0x4bc>)
 80045ae:	6a1b      	ldr	r3, [r3, #32]
 80045b0:	f003 0302 	and.w	r3, r3, #2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d0ee      	beq.n	8004596 <HAL_RCC_OscConfig+0x376>
 80045b8:	e014      	b.n	80045e4 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045ba:	f7ff fa07 	bl	80039cc <HAL_GetTick>
 80045be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045c0:	e00a      	b.n	80045d8 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045c2:	f7ff fa03 	bl	80039cc <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d901      	bls.n	80045d8 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e07d      	b.n	80046d4 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045d8:	4b40      	ldr	r3, [pc, #256]	; (80046dc <HAL_RCC_OscConfig+0x4bc>)
 80045da:	6a1b      	ldr	r3, [r3, #32]
 80045dc:	f003 0302 	and.w	r3, r3, #2
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d1ee      	bne.n	80045c2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80045e4:	7dfb      	ldrb	r3, [r7, #23]
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d105      	bne.n	80045f6 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045ea:	4b3c      	ldr	r3, [pc, #240]	; (80046dc <HAL_RCC_OscConfig+0x4bc>)
 80045ec:	69db      	ldr	r3, [r3, #28]
 80045ee:	4a3b      	ldr	r2, [pc, #236]	; (80046dc <HAL_RCC_OscConfig+0x4bc>)
 80045f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	69db      	ldr	r3, [r3, #28]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d069      	beq.n	80046d2 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045fe:	4b37      	ldr	r3, [pc, #220]	; (80046dc <HAL_RCC_OscConfig+0x4bc>)
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f003 030c 	and.w	r3, r3, #12
 8004606:	2b08      	cmp	r3, #8
 8004608:	d061      	beq.n	80046ce <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	69db      	ldr	r3, [r3, #28]
 800460e:	2b02      	cmp	r3, #2
 8004610:	d146      	bne.n	80046a0 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004612:	4b34      	ldr	r3, [pc, #208]	; (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 8004614:	2200      	movs	r2, #0
 8004616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004618:	f7ff f9d8 	bl	80039cc <HAL_GetTick>
 800461c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800461e:	e008      	b.n	8004632 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004620:	f7ff f9d4 	bl	80039cc <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	2b02      	cmp	r3, #2
 800462c:	d901      	bls.n	8004632 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e050      	b.n	80046d4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004632:	4b2a      	ldr	r3, [pc, #168]	; (80046dc <HAL_RCC_OscConfig+0x4bc>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1f0      	bne.n	8004620 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004646:	d108      	bne.n	800465a <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004648:	4b24      	ldr	r3, [pc, #144]	; (80046dc <HAL_RCC_OscConfig+0x4bc>)
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	4921      	ldr	r1, [pc, #132]	; (80046dc <HAL_RCC_OscConfig+0x4bc>)
 8004656:	4313      	orrs	r3, r2
 8004658:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800465a:	4b20      	ldr	r3, [pc, #128]	; (80046dc <HAL_RCC_OscConfig+0x4bc>)
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a19      	ldr	r1, [r3, #32]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466a:	430b      	orrs	r3, r1
 800466c:	491b      	ldr	r1, [pc, #108]	; (80046dc <HAL_RCC_OscConfig+0x4bc>)
 800466e:	4313      	orrs	r3, r2
 8004670:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004672:	4b1c      	ldr	r3, [pc, #112]	; (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 8004674:	2201      	movs	r2, #1
 8004676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004678:	f7ff f9a8 	bl	80039cc <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800467e:	e008      	b.n	8004692 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004680:	f7ff f9a4 	bl	80039cc <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b02      	cmp	r3, #2
 800468c:	d901      	bls.n	8004692 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e020      	b.n	80046d4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004692:	4b12      	ldr	r3, [pc, #72]	; (80046dc <HAL_RCC_OscConfig+0x4bc>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d0f0      	beq.n	8004680 <HAL_RCC_OscConfig+0x460>
 800469e:	e018      	b.n	80046d2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046a0:	4b10      	ldr	r3, [pc, #64]	; (80046e4 <HAL_RCC_OscConfig+0x4c4>)
 80046a2:	2200      	movs	r2, #0
 80046a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a6:	f7ff f991 	bl	80039cc <HAL_GetTick>
 80046aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046ac:	e008      	b.n	80046c0 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046ae:	f7ff f98d 	bl	80039cc <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d901      	bls.n	80046c0 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e009      	b.n	80046d4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046c0:	4b06      	ldr	r3, [pc, #24]	; (80046dc <HAL_RCC_OscConfig+0x4bc>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d1f0      	bne.n	80046ae <HAL_RCC_OscConfig+0x48e>
 80046cc:	e001      	b.n	80046d2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e000      	b.n	80046d4 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 80046d2:	2300      	movs	r3, #0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3718      	adds	r7, #24
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	40021000 	.word	0x40021000
 80046e0:	40007000 	.word	0x40007000
 80046e4:	42420060 	.word	0x42420060

080046e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80046f2:	2300      	movs	r3, #0
 80046f4:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80046f6:	4b7e      	ldr	r3, [pc, #504]	; (80048f0 <HAL_RCC_ClockConfig+0x208>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0307 	and.w	r3, r3, #7
 80046fe:	683a      	ldr	r2, [r7, #0]
 8004700:	429a      	cmp	r2, r3
 8004702:	d910      	bls.n	8004726 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004704:	4b7a      	ldr	r3, [pc, #488]	; (80048f0 <HAL_RCC_ClockConfig+0x208>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f023 0207 	bic.w	r2, r3, #7
 800470c:	4978      	ldr	r1, [pc, #480]	; (80048f0 <HAL_RCC_ClockConfig+0x208>)
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	4313      	orrs	r3, r2
 8004712:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004714:	4b76      	ldr	r3, [pc, #472]	; (80048f0 <HAL_RCC_ClockConfig+0x208>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0307 	and.w	r3, r3, #7
 800471c:	683a      	ldr	r2, [r7, #0]
 800471e:	429a      	cmp	r2, r3
 8004720:	d001      	beq.n	8004726 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e0e0      	b.n	80048e8 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d020      	beq.n	8004774 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0304 	and.w	r3, r3, #4
 800473a:	2b00      	cmp	r3, #0
 800473c:	d005      	beq.n	800474a <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800473e:	4b6d      	ldr	r3, [pc, #436]	; (80048f4 <HAL_RCC_ClockConfig+0x20c>)
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	4a6c      	ldr	r2, [pc, #432]	; (80048f4 <HAL_RCC_ClockConfig+0x20c>)
 8004744:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004748:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0308 	and.w	r3, r3, #8
 8004752:	2b00      	cmp	r3, #0
 8004754:	d005      	beq.n	8004762 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004756:	4b67      	ldr	r3, [pc, #412]	; (80048f4 <HAL_RCC_ClockConfig+0x20c>)
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	4a66      	ldr	r2, [pc, #408]	; (80048f4 <HAL_RCC_ClockConfig+0x20c>)
 800475c:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004760:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004762:	4b64      	ldr	r3, [pc, #400]	; (80048f4 <HAL_RCC_ClockConfig+0x20c>)
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	4961      	ldr	r1, [pc, #388]	; (80048f4 <HAL_RCC_ClockConfig+0x20c>)
 8004770:	4313      	orrs	r3, r2
 8004772:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0301 	and.w	r3, r3, #1
 800477c:	2b00      	cmp	r3, #0
 800477e:	d06a      	beq.n	8004856 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d107      	bne.n	8004798 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004788:	4b5a      	ldr	r3, [pc, #360]	; (80048f4 <HAL_RCC_ClockConfig+0x20c>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d115      	bne.n	80047c0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e0a7      	b.n	80048e8 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	2b02      	cmp	r3, #2
 800479e:	d107      	bne.n	80047b0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047a0:	4b54      	ldr	r3, [pc, #336]	; (80048f4 <HAL_RCC_ClockConfig+0x20c>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d109      	bne.n	80047c0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e09b      	b.n	80048e8 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047b0:	4b50      	ldr	r3, [pc, #320]	; (80048f4 <HAL_RCC_ClockConfig+0x20c>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0302 	and.w	r3, r3, #2
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d101      	bne.n	80047c0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e093      	b.n	80048e8 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047c0:	4b4c      	ldr	r3, [pc, #304]	; (80048f4 <HAL_RCC_ClockConfig+0x20c>)
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f023 0203 	bic.w	r2, r3, #3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	4949      	ldr	r1, [pc, #292]	; (80048f4 <HAL_RCC_ClockConfig+0x20c>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047d2:	f7ff f8fb 	bl	80039cc <HAL_GetTick>
 80047d6:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d112      	bne.n	8004806 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80047e0:	e00a      	b.n	80047f8 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047e2:	f7ff f8f3 	bl	80039cc <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d901      	bls.n	80047f8 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e077      	b.n	80048e8 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80047f8:	4b3e      	ldr	r3, [pc, #248]	; (80048f4 <HAL_RCC_ClockConfig+0x20c>)
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f003 030c 	and.w	r3, r3, #12
 8004800:	2b04      	cmp	r3, #4
 8004802:	d1ee      	bne.n	80047e2 <HAL_RCC_ClockConfig+0xfa>
 8004804:	e027      	b.n	8004856 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	2b02      	cmp	r3, #2
 800480c:	d11d      	bne.n	800484a <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800480e:	e00a      	b.n	8004826 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004810:	f7ff f8dc 	bl	80039cc <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	f241 3288 	movw	r2, #5000	; 0x1388
 800481e:	4293      	cmp	r3, r2
 8004820:	d901      	bls.n	8004826 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e060      	b.n	80048e8 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004826:	4b33      	ldr	r3, [pc, #204]	; (80048f4 <HAL_RCC_ClockConfig+0x20c>)
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f003 030c 	and.w	r3, r3, #12
 800482e:	2b08      	cmp	r3, #8
 8004830:	d1ee      	bne.n	8004810 <HAL_RCC_ClockConfig+0x128>
 8004832:	e010      	b.n	8004856 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004834:	f7ff f8ca 	bl	80039cc <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004842:	4293      	cmp	r3, r2
 8004844:	d901      	bls.n	800484a <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e04e      	b.n	80048e8 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800484a:	4b2a      	ldr	r3, [pc, #168]	; (80048f4 <HAL_RCC_ClockConfig+0x20c>)
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f003 030c 	and.w	r3, r3, #12
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1ee      	bne.n	8004834 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8004856:	4b26      	ldr	r3, [pc, #152]	; (80048f0 <HAL_RCC_ClockConfig+0x208>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0307 	and.w	r3, r3, #7
 800485e:	683a      	ldr	r2, [r7, #0]
 8004860:	429a      	cmp	r2, r3
 8004862:	d210      	bcs.n	8004886 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004864:	4b22      	ldr	r3, [pc, #136]	; (80048f0 <HAL_RCC_ClockConfig+0x208>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f023 0207 	bic.w	r2, r3, #7
 800486c:	4920      	ldr	r1, [pc, #128]	; (80048f0 <HAL_RCC_ClockConfig+0x208>)
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	4313      	orrs	r3, r2
 8004872:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004874:	4b1e      	ldr	r3, [pc, #120]	; (80048f0 <HAL_RCC_ClockConfig+0x208>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0307 	and.w	r3, r3, #7
 800487c:	683a      	ldr	r2, [r7, #0]
 800487e:	429a      	cmp	r2, r3
 8004880:	d001      	beq.n	8004886 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e030      	b.n	80048e8 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0304 	and.w	r3, r3, #4
 800488e:	2b00      	cmp	r3, #0
 8004890:	d008      	beq.n	80048a4 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004892:	4b18      	ldr	r3, [pc, #96]	; (80048f4 <HAL_RCC_ClockConfig+0x20c>)
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	4915      	ldr	r1, [pc, #84]	; (80048f4 <HAL_RCC_ClockConfig+0x20c>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0308 	and.w	r3, r3, #8
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d009      	beq.n	80048c4 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80048b0:	4b10      	ldr	r3, [pc, #64]	; (80048f4 <HAL_RCC_ClockConfig+0x20c>)
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	00db      	lsls	r3, r3, #3
 80048be:	490d      	ldr	r1, [pc, #52]	; (80048f4 <HAL_RCC_ClockConfig+0x20c>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048c4:	f000 f81c 	bl	8004900 <HAL_RCC_GetSysClockFreq>
 80048c8:	4602      	mov	r2, r0
 80048ca:	4b0a      	ldr	r3, [pc, #40]	; (80048f4 <HAL_RCC_ClockConfig+0x20c>)
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	091b      	lsrs	r3, r3, #4
 80048d0:	f003 030f 	and.w	r3, r3, #15
 80048d4:	4908      	ldr	r1, [pc, #32]	; (80048f8 <HAL_RCC_ClockConfig+0x210>)
 80048d6:	5ccb      	ldrb	r3, [r1, r3]
 80048d8:	fa22 f303 	lsr.w	r3, r2, r3
 80048dc:	4a07      	ldr	r2, [pc, #28]	; (80048fc <HAL_RCC_ClockConfig+0x214>)
 80048de:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80048e0:	2000      	movs	r0, #0
 80048e2:	f7ff f831 	bl	8003948 <HAL_InitTick>
  
  return HAL_OK;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3710      	adds	r7, #16
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	40022000 	.word	0x40022000
 80048f4:	40021000 	.word	0x40021000
 80048f8:	08007944 	.word	0x08007944
 80048fc:	20000174 	.word	0x20000174

08004900 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004900:	b490      	push	{r4, r7}
 8004902:	b08a      	sub	sp, #40	; 0x28
 8004904:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004906:	4b29      	ldr	r3, [pc, #164]	; (80049ac <HAL_RCC_GetSysClockFreq+0xac>)
 8004908:	1d3c      	adds	r4, r7, #4
 800490a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800490c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004910:	f240 2301 	movw	r3, #513	; 0x201
 8004914:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004916:	2300      	movs	r3, #0
 8004918:	61fb      	str	r3, [r7, #28]
 800491a:	2300      	movs	r3, #0
 800491c:	61bb      	str	r3, [r7, #24]
 800491e:	2300      	movs	r3, #0
 8004920:	627b      	str	r3, [r7, #36]	; 0x24
 8004922:	2300      	movs	r3, #0
 8004924:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004926:	2300      	movs	r3, #0
 8004928:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800492a:	4b21      	ldr	r3, [pc, #132]	; (80049b0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	f003 030c 	and.w	r3, r3, #12
 8004936:	2b04      	cmp	r3, #4
 8004938:	d002      	beq.n	8004940 <HAL_RCC_GetSysClockFreq+0x40>
 800493a:	2b08      	cmp	r3, #8
 800493c:	d003      	beq.n	8004946 <HAL_RCC_GetSysClockFreq+0x46>
 800493e:	e02b      	b.n	8004998 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004940:	4b1c      	ldr	r3, [pc, #112]	; (80049b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004942:	623b      	str	r3, [r7, #32]
      break;
 8004944:	e02b      	b.n	800499e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	0c9b      	lsrs	r3, r3, #18
 800494a:	f003 030f 	and.w	r3, r3, #15
 800494e:	3328      	adds	r3, #40	; 0x28
 8004950:	443b      	add	r3, r7
 8004952:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004956:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d012      	beq.n	8004988 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004962:	4b13      	ldr	r3, [pc, #76]	; (80049b0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	0c5b      	lsrs	r3, r3, #17
 8004968:	f003 0301 	and.w	r3, r3, #1
 800496c:	3328      	adds	r3, #40	; 0x28
 800496e:	443b      	add	r3, r7
 8004970:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004974:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	4a0e      	ldr	r2, [pc, #56]	; (80049b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800497a:	fb03 f202 	mul.w	r2, r3, r2
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	fbb2 f3f3 	udiv	r3, r2, r3
 8004984:	627b      	str	r3, [r7, #36]	; 0x24
 8004986:	e004      	b.n	8004992 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	4a0b      	ldr	r2, [pc, #44]	; (80049b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800498c:	fb02 f303 	mul.w	r3, r2, r3
 8004990:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004994:	623b      	str	r3, [r7, #32]
      break;
 8004996:	e002      	b.n	800499e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004998:	4b06      	ldr	r3, [pc, #24]	; (80049b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800499a:	623b      	str	r3, [r7, #32]
      break;
 800499c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800499e:	6a3b      	ldr	r3, [r7, #32]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3728      	adds	r7, #40	; 0x28
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bc90      	pop	{r4, r7}
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	08006f40 	.word	0x08006f40
 80049b0:	40021000 	.word	0x40021000
 80049b4:	007a1200 	.word	0x007a1200
 80049b8:	003d0900 	.word	0x003d0900

080049bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049bc:	b480      	push	{r7}
 80049be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049c0:	4b02      	ldr	r3, [pc, #8]	; (80049cc <HAL_RCC_GetHCLKFreq+0x10>)
 80049c2:	681b      	ldr	r3, [r3, #0]
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bc80      	pop	{r7}
 80049ca:	4770      	bx	lr
 80049cc:	20000174 	.word	0x20000174

080049d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80049d4:	f7ff fff2 	bl	80049bc <HAL_RCC_GetHCLKFreq>
 80049d8:	4602      	mov	r2, r0
 80049da:	4b05      	ldr	r3, [pc, #20]	; (80049f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	0a1b      	lsrs	r3, r3, #8
 80049e0:	f003 0307 	and.w	r3, r3, #7
 80049e4:	4903      	ldr	r1, [pc, #12]	; (80049f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049e6:	5ccb      	ldrb	r3, [r1, r3]
 80049e8:	fa22 f303 	lsr.w	r3, r2, r3
}    
 80049ec:	4618      	mov	r0, r3
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	40021000 	.word	0x40021000
 80049f4:	08007954 	.word	0x08007954

080049f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80049fc:	f7ff ffde 	bl	80049bc <HAL_RCC_GetHCLKFreq>
 8004a00:	4602      	mov	r2, r0
 8004a02:	4b05      	ldr	r3, [pc, #20]	; (8004a18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	0adb      	lsrs	r3, r3, #11
 8004a08:	f003 0307 	and.w	r3, r3, #7
 8004a0c:	4903      	ldr	r1, [pc, #12]	; (8004a1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a0e:	5ccb      	ldrb	r3, [r1, r3]
 8004a10:	fa22 f303 	lsr.w	r3, r2, r3
} 
 8004a14:	4618      	mov	r0, r3
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	40021000 	.word	0x40021000
 8004a1c:	08007954 	.word	0x08007954

08004a20 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a28:	4b0b      	ldr	r3, [pc, #44]	; (8004a58 <RCC_Delay+0x38>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a0b      	ldr	r2, [pc, #44]	; (8004a5c <RCC_Delay+0x3c>)
 8004a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a32:	0a5b      	lsrs	r3, r3, #9
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	fb02 f303 	mul.w	r3, r2, r3
 8004a3a:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8004a3c:	bf00      	nop
}
 8004a3e:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	1e5a      	subs	r2, r3, #1
 8004a44:	60fa      	str	r2, [r7, #12]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1f8      	bne.n	8004a3c <RCC_Delay+0x1c>
}
 8004a4a:	bf00      	nop
 8004a4c:	bf00      	nop
 8004a4e:	3714      	adds	r7, #20
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bc80      	pop	{r7}
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	20000174 	.word	0x20000174
 8004a5c:	10624dd3 	.word	0x10624dd3

08004a60 <HAL_SRAM_Init>:
  * @param  Timing: Pointer to SRAM control timing structure 
  * @param  ExtTiming: Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing, FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d101      	bne.n	8004a76 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e034      	b.n	8004ae0 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d106      	bne.n	8004a90 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	f7fc fbd4 	bl	8001238 <HAL_SRAM_MspInit>
  }
  
  /* Initialize SRAM control Interface */
  FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	3308      	adds	r3, #8
 8004a98:	4619      	mov	r1, r3
 8004a9a:	4610      	mov	r0, r2
 8004a9c:	f000 fd08 	bl	80054b0 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6818      	ldr	r0, [r3, #0]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	68b9      	ldr	r1, [r7, #8]
 8004aac:	f000 fd80 	bl	80055b0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6858      	ldr	r0, [r3, #4]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	689a      	ldr	r2, [r3, #8]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004abc:	6879      	ldr	r1, [r7, #4]
 8004abe:	f000 fdab 	bl	8005618 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	6892      	ldr	r2, [r2, #8]
 8004aca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	6892      	ldr	r2, [r2, #8]
 8004ad6:	f041 0101 	orr.w	r1, r1, #1
 8004ada:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3710      	adds	r7, #16
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d101      	bne.n	8004afa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e03f      	b.n	8004b7a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d106      	bne.n	8004b14 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f7fe fdd2 	bl	80036b8 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2224      	movs	r2, #36	; 0x24
 8004b18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68da      	ldr	r2, [r3, #12]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b2a:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f000 fba7 	bl	8005280 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	691a      	ldr	r2, [r3, #16]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	695a      	ldr	r2, [r3, #20]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b50:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68da      	ldr	r2, [r3, #12]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b60:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2220      	movs	r2, #32
 8004b6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2220      	movs	r2, #32
 8004b74:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3708      	adds	r7, #8
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}

08004b82 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b82:	b580      	push	{r7, lr}
 8004b84:	b088      	sub	sp, #32
 8004b86:	af02      	add	r7, sp, #8
 8004b88:	60f8      	str	r0, [r7, #12]
 8004b8a:	60b9      	str	r1, [r7, #8]
 8004b8c:	603b      	str	r3, [r7, #0]
 8004b8e:	4613      	mov	r3, r2
 8004b90:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8004b92:	2300      	movs	r3, #0
 8004b94:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b20      	cmp	r3, #32
 8004ba0:	f040 8083 	bne.w	8004caa <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL) || (Size == 0U))
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d002      	beq.n	8004bb0 <HAL_UART_Transmit+0x2e>
 8004baa:	88fb      	ldrh	r3, [r7, #6]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d101      	bne.n	8004bb4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e07b      	b.n	8004cac <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d101      	bne.n	8004bc2 <HAL_UART_Transmit+0x40>
 8004bbe:	2302      	movs	r3, #2
 8004bc0:	e074      	b.n	8004cac <HAL_UART_Transmit+0x12a>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2221      	movs	r2, #33	; 0x21
 8004bd4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004bd8:	f7fe fef8 	bl	80039cc <HAL_GetTick>
 8004bdc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	88fa      	ldrh	r2, [r7, #6]
 8004be2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	88fa      	ldrh	r2, [r7, #6]
 8004be8:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8004bea:	e042      	b.n	8004c72 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	b29a      	uxth	r2, r3
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c02:	d122      	bne.n	8004c4a <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	9300      	str	r3, [sp, #0]
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	2180      	movs	r1, #128	; 0x80
 8004c0e:	68f8      	ldr	r0, [r7, #12]
 8004c10:	f000 f9cd 	bl	8004fae <UART_WaitOnFlagUntilTimeout>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d001      	beq.n	8004c1e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e046      	b.n	8004cac <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	881b      	ldrh	r3, [r3, #0]
 8004c26:	461a      	mov	r2, r3
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c30:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d103      	bne.n	8004c42 <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	3302      	adds	r3, #2
 8004c3e:	60bb      	str	r3, [r7, #8]
 8004c40:	e017      	b.n	8004c72 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData +=1U;
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	3301      	adds	r3, #1
 8004c46:	60bb      	str	r3, [r7, #8]
 8004c48:	e013      	b.n	8004c72 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	9300      	str	r3, [sp, #0]
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	2200      	movs	r2, #0
 8004c52:	2180      	movs	r1, #128	; 0x80
 8004c54:	68f8      	ldr	r0, [r7, #12]
 8004c56:	f000 f9aa 	bl	8004fae <UART_WaitOnFlagUntilTimeout>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d001      	beq.n	8004c64 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e023      	b.n	8004cac <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	1c5a      	adds	r2, r3, #1
 8004c68:	60ba      	str	r2, [r7, #8]
 8004c6a:	781a      	ldrb	r2, [r3, #0]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1b7      	bne.n	8004bec <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	9300      	str	r3, [sp, #0]
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	2200      	movs	r2, #0
 8004c84:	2140      	movs	r1, #64	; 0x40
 8004c86:	68f8      	ldr	r0, [r7, #12]
 8004c88:	f000 f991 	bl	8004fae <UART_WaitOnFlagUntilTimeout>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d001      	beq.n	8004c96 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e00a      	b.n	8004cac <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2220      	movs	r2, #32
 8004c9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	e000      	b.n	8004cac <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004caa:	2302      	movs	r3, #2
  }
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3718      	adds	r7, #24
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <HAL_UART_Receive_IT>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b085      	sub	sp, #20
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	4613      	mov	r3, r2
 8004cc0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	2b20      	cmp	r3, #32
 8004ccc:	d140      	bne.n	8004d50 <HAL_UART_Receive_IT+0x9c>
  {
    if((pData == NULL) || (Size == 0U))
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d002      	beq.n	8004cda <HAL_UART_Receive_IT+0x26>
 8004cd4:	88fb      	ldrh	r3, [r7, #6]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d101      	bne.n	8004cde <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e039      	b.n	8004d52 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d101      	bne.n	8004cec <HAL_UART_Receive_IT+0x38>
 8004ce8:	2302      	movs	r3, #2
 8004cea:	e032      	b.n	8004d52 <HAL_UART_Receive_IT+0x9e>
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	68ba      	ldr	r2, [r7, #8]
 8004cf8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	88fa      	ldrh	r2, [r7, #6]
 8004cfe:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	88fa      	ldrh	r2, [r7, #6]
 8004d04:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2222      	movs	r2, #34	; 0x22
 8004d10:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68da      	ldr	r2, [r3, #12]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d2a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	695a      	ldr	r2, [r3, #20]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f042 0201 	orr.w	r2, r2, #1
 8004d3a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68da      	ldr	r2, [r3, #12]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f042 0220 	orr.w	r2, r2, #32
 8004d4a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	e000      	b.n	8004d52 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004d50:	2302      	movs	r3, #2
  }
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3714      	adds	r7, #20
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bc80      	pop	{r7}
 8004d5a:	4770      	bx	lr

08004d5c <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b088      	sub	sp, #32
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 8004d80:	2300      	movs	r3, #0
 8004d82:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	f003 030f 	and.w	r3, r3, #15
 8004d8a:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d10d      	bne.n	8004dae <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	f003 0320 	and.w	r3, r3, #32
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d008      	beq.n	8004dae <HAL_UART_IRQHandler+0x52>
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	f003 0320 	and.w	r3, r3, #32
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d003      	beq.n	8004dae <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 f9e9 	bl	800517e <UART_Receive_IT>
      return;
 8004dac:	e0cb      	b.n	8004f46 <HAL_UART_IRQHandler+0x1ea>
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	f000 80ab 	beq.w	8004f0c <HAL_UART_IRQHandler+0x1b0>
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	f003 0301 	and.w	r3, r3, #1
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d105      	bne.n	8004dcc <HAL_UART_IRQHandler+0x70>
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	f000 80a0 	beq.w	8004f0c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00a      	beq.n	8004dec <HAL_UART_IRQHandler+0x90>
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d005      	beq.n	8004dec <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004de4:	f043 0201 	orr.w	r2, r3, #1
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	f003 0304 	and.w	r3, r3, #4
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00a      	beq.n	8004e0c <HAL_UART_IRQHandler+0xb0>
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	f003 0301 	and.w	r3, r3, #1
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d005      	beq.n	8004e0c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e04:	f043 0202 	orr.w	r2, r3, #2
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	f003 0302 	and.w	r3, r3, #2
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00a      	beq.n	8004e2c <HAL_UART_IRQHandler+0xd0>
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	f003 0301 	and.w	r3, r3, #1
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d005      	beq.n	8004e2c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e24:	f043 0204 	orr.w	r2, r3, #4
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	f003 0308 	and.w	r3, r3, #8
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00a      	beq.n	8004e4c <HAL_UART_IRQHandler+0xf0>
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	f003 0301 	and.w	r3, r3, #1
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d005      	beq.n	8004e4c <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e44:	f043 0208 	orr.w	r2, r3, #8
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d077      	beq.n	8004f44 <HAL_UART_IRQHandler+0x1e8>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	f003 0320 	and.w	r3, r3, #32
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d007      	beq.n	8004e6e <HAL_UART_IRQHandler+0x112>
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	f003 0320 	and.w	r3, r3, #32
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d002      	beq.n	8004e6e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 f988 	bl	800517e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	695b      	ldr	r3, [r3, #20]
 8004e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	bf14      	ite	ne
 8004e7c:	2301      	movne	r3, #1
 8004e7e:	2300      	moveq	r3, #0
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e88:	f003 0308 	and.w	r3, r3, #8
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d102      	bne.n	8004e96 <HAL_UART_IRQHandler+0x13a>
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d031      	beq.n	8004efa <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 f8d3 	bl	8005042 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d023      	beq.n	8004ef2 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	695a      	ldr	r2, [r3, #20]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004eb8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d013      	beq.n	8004eea <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ec6:	4a21      	ldr	r2, [pc, #132]	; (8004f4c <HAL_UART_IRQHandler+0x1f0>)
 8004ec8:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f7fe feb4 	bl	8003c3c <HAL_DMA_Abort_IT>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d016      	beq.n	8004f08 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ee4:	4610      	mov	r0, r2
 8004ee6:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ee8:	e00e      	b.n	8004f08 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 f839 	bl	8004f62 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ef0:	e00a      	b.n	8004f08 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 f835 	bl	8004f62 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ef8:	e006      	b.n	8004f08 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 f831 	bl	8004f62 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004f06:	e01d      	b.n	8004f44 <HAL_UART_IRQHandler+0x1e8>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f08:	bf00      	nop
    return;
 8004f0a:	e01b      	b.n	8004f44 <HAL_UART_IRQHandler+0x1e8>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d008      	beq.n	8004f28 <HAL_UART_IRQHandler+0x1cc>
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d003      	beq.n	8004f28 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 f8bf 	bl	80050a4 <UART_Transmit_IT>
    return;
 8004f26:	e00e      	b.n	8004f46 <HAL_UART_IRQHandler+0x1ea>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d009      	beq.n	8004f46 <HAL_UART_IRQHandler+0x1ea>
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d004      	beq.n	8004f46 <HAL_UART_IRQHandler+0x1ea>
  {
    UART_EndTransmit_IT(huart);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f000 f906 	bl	800514e <UART_EndTransmit_IT>
    return;
 8004f42:	e000      	b.n	8004f46 <HAL_UART_IRQHandler+0x1ea>
    return;
 8004f44:	bf00      	nop
  }
}
 8004f46:	3720      	adds	r7, #32
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	0800507d 	.word	0x0800507d

08004f50 <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 8004f58:	bf00      	nop
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bc80      	pop	{r7}
 8004f60:	4770      	bx	lr

08004f62 <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f62:	b480      	push	{r7}
 8004f64:	b083      	sub	sp, #12
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 8004f6a:	bf00      	nop
 8004f6c:	370c      	adds	r7, #12
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bc80      	pop	{r7}
 8004f72:	4770      	bx	lr

08004f74 <HAL_UART_GetState>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  uint32_t temp1= 0x00U, temp2 = 0x00U;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	60fb      	str	r3, [r7, #12]
 8004f80:	2300      	movs	r3, #0
 8004f82:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	60bb      	str	r3, [r7, #8]
  
  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	b2da      	uxtb	r2, r3
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	b2db      	uxtb	r3, r3
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3714      	adds	r7, #20
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bc80      	pop	{r7}
 8004fac:	4770      	bx	lr

08004fae <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b084      	sub	sp, #16
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	60f8      	str	r0, [r7, #12]
 8004fb6:	60b9      	str	r1, [r7, #8]
 8004fb8:	603b      	str	r3, [r7, #0]
 8004fba:	4613      	mov	r3, r2
 8004fbc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8004fbe:	e02c      	b.n	800501a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc6:	d028      	beq.n	800501a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d007      	beq.n	8004fde <UART_WaitOnFlagUntilTimeout+0x30>
 8004fce:	f7fe fcfd 	bl	80039cc <HAL_GetTick>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	69ba      	ldr	r2, [r7, #24]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d21d      	bcs.n	800501a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68da      	ldr	r2, [r3, #12]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004fec:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	695a      	ldr	r2, [r3, #20]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f022 0201 	bic.w	r2, r2, #1
 8004ffc:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2220      	movs	r2, #32
 8005002:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2220      	movs	r2, #32
 800500a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e00f      	b.n	800503a <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	4013      	ands	r3, r2
 8005024:	68ba      	ldr	r2, [r7, #8]
 8005026:	429a      	cmp	r2, r3
 8005028:	bf0c      	ite	eq
 800502a:	2301      	moveq	r3, #1
 800502c:	2300      	movne	r3, #0
 800502e:	b2db      	uxtb	r3, r3
 8005030:	461a      	mov	r2, r3
 8005032:	79fb      	ldrb	r3, [r7, #7]
 8005034:	429a      	cmp	r2, r3
 8005036:	d0c3      	beq.n	8004fc0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	3710      	adds	r7, #16
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}

08005042 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005042:	b480      	push	{r7}
 8005044:	b083      	sub	sp, #12
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68da      	ldr	r2, [r3, #12]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005058:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	695a      	ldr	r2, [r3, #20]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f022 0201 	bic.w	r2, r2, #1
 8005068:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2220      	movs	r2, #32
 800506e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005072:	bf00      	nop
 8005074:	370c      	adds	r7, #12
 8005076:	46bd      	mov	sp, r7
 8005078:	bc80      	pop	{r7}
 800507a:	4770      	bx	lr

0800507c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005088:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2200      	movs	r2, #0
 800508e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2200      	movs	r2, #0
 8005094:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 8005096:	68f8      	ldr	r0, [r7, #12]
 8005098:	f7ff ff63 	bl	8004f62 <HAL_UART_ErrorCallback>
}
 800509c:	bf00      	nop
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	2b21      	cmp	r3, #33	; 0x21
 80050b6:	d144      	bne.n	8005142 <UART_Transmit_IT+0x9e>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050c0:	d11a      	bne.n	80050f8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	881b      	ldrh	r3, [r3, #0]
 80050cc:	461a      	mov	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050d6:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d105      	bne.n	80050ec <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a1b      	ldr	r3, [r3, #32]
 80050e4:	1c9a      	adds	r2, r3, #2
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	621a      	str	r2, [r3, #32]
 80050ea:	e00e      	b.n	800510a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a1b      	ldr	r3, [r3, #32]
 80050f0:	1c5a      	adds	r2, r3, #1
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	621a      	str	r2, [r3, #32]
 80050f6:	e008      	b.n	800510a <UART_Transmit_IT+0x66>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a1b      	ldr	r3, [r3, #32]
 80050fc:	1c59      	adds	r1, r3, #1
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	6211      	str	r1, [r2, #32]
 8005102:	781a      	ldrb	r2, [r3, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800510e:	b29b      	uxth	r3, r3
 8005110:	3b01      	subs	r3, #1
 8005112:	b29b      	uxth	r3, r3
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	4619      	mov	r1, r3
 8005118:	84d1      	strh	r1, [r2, #38]	; 0x26
 800511a:	2b00      	cmp	r3, #0
 800511c:	d10f      	bne.n	800513e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68da      	ldr	r2, [r3, #12]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800512c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68da      	ldr	r2, [r3, #12]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800513c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800513e:	2300      	movs	r3, #0
 8005140:	e000      	b.n	8005144 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005142:	2302      	movs	r3, #2
  }
}
 8005144:	4618      	mov	r0, r3
 8005146:	3714      	adds	r7, #20
 8005148:	46bd      	mov	sp, r7
 800514a:	bc80      	pop	{r7}
 800514c:	4770      	bx	lr

0800514e <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800514e:	b580      	push	{r7, lr}
 8005150:	b082      	sub	sp, #8
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	68da      	ldr	r2, [r3, #12]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005164:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2220      	movs	r2, #32
 800516a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f7ff feee 	bl	8004f50 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3708      	adds	r7, #8
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}

0800517e <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800517e:	b580      	push	{r7, lr}
 8005180:	b084      	sub	sp, #16
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800518c:	b2db      	uxtb	r3, r3
 800518e:	2b22      	cmp	r3, #34	; 0x22
 8005190:	d171      	bne.n	8005276 <UART_Receive_IT+0xf8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800519a:	d123      	bne.n	80051e4 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a0:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d10e      	bne.n	80051c8 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051b6:	b29a      	uxth	r2, r3
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c0:	1c9a      	adds	r2, r3, #2
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	629a      	str	r2, [r3, #40]	; 0x28
 80051c6:	e029      	b.n	800521c <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	b29a      	uxth	r2, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051dc:	1c5a      	adds	r2, r3, #1
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	629a      	str	r2, [r3, #40]	; 0x28
 80051e2:	e01b      	b.n	800521c <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d10a      	bne.n	8005202 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	6858      	ldr	r0, [r3, #4]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f6:	1c59      	adds	r1, r3, #1
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	6291      	str	r1, [r2, #40]	; 0x28
 80051fc:	b2c2      	uxtb	r2, r0
 80051fe:	701a      	strb	r2, [r3, #0]
 8005200:	e00c      	b.n	800521c <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	b2da      	uxtb	r2, r3
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800520e:	1c58      	adds	r0, r3, #1
 8005210:	6879      	ldr	r1, [r7, #4]
 8005212:	6288      	str	r0, [r1, #40]	; 0x28
 8005214:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005218:	b2d2      	uxtb	r2, r2
 800521a:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005220:	b29b      	uxth	r3, r3
 8005222:	3b01      	subs	r3, #1
 8005224:	b29b      	uxth	r3, r3
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	4619      	mov	r1, r3
 800522a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800522c:	2b00      	cmp	r3, #0
 800522e:	d120      	bne.n	8005272 <UART_Receive_IT+0xf4>
    {
      /* Disable the IRDA Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68da      	ldr	r2, [r3, #12]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f022 0220 	bic.w	r2, r2, #32
 800523e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68da      	ldr	r2, [r3, #12]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800524e:	60da      	str	r2, [r3, #12]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	695a      	ldr	r2, [r3, #20]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f022 0201 	bic.w	r2, r2, #1
 800525e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2220      	movs	r2, #32
 8005264:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      HAL_UART_RxCpltCallback(huart);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f7fe fad1 	bl	8003810 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 800526e:	2300      	movs	r3, #0
 8005270:	e002      	b.n	8005278 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005272:	2300      	movs	r3, #0
 8005274:	e000      	b.n	8005278 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005276:	2302      	movs	r3, #2
  }
}
 8005278:	4618      	mov	r0, r3
 800527a:	3710      	adds	r7, #16
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}

08005280 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005280:	b5b0      	push	{r4, r5, r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8005288:	2300      	movs	r3, #0
 800528a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	68da      	ldr	r2, [r3, #12]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	430a      	orrs	r2, r1
 80052a0:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	689a      	ldr	r2, [r3, #8]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	431a      	orrs	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	695b      	ldr	r3, [r3, #20]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	68fa      	ldr	r2, [r7, #12]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80052c2:	f023 030c 	bic.w	r3, r3, #12
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	6812      	ldr	r2, [r2, #0]
 80052ca:	68f9      	ldr	r1, [r7, #12]
 80052cc:	430b      	orrs	r3, r1
 80052ce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	699a      	ldr	r2, [r3, #24]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	430a      	orrs	r2, r1
 80052e4:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a6f      	ldr	r2, [pc, #444]	; (80054a8 <UART_SetConfig+0x228>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d16b      	bne.n	80053c8 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80052f0:	f7ff fb82 	bl	80049f8 <HAL_RCC_GetPCLK2Freq>
 80052f4:	4602      	mov	r2, r0
 80052f6:	4613      	mov	r3, r2
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	4413      	add	r3, r2
 80052fc:	009a      	lsls	r2, r3, #2
 80052fe:	441a      	add	r2, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	fbb2 f3f3 	udiv	r3, r2, r3
 800530a:	4a68      	ldr	r2, [pc, #416]	; (80054ac <UART_SetConfig+0x22c>)
 800530c:	fba2 2303 	umull	r2, r3, r2, r3
 8005310:	095b      	lsrs	r3, r3, #5
 8005312:	011c      	lsls	r4, r3, #4
 8005314:	f7ff fb70 	bl	80049f8 <HAL_RCC_GetPCLK2Freq>
 8005318:	4602      	mov	r2, r0
 800531a:	4613      	mov	r3, r2
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	4413      	add	r3, r2
 8005320:	009a      	lsls	r2, r3, #2
 8005322:	441a      	add	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	fbb2 f5f3 	udiv	r5, r2, r3
 800532e:	f7ff fb63 	bl	80049f8 <HAL_RCC_GetPCLK2Freq>
 8005332:	4602      	mov	r2, r0
 8005334:	4613      	mov	r3, r2
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	4413      	add	r3, r2
 800533a:	009a      	lsls	r2, r3, #2
 800533c:	441a      	add	r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	fbb2 f3f3 	udiv	r3, r2, r3
 8005348:	4a58      	ldr	r2, [pc, #352]	; (80054ac <UART_SetConfig+0x22c>)
 800534a:	fba2 2303 	umull	r2, r3, r2, r3
 800534e:	095b      	lsrs	r3, r3, #5
 8005350:	2264      	movs	r2, #100	; 0x64
 8005352:	fb02 f303 	mul.w	r3, r2, r3
 8005356:	1aeb      	subs	r3, r5, r3
 8005358:	011b      	lsls	r3, r3, #4
 800535a:	3332      	adds	r3, #50	; 0x32
 800535c:	4a53      	ldr	r2, [pc, #332]	; (80054ac <UART_SetConfig+0x22c>)
 800535e:	fba2 2303 	umull	r2, r3, r2, r3
 8005362:	095b      	lsrs	r3, r3, #5
 8005364:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005368:	441c      	add	r4, r3
 800536a:	f7ff fb45 	bl	80049f8 <HAL_RCC_GetPCLK2Freq>
 800536e:	4602      	mov	r2, r0
 8005370:	4613      	mov	r3, r2
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	4413      	add	r3, r2
 8005376:	009a      	lsls	r2, r3, #2
 8005378:	441a      	add	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	fbb2 f5f3 	udiv	r5, r2, r3
 8005384:	f7ff fb38 	bl	80049f8 <HAL_RCC_GetPCLK2Freq>
 8005388:	4602      	mov	r2, r0
 800538a:	4613      	mov	r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	4413      	add	r3, r2
 8005390:	009a      	lsls	r2, r3, #2
 8005392:	441a      	add	r2, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	fbb2 f3f3 	udiv	r3, r2, r3
 800539e:	4a43      	ldr	r2, [pc, #268]	; (80054ac <UART_SetConfig+0x22c>)
 80053a0:	fba2 2303 	umull	r2, r3, r2, r3
 80053a4:	095b      	lsrs	r3, r3, #5
 80053a6:	2264      	movs	r2, #100	; 0x64
 80053a8:	fb02 f303 	mul.w	r3, r2, r3
 80053ac:	1aeb      	subs	r3, r5, r3
 80053ae:	011b      	lsls	r3, r3, #4
 80053b0:	3332      	adds	r3, #50	; 0x32
 80053b2:	4a3e      	ldr	r2, [pc, #248]	; (80054ac <UART_SetConfig+0x22c>)
 80053b4:	fba2 2303 	umull	r2, r3, r2, r3
 80053b8:	095b      	lsrs	r3, r3, #5
 80053ba:	f003 020f 	and.w	r2, r3, #15
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4422      	add	r2, r4
 80053c4:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80053c6:	e06a      	b.n	800549e <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80053c8:	f7ff fb02 	bl	80049d0 <HAL_RCC_GetPCLK1Freq>
 80053cc:	4602      	mov	r2, r0
 80053ce:	4613      	mov	r3, r2
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	4413      	add	r3, r2
 80053d4:	009a      	lsls	r2, r3, #2
 80053d6:	441a      	add	r2, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e2:	4a32      	ldr	r2, [pc, #200]	; (80054ac <UART_SetConfig+0x22c>)
 80053e4:	fba2 2303 	umull	r2, r3, r2, r3
 80053e8:	095b      	lsrs	r3, r3, #5
 80053ea:	011c      	lsls	r4, r3, #4
 80053ec:	f7ff faf0 	bl	80049d0 <HAL_RCC_GetPCLK1Freq>
 80053f0:	4602      	mov	r2, r0
 80053f2:	4613      	mov	r3, r2
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	4413      	add	r3, r2
 80053f8:	009a      	lsls	r2, r3, #2
 80053fa:	441a      	add	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	fbb2 f5f3 	udiv	r5, r2, r3
 8005406:	f7ff fae3 	bl	80049d0 <HAL_RCC_GetPCLK1Freq>
 800540a:	4602      	mov	r2, r0
 800540c:	4613      	mov	r3, r2
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	4413      	add	r3, r2
 8005412:	009a      	lsls	r2, r3, #2
 8005414:	441a      	add	r2, r3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005420:	4a22      	ldr	r2, [pc, #136]	; (80054ac <UART_SetConfig+0x22c>)
 8005422:	fba2 2303 	umull	r2, r3, r2, r3
 8005426:	095b      	lsrs	r3, r3, #5
 8005428:	2264      	movs	r2, #100	; 0x64
 800542a:	fb02 f303 	mul.w	r3, r2, r3
 800542e:	1aeb      	subs	r3, r5, r3
 8005430:	011b      	lsls	r3, r3, #4
 8005432:	3332      	adds	r3, #50	; 0x32
 8005434:	4a1d      	ldr	r2, [pc, #116]	; (80054ac <UART_SetConfig+0x22c>)
 8005436:	fba2 2303 	umull	r2, r3, r2, r3
 800543a:	095b      	lsrs	r3, r3, #5
 800543c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005440:	441c      	add	r4, r3
 8005442:	f7ff fac5 	bl	80049d0 <HAL_RCC_GetPCLK1Freq>
 8005446:	4602      	mov	r2, r0
 8005448:	4613      	mov	r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	4413      	add	r3, r2
 800544e:	009a      	lsls	r2, r3, #2
 8005450:	441a      	add	r2, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	fbb2 f5f3 	udiv	r5, r2, r3
 800545c:	f7ff fab8 	bl	80049d0 <HAL_RCC_GetPCLK1Freq>
 8005460:	4602      	mov	r2, r0
 8005462:	4613      	mov	r3, r2
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	4413      	add	r3, r2
 8005468:	009a      	lsls	r2, r3, #2
 800546a:	441a      	add	r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	fbb2 f3f3 	udiv	r3, r2, r3
 8005476:	4a0d      	ldr	r2, [pc, #52]	; (80054ac <UART_SetConfig+0x22c>)
 8005478:	fba2 2303 	umull	r2, r3, r2, r3
 800547c:	095b      	lsrs	r3, r3, #5
 800547e:	2264      	movs	r2, #100	; 0x64
 8005480:	fb02 f303 	mul.w	r3, r2, r3
 8005484:	1aeb      	subs	r3, r5, r3
 8005486:	011b      	lsls	r3, r3, #4
 8005488:	3332      	adds	r3, #50	; 0x32
 800548a:	4a08      	ldr	r2, [pc, #32]	; (80054ac <UART_SetConfig+0x22c>)
 800548c:	fba2 2303 	umull	r2, r3, r2, r3
 8005490:	095b      	lsrs	r3, r3, #5
 8005492:	f003 020f 	and.w	r2, r3, #15
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4422      	add	r2, r4
 800549c:	609a      	str	r2, [r3, #8]
}
 800549e:	bf00      	nop
 80054a0:	3710      	adds	r7, #16
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bdb0      	pop	{r4, r5, r7, pc}
 80054a6:	bf00      	nop
 80054a8:	40013800 	.word	0x40013800
 80054ac:	51eb851f 	.word	0x51eb851f

080054b0 <FSMC_NORSRAM_Init>:
  * @param  Device: Pointer to NORSRAM device instance
  * @param  Init: Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef *Init)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_EXTENDED_MODE(Init->ExtendedMode));
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054c4:	683a      	ldr	r2, [r7, #0]
 80054c6:	6812      	ldr	r2, [r2, #0]
 80054c8:	f023 0101 	bic.w	r1, r3, #1
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	2b08      	cmp	r3, #8
 80054d8:	d132      	bne.n	8005540 <FSMC_NORSRAM_Init+0x90>
  {
    MODIFY_REG(Device->BTCR[Init->NSBank], BCR_CLEAR_MASK, (uint32_t)(FSMC_NORSRAM_FLASH_ACCESS_ENABLE
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80054e4:	4b31      	ldr	r3, [pc, #196]	; (80055ac <FSMC_NORSRAM_Init+0xfc>)
 80054e6:	4013      	ands	r3, r2
 80054e8:	683a      	ldr	r2, [r7, #0]
 80054ea:	6851      	ldr	r1, [r2, #4]
 80054ec:	683a      	ldr	r2, [r7, #0]
 80054ee:	6892      	ldr	r2, [r2, #8]
 80054f0:	4311      	orrs	r1, r2
 80054f2:	683a      	ldr	r2, [r7, #0]
 80054f4:	68d2      	ldr	r2, [r2, #12]
 80054f6:	4311      	orrs	r1, r2
 80054f8:	683a      	ldr	r2, [r7, #0]
 80054fa:	6912      	ldr	r2, [r2, #16]
 80054fc:	4311      	orrs	r1, r2
 80054fe:	683a      	ldr	r2, [r7, #0]
 8005500:	6952      	ldr	r2, [r2, #20]
 8005502:	4311      	orrs	r1, r2
 8005504:	683a      	ldr	r2, [r7, #0]
 8005506:	6992      	ldr	r2, [r2, #24]
 8005508:	4311      	orrs	r1, r2
 800550a:	683a      	ldr	r2, [r7, #0]
 800550c:	69d2      	ldr	r2, [r2, #28]
 800550e:	4311      	orrs	r1, r2
 8005510:	683a      	ldr	r2, [r7, #0]
 8005512:	6a12      	ldr	r2, [r2, #32]
 8005514:	4311      	orrs	r1, r2
 8005516:	683a      	ldr	r2, [r7, #0]
 8005518:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800551a:	4311      	orrs	r1, r2
 800551c:	683a      	ldr	r2, [r7, #0]
 800551e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005520:	4311      	orrs	r1, r2
 8005522:	683a      	ldr	r2, [r7, #0]
 8005524:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005526:	4311      	orrs	r1, r2
 8005528:	683a      	ldr	r2, [r7, #0]
 800552a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800552c:	430a      	orrs	r2, r1
 800552e:	4313      	orrs	r3, r2
 8005530:	683a      	ldr	r2, [r7, #0]
 8005532:	6812      	ldr	r2, [r2, #0]
 8005534:	f043 0140 	orr.w	r1, r3, #64	; 0x40
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800553e:	e02f      	b.n	80055a0 <FSMC_NORSRAM_Init+0xf0>
                                                                     )
              );
  }
  else
  {
    MODIFY_REG(Device->BTCR[Init->NSBank], BCR_CLEAR_MASK, (uint32_t)(FSMC_NORSRAM_FLASH_ACCESS_DISABLE
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800554a:	4b18      	ldr	r3, [pc, #96]	; (80055ac <FSMC_NORSRAM_Init+0xfc>)
 800554c:	4013      	ands	r3, r2
 800554e:	683a      	ldr	r2, [r7, #0]
 8005550:	6851      	ldr	r1, [r2, #4]
 8005552:	683a      	ldr	r2, [r7, #0]
 8005554:	6892      	ldr	r2, [r2, #8]
 8005556:	4311      	orrs	r1, r2
 8005558:	683a      	ldr	r2, [r7, #0]
 800555a:	68d2      	ldr	r2, [r2, #12]
 800555c:	4311      	orrs	r1, r2
 800555e:	683a      	ldr	r2, [r7, #0]
 8005560:	6912      	ldr	r2, [r2, #16]
 8005562:	4311      	orrs	r1, r2
 8005564:	683a      	ldr	r2, [r7, #0]
 8005566:	6952      	ldr	r2, [r2, #20]
 8005568:	4311      	orrs	r1, r2
 800556a:	683a      	ldr	r2, [r7, #0]
 800556c:	6992      	ldr	r2, [r2, #24]
 800556e:	4311      	orrs	r1, r2
 8005570:	683a      	ldr	r2, [r7, #0]
 8005572:	69d2      	ldr	r2, [r2, #28]
 8005574:	4311      	orrs	r1, r2
 8005576:	683a      	ldr	r2, [r7, #0]
 8005578:	6a12      	ldr	r2, [r2, #32]
 800557a:	4311      	orrs	r1, r2
 800557c:	683a      	ldr	r2, [r7, #0]
 800557e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005580:	4311      	orrs	r1, r2
 8005582:	683a      	ldr	r2, [r7, #0]
 8005584:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005586:	4311      	orrs	r1, r2
 8005588:	683a      	ldr	r2, [r7, #0]
 800558a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800558c:	4311      	orrs	r1, r2
 800558e:	683a      	ldr	r2, [r7, #0]
 8005590:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005592:	4311      	orrs	r1, r2
 8005594:	683a      	ldr	r2, [r7, #0]
 8005596:	6812      	ldr	r2, [r2, #0]
 8005598:	4319      	orrs	r1, r3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
               | Init->WriteBurst
                                                                     )
              );
  }

  return HAL_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	370c      	adds	r7, #12
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bc80      	pop	{r7}
 80055aa:	4770      	bx	lr
 80055ac:	fff70081 	.word	0xfff70081

080055b0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing: Pointer to NORSRAM Timing structure
  * @param  Bank: NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b085      	sub	sp, #20
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U],                                                        \
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	1c5a      	adds	r2, r3, #1
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055c6:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	011b      	lsls	r3, r3, #4
 80055d4:	431a      	orrs	r2, r3
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	021b      	lsls	r3, r3, #8
 80055dc:	431a      	orrs	r2, r3
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	041b      	lsls	r3, r3, #16
 80055e4:	431a      	orrs	r2, r3
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	3b01      	subs	r3, #1
 80055ec:	051b      	lsls	r3, r3, #20
 80055ee:	431a      	orrs	r2, r3
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	695b      	ldr	r3, [r3, #20]
 80055f4:	3b02      	subs	r3, #2
 80055f6:	061b      	lsls	r3, r3, #24
 80055f8:	431a      	orrs	r2, r3
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	4313      	orrs	r3, r2
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	3201      	adds	r2, #1
 8005604:	4319      	orrs	r1, r3
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                        ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos)       | \
                        (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)        | \
                        (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)        | \
                        (Timing->AccessMode)));

  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3714      	adds	r7, #20
 8005612:	46bd      	mov	sp, r7
 8005614:	bc80      	pop	{r7}
 8005616:	4770      	bx	lr

08005618 <FSMC_NORSRAM_Extended_Timing_Init>:
  *            @arg FSMC_EXTENDED_MODE_DISABLE
  *            @arg FSMC_EXTENDED_MODE_ENABLE
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8005618:	b480      	push	{r7}
 800561a:	b085      	sub	sp, #20
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	607a      	str	r2, [r7, #4]
 8005624:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800562c:	d11d      	bne.n	800566a <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(STM32F101xE) || defined(STM32F103xE) || defined(STM32F101xG) || defined(STM32F103xG)
    MODIFY_REG(Device->BWTR[Bank],                                                      \
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005636:	4b13      	ldr	r3, [pc, #76]	; (8005684 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8005638:	4013      	ands	r3, r2
 800563a:	68ba      	ldr	r2, [r7, #8]
 800563c:	6811      	ldr	r1, [r2, #0]
 800563e:	68ba      	ldr	r2, [r7, #8]
 8005640:	6852      	ldr	r2, [r2, #4]
 8005642:	0112      	lsls	r2, r2, #4
 8005644:	4311      	orrs	r1, r2
 8005646:	68ba      	ldr	r2, [r7, #8]
 8005648:	6892      	ldr	r2, [r2, #8]
 800564a:	0212      	lsls	r2, r2, #8
 800564c:	4311      	orrs	r1, r2
 800564e:	68ba      	ldr	r2, [r7, #8]
 8005650:	6992      	ldr	r2, [r2, #24]
 8005652:	4311      	orrs	r1, r2
 8005654:	68ba      	ldr	r2, [r7, #8]
 8005656:	68d2      	ldr	r2, [r2, #12]
 8005658:	0412      	lsls	r2, r2, #16
 800565a:	430a      	orrs	r2, r1
 800565c:	ea43 0102 	orr.w	r1, r3, r2
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005668:	e005      	b.n	8005676 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                          (((Timing->DataLatency) - 2U)  << FSMC_BWTRx_DATLAT_Pos)));
#endif /* STM32F101xE || STM32F103xE || STM32F101xG || STM32F103xG */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8005672:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8005676:	2300      	movs	r3, #0
}
 8005678:	4618      	mov	r0, r3
 800567a:	3714      	adds	r7, #20
 800567c:	46bd      	mov	sp, r7
 800567e:	bc80      	pop	{r7}
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop
 8005684:	cff00000 	.word	0xcff00000

08005688 <__errno>:
 8005688:	4b01      	ldr	r3, [pc, #4]	; (8005690 <__errno+0x8>)
 800568a:	6818      	ldr	r0, [r3, #0]
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	20000180 	.word	0x20000180

08005694 <__libc_init_array>:
 8005694:	b570      	push	{r4, r5, r6, lr}
 8005696:	2600      	movs	r6, #0
 8005698:	4d0c      	ldr	r5, [pc, #48]	; (80056cc <__libc_init_array+0x38>)
 800569a:	4c0d      	ldr	r4, [pc, #52]	; (80056d0 <__libc_init_array+0x3c>)
 800569c:	1b64      	subs	r4, r4, r5
 800569e:	10a4      	asrs	r4, r4, #2
 80056a0:	42a6      	cmp	r6, r4
 80056a2:	d109      	bne.n	80056b8 <__libc_init_array+0x24>
 80056a4:	f001 fc1e 	bl	8006ee4 <_init>
 80056a8:	2600      	movs	r6, #0
 80056aa:	4d0a      	ldr	r5, [pc, #40]	; (80056d4 <__libc_init_array+0x40>)
 80056ac:	4c0a      	ldr	r4, [pc, #40]	; (80056d8 <__libc_init_array+0x44>)
 80056ae:	1b64      	subs	r4, r4, r5
 80056b0:	10a4      	asrs	r4, r4, #2
 80056b2:	42a6      	cmp	r6, r4
 80056b4:	d105      	bne.n	80056c2 <__libc_init_array+0x2e>
 80056b6:	bd70      	pop	{r4, r5, r6, pc}
 80056b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80056bc:	4798      	blx	r3
 80056be:	3601      	adds	r6, #1
 80056c0:	e7ee      	b.n	80056a0 <__libc_init_array+0xc>
 80056c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80056c6:	4798      	blx	r3
 80056c8:	3601      	adds	r6, #1
 80056ca:	e7f2      	b.n	80056b2 <__libc_init_array+0x1e>
 80056cc:	080079f0 	.word	0x080079f0
 80056d0:	080079f0 	.word	0x080079f0
 80056d4:	080079f0 	.word	0x080079f0
 80056d8:	080079f4 	.word	0x080079f4

080056dc <memset>:
 80056dc:	4603      	mov	r3, r0
 80056de:	4402      	add	r2, r0
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d100      	bne.n	80056e6 <memset+0xa>
 80056e4:	4770      	bx	lr
 80056e6:	f803 1b01 	strb.w	r1, [r3], #1
 80056ea:	e7f9      	b.n	80056e0 <memset+0x4>

080056ec <_puts_r>:
 80056ec:	b570      	push	{r4, r5, r6, lr}
 80056ee:	460e      	mov	r6, r1
 80056f0:	4605      	mov	r5, r0
 80056f2:	b118      	cbz	r0, 80056fc <_puts_r+0x10>
 80056f4:	6983      	ldr	r3, [r0, #24]
 80056f6:	b90b      	cbnz	r3, 80056fc <_puts_r+0x10>
 80056f8:	f000 fa44 	bl	8005b84 <__sinit>
 80056fc:	69ab      	ldr	r3, [r5, #24]
 80056fe:	68ac      	ldr	r4, [r5, #8]
 8005700:	b913      	cbnz	r3, 8005708 <_puts_r+0x1c>
 8005702:	4628      	mov	r0, r5
 8005704:	f000 fa3e 	bl	8005b84 <__sinit>
 8005708:	4b2c      	ldr	r3, [pc, #176]	; (80057bc <_puts_r+0xd0>)
 800570a:	429c      	cmp	r4, r3
 800570c:	d120      	bne.n	8005750 <_puts_r+0x64>
 800570e:	686c      	ldr	r4, [r5, #4]
 8005710:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005712:	07db      	lsls	r3, r3, #31
 8005714:	d405      	bmi.n	8005722 <_puts_r+0x36>
 8005716:	89a3      	ldrh	r3, [r4, #12]
 8005718:	0598      	lsls	r0, r3, #22
 800571a:	d402      	bmi.n	8005722 <_puts_r+0x36>
 800571c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800571e:	f000 facf 	bl	8005cc0 <__retarget_lock_acquire_recursive>
 8005722:	89a3      	ldrh	r3, [r4, #12]
 8005724:	0719      	lsls	r1, r3, #28
 8005726:	d51d      	bpl.n	8005764 <_puts_r+0x78>
 8005728:	6923      	ldr	r3, [r4, #16]
 800572a:	b1db      	cbz	r3, 8005764 <_puts_r+0x78>
 800572c:	3e01      	subs	r6, #1
 800572e:	68a3      	ldr	r3, [r4, #8]
 8005730:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005734:	3b01      	subs	r3, #1
 8005736:	60a3      	str	r3, [r4, #8]
 8005738:	bb39      	cbnz	r1, 800578a <_puts_r+0x9e>
 800573a:	2b00      	cmp	r3, #0
 800573c:	da38      	bge.n	80057b0 <_puts_r+0xc4>
 800573e:	4622      	mov	r2, r4
 8005740:	210a      	movs	r1, #10
 8005742:	4628      	mov	r0, r5
 8005744:	f000 f848 	bl	80057d8 <__swbuf_r>
 8005748:	3001      	adds	r0, #1
 800574a:	d011      	beq.n	8005770 <_puts_r+0x84>
 800574c:	250a      	movs	r5, #10
 800574e:	e011      	b.n	8005774 <_puts_r+0x88>
 8005750:	4b1b      	ldr	r3, [pc, #108]	; (80057c0 <_puts_r+0xd4>)
 8005752:	429c      	cmp	r4, r3
 8005754:	d101      	bne.n	800575a <_puts_r+0x6e>
 8005756:	68ac      	ldr	r4, [r5, #8]
 8005758:	e7da      	b.n	8005710 <_puts_r+0x24>
 800575a:	4b1a      	ldr	r3, [pc, #104]	; (80057c4 <_puts_r+0xd8>)
 800575c:	429c      	cmp	r4, r3
 800575e:	bf08      	it	eq
 8005760:	68ec      	ldreq	r4, [r5, #12]
 8005762:	e7d5      	b.n	8005710 <_puts_r+0x24>
 8005764:	4621      	mov	r1, r4
 8005766:	4628      	mov	r0, r5
 8005768:	f000 f888 	bl	800587c <__swsetup_r>
 800576c:	2800      	cmp	r0, #0
 800576e:	d0dd      	beq.n	800572c <_puts_r+0x40>
 8005770:	f04f 35ff 	mov.w	r5, #4294967295
 8005774:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005776:	07da      	lsls	r2, r3, #31
 8005778:	d405      	bmi.n	8005786 <_puts_r+0x9a>
 800577a:	89a3      	ldrh	r3, [r4, #12]
 800577c:	059b      	lsls	r3, r3, #22
 800577e:	d402      	bmi.n	8005786 <_puts_r+0x9a>
 8005780:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005782:	f000 fa9e 	bl	8005cc2 <__retarget_lock_release_recursive>
 8005786:	4628      	mov	r0, r5
 8005788:	bd70      	pop	{r4, r5, r6, pc}
 800578a:	2b00      	cmp	r3, #0
 800578c:	da04      	bge.n	8005798 <_puts_r+0xac>
 800578e:	69a2      	ldr	r2, [r4, #24]
 8005790:	429a      	cmp	r2, r3
 8005792:	dc06      	bgt.n	80057a2 <_puts_r+0xb6>
 8005794:	290a      	cmp	r1, #10
 8005796:	d004      	beq.n	80057a2 <_puts_r+0xb6>
 8005798:	6823      	ldr	r3, [r4, #0]
 800579a:	1c5a      	adds	r2, r3, #1
 800579c:	6022      	str	r2, [r4, #0]
 800579e:	7019      	strb	r1, [r3, #0]
 80057a0:	e7c5      	b.n	800572e <_puts_r+0x42>
 80057a2:	4622      	mov	r2, r4
 80057a4:	4628      	mov	r0, r5
 80057a6:	f000 f817 	bl	80057d8 <__swbuf_r>
 80057aa:	3001      	adds	r0, #1
 80057ac:	d1bf      	bne.n	800572e <_puts_r+0x42>
 80057ae:	e7df      	b.n	8005770 <_puts_r+0x84>
 80057b0:	250a      	movs	r5, #10
 80057b2:	6823      	ldr	r3, [r4, #0]
 80057b4:	1c5a      	adds	r2, r3, #1
 80057b6:	6022      	str	r2, [r4, #0]
 80057b8:	701d      	strb	r5, [r3, #0]
 80057ba:	e7db      	b.n	8005774 <_puts_r+0x88>
 80057bc:	08007980 	.word	0x08007980
 80057c0:	080079a0 	.word	0x080079a0
 80057c4:	08007960 	.word	0x08007960

080057c8 <puts>:
 80057c8:	4b02      	ldr	r3, [pc, #8]	; (80057d4 <puts+0xc>)
 80057ca:	4601      	mov	r1, r0
 80057cc:	6818      	ldr	r0, [r3, #0]
 80057ce:	f7ff bf8d 	b.w	80056ec <_puts_r>
 80057d2:	bf00      	nop
 80057d4:	20000180 	.word	0x20000180

080057d8 <__swbuf_r>:
 80057d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057da:	460e      	mov	r6, r1
 80057dc:	4614      	mov	r4, r2
 80057de:	4605      	mov	r5, r0
 80057e0:	b118      	cbz	r0, 80057ea <__swbuf_r+0x12>
 80057e2:	6983      	ldr	r3, [r0, #24]
 80057e4:	b90b      	cbnz	r3, 80057ea <__swbuf_r+0x12>
 80057e6:	f000 f9cd 	bl	8005b84 <__sinit>
 80057ea:	4b21      	ldr	r3, [pc, #132]	; (8005870 <__swbuf_r+0x98>)
 80057ec:	429c      	cmp	r4, r3
 80057ee:	d12b      	bne.n	8005848 <__swbuf_r+0x70>
 80057f0:	686c      	ldr	r4, [r5, #4]
 80057f2:	69a3      	ldr	r3, [r4, #24]
 80057f4:	60a3      	str	r3, [r4, #8]
 80057f6:	89a3      	ldrh	r3, [r4, #12]
 80057f8:	071a      	lsls	r2, r3, #28
 80057fa:	d52f      	bpl.n	800585c <__swbuf_r+0x84>
 80057fc:	6923      	ldr	r3, [r4, #16]
 80057fe:	b36b      	cbz	r3, 800585c <__swbuf_r+0x84>
 8005800:	6923      	ldr	r3, [r4, #16]
 8005802:	6820      	ldr	r0, [r4, #0]
 8005804:	b2f6      	uxtb	r6, r6
 8005806:	1ac0      	subs	r0, r0, r3
 8005808:	6963      	ldr	r3, [r4, #20]
 800580a:	4637      	mov	r7, r6
 800580c:	4283      	cmp	r3, r0
 800580e:	dc04      	bgt.n	800581a <__swbuf_r+0x42>
 8005810:	4621      	mov	r1, r4
 8005812:	4628      	mov	r0, r5
 8005814:	f000 f922 	bl	8005a5c <_fflush_r>
 8005818:	bb30      	cbnz	r0, 8005868 <__swbuf_r+0x90>
 800581a:	68a3      	ldr	r3, [r4, #8]
 800581c:	3001      	adds	r0, #1
 800581e:	3b01      	subs	r3, #1
 8005820:	60a3      	str	r3, [r4, #8]
 8005822:	6823      	ldr	r3, [r4, #0]
 8005824:	1c5a      	adds	r2, r3, #1
 8005826:	6022      	str	r2, [r4, #0]
 8005828:	701e      	strb	r6, [r3, #0]
 800582a:	6963      	ldr	r3, [r4, #20]
 800582c:	4283      	cmp	r3, r0
 800582e:	d004      	beq.n	800583a <__swbuf_r+0x62>
 8005830:	89a3      	ldrh	r3, [r4, #12]
 8005832:	07db      	lsls	r3, r3, #31
 8005834:	d506      	bpl.n	8005844 <__swbuf_r+0x6c>
 8005836:	2e0a      	cmp	r6, #10
 8005838:	d104      	bne.n	8005844 <__swbuf_r+0x6c>
 800583a:	4621      	mov	r1, r4
 800583c:	4628      	mov	r0, r5
 800583e:	f000 f90d 	bl	8005a5c <_fflush_r>
 8005842:	b988      	cbnz	r0, 8005868 <__swbuf_r+0x90>
 8005844:	4638      	mov	r0, r7
 8005846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005848:	4b0a      	ldr	r3, [pc, #40]	; (8005874 <__swbuf_r+0x9c>)
 800584a:	429c      	cmp	r4, r3
 800584c:	d101      	bne.n	8005852 <__swbuf_r+0x7a>
 800584e:	68ac      	ldr	r4, [r5, #8]
 8005850:	e7cf      	b.n	80057f2 <__swbuf_r+0x1a>
 8005852:	4b09      	ldr	r3, [pc, #36]	; (8005878 <__swbuf_r+0xa0>)
 8005854:	429c      	cmp	r4, r3
 8005856:	bf08      	it	eq
 8005858:	68ec      	ldreq	r4, [r5, #12]
 800585a:	e7ca      	b.n	80057f2 <__swbuf_r+0x1a>
 800585c:	4621      	mov	r1, r4
 800585e:	4628      	mov	r0, r5
 8005860:	f000 f80c 	bl	800587c <__swsetup_r>
 8005864:	2800      	cmp	r0, #0
 8005866:	d0cb      	beq.n	8005800 <__swbuf_r+0x28>
 8005868:	f04f 37ff 	mov.w	r7, #4294967295
 800586c:	e7ea      	b.n	8005844 <__swbuf_r+0x6c>
 800586e:	bf00      	nop
 8005870:	08007980 	.word	0x08007980
 8005874:	080079a0 	.word	0x080079a0
 8005878:	08007960 	.word	0x08007960

0800587c <__swsetup_r>:
 800587c:	4b32      	ldr	r3, [pc, #200]	; (8005948 <__swsetup_r+0xcc>)
 800587e:	b570      	push	{r4, r5, r6, lr}
 8005880:	681d      	ldr	r5, [r3, #0]
 8005882:	4606      	mov	r6, r0
 8005884:	460c      	mov	r4, r1
 8005886:	b125      	cbz	r5, 8005892 <__swsetup_r+0x16>
 8005888:	69ab      	ldr	r3, [r5, #24]
 800588a:	b913      	cbnz	r3, 8005892 <__swsetup_r+0x16>
 800588c:	4628      	mov	r0, r5
 800588e:	f000 f979 	bl	8005b84 <__sinit>
 8005892:	4b2e      	ldr	r3, [pc, #184]	; (800594c <__swsetup_r+0xd0>)
 8005894:	429c      	cmp	r4, r3
 8005896:	d10f      	bne.n	80058b8 <__swsetup_r+0x3c>
 8005898:	686c      	ldr	r4, [r5, #4]
 800589a:	89a3      	ldrh	r3, [r4, #12]
 800589c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80058a0:	0719      	lsls	r1, r3, #28
 80058a2:	d42c      	bmi.n	80058fe <__swsetup_r+0x82>
 80058a4:	06dd      	lsls	r5, r3, #27
 80058a6:	d411      	bmi.n	80058cc <__swsetup_r+0x50>
 80058a8:	2309      	movs	r3, #9
 80058aa:	6033      	str	r3, [r6, #0]
 80058ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80058b0:	f04f 30ff 	mov.w	r0, #4294967295
 80058b4:	81a3      	strh	r3, [r4, #12]
 80058b6:	e03e      	b.n	8005936 <__swsetup_r+0xba>
 80058b8:	4b25      	ldr	r3, [pc, #148]	; (8005950 <__swsetup_r+0xd4>)
 80058ba:	429c      	cmp	r4, r3
 80058bc:	d101      	bne.n	80058c2 <__swsetup_r+0x46>
 80058be:	68ac      	ldr	r4, [r5, #8]
 80058c0:	e7eb      	b.n	800589a <__swsetup_r+0x1e>
 80058c2:	4b24      	ldr	r3, [pc, #144]	; (8005954 <__swsetup_r+0xd8>)
 80058c4:	429c      	cmp	r4, r3
 80058c6:	bf08      	it	eq
 80058c8:	68ec      	ldreq	r4, [r5, #12]
 80058ca:	e7e6      	b.n	800589a <__swsetup_r+0x1e>
 80058cc:	0758      	lsls	r0, r3, #29
 80058ce:	d512      	bpl.n	80058f6 <__swsetup_r+0x7a>
 80058d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058d2:	b141      	cbz	r1, 80058e6 <__swsetup_r+0x6a>
 80058d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058d8:	4299      	cmp	r1, r3
 80058da:	d002      	beq.n	80058e2 <__swsetup_r+0x66>
 80058dc:	4630      	mov	r0, r6
 80058de:	f000 fa57 	bl	8005d90 <_free_r>
 80058e2:	2300      	movs	r3, #0
 80058e4:	6363      	str	r3, [r4, #52]	; 0x34
 80058e6:	89a3      	ldrh	r3, [r4, #12]
 80058e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80058ec:	81a3      	strh	r3, [r4, #12]
 80058ee:	2300      	movs	r3, #0
 80058f0:	6063      	str	r3, [r4, #4]
 80058f2:	6923      	ldr	r3, [r4, #16]
 80058f4:	6023      	str	r3, [r4, #0]
 80058f6:	89a3      	ldrh	r3, [r4, #12]
 80058f8:	f043 0308 	orr.w	r3, r3, #8
 80058fc:	81a3      	strh	r3, [r4, #12]
 80058fe:	6923      	ldr	r3, [r4, #16]
 8005900:	b94b      	cbnz	r3, 8005916 <__swsetup_r+0x9a>
 8005902:	89a3      	ldrh	r3, [r4, #12]
 8005904:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005908:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800590c:	d003      	beq.n	8005916 <__swsetup_r+0x9a>
 800590e:	4621      	mov	r1, r4
 8005910:	4630      	mov	r0, r6
 8005912:	f000 f9fd 	bl	8005d10 <__smakebuf_r>
 8005916:	89a0      	ldrh	r0, [r4, #12]
 8005918:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800591c:	f010 0301 	ands.w	r3, r0, #1
 8005920:	d00a      	beq.n	8005938 <__swsetup_r+0xbc>
 8005922:	2300      	movs	r3, #0
 8005924:	60a3      	str	r3, [r4, #8]
 8005926:	6963      	ldr	r3, [r4, #20]
 8005928:	425b      	negs	r3, r3
 800592a:	61a3      	str	r3, [r4, #24]
 800592c:	6923      	ldr	r3, [r4, #16]
 800592e:	b943      	cbnz	r3, 8005942 <__swsetup_r+0xc6>
 8005930:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005934:	d1ba      	bne.n	80058ac <__swsetup_r+0x30>
 8005936:	bd70      	pop	{r4, r5, r6, pc}
 8005938:	0781      	lsls	r1, r0, #30
 800593a:	bf58      	it	pl
 800593c:	6963      	ldrpl	r3, [r4, #20]
 800593e:	60a3      	str	r3, [r4, #8]
 8005940:	e7f4      	b.n	800592c <__swsetup_r+0xb0>
 8005942:	2000      	movs	r0, #0
 8005944:	e7f7      	b.n	8005936 <__swsetup_r+0xba>
 8005946:	bf00      	nop
 8005948:	20000180 	.word	0x20000180
 800594c:	08007980 	.word	0x08007980
 8005950:	080079a0 	.word	0x080079a0
 8005954:	08007960 	.word	0x08007960

08005958 <__sflush_r>:
 8005958:	898a      	ldrh	r2, [r1, #12]
 800595a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800595c:	4605      	mov	r5, r0
 800595e:	0710      	lsls	r0, r2, #28
 8005960:	460c      	mov	r4, r1
 8005962:	d457      	bmi.n	8005a14 <__sflush_r+0xbc>
 8005964:	684b      	ldr	r3, [r1, #4]
 8005966:	2b00      	cmp	r3, #0
 8005968:	dc04      	bgt.n	8005974 <__sflush_r+0x1c>
 800596a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800596c:	2b00      	cmp	r3, #0
 800596e:	dc01      	bgt.n	8005974 <__sflush_r+0x1c>
 8005970:	2000      	movs	r0, #0
 8005972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005974:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005976:	2e00      	cmp	r6, #0
 8005978:	d0fa      	beq.n	8005970 <__sflush_r+0x18>
 800597a:	2300      	movs	r3, #0
 800597c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005980:	682f      	ldr	r7, [r5, #0]
 8005982:	602b      	str	r3, [r5, #0]
 8005984:	d032      	beq.n	80059ec <__sflush_r+0x94>
 8005986:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005988:	89a3      	ldrh	r3, [r4, #12]
 800598a:	075a      	lsls	r2, r3, #29
 800598c:	d505      	bpl.n	800599a <__sflush_r+0x42>
 800598e:	6863      	ldr	r3, [r4, #4]
 8005990:	1ac0      	subs	r0, r0, r3
 8005992:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005994:	b10b      	cbz	r3, 800599a <__sflush_r+0x42>
 8005996:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005998:	1ac0      	subs	r0, r0, r3
 800599a:	2300      	movs	r3, #0
 800599c:	4602      	mov	r2, r0
 800599e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80059a0:	4628      	mov	r0, r5
 80059a2:	6a21      	ldr	r1, [r4, #32]
 80059a4:	47b0      	blx	r6
 80059a6:	1c43      	adds	r3, r0, #1
 80059a8:	89a3      	ldrh	r3, [r4, #12]
 80059aa:	d106      	bne.n	80059ba <__sflush_r+0x62>
 80059ac:	6829      	ldr	r1, [r5, #0]
 80059ae:	291d      	cmp	r1, #29
 80059b0:	d82c      	bhi.n	8005a0c <__sflush_r+0xb4>
 80059b2:	4a29      	ldr	r2, [pc, #164]	; (8005a58 <__sflush_r+0x100>)
 80059b4:	40ca      	lsrs	r2, r1
 80059b6:	07d6      	lsls	r6, r2, #31
 80059b8:	d528      	bpl.n	8005a0c <__sflush_r+0xb4>
 80059ba:	2200      	movs	r2, #0
 80059bc:	6062      	str	r2, [r4, #4]
 80059be:	6922      	ldr	r2, [r4, #16]
 80059c0:	04d9      	lsls	r1, r3, #19
 80059c2:	6022      	str	r2, [r4, #0]
 80059c4:	d504      	bpl.n	80059d0 <__sflush_r+0x78>
 80059c6:	1c42      	adds	r2, r0, #1
 80059c8:	d101      	bne.n	80059ce <__sflush_r+0x76>
 80059ca:	682b      	ldr	r3, [r5, #0]
 80059cc:	b903      	cbnz	r3, 80059d0 <__sflush_r+0x78>
 80059ce:	6560      	str	r0, [r4, #84]	; 0x54
 80059d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80059d2:	602f      	str	r7, [r5, #0]
 80059d4:	2900      	cmp	r1, #0
 80059d6:	d0cb      	beq.n	8005970 <__sflush_r+0x18>
 80059d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80059dc:	4299      	cmp	r1, r3
 80059de:	d002      	beq.n	80059e6 <__sflush_r+0x8e>
 80059e0:	4628      	mov	r0, r5
 80059e2:	f000 f9d5 	bl	8005d90 <_free_r>
 80059e6:	2000      	movs	r0, #0
 80059e8:	6360      	str	r0, [r4, #52]	; 0x34
 80059ea:	e7c2      	b.n	8005972 <__sflush_r+0x1a>
 80059ec:	6a21      	ldr	r1, [r4, #32]
 80059ee:	2301      	movs	r3, #1
 80059f0:	4628      	mov	r0, r5
 80059f2:	47b0      	blx	r6
 80059f4:	1c41      	adds	r1, r0, #1
 80059f6:	d1c7      	bne.n	8005988 <__sflush_r+0x30>
 80059f8:	682b      	ldr	r3, [r5, #0]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d0c4      	beq.n	8005988 <__sflush_r+0x30>
 80059fe:	2b1d      	cmp	r3, #29
 8005a00:	d001      	beq.n	8005a06 <__sflush_r+0xae>
 8005a02:	2b16      	cmp	r3, #22
 8005a04:	d101      	bne.n	8005a0a <__sflush_r+0xb2>
 8005a06:	602f      	str	r7, [r5, #0]
 8005a08:	e7b2      	b.n	8005970 <__sflush_r+0x18>
 8005a0a:	89a3      	ldrh	r3, [r4, #12]
 8005a0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a10:	81a3      	strh	r3, [r4, #12]
 8005a12:	e7ae      	b.n	8005972 <__sflush_r+0x1a>
 8005a14:	690f      	ldr	r7, [r1, #16]
 8005a16:	2f00      	cmp	r7, #0
 8005a18:	d0aa      	beq.n	8005970 <__sflush_r+0x18>
 8005a1a:	0793      	lsls	r3, r2, #30
 8005a1c:	bf18      	it	ne
 8005a1e:	2300      	movne	r3, #0
 8005a20:	680e      	ldr	r6, [r1, #0]
 8005a22:	bf08      	it	eq
 8005a24:	694b      	ldreq	r3, [r1, #20]
 8005a26:	1bf6      	subs	r6, r6, r7
 8005a28:	600f      	str	r7, [r1, #0]
 8005a2a:	608b      	str	r3, [r1, #8]
 8005a2c:	2e00      	cmp	r6, #0
 8005a2e:	dd9f      	ble.n	8005970 <__sflush_r+0x18>
 8005a30:	4633      	mov	r3, r6
 8005a32:	463a      	mov	r2, r7
 8005a34:	4628      	mov	r0, r5
 8005a36:	6a21      	ldr	r1, [r4, #32]
 8005a38:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005a3c:	47e0      	blx	ip
 8005a3e:	2800      	cmp	r0, #0
 8005a40:	dc06      	bgt.n	8005a50 <__sflush_r+0xf8>
 8005a42:	89a3      	ldrh	r3, [r4, #12]
 8005a44:	f04f 30ff 	mov.w	r0, #4294967295
 8005a48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a4c:	81a3      	strh	r3, [r4, #12]
 8005a4e:	e790      	b.n	8005972 <__sflush_r+0x1a>
 8005a50:	4407      	add	r7, r0
 8005a52:	1a36      	subs	r6, r6, r0
 8005a54:	e7ea      	b.n	8005a2c <__sflush_r+0xd4>
 8005a56:	bf00      	nop
 8005a58:	20400001 	.word	0x20400001

08005a5c <_fflush_r>:
 8005a5c:	b538      	push	{r3, r4, r5, lr}
 8005a5e:	690b      	ldr	r3, [r1, #16]
 8005a60:	4605      	mov	r5, r0
 8005a62:	460c      	mov	r4, r1
 8005a64:	b913      	cbnz	r3, 8005a6c <_fflush_r+0x10>
 8005a66:	2500      	movs	r5, #0
 8005a68:	4628      	mov	r0, r5
 8005a6a:	bd38      	pop	{r3, r4, r5, pc}
 8005a6c:	b118      	cbz	r0, 8005a76 <_fflush_r+0x1a>
 8005a6e:	6983      	ldr	r3, [r0, #24]
 8005a70:	b90b      	cbnz	r3, 8005a76 <_fflush_r+0x1a>
 8005a72:	f000 f887 	bl	8005b84 <__sinit>
 8005a76:	4b14      	ldr	r3, [pc, #80]	; (8005ac8 <_fflush_r+0x6c>)
 8005a78:	429c      	cmp	r4, r3
 8005a7a:	d11b      	bne.n	8005ab4 <_fflush_r+0x58>
 8005a7c:	686c      	ldr	r4, [r5, #4]
 8005a7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d0ef      	beq.n	8005a66 <_fflush_r+0xa>
 8005a86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005a88:	07d0      	lsls	r0, r2, #31
 8005a8a:	d404      	bmi.n	8005a96 <_fflush_r+0x3a>
 8005a8c:	0599      	lsls	r1, r3, #22
 8005a8e:	d402      	bmi.n	8005a96 <_fflush_r+0x3a>
 8005a90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a92:	f000 f915 	bl	8005cc0 <__retarget_lock_acquire_recursive>
 8005a96:	4628      	mov	r0, r5
 8005a98:	4621      	mov	r1, r4
 8005a9a:	f7ff ff5d 	bl	8005958 <__sflush_r>
 8005a9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005aa0:	4605      	mov	r5, r0
 8005aa2:	07da      	lsls	r2, r3, #31
 8005aa4:	d4e0      	bmi.n	8005a68 <_fflush_r+0xc>
 8005aa6:	89a3      	ldrh	r3, [r4, #12]
 8005aa8:	059b      	lsls	r3, r3, #22
 8005aaa:	d4dd      	bmi.n	8005a68 <_fflush_r+0xc>
 8005aac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005aae:	f000 f908 	bl	8005cc2 <__retarget_lock_release_recursive>
 8005ab2:	e7d9      	b.n	8005a68 <_fflush_r+0xc>
 8005ab4:	4b05      	ldr	r3, [pc, #20]	; (8005acc <_fflush_r+0x70>)
 8005ab6:	429c      	cmp	r4, r3
 8005ab8:	d101      	bne.n	8005abe <_fflush_r+0x62>
 8005aba:	68ac      	ldr	r4, [r5, #8]
 8005abc:	e7df      	b.n	8005a7e <_fflush_r+0x22>
 8005abe:	4b04      	ldr	r3, [pc, #16]	; (8005ad0 <_fflush_r+0x74>)
 8005ac0:	429c      	cmp	r4, r3
 8005ac2:	bf08      	it	eq
 8005ac4:	68ec      	ldreq	r4, [r5, #12]
 8005ac6:	e7da      	b.n	8005a7e <_fflush_r+0x22>
 8005ac8:	08007980 	.word	0x08007980
 8005acc:	080079a0 	.word	0x080079a0
 8005ad0:	08007960 	.word	0x08007960

08005ad4 <std>:
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	b510      	push	{r4, lr}
 8005ad8:	4604      	mov	r4, r0
 8005ada:	e9c0 3300 	strd	r3, r3, [r0]
 8005ade:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ae2:	6083      	str	r3, [r0, #8]
 8005ae4:	8181      	strh	r1, [r0, #12]
 8005ae6:	6643      	str	r3, [r0, #100]	; 0x64
 8005ae8:	81c2      	strh	r2, [r0, #14]
 8005aea:	6183      	str	r3, [r0, #24]
 8005aec:	4619      	mov	r1, r3
 8005aee:	2208      	movs	r2, #8
 8005af0:	305c      	adds	r0, #92	; 0x5c
 8005af2:	f7ff fdf3 	bl	80056dc <memset>
 8005af6:	4b05      	ldr	r3, [pc, #20]	; (8005b0c <std+0x38>)
 8005af8:	6224      	str	r4, [r4, #32]
 8005afa:	6263      	str	r3, [r4, #36]	; 0x24
 8005afc:	4b04      	ldr	r3, [pc, #16]	; (8005b10 <std+0x3c>)
 8005afe:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b00:	4b04      	ldr	r3, [pc, #16]	; (8005b14 <std+0x40>)
 8005b02:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b04:	4b04      	ldr	r3, [pc, #16]	; (8005b18 <std+0x44>)
 8005b06:	6323      	str	r3, [r4, #48]	; 0x30
 8005b08:	bd10      	pop	{r4, pc}
 8005b0a:	bf00      	nop
 8005b0c:	08005f69 	.word	0x08005f69
 8005b10:	08005f8b 	.word	0x08005f8b
 8005b14:	08005fc3 	.word	0x08005fc3
 8005b18:	08005fe7 	.word	0x08005fe7

08005b1c <_cleanup_r>:
 8005b1c:	4901      	ldr	r1, [pc, #4]	; (8005b24 <_cleanup_r+0x8>)
 8005b1e:	f000 b8af 	b.w	8005c80 <_fwalk_reent>
 8005b22:	bf00      	nop
 8005b24:	08005a5d 	.word	0x08005a5d

08005b28 <__sfmoreglue>:
 8005b28:	2268      	movs	r2, #104	; 0x68
 8005b2a:	b570      	push	{r4, r5, r6, lr}
 8005b2c:	1e4d      	subs	r5, r1, #1
 8005b2e:	4355      	muls	r5, r2
 8005b30:	460e      	mov	r6, r1
 8005b32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005b36:	f000 f993 	bl	8005e60 <_malloc_r>
 8005b3a:	4604      	mov	r4, r0
 8005b3c:	b140      	cbz	r0, 8005b50 <__sfmoreglue+0x28>
 8005b3e:	2100      	movs	r1, #0
 8005b40:	e9c0 1600 	strd	r1, r6, [r0]
 8005b44:	300c      	adds	r0, #12
 8005b46:	60a0      	str	r0, [r4, #8]
 8005b48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005b4c:	f7ff fdc6 	bl	80056dc <memset>
 8005b50:	4620      	mov	r0, r4
 8005b52:	bd70      	pop	{r4, r5, r6, pc}

08005b54 <__sfp_lock_acquire>:
 8005b54:	4801      	ldr	r0, [pc, #4]	; (8005b5c <__sfp_lock_acquire+0x8>)
 8005b56:	f000 b8b3 	b.w	8005cc0 <__retarget_lock_acquire_recursive>
 8005b5a:	bf00      	nop
 8005b5c:	200020f9 	.word	0x200020f9

08005b60 <__sfp_lock_release>:
 8005b60:	4801      	ldr	r0, [pc, #4]	; (8005b68 <__sfp_lock_release+0x8>)
 8005b62:	f000 b8ae 	b.w	8005cc2 <__retarget_lock_release_recursive>
 8005b66:	bf00      	nop
 8005b68:	200020f9 	.word	0x200020f9

08005b6c <__sinit_lock_acquire>:
 8005b6c:	4801      	ldr	r0, [pc, #4]	; (8005b74 <__sinit_lock_acquire+0x8>)
 8005b6e:	f000 b8a7 	b.w	8005cc0 <__retarget_lock_acquire_recursive>
 8005b72:	bf00      	nop
 8005b74:	200020fa 	.word	0x200020fa

08005b78 <__sinit_lock_release>:
 8005b78:	4801      	ldr	r0, [pc, #4]	; (8005b80 <__sinit_lock_release+0x8>)
 8005b7a:	f000 b8a2 	b.w	8005cc2 <__retarget_lock_release_recursive>
 8005b7e:	bf00      	nop
 8005b80:	200020fa 	.word	0x200020fa

08005b84 <__sinit>:
 8005b84:	b510      	push	{r4, lr}
 8005b86:	4604      	mov	r4, r0
 8005b88:	f7ff fff0 	bl	8005b6c <__sinit_lock_acquire>
 8005b8c:	69a3      	ldr	r3, [r4, #24]
 8005b8e:	b11b      	cbz	r3, 8005b98 <__sinit+0x14>
 8005b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b94:	f7ff bff0 	b.w	8005b78 <__sinit_lock_release>
 8005b98:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005b9c:	6523      	str	r3, [r4, #80]	; 0x50
 8005b9e:	4b13      	ldr	r3, [pc, #76]	; (8005bec <__sinit+0x68>)
 8005ba0:	4a13      	ldr	r2, [pc, #76]	; (8005bf0 <__sinit+0x6c>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	62a2      	str	r2, [r4, #40]	; 0x28
 8005ba6:	42a3      	cmp	r3, r4
 8005ba8:	bf08      	it	eq
 8005baa:	2301      	moveq	r3, #1
 8005bac:	4620      	mov	r0, r4
 8005bae:	bf08      	it	eq
 8005bb0:	61a3      	streq	r3, [r4, #24]
 8005bb2:	f000 f81f 	bl	8005bf4 <__sfp>
 8005bb6:	6060      	str	r0, [r4, #4]
 8005bb8:	4620      	mov	r0, r4
 8005bba:	f000 f81b 	bl	8005bf4 <__sfp>
 8005bbe:	60a0      	str	r0, [r4, #8]
 8005bc0:	4620      	mov	r0, r4
 8005bc2:	f000 f817 	bl	8005bf4 <__sfp>
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	2104      	movs	r1, #4
 8005bca:	60e0      	str	r0, [r4, #12]
 8005bcc:	6860      	ldr	r0, [r4, #4]
 8005bce:	f7ff ff81 	bl	8005ad4 <std>
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	2109      	movs	r1, #9
 8005bd6:	68a0      	ldr	r0, [r4, #8]
 8005bd8:	f7ff ff7c 	bl	8005ad4 <std>
 8005bdc:	2202      	movs	r2, #2
 8005bde:	2112      	movs	r1, #18
 8005be0:	68e0      	ldr	r0, [r4, #12]
 8005be2:	f7ff ff77 	bl	8005ad4 <std>
 8005be6:	2301      	movs	r3, #1
 8005be8:	61a3      	str	r3, [r4, #24]
 8005bea:	e7d1      	b.n	8005b90 <__sinit+0xc>
 8005bec:	0800795c 	.word	0x0800795c
 8005bf0:	08005b1d 	.word	0x08005b1d

08005bf4 <__sfp>:
 8005bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bf6:	4607      	mov	r7, r0
 8005bf8:	f7ff ffac 	bl	8005b54 <__sfp_lock_acquire>
 8005bfc:	4b1e      	ldr	r3, [pc, #120]	; (8005c78 <__sfp+0x84>)
 8005bfe:	681e      	ldr	r6, [r3, #0]
 8005c00:	69b3      	ldr	r3, [r6, #24]
 8005c02:	b913      	cbnz	r3, 8005c0a <__sfp+0x16>
 8005c04:	4630      	mov	r0, r6
 8005c06:	f7ff ffbd 	bl	8005b84 <__sinit>
 8005c0a:	3648      	adds	r6, #72	; 0x48
 8005c0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005c10:	3b01      	subs	r3, #1
 8005c12:	d503      	bpl.n	8005c1c <__sfp+0x28>
 8005c14:	6833      	ldr	r3, [r6, #0]
 8005c16:	b30b      	cbz	r3, 8005c5c <__sfp+0x68>
 8005c18:	6836      	ldr	r6, [r6, #0]
 8005c1a:	e7f7      	b.n	8005c0c <__sfp+0x18>
 8005c1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005c20:	b9d5      	cbnz	r5, 8005c58 <__sfp+0x64>
 8005c22:	4b16      	ldr	r3, [pc, #88]	; (8005c7c <__sfp+0x88>)
 8005c24:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005c28:	60e3      	str	r3, [r4, #12]
 8005c2a:	6665      	str	r5, [r4, #100]	; 0x64
 8005c2c:	f000 f847 	bl	8005cbe <__retarget_lock_init_recursive>
 8005c30:	f7ff ff96 	bl	8005b60 <__sfp_lock_release>
 8005c34:	2208      	movs	r2, #8
 8005c36:	4629      	mov	r1, r5
 8005c38:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005c3c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005c40:	6025      	str	r5, [r4, #0]
 8005c42:	61a5      	str	r5, [r4, #24]
 8005c44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005c48:	f7ff fd48 	bl	80056dc <memset>
 8005c4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005c50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005c54:	4620      	mov	r0, r4
 8005c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c58:	3468      	adds	r4, #104	; 0x68
 8005c5a:	e7d9      	b.n	8005c10 <__sfp+0x1c>
 8005c5c:	2104      	movs	r1, #4
 8005c5e:	4638      	mov	r0, r7
 8005c60:	f7ff ff62 	bl	8005b28 <__sfmoreglue>
 8005c64:	4604      	mov	r4, r0
 8005c66:	6030      	str	r0, [r6, #0]
 8005c68:	2800      	cmp	r0, #0
 8005c6a:	d1d5      	bne.n	8005c18 <__sfp+0x24>
 8005c6c:	f7ff ff78 	bl	8005b60 <__sfp_lock_release>
 8005c70:	230c      	movs	r3, #12
 8005c72:	603b      	str	r3, [r7, #0]
 8005c74:	e7ee      	b.n	8005c54 <__sfp+0x60>
 8005c76:	bf00      	nop
 8005c78:	0800795c 	.word	0x0800795c
 8005c7c:	ffff0001 	.word	0xffff0001

08005c80 <_fwalk_reent>:
 8005c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c84:	4606      	mov	r6, r0
 8005c86:	4688      	mov	r8, r1
 8005c88:	2700      	movs	r7, #0
 8005c8a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005c8e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c92:	f1b9 0901 	subs.w	r9, r9, #1
 8005c96:	d505      	bpl.n	8005ca4 <_fwalk_reent+0x24>
 8005c98:	6824      	ldr	r4, [r4, #0]
 8005c9a:	2c00      	cmp	r4, #0
 8005c9c:	d1f7      	bne.n	8005c8e <_fwalk_reent+0xe>
 8005c9e:	4638      	mov	r0, r7
 8005ca0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ca4:	89ab      	ldrh	r3, [r5, #12]
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d907      	bls.n	8005cba <_fwalk_reent+0x3a>
 8005caa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005cae:	3301      	adds	r3, #1
 8005cb0:	d003      	beq.n	8005cba <_fwalk_reent+0x3a>
 8005cb2:	4629      	mov	r1, r5
 8005cb4:	4630      	mov	r0, r6
 8005cb6:	47c0      	blx	r8
 8005cb8:	4307      	orrs	r7, r0
 8005cba:	3568      	adds	r5, #104	; 0x68
 8005cbc:	e7e9      	b.n	8005c92 <_fwalk_reent+0x12>

08005cbe <__retarget_lock_init_recursive>:
 8005cbe:	4770      	bx	lr

08005cc0 <__retarget_lock_acquire_recursive>:
 8005cc0:	4770      	bx	lr

08005cc2 <__retarget_lock_release_recursive>:
 8005cc2:	4770      	bx	lr

08005cc4 <__swhatbuf_r>:
 8005cc4:	b570      	push	{r4, r5, r6, lr}
 8005cc6:	460e      	mov	r6, r1
 8005cc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ccc:	4614      	mov	r4, r2
 8005cce:	2900      	cmp	r1, #0
 8005cd0:	461d      	mov	r5, r3
 8005cd2:	b096      	sub	sp, #88	; 0x58
 8005cd4:	da08      	bge.n	8005ce8 <__swhatbuf_r+0x24>
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005cdc:	602a      	str	r2, [r5, #0]
 8005cde:	061a      	lsls	r2, r3, #24
 8005ce0:	d410      	bmi.n	8005d04 <__swhatbuf_r+0x40>
 8005ce2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ce6:	e00e      	b.n	8005d06 <__swhatbuf_r+0x42>
 8005ce8:	466a      	mov	r2, sp
 8005cea:	f000 f9a3 	bl	8006034 <_fstat_r>
 8005cee:	2800      	cmp	r0, #0
 8005cf0:	dbf1      	blt.n	8005cd6 <__swhatbuf_r+0x12>
 8005cf2:	9a01      	ldr	r2, [sp, #4]
 8005cf4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005cf8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005cfc:	425a      	negs	r2, r3
 8005cfe:	415a      	adcs	r2, r3
 8005d00:	602a      	str	r2, [r5, #0]
 8005d02:	e7ee      	b.n	8005ce2 <__swhatbuf_r+0x1e>
 8005d04:	2340      	movs	r3, #64	; 0x40
 8005d06:	2000      	movs	r0, #0
 8005d08:	6023      	str	r3, [r4, #0]
 8005d0a:	b016      	add	sp, #88	; 0x58
 8005d0c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005d10 <__smakebuf_r>:
 8005d10:	898b      	ldrh	r3, [r1, #12]
 8005d12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005d14:	079d      	lsls	r5, r3, #30
 8005d16:	4606      	mov	r6, r0
 8005d18:	460c      	mov	r4, r1
 8005d1a:	d507      	bpl.n	8005d2c <__smakebuf_r+0x1c>
 8005d1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005d20:	6023      	str	r3, [r4, #0]
 8005d22:	6123      	str	r3, [r4, #16]
 8005d24:	2301      	movs	r3, #1
 8005d26:	6163      	str	r3, [r4, #20]
 8005d28:	b002      	add	sp, #8
 8005d2a:	bd70      	pop	{r4, r5, r6, pc}
 8005d2c:	466a      	mov	r2, sp
 8005d2e:	ab01      	add	r3, sp, #4
 8005d30:	f7ff ffc8 	bl	8005cc4 <__swhatbuf_r>
 8005d34:	9900      	ldr	r1, [sp, #0]
 8005d36:	4605      	mov	r5, r0
 8005d38:	4630      	mov	r0, r6
 8005d3a:	f000 f891 	bl	8005e60 <_malloc_r>
 8005d3e:	b948      	cbnz	r0, 8005d54 <__smakebuf_r+0x44>
 8005d40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d44:	059a      	lsls	r2, r3, #22
 8005d46:	d4ef      	bmi.n	8005d28 <__smakebuf_r+0x18>
 8005d48:	f023 0303 	bic.w	r3, r3, #3
 8005d4c:	f043 0302 	orr.w	r3, r3, #2
 8005d50:	81a3      	strh	r3, [r4, #12]
 8005d52:	e7e3      	b.n	8005d1c <__smakebuf_r+0xc>
 8005d54:	4b0d      	ldr	r3, [pc, #52]	; (8005d8c <__smakebuf_r+0x7c>)
 8005d56:	62b3      	str	r3, [r6, #40]	; 0x28
 8005d58:	89a3      	ldrh	r3, [r4, #12]
 8005d5a:	6020      	str	r0, [r4, #0]
 8005d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d60:	81a3      	strh	r3, [r4, #12]
 8005d62:	9b00      	ldr	r3, [sp, #0]
 8005d64:	6120      	str	r0, [r4, #16]
 8005d66:	6163      	str	r3, [r4, #20]
 8005d68:	9b01      	ldr	r3, [sp, #4]
 8005d6a:	b15b      	cbz	r3, 8005d84 <__smakebuf_r+0x74>
 8005d6c:	4630      	mov	r0, r6
 8005d6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d72:	f000 f971 	bl	8006058 <_isatty_r>
 8005d76:	b128      	cbz	r0, 8005d84 <__smakebuf_r+0x74>
 8005d78:	89a3      	ldrh	r3, [r4, #12]
 8005d7a:	f023 0303 	bic.w	r3, r3, #3
 8005d7e:	f043 0301 	orr.w	r3, r3, #1
 8005d82:	81a3      	strh	r3, [r4, #12]
 8005d84:	89a0      	ldrh	r0, [r4, #12]
 8005d86:	4305      	orrs	r5, r0
 8005d88:	81a5      	strh	r5, [r4, #12]
 8005d8a:	e7cd      	b.n	8005d28 <__smakebuf_r+0x18>
 8005d8c:	08005b1d 	.word	0x08005b1d

08005d90 <_free_r>:
 8005d90:	b538      	push	{r3, r4, r5, lr}
 8005d92:	4605      	mov	r5, r0
 8005d94:	2900      	cmp	r1, #0
 8005d96:	d040      	beq.n	8005e1a <_free_r+0x8a>
 8005d98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d9c:	1f0c      	subs	r4, r1, #4
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	bfb8      	it	lt
 8005da2:	18e4      	addlt	r4, r4, r3
 8005da4:	f000 f97a 	bl	800609c <__malloc_lock>
 8005da8:	4a1c      	ldr	r2, [pc, #112]	; (8005e1c <_free_r+0x8c>)
 8005daa:	6813      	ldr	r3, [r2, #0]
 8005dac:	b933      	cbnz	r3, 8005dbc <_free_r+0x2c>
 8005dae:	6063      	str	r3, [r4, #4]
 8005db0:	6014      	str	r4, [r2, #0]
 8005db2:	4628      	mov	r0, r5
 8005db4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005db8:	f000 b976 	b.w	80060a8 <__malloc_unlock>
 8005dbc:	42a3      	cmp	r3, r4
 8005dbe:	d908      	bls.n	8005dd2 <_free_r+0x42>
 8005dc0:	6820      	ldr	r0, [r4, #0]
 8005dc2:	1821      	adds	r1, r4, r0
 8005dc4:	428b      	cmp	r3, r1
 8005dc6:	bf01      	itttt	eq
 8005dc8:	6819      	ldreq	r1, [r3, #0]
 8005dca:	685b      	ldreq	r3, [r3, #4]
 8005dcc:	1809      	addeq	r1, r1, r0
 8005dce:	6021      	streq	r1, [r4, #0]
 8005dd0:	e7ed      	b.n	8005dae <_free_r+0x1e>
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	b10b      	cbz	r3, 8005ddc <_free_r+0x4c>
 8005dd8:	42a3      	cmp	r3, r4
 8005dda:	d9fa      	bls.n	8005dd2 <_free_r+0x42>
 8005ddc:	6811      	ldr	r1, [r2, #0]
 8005dde:	1850      	adds	r0, r2, r1
 8005de0:	42a0      	cmp	r0, r4
 8005de2:	d10b      	bne.n	8005dfc <_free_r+0x6c>
 8005de4:	6820      	ldr	r0, [r4, #0]
 8005de6:	4401      	add	r1, r0
 8005de8:	1850      	adds	r0, r2, r1
 8005dea:	4283      	cmp	r3, r0
 8005dec:	6011      	str	r1, [r2, #0]
 8005dee:	d1e0      	bne.n	8005db2 <_free_r+0x22>
 8005df0:	6818      	ldr	r0, [r3, #0]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	4401      	add	r1, r0
 8005df6:	6011      	str	r1, [r2, #0]
 8005df8:	6053      	str	r3, [r2, #4]
 8005dfa:	e7da      	b.n	8005db2 <_free_r+0x22>
 8005dfc:	d902      	bls.n	8005e04 <_free_r+0x74>
 8005dfe:	230c      	movs	r3, #12
 8005e00:	602b      	str	r3, [r5, #0]
 8005e02:	e7d6      	b.n	8005db2 <_free_r+0x22>
 8005e04:	6820      	ldr	r0, [r4, #0]
 8005e06:	1821      	adds	r1, r4, r0
 8005e08:	428b      	cmp	r3, r1
 8005e0a:	bf01      	itttt	eq
 8005e0c:	6819      	ldreq	r1, [r3, #0]
 8005e0e:	685b      	ldreq	r3, [r3, #4]
 8005e10:	1809      	addeq	r1, r1, r0
 8005e12:	6021      	streq	r1, [r4, #0]
 8005e14:	6063      	str	r3, [r4, #4]
 8005e16:	6054      	str	r4, [r2, #4]
 8005e18:	e7cb      	b.n	8005db2 <_free_r+0x22>
 8005e1a:	bd38      	pop	{r3, r4, r5, pc}
 8005e1c:	200020fc 	.word	0x200020fc

08005e20 <sbrk_aligned>:
 8005e20:	b570      	push	{r4, r5, r6, lr}
 8005e22:	4e0e      	ldr	r6, [pc, #56]	; (8005e5c <sbrk_aligned+0x3c>)
 8005e24:	460c      	mov	r4, r1
 8005e26:	6831      	ldr	r1, [r6, #0]
 8005e28:	4605      	mov	r5, r0
 8005e2a:	b911      	cbnz	r1, 8005e32 <sbrk_aligned+0x12>
 8005e2c:	f000 f88c 	bl	8005f48 <_sbrk_r>
 8005e30:	6030      	str	r0, [r6, #0]
 8005e32:	4621      	mov	r1, r4
 8005e34:	4628      	mov	r0, r5
 8005e36:	f000 f887 	bl	8005f48 <_sbrk_r>
 8005e3a:	1c43      	adds	r3, r0, #1
 8005e3c:	d00a      	beq.n	8005e54 <sbrk_aligned+0x34>
 8005e3e:	1cc4      	adds	r4, r0, #3
 8005e40:	f024 0403 	bic.w	r4, r4, #3
 8005e44:	42a0      	cmp	r0, r4
 8005e46:	d007      	beq.n	8005e58 <sbrk_aligned+0x38>
 8005e48:	1a21      	subs	r1, r4, r0
 8005e4a:	4628      	mov	r0, r5
 8005e4c:	f000 f87c 	bl	8005f48 <_sbrk_r>
 8005e50:	3001      	adds	r0, #1
 8005e52:	d101      	bne.n	8005e58 <sbrk_aligned+0x38>
 8005e54:	f04f 34ff 	mov.w	r4, #4294967295
 8005e58:	4620      	mov	r0, r4
 8005e5a:	bd70      	pop	{r4, r5, r6, pc}
 8005e5c:	20002100 	.word	0x20002100

08005e60 <_malloc_r>:
 8005e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e64:	1ccd      	adds	r5, r1, #3
 8005e66:	f025 0503 	bic.w	r5, r5, #3
 8005e6a:	3508      	adds	r5, #8
 8005e6c:	2d0c      	cmp	r5, #12
 8005e6e:	bf38      	it	cc
 8005e70:	250c      	movcc	r5, #12
 8005e72:	2d00      	cmp	r5, #0
 8005e74:	4607      	mov	r7, r0
 8005e76:	db01      	blt.n	8005e7c <_malloc_r+0x1c>
 8005e78:	42a9      	cmp	r1, r5
 8005e7a:	d905      	bls.n	8005e88 <_malloc_r+0x28>
 8005e7c:	230c      	movs	r3, #12
 8005e7e:	2600      	movs	r6, #0
 8005e80:	603b      	str	r3, [r7, #0]
 8005e82:	4630      	mov	r0, r6
 8005e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e88:	4e2e      	ldr	r6, [pc, #184]	; (8005f44 <_malloc_r+0xe4>)
 8005e8a:	f000 f907 	bl	800609c <__malloc_lock>
 8005e8e:	6833      	ldr	r3, [r6, #0]
 8005e90:	461c      	mov	r4, r3
 8005e92:	bb34      	cbnz	r4, 8005ee2 <_malloc_r+0x82>
 8005e94:	4629      	mov	r1, r5
 8005e96:	4638      	mov	r0, r7
 8005e98:	f7ff ffc2 	bl	8005e20 <sbrk_aligned>
 8005e9c:	1c43      	adds	r3, r0, #1
 8005e9e:	4604      	mov	r4, r0
 8005ea0:	d14d      	bne.n	8005f3e <_malloc_r+0xde>
 8005ea2:	6834      	ldr	r4, [r6, #0]
 8005ea4:	4626      	mov	r6, r4
 8005ea6:	2e00      	cmp	r6, #0
 8005ea8:	d140      	bne.n	8005f2c <_malloc_r+0xcc>
 8005eaa:	6823      	ldr	r3, [r4, #0]
 8005eac:	4631      	mov	r1, r6
 8005eae:	4638      	mov	r0, r7
 8005eb0:	eb04 0803 	add.w	r8, r4, r3
 8005eb4:	f000 f848 	bl	8005f48 <_sbrk_r>
 8005eb8:	4580      	cmp	r8, r0
 8005eba:	d13a      	bne.n	8005f32 <_malloc_r+0xd2>
 8005ebc:	6821      	ldr	r1, [r4, #0]
 8005ebe:	3503      	adds	r5, #3
 8005ec0:	1a6d      	subs	r5, r5, r1
 8005ec2:	f025 0503 	bic.w	r5, r5, #3
 8005ec6:	3508      	adds	r5, #8
 8005ec8:	2d0c      	cmp	r5, #12
 8005eca:	bf38      	it	cc
 8005ecc:	250c      	movcc	r5, #12
 8005ece:	4638      	mov	r0, r7
 8005ed0:	4629      	mov	r1, r5
 8005ed2:	f7ff ffa5 	bl	8005e20 <sbrk_aligned>
 8005ed6:	3001      	adds	r0, #1
 8005ed8:	d02b      	beq.n	8005f32 <_malloc_r+0xd2>
 8005eda:	6823      	ldr	r3, [r4, #0]
 8005edc:	442b      	add	r3, r5
 8005ede:	6023      	str	r3, [r4, #0]
 8005ee0:	e00e      	b.n	8005f00 <_malloc_r+0xa0>
 8005ee2:	6822      	ldr	r2, [r4, #0]
 8005ee4:	1b52      	subs	r2, r2, r5
 8005ee6:	d41e      	bmi.n	8005f26 <_malloc_r+0xc6>
 8005ee8:	2a0b      	cmp	r2, #11
 8005eea:	d916      	bls.n	8005f1a <_malloc_r+0xba>
 8005eec:	1961      	adds	r1, r4, r5
 8005eee:	42a3      	cmp	r3, r4
 8005ef0:	6025      	str	r5, [r4, #0]
 8005ef2:	bf18      	it	ne
 8005ef4:	6059      	strne	r1, [r3, #4]
 8005ef6:	6863      	ldr	r3, [r4, #4]
 8005ef8:	bf08      	it	eq
 8005efa:	6031      	streq	r1, [r6, #0]
 8005efc:	5162      	str	r2, [r4, r5]
 8005efe:	604b      	str	r3, [r1, #4]
 8005f00:	4638      	mov	r0, r7
 8005f02:	f104 060b 	add.w	r6, r4, #11
 8005f06:	f000 f8cf 	bl	80060a8 <__malloc_unlock>
 8005f0a:	f026 0607 	bic.w	r6, r6, #7
 8005f0e:	1d23      	adds	r3, r4, #4
 8005f10:	1af2      	subs	r2, r6, r3
 8005f12:	d0b6      	beq.n	8005e82 <_malloc_r+0x22>
 8005f14:	1b9b      	subs	r3, r3, r6
 8005f16:	50a3      	str	r3, [r4, r2]
 8005f18:	e7b3      	b.n	8005e82 <_malloc_r+0x22>
 8005f1a:	6862      	ldr	r2, [r4, #4]
 8005f1c:	42a3      	cmp	r3, r4
 8005f1e:	bf0c      	ite	eq
 8005f20:	6032      	streq	r2, [r6, #0]
 8005f22:	605a      	strne	r2, [r3, #4]
 8005f24:	e7ec      	b.n	8005f00 <_malloc_r+0xa0>
 8005f26:	4623      	mov	r3, r4
 8005f28:	6864      	ldr	r4, [r4, #4]
 8005f2a:	e7b2      	b.n	8005e92 <_malloc_r+0x32>
 8005f2c:	4634      	mov	r4, r6
 8005f2e:	6876      	ldr	r6, [r6, #4]
 8005f30:	e7b9      	b.n	8005ea6 <_malloc_r+0x46>
 8005f32:	230c      	movs	r3, #12
 8005f34:	4638      	mov	r0, r7
 8005f36:	603b      	str	r3, [r7, #0]
 8005f38:	f000 f8b6 	bl	80060a8 <__malloc_unlock>
 8005f3c:	e7a1      	b.n	8005e82 <_malloc_r+0x22>
 8005f3e:	6025      	str	r5, [r4, #0]
 8005f40:	e7de      	b.n	8005f00 <_malloc_r+0xa0>
 8005f42:	bf00      	nop
 8005f44:	200020fc 	.word	0x200020fc

08005f48 <_sbrk_r>:
 8005f48:	b538      	push	{r3, r4, r5, lr}
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	4d05      	ldr	r5, [pc, #20]	; (8005f64 <_sbrk_r+0x1c>)
 8005f4e:	4604      	mov	r4, r0
 8005f50:	4608      	mov	r0, r1
 8005f52:	602b      	str	r3, [r5, #0]
 8005f54:	f7fd fb20 	bl	8003598 <_sbrk>
 8005f58:	1c43      	adds	r3, r0, #1
 8005f5a:	d102      	bne.n	8005f62 <_sbrk_r+0x1a>
 8005f5c:	682b      	ldr	r3, [r5, #0]
 8005f5e:	b103      	cbz	r3, 8005f62 <_sbrk_r+0x1a>
 8005f60:	6023      	str	r3, [r4, #0]
 8005f62:	bd38      	pop	{r3, r4, r5, pc}
 8005f64:	20002104 	.word	0x20002104

08005f68 <__sread>:
 8005f68:	b510      	push	{r4, lr}
 8005f6a:	460c      	mov	r4, r1
 8005f6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f70:	f000 f8a0 	bl	80060b4 <_read_r>
 8005f74:	2800      	cmp	r0, #0
 8005f76:	bfab      	itete	ge
 8005f78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005f7a:	89a3      	ldrhlt	r3, [r4, #12]
 8005f7c:	181b      	addge	r3, r3, r0
 8005f7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005f82:	bfac      	ite	ge
 8005f84:	6563      	strge	r3, [r4, #84]	; 0x54
 8005f86:	81a3      	strhlt	r3, [r4, #12]
 8005f88:	bd10      	pop	{r4, pc}

08005f8a <__swrite>:
 8005f8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f8e:	461f      	mov	r7, r3
 8005f90:	898b      	ldrh	r3, [r1, #12]
 8005f92:	4605      	mov	r5, r0
 8005f94:	05db      	lsls	r3, r3, #23
 8005f96:	460c      	mov	r4, r1
 8005f98:	4616      	mov	r6, r2
 8005f9a:	d505      	bpl.n	8005fa8 <__swrite+0x1e>
 8005f9c:	2302      	movs	r3, #2
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fa4:	f000 f868 	bl	8006078 <_lseek_r>
 8005fa8:	89a3      	ldrh	r3, [r4, #12]
 8005faa:	4632      	mov	r2, r6
 8005fac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fb0:	81a3      	strh	r3, [r4, #12]
 8005fb2:	4628      	mov	r0, r5
 8005fb4:	463b      	mov	r3, r7
 8005fb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005fbe:	f000 b817 	b.w	8005ff0 <_write_r>

08005fc2 <__sseek>:
 8005fc2:	b510      	push	{r4, lr}
 8005fc4:	460c      	mov	r4, r1
 8005fc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fca:	f000 f855 	bl	8006078 <_lseek_r>
 8005fce:	1c43      	adds	r3, r0, #1
 8005fd0:	89a3      	ldrh	r3, [r4, #12]
 8005fd2:	bf15      	itete	ne
 8005fd4:	6560      	strne	r0, [r4, #84]	; 0x54
 8005fd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005fda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005fde:	81a3      	strheq	r3, [r4, #12]
 8005fe0:	bf18      	it	ne
 8005fe2:	81a3      	strhne	r3, [r4, #12]
 8005fe4:	bd10      	pop	{r4, pc}

08005fe6 <__sclose>:
 8005fe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fea:	f000 b813 	b.w	8006014 <_close_r>
	...

08005ff0 <_write_r>:
 8005ff0:	b538      	push	{r3, r4, r5, lr}
 8005ff2:	4604      	mov	r4, r0
 8005ff4:	4608      	mov	r0, r1
 8005ff6:	4611      	mov	r1, r2
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	4d05      	ldr	r5, [pc, #20]	; (8006010 <_write_r+0x20>)
 8005ffc:	602a      	str	r2, [r5, #0]
 8005ffe:	461a      	mov	r2, r3
 8006000:	f7fd fa7d 	bl	80034fe <_write>
 8006004:	1c43      	adds	r3, r0, #1
 8006006:	d102      	bne.n	800600e <_write_r+0x1e>
 8006008:	682b      	ldr	r3, [r5, #0]
 800600a:	b103      	cbz	r3, 800600e <_write_r+0x1e>
 800600c:	6023      	str	r3, [r4, #0]
 800600e:	bd38      	pop	{r3, r4, r5, pc}
 8006010:	20002104 	.word	0x20002104

08006014 <_close_r>:
 8006014:	b538      	push	{r3, r4, r5, lr}
 8006016:	2300      	movs	r3, #0
 8006018:	4d05      	ldr	r5, [pc, #20]	; (8006030 <_close_r+0x1c>)
 800601a:	4604      	mov	r4, r0
 800601c:	4608      	mov	r0, r1
 800601e:	602b      	str	r3, [r5, #0]
 8006020:	f7fd fa89 	bl	8003536 <_close>
 8006024:	1c43      	adds	r3, r0, #1
 8006026:	d102      	bne.n	800602e <_close_r+0x1a>
 8006028:	682b      	ldr	r3, [r5, #0]
 800602a:	b103      	cbz	r3, 800602e <_close_r+0x1a>
 800602c:	6023      	str	r3, [r4, #0]
 800602e:	bd38      	pop	{r3, r4, r5, pc}
 8006030:	20002104 	.word	0x20002104

08006034 <_fstat_r>:
 8006034:	b538      	push	{r3, r4, r5, lr}
 8006036:	2300      	movs	r3, #0
 8006038:	4d06      	ldr	r5, [pc, #24]	; (8006054 <_fstat_r+0x20>)
 800603a:	4604      	mov	r4, r0
 800603c:	4608      	mov	r0, r1
 800603e:	4611      	mov	r1, r2
 8006040:	602b      	str	r3, [r5, #0]
 8006042:	f7fd fa83 	bl	800354c <_fstat>
 8006046:	1c43      	adds	r3, r0, #1
 8006048:	d102      	bne.n	8006050 <_fstat_r+0x1c>
 800604a:	682b      	ldr	r3, [r5, #0]
 800604c:	b103      	cbz	r3, 8006050 <_fstat_r+0x1c>
 800604e:	6023      	str	r3, [r4, #0]
 8006050:	bd38      	pop	{r3, r4, r5, pc}
 8006052:	bf00      	nop
 8006054:	20002104 	.word	0x20002104

08006058 <_isatty_r>:
 8006058:	b538      	push	{r3, r4, r5, lr}
 800605a:	2300      	movs	r3, #0
 800605c:	4d05      	ldr	r5, [pc, #20]	; (8006074 <_isatty_r+0x1c>)
 800605e:	4604      	mov	r4, r0
 8006060:	4608      	mov	r0, r1
 8006062:	602b      	str	r3, [r5, #0]
 8006064:	f7fd fa81 	bl	800356a <_isatty>
 8006068:	1c43      	adds	r3, r0, #1
 800606a:	d102      	bne.n	8006072 <_isatty_r+0x1a>
 800606c:	682b      	ldr	r3, [r5, #0]
 800606e:	b103      	cbz	r3, 8006072 <_isatty_r+0x1a>
 8006070:	6023      	str	r3, [r4, #0]
 8006072:	bd38      	pop	{r3, r4, r5, pc}
 8006074:	20002104 	.word	0x20002104

08006078 <_lseek_r>:
 8006078:	b538      	push	{r3, r4, r5, lr}
 800607a:	4604      	mov	r4, r0
 800607c:	4608      	mov	r0, r1
 800607e:	4611      	mov	r1, r2
 8006080:	2200      	movs	r2, #0
 8006082:	4d05      	ldr	r5, [pc, #20]	; (8006098 <_lseek_r+0x20>)
 8006084:	602a      	str	r2, [r5, #0]
 8006086:	461a      	mov	r2, r3
 8006088:	f7fd fa79 	bl	800357e <_lseek>
 800608c:	1c43      	adds	r3, r0, #1
 800608e:	d102      	bne.n	8006096 <_lseek_r+0x1e>
 8006090:	682b      	ldr	r3, [r5, #0]
 8006092:	b103      	cbz	r3, 8006096 <_lseek_r+0x1e>
 8006094:	6023      	str	r3, [r4, #0]
 8006096:	bd38      	pop	{r3, r4, r5, pc}
 8006098:	20002104 	.word	0x20002104

0800609c <__malloc_lock>:
 800609c:	4801      	ldr	r0, [pc, #4]	; (80060a4 <__malloc_lock+0x8>)
 800609e:	f7ff be0f 	b.w	8005cc0 <__retarget_lock_acquire_recursive>
 80060a2:	bf00      	nop
 80060a4:	200020f8 	.word	0x200020f8

080060a8 <__malloc_unlock>:
 80060a8:	4801      	ldr	r0, [pc, #4]	; (80060b0 <__malloc_unlock+0x8>)
 80060aa:	f7ff be0a 	b.w	8005cc2 <__retarget_lock_release_recursive>
 80060ae:	bf00      	nop
 80060b0:	200020f8 	.word	0x200020f8

080060b4 <_read_r>:
 80060b4:	b538      	push	{r3, r4, r5, lr}
 80060b6:	4604      	mov	r4, r0
 80060b8:	4608      	mov	r0, r1
 80060ba:	4611      	mov	r1, r2
 80060bc:	2200      	movs	r2, #0
 80060be:	4d05      	ldr	r5, [pc, #20]	; (80060d4 <_read_r+0x20>)
 80060c0:	602a      	str	r2, [r5, #0]
 80060c2:	461a      	mov	r2, r3
 80060c4:	f7fd f9fe 	bl	80034c4 <_read>
 80060c8:	1c43      	adds	r3, r0, #1
 80060ca:	d102      	bne.n	80060d2 <_read_r+0x1e>
 80060cc:	682b      	ldr	r3, [r5, #0]
 80060ce:	b103      	cbz	r3, 80060d2 <_read_r+0x1e>
 80060d0:	6023      	str	r3, [r4, #0]
 80060d2:	bd38      	pop	{r3, r4, r5, pc}
 80060d4:	20002104 	.word	0x20002104

080060d8 <pow>:
 80060d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060dc:	4614      	mov	r4, r2
 80060de:	461d      	mov	r5, r3
 80060e0:	4680      	mov	r8, r0
 80060e2:	4689      	mov	r9, r1
 80060e4:	f000 f884 	bl	80061f0 <__ieee754_pow>
 80060e8:	4622      	mov	r2, r4
 80060ea:	4606      	mov	r6, r0
 80060ec:	460f      	mov	r7, r1
 80060ee:	462b      	mov	r3, r5
 80060f0:	4620      	mov	r0, r4
 80060f2:	4629      	mov	r1, r5
 80060f4:	f7fa fcee 	bl	8000ad4 <__aeabi_dcmpun>
 80060f8:	bbc8      	cbnz	r0, 800616e <pow+0x96>
 80060fa:	2200      	movs	r2, #0
 80060fc:	2300      	movs	r3, #0
 80060fe:	4640      	mov	r0, r8
 8006100:	4649      	mov	r1, r9
 8006102:	f7fa fcb5 	bl	8000a70 <__aeabi_dcmpeq>
 8006106:	b1b8      	cbz	r0, 8006138 <pow+0x60>
 8006108:	2200      	movs	r2, #0
 800610a:	2300      	movs	r3, #0
 800610c:	4620      	mov	r0, r4
 800610e:	4629      	mov	r1, r5
 8006110:	f7fa fcae 	bl	8000a70 <__aeabi_dcmpeq>
 8006114:	2800      	cmp	r0, #0
 8006116:	d141      	bne.n	800619c <pow+0xc4>
 8006118:	4620      	mov	r0, r4
 800611a:	4629      	mov	r1, r5
 800611c:	f000 fe5d 	bl	8006dda <finite>
 8006120:	b328      	cbz	r0, 800616e <pow+0x96>
 8006122:	2200      	movs	r2, #0
 8006124:	2300      	movs	r3, #0
 8006126:	4620      	mov	r0, r4
 8006128:	4629      	mov	r1, r5
 800612a:	f7fa fcab 	bl	8000a84 <__aeabi_dcmplt>
 800612e:	b1f0      	cbz	r0, 800616e <pow+0x96>
 8006130:	f7ff faaa 	bl	8005688 <__errno>
 8006134:	2322      	movs	r3, #34	; 0x22
 8006136:	e019      	b.n	800616c <pow+0x94>
 8006138:	4630      	mov	r0, r6
 800613a:	4639      	mov	r1, r7
 800613c:	f000 fe4d 	bl	8006dda <finite>
 8006140:	b9c8      	cbnz	r0, 8006176 <pow+0x9e>
 8006142:	4640      	mov	r0, r8
 8006144:	4649      	mov	r1, r9
 8006146:	f000 fe48 	bl	8006dda <finite>
 800614a:	b1a0      	cbz	r0, 8006176 <pow+0x9e>
 800614c:	4620      	mov	r0, r4
 800614e:	4629      	mov	r1, r5
 8006150:	f000 fe43 	bl	8006dda <finite>
 8006154:	b178      	cbz	r0, 8006176 <pow+0x9e>
 8006156:	4632      	mov	r2, r6
 8006158:	463b      	mov	r3, r7
 800615a:	4630      	mov	r0, r6
 800615c:	4639      	mov	r1, r7
 800615e:	f7fa fcb9 	bl	8000ad4 <__aeabi_dcmpun>
 8006162:	2800      	cmp	r0, #0
 8006164:	d0e4      	beq.n	8006130 <pow+0x58>
 8006166:	f7ff fa8f 	bl	8005688 <__errno>
 800616a:	2321      	movs	r3, #33	; 0x21
 800616c:	6003      	str	r3, [r0, #0]
 800616e:	4630      	mov	r0, r6
 8006170:	4639      	mov	r1, r7
 8006172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006176:	2200      	movs	r2, #0
 8006178:	2300      	movs	r3, #0
 800617a:	4630      	mov	r0, r6
 800617c:	4639      	mov	r1, r7
 800617e:	f7fa fc77 	bl	8000a70 <__aeabi_dcmpeq>
 8006182:	2800      	cmp	r0, #0
 8006184:	d0f3      	beq.n	800616e <pow+0x96>
 8006186:	4640      	mov	r0, r8
 8006188:	4649      	mov	r1, r9
 800618a:	f000 fe26 	bl	8006dda <finite>
 800618e:	2800      	cmp	r0, #0
 8006190:	d0ed      	beq.n	800616e <pow+0x96>
 8006192:	4620      	mov	r0, r4
 8006194:	4629      	mov	r1, r5
 8006196:	f000 fe20 	bl	8006dda <finite>
 800619a:	e7c8      	b.n	800612e <pow+0x56>
 800619c:	2600      	movs	r6, #0
 800619e:	4f01      	ldr	r7, [pc, #4]	; (80061a4 <pow+0xcc>)
 80061a0:	e7e5      	b.n	800616e <pow+0x96>
 80061a2:	bf00      	nop
 80061a4:	3ff00000 	.word	0x3ff00000

080061a8 <sqrt>:
 80061a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061aa:	4606      	mov	r6, r0
 80061ac:	460f      	mov	r7, r1
 80061ae:	f000 fd35 	bl	8006c1c <__ieee754_sqrt>
 80061b2:	4632      	mov	r2, r6
 80061b4:	4604      	mov	r4, r0
 80061b6:	460d      	mov	r5, r1
 80061b8:	463b      	mov	r3, r7
 80061ba:	4630      	mov	r0, r6
 80061bc:	4639      	mov	r1, r7
 80061be:	f7fa fc89 	bl	8000ad4 <__aeabi_dcmpun>
 80061c2:	b990      	cbnz	r0, 80061ea <sqrt+0x42>
 80061c4:	2200      	movs	r2, #0
 80061c6:	2300      	movs	r3, #0
 80061c8:	4630      	mov	r0, r6
 80061ca:	4639      	mov	r1, r7
 80061cc:	f7fa fc5a 	bl	8000a84 <__aeabi_dcmplt>
 80061d0:	b158      	cbz	r0, 80061ea <sqrt+0x42>
 80061d2:	f7ff fa59 	bl	8005688 <__errno>
 80061d6:	2321      	movs	r3, #33	; 0x21
 80061d8:	2200      	movs	r2, #0
 80061da:	6003      	str	r3, [r0, #0]
 80061dc:	2300      	movs	r3, #0
 80061de:	4610      	mov	r0, r2
 80061e0:	4619      	mov	r1, r3
 80061e2:	f7fa fb07 	bl	80007f4 <__aeabi_ddiv>
 80061e6:	4604      	mov	r4, r0
 80061e8:	460d      	mov	r5, r1
 80061ea:	4620      	mov	r0, r4
 80061ec:	4629      	mov	r1, r5
 80061ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080061f0 <__ieee754_pow>:
 80061f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061f4:	b093      	sub	sp, #76	; 0x4c
 80061f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80061fa:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 80061fe:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8006202:	4689      	mov	r9, r1
 8006204:	ea56 0102 	orrs.w	r1, r6, r2
 8006208:	4680      	mov	r8, r0
 800620a:	d111      	bne.n	8006230 <__ieee754_pow+0x40>
 800620c:	1803      	adds	r3, r0, r0
 800620e:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8006212:	4152      	adcs	r2, r2
 8006214:	4299      	cmp	r1, r3
 8006216:	4b82      	ldr	r3, [pc, #520]	; (8006420 <__ieee754_pow+0x230>)
 8006218:	4193      	sbcs	r3, r2
 800621a:	f080 84b9 	bcs.w	8006b90 <__ieee754_pow+0x9a0>
 800621e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006222:	4640      	mov	r0, r8
 8006224:	4649      	mov	r1, r9
 8006226:	f7fa f805 	bl	8000234 <__adddf3>
 800622a:	4683      	mov	fp, r0
 800622c:	468c      	mov	ip, r1
 800622e:	e06f      	b.n	8006310 <__ieee754_pow+0x120>
 8006230:	4b7c      	ldr	r3, [pc, #496]	; (8006424 <__ieee754_pow+0x234>)
 8006232:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8006236:	429c      	cmp	r4, r3
 8006238:	464d      	mov	r5, r9
 800623a:	4682      	mov	sl, r0
 800623c:	dc06      	bgt.n	800624c <__ieee754_pow+0x5c>
 800623e:	d101      	bne.n	8006244 <__ieee754_pow+0x54>
 8006240:	2800      	cmp	r0, #0
 8006242:	d1ec      	bne.n	800621e <__ieee754_pow+0x2e>
 8006244:	429e      	cmp	r6, r3
 8006246:	dc01      	bgt.n	800624c <__ieee754_pow+0x5c>
 8006248:	d10f      	bne.n	800626a <__ieee754_pow+0x7a>
 800624a:	b172      	cbz	r2, 800626a <__ieee754_pow+0x7a>
 800624c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8006250:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8006254:	ea55 050a 	orrs.w	r5, r5, sl
 8006258:	d1e1      	bne.n	800621e <__ieee754_pow+0x2e>
 800625a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800625e:	18db      	adds	r3, r3, r3
 8006260:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8006264:	4152      	adcs	r2, r2
 8006266:	429d      	cmp	r5, r3
 8006268:	e7d5      	b.n	8006216 <__ieee754_pow+0x26>
 800626a:	2d00      	cmp	r5, #0
 800626c:	da39      	bge.n	80062e2 <__ieee754_pow+0xf2>
 800626e:	4b6e      	ldr	r3, [pc, #440]	; (8006428 <__ieee754_pow+0x238>)
 8006270:	429e      	cmp	r6, r3
 8006272:	dc52      	bgt.n	800631a <__ieee754_pow+0x12a>
 8006274:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8006278:	429e      	cmp	r6, r3
 800627a:	f340 849c 	ble.w	8006bb6 <__ieee754_pow+0x9c6>
 800627e:	1533      	asrs	r3, r6, #20
 8006280:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006284:	2b14      	cmp	r3, #20
 8006286:	dd0f      	ble.n	80062a8 <__ieee754_pow+0xb8>
 8006288:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800628c:	fa22 f103 	lsr.w	r1, r2, r3
 8006290:	fa01 f303 	lsl.w	r3, r1, r3
 8006294:	4293      	cmp	r3, r2
 8006296:	f040 848e 	bne.w	8006bb6 <__ieee754_pow+0x9c6>
 800629a:	f001 0101 	and.w	r1, r1, #1
 800629e:	f1c1 0302 	rsb	r3, r1, #2
 80062a2:	9300      	str	r3, [sp, #0]
 80062a4:	b182      	cbz	r2, 80062c8 <__ieee754_pow+0xd8>
 80062a6:	e05d      	b.n	8006364 <__ieee754_pow+0x174>
 80062a8:	2a00      	cmp	r2, #0
 80062aa:	d159      	bne.n	8006360 <__ieee754_pow+0x170>
 80062ac:	f1c3 0314 	rsb	r3, r3, #20
 80062b0:	fa46 f103 	asr.w	r1, r6, r3
 80062b4:	fa01 f303 	lsl.w	r3, r1, r3
 80062b8:	42b3      	cmp	r3, r6
 80062ba:	f040 8479 	bne.w	8006bb0 <__ieee754_pow+0x9c0>
 80062be:	f001 0101 	and.w	r1, r1, #1
 80062c2:	f1c1 0302 	rsb	r3, r1, #2
 80062c6:	9300      	str	r3, [sp, #0]
 80062c8:	4b58      	ldr	r3, [pc, #352]	; (800642c <__ieee754_pow+0x23c>)
 80062ca:	429e      	cmp	r6, r3
 80062cc:	d132      	bne.n	8006334 <__ieee754_pow+0x144>
 80062ce:	2f00      	cmp	r7, #0
 80062d0:	f280 846a 	bge.w	8006ba8 <__ieee754_pow+0x9b8>
 80062d4:	4642      	mov	r2, r8
 80062d6:	464b      	mov	r3, r9
 80062d8:	2000      	movs	r0, #0
 80062da:	4954      	ldr	r1, [pc, #336]	; (800642c <__ieee754_pow+0x23c>)
 80062dc:	f7fa fa8a 	bl	80007f4 <__aeabi_ddiv>
 80062e0:	e7a3      	b.n	800622a <__ieee754_pow+0x3a>
 80062e2:	2300      	movs	r3, #0
 80062e4:	9300      	str	r3, [sp, #0]
 80062e6:	2a00      	cmp	r2, #0
 80062e8:	d13c      	bne.n	8006364 <__ieee754_pow+0x174>
 80062ea:	4b4e      	ldr	r3, [pc, #312]	; (8006424 <__ieee754_pow+0x234>)
 80062ec:	429e      	cmp	r6, r3
 80062ee:	d1eb      	bne.n	80062c8 <__ieee754_pow+0xd8>
 80062f0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80062f4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80062f8:	ea53 030a 	orrs.w	r3, r3, sl
 80062fc:	f000 8448 	beq.w	8006b90 <__ieee754_pow+0x9a0>
 8006300:	4b4b      	ldr	r3, [pc, #300]	; (8006430 <__ieee754_pow+0x240>)
 8006302:	429c      	cmp	r4, r3
 8006304:	dd0b      	ble.n	800631e <__ieee754_pow+0x12e>
 8006306:	2f00      	cmp	r7, #0
 8006308:	f2c0 8448 	blt.w	8006b9c <__ieee754_pow+0x9ac>
 800630c:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8006310:	4658      	mov	r0, fp
 8006312:	4661      	mov	r1, ip
 8006314:	b013      	add	sp, #76	; 0x4c
 8006316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800631a:	2302      	movs	r3, #2
 800631c:	e7e2      	b.n	80062e4 <__ieee754_pow+0xf4>
 800631e:	2f00      	cmp	r7, #0
 8006320:	f04f 0b00 	mov.w	fp, #0
 8006324:	f04f 0c00 	mov.w	ip, #0
 8006328:	daf2      	bge.n	8006310 <__ieee754_pow+0x120>
 800632a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800632e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8006332:	e7ed      	b.n	8006310 <__ieee754_pow+0x120>
 8006334:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8006338:	d106      	bne.n	8006348 <__ieee754_pow+0x158>
 800633a:	4642      	mov	r2, r8
 800633c:	464b      	mov	r3, r9
 800633e:	4640      	mov	r0, r8
 8006340:	4649      	mov	r1, r9
 8006342:	f7fa f92d 	bl	80005a0 <__aeabi_dmul>
 8006346:	e770      	b.n	800622a <__ieee754_pow+0x3a>
 8006348:	4b3a      	ldr	r3, [pc, #232]	; (8006434 <__ieee754_pow+0x244>)
 800634a:	429f      	cmp	r7, r3
 800634c:	d10a      	bne.n	8006364 <__ieee754_pow+0x174>
 800634e:	2d00      	cmp	r5, #0
 8006350:	db08      	blt.n	8006364 <__ieee754_pow+0x174>
 8006352:	4640      	mov	r0, r8
 8006354:	4649      	mov	r1, r9
 8006356:	b013      	add	sp, #76	; 0x4c
 8006358:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800635c:	f000 bc5e 	b.w	8006c1c <__ieee754_sqrt>
 8006360:	2300      	movs	r3, #0
 8006362:	9300      	str	r3, [sp, #0]
 8006364:	4640      	mov	r0, r8
 8006366:	4649      	mov	r1, r9
 8006368:	f000 fd34 	bl	8006dd4 <fabs>
 800636c:	4683      	mov	fp, r0
 800636e:	468c      	mov	ip, r1
 8006370:	f1ba 0f00 	cmp.w	sl, #0
 8006374:	d128      	bne.n	80063c8 <__ieee754_pow+0x1d8>
 8006376:	b124      	cbz	r4, 8006382 <__ieee754_pow+0x192>
 8006378:	4b2c      	ldr	r3, [pc, #176]	; (800642c <__ieee754_pow+0x23c>)
 800637a:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800637e:	429a      	cmp	r2, r3
 8006380:	d122      	bne.n	80063c8 <__ieee754_pow+0x1d8>
 8006382:	2f00      	cmp	r7, #0
 8006384:	da07      	bge.n	8006396 <__ieee754_pow+0x1a6>
 8006386:	465a      	mov	r2, fp
 8006388:	4663      	mov	r3, ip
 800638a:	2000      	movs	r0, #0
 800638c:	4927      	ldr	r1, [pc, #156]	; (800642c <__ieee754_pow+0x23c>)
 800638e:	f7fa fa31 	bl	80007f4 <__aeabi_ddiv>
 8006392:	4683      	mov	fp, r0
 8006394:	468c      	mov	ip, r1
 8006396:	2d00      	cmp	r5, #0
 8006398:	daba      	bge.n	8006310 <__ieee754_pow+0x120>
 800639a:	9b00      	ldr	r3, [sp, #0]
 800639c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80063a0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80063a4:	4323      	orrs	r3, r4
 80063a6:	d108      	bne.n	80063ba <__ieee754_pow+0x1ca>
 80063a8:	465a      	mov	r2, fp
 80063aa:	4663      	mov	r3, ip
 80063ac:	4658      	mov	r0, fp
 80063ae:	4661      	mov	r1, ip
 80063b0:	f7f9 ff3e 	bl	8000230 <__aeabi_dsub>
 80063b4:	4602      	mov	r2, r0
 80063b6:	460b      	mov	r3, r1
 80063b8:	e790      	b.n	80062dc <__ieee754_pow+0xec>
 80063ba:	9b00      	ldr	r3, [sp, #0]
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d1a7      	bne.n	8006310 <__ieee754_pow+0x120>
 80063c0:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 80063c4:	469c      	mov	ip, r3
 80063c6:	e7a3      	b.n	8006310 <__ieee754_pow+0x120>
 80063c8:	0feb      	lsrs	r3, r5, #31
 80063ca:	3b01      	subs	r3, #1
 80063cc:	930c      	str	r3, [sp, #48]	; 0x30
 80063ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80063d0:	9b00      	ldr	r3, [sp, #0]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	d104      	bne.n	80063e0 <__ieee754_pow+0x1f0>
 80063d6:	4642      	mov	r2, r8
 80063d8:	464b      	mov	r3, r9
 80063da:	4640      	mov	r0, r8
 80063dc:	4649      	mov	r1, r9
 80063de:	e7e7      	b.n	80063b0 <__ieee754_pow+0x1c0>
 80063e0:	4b15      	ldr	r3, [pc, #84]	; (8006438 <__ieee754_pow+0x248>)
 80063e2:	429e      	cmp	r6, r3
 80063e4:	f340 80f6 	ble.w	80065d4 <__ieee754_pow+0x3e4>
 80063e8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80063ec:	429e      	cmp	r6, r3
 80063ee:	4b10      	ldr	r3, [pc, #64]	; (8006430 <__ieee754_pow+0x240>)
 80063f0:	dd09      	ble.n	8006406 <__ieee754_pow+0x216>
 80063f2:	429c      	cmp	r4, r3
 80063f4:	dc0c      	bgt.n	8006410 <__ieee754_pow+0x220>
 80063f6:	2f00      	cmp	r7, #0
 80063f8:	da0c      	bge.n	8006414 <__ieee754_pow+0x224>
 80063fa:	2000      	movs	r0, #0
 80063fc:	b013      	add	sp, #76	; 0x4c
 80063fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006402:	f000 bce2 	b.w	8006dca <__math_oflow>
 8006406:	429c      	cmp	r4, r3
 8006408:	dbf5      	blt.n	80063f6 <__ieee754_pow+0x206>
 800640a:	4b08      	ldr	r3, [pc, #32]	; (800642c <__ieee754_pow+0x23c>)
 800640c:	429c      	cmp	r4, r3
 800640e:	dd15      	ble.n	800643c <__ieee754_pow+0x24c>
 8006410:	2f00      	cmp	r7, #0
 8006412:	dcf2      	bgt.n	80063fa <__ieee754_pow+0x20a>
 8006414:	2000      	movs	r0, #0
 8006416:	b013      	add	sp, #76	; 0x4c
 8006418:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800641c:	f000 bcd0 	b.w	8006dc0 <__math_uflow>
 8006420:	fff00000 	.word	0xfff00000
 8006424:	7ff00000 	.word	0x7ff00000
 8006428:	433fffff 	.word	0x433fffff
 800642c:	3ff00000 	.word	0x3ff00000
 8006430:	3fefffff 	.word	0x3fefffff
 8006434:	3fe00000 	.word	0x3fe00000
 8006438:	41e00000 	.word	0x41e00000
 800643c:	4661      	mov	r1, ip
 800643e:	2200      	movs	r2, #0
 8006440:	4658      	mov	r0, fp
 8006442:	4b5f      	ldr	r3, [pc, #380]	; (80065c0 <__ieee754_pow+0x3d0>)
 8006444:	f7f9 fef4 	bl	8000230 <__aeabi_dsub>
 8006448:	a355      	add	r3, pc, #340	; (adr r3, 80065a0 <__ieee754_pow+0x3b0>)
 800644a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644e:	4604      	mov	r4, r0
 8006450:	460d      	mov	r5, r1
 8006452:	f7fa f8a5 	bl	80005a0 <__aeabi_dmul>
 8006456:	a354      	add	r3, pc, #336	; (adr r3, 80065a8 <__ieee754_pow+0x3b8>)
 8006458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800645c:	4606      	mov	r6, r0
 800645e:	460f      	mov	r7, r1
 8006460:	4620      	mov	r0, r4
 8006462:	4629      	mov	r1, r5
 8006464:	f7fa f89c 	bl	80005a0 <__aeabi_dmul>
 8006468:	2200      	movs	r2, #0
 800646a:	4682      	mov	sl, r0
 800646c:	468b      	mov	fp, r1
 800646e:	4620      	mov	r0, r4
 8006470:	4629      	mov	r1, r5
 8006472:	4b54      	ldr	r3, [pc, #336]	; (80065c4 <__ieee754_pow+0x3d4>)
 8006474:	f7fa f894 	bl	80005a0 <__aeabi_dmul>
 8006478:	4602      	mov	r2, r0
 800647a:	460b      	mov	r3, r1
 800647c:	a14c      	add	r1, pc, #304	; (adr r1, 80065b0 <__ieee754_pow+0x3c0>)
 800647e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006482:	f7f9 fed5 	bl	8000230 <__aeabi_dsub>
 8006486:	4622      	mov	r2, r4
 8006488:	462b      	mov	r3, r5
 800648a:	f7fa f889 	bl	80005a0 <__aeabi_dmul>
 800648e:	4602      	mov	r2, r0
 8006490:	460b      	mov	r3, r1
 8006492:	2000      	movs	r0, #0
 8006494:	494c      	ldr	r1, [pc, #304]	; (80065c8 <__ieee754_pow+0x3d8>)
 8006496:	f7f9 fecb 	bl	8000230 <__aeabi_dsub>
 800649a:	4622      	mov	r2, r4
 800649c:	462b      	mov	r3, r5
 800649e:	4680      	mov	r8, r0
 80064a0:	4689      	mov	r9, r1
 80064a2:	4620      	mov	r0, r4
 80064a4:	4629      	mov	r1, r5
 80064a6:	f7fa f87b 	bl	80005a0 <__aeabi_dmul>
 80064aa:	4602      	mov	r2, r0
 80064ac:	460b      	mov	r3, r1
 80064ae:	4640      	mov	r0, r8
 80064b0:	4649      	mov	r1, r9
 80064b2:	f7fa f875 	bl	80005a0 <__aeabi_dmul>
 80064b6:	a340      	add	r3, pc, #256	; (adr r3, 80065b8 <__ieee754_pow+0x3c8>)
 80064b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064bc:	f7fa f870 	bl	80005a0 <__aeabi_dmul>
 80064c0:	4602      	mov	r2, r0
 80064c2:	460b      	mov	r3, r1
 80064c4:	4650      	mov	r0, sl
 80064c6:	4659      	mov	r1, fp
 80064c8:	f7f9 feb2 	bl	8000230 <__aeabi_dsub>
 80064cc:	f04f 0a00 	mov.w	sl, #0
 80064d0:	4602      	mov	r2, r0
 80064d2:	460b      	mov	r3, r1
 80064d4:	4604      	mov	r4, r0
 80064d6:	460d      	mov	r5, r1
 80064d8:	4630      	mov	r0, r6
 80064da:	4639      	mov	r1, r7
 80064dc:	f7f9 feaa 	bl	8000234 <__adddf3>
 80064e0:	4632      	mov	r2, r6
 80064e2:	463b      	mov	r3, r7
 80064e4:	4650      	mov	r0, sl
 80064e6:	468b      	mov	fp, r1
 80064e8:	f7f9 fea2 	bl	8000230 <__aeabi_dsub>
 80064ec:	4602      	mov	r2, r0
 80064ee:	460b      	mov	r3, r1
 80064f0:	4620      	mov	r0, r4
 80064f2:	4629      	mov	r1, r5
 80064f4:	f7f9 fe9c 	bl	8000230 <__aeabi_dsub>
 80064f8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80064fc:	9b00      	ldr	r3, [sp, #0]
 80064fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006500:	3b01      	subs	r3, #1
 8006502:	4313      	orrs	r3, r2
 8006504:	f04f 0600 	mov.w	r6, #0
 8006508:	f04f 0200 	mov.w	r2, #0
 800650c:	bf0c      	ite	eq
 800650e:	4b2f      	ldreq	r3, [pc, #188]	; (80065cc <__ieee754_pow+0x3dc>)
 8006510:	4b2b      	ldrne	r3, [pc, #172]	; (80065c0 <__ieee754_pow+0x3d0>)
 8006512:	4604      	mov	r4, r0
 8006514:	460d      	mov	r5, r1
 8006516:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800651a:	e9cd 2300 	strd	r2, r3, [sp]
 800651e:	4632      	mov	r2, r6
 8006520:	463b      	mov	r3, r7
 8006522:	f7f9 fe85 	bl	8000230 <__aeabi_dsub>
 8006526:	4652      	mov	r2, sl
 8006528:	465b      	mov	r3, fp
 800652a:	f7fa f839 	bl	80005a0 <__aeabi_dmul>
 800652e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006532:	4680      	mov	r8, r0
 8006534:	4689      	mov	r9, r1
 8006536:	4620      	mov	r0, r4
 8006538:	4629      	mov	r1, r5
 800653a:	f7fa f831 	bl	80005a0 <__aeabi_dmul>
 800653e:	4602      	mov	r2, r0
 8006540:	460b      	mov	r3, r1
 8006542:	4640      	mov	r0, r8
 8006544:	4649      	mov	r1, r9
 8006546:	f7f9 fe75 	bl	8000234 <__adddf3>
 800654a:	4632      	mov	r2, r6
 800654c:	463b      	mov	r3, r7
 800654e:	4680      	mov	r8, r0
 8006550:	4689      	mov	r9, r1
 8006552:	4650      	mov	r0, sl
 8006554:	4659      	mov	r1, fp
 8006556:	f7fa f823 	bl	80005a0 <__aeabi_dmul>
 800655a:	4604      	mov	r4, r0
 800655c:	460d      	mov	r5, r1
 800655e:	460b      	mov	r3, r1
 8006560:	4602      	mov	r2, r0
 8006562:	4649      	mov	r1, r9
 8006564:	4640      	mov	r0, r8
 8006566:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800656a:	f7f9 fe63 	bl	8000234 <__adddf3>
 800656e:	4b18      	ldr	r3, [pc, #96]	; (80065d0 <__ieee754_pow+0x3e0>)
 8006570:	4682      	mov	sl, r0
 8006572:	4299      	cmp	r1, r3
 8006574:	460f      	mov	r7, r1
 8006576:	460e      	mov	r6, r1
 8006578:	f340 82e5 	ble.w	8006b46 <__ieee754_pow+0x956>
 800657c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006580:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006584:	4303      	orrs	r3, r0
 8006586:	f000 81df 	beq.w	8006948 <__ieee754_pow+0x758>
 800658a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800658e:	2200      	movs	r2, #0
 8006590:	2300      	movs	r3, #0
 8006592:	f7fa fa77 	bl	8000a84 <__aeabi_dcmplt>
 8006596:	3800      	subs	r0, #0
 8006598:	bf18      	it	ne
 800659a:	2001      	movne	r0, #1
 800659c:	e72e      	b.n	80063fc <__ieee754_pow+0x20c>
 800659e:	bf00      	nop
 80065a0:	60000000 	.word	0x60000000
 80065a4:	3ff71547 	.word	0x3ff71547
 80065a8:	f85ddf44 	.word	0xf85ddf44
 80065ac:	3e54ae0b 	.word	0x3e54ae0b
 80065b0:	55555555 	.word	0x55555555
 80065b4:	3fd55555 	.word	0x3fd55555
 80065b8:	652b82fe 	.word	0x652b82fe
 80065bc:	3ff71547 	.word	0x3ff71547
 80065c0:	3ff00000 	.word	0x3ff00000
 80065c4:	3fd00000 	.word	0x3fd00000
 80065c8:	3fe00000 	.word	0x3fe00000
 80065cc:	bff00000 	.word	0xbff00000
 80065d0:	408fffff 	.word	0x408fffff
 80065d4:	4bd2      	ldr	r3, [pc, #840]	; (8006920 <__ieee754_pow+0x730>)
 80065d6:	2200      	movs	r2, #0
 80065d8:	402b      	ands	r3, r5
 80065da:	b943      	cbnz	r3, 80065ee <__ieee754_pow+0x3fe>
 80065dc:	4658      	mov	r0, fp
 80065de:	4661      	mov	r1, ip
 80065e0:	4bd0      	ldr	r3, [pc, #832]	; (8006924 <__ieee754_pow+0x734>)
 80065e2:	f7f9 ffdd 	bl	80005a0 <__aeabi_dmul>
 80065e6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80065ea:	4683      	mov	fp, r0
 80065ec:	460c      	mov	r4, r1
 80065ee:	1523      	asrs	r3, r4, #20
 80065f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80065f4:	4413      	add	r3, r2
 80065f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80065f8:	4bcb      	ldr	r3, [pc, #812]	; (8006928 <__ieee754_pow+0x738>)
 80065fa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80065fe:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006602:	429c      	cmp	r4, r3
 8006604:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006608:	dd08      	ble.n	800661c <__ieee754_pow+0x42c>
 800660a:	4bc8      	ldr	r3, [pc, #800]	; (800692c <__ieee754_pow+0x73c>)
 800660c:	429c      	cmp	r4, r3
 800660e:	f340 8199 	ble.w	8006944 <__ieee754_pow+0x754>
 8006612:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006614:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006618:	3301      	adds	r3, #1
 800661a:	930b      	str	r3, [sp, #44]	; 0x2c
 800661c:	2600      	movs	r6, #0
 800661e:	00f3      	lsls	r3, r6, #3
 8006620:	930d      	str	r3, [sp, #52]	; 0x34
 8006622:	4bc3      	ldr	r3, [pc, #780]	; (8006930 <__ieee754_pow+0x740>)
 8006624:	4658      	mov	r0, fp
 8006626:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800662a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800662e:	4629      	mov	r1, r5
 8006630:	461a      	mov	r2, r3
 8006632:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8006636:	4623      	mov	r3, r4
 8006638:	f7f9 fdfa 	bl	8000230 <__aeabi_dsub>
 800663c:	46da      	mov	sl, fp
 800663e:	462b      	mov	r3, r5
 8006640:	4652      	mov	r2, sl
 8006642:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8006646:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800664a:	f7f9 fdf3 	bl	8000234 <__adddf3>
 800664e:	4602      	mov	r2, r0
 8006650:	460b      	mov	r3, r1
 8006652:	2000      	movs	r0, #0
 8006654:	49b7      	ldr	r1, [pc, #732]	; (8006934 <__ieee754_pow+0x744>)
 8006656:	f7fa f8cd 	bl	80007f4 <__aeabi_ddiv>
 800665a:	4602      	mov	r2, r0
 800665c:	460b      	mov	r3, r1
 800665e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006662:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006666:	f7f9 ff9b 	bl	80005a0 <__aeabi_dmul>
 800666a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800666e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8006672:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006676:	2300      	movs	r3, #0
 8006678:	2200      	movs	r2, #0
 800667a:	46ab      	mov	fp, r5
 800667c:	106d      	asrs	r5, r5, #1
 800667e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006682:	9304      	str	r3, [sp, #16]
 8006684:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006688:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800668c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8006690:	4640      	mov	r0, r8
 8006692:	4649      	mov	r1, r9
 8006694:	4614      	mov	r4, r2
 8006696:	461d      	mov	r5, r3
 8006698:	f7f9 ff82 	bl	80005a0 <__aeabi_dmul>
 800669c:	4602      	mov	r2, r0
 800669e:	460b      	mov	r3, r1
 80066a0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80066a4:	f7f9 fdc4 	bl	8000230 <__aeabi_dsub>
 80066a8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80066ac:	4606      	mov	r6, r0
 80066ae:	460f      	mov	r7, r1
 80066b0:	4620      	mov	r0, r4
 80066b2:	4629      	mov	r1, r5
 80066b4:	f7f9 fdbc 	bl	8000230 <__aeabi_dsub>
 80066b8:	4602      	mov	r2, r0
 80066ba:	460b      	mov	r3, r1
 80066bc:	4650      	mov	r0, sl
 80066be:	4659      	mov	r1, fp
 80066c0:	f7f9 fdb6 	bl	8000230 <__aeabi_dsub>
 80066c4:	4642      	mov	r2, r8
 80066c6:	464b      	mov	r3, r9
 80066c8:	f7f9 ff6a 	bl	80005a0 <__aeabi_dmul>
 80066cc:	4602      	mov	r2, r0
 80066ce:	460b      	mov	r3, r1
 80066d0:	4630      	mov	r0, r6
 80066d2:	4639      	mov	r1, r7
 80066d4:	f7f9 fdac 	bl	8000230 <__aeabi_dsub>
 80066d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80066dc:	f7f9 ff60 	bl	80005a0 <__aeabi_dmul>
 80066e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80066e4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80066e8:	4610      	mov	r0, r2
 80066ea:	4619      	mov	r1, r3
 80066ec:	f7f9 ff58 	bl	80005a0 <__aeabi_dmul>
 80066f0:	a379      	add	r3, pc, #484	; (adr r3, 80068d8 <__ieee754_pow+0x6e8>)
 80066f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f6:	4604      	mov	r4, r0
 80066f8:	460d      	mov	r5, r1
 80066fa:	f7f9 ff51 	bl	80005a0 <__aeabi_dmul>
 80066fe:	a378      	add	r3, pc, #480	; (adr r3, 80068e0 <__ieee754_pow+0x6f0>)
 8006700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006704:	f7f9 fd96 	bl	8000234 <__adddf3>
 8006708:	4622      	mov	r2, r4
 800670a:	462b      	mov	r3, r5
 800670c:	f7f9 ff48 	bl	80005a0 <__aeabi_dmul>
 8006710:	a375      	add	r3, pc, #468	; (adr r3, 80068e8 <__ieee754_pow+0x6f8>)
 8006712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006716:	f7f9 fd8d 	bl	8000234 <__adddf3>
 800671a:	4622      	mov	r2, r4
 800671c:	462b      	mov	r3, r5
 800671e:	f7f9 ff3f 	bl	80005a0 <__aeabi_dmul>
 8006722:	a373      	add	r3, pc, #460	; (adr r3, 80068f0 <__ieee754_pow+0x700>)
 8006724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006728:	f7f9 fd84 	bl	8000234 <__adddf3>
 800672c:	4622      	mov	r2, r4
 800672e:	462b      	mov	r3, r5
 8006730:	f7f9 ff36 	bl	80005a0 <__aeabi_dmul>
 8006734:	a370      	add	r3, pc, #448	; (adr r3, 80068f8 <__ieee754_pow+0x708>)
 8006736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800673a:	f7f9 fd7b 	bl	8000234 <__adddf3>
 800673e:	4622      	mov	r2, r4
 8006740:	462b      	mov	r3, r5
 8006742:	f7f9 ff2d 	bl	80005a0 <__aeabi_dmul>
 8006746:	a36e      	add	r3, pc, #440	; (adr r3, 8006900 <__ieee754_pow+0x710>)
 8006748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674c:	f7f9 fd72 	bl	8000234 <__adddf3>
 8006750:	4622      	mov	r2, r4
 8006752:	4606      	mov	r6, r0
 8006754:	460f      	mov	r7, r1
 8006756:	462b      	mov	r3, r5
 8006758:	4620      	mov	r0, r4
 800675a:	4629      	mov	r1, r5
 800675c:	f7f9 ff20 	bl	80005a0 <__aeabi_dmul>
 8006760:	4602      	mov	r2, r0
 8006762:	460b      	mov	r3, r1
 8006764:	4630      	mov	r0, r6
 8006766:	4639      	mov	r1, r7
 8006768:	f7f9 ff1a 	bl	80005a0 <__aeabi_dmul>
 800676c:	4604      	mov	r4, r0
 800676e:	460d      	mov	r5, r1
 8006770:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006774:	4642      	mov	r2, r8
 8006776:	464b      	mov	r3, r9
 8006778:	f7f9 fd5c 	bl	8000234 <__adddf3>
 800677c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006780:	f7f9 ff0e 	bl	80005a0 <__aeabi_dmul>
 8006784:	4622      	mov	r2, r4
 8006786:	462b      	mov	r3, r5
 8006788:	f7f9 fd54 	bl	8000234 <__adddf3>
 800678c:	4642      	mov	r2, r8
 800678e:	4606      	mov	r6, r0
 8006790:	460f      	mov	r7, r1
 8006792:	464b      	mov	r3, r9
 8006794:	4640      	mov	r0, r8
 8006796:	4649      	mov	r1, r9
 8006798:	f7f9 ff02 	bl	80005a0 <__aeabi_dmul>
 800679c:	2200      	movs	r2, #0
 800679e:	4b66      	ldr	r3, [pc, #408]	; (8006938 <__ieee754_pow+0x748>)
 80067a0:	4682      	mov	sl, r0
 80067a2:	468b      	mov	fp, r1
 80067a4:	f7f9 fd46 	bl	8000234 <__adddf3>
 80067a8:	4632      	mov	r2, r6
 80067aa:	463b      	mov	r3, r7
 80067ac:	f7f9 fd42 	bl	8000234 <__adddf3>
 80067b0:	2400      	movs	r4, #0
 80067b2:	460d      	mov	r5, r1
 80067b4:	4622      	mov	r2, r4
 80067b6:	460b      	mov	r3, r1
 80067b8:	4640      	mov	r0, r8
 80067ba:	4649      	mov	r1, r9
 80067bc:	f7f9 fef0 	bl	80005a0 <__aeabi_dmul>
 80067c0:	2200      	movs	r2, #0
 80067c2:	4680      	mov	r8, r0
 80067c4:	4689      	mov	r9, r1
 80067c6:	4620      	mov	r0, r4
 80067c8:	4629      	mov	r1, r5
 80067ca:	4b5b      	ldr	r3, [pc, #364]	; (8006938 <__ieee754_pow+0x748>)
 80067cc:	f7f9 fd30 	bl	8000230 <__aeabi_dsub>
 80067d0:	4652      	mov	r2, sl
 80067d2:	465b      	mov	r3, fp
 80067d4:	f7f9 fd2c 	bl	8000230 <__aeabi_dsub>
 80067d8:	4602      	mov	r2, r0
 80067da:	460b      	mov	r3, r1
 80067dc:	4630      	mov	r0, r6
 80067de:	4639      	mov	r1, r7
 80067e0:	f7f9 fd26 	bl	8000230 <__aeabi_dsub>
 80067e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80067e8:	f7f9 feda 	bl	80005a0 <__aeabi_dmul>
 80067ec:	4622      	mov	r2, r4
 80067ee:	4606      	mov	r6, r0
 80067f0:	460f      	mov	r7, r1
 80067f2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80067f6:	462b      	mov	r3, r5
 80067f8:	f7f9 fed2 	bl	80005a0 <__aeabi_dmul>
 80067fc:	4602      	mov	r2, r0
 80067fe:	460b      	mov	r3, r1
 8006800:	4630      	mov	r0, r6
 8006802:	4639      	mov	r1, r7
 8006804:	f7f9 fd16 	bl	8000234 <__adddf3>
 8006808:	2400      	movs	r4, #0
 800680a:	4606      	mov	r6, r0
 800680c:	460f      	mov	r7, r1
 800680e:	4602      	mov	r2, r0
 8006810:	460b      	mov	r3, r1
 8006812:	4640      	mov	r0, r8
 8006814:	4649      	mov	r1, r9
 8006816:	f7f9 fd0d 	bl	8000234 <__adddf3>
 800681a:	a33b      	add	r3, pc, #236	; (adr r3, 8006908 <__ieee754_pow+0x718>)
 800681c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006820:	4620      	mov	r0, r4
 8006822:	460d      	mov	r5, r1
 8006824:	f7f9 febc 	bl	80005a0 <__aeabi_dmul>
 8006828:	4642      	mov	r2, r8
 800682a:	464b      	mov	r3, r9
 800682c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006830:	4620      	mov	r0, r4
 8006832:	4629      	mov	r1, r5
 8006834:	f7f9 fcfc 	bl	8000230 <__aeabi_dsub>
 8006838:	4602      	mov	r2, r0
 800683a:	460b      	mov	r3, r1
 800683c:	4630      	mov	r0, r6
 800683e:	4639      	mov	r1, r7
 8006840:	f7f9 fcf6 	bl	8000230 <__aeabi_dsub>
 8006844:	a332      	add	r3, pc, #200	; (adr r3, 8006910 <__ieee754_pow+0x720>)
 8006846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800684a:	f7f9 fea9 	bl	80005a0 <__aeabi_dmul>
 800684e:	a332      	add	r3, pc, #200	; (adr r3, 8006918 <__ieee754_pow+0x728>)
 8006850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006854:	4606      	mov	r6, r0
 8006856:	460f      	mov	r7, r1
 8006858:	4620      	mov	r0, r4
 800685a:	4629      	mov	r1, r5
 800685c:	f7f9 fea0 	bl	80005a0 <__aeabi_dmul>
 8006860:	4602      	mov	r2, r0
 8006862:	460b      	mov	r3, r1
 8006864:	4630      	mov	r0, r6
 8006866:	4639      	mov	r1, r7
 8006868:	f7f9 fce4 	bl	8000234 <__adddf3>
 800686c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800686e:	4b33      	ldr	r3, [pc, #204]	; (800693c <__ieee754_pow+0x74c>)
 8006870:	f04f 0a00 	mov.w	sl, #0
 8006874:	4413      	add	r3, r2
 8006876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800687a:	f7f9 fcdb 	bl	8000234 <__adddf3>
 800687e:	4680      	mov	r8, r0
 8006880:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006882:	4689      	mov	r9, r1
 8006884:	f7f9 fe22 	bl	80004cc <__aeabi_i2d>
 8006888:	4604      	mov	r4, r0
 800688a:	460d      	mov	r5, r1
 800688c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800688e:	4b2c      	ldr	r3, [pc, #176]	; (8006940 <__ieee754_pow+0x750>)
 8006890:	4413      	add	r3, r2
 8006892:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006896:	4642      	mov	r2, r8
 8006898:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800689c:	464b      	mov	r3, r9
 800689e:	f7f9 fcc9 	bl	8000234 <__adddf3>
 80068a2:	4632      	mov	r2, r6
 80068a4:	463b      	mov	r3, r7
 80068a6:	f7f9 fcc5 	bl	8000234 <__adddf3>
 80068aa:	4622      	mov	r2, r4
 80068ac:	462b      	mov	r3, r5
 80068ae:	f7f9 fcc1 	bl	8000234 <__adddf3>
 80068b2:	4622      	mov	r2, r4
 80068b4:	462b      	mov	r3, r5
 80068b6:	4650      	mov	r0, sl
 80068b8:	468b      	mov	fp, r1
 80068ba:	f7f9 fcb9 	bl	8000230 <__aeabi_dsub>
 80068be:	4632      	mov	r2, r6
 80068c0:	463b      	mov	r3, r7
 80068c2:	f7f9 fcb5 	bl	8000230 <__aeabi_dsub>
 80068c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80068ca:	f7f9 fcb1 	bl	8000230 <__aeabi_dsub>
 80068ce:	4602      	mov	r2, r0
 80068d0:	460b      	mov	r3, r1
 80068d2:	4640      	mov	r0, r8
 80068d4:	4649      	mov	r1, r9
 80068d6:	e60d      	b.n	80064f4 <__ieee754_pow+0x304>
 80068d8:	4a454eef 	.word	0x4a454eef
 80068dc:	3fca7e28 	.word	0x3fca7e28
 80068e0:	93c9db65 	.word	0x93c9db65
 80068e4:	3fcd864a 	.word	0x3fcd864a
 80068e8:	a91d4101 	.word	0xa91d4101
 80068ec:	3fd17460 	.word	0x3fd17460
 80068f0:	518f264d 	.word	0x518f264d
 80068f4:	3fd55555 	.word	0x3fd55555
 80068f8:	db6fabff 	.word	0xdb6fabff
 80068fc:	3fdb6db6 	.word	0x3fdb6db6
 8006900:	33333303 	.word	0x33333303
 8006904:	3fe33333 	.word	0x3fe33333
 8006908:	e0000000 	.word	0xe0000000
 800690c:	3feec709 	.word	0x3feec709
 8006910:	dc3a03fd 	.word	0xdc3a03fd
 8006914:	3feec709 	.word	0x3feec709
 8006918:	145b01f5 	.word	0x145b01f5
 800691c:	be3e2fe0 	.word	0xbe3e2fe0
 8006920:	7ff00000 	.word	0x7ff00000
 8006924:	43400000 	.word	0x43400000
 8006928:	0003988e 	.word	0x0003988e
 800692c:	000bb679 	.word	0x000bb679
 8006930:	080079c0 	.word	0x080079c0
 8006934:	3ff00000 	.word	0x3ff00000
 8006938:	40080000 	.word	0x40080000
 800693c:	080079e0 	.word	0x080079e0
 8006940:	080079d0 	.word	0x080079d0
 8006944:	2601      	movs	r6, #1
 8006946:	e66a      	b.n	800661e <__ieee754_pow+0x42e>
 8006948:	a39d      	add	r3, pc, #628	; (adr r3, 8006bc0 <__ieee754_pow+0x9d0>)
 800694a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800694e:	4640      	mov	r0, r8
 8006950:	4649      	mov	r1, r9
 8006952:	f7f9 fc6f 	bl	8000234 <__adddf3>
 8006956:	4622      	mov	r2, r4
 8006958:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800695c:	462b      	mov	r3, r5
 800695e:	4650      	mov	r0, sl
 8006960:	4639      	mov	r1, r7
 8006962:	f7f9 fc65 	bl	8000230 <__aeabi_dsub>
 8006966:	4602      	mov	r2, r0
 8006968:	460b      	mov	r3, r1
 800696a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800696e:	f7fa f8a7 	bl	8000ac0 <__aeabi_dcmpgt>
 8006972:	2800      	cmp	r0, #0
 8006974:	f47f ae09 	bne.w	800658a <__ieee754_pow+0x39a>
 8006978:	4aa3      	ldr	r2, [pc, #652]	; (8006c08 <__ieee754_pow+0xa18>)
 800697a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800697e:	4293      	cmp	r3, r2
 8006980:	f340 8101 	ble.w	8006b86 <__ieee754_pow+0x996>
 8006984:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006988:	2000      	movs	r0, #0
 800698a:	151b      	asrs	r3, r3, #20
 800698c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006990:	fa4a f303 	asr.w	r3, sl, r3
 8006994:	4433      	add	r3, r6
 8006996:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800699a:	4f9c      	ldr	r7, [pc, #624]	; (8006c0c <__ieee754_pow+0xa1c>)
 800699c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80069a0:	4117      	asrs	r7, r2
 80069a2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80069a6:	ea23 0107 	bic.w	r1, r3, r7
 80069aa:	f1c2 0214 	rsb	r2, r2, #20
 80069ae:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80069b2:	460b      	mov	r3, r1
 80069b4:	fa4a fa02 	asr.w	sl, sl, r2
 80069b8:	2e00      	cmp	r6, #0
 80069ba:	4602      	mov	r2, r0
 80069bc:	4629      	mov	r1, r5
 80069be:	4620      	mov	r0, r4
 80069c0:	bfb8      	it	lt
 80069c2:	f1ca 0a00 	rsblt	sl, sl, #0
 80069c6:	f7f9 fc33 	bl	8000230 <__aeabi_dsub>
 80069ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069d2:	2400      	movs	r4, #0
 80069d4:	4642      	mov	r2, r8
 80069d6:	464b      	mov	r3, r9
 80069d8:	f7f9 fc2c 	bl	8000234 <__adddf3>
 80069dc:	a37a      	add	r3, pc, #488	; (adr r3, 8006bc8 <__ieee754_pow+0x9d8>)
 80069de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e2:	4620      	mov	r0, r4
 80069e4:	460d      	mov	r5, r1
 80069e6:	f7f9 fddb 	bl	80005a0 <__aeabi_dmul>
 80069ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80069ee:	4606      	mov	r6, r0
 80069f0:	460f      	mov	r7, r1
 80069f2:	4620      	mov	r0, r4
 80069f4:	4629      	mov	r1, r5
 80069f6:	f7f9 fc1b 	bl	8000230 <__aeabi_dsub>
 80069fa:	4602      	mov	r2, r0
 80069fc:	460b      	mov	r3, r1
 80069fe:	4640      	mov	r0, r8
 8006a00:	4649      	mov	r1, r9
 8006a02:	f7f9 fc15 	bl	8000230 <__aeabi_dsub>
 8006a06:	a372      	add	r3, pc, #456	; (adr r3, 8006bd0 <__ieee754_pow+0x9e0>)
 8006a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a0c:	f7f9 fdc8 	bl	80005a0 <__aeabi_dmul>
 8006a10:	a371      	add	r3, pc, #452	; (adr r3, 8006bd8 <__ieee754_pow+0x9e8>)
 8006a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a16:	4680      	mov	r8, r0
 8006a18:	4689      	mov	r9, r1
 8006a1a:	4620      	mov	r0, r4
 8006a1c:	4629      	mov	r1, r5
 8006a1e:	f7f9 fdbf 	bl	80005a0 <__aeabi_dmul>
 8006a22:	4602      	mov	r2, r0
 8006a24:	460b      	mov	r3, r1
 8006a26:	4640      	mov	r0, r8
 8006a28:	4649      	mov	r1, r9
 8006a2a:	f7f9 fc03 	bl	8000234 <__adddf3>
 8006a2e:	4604      	mov	r4, r0
 8006a30:	460d      	mov	r5, r1
 8006a32:	4602      	mov	r2, r0
 8006a34:	460b      	mov	r3, r1
 8006a36:	4630      	mov	r0, r6
 8006a38:	4639      	mov	r1, r7
 8006a3a:	f7f9 fbfb 	bl	8000234 <__adddf3>
 8006a3e:	4632      	mov	r2, r6
 8006a40:	463b      	mov	r3, r7
 8006a42:	4680      	mov	r8, r0
 8006a44:	4689      	mov	r9, r1
 8006a46:	f7f9 fbf3 	bl	8000230 <__aeabi_dsub>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	4620      	mov	r0, r4
 8006a50:	4629      	mov	r1, r5
 8006a52:	f7f9 fbed 	bl	8000230 <__aeabi_dsub>
 8006a56:	4642      	mov	r2, r8
 8006a58:	4606      	mov	r6, r0
 8006a5a:	460f      	mov	r7, r1
 8006a5c:	464b      	mov	r3, r9
 8006a5e:	4640      	mov	r0, r8
 8006a60:	4649      	mov	r1, r9
 8006a62:	f7f9 fd9d 	bl	80005a0 <__aeabi_dmul>
 8006a66:	a35e      	add	r3, pc, #376	; (adr r3, 8006be0 <__ieee754_pow+0x9f0>)
 8006a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a6c:	4604      	mov	r4, r0
 8006a6e:	460d      	mov	r5, r1
 8006a70:	f7f9 fd96 	bl	80005a0 <__aeabi_dmul>
 8006a74:	a35c      	add	r3, pc, #368	; (adr r3, 8006be8 <__ieee754_pow+0x9f8>)
 8006a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7a:	f7f9 fbd9 	bl	8000230 <__aeabi_dsub>
 8006a7e:	4622      	mov	r2, r4
 8006a80:	462b      	mov	r3, r5
 8006a82:	f7f9 fd8d 	bl	80005a0 <__aeabi_dmul>
 8006a86:	a35a      	add	r3, pc, #360	; (adr r3, 8006bf0 <__ieee754_pow+0xa00>)
 8006a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a8c:	f7f9 fbd2 	bl	8000234 <__adddf3>
 8006a90:	4622      	mov	r2, r4
 8006a92:	462b      	mov	r3, r5
 8006a94:	f7f9 fd84 	bl	80005a0 <__aeabi_dmul>
 8006a98:	a357      	add	r3, pc, #348	; (adr r3, 8006bf8 <__ieee754_pow+0xa08>)
 8006a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a9e:	f7f9 fbc7 	bl	8000230 <__aeabi_dsub>
 8006aa2:	4622      	mov	r2, r4
 8006aa4:	462b      	mov	r3, r5
 8006aa6:	f7f9 fd7b 	bl	80005a0 <__aeabi_dmul>
 8006aaa:	a355      	add	r3, pc, #340	; (adr r3, 8006c00 <__ieee754_pow+0xa10>)
 8006aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab0:	f7f9 fbc0 	bl	8000234 <__adddf3>
 8006ab4:	4622      	mov	r2, r4
 8006ab6:	462b      	mov	r3, r5
 8006ab8:	f7f9 fd72 	bl	80005a0 <__aeabi_dmul>
 8006abc:	4602      	mov	r2, r0
 8006abe:	460b      	mov	r3, r1
 8006ac0:	4640      	mov	r0, r8
 8006ac2:	4649      	mov	r1, r9
 8006ac4:	f7f9 fbb4 	bl	8000230 <__aeabi_dsub>
 8006ac8:	4604      	mov	r4, r0
 8006aca:	460d      	mov	r5, r1
 8006acc:	4602      	mov	r2, r0
 8006ace:	460b      	mov	r3, r1
 8006ad0:	4640      	mov	r0, r8
 8006ad2:	4649      	mov	r1, r9
 8006ad4:	f7f9 fd64 	bl	80005a0 <__aeabi_dmul>
 8006ad8:	2200      	movs	r2, #0
 8006ada:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ade:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006ae2:	4620      	mov	r0, r4
 8006ae4:	4629      	mov	r1, r5
 8006ae6:	f7f9 fba3 	bl	8000230 <__aeabi_dsub>
 8006aea:	4602      	mov	r2, r0
 8006aec:	460b      	mov	r3, r1
 8006aee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006af2:	f7f9 fe7f 	bl	80007f4 <__aeabi_ddiv>
 8006af6:	4632      	mov	r2, r6
 8006af8:	4604      	mov	r4, r0
 8006afa:	460d      	mov	r5, r1
 8006afc:	463b      	mov	r3, r7
 8006afe:	4640      	mov	r0, r8
 8006b00:	4649      	mov	r1, r9
 8006b02:	f7f9 fd4d 	bl	80005a0 <__aeabi_dmul>
 8006b06:	4632      	mov	r2, r6
 8006b08:	463b      	mov	r3, r7
 8006b0a:	f7f9 fb93 	bl	8000234 <__adddf3>
 8006b0e:	4602      	mov	r2, r0
 8006b10:	460b      	mov	r3, r1
 8006b12:	4620      	mov	r0, r4
 8006b14:	4629      	mov	r1, r5
 8006b16:	f7f9 fb8b 	bl	8000230 <__aeabi_dsub>
 8006b1a:	4642      	mov	r2, r8
 8006b1c:	464b      	mov	r3, r9
 8006b1e:	f7f9 fb87 	bl	8000230 <__aeabi_dsub>
 8006b22:	4602      	mov	r2, r0
 8006b24:	460b      	mov	r3, r1
 8006b26:	2000      	movs	r0, #0
 8006b28:	4939      	ldr	r1, [pc, #228]	; (8006c10 <__ieee754_pow+0xa20>)
 8006b2a:	f7f9 fb81 	bl	8000230 <__aeabi_dsub>
 8006b2e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8006b32:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8006b36:	da29      	bge.n	8006b8c <__ieee754_pow+0x99c>
 8006b38:	4652      	mov	r2, sl
 8006b3a:	f000 f955 	bl	8006de8 <scalbn>
 8006b3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b42:	f7ff bbfe 	b.w	8006342 <__ieee754_pow+0x152>
 8006b46:	4b33      	ldr	r3, [pc, #204]	; (8006c14 <__ieee754_pow+0xa24>)
 8006b48:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8006b4c:	429f      	cmp	r7, r3
 8006b4e:	f77f af13 	ble.w	8006978 <__ieee754_pow+0x788>
 8006b52:	4b31      	ldr	r3, [pc, #196]	; (8006c18 <__ieee754_pow+0xa28>)
 8006b54:	440b      	add	r3, r1
 8006b56:	4303      	orrs	r3, r0
 8006b58:	d009      	beq.n	8006b6e <__ieee754_pow+0x97e>
 8006b5a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	2300      	movs	r3, #0
 8006b62:	f7f9 ff8f 	bl	8000a84 <__aeabi_dcmplt>
 8006b66:	3800      	subs	r0, #0
 8006b68:	bf18      	it	ne
 8006b6a:	2001      	movne	r0, #1
 8006b6c:	e453      	b.n	8006416 <__ieee754_pow+0x226>
 8006b6e:	4622      	mov	r2, r4
 8006b70:	462b      	mov	r3, r5
 8006b72:	f7f9 fb5d 	bl	8000230 <__aeabi_dsub>
 8006b76:	4642      	mov	r2, r8
 8006b78:	464b      	mov	r3, r9
 8006b7a:	f7f9 ff97 	bl	8000aac <__aeabi_dcmpge>
 8006b7e:	2800      	cmp	r0, #0
 8006b80:	f43f aefa 	beq.w	8006978 <__ieee754_pow+0x788>
 8006b84:	e7e9      	b.n	8006b5a <__ieee754_pow+0x96a>
 8006b86:	f04f 0a00 	mov.w	sl, #0
 8006b8a:	e720      	b.n	80069ce <__ieee754_pow+0x7de>
 8006b8c:	4621      	mov	r1, r4
 8006b8e:	e7d6      	b.n	8006b3e <__ieee754_pow+0x94e>
 8006b90:	f04f 0b00 	mov.w	fp, #0
 8006b94:	f8df c078 	ldr.w	ip, [pc, #120]	; 8006c10 <__ieee754_pow+0xa20>
 8006b98:	f7ff bbba 	b.w	8006310 <__ieee754_pow+0x120>
 8006b9c:	f04f 0b00 	mov.w	fp, #0
 8006ba0:	f04f 0c00 	mov.w	ip, #0
 8006ba4:	f7ff bbb4 	b.w	8006310 <__ieee754_pow+0x120>
 8006ba8:	4640      	mov	r0, r8
 8006baa:	4649      	mov	r1, r9
 8006bac:	f7ff bb3d 	b.w	800622a <__ieee754_pow+0x3a>
 8006bb0:	9200      	str	r2, [sp, #0]
 8006bb2:	f7ff bb89 	b.w	80062c8 <__ieee754_pow+0xd8>
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	f7ff bb73 	b.w	80062a2 <__ieee754_pow+0xb2>
 8006bbc:	f3af 8000 	nop.w
 8006bc0:	652b82fe 	.word	0x652b82fe
 8006bc4:	3c971547 	.word	0x3c971547
 8006bc8:	00000000 	.word	0x00000000
 8006bcc:	3fe62e43 	.word	0x3fe62e43
 8006bd0:	fefa39ef 	.word	0xfefa39ef
 8006bd4:	3fe62e42 	.word	0x3fe62e42
 8006bd8:	0ca86c39 	.word	0x0ca86c39
 8006bdc:	be205c61 	.word	0xbe205c61
 8006be0:	72bea4d0 	.word	0x72bea4d0
 8006be4:	3e663769 	.word	0x3e663769
 8006be8:	c5d26bf1 	.word	0xc5d26bf1
 8006bec:	3ebbbd41 	.word	0x3ebbbd41
 8006bf0:	af25de2c 	.word	0xaf25de2c
 8006bf4:	3f11566a 	.word	0x3f11566a
 8006bf8:	16bebd93 	.word	0x16bebd93
 8006bfc:	3f66c16c 	.word	0x3f66c16c
 8006c00:	5555553e 	.word	0x5555553e
 8006c04:	3fc55555 	.word	0x3fc55555
 8006c08:	3fe00000 	.word	0x3fe00000
 8006c0c:	000fffff 	.word	0x000fffff
 8006c10:	3ff00000 	.word	0x3ff00000
 8006c14:	4090cbff 	.word	0x4090cbff
 8006c18:	3f6f3400 	.word	0x3f6f3400

08006c1c <__ieee754_sqrt>:
 8006c1c:	f8df c158 	ldr.w	ip, [pc, #344]	; 8006d78 <__ieee754_sqrt+0x15c>
 8006c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c24:	ea3c 0c01 	bics.w	ip, ip, r1
 8006c28:	4606      	mov	r6, r0
 8006c2a:	460d      	mov	r5, r1
 8006c2c:	460c      	mov	r4, r1
 8006c2e:	460a      	mov	r2, r1
 8006c30:	4607      	mov	r7, r0
 8006c32:	4603      	mov	r3, r0
 8006c34:	d10f      	bne.n	8006c56 <__ieee754_sqrt+0x3a>
 8006c36:	4602      	mov	r2, r0
 8006c38:	460b      	mov	r3, r1
 8006c3a:	f7f9 fcb1 	bl	80005a0 <__aeabi_dmul>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	460b      	mov	r3, r1
 8006c42:	4630      	mov	r0, r6
 8006c44:	4629      	mov	r1, r5
 8006c46:	f7f9 faf5 	bl	8000234 <__adddf3>
 8006c4a:	4606      	mov	r6, r0
 8006c4c:	460d      	mov	r5, r1
 8006c4e:	4630      	mov	r0, r6
 8006c50:	4629      	mov	r1, r5
 8006c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c56:	2900      	cmp	r1, #0
 8006c58:	dc0e      	bgt.n	8006c78 <__ieee754_sqrt+0x5c>
 8006c5a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8006c5e:	ea5c 0707 	orrs.w	r7, ip, r7
 8006c62:	d0f4      	beq.n	8006c4e <__ieee754_sqrt+0x32>
 8006c64:	b141      	cbz	r1, 8006c78 <__ieee754_sqrt+0x5c>
 8006c66:	4602      	mov	r2, r0
 8006c68:	460b      	mov	r3, r1
 8006c6a:	f7f9 fae1 	bl	8000230 <__aeabi_dsub>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	460b      	mov	r3, r1
 8006c72:	f7f9 fdbf 	bl	80007f4 <__aeabi_ddiv>
 8006c76:	e7e8      	b.n	8006c4a <__ieee754_sqrt+0x2e>
 8006c78:	1521      	asrs	r1, r4, #20
 8006c7a:	d075      	beq.n	8006d68 <__ieee754_sqrt+0x14c>
 8006c7c:	07cc      	lsls	r4, r1, #31
 8006c7e:	f04f 0400 	mov.w	r4, #0
 8006c82:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8006c86:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8006c8a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006c8e:	bf5e      	ittt	pl
 8006c90:	0fd9      	lsrpl	r1, r3, #31
 8006c92:	005b      	lslpl	r3, r3, #1
 8006c94:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8006c98:	0fd9      	lsrs	r1, r3, #31
 8006c9a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8006c9e:	2516      	movs	r5, #22
 8006ca0:	4620      	mov	r0, r4
 8006ca2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006ca6:	107f      	asrs	r7, r7, #1
 8006ca8:	005b      	lsls	r3, r3, #1
 8006caa:	1846      	adds	r6, r0, r1
 8006cac:	4296      	cmp	r6, r2
 8006cae:	bfde      	ittt	le
 8006cb0:	1b92      	suble	r2, r2, r6
 8006cb2:	1870      	addle	r0, r6, r1
 8006cb4:	1864      	addle	r4, r4, r1
 8006cb6:	0052      	lsls	r2, r2, #1
 8006cb8:	3d01      	subs	r5, #1
 8006cba:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8006cbe:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006cc2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006cc6:	d1f0      	bne.n	8006caa <__ieee754_sqrt+0x8e>
 8006cc8:	4629      	mov	r1, r5
 8006cca:	f04f 0e20 	mov.w	lr, #32
 8006cce:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006cd2:	4282      	cmp	r2, r0
 8006cd4:	eb06 0c05 	add.w	ip, r6, r5
 8006cd8:	dc02      	bgt.n	8006ce0 <__ieee754_sqrt+0xc4>
 8006cda:	d113      	bne.n	8006d04 <__ieee754_sqrt+0xe8>
 8006cdc:	459c      	cmp	ip, r3
 8006cde:	d811      	bhi.n	8006d04 <__ieee754_sqrt+0xe8>
 8006ce0:	f1bc 0f00 	cmp.w	ip, #0
 8006ce4:	eb0c 0506 	add.w	r5, ip, r6
 8006ce8:	da43      	bge.n	8006d72 <__ieee754_sqrt+0x156>
 8006cea:	2d00      	cmp	r5, #0
 8006cec:	db41      	blt.n	8006d72 <__ieee754_sqrt+0x156>
 8006cee:	f100 0801 	add.w	r8, r0, #1
 8006cf2:	1a12      	subs	r2, r2, r0
 8006cf4:	4640      	mov	r0, r8
 8006cf6:	459c      	cmp	ip, r3
 8006cf8:	bf88      	it	hi
 8006cfa:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8006cfe:	eba3 030c 	sub.w	r3, r3, ip
 8006d02:	4431      	add	r1, r6
 8006d04:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8006d08:	f1be 0e01 	subs.w	lr, lr, #1
 8006d0c:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8006d10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006d14:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006d18:	d1db      	bne.n	8006cd2 <__ieee754_sqrt+0xb6>
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	d006      	beq.n	8006d2c <__ieee754_sqrt+0x110>
 8006d1e:	1c48      	adds	r0, r1, #1
 8006d20:	bf0b      	itete	eq
 8006d22:	4671      	moveq	r1, lr
 8006d24:	3101      	addne	r1, #1
 8006d26:	3401      	addeq	r4, #1
 8006d28:	f021 0101 	bicne.w	r1, r1, #1
 8006d2c:	1063      	asrs	r3, r4, #1
 8006d2e:	0849      	lsrs	r1, r1, #1
 8006d30:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006d34:	07e2      	lsls	r2, r4, #31
 8006d36:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006d3a:	bf48      	it	mi
 8006d3c:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8006d40:	460e      	mov	r6, r1
 8006d42:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8006d46:	e782      	b.n	8006c4e <__ieee754_sqrt+0x32>
 8006d48:	0ada      	lsrs	r2, r3, #11
 8006d4a:	3815      	subs	r0, #21
 8006d4c:	055b      	lsls	r3, r3, #21
 8006d4e:	2a00      	cmp	r2, #0
 8006d50:	d0fa      	beq.n	8006d48 <__ieee754_sqrt+0x12c>
 8006d52:	02d5      	lsls	r5, r2, #11
 8006d54:	d50a      	bpl.n	8006d6c <__ieee754_sqrt+0x150>
 8006d56:	f1c1 0420 	rsb	r4, r1, #32
 8006d5a:	fa23 f404 	lsr.w	r4, r3, r4
 8006d5e:	1e4d      	subs	r5, r1, #1
 8006d60:	408b      	lsls	r3, r1
 8006d62:	4322      	orrs	r2, r4
 8006d64:	1b41      	subs	r1, r0, r5
 8006d66:	e789      	b.n	8006c7c <__ieee754_sqrt+0x60>
 8006d68:	4608      	mov	r0, r1
 8006d6a:	e7f0      	b.n	8006d4e <__ieee754_sqrt+0x132>
 8006d6c:	0052      	lsls	r2, r2, #1
 8006d6e:	3101      	adds	r1, #1
 8006d70:	e7ef      	b.n	8006d52 <__ieee754_sqrt+0x136>
 8006d72:	4680      	mov	r8, r0
 8006d74:	e7bd      	b.n	8006cf2 <__ieee754_sqrt+0xd6>
 8006d76:	bf00      	nop
 8006d78:	7ff00000 	.word	0x7ff00000

08006d7c <with_errno>:
 8006d7c:	b570      	push	{r4, r5, r6, lr}
 8006d7e:	4604      	mov	r4, r0
 8006d80:	460d      	mov	r5, r1
 8006d82:	4616      	mov	r6, r2
 8006d84:	f7fe fc80 	bl	8005688 <__errno>
 8006d88:	4629      	mov	r1, r5
 8006d8a:	6006      	str	r6, [r0, #0]
 8006d8c:	4620      	mov	r0, r4
 8006d8e:	bd70      	pop	{r4, r5, r6, pc}

08006d90 <xflow>:
 8006d90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d92:	4615      	mov	r5, r2
 8006d94:	461c      	mov	r4, r3
 8006d96:	b180      	cbz	r0, 8006dba <xflow+0x2a>
 8006d98:	4610      	mov	r0, r2
 8006d9a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006d9e:	e9cd 0100 	strd	r0, r1, [sp]
 8006da2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006da6:	4628      	mov	r0, r5
 8006da8:	4621      	mov	r1, r4
 8006daa:	f7f9 fbf9 	bl	80005a0 <__aeabi_dmul>
 8006dae:	2222      	movs	r2, #34	; 0x22
 8006db0:	b003      	add	sp, #12
 8006db2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006db6:	f7ff bfe1 	b.w	8006d7c <with_errno>
 8006dba:	4610      	mov	r0, r2
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	e7ee      	b.n	8006d9e <xflow+0xe>

08006dc0 <__math_uflow>:
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006dc6:	f7ff bfe3 	b.w	8006d90 <xflow>

08006dca <__math_oflow>:
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8006dd0:	f7ff bfde 	b.w	8006d90 <xflow>

08006dd4 <fabs>:
 8006dd4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006dd8:	4770      	bx	lr

08006dda <finite>:
 8006dda:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8006dde:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006de2:	0fc0      	lsrs	r0, r0, #31
 8006de4:	4770      	bx	lr
	...

08006de8 <scalbn>:
 8006de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dea:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8006dee:	4604      	mov	r4, r0
 8006df0:	460d      	mov	r5, r1
 8006df2:	4617      	mov	r7, r2
 8006df4:	460b      	mov	r3, r1
 8006df6:	b996      	cbnz	r6, 8006e1e <scalbn+0x36>
 8006df8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006dfc:	4303      	orrs	r3, r0
 8006dfe:	d039      	beq.n	8006e74 <scalbn+0x8c>
 8006e00:	4b33      	ldr	r3, [pc, #204]	; (8006ed0 <scalbn+0xe8>)
 8006e02:	2200      	movs	r2, #0
 8006e04:	f7f9 fbcc 	bl	80005a0 <__aeabi_dmul>
 8006e08:	4b32      	ldr	r3, [pc, #200]	; (8006ed4 <scalbn+0xec>)
 8006e0a:	4604      	mov	r4, r0
 8006e0c:	429f      	cmp	r7, r3
 8006e0e:	460d      	mov	r5, r1
 8006e10:	da0f      	bge.n	8006e32 <scalbn+0x4a>
 8006e12:	a32b      	add	r3, pc, #172	; (adr r3, 8006ec0 <scalbn+0xd8>)
 8006e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e18:	f7f9 fbc2 	bl	80005a0 <__aeabi_dmul>
 8006e1c:	e006      	b.n	8006e2c <scalbn+0x44>
 8006e1e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006e22:	4296      	cmp	r6, r2
 8006e24:	d10a      	bne.n	8006e3c <scalbn+0x54>
 8006e26:	4602      	mov	r2, r0
 8006e28:	f7f9 fa04 	bl	8000234 <__adddf3>
 8006e2c:	4604      	mov	r4, r0
 8006e2e:	460d      	mov	r5, r1
 8006e30:	e020      	b.n	8006e74 <scalbn+0x8c>
 8006e32:	460b      	mov	r3, r1
 8006e34:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006e38:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8006e3c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8006e40:	19b9      	adds	r1, r7, r6
 8006e42:	4291      	cmp	r1, r2
 8006e44:	dd0e      	ble.n	8006e64 <scalbn+0x7c>
 8006e46:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8006e4a:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8006e4e:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8006e52:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8006e56:	4820      	ldr	r0, [pc, #128]	; (8006ed8 <scalbn+0xf0>)
 8006e58:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8006e5c:	a31a      	add	r3, pc, #104	; (adr r3, 8006ec8 <scalbn+0xe0>)
 8006e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e62:	e7d9      	b.n	8006e18 <scalbn+0x30>
 8006e64:	2900      	cmp	r1, #0
 8006e66:	dd08      	ble.n	8006e7a <scalbn+0x92>
 8006e68:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006e6c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006e70:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8006e74:	4620      	mov	r0, r4
 8006e76:	4629      	mov	r1, r5
 8006e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e7a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8006e7e:	da12      	bge.n	8006ea6 <scalbn+0xbe>
 8006e80:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006e84:	429f      	cmp	r7, r3
 8006e86:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8006e8a:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8006e8e:	dcdc      	bgt.n	8006e4a <scalbn+0x62>
 8006e90:	a30b      	add	r3, pc, #44	; (adr r3, 8006ec0 <scalbn+0xd8>)
 8006e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e96:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8006e9a:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8006e9e:	480f      	ldr	r0, [pc, #60]	; (8006edc <scalbn+0xf4>)
 8006ea0:	f041 011f 	orr.w	r1, r1, #31
 8006ea4:	e7b8      	b.n	8006e18 <scalbn+0x30>
 8006ea6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006eaa:	3136      	adds	r1, #54	; 0x36
 8006eac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006eb0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8006eb4:	4620      	mov	r0, r4
 8006eb6:	4629      	mov	r1, r5
 8006eb8:	2200      	movs	r2, #0
 8006eba:	4b09      	ldr	r3, [pc, #36]	; (8006ee0 <scalbn+0xf8>)
 8006ebc:	e7ac      	b.n	8006e18 <scalbn+0x30>
 8006ebe:	bf00      	nop
 8006ec0:	c2f8f359 	.word	0xc2f8f359
 8006ec4:	01a56e1f 	.word	0x01a56e1f
 8006ec8:	8800759c 	.word	0x8800759c
 8006ecc:	7e37e43c 	.word	0x7e37e43c
 8006ed0:	43500000 	.word	0x43500000
 8006ed4:	ffff3cb0 	.word	0xffff3cb0
 8006ed8:	8800759c 	.word	0x8800759c
 8006edc:	c2f8f359 	.word	0xc2f8f359
 8006ee0:	3c900000 	.word	0x3c900000

08006ee4 <_init>:
 8006ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ee6:	bf00      	nop
 8006ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eea:	bc08      	pop	{r3}
 8006eec:	469e      	mov	lr, r3
 8006eee:	4770      	bx	lr

08006ef0 <_fini>:
 8006ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ef2:	bf00      	nop
 8006ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ef6:	bc08      	pop	{r3}
 8006ef8:	469e      	mov	lr, r3
 8006efa:	4770      	bx	lr
