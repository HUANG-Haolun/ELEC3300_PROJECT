
lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009028  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000adc  08009210  08009210  00019210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08009cec  08009cec  00019cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08009cf0  08009cf0  00019cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000024c  20000000  08009cf4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00003248  2000024c  08009f40  0002024c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20003494  08009f40  00023494  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000fcbf  00000000  00000000  00020275  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000339b  00000000  00000000  0002ff34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001188  00000000  00000000  000332d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000ff0  00000000  00000000  00034458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   0000d7bc  00000000  00000000  00035448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    00004779  00000000  00000000  00042c04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .comment      00000050  00000000  00000000  0004737d  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00004f0c  00000000  00000000  000473d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	2000024c 	.word	0x2000024c
 8000204:	00000000 	.word	0x00000000
 8000208:	080091f8 	.word	0x080091f8

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000250 	.word	0x20000250
 8000224:	080091f8 	.word	0x080091f8

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2uiz>:
 8000ad4:	004a      	lsls	r2, r1, #1
 8000ad6:	d211      	bcs.n	8000afc <__aeabi_d2uiz+0x28>
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000adc:	d211      	bcs.n	8000b02 <__aeabi_d2uiz+0x2e>
 8000ade:	d50d      	bpl.n	8000afc <__aeabi_d2uiz+0x28>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d40e      	bmi.n	8000b08 <__aeabi_d2uiz+0x34>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	fa23 f002 	lsr.w	r0, r3, r2
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d102      	bne.n	8000b0e <__aeabi_d2uiz+0x3a>
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	4770      	bx	lr
 8000b0e:	f04f 0000 	mov.w	r0, #0
 8000b12:	4770      	bx	lr

08000b14 <__aeabi_frsub>:
 8000b14:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b18:	e002      	b.n	8000b20 <__addsf3>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_fsub>:
 8000b1c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b20 <__addsf3>:
 8000b20:	0042      	lsls	r2, r0, #1
 8000b22:	bf1f      	itttt	ne
 8000b24:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b28:	ea92 0f03 	teqne	r2, r3
 8000b2c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b30:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b34:	d06a      	beq.n	8000c0c <__addsf3+0xec>
 8000b36:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b3e:	bfc1      	itttt	gt
 8000b40:	18d2      	addgt	r2, r2, r3
 8000b42:	4041      	eorgt	r1, r0
 8000b44:	4048      	eorgt	r0, r1
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	bfb8      	it	lt
 8000b4a:	425b      	neglt	r3, r3
 8000b4c:	2b19      	cmp	r3, #25
 8000b4e:	bf88      	it	hi
 8000b50:	4770      	bxhi	lr
 8000b52:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b56:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b5e:	bf18      	it	ne
 8000b60:	4240      	negne	r0, r0
 8000b62:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b66:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b6a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b6e:	bf18      	it	ne
 8000b70:	4249      	negne	r1, r1
 8000b72:	ea92 0f03 	teq	r2, r3
 8000b76:	d03f      	beq.n	8000bf8 <__addsf3+0xd8>
 8000b78:	f1a2 0201 	sub.w	r2, r2, #1
 8000b7c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b80:	eb10 000c 	adds.w	r0, r0, ip
 8000b84:	f1c3 0320 	rsb	r3, r3, #32
 8000b88:	fa01 f103 	lsl.w	r1, r1, r3
 8000b8c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b90:	d502      	bpl.n	8000b98 <__addsf3+0x78>
 8000b92:	4249      	negs	r1, r1
 8000b94:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b98:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b9c:	d313      	bcc.n	8000bc6 <__addsf3+0xa6>
 8000b9e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ba2:	d306      	bcc.n	8000bb2 <__addsf3+0x92>
 8000ba4:	0840      	lsrs	r0, r0, #1
 8000ba6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000baa:	f102 0201 	add.w	r2, r2, #1
 8000bae:	2afe      	cmp	r2, #254	; 0xfe
 8000bb0:	d251      	bcs.n	8000c56 <__addsf3+0x136>
 8000bb2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bba:	bf08      	it	eq
 8000bbc:	f020 0001 	biceq.w	r0, r0, #1
 8000bc0:	ea40 0003 	orr.w	r0, r0, r3
 8000bc4:	4770      	bx	lr
 8000bc6:	0049      	lsls	r1, r1, #1
 8000bc8:	eb40 0000 	adc.w	r0, r0, r0
 8000bcc:	3a01      	subs	r2, #1
 8000bce:	bf28      	it	cs
 8000bd0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bd4:	d2ed      	bcs.n	8000bb2 <__addsf3+0x92>
 8000bd6:	fab0 fc80 	clz	ip, r0
 8000bda:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bde:	ebb2 020c 	subs.w	r2, r2, ip
 8000be2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000be6:	bfaa      	itet	ge
 8000be8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bec:	4252      	neglt	r2, r2
 8000bee:	4318      	orrge	r0, r3
 8000bf0:	bfbc      	itt	lt
 8000bf2:	40d0      	lsrlt	r0, r2
 8000bf4:	4318      	orrlt	r0, r3
 8000bf6:	4770      	bx	lr
 8000bf8:	f092 0f00 	teq	r2, #0
 8000bfc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c00:	bf06      	itte	eq
 8000c02:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c06:	3201      	addeq	r2, #1
 8000c08:	3b01      	subne	r3, #1
 8000c0a:	e7b5      	b.n	8000b78 <__addsf3+0x58>
 8000c0c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c10:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c14:	bf18      	it	ne
 8000c16:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1a:	d021      	beq.n	8000c60 <__addsf3+0x140>
 8000c1c:	ea92 0f03 	teq	r2, r3
 8000c20:	d004      	beq.n	8000c2c <__addsf3+0x10c>
 8000c22:	f092 0f00 	teq	r2, #0
 8000c26:	bf08      	it	eq
 8000c28:	4608      	moveq	r0, r1
 8000c2a:	4770      	bx	lr
 8000c2c:	ea90 0f01 	teq	r0, r1
 8000c30:	bf1c      	itt	ne
 8000c32:	2000      	movne	r0, #0
 8000c34:	4770      	bxne	lr
 8000c36:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c3a:	d104      	bne.n	8000c46 <__addsf3+0x126>
 8000c3c:	0040      	lsls	r0, r0, #1
 8000c3e:	bf28      	it	cs
 8000c40:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c44:	4770      	bx	lr
 8000c46:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c4a:	bf3c      	itt	cc
 8000c4c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c50:	4770      	bxcc	lr
 8000c52:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c56:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c5e:	4770      	bx	lr
 8000c60:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c64:	bf16      	itet	ne
 8000c66:	4608      	movne	r0, r1
 8000c68:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c6c:	4601      	movne	r1, r0
 8000c6e:	0242      	lsls	r2, r0, #9
 8000c70:	bf06      	itte	eq
 8000c72:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c76:	ea90 0f01 	teqeq	r0, r1
 8000c7a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c7e:	4770      	bx	lr

08000c80 <__aeabi_ui2f>:
 8000c80:	f04f 0300 	mov.w	r3, #0
 8000c84:	e004      	b.n	8000c90 <__aeabi_i2f+0x8>
 8000c86:	bf00      	nop

08000c88 <__aeabi_i2f>:
 8000c88:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c8c:	bf48      	it	mi
 8000c8e:	4240      	negmi	r0, r0
 8000c90:	ea5f 0c00 	movs.w	ip, r0
 8000c94:	bf08      	it	eq
 8000c96:	4770      	bxeq	lr
 8000c98:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c9c:	4601      	mov	r1, r0
 8000c9e:	f04f 0000 	mov.w	r0, #0
 8000ca2:	e01c      	b.n	8000cde <__aeabi_l2f+0x2a>

08000ca4 <__aeabi_ul2f>:
 8000ca4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f04f 0300 	mov.w	r3, #0
 8000cb0:	e00a      	b.n	8000cc8 <__aeabi_l2f+0x14>
 8000cb2:	bf00      	nop

08000cb4 <__aeabi_l2f>:
 8000cb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb8:	bf08      	it	eq
 8000cba:	4770      	bxeq	lr
 8000cbc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cc0:	d502      	bpl.n	8000cc8 <__aeabi_l2f+0x14>
 8000cc2:	4240      	negs	r0, r0
 8000cc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc8:	ea5f 0c01 	movs.w	ip, r1
 8000ccc:	bf02      	ittt	eq
 8000cce:	4684      	moveq	ip, r0
 8000cd0:	4601      	moveq	r1, r0
 8000cd2:	2000      	moveq	r0, #0
 8000cd4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cd8:	bf08      	it	eq
 8000cda:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cde:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ce2:	fabc f28c 	clz	r2, ip
 8000ce6:	3a08      	subs	r2, #8
 8000ce8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cec:	db10      	blt.n	8000d10 <__aeabi_l2f+0x5c>
 8000cee:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf2:	4463      	add	r3, ip
 8000cf4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cf8:	f1c2 0220 	rsb	r2, r2, #32
 8000cfc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d00:	fa20 f202 	lsr.w	r2, r0, r2
 8000d04:	eb43 0002 	adc.w	r0, r3, r2
 8000d08:	bf08      	it	eq
 8000d0a:	f020 0001 	biceq.w	r0, r0, #1
 8000d0e:	4770      	bx	lr
 8000d10:	f102 0220 	add.w	r2, r2, #32
 8000d14:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d18:	f1c2 0220 	rsb	r2, r2, #32
 8000d1c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d20:	fa21 f202 	lsr.w	r2, r1, r2
 8000d24:	eb43 0002 	adc.w	r0, r3, r2
 8000d28:	bf08      	it	eq
 8000d2a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d2e:	4770      	bx	lr

08000d30 <__aeabi_fmul>:
 8000d30:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d34:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d38:	bf1e      	ittt	ne
 8000d3a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d3e:	ea92 0f0c 	teqne	r2, ip
 8000d42:	ea93 0f0c 	teqne	r3, ip
 8000d46:	d06f      	beq.n	8000e28 <__aeabi_fmul+0xf8>
 8000d48:	441a      	add	r2, r3
 8000d4a:	ea80 0c01 	eor.w	ip, r0, r1
 8000d4e:	0240      	lsls	r0, r0, #9
 8000d50:	bf18      	it	ne
 8000d52:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d56:	d01e      	beq.n	8000d96 <__aeabi_fmul+0x66>
 8000d58:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d5c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d60:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d64:	fba0 3101 	umull	r3, r1, r0, r1
 8000d68:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d6c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d70:	bf3e      	ittt	cc
 8000d72:	0049      	lslcc	r1, r1, #1
 8000d74:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d78:	005b      	lslcc	r3, r3, #1
 8000d7a:	ea40 0001 	orr.w	r0, r0, r1
 8000d7e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d82:	2afd      	cmp	r2, #253	; 0xfd
 8000d84:	d81d      	bhi.n	8000dc2 <__aeabi_fmul+0x92>
 8000d86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d8a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d8e:	bf08      	it	eq
 8000d90:	f020 0001 	biceq.w	r0, r0, #1
 8000d94:	4770      	bx	lr
 8000d96:	f090 0f00 	teq	r0, #0
 8000d9a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d9e:	bf08      	it	eq
 8000da0:	0249      	lsleq	r1, r1, #9
 8000da2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000da6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000daa:	3a7f      	subs	r2, #127	; 0x7f
 8000dac:	bfc2      	ittt	gt
 8000dae:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000db6:	4770      	bxgt	lr
 8000db8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dbc:	f04f 0300 	mov.w	r3, #0
 8000dc0:	3a01      	subs	r2, #1
 8000dc2:	dc5d      	bgt.n	8000e80 <__aeabi_fmul+0x150>
 8000dc4:	f112 0f19 	cmn.w	r2, #25
 8000dc8:	bfdc      	itt	le
 8000dca:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dce:	4770      	bxle	lr
 8000dd0:	f1c2 0200 	rsb	r2, r2, #0
 8000dd4:	0041      	lsls	r1, r0, #1
 8000dd6:	fa21 f102 	lsr.w	r1, r1, r2
 8000dda:	f1c2 0220 	rsb	r2, r2, #32
 8000dde:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de2:	ea5f 0031 	movs.w	r0, r1, rrx
 8000de6:	f140 0000 	adc.w	r0, r0, #0
 8000dea:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dee:	bf08      	it	eq
 8000df0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df4:	4770      	bx	lr
 8000df6:	f092 0f00 	teq	r2, #0
 8000dfa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dfe:	bf02      	ittt	eq
 8000e00:	0040      	lsleq	r0, r0, #1
 8000e02:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e06:	3a01      	subeq	r2, #1
 8000e08:	d0f9      	beq.n	8000dfe <__aeabi_fmul+0xce>
 8000e0a:	ea40 000c 	orr.w	r0, r0, ip
 8000e0e:	f093 0f00 	teq	r3, #0
 8000e12:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e16:	bf02      	ittt	eq
 8000e18:	0049      	lsleq	r1, r1, #1
 8000e1a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e1e:	3b01      	subeq	r3, #1
 8000e20:	d0f9      	beq.n	8000e16 <__aeabi_fmul+0xe6>
 8000e22:	ea41 010c 	orr.w	r1, r1, ip
 8000e26:	e78f      	b.n	8000d48 <__aeabi_fmul+0x18>
 8000e28:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e2c:	ea92 0f0c 	teq	r2, ip
 8000e30:	bf18      	it	ne
 8000e32:	ea93 0f0c 	teqne	r3, ip
 8000e36:	d00a      	beq.n	8000e4e <__aeabi_fmul+0x11e>
 8000e38:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e3c:	bf18      	it	ne
 8000e3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e42:	d1d8      	bne.n	8000df6 <__aeabi_fmul+0xc6>
 8000e44:	ea80 0001 	eor.w	r0, r0, r1
 8000e48:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e4c:	4770      	bx	lr
 8000e4e:	f090 0f00 	teq	r0, #0
 8000e52:	bf17      	itett	ne
 8000e54:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e58:	4608      	moveq	r0, r1
 8000e5a:	f091 0f00 	teqne	r1, #0
 8000e5e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e62:	d014      	beq.n	8000e8e <__aeabi_fmul+0x15e>
 8000e64:	ea92 0f0c 	teq	r2, ip
 8000e68:	d101      	bne.n	8000e6e <__aeabi_fmul+0x13e>
 8000e6a:	0242      	lsls	r2, r0, #9
 8000e6c:	d10f      	bne.n	8000e8e <__aeabi_fmul+0x15e>
 8000e6e:	ea93 0f0c 	teq	r3, ip
 8000e72:	d103      	bne.n	8000e7c <__aeabi_fmul+0x14c>
 8000e74:	024b      	lsls	r3, r1, #9
 8000e76:	bf18      	it	ne
 8000e78:	4608      	movne	r0, r1
 8000e7a:	d108      	bne.n	8000e8e <__aeabi_fmul+0x15e>
 8000e7c:	ea80 0001 	eor.w	r0, r0, r1
 8000e80:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e8c:	4770      	bx	lr
 8000e8e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e92:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e96:	4770      	bx	lr

08000e98 <__aeabi_fdiv>:
 8000e98:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea0:	bf1e      	ittt	ne
 8000ea2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ea6:	ea92 0f0c 	teqne	r2, ip
 8000eaa:	ea93 0f0c 	teqne	r3, ip
 8000eae:	d069      	beq.n	8000f84 <__aeabi_fdiv+0xec>
 8000eb0:	eba2 0203 	sub.w	r2, r2, r3
 8000eb4:	ea80 0c01 	eor.w	ip, r0, r1
 8000eb8:	0249      	lsls	r1, r1, #9
 8000eba:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ebe:	d037      	beq.n	8000f30 <__aeabi_fdiv+0x98>
 8000ec0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ec4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ec8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ecc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ed0:	428b      	cmp	r3, r1
 8000ed2:	bf38      	it	cc
 8000ed4:	005b      	lslcc	r3, r3, #1
 8000ed6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eda:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ede:	428b      	cmp	r3, r1
 8000ee0:	bf24      	itt	cs
 8000ee2:	1a5b      	subcs	r3, r3, r1
 8000ee4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ee8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000eec:	bf24      	itt	cs
 8000eee:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ef6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efa:	bf24      	itt	cs
 8000efc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f00:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f04:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f08:	bf24      	itt	cs
 8000f0a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f0e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f12:	011b      	lsls	r3, r3, #4
 8000f14:	bf18      	it	ne
 8000f16:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1a:	d1e0      	bne.n	8000ede <__aeabi_fdiv+0x46>
 8000f1c:	2afd      	cmp	r2, #253	; 0xfd
 8000f1e:	f63f af50 	bhi.w	8000dc2 <__aeabi_fmul+0x92>
 8000f22:	428b      	cmp	r3, r1
 8000f24:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f28:	bf08      	it	eq
 8000f2a:	f020 0001 	biceq.w	r0, r0, #1
 8000f2e:	4770      	bx	lr
 8000f30:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f34:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f38:	327f      	adds	r2, #127	; 0x7f
 8000f3a:	bfc2      	ittt	gt
 8000f3c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f40:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f44:	4770      	bxgt	lr
 8000f46:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f4a:	f04f 0300 	mov.w	r3, #0
 8000f4e:	3a01      	subs	r2, #1
 8000f50:	e737      	b.n	8000dc2 <__aeabi_fmul+0x92>
 8000f52:	f092 0f00 	teq	r2, #0
 8000f56:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f5a:	bf02      	ittt	eq
 8000f5c:	0040      	lsleq	r0, r0, #1
 8000f5e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f62:	3a01      	subeq	r2, #1
 8000f64:	d0f9      	beq.n	8000f5a <__aeabi_fdiv+0xc2>
 8000f66:	ea40 000c 	orr.w	r0, r0, ip
 8000f6a:	f093 0f00 	teq	r3, #0
 8000f6e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f72:	bf02      	ittt	eq
 8000f74:	0049      	lsleq	r1, r1, #1
 8000f76:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f7a:	3b01      	subeq	r3, #1
 8000f7c:	d0f9      	beq.n	8000f72 <__aeabi_fdiv+0xda>
 8000f7e:	ea41 010c 	orr.w	r1, r1, ip
 8000f82:	e795      	b.n	8000eb0 <__aeabi_fdiv+0x18>
 8000f84:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f88:	ea92 0f0c 	teq	r2, ip
 8000f8c:	d108      	bne.n	8000fa0 <__aeabi_fdiv+0x108>
 8000f8e:	0242      	lsls	r2, r0, #9
 8000f90:	f47f af7d 	bne.w	8000e8e <__aeabi_fmul+0x15e>
 8000f94:	ea93 0f0c 	teq	r3, ip
 8000f98:	f47f af70 	bne.w	8000e7c <__aeabi_fmul+0x14c>
 8000f9c:	4608      	mov	r0, r1
 8000f9e:	e776      	b.n	8000e8e <__aeabi_fmul+0x15e>
 8000fa0:	ea93 0f0c 	teq	r3, ip
 8000fa4:	d104      	bne.n	8000fb0 <__aeabi_fdiv+0x118>
 8000fa6:	024b      	lsls	r3, r1, #9
 8000fa8:	f43f af4c 	beq.w	8000e44 <__aeabi_fmul+0x114>
 8000fac:	4608      	mov	r0, r1
 8000fae:	e76e      	b.n	8000e8e <__aeabi_fmul+0x15e>
 8000fb0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fb4:	bf18      	it	ne
 8000fb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fba:	d1ca      	bne.n	8000f52 <__aeabi_fdiv+0xba>
 8000fbc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fc0:	f47f af5c 	bne.w	8000e7c <__aeabi_fmul+0x14c>
 8000fc4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fc8:	f47f af3c 	bne.w	8000e44 <__aeabi_fmul+0x114>
 8000fcc:	e75f      	b.n	8000e8e <__aeabi_fmul+0x15e>
 8000fce:	bf00      	nop

08000fd0 <__gesf2>:
 8000fd0:	f04f 3cff 	mov.w	ip, #4294967295
 8000fd4:	e006      	b.n	8000fe4 <__cmpsf2+0x4>
 8000fd6:	bf00      	nop

08000fd8 <__lesf2>:
 8000fd8:	f04f 0c01 	mov.w	ip, #1
 8000fdc:	e002      	b.n	8000fe4 <__cmpsf2+0x4>
 8000fde:	bf00      	nop

08000fe0 <__cmpsf2>:
 8000fe0:	f04f 0c01 	mov.w	ip, #1
 8000fe4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fe8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ff0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ff4:	bf18      	it	ne
 8000ff6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ffa:	d011      	beq.n	8001020 <__cmpsf2+0x40>
 8000ffc:	b001      	add	sp, #4
 8000ffe:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001002:	bf18      	it	ne
 8001004:	ea90 0f01 	teqne	r0, r1
 8001008:	bf58      	it	pl
 800100a:	ebb2 0003 	subspl.w	r0, r2, r3
 800100e:	bf88      	it	hi
 8001010:	17c8      	asrhi	r0, r1, #31
 8001012:	bf38      	it	cc
 8001014:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001018:	bf18      	it	ne
 800101a:	f040 0001 	orrne.w	r0, r0, #1
 800101e:	4770      	bx	lr
 8001020:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001024:	d102      	bne.n	800102c <__cmpsf2+0x4c>
 8001026:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800102a:	d105      	bne.n	8001038 <__cmpsf2+0x58>
 800102c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001030:	d1e4      	bne.n	8000ffc <__cmpsf2+0x1c>
 8001032:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001036:	d0e1      	beq.n	8000ffc <__cmpsf2+0x1c>
 8001038:	f85d 0b04 	ldr.w	r0, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <__aeabi_cfrcmple>:
 8001040:	4684      	mov	ip, r0
 8001042:	4608      	mov	r0, r1
 8001044:	4661      	mov	r1, ip
 8001046:	e7ff      	b.n	8001048 <__aeabi_cfcmpeq>

08001048 <__aeabi_cfcmpeq>:
 8001048:	b50f      	push	{r0, r1, r2, r3, lr}
 800104a:	f7ff ffc9 	bl	8000fe0 <__cmpsf2>
 800104e:	2800      	cmp	r0, #0
 8001050:	bf48      	it	mi
 8001052:	f110 0f00 	cmnmi.w	r0, #0
 8001056:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001058 <__aeabi_fcmpeq>:
 8001058:	f84d ed08 	str.w	lr, [sp, #-8]!
 800105c:	f7ff fff4 	bl	8001048 <__aeabi_cfcmpeq>
 8001060:	bf0c      	ite	eq
 8001062:	2001      	moveq	r0, #1
 8001064:	2000      	movne	r0, #0
 8001066:	f85d fb08 	ldr.w	pc, [sp], #8
 800106a:	bf00      	nop

0800106c <__aeabi_fcmplt>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff ffea 	bl	8001048 <__aeabi_cfcmpeq>
 8001074:	bf34      	ite	cc
 8001076:	2001      	movcc	r0, #1
 8001078:	2000      	movcs	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmple>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffe0 	bl	8001048 <__aeabi_cfcmpeq>
 8001088:	bf94      	ite	ls
 800108a:	2001      	movls	r0, #1
 800108c:	2000      	movhi	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmpge>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffd2 	bl	8001040 <__aeabi_cfrcmple>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpgt>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffc8 	bl	8001040 <__aeabi_cfrcmple>
 80010b0:	bf34      	ite	cc
 80010b2:	2001      	movcc	r0, #1
 80010b4:	2000      	movcs	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_f2iz>:
 80010bc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010c0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010c4:	d30f      	bcc.n	80010e6 <__aeabi_f2iz+0x2a>
 80010c6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010ca:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010ce:	d90d      	bls.n	80010ec <__aeabi_f2iz+0x30>
 80010d0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010d8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010dc:	fa23 f002 	lsr.w	r0, r3, r2
 80010e0:	bf18      	it	ne
 80010e2:	4240      	negne	r0, r0
 80010e4:	4770      	bx	lr
 80010e6:	f04f 0000 	mov.w	r0, #0
 80010ea:	4770      	bx	lr
 80010ec:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010f0:	d101      	bne.n	80010f6 <__aeabi_f2iz+0x3a>
 80010f2:	0242      	lsls	r2, r0, #9
 80010f4:	d105      	bne.n	8001102 <__aeabi_f2iz+0x46>
 80010f6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010fa:	bf08      	it	eq
 80010fc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001100:	4770      	bx	lr
 8001102:	f04f 0000 	mov.w	r0, #0
 8001106:	4770      	bx	lr

08001108 <Ov7725_Init>:
uint16_t pixels[100][150];
/************************************************
 * Sensor_Init
 ************************************************/
ErrorStatus Ov7725_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	80fb      	strh	r3, [r7, #6]
	uint8_t Sensor_IDCode = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	717b      	strb	r3, [r7, #5]

	if (0 == SCCB_WriteByte(0x12, 0x80)) /*reset sensor */
 8001116:	2180      	movs	r1, #128	; 0x80
 8001118:	2012      	movs	r0, #18
 800111a:	f000 f955 	bl	80013c8 <SCCB_WriteByte>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d101      	bne.n	8001128 <Ov7725_Init+0x20>
	{
		return ERROR;
 8001124:	2300      	movs	r3, #0
 8001126:	e030      	b.n	800118a <Ov7725_Init+0x82>
	}

	if (0 == SCCB_ReadByte(&Sensor_IDCode, 1, 0x0b)) /* read sensor ID*/
 8001128:	1d7b      	adds	r3, r7, #5
 800112a:	220b      	movs	r2, #11
 800112c:	2101      	movs	r1, #1
 800112e:	4618      	mov	r0, r3
 8001130:	f000 f979 	bl	8001426 <SCCB_ReadByte>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d101      	bne.n	800113e <Ov7725_Init+0x36>
	{
		return ERROR;
 800113a:	2300      	movs	r3, #0
 800113c:	e025      	b.n	800118a <Ov7725_Init+0x82>
	}
	// DEBUG("Sensor ID is 0x%x", Sensor_IDCode);

	if (Sensor_IDCode == OV7725_ID)
 800113e:	797b      	ldrb	r3, [r7, #5]
 8001140:	2b21      	cmp	r3, #33	; 0x21
 8001142:	d11f      	bne.n	8001184 <Ov7725_Init+0x7c>
	{
		for (i = 0; i < OV7725_REG_NUM; i++)
 8001144:	2300      	movs	r3, #0
 8001146:	80fb      	strh	r3, [r7, #6]
 8001148:	e015      	b.n	8001176 <Ov7725_Init+0x6e>
		{
			if (0 == SCCB_WriteByte(Sensor_Config[i].Address, Sensor_Config[i].Value))
 800114a:	88fb      	ldrh	r3, [r7, #6]
 800114c:	4a11      	ldr	r2, [pc, #68]	; (8001194 <Ov7725_Init+0x8c>)
 800114e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001152:	b29a      	uxth	r2, r3
 8001154:	88fb      	ldrh	r3, [r7, #6]
 8001156:	490f      	ldr	r1, [pc, #60]	; (8001194 <Ov7725_Init+0x8c>)
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	440b      	add	r3, r1
 800115c:	785b      	ldrb	r3, [r3, #1]
 800115e:	4619      	mov	r1, r3
 8001160:	4610      	mov	r0, r2
 8001162:	f000 f931 	bl	80013c8 <SCCB_WriteByte>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d101      	bne.n	8001170 <Ov7725_Init+0x68>
			{
				return ERROR;
 800116c:	2300      	movs	r3, #0
 800116e:	e00c      	b.n	800118a <Ov7725_Init+0x82>
		for (i = 0; i < OV7725_REG_NUM; i++)
 8001170:	88fb      	ldrh	r3, [r7, #6]
 8001172:	3301      	adds	r3, #1
 8001174:	80fb      	strh	r3, [r7, #6]
 8001176:	4b08      	ldr	r3, [pc, #32]	; (8001198 <Ov7725_Init+0x90>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	b29b      	uxth	r3, r3
 800117c:	88fa      	ldrh	r2, [r7, #6]
 800117e:	429a      	cmp	r2, r3
 8001180:	d3e3      	bcc.n	800114a <Ov7725_Init+0x42>
 8001182:	e001      	b.n	8001188 <Ov7725_Init+0x80>
			}
		}
	}
	else
	{
		return ERROR;
 8001184:	2300      	movs	r3, #0
 8001186:	e000      	b.n	800118a <Ov7725_Init+0x82>
	}

	return SUCCESS;
 8001188:	2301      	movs	r3, #1
}
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000000 	.word	0x20000000
 8001198:	2000009a 	.word	0x2000009a

0800119c <SCCB_delay>:

#define DEV_ADR  ADDR_OV7725 			 


static void SCCB_delay(void)
{	
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
   uint16_t i = 400; 
 80011a2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80011a6:	80fb      	strh	r3, [r7, #6]
   while(i) 
 80011a8:	e002      	b.n	80011b0 <SCCB_delay+0x14>
   { 
     i--; 
 80011aa:	88fb      	ldrh	r3, [r7, #6]
 80011ac:	3b01      	subs	r3, #1
 80011ae:	80fb      	strh	r3, [r7, #6]
   while(i) 
 80011b0:	88fb      	ldrh	r3, [r7, #6]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d1f9      	bne.n	80011aa <SCCB_delay+0xe>
   } 
}
 80011b6:	bf00      	nop
 80011b8:	bf00      	nop
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	bc80      	pop	{r7}
 80011c0:	4770      	bx	lr
	...

080011c4 <SCCB_Start>:


static int SCCB_Start(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
	SDA_H;
 80011c8:	4b13      	ldr	r3, [pc, #76]	; (8001218 <SCCB_Start+0x54>)
 80011ca:	2280      	movs	r2, #128	; 0x80
 80011cc:	611a      	str	r2, [r3, #16]
	SCL_H;
 80011ce:	4b12      	ldr	r3, [pc, #72]	; (8001218 <SCCB_Start+0x54>)
 80011d0:	2240      	movs	r2, #64	; 0x40
 80011d2:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 80011d4:	f7ff ffe2 	bl	800119c <SCCB_delay>
	if(!SDA_read)
 80011d8:	2180      	movs	r1, #128	; 0x80
 80011da:	480f      	ldr	r0, [pc, #60]	; (8001218 <SCCB_Start+0x54>)
 80011dc:	f005 f8d8 	bl	8006390 <HAL_GPIO_ReadPin>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d101      	bne.n	80011ea <SCCB_Start+0x26>
	return DISABLE;	
 80011e6:	2300      	movs	r3, #0
 80011e8:	e013      	b.n	8001212 <SCCB_Start+0x4e>
	SDA_L;
 80011ea:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <SCCB_Start+0x54>)
 80011ec:	2280      	movs	r2, #128	; 0x80
 80011ee:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 80011f0:	f7ff ffd4 	bl	800119c <SCCB_delay>
	if(SDA_read) 
 80011f4:	2180      	movs	r1, #128	; 0x80
 80011f6:	4808      	ldr	r0, [pc, #32]	; (8001218 <SCCB_Start+0x54>)
 80011f8:	f005 f8ca 	bl	8006390 <HAL_GPIO_ReadPin>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <SCCB_Start+0x42>
	return DISABLE;	
 8001202:	2300      	movs	r3, #0
 8001204:	e005      	b.n	8001212 <SCCB_Start+0x4e>
	SDA_L;
 8001206:	4b04      	ldr	r3, [pc, #16]	; (8001218 <SCCB_Start+0x54>)
 8001208:	2280      	movs	r2, #128	; 0x80
 800120a:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 800120c:	f7ff ffc6 	bl	800119c <SCCB_delay>
	return ENABLE;
 8001210:	2301      	movs	r3, #1
}
 8001212:	4618      	mov	r0, r3
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40011000 	.word	0x40011000

0800121c <SCCB_Stop>:


static void SCCB_Stop(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
	SCL_L;
 8001220:	4b0a      	ldr	r3, [pc, #40]	; (800124c <SCCB_Stop+0x30>)
 8001222:	2240      	movs	r2, #64	; 0x40
 8001224:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8001226:	f7ff ffb9 	bl	800119c <SCCB_delay>
	SDA_L;
 800122a:	4b08      	ldr	r3, [pc, #32]	; (800124c <SCCB_Stop+0x30>)
 800122c:	2280      	movs	r2, #128	; 0x80
 800122e:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8001230:	f7ff ffb4 	bl	800119c <SCCB_delay>
	SCL_H;
 8001234:	4b05      	ldr	r3, [pc, #20]	; (800124c <SCCB_Stop+0x30>)
 8001236:	2240      	movs	r2, #64	; 0x40
 8001238:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 800123a:	f7ff ffaf 	bl	800119c <SCCB_delay>
	SDA_H;
 800123e:	4b03      	ldr	r3, [pc, #12]	; (800124c <SCCB_Stop+0x30>)
 8001240:	2280      	movs	r2, #128	; 0x80
 8001242:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8001244:	f7ff ffaa 	bl	800119c <SCCB_delay>
}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40011000 	.word	0x40011000

08001250 <SCCB_Ack>:


static void SCCB_Ack(void)
{	
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
	SCL_L;
 8001254:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <SCCB_Ack+0x30>)
 8001256:	2240      	movs	r2, #64	; 0x40
 8001258:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 800125a:	f7ff ff9f 	bl	800119c <SCCB_delay>
	SDA_L;
 800125e:	4b08      	ldr	r3, [pc, #32]	; (8001280 <SCCB_Ack+0x30>)
 8001260:	2280      	movs	r2, #128	; 0x80
 8001262:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8001264:	f7ff ff9a 	bl	800119c <SCCB_delay>
	SCL_H;
 8001268:	4b05      	ldr	r3, [pc, #20]	; (8001280 <SCCB_Ack+0x30>)
 800126a:	2240      	movs	r2, #64	; 0x40
 800126c:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 800126e:	f7ff ff95 	bl	800119c <SCCB_delay>
	SCL_L;
 8001272:	4b03      	ldr	r3, [pc, #12]	; (8001280 <SCCB_Ack+0x30>)
 8001274:	2240      	movs	r2, #64	; 0x40
 8001276:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8001278:	f7ff ff90 	bl	800119c <SCCB_delay>
}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40011000 	.word	0x40011000

08001284 <SCCB_NoAck>:


static void SCCB_NoAck(void)
{	
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
	SCL_L;
 8001288:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <SCCB_NoAck+0x30>)
 800128a:	2240      	movs	r2, #64	; 0x40
 800128c:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 800128e:	f7ff ff85 	bl	800119c <SCCB_delay>
	SDA_H;
 8001292:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <SCCB_NoAck+0x30>)
 8001294:	2280      	movs	r2, #128	; 0x80
 8001296:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8001298:	f7ff ff80 	bl	800119c <SCCB_delay>
	SCL_H;
 800129c:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <SCCB_NoAck+0x30>)
 800129e:	2240      	movs	r2, #64	; 0x40
 80012a0:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 80012a2:	f7ff ff7b 	bl	800119c <SCCB_delay>
	SCL_L;
 80012a6:	4b03      	ldr	r3, [pc, #12]	; (80012b4 <SCCB_NoAck+0x30>)
 80012a8:	2240      	movs	r2, #64	; 0x40
 80012aa:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 80012ac:	f7ff ff76 	bl	800119c <SCCB_delay>
}
 80012b0:	bf00      	nop
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40011000 	.word	0x40011000

080012b8 <SCCB_WaitAck>:


static int SCCB_WaitAck(void) 	
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
	SCL_L;
 80012bc:	4b10      	ldr	r3, [pc, #64]	; (8001300 <SCCB_WaitAck+0x48>)
 80012be:	2240      	movs	r2, #64	; 0x40
 80012c0:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 80012c2:	f7ff ff6b 	bl	800119c <SCCB_delay>
	SDA_H;			
 80012c6:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <SCCB_WaitAck+0x48>)
 80012c8:	2280      	movs	r2, #128	; 0x80
 80012ca:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 80012cc:	f7ff ff66 	bl	800119c <SCCB_delay>
	SCL_H;
 80012d0:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <SCCB_WaitAck+0x48>)
 80012d2:	2240      	movs	r2, #64	; 0x40
 80012d4:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 80012d6:	f7ff ff61 	bl	800119c <SCCB_delay>
	if(SDA_read)
 80012da:	2180      	movs	r1, #128	; 0x80
 80012dc:	4808      	ldr	r0, [pc, #32]	; (8001300 <SCCB_WaitAck+0x48>)
 80012de:	f005 f857 	bl	8006390 <HAL_GPIO_ReadPin>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d004      	beq.n	80012f2 <SCCB_WaitAck+0x3a>
	{
      SCL_L;
 80012e8:	4b05      	ldr	r3, [pc, #20]	; (8001300 <SCCB_WaitAck+0x48>)
 80012ea:	2240      	movs	r2, #64	; 0x40
 80012ec:	615a      	str	r2, [r3, #20]
      return DISABLE;
 80012ee:	2300      	movs	r3, #0
 80012f0:	e003      	b.n	80012fa <SCCB_WaitAck+0x42>
	}
	SCL_L;
 80012f2:	4b03      	ldr	r3, [pc, #12]	; (8001300 <SCCB_WaitAck+0x48>)
 80012f4:	2240      	movs	r2, #64	; 0x40
 80012f6:	615a      	str	r2, [r3, #20]
	return ENABLE;
 80012f8:	2301      	movs	r3, #1
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40011000 	.word	0x40011000

08001304 <SCCB_SendByte>:


static void SCCB_SendByte(uint8_t SendByte) 
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	71fb      	strb	r3, [r7, #7]
    uint8_t i=8;
 800130e:	2308      	movs	r3, #8
 8001310:	73fb      	strb	r3, [r7, #15]
    while(i--)
 8001312:	e019      	b.n	8001348 <SCCB_SendByte+0x44>
    {
        SCL_L;
 8001314:	4b12      	ldr	r3, [pc, #72]	; (8001360 <SCCB_SendByte+0x5c>)
 8001316:	2240      	movs	r2, #64	; 0x40
 8001318:	615a      	str	r2, [r3, #20]
        SCCB_delay();
 800131a:	f7ff ff3f 	bl	800119c <SCCB_delay>
      if(SendByte&0x80)
 800131e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001322:	2b00      	cmp	r3, #0
 8001324:	da03      	bge.n	800132e <SCCB_SendByte+0x2a>
        SDA_H;  
 8001326:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <SCCB_SendByte+0x5c>)
 8001328:	2280      	movs	r2, #128	; 0x80
 800132a:	611a      	str	r2, [r3, #16]
 800132c:	e002      	b.n	8001334 <SCCB_SendByte+0x30>
      else 
        SDA_L;   
 800132e:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <SCCB_SendByte+0x5c>)
 8001330:	2280      	movs	r2, #128	; 0x80
 8001332:	615a      	str	r2, [r3, #20]
        SendByte<<=1;
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	71fb      	strb	r3, [r7, #7]
        SCCB_delay();
 800133a:	f7ff ff2f 	bl	800119c <SCCB_delay>
		SCL_H;
 800133e:	4b08      	ldr	r3, [pc, #32]	; (8001360 <SCCB_SendByte+0x5c>)
 8001340:	2240      	movs	r2, #64	; 0x40
 8001342:	611a      	str	r2, [r3, #16]
        SCCB_delay();
 8001344:	f7ff ff2a 	bl	800119c <SCCB_delay>
    while(i--)
 8001348:	7bfb      	ldrb	r3, [r7, #15]
 800134a:	1e5a      	subs	r2, r3, #1
 800134c:	73fa      	strb	r2, [r7, #15]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1e0      	bne.n	8001314 <SCCB_SendByte+0x10>
    }
    SCL_L;
 8001352:	4b03      	ldr	r3, [pc, #12]	; (8001360 <SCCB_SendByte+0x5c>)
 8001354:	2240      	movs	r2, #64	; 0x40
 8001356:	615a      	str	r2, [r3, #20]
}
 8001358:	bf00      	nop
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40011000 	.word	0x40011000

08001364 <SCCB_ReceiveByte>:


static int SCCB_ReceiveByte(void)  
{ 
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
    uint8_t i=8;
 800136a:	2308      	movs	r3, #8
 800136c:	71fb      	strb	r3, [r7, #7]
    uint8_t ReceiveByte=0;
 800136e:	2300      	movs	r3, #0
 8001370:	71bb      	strb	r3, [r7, #6]

    SDA_H;				
 8001372:	4b14      	ldr	r3, [pc, #80]	; (80013c4 <SCCB_ReceiveByte+0x60>)
 8001374:	2280      	movs	r2, #128	; 0x80
 8001376:	611a      	str	r2, [r3, #16]
    while(i--)
 8001378:	e017      	b.n	80013aa <SCCB_ReceiveByte+0x46>
    {
      ReceiveByte<<=1;      
 800137a:	79bb      	ldrb	r3, [r7, #6]
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	71bb      	strb	r3, [r7, #6]
      SCL_L;
 8001380:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <SCCB_ReceiveByte+0x60>)
 8001382:	2240      	movs	r2, #64	; 0x40
 8001384:	615a      	str	r2, [r3, #20]
      SCCB_delay();
 8001386:	f7ff ff09 	bl	800119c <SCCB_delay>
	  SCL_H;
 800138a:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <SCCB_ReceiveByte+0x60>)
 800138c:	2240      	movs	r2, #64	; 0x40
 800138e:	611a      	str	r2, [r3, #16]
      SCCB_delay();	
 8001390:	f7ff ff04 	bl	800119c <SCCB_delay>
      if(SDA_read)
 8001394:	2180      	movs	r1, #128	; 0x80
 8001396:	480b      	ldr	r0, [pc, #44]	; (80013c4 <SCCB_ReceiveByte+0x60>)
 8001398:	f004 fffa 	bl	8006390 <HAL_GPIO_ReadPin>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d003      	beq.n	80013aa <SCCB_ReceiveByte+0x46>
      {
        ReceiveByte|=0x01;
 80013a2:	79bb      	ldrb	r3, [r7, #6]
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	71bb      	strb	r3, [r7, #6]
    while(i--)
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	1e5a      	subs	r2, r3, #1
 80013ae:	71fa      	strb	r2, [r7, #7]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d1e2      	bne.n	800137a <SCCB_ReceiveByte+0x16>
      }
    }
    SCL_L;
 80013b4:	4b03      	ldr	r3, [pc, #12]	; (80013c4 <SCCB_ReceiveByte+0x60>)
 80013b6:	2240      	movs	r2, #64	; 0x40
 80013b8:	615a      	str	r2, [r3, #20]
    return ReceiveByte;
 80013ba:	79bb      	ldrb	r3, [r7, #6]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40011000 	.word	0x40011000

080013c8 <SCCB_WriteByte>:

          
int SCCB_WriteByte( uint16_t WriteAddress , uint8_t SendByte )
{		
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	460a      	mov	r2, r1
 80013d2:	80fb      	strh	r3, [r7, #6]
 80013d4:	4613      	mov	r3, r2
 80013d6:	717b      	strb	r3, [r7, #5]
    if(!SCCB_Start())
 80013d8:	f7ff fef4 	bl	80011c4 <SCCB_Start>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d101      	bne.n	80013e6 <SCCB_WriteByte+0x1e>
	{
	    return DISABLE;
 80013e2:	2300      	movs	r3, #0
 80013e4:	e01b      	b.n	800141e <SCCB_WriteByte+0x56>
	}
    SCCB_SendByte( DEV_ADR );                
 80013e6:	2042      	movs	r0, #66	; 0x42
 80013e8:	f7ff ff8c 	bl	8001304 <SCCB_SendByte>
    if( !SCCB_WaitAck() )
 80013ec:	f7ff ff64 	bl	80012b8 <SCCB_WaitAck>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d103      	bne.n	80013fe <SCCB_WriteByte+0x36>
	{
		SCCB_Stop(); 
 80013f6:	f7ff ff11 	bl	800121c <SCCB_Stop>
		return DISABLE;
 80013fa:	2300      	movs	r3, #0
 80013fc:	e00f      	b.n	800141e <SCCB_WriteByte+0x56>
	}
    SCCB_SendByte((uint8_t)(WriteAddress & 0x00FF));  
 80013fe:	88fb      	ldrh	r3, [r7, #6]
 8001400:	b2db      	uxtb	r3, r3
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff ff7e 	bl	8001304 <SCCB_SendByte>
    SCCB_WaitAck();	
 8001408:	f7ff ff56 	bl	80012b8 <SCCB_WaitAck>
    SCCB_SendByte(SendByte);
 800140c:	797b      	ldrb	r3, [r7, #5]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff ff78 	bl	8001304 <SCCB_SendByte>
    SCCB_WaitAck();   
 8001414:	f7ff ff50 	bl	80012b8 <SCCB_WaitAck>
    SCCB_Stop(); 
 8001418:	f7ff ff00 	bl	800121c <SCCB_Stop>
    return ENABLE;
 800141c:	2301      	movs	r3, #1
}
 800141e:	4618      	mov	r0, r3
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <SCCB_ReadByte>:

          
int SCCB_ReadByte(uint8_t* pBuffer, uint16_t length, uint8_t ReadAddress)
{	
 8001426:	b580      	push	{r7, lr}
 8001428:	b082      	sub	sp, #8
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
 800142e:	460b      	mov	r3, r1
 8001430:	807b      	strh	r3, [r7, #2]
 8001432:	4613      	mov	r3, r2
 8001434:	707b      	strb	r3, [r7, #1]
    if(!SCCB_Start())
 8001436:	f7ff fec5 	bl	80011c4 <SCCB_Start>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d101      	bne.n	8001444 <SCCB_ReadByte+0x1e>
	{
	    return DISABLE;
 8001440:	2300      	movs	r3, #0
 8001442:	e040      	b.n	80014c6 <SCCB_ReadByte+0xa0>
	}
    SCCB_SendByte( DEV_ADR );       
 8001444:	2042      	movs	r0, #66	; 0x42
 8001446:	f7ff ff5d 	bl	8001304 <SCCB_SendByte>
    if( !SCCB_WaitAck() )
 800144a:	f7ff ff35 	bl	80012b8 <SCCB_WaitAck>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d103      	bne.n	800145c <SCCB_ReadByte+0x36>
	{
		SCCB_Stop(); 
 8001454:	f7ff fee2 	bl	800121c <SCCB_Stop>
		return DISABLE;
 8001458:	2300      	movs	r3, #0
 800145a:	e034      	b.n	80014c6 <SCCB_ReadByte+0xa0>
	}
    SCCB_SendByte( ReadAddress );     
 800145c:	787b      	ldrb	r3, [r7, #1]
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff ff50 	bl	8001304 <SCCB_SendByte>
    SCCB_WaitAck();	
 8001464:	f7ff ff28 	bl	80012b8 <SCCB_WaitAck>
    SCCB_Stop(); 
 8001468:	f7ff fed8 	bl	800121c <SCCB_Stop>
	
    if(!SCCB_Start())
 800146c:	f7ff feaa 	bl	80011c4 <SCCB_Start>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d101      	bne.n	800147a <SCCB_ReadByte+0x54>
	{
		return DISABLE;
 8001476:	2300      	movs	r3, #0
 8001478:	e025      	b.n	80014c6 <SCCB_ReadByte+0xa0>
	}
    SCCB_SendByte( DEV_ADR + 1 );   
 800147a:	2043      	movs	r0, #67	; 0x43
 800147c:	f7ff ff42 	bl	8001304 <SCCB_SendByte>
    if(!SCCB_WaitAck())
 8001480:	f7ff ff1a 	bl	80012b8 <SCCB_WaitAck>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d117      	bne.n	80014ba <SCCB_ReadByte+0x94>
	{
		SCCB_Stop(); 
 800148a:	f7ff fec7 	bl	800121c <SCCB_Stop>
		return DISABLE;
 800148e:	2300      	movs	r3, #0
 8001490:	e019      	b.n	80014c6 <SCCB_ReadByte+0xa0>
	}
    while(length)
    {
      *pBuffer = SCCB_ReceiveByte();
 8001492:	f7ff ff67 	bl	8001364 <SCCB_ReceiveByte>
 8001496:	4603      	mov	r3, r0
 8001498:	b2da      	uxtb	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	701a      	strb	r2, [r3, #0]
      if(length == 1)
 800149e:	887b      	ldrh	r3, [r7, #2]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d102      	bne.n	80014aa <SCCB_ReadByte+0x84>
	  {
		  SCCB_NoAck();
 80014a4:	f7ff feee 	bl	8001284 <SCCB_NoAck>
 80014a8:	e001      	b.n	80014ae <SCCB_ReadByte+0x88>
	  }
      else
	  {
		SCCB_Ack(); 
 80014aa:	f7ff fed1 	bl	8001250 <SCCB_Ack>
	  }
      pBuffer++;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	3301      	adds	r3, #1
 80014b2:	607b      	str	r3, [r7, #4]
      length--;
 80014b4:	887b      	ldrh	r3, [r7, #2]
 80014b6:	3b01      	subs	r3, #1
 80014b8:	807b      	strh	r3, [r7, #2]
    while(length)
 80014ba:	887b      	ldrh	r3, [r7, #2]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d1e8      	bne.n	8001492 <SCCB_ReadByte+0x6c>
    }
    SCCB_Stop();
 80014c0:	f7ff feac 	bl	800121c <SCCB_Stop>
    return ENABLE;
 80014c4:	2301      	movs	r3, #1
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
	...

080014d0 <rgb2hsv>:
							 44, 43, 42, 0, 0, 0, 0, 0, 0};
uint16_t midterm_order[12] = {BLUE, RED, GREEN, ORANGE, WHITE, BLACK, BLUE, RED, GREEN, ORANGE, WHITE, BLACK};

// rgb to hsv
void rgb2hsv(uint16_t rgb, float *h, float *s, float *v)
{
 80014d0:	b590      	push	{r4, r7, lr}
 80014d2:	b089      	sub	sp, #36	; 0x24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60b9      	str	r1, [r7, #8]
 80014d8:	607a      	str	r2, [r7, #4]
 80014da:	603b      	str	r3, [r7, #0]
 80014dc:	4603      	mov	r3, r0
 80014de:	81fb      	strh	r3, [r7, #14]
	uint16_t r = (rgb >> 11) & 0x1f;
 80014e0:	89fb      	ldrh	r3, [r7, #14]
 80014e2:	0adb      	lsrs	r3, r3, #11
 80014e4:	83fb      	strh	r3, [r7, #30]
	uint16_t g = (rgb >> 5) & 0x3f;
 80014e6:	89fb      	ldrh	r3, [r7, #14]
 80014e8:	095b      	lsrs	r3, r3, #5
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014f0:	83bb      	strh	r3, [r7, #28]
	uint16_t b = rgb & 0x1f;
 80014f2:	89fb      	ldrh	r3, [r7, #14]
 80014f4:	f003 031f 	and.w	r3, r3, #31
 80014f8:	837b      	strh	r3, [r7, #26]
	float max = r > g ? r : g;
 80014fa:	8bba      	ldrh	r2, [r7, #28]
 80014fc:	8bfb      	ldrh	r3, [r7, #30]
 80014fe:	4293      	cmp	r3, r2
 8001500:	bf38      	it	cc
 8001502:	4613      	movcc	r3, r2
 8001504:	b29b      	uxth	r3, r3
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff fbbe 	bl	8000c88 <__aeabi_i2f>
 800150c:	4603      	mov	r3, r0
 800150e:	617b      	str	r3, [r7, #20]
	max = max > b ? max : b;
 8001510:	8b7b      	ldrh	r3, [r7, #26]
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff fbb8 	bl	8000c88 <__aeabi_i2f>
 8001518:	4603      	mov	r3, r0
 800151a:	4619      	mov	r1, r3
 800151c:	6978      	ldr	r0, [r7, #20]
 800151e:	f7ff fdc3 	bl	80010a8 <__aeabi_fcmpgt>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <rgb2hsv+0x5c>
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	e004      	b.n	8001536 <rgb2hsv+0x66>
 800152c:	8b7b      	ldrh	r3, [r7, #26]
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff fbaa 	bl	8000c88 <__aeabi_i2f>
 8001534:	4603      	mov	r3, r0
 8001536:	617b      	str	r3, [r7, #20]
	float min = r < g ? r : g;
 8001538:	8bba      	ldrh	r2, [r7, #28]
 800153a:	8bfb      	ldrh	r3, [r7, #30]
 800153c:	4293      	cmp	r3, r2
 800153e:	bf28      	it	cs
 8001540:	4613      	movcs	r3, r2
 8001542:	b29b      	uxth	r3, r3
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fb9f 	bl	8000c88 <__aeabi_i2f>
 800154a:	4603      	mov	r3, r0
 800154c:	613b      	str	r3, [r7, #16]
	min = min < b ? min : b;
 800154e:	8b7b      	ldrh	r3, [r7, #26]
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff fb99 	bl	8000c88 <__aeabi_i2f>
 8001556:	4603      	mov	r3, r0
 8001558:	4619      	mov	r1, r3
 800155a:	6938      	ldr	r0, [r7, #16]
 800155c:	f7ff fd86 	bl	800106c <__aeabi_fcmplt>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <rgb2hsv+0x9a>
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	e004      	b.n	8001574 <rgb2hsv+0xa4>
 800156a:	8b7b      	ldrh	r3, [r7, #26]
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff fb8b 	bl	8000c88 <__aeabi_i2f>
 8001572:	4603      	mov	r3, r0
 8001574:	613b      	str	r3, [r7, #16]
	*v = max;
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	697a      	ldr	r2, [r7, #20]
 800157a:	601a      	str	r2, [r3, #0]
	if (max == 0)
 800157c:	f04f 0100 	mov.w	r1, #0
 8001580:	6978      	ldr	r0, [r7, #20]
 8001582:	f7ff fd69 	bl	8001058 <__aeabi_fcmpeq>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d008      	beq.n	800159e <rgb2hsv+0xce>
	{
		*s = 0;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f04f 0200 	mov.w	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
		*h = 0;
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	f04f 0200 	mov.w	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
		return;
 800159c:	e080      	b.n	80016a0 <rgb2hsv+0x1d0>
	}
	*s = 255 * (max - min) / max;
 800159e:	6939      	ldr	r1, [r7, #16]
 80015a0:	6978      	ldr	r0, [r7, #20]
 80015a2:	f7ff fabb 	bl	8000b1c <__aeabi_fsub>
 80015a6:	4603      	mov	r3, r0
 80015a8:	493f      	ldr	r1, [pc, #252]	; (80016a8 <rgb2hsv+0x1d8>)
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff fbc0 	bl	8000d30 <__aeabi_fmul>
 80015b0:	4603      	mov	r3, r0
 80015b2:	6979      	ldr	r1, [r7, #20]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff fc6f 	bl	8000e98 <__aeabi_fdiv>
 80015ba:	4603      	mov	r3, r0
 80015bc:	461a      	mov	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	601a      	str	r2, [r3, #0]
	if (r == max)
 80015c2:	8bfb      	ldrh	r3, [r7, #30]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff fb5f 	bl	8000c88 <__aeabi_i2f>
 80015ca:	4603      	mov	r3, r0
 80015cc:	4619      	mov	r1, r3
 80015ce:	6978      	ldr	r0, [r7, #20]
 80015d0:	f7ff fd42 	bl	8001058 <__aeabi_fcmpeq>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d01d      	beq.n	8001616 <rgb2hsv+0x146>
	{
		*h = 0 + 43 * (g - b) / (max - min);
 80015da:	8bba      	ldrh	r2, [r7, #28]
 80015dc:	8b7b      	ldrh	r3, [r7, #26]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	222b      	movs	r2, #43	; 0x2b
 80015e2:	fb02 f303 	mul.w	r3, r2, r3
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff fb4e 	bl	8000c88 <__aeabi_i2f>
 80015ec:	4604      	mov	r4, r0
 80015ee:	6939      	ldr	r1, [r7, #16]
 80015f0:	6978      	ldr	r0, [r7, #20]
 80015f2:	f7ff fa93 	bl	8000b1c <__aeabi_fsub>
 80015f6:	4603      	mov	r3, r0
 80015f8:	4619      	mov	r1, r3
 80015fa:	4620      	mov	r0, r4
 80015fc:	f7ff fc4c 	bl	8000e98 <__aeabi_fdiv>
 8001600:	4603      	mov	r3, r0
 8001602:	f04f 0100 	mov.w	r1, #0
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff fa8a 	bl	8000b20 <__addsf3>
 800160c:	4603      	mov	r3, r0
 800160e:	461a      	mov	r2, r3
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	e044      	b.n	80016a0 <rgb2hsv+0x1d0>
	}
	else if (g == max)
 8001616:	8bbb      	ldrh	r3, [r7, #28]
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff fb35 	bl	8000c88 <__aeabi_i2f>
 800161e:	4603      	mov	r3, r0
 8001620:	4619      	mov	r1, r3
 8001622:	6978      	ldr	r0, [r7, #20]
 8001624:	f7ff fd18 	bl	8001058 <__aeabi_fcmpeq>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d01c      	beq.n	8001668 <rgb2hsv+0x198>
	{
		*h = 85 + 43 * (b - r) / (max - min);
 800162e:	8b7a      	ldrh	r2, [r7, #26]
 8001630:	8bfb      	ldrh	r3, [r7, #30]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	222b      	movs	r2, #43	; 0x2b
 8001636:	fb02 f303 	mul.w	r3, r2, r3
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff fb24 	bl	8000c88 <__aeabi_i2f>
 8001640:	4604      	mov	r4, r0
 8001642:	6939      	ldr	r1, [r7, #16]
 8001644:	6978      	ldr	r0, [r7, #20]
 8001646:	f7ff fa69 	bl	8000b1c <__aeabi_fsub>
 800164a:	4603      	mov	r3, r0
 800164c:	4619      	mov	r1, r3
 800164e:	4620      	mov	r0, r4
 8001650:	f7ff fc22 	bl	8000e98 <__aeabi_fdiv>
 8001654:	4603      	mov	r3, r0
 8001656:	4915      	ldr	r1, [pc, #84]	; (80016ac <rgb2hsv+0x1dc>)
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff fa61 	bl	8000b20 <__addsf3>
 800165e:	4603      	mov	r3, r0
 8001660:	461a      	mov	r2, r3
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	e01b      	b.n	80016a0 <rgb2hsv+0x1d0>
	}
	else
	{
		*h = 171 + 43 * (r - g) / (max - min);
 8001668:	8bfa      	ldrh	r2, [r7, #30]
 800166a:	8bbb      	ldrh	r3, [r7, #28]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	222b      	movs	r2, #43	; 0x2b
 8001670:	fb02 f303 	mul.w	r3, r2, r3
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff fb07 	bl	8000c88 <__aeabi_i2f>
 800167a:	4604      	mov	r4, r0
 800167c:	6939      	ldr	r1, [r7, #16]
 800167e:	6978      	ldr	r0, [r7, #20]
 8001680:	f7ff fa4c 	bl	8000b1c <__aeabi_fsub>
 8001684:	4603      	mov	r3, r0
 8001686:	4619      	mov	r1, r3
 8001688:	4620      	mov	r0, r4
 800168a:	f7ff fc05 	bl	8000e98 <__aeabi_fdiv>
 800168e:	4603      	mov	r3, r0
 8001690:	4907      	ldr	r1, [pc, #28]	; (80016b0 <rgb2hsv+0x1e0>)
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff fa44 	bl	8000b20 <__addsf3>
 8001698:	4603      	mov	r3, r0
 800169a:	461a      	mov	r2, r3
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	601a      	str	r2, [r3, #0]
	}
}
 80016a0:	3724      	adds	r7, #36	; 0x24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd90      	pop	{r4, r7, pc}
 80016a6:	bf00      	nop
 80016a8:	437f0000 	.word	0x437f0000
 80016ac:	42aa0000 	.word	0x42aa0000
 80016b0:	432b0000 	.word	0x432b0000

080016b4 <KNearest_match>:

void KNearest_match(uint16_t square_colors[9], uint16_t real_colors[9], uint8_t times, char *face, uint8_t bt_flags)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08a      	sub	sp, #40	; 0x28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	603b      	str	r3, [r7, #0]
 80016c0:	4613      	mov	r3, r2
 80016c2:	71fb      	strb	r3, [r7, #7]
	float h = 0;
 80016c4:	f04f 0300 	mov.w	r3, #0
 80016c8:	61fb      	str	r3, [r7, #28]
	float s = 0;
 80016ca:	f04f 0300 	mov.w	r3, #0
 80016ce:	61bb      	str	r3, [r7, #24]
	float v = 0;
 80016d0:	f04f 0300 	mov.w	r3, #0
 80016d4:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 9; i++)
 80016d6:	2300      	movs	r3, #0
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
 80016da:	e093      	b.n	8001804 <KNearest_match+0x150>
	{
		uint16_t temp = square_colors[i];
 80016dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	68fa      	ldr	r2, [r7, #12]
 80016e2:	4413      	add	r3, r2
 80016e4:	881b      	ldrh	r3, [r3, #0]
 80016e6:	843b      	strh	r3, [r7, #32]
		rgb2hsv(square_colors[i], &h, &s, &v);
 80016e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	68fa      	ldr	r2, [r7, #12]
 80016ee:	4413      	add	r3, r2
 80016f0:	8818      	ldrh	r0, [r3, #0]
 80016f2:	f107 0314 	add.w	r3, r7, #20
 80016f6:	f107 0218 	add.w	r2, r7, #24
 80016fa:	f107 011c 	add.w	r1, r7, #28
 80016fe:	f7ff fee7 	bl	80014d0 <rgb2hsv>
		uint8_t index = 0;
 8001702:	2300      	movs	r3, #0
 8001704:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		// red
		if (s < 185 && h > 80)
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	4943      	ldr	r1, [pc, #268]	; (8001818 <KNearest_match+0x164>)
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff fcad 	bl	800106c <__aeabi_fcmplt>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d00b      	beq.n	8001730 <KNearest_match+0x7c>
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	4940      	ldr	r1, [pc, #256]	; (800181c <KNearest_match+0x168>)
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff fcc3 	bl	80010a8 <__aeabi_fcmpgt>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d003      	beq.n	8001730 <KNearest_match+0x7c>
			index = 4;
 8001728:	2304      	movs	r3, #4
 800172a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800172e:	e042      	b.n	80017b6 <KNearest_match+0x102>
		else if (h < 25 || h > 336)
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	493b      	ldr	r1, [pc, #236]	; (8001820 <KNearest_match+0x16c>)
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff fc99 	bl	800106c <__aeabi_fcmplt>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d107      	bne.n	8001750 <KNearest_match+0x9c>
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	4938      	ldr	r1, [pc, #224]	; (8001824 <KNearest_match+0x170>)
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff fcaf 	bl	80010a8 <__aeabi_fcmpgt>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d003      	beq.n	8001758 <KNearest_match+0xa4>
			index = 1;
 8001750:	2301      	movs	r3, #1
 8001752:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001756:	e02e      	b.n	80017b6 <KNearest_match+0x102>
		else if (h < 55)
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	4933      	ldr	r1, [pc, #204]	; (8001828 <KNearest_match+0x174>)
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff fc85 	bl	800106c <__aeabi_fcmplt>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d003      	beq.n	8001770 <KNearest_match+0xbc>
			index = 2;
 8001768:	2302      	movs	r3, #2
 800176a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800176e:	e022      	b.n	80017b6 <KNearest_match+0x102>
		else if (h < 85)
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	492e      	ldr	r1, [pc, #184]	; (800182c <KNearest_match+0x178>)
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff fc79 	bl	800106c <__aeabi_fcmplt>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d003      	beq.n	8001788 <KNearest_match+0xd4>
			index = 3;
 8001780:	2303      	movs	r3, #3
 8001782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001786:	e016      	b.n	80017b6 <KNearest_match+0x102>
		else if (h < 110)
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	4929      	ldr	r1, [pc, #164]	; (8001830 <KNearest_match+0x17c>)
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff fc6d 	bl	800106c <__aeabi_fcmplt>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d003      	beq.n	80017a0 <KNearest_match+0xec>
			index = 0;
 8001798:	2300      	movs	r3, #0
 800179a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800179e:	e00a      	b.n	80017b6 <KNearest_match+0x102>
		else if (h < 200)
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	4924      	ldr	r1, [pc, #144]	; (8001834 <KNearest_match+0x180>)
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff fc61 	bl	800106c <__aeabi_fcmplt>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d002      	beq.n	80017b6 <KNearest_match+0x102>
			index = 5;
 80017b0:	2305      	movs	r3, #5
 80017b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		real_colors[i] = true_colors[index];
 80017b6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80017ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	68b9      	ldr	r1, [r7, #8]
 80017c0:	440b      	add	r3, r1
 80017c2:	491d      	ldr	r1, [pc, #116]	; (8001838 <KNearest_match+0x184>)
 80017c4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80017c8:	801a      	strh	r2, [r3, #0]
		if (bt_flags == 1)
 80017ca:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d115      	bne.n	80017fe <KNearest_match+0x14a>
		{
			if (times > 3 && i > 2)
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	2b03      	cmp	r3, #3
 80017d6:	d902      	bls.n	80017de <KNearest_match+0x12a>
 80017d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017da:	2b02      	cmp	r3, #2
 80017dc:	dc17      	bgt.n	800180e <KNearest_match+0x15a>
				break;
			face[detection_order[times * 9 + i]] = face_colors[index];
 80017de:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 80017e2:	79fa      	ldrb	r2, [r7, #7]
 80017e4:	4613      	mov	r3, r2
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	441a      	add	r2, r3
 80017ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ec:	4413      	add	r3, r2
 80017ee:	4a13      	ldr	r2, [pc, #76]	; (800183c <KNearest_match+0x188>)
 80017f0:	5cd3      	ldrb	r3, [r2, r3]
 80017f2:	461a      	mov	r2, r3
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	4413      	add	r3, r2
 80017f8:	4a11      	ldr	r2, [pc, #68]	; (8001840 <KNearest_match+0x18c>)
 80017fa:	5c52      	ldrb	r2, [r2, r1]
 80017fc:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 9; i++)
 80017fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001800:	3301      	adds	r3, #1
 8001802:	627b      	str	r3, [r7, #36]	; 0x24
 8001804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001806:	2b08      	cmp	r3, #8
 8001808:	f77f af68 	ble.w	80016dc <KNearest_match+0x28>
		}
	}
}
 800180c:	e000      	b.n	8001810 <KNearest_match+0x15c>
				break;
 800180e:	bf00      	nop
}
 8001810:	bf00      	nop
 8001812:	3728      	adds	r7, #40	; 0x28
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	43390000 	.word	0x43390000
 800181c:	42a00000 	.word	0x42a00000
 8001820:	41c80000 	.word	0x41c80000
 8001824:	43a80000 	.word	0x43a80000
 8001828:	425c0000 	.word	0x425c0000
 800182c:	42aa0000 	.word	0x42aa0000
 8001830:	42dc0000 	.word	0x42dc0000
 8001834:	43480000 	.word	0x43480000
 8001838:	2000009c 	.word	0x2000009c
 800183c:	200000b0 	.word	0x200000b0
 8001840:	200000a8 	.word	0x200000a8

08001844 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800184a:	4b0c      	ldr	r3, [pc, #48]	; (800187c <MX_DMA_Init+0x38>)
 800184c:	695b      	ldr	r3, [r3, #20]
 800184e:	4a0b      	ldr	r2, [pc, #44]	; (800187c <MX_DMA_Init+0x38>)
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	6153      	str	r3, [r2, #20]
 8001856:	4b09      	ldr	r3, [pc, #36]	; (800187c <MX_DMA_Init+0x38>)
 8001858:	695b      	ldr	r3, [r3, #20]
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	607b      	str	r3, [r7, #4]
 8001860:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001862:	2200      	movs	r2, #0
 8001864:	2100      	movs	r1, #0
 8001866:	200e      	movs	r0, #14
 8001868:	f003 ff4f 	bl	800570a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800186c:	200e      	movs	r0, #14
 800186e:	f003 ff68 	bl	8005742 <HAL_NVIC_EnableIRQ>

}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40021000 	.word	0x40021000

08001880 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b088      	sub	sp, #32
 8001884:	af00      	add	r7, sp, #0
  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001886:	1d3b      	adds	r3, r7, #4
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	60da      	str	r2, [r3, #12]
 8001892:	611a      	str	r2, [r3, #16]
 8001894:	615a      	str	r2, [r3, #20]
 8001896:	619a      	str	r2, [r3, #24]

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001898:	4b28      	ldr	r3, [pc, #160]	; (800193c <MX_FSMC_Init+0xbc>)
 800189a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800189e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80018a0:	4b26      	ldr	r3, [pc, #152]	; (800193c <MX_FSMC_Init+0xbc>)
 80018a2:	4a27      	ldr	r2, [pc, #156]	; (8001940 <MX_FSMC_Init+0xc0>)
 80018a4:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80018a6:	4b25      	ldr	r3, [pc, #148]	; (800193c <MX_FSMC_Init+0xbc>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80018ac:	4b23      	ldr	r3, [pc, #140]	; (800193c <MX_FSMC_Init+0xbc>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80018b2:	4b22      	ldr	r3, [pc, #136]	; (800193c <MX_FSMC_Init+0xbc>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80018b8:	4b20      	ldr	r3, [pc, #128]	; (800193c <MX_FSMC_Init+0xbc>)
 80018ba:	2210      	movs	r2, #16
 80018bc:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80018be:	4b1f      	ldr	r3, [pc, #124]	; (800193c <MX_FSMC_Init+0xbc>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80018c4:	4b1d      	ldr	r3, [pc, #116]	; (800193c <MX_FSMC_Init+0xbc>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80018ca:	4b1c      	ldr	r3, [pc, #112]	; (800193c <MX_FSMC_Init+0xbc>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80018d0:	4b1a      	ldr	r3, [pc, #104]	; (800193c <MX_FSMC_Init+0xbc>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80018d6:	4b19      	ldr	r3, [pc, #100]	; (800193c <MX_FSMC_Init+0xbc>)
 80018d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018dc:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80018de:	4b17      	ldr	r3, [pc, #92]	; (800193c <MX_FSMC_Init+0xbc>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80018e4:	4b15      	ldr	r3, [pc, #84]	; (800193c <MX_FSMC_Init+0xbc>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80018ea:	4b14      	ldr	r3, [pc, #80]	; (800193c <MX_FSMC_Init+0xbc>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80018f0:	4b12      	ldr	r3, [pc, #72]	; (800193c <MX_FSMC_Init+0xbc>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 80018f6:	230f      	movs	r3, #15
 80018f8:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80018fa:	230f      	movs	r3, #15
 80018fc:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80018fe:	23ff      	movs	r3, #255	; 0xff
 8001900:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001902:	230f      	movs	r3, #15
 8001904:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001906:	2310      	movs	r3, #16
 8001908:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800190a:	2311      	movs	r3, #17
 800190c:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800190e:	2300      	movs	r3, #0
 8001910:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001912:	1d3b      	adds	r3, r7, #4
 8001914:	2200      	movs	r2, #0
 8001916:	4619      	mov	r1, r3
 8001918:	4808      	ldr	r0, [pc, #32]	; (800193c <MX_FSMC_Init+0xbc>)
 800191a:	f005 f9bb 	bl	8006c94 <HAL_SRAM_Init>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 8001924:	f001 fcdb 	bl	80032de <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8001928:	4b06      	ldr	r3, [pc, #24]	; (8001944 <MX_FSMC_Init+0xc4>)
 800192a:	69db      	ldr	r3, [r3, #28]
 800192c:	4a05      	ldr	r2, [pc, #20]	; (8001944 <MX_FSMC_Init+0xc4>)
 800192e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001932:	61d3      	str	r3, [r2, #28]

}
 8001934:	bf00      	nop
 8001936:	3720      	adds	r7, #32
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20000268 	.word	0x20000268
 8001940:	a0000104 	.word	0xa0000104
 8001944:	40010000 	.word	0x40010000

08001948 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194e:	f107 0308 	add.w	r3, r7, #8
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	605a      	str	r2, [r3, #4]
 8001958:	609a      	str	r2, [r3, #8]
 800195a:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 800195c:	4b18      	ldr	r3, [pc, #96]	; (80019c0 <HAL_FSMC_MspInit+0x78>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d129      	bne.n	80019b8 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8001964:	4b16      	ldr	r3, [pc, #88]	; (80019c0 <HAL_FSMC_MspInit+0x78>)
 8001966:	2201      	movs	r2, #1
 8001968:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800196a:	4b16      	ldr	r3, [pc, #88]	; (80019c4 <HAL_FSMC_MspInit+0x7c>)
 800196c:	695b      	ldr	r3, [r3, #20]
 800196e:	4a15      	ldr	r2, [pc, #84]	; (80019c4 <HAL_FSMC_MspInit+0x7c>)
 8001970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001974:	6153      	str	r3, [r2, #20]
 8001976:	4b13      	ldr	r3, [pc, #76]	; (80019c4 <HAL_FSMC_MspInit+0x7c>)
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800197e:	607b      	str	r3, [r7, #4]
 8001980:	687b      	ldr	r3, [r7, #4]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001982:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001986:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001988:	2302      	movs	r3, #2
 800198a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800198c:	2303      	movs	r3, #3
 800198e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001990:	f107 0308 	add.w	r3, r7, #8
 8001994:	4619      	mov	r1, r3
 8001996:	480c      	ldr	r0, [pc, #48]	; (80019c8 <HAL_FSMC_MspInit+0x80>)
 8001998:	f004 fb62 	bl	8006060 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800199c:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 80019a0:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a2:	2302      	movs	r3, #2
 80019a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019a6:	2303      	movs	r3, #3
 80019a8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019aa:	f107 0308 	add.w	r3, r7, #8
 80019ae:	4619      	mov	r1, r3
 80019b0:	4806      	ldr	r0, [pc, #24]	; (80019cc <HAL_FSMC_MspInit+0x84>)
 80019b2:	f004 fb55 	bl	8006060 <HAL_GPIO_Init>
 80019b6:	e000      	b.n	80019ba <HAL_FSMC_MspInit+0x72>
    return;
 80019b8:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80019ba:	3718      	adds	r7, #24
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	200002ac 	.word	0x200002ac
 80019c4:	40021000 	.word	0x40021000
 80019c8:	40011800 	.word	0x40011800
 80019cc:	40011400 	.word	0x40011400

080019d0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80019d8:	f7ff ffb6 	bl	8001948 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80019dc:	bf00      	nop
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08a      	sub	sp, #40	; 0x28
 80019e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ea:	f107 0318 	add.w	r3, r7, #24
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	605a      	str	r2, [r3, #4]
 80019f4:	609a      	str	r2, [r3, #8]
 80019f6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019f8:	4b86      	ldr	r3, [pc, #536]	; (8001c14 <MX_GPIO_Init+0x230>)
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	4a85      	ldr	r2, [pc, #532]	; (8001c14 <MX_GPIO_Init+0x230>)
 80019fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a02:	6193      	str	r3, [r2, #24]
 8001a04:	4b83      	ldr	r3, [pc, #524]	; (8001c14 <MX_GPIO_Init+0x230>)
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a0c:	617b      	str	r3, [r7, #20]
 8001a0e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a10:	4b80      	ldr	r3, [pc, #512]	; (8001c14 <MX_GPIO_Init+0x230>)
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	4a7f      	ldr	r2, [pc, #508]	; (8001c14 <MX_GPIO_Init+0x230>)
 8001a16:	f043 0310 	orr.w	r3, r3, #16
 8001a1a:	6193      	str	r3, [r2, #24]
 8001a1c:	4b7d      	ldr	r3, [pc, #500]	; (8001c14 <MX_GPIO_Init+0x230>)
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	f003 0310 	and.w	r3, r3, #16
 8001a24:	613b      	str	r3, [r7, #16]
 8001a26:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a28:	4b7a      	ldr	r3, [pc, #488]	; (8001c14 <MX_GPIO_Init+0x230>)
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	4a79      	ldr	r2, [pc, #484]	; (8001c14 <MX_GPIO_Init+0x230>)
 8001a2e:	f043 0304 	orr.w	r3, r3, #4
 8001a32:	6193      	str	r3, [r2, #24]
 8001a34:	4b77      	ldr	r3, [pc, #476]	; (8001c14 <MX_GPIO_Init+0x230>)
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	f003 0304 	and.w	r3, r3, #4
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a40:	4b74      	ldr	r3, [pc, #464]	; (8001c14 <MX_GPIO_Init+0x230>)
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	4a73      	ldr	r2, [pc, #460]	; (8001c14 <MX_GPIO_Init+0x230>)
 8001a46:	f043 0308 	orr.w	r3, r3, #8
 8001a4a:	6193      	str	r3, [r2, #24]
 8001a4c:	4b71      	ldr	r3, [pc, #452]	; (8001c14 <MX_GPIO_Init+0x230>)
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	f003 0308 	and.w	r3, r3, #8
 8001a54:	60bb      	str	r3, [r7, #8]
 8001a56:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a58:	4b6e      	ldr	r3, [pc, #440]	; (8001c14 <MX_GPIO_Init+0x230>)
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	4a6d      	ldr	r2, [pc, #436]	; (8001c14 <MX_GPIO_Init+0x230>)
 8001a5e:	f043 0320 	orr.w	r3, r3, #32
 8001a62:	6193      	str	r3, [r2, #24]
 8001a64:	4b6b      	ldr	r3, [pc, #428]	; (8001c14 <MX_GPIO_Init+0x230>)
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	f003 0320 	and.w	r3, r3, #32
 8001a6c:	607b      	str	r3, [r7, #4]
 8001a6e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001a70:	2200      	movs	r2, #0
 8001a72:	2107      	movs	r1, #7
 8001a74:	4868      	ldr	r0, [pc, #416]	; (8001c18 <MX_GPIO_Init+0x234>)
 8001a76:	f004 fca2 	bl	80063be <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8, GPIO_PIN_RESET);
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8001a80:	4866      	ldr	r0, [pc, #408]	; (8001c1c <MX_GPIO_Init+0x238>)
 8001a82:	f004 fc9c 	bl	80063be <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001a86:	2200      	movs	r2, #0
 8001a88:	21f0      	movs	r1, #240	; 0xf0
 8001a8a:	4865      	ldr	r0, [pc, #404]	; (8001c20 <MX_GPIO_Init+0x23c>)
 8001a8c:	f004 fc97 	bl	80063be <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_3, GPIO_PIN_RESET);
 8001a90:	2200      	movs	r2, #0
 8001a92:	f241 0108 	movw	r1, #4104	; 0x1008
 8001a96:	4863      	ldr	r0, [pc, #396]	; (8001c24 <MX_GPIO_Init+0x240>)
 8001a98:	f004 fc91 	bl	80063be <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_0;
 8001a9c:	2305      	movs	r3, #5
 8001a9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001aac:	f107 0318 	add.w	r3, r7, #24
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4859      	ldr	r0, [pc, #356]	; (8001c18 <MX_GPIO_Init+0x234>)
 8001ab4:	f004 fad4 	bl	8006060 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ab8:	2308      	movs	r3, #8
 8001aba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001abc:	2300      	movs	r3, #0
 8001abe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ac4:	f107 0318 	add.w	r3, r7, #24
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4853      	ldr	r0, [pc, #332]	; (8001c18 <MX_GPIO_Init+0x234>)
 8001acc:	f004 fac8 	bl	8006060 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ad0:	2310      	movs	r3, #16
 8001ad2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ad4:	4b54      	ldr	r3, [pc, #336]	; (8001c28 <MX_GPIO_Init+0x244>)
 8001ad6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001adc:	f107 0318 	add.w	r3, r7, #24
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	484d      	ldr	r0, [pc, #308]	; (8001c18 <MX_GPIO_Init+0x234>)
 8001ae4:	f004 fabc 	bl	8006060 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001ae8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001aee:	4b4e      	ldr	r3, [pc, #312]	; (8001c28 <MX_GPIO_Init+0x244>)
 8001af0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af2:	2300      	movs	r3, #0
 8001af4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001af6:	f107 0318 	add.w	r3, r7, #24
 8001afa:	4619      	mov	r1, r3
 8001afc:	4848      	ldr	r0, [pc, #288]	; (8001c20 <MX_GPIO_Init+0x23c>)
 8001afe:	f004 faaf 	bl	8006060 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b02:	2308      	movs	r3, #8
 8001b04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b06:	4b49      	ldr	r3, [pc, #292]	; (8001c2c <MX_GPIO_Init+0x248>)
 8001b08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b0e:	f107 0318 	add.w	r3, r7, #24
 8001b12:	4619      	mov	r1, r3
 8001b14:	4842      	ldr	r0, [pc, #264]	; (8001c20 <MX_GPIO_Init+0x23c>)
 8001b16:	f004 faa3 	bl	8006060 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = START_BT_Pin;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b1e:	4b42      	ldr	r3, [pc, #264]	; (8001c28 <MX_GPIO_Init+0x244>)
 8001b20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(START_BT_GPIO_Port, &GPIO_InitStruct);
 8001b26:	f107 0318 	add.w	r3, r7, #24
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	483b      	ldr	r0, [pc, #236]	; (8001c1c <MX_GPIO_Init+0x238>)
 8001b2e:	f004 fa97 	bl	8006060 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8;
 8001b32:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8001b36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b40:	2303      	movs	r3, #3
 8001b42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b44:	f107 0318 	add.w	r3, r7, #24
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4834      	ldr	r0, [pc, #208]	; (8001c1c <MX_GPIO_Init+0x238>)
 8001b4c:	f004 fa88 	bl	8006060 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001b50:	2330      	movs	r3, #48	; 0x30
 8001b52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b54:	2301      	movs	r3, #1
 8001b56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b60:	f107 0318 	add.w	r3, r7, #24
 8001b64:	4619      	mov	r1, r3
 8001b66:	482e      	ldr	r0, [pc, #184]	; (8001c20 <MX_GPIO_Init+0x23c>)
 8001b68:	f004 fa7a 	bl	8006060 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001b6c:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001b70:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b72:	2300      	movs	r3, #0
 8001b74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b7a:	f107 0318 	add.w	r3, r7, #24
 8001b7e:	4619      	mov	r1, r3
 8001b80:	482b      	ldr	r0, [pc, #172]	; (8001c30 <MX_GPIO_Init+0x24c>)
 8001b82:	f004 fa6d 	bl	8006060 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_3;
 8001b86:	f241 0308 	movw	r3, #4104	; 0x1008
 8001b8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b94:	2303      	movs	r3, #3
 8001b96:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b98:	f107 0318 	add.w	r3, r7, #24
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4821      	ldr	r0, [pc, #132]	; (8001c24 <MX_GPIO_Init+0x240>)
 8001ba0:	f004 fa5e 	bl	8006060 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ba4:	23c0      	movs	r3, #192	; 0xc0
 8001ba6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001ba8:	2311      	movs	r3, #17
 8001baa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bb4:	f107 0318 	add.w	r3, r7, #24
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4819      	ldr	r0, [pc, #100]	; (8001c20 <MX_GPIO_Init+0x23c>)
 8001bbc:	f004 fa50 	bl	8006060 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bd0:	f107 0318 	add.w	r3, r7, #24
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4810      	ldr	r0, [pc, #64]	; (8001c18 <MX_GPIO_Init+0x234>)
 8001bd8:	f004 fa42 	bl	8006060 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001bdc:	2200      	movs	r2, #0
 8001bde:	2100      	movs	r1, #0
 8001be0:	2006      	movs	r0, #6
 8001be2:	f003 fd92 	bl	800570a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001be6:	2006      	movs	r0, #6
 8001be8:	f003 fdab 	bl	8005742 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001bec:	2200      	movs	r2, #0
 8001bee:	2100      	movs	r1, #0
 8001bf0:	2009      	movs	r0, #9
 8001bf2:	f003 fd8a 	bl	800570a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001bf6:	2009      	movs	r0, #9
 8001bf8:	f003 fda3 	bl	8005742 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	2100      	movs	r1, #0
 8001c00:	200a      	movs	r0, #10
 8001c02:	f003 fd82 	bl	800570a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001c06:	200a      	movs	r0, #10
 8001c08:	f003 fd9b 	bl	8005742 <HAL_NVIC_EnableIRQ>

}
 8001c0c:	bf00      	nop
 8001c0e:	3728      	adds	r7, #40	; 0x28
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40021000 	.word	0x40021000
 8001c18:	40011800 	.word	0x40011800
 8001c1c:	40010800 	.word	0x40010800
 8001c20:	40011000 	.word	0x40011000
 8001c24:	40011400 	.word	0x40011400
 8001c28:	10110000 	.word	0x10110000
 8001c2c:	10210000 	.word	0x10210000
 8001c30:	40010c00 	.word	0x40010c00

08001c34 <Delay>:
void LCD_REG_Config(void);
void LCD_FillColor(uint32_t ulAmout_Point, uint16_t usColor);
uint16_t LCD_Read_PixelData(void);

void Delay(__IO uint32_t nCount)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
	for (; nCount != 0; nCount--)
 8001c3c:	e002      	b.n	8001c44 <Delay+0x10>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	3b01      	subs	r3, #1
 8001c42:	607b      	str	r3, [r7, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f9      	bne.n	8001c3e <Delay+0xa>
		;
}
 8001c4a:	bf00      	nop
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bc80      	pop	{r7}
 8001c54:	4770      	bx	lr

08001c56 <LCD_INIT>:

void LCD_INIT(void)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b082      	sub	sp, #8
 8001c5a:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);
 8001c5c:	2001      	movs	r0, #1
 8001c5e:	f000 f829 	bl	8001cb4 <LCD_BackLed_Control>
	LCD_Rst();
 8001c62:	f000 f80f 	bl	8001c84 <LCD_Rst>
	LCD_REG_Config();
 8001c66:	f000 f85f 	bl	8001d28 <LCD_REG_Config>
	LCD_Clear(0, 0, 240, 320, BACKGROUND);
 8001c6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c6e:	9300      	str	r3, [sp, #0]
 8001c70:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001c74:	22f0      	movs	r2, #240	; 0xf0
 8001c76:	2100      	movs	r1, #0
 8001c78:	2000      	movs	r0, #0
 8001c7a:	f000 f9e6 	bl	800204a <LCD_Clear>
}
 8001c7e:	bf00      	nop
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <LCD_Rst>:

void LCD_Rst(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8001c88:	2200      	movs	r2, #0
 8001c8a:	2102      	movs	r1, #2
 8001c8c:	4807      	ldr	r0, [pc, #28]	; (8001cac <LCD_Rst+0x28>)
 8001c8e:	f004 fb96 	bl	80063be <HAL_GPIO_WritePin>
	Delay(0xAFFf << 2);
 8001c92:	4807      	ldr	r0, [pc, #28]	; (8001cb0 <LCD_Rst+0x2c>)
 8001c94:	f7ff ffce 	bl	8001c34 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8001c98:	2201      	movs	r2, #1
 8001c9a:	2102      	movs	r1, #2
 8001c9c:	4803      	ldr	r0, [pc, #12]	; (8001cac <LCD_Rst+0x28>)
 8001c9e:	f004 fb8e 	bl	80063be <HAL_GPIO_WritePin>
	Delay(0xAFFf << 2);
 8001ca2:	4803      	ldr	r0, [pc, #12]	; (8001cb0 <LCD_Rst+0x2c>)
 8001ca4:	f7ff ffc6 	bl	8001c34 <Delay>
}
 8001ca8:	bf00      	nop
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40011800 	.word	0x40011800
 8001cb0:	0002bffc 	.word	0x0002bffc

08001cb4 <LCD_BackLed_Control>:

void LCD_BackLed_Control(FunctionalState enumState)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	71fb      	strb	r3, [r7, #7]
	if (enumState)
 8001cbe:	79fb      	ldrb	r3, [r7, #7]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d006      	beq.n	8001cd2 <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT, LCD_BK_PIN, GPIO_PIN_RESET);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cca:	4807      	ldr	r0, [pc, #28]	; (8001ce8 <LCD_BackLed_Control+0x34>)
 8001ccc:	f004 fb77 	bl	80063be <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT, LCD_BK_PIN, GPIO_PIN_SET);
}
 8001cd0:	e005      	b.n	8001cde <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT, LCD_BK_PIN, GPIO_PIN_SET);
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cd8:	4803      	ldr	r0, [pc, #12]	; (8001ce8 <LCD_BackLed_Control+0x34>)
 8001cda:	f004 fb70 	bl	80063be <HAL_GPIO_WritePin>
}
 8001cde:	bf00      	nop
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40011400 	.word	0x40011400

08001cec <LCD_Write_Cmd>:

void LCD_Write_Cmd(uint16_t usCmd)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	80fb      	strh	r3, [r7, #6]
	*(__IO uint16_t *)(FSMC_Addr_LCD_CMD) = usCmd;
 8001cf6:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001cfa:	88fb      	ldrh	r3, [r7, #6]
 8001cfc:	8013      	strh	r3, [r2, #0]
}
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr

08001d08 <LCD_Write_Data>:

void LCD_Write_Data(uint16_t usData)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	80fb      	strh	r3, [r7, #6]
	*(__IO uint16_t *)(FSMC_Addr_LCD_DATA) = usData;
 8001d12:	4a04      	ldr	r2, [pc, #16]	; (8001d24 <LCD_Write_Data+0x1c>)
 8001d14:	88fb      	ldrh	r3, [r7, #6]
 8001d16:	8013      	strh	r3, [r2, #0]
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bc80      	pop	{r7}
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	60020000 	.word	0x60020000

08001d28 <LCD_REG_Config>:
{
	return (*(__IO uint16_t *)(FSMC_Addr_LCD_DATA));
}

void LCD_REG_Config(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY();
	LCD_Write_Cmd(0xCF);
 8001d2c:	20cf      	movs	r0, #207	; 0xcf
 8001d2e:	f7ff ffdd 	bl	8001cec <LCD_Write_Cmd>
	LCD_Write_Data(0x00);
 8001d32:	2000      	movs	r0, #0
 8001d34:	f7ff ffe8 	bl	8001d08 <LCD_Write_Data>
	LCD_Write_Data(0x81);
 8001d38:	2081      	movs	r0, #129	; 0x81
 8001d3a:	f7ff ffe5 	bl	8001d08 <LCD_Write_Data>
	LCD_Write_Data(0x30);
 8001d3e:	2030      	movs	r0, #48	; 0x30
 8001d40:	f7ff ffe2 	bl	8001d08 <LCD_Write_Data>

	/*  Power on sequence control (EDh) */
	DEBUG_DELAY();
	LCD_Write_Cmd(0xED);
 8001d44:	20ed      	movs	r0, #237	; 0xed
 8001d46:	f7ff ffd1 	bl	8001cec <LCD_Write_Cmd>
	LCD_Write_Data(0x64);
 8001d4a:	2064      	movs	r0, #100	; 0x64
 8001d4c:	f7ff ffdc 	bl	8001d08 <LCD_Write_Data>
	LCD_Write_Data(0x03);
 8001d50:	2003      	movs	r0, #3
 8001d52:	f7ff ffd9 	bl	8001d08 <LCD_Write_Data>
	LCD_Write_Data(0x12);
 8001d56:	2012      	movs	r0, #18
 8001d58:	f7ff ffd6 	bl	8001d08 <LCD_Write_Data>
	LCD_Write_Data(0x81);
 8001d5c:	2081      	movs	r0, #129	; 0x81
 8001d5e:	f7ff ffd3 	bl	8001d08 <LCD_Write_Data>

	/*  Driver timing control A (E8h) */
	DEBUG_DELAY();
	LCD_Write_Cmd(0xE8);
 8001d62:	20e8      	movs	r0, #232	; 0xe8
 8001d64:	f7ff ffc2 	bl	8001cec <LCD_Write_Cmd>
	LCD_Write_Data(0x85);
 8001d68:	2085      	movs	r0, #133	; 0x85
 8001d6a:	f7ff ffcd 	bl	8001d08 <LCD_Write_Data>
	LCD_Write_Data(0x10);
 8001d6e:	2010      	movs	r0, #16
 8001d70:	f7ff ffca 	bl	8001d08 <LCD_Write_Data>
	LCD_Write_Data(0x78);
 8001d74:	2078      	movs	r0, #120	; 0x78
 8001d76:	f7ff ffc7 	bl	8001d08 <LCD_Write_Data>

	/*  Power control A (CBh) */
	DEBUG_DELAY();
	LCD_Write_Cmd(0xCB);
 8001d7a:	20cb      	movs	r0, #203	; 0xcb
 8001d7c:	f7ff ffb6 	bl	8001cec <LCD_Write_Cmd>
	LCD_Write_Data(0x39);
 8001d80:	2039      	movs	r0, #57	; 0x39
 8001d82:	f7ff ffc1 	bl	8001d08 <LCD_Write_Data>
	LCD_Write_Data(0x2C);
 8001d86:	202c      	movs	r0, #44	; 0x2c
 8001d88:	f7ff ffbe 	bl	8001d08 <LCD_Write_Data>
	LCD_Write_Data(0x00);
 8001d8c:	2000      	movs	r0, #0
 8001d8e:	f7ff ffbb 	bl	8001d08 <LCD_Write_Data>
	LCD_Write_Data(0x34);
 8001d92:	2034      	movs	r0, #52	; 0x34
 8001d94:	f7ff ffb8 	bl	8001d08 <LCD_Write_Data>
	LCD_Write_Data(0x02);
 8001d98:	2002      	movs	r0, #2
 8001d9a:	f7ff ffb5 	bl	8001d08 <LCD_Write_Data>

	/* Pump ratio control (F7h) */
	DEBUG_DELAY();
	LCD_Write_Cmd(0xF7);
 8001d9e:	20f7      	movs	r0, #247	; 0xf7
 8001da0:	f7ff ffa4 	bl	8001cec <LCD_Write_Cmd>
	LCD_Write_Data(0x20);
 8001da4:	2020      	movs	r0, #32
 8001da6:	f7ff ffaf 	bl	8001d08 <LCD_Write_Data>

	/* Driver timing control B */
	DEBUG_DELAY();
	LCD_Write_Cmd(0xEA);
 8001daa:	20ea      	movs	r0, #234	; 0xea
 8001dac:	f7ff ff9e 	bl	8001cec <LCD_Write_Cmd>
	LCD_Write_Data(0x00);
 8001db0:	2000      	movs	r0, #0
 8001db2:	f7ff ffa9 	bl	8001d08 <LCD_Write_Data>
	LCD_Write_Data(0x00);
 8001db6:	2000      	movs	r0, #0
 8001db8:	f7ff ffa6 	bl	8001d08 <LCD_Write_Data>

	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY();
	LCD_Write_Cmd(0xB1);
 8001dbc:	20b1      	movs	r0, #177	; 0xb1
 8001dbe:	f7ff ff95 	bl	8001cec <LCD_Write_Cmd>
	LCD_Write_Data(0x00);
 8001dc2:	2000      	movs	r0, #0
 8001dc4:	f7ff ffa0 	bl	8001d08 <LCD_Write_Data>
	LCD_Write_Data(0x1B);
 8001dc8:	201b      	movs	r0, #27
 8001dca:	f7ff ff9d 	bl	8001d08 <LCD_Write_Data>

	/*  Display Function Control (B6h) */
	DEBUG_DELAY();
	LCD_Write_Cmd(0xB6);
 8001dce:	20b6      	movs	r0, #182	; 0xb6
 8001dd0:	f7ff ff8c 	bl	8001cec <LCD_Write_Cmd>
	LCD_Write_Data(0x0A);
 8001dd4:	200a      	movs	r0, #10
 8001dd6:	f7ff ff97 	bl	8001d08 <LCD_Write_Data>
	LCD_Write_Data(0xA2);
 8001dda:	20a2      	movs	r0, #162	; 0xa2
 8001ddc:	f7ff ff94 	bl	8001d08 <LCD_Write_Data>

	/* Power Control 1 (C0h) */
	DEBUG_DELAY();
	LCD_Write_Cmd(0xC0);
 8001de0:	20c0      	movs	r0, #192	; 0xc0
 8001de2:	f7ff ff83 	bl	8001cec <LCD_Write_Cmd>
	LCD_Write_Data(0x35);
 8001de6:	2035      	movs	r0, #53	; 0x35
 8001de8:	f7ff ff8e 	bl	8001d08 <LCD_Write_Data>

	/* Power Control 2 (C1h) */
	DEBUG_DELAY();
	LCD_Write_Cmd(0xC1);
 8001dec:	20c1      	movs	r0, #193	; 0xc1
 8001dee:	f7ff ff7d 	bl	8001cec <LCD_Write_Cmd>
	LCD_Write_Data(0x11);
 8001df2:	2011      	movs	r0, #17
 8001df4:	f7ff ff88 	bl	8001d08 <LCD_Write_Data>

	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd(0xC5);
 8001df8:	20c5      	movs	r0, #197	; 0xc5
 8001dfa:	f7ff ff77 	bl	8001cec <LCD_Write_Cmd>
	LCD_Write_Data(0x45);
 8001dfe:	2045      	movs	r0, #69	; 0x45
 8001e00:	f7ff ff82 	bl	8001d08 <LCD_Write_Data>
	LCD_Write_Data(0x45);
 8001e04:	2045      	movs	r0, #69	; 0x45
 8001e06:	f7ff ff7f 	bl	8001d08 <LCD_Write_Data>

	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd(0xC7);
 8001e0a:	20c7      	movs	r0, #199	; 0xc7
 8001e0c:	f7ff ff6e 	bl	8001cec <LCD_Write_Cmd>
	LCD_Write_Data(0xA2);
 8001e10:	20a2      	movs	r0, #162	; 0xa2
 8001e12:	f7ff ff79 	bl	8001d08 <LCD_Write_Data>

	/* Enable 3G (F2h) */
	LCD_Write_Cmd(0xF2);
 8001e16:	20f2      	movs	r0, #242	; 0xf2
 8001e18:	f7ff ff68 	bl	8001cec <LCD_Write_Cmd>
	LCD_Write_Data(0x00);
 8001e1c:	2000      	movs	r0, #0
 8001e1e:	f7ff ff73 	bl	8001d08 <LCD_Write_Data>

	/* Gamma Set (26h) */
	LCD_Write_Cmd(0x26);
 8001e22:	2026      	movs	r0, #38	; 0x26
 8001e24:	f7ff ff62 	bl	8001cec <LCD_Write_Cmd>
	LCD_Write_Data(0x01);
 8001e28:	2001      	movs	r0, #1
 8001e2a:	f7ff ff6d 	bl	8001d08 <LCD_Write_Data>
	DEBUG_DELAY();

	/* Positive Gamma Correction */
	LCD_Write_Cmd(0xE0); // Set Gamma
 8001e2e:	20e0      	movs	r0, #224	; 0xe0
 8001e30:	f7ff ff5c 	bl	8001cec <LCD_Write_Cmd>
	LCD_Write_Data(0x0F);
 8001e34:	200f      	movs	r0, #15
 8001e36:	f7ff ff67 	bl	8001d08 <LCD_Write_Data>
	LCD_Write_Data(0x26);
 8001e3a:	2026      	movs	r0, #38	; 0x26
 8001e3c:	f7ff ff64 	bl	8001d08 <LCD_Write_Data>
	LCD_Write_Data(0x24);
 8001e40:	2024      	movs	r0, #36	; 0x24
 8001e42:	f7ff ff61 	bl	8001d08 <LCD_Write_Data>
	LCD_Write_Data(0x0B);
 8001e46:	200b      	movs	r0, #11
 8001e48:	f7ff ff5e 	bl	8001d08 <LCD_Write_Data>
	LCD_Write_Data(0x0E);
 8001e4c:	200e      	movs	r0, #14
 8001e4e:	f7ff ff5b 	bl	8001d08 <LCD_Write_Data>
	LCD_Write_Data(0x09);
 8001e52:	2009      	movs	r0, #9
 8001e54:	f7ff ff58 	bl	8001d08 <LCD_Write_Data>
	LCD_Write_Data(0x54);
 8001e58:	2054      	movs	r0, #84	; 0x54
 8001e5a:	f7ff ff55 	bl	8001d08 <LCD_Write_Data>
	LCD_Write_Data(0xA8);
 8001e5e:	20a8      	movs	r0, #168	; 0xa8
 8001e60:	f7ff ff52 	bl	8001d08 <LCD_Write_Data>
	LCD_Write_Data(0x46);
 8001e64:	2046      	movs	r0, #70	; 0x46
 8001e66:	f7ff ff4f 	bl	8001d08 <LCD_Write_Data>
	LCD_Write_Data(0x0C);
 8001e6a:	200c      	movs	r0, #12
 8001e6c:	f7ff ff4c 	bl	8001d08 <LCD_Write_Data>
	LCD_Write_Data(0x17);
 8001e70:	2017      	movs	r0, #23
 8001e72:	f7ff ff49 	bl	8001d08 <LCD_Write_Data>
	LCD_Write_Data(0x09);
 8001e76:	2009      	movs	r0, #9
 8001e78:	f7ff ff46 	bl	8001d08 <LCD_Write_Data>
	LCD_Write_Data(0x0F);
 8001e7c:	200f      	movs	r0, #15
 8001e7e:	f7ff ff43 	bl	8001d08 <LCD_Write_Data>
	LCD_Write_Data(0x07);
 8001e82:	2007      	movs	r0, #7
 8001e84:	f7ff ff40 	bl	8001d08 <LCD_Write_Data>
	LCD_Write_Data(0x00);
 8001e88:	2000      	movs	r0, #0
 8001e8a:	f7ff ff3d 	bl	8001d08 <LCD_Write_Data>

	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd(0XE1); // Set Gamma
 8001e8e:	20e1      	movs	r0, #225	; 0xe1
 8001e90:	f7ff ff2c 	bl	8001cec <LCD_Write_Cmd>
	LCD_Write_Data(0x00);
 8001e94:	2000      	movs	r0, #0
 8001e96:	f7ff ff37 	bl	8001d08 <LCD_Write_Data>
	LCD_Write_Data(0x19);
 8001e9a:	2019      	movs	r0, #25
 8001e9c:	f7ff ff34 	bl	8001d08 <LCD_Write_Data>
	LCD_Write_Data(0x1B);
 8001ea0:	201b      	movs	r0, #27
 8001ea2:	f7ff ff31 	bl	8001d08 <LCD_Write_Data>
	LCD_Write_Data(0x04);
 8001ea6:	2004      	movs	r0, #4
 8001ea8:	f7ff ff2e 	bl	8001d08 <LCD_Write_Data>
	LCD_Write_Data(0x10);
 8001eac:	2010      	movs	r0, #16
 8001eae:	f7ff ff2b 	bl	8001d08 <LCD_Write_Data>
	LCD_Write_Data(0x07);
 8001eb2:	2007      	movs	r0, #7
 8001eb4:	f7ff ff28 	bl	8001d08 <LCD_Write_Data>
	LCD_Write_Data(0x2A);
 8001eb8:	202a      	movs	r0, #42	; 0x2a
 8001eba:	f7ff ff25 	bl	8001d08 <LCD_Write_Data>
	LCD_Write_Data(0x47);
 8001ebe:	2047      	movs	r0, #71	; 0x47
 8001ec0:	f7ff ff22 	bl	8001d08 <LCD_Write_Data>
	LCD_Write_Data(0x39);
 8001ec4:	2039      	movs	r0, #57	; 0x39
 8001ec6:	f7ff ff1f 	bl	8001d08 <LCD_Write_Data>
	LCD_Write_Data(0x03);
 8001eca:	2003      	movs	r0, #3
 8001ecc:	f7ff ff1c 	bl	8001d08 <LCD_Write_Data>
	LCD_Write_Data(0x06);
 8001ed0:	2006      	movs	r0, #6
 8001ed2:	f7ff ff19 	bl	8001d08 <LCD_Write_Data>
	LCD_Write_Data(0x06);
 8001ed6:	2006      	movs	r0, #6
 8001ed8:	f7ff ff16 	bl	8001d08 <LCD_Write_Data>
	LCD_Write_Data(0x30);
 8001edc:	2030      	movs	r0, #48	; 0x30
 8001ede:	f7ff ff13 	bl	8001d08 <LCD_Write_Data>
	LCD_Write_Data(0x38);
 8001ee2:	2038      	movs	r0, #56	; 0x38
 8001ee4:	f7ff ff10 	bl	8001d08 <LCD_Write_Data>
	LCD_Write_Data(0x0F);
 8001ee8:	200f      	movs	r0, #15
 8001eea:	f7ff ff0d 	bl	8001d08 <LCD_Write_Data>

	/* memory access control set */
	DEBUG_DELAY();
	LCD_Write_Cmd(0x36);
 8001eee:	2036      	movs	r0, #54	; 0x36
 8001ef0:	f7ff fefc 	bl	8001cec <LCD_Write_Cmd>
	LCD_Write_Data(0xC8);
 8001ef4:	20c8      	movs	r0, #200	; 0xc8
 8001ef6:	f7ff ff07 	bl	8001d08 <LCD_Write_Data>
	DEBUG_DELAY();

	/* column address control set */
	LCD_Write_Cmd(CMD_Set_COLUMN);
 8001efa:	202a      	movs	r0, #42	; 0x2a
 8001efc:	f7ff fef6 	bl	8001cec <LCD_Write_Cmd>
	LCD_Write_Data(0x00);
 8001f00:	2000      	movs	r0, #0
 8001f02:	f7ff ff01 	bl	8001d08 <LCD_Write_Data>
	LCD_Write_Data(0x00);
 8001f06:	2000      	movs	r0, #0
 8001f08:	f7ff fefe 	bl	8001d08 <LCD_Write_Data>
	LCD_Write_Data(0x00);
 8001f0c:	2000      	movs	r0, #0
 8001f0e:	f7ff fefb 	bl	8001d08 <LCD_Write_Data>
	LCD_Write_Data(0xEF);
 8001f12:	20ef      	movs	r0, #239	; 0xef
 8001f14:	f7ff fef8 	bl	8001d08 <LCD_Write_Data>

	/* page address control set */
	DEBUG_DELAY();
	LCD_Write_Cmd(CMD_Set_PAGE);
 8001f18:	202b      	movs	r0, #43	; 0x2b
 8001f1a:	f7ff fee7 	bl	8001cec <LCD_Write_Cmd>
	LCD_Write_Data(0x00);
 8001f1e:	2000      	movs	r0, #0
 8001f20:	f7ff fef2 	bl	8001d08 <LCD_Write_Data>
	LCD_Write_Data(0x00);
 8001f24:	2000      	movs	r0, #0
 8001f26:	f7ff feef 	bl	8001d08 <LCD_Write_Data>
	LCD_Write_Data(0x01);
 8001f2a:	2001      	movs	r0, #1
 8001f2c:	f7ff feec 	bl	8001d08 <LCD_Write_Data>
	LCD_Write_Data(0x3F);
 8001f30:	203f      	movs	r0, #63	; 0x3f
 8001f32:	f7ff fee9 	bl	8001d08 <LCD_Write_Data>

	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY();
	LCD_Write_Cmd(0x3a);
 8001f36:	203a      	movs	r0, #58	; 0x3a
 8001f38:	f7ff fed8 	bl	8001cec <LCD_Write_Cmd>
	LCD_Write_Data(0x55);
 8001f3c:	2055      	movs	r0, #85	; 0x55
 8001f3e:	f7ff fee3 	bl	8001d08 <LCD_Write_Data>

	/* Sleep Out (11h)  */
	LCD_Write_Cmd(0x11);
 8001f42:	2011      	movs	r0, #17
 8001f44:	f7ff fed2 	bl	8001cec <LCD_Write_Cmd>
	Delay(0xAFFf << 2);
 8001f48:	4803      	ldr	r0, [pc, #12]	; (8001f58 <LCD_REG_Config+0x230>)
 8001f4a:	f7ff fe73 	bl	8001c34 <Delay>
	DEBUG_DELAY();

	/* Display ON (29h) */
	LCD_Write_Cmd(0x29);
 8001f4e:	2029      	movs	r0, #41	; 0x29
 8001f50:	f7ff fecc 	bl	8001cec <LCD_Write_Cmd>
}
 8001f54:	bf00      	nop
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	0002bffc 	.word	0x0002bffc

08001f5c <LCD_OpenWindow>:

void LCD_OpenWindow(uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight)
{
 8001f5c:	b590      	push	{r4, r7, lr}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4604      	mov	r4, r0
 8001f64:	4608      	mov	r0, r1
 8001f66:	4611      	mov	r1, r2
 8001f68:	461a      	mov	r2, r3
 8001f6a:	4623      	mov	r3, r4
 8001f6c:	80fb      	strh	r3, [r7, #6]
 8001f6e:	4603      	mov	r3, r0
 8001f70:	80bb      	strh	r3, [r7, #4]
 8001f72:	460b      	mov	r3, r1
 8001f74:	807b      	strh	r3, [r7, #2]
 8001f76:	4613      	mov	r3, r2
 8001f78:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd(CMD_Set_COLUMN);
 8001f7a:	202a      	movs	r0, #42	; 0x2a
 8001f7c:	f7ff feb6 	bl	8001cec <LCD_Write_Cmd>
	LCD_Write_Data(usCOLUMN >> 8);
 8001f80:	88fb      	ldrh	r3, [r7, #6]
 8001f82:	0a1b      	lsrs	r3, r3, #8
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff febe 	bl	8001d08 <LCD_Write_Data>
	LCD_Write_Data(usCOLUMN & 0xff);
 8001f8c:	88fb      	ldrh	r3, [r7, #6]
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff feb8 	bl	8001d08 <LCD_Write_Data>
	LCD_Write_Data((usCOLUMN + usWidth - 1) >> 8);
 8001f98:	88fa      	ldrh	r2, [r7, #6]
 8001f9a:	887b      	ldrh	r3, [r7, #2]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	121b      	asrs	r3, r3, #8
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff feaf 	bl	8001d08 <LCD_Write_Data>
	LCD_Write_Data((usCOLUMN + usWidth - 1) & 0xff);
 8001faa:	88fa      	ldrh	r2, [r7, #6]
 8001fac:	887b      	ldrh	r3, [r7, #2]
 8001fae:	4413      	add	r3, r2
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7ff fea4 	bl	8001d08 <LCD_Write_Data>

	LCD_Write_Cmd(CMD_Set_PAGE);
 8001fc0:	202b      	movs	r0, #43	; 0x2b
 8001fc2:	f7ff fe93 	bl	8001cec <LCD_Write_Cmd>
	LCD_Write_Data(usPAGE >> 8);
 8001fc6:	88bb      	ldrh	r3, [r7, #4]
 8001fc8:	0a1b      	lsrs	r3, r3, #8
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff fe9b 	bl	8001d08 <LCD_Write_Data>
	LCD_Write_Data(usPAGE & 0xff);
 8001fd2:	88bb      	ldrh	r3, [r7, #4]
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff fe95 	bl	8001d08 <LCD_Write_Data>
	LCD_Write_Data((usPAGE + usHeight - 1) >> 8);
 8001fde:	88ba      	ldrh	r2, [r7, #4]
 8001fe0:	883b      	ldrh	r3, [r7, #0]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	121b      	asrs	r3, r3, #8
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff fe8c 	bl	8001d08 <LCD_Write_Data>
	LCD_Write_Data((usPAGE + usHeight - 1) & 0xff);
 8001ff0:	88ba      	ldrh	r2, [r7, #4]
 8001ff2:	883b      	ldrh	r3, [r7, #0]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff fe81 	bl	8001d08 <LCD_Write_Data>
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	bd90      	pop	{r4, r7, pc}

0800200e <LCD_FillColor>:

void LCD_FillColor(uint32_t usPoint, uint16_t usColor)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b084      	sub	sp, #16
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
 8002016:	460b      	mov	r3, r1
 8002018:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 800201a:	2300      	movs	r3, #0
 800201c:	60fb      	str	r3, [r7, #12]

	/* memory write */
	LCD_Write_Cmd(CMD_SetPixel);
 800201e:	202c      	movs	r0, #44	; 0x2c
 8002020:	f7ff fe64 	bl	8001cec <LCD_Write_Cmd>

	for (i = 0; i < usPoint; i++)
 8002024:	2300      	movs	r3, #0
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	e006      	b.n	8002038 <LCD_FillColor+0x2a>
		LCD_Write_Data(usColor);
 800202a:	887b      	ldrh	r3, [r7, #2]
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff fe6b 	bl	8001d08 <LCD_Write_Data>
	for (i = 0; i < usPoint; i++)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	3301      	adds	r3, #1
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	429a      	cmp	r2, r3
 800203e:	d3f4      	bcc.n	800202a <LCD_FillColor+0x1c>
}
 8002040:	bf00      	nop
 8002042:	bf00      	nop
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <LCD_Clear>:

void LCD_Clear(uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor)
{
 800204a:	b590      	push	{r4, r7, lr}
 800204c:	b083      	sub	sp, #12
 800204e:	af00      	add	r7, sp, #0
 8002050:	4604      	mov	r4, r0
 8002052:	4608      	mov	r0, r1
 8002054:	4611      	mov	r1, r2
 8002056:	461a      	mov	r2, r3
 8002058:	4623      	mov	r3, r4
 800205a:	80fb      	strh	r3, [r7, #6]
 800205c:	4603      	mov	r3, r0
 800205e:	80bb      	strh	r3, [r7, #4]
 8002060:	460b      	mov	r3, r1
 8002062:	807b      	strh	r3, [r7, #2]
 8002064:	4613      	mov	r3, r2
 8002066:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow(usCOLUMN, usPAGE, usWidth, usHeight);
 8002068:	883b      	ldrh	r3, [r7, #0]
 800206a:	887a      	ldrh	r2, [r7, #2]
 800206c:	88b9      	ldrh	r1, [r7, #4]
 800206e:	88f8      	ldrh	r0, [r7, #6]
 8002070:	f7ff ff74 	bl	8001f5c <LCD_OpenWindow>
	LCD_FillColor(usWidth * usHeight, usColor);
 8002074:	887b      	ldrh	r3, [r7, #2]
 8002076:	883a      	ldrh	r2, [r7, #0]
 8002078:	fb02 f303 	mul.w	r3, r2, r3
 800207c:	461a      	mov	r2, r3
 800207e:	8b3b      	ldrh	r3, [r7, #24]
 8002080:	4619      	mov	r1, r3
 8002082:	4610      	mov	r0, r2
 8002084:	f7ff ffc3 	bl	800200e <LCD_FillColor>
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	bd90      	pop	{r4, r7, pc}

08002090 <LCD_DrawChar>:
		}
	}
}

void LCD_DrawChar(uint16_t usC, uint16_t usP, const char cChar)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	80fb      	strh	r3, [r7, #6]
 800209a:	460b      	mov	r3, r1
 800209c:	80bb      	strh	r3, [r7, #4]
 800209e:	4613      	mov	r3, r2
 80020a0:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	ucRelativePositon = cChar - ' ';
 80020a2:	78fb      	ldrb	r3, [r7, #3]
 80020a4:	3b20      	subs	r3, #32
 80020a6:	733b      	strb	r3, [r7, #12]

	LCD_OpenWindow(usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR);
 80020a8:	88b9      	ldrh	r1, [r7, #4]
 80020aa:	88f8      	ldrh	r0, [r7, #6]
 80020ac:	2310      	movs	r3, #16
 80020ae:	2208      	movs	r2, #8
 80020b0:	f7ff ff54 	bl	8001f5c <LCD_OpenWindow>

	LCD_Write_Cmd(CMD_SetPixel);
 80020b4:	202c      	movs	r0, #44	; 0x2c
 80020b6:	f7ff fe19 	bl	8001cec <LCD_Write_Cmd>

	for (ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage++)
 80020ba:	2300      	movs	r3, #0
 80020bc:	73bb      	strb	r3, [r7, #14]
 80020be:	e023      	b.n	8002108 <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608[ucRelativePositon][ucPage];
 80020c0:	7b3a      	ldrb	r2, [r7, #12]
 80020c2:	7bbb      	ldrb	r3, [r7, #14]
 80020c4:	4914      	ldr	r1, [pc, #80]	; (8002118 <LCD_DrawChar+0x88>)
 80020c6:	0112      	lsls	r2, r2, #4
 80020c8:	440a      	add	r2, r1
 80020ca:	4413      	add	r3, r2
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	73fb      	strb	r3, [r7, #15]

		for (ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn++)
 80020d0:	2300      	movs	r3, #0
 80020d2:	737b      	strb	r3, [r7, #13]
 80020d4:	e012      	b.n	80020fc <LCD_DrawChar+0x6c>
		{
			if (ucTemp & 0x01)
 80020d6:	7bfb      	ldrb	r3, [r7, #15]
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d003      	beq.n	80020e8 <LCD_DrawChar+0x58>
				LCD_Write_Data(0x001F);
 80020e0:	201f      	movs	r0, #31
 80020e2:	f7ff fe11 	bl	8001d08 <LCD_Write_Data>
 80020e6:	e003      	b.n	80020f0 <LCD_DrawChar+0x60>

			else
				LCD_Write_Data(0xFFFF);
 80020e8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80020ec:	f7ff fe0c 	bl	8001d08 <LCD_Write_Data>

			ucTemp >>= 1;
 80020f0:	7bfb      	ldrb	r3, [r7, #15]
 80020f2:	085b      	lsrs	r3, r3, #1
 80020f4:	73fb      	strb	r3, [r7, #15]
		for (ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn++)
 80020f6:	7b7b      	ldrb	r3, [r7, #13]
 80020f8:	3301      	adds	r3, #1
 80020fa:	737b      	strb	r3, [r7, #13]
 80020fc:	7b7b      	ldrb	r3, [r7, #13]
 80020fe:	2b07      	cmp	r3, #7
 8002100:	d9e9      	bls.n	80020d6 <LCD_DrawChar+0x46>
	for (ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage++)
 8002102:	7bbb      	ldrb	r3, [r7, #14]
 8002104:	3301      	adds	r3, #1
 8002106:	73bb      	strb	r3, [r7, #14]
 8002108:	7bbb      	ldrb	r3, [r7, #14]
 800210a:	2b0f      	cmp	r3, #15
 800210c:	d9d8      	bls.n	80020c0 <LCD_DrawChar+0x30>
		}
	}
}
 800210e:	bf00      	nop
 8002110:	bf00      	nop
 8002112:	3710      	adds	r7, #16
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	0800927c 	.word	0x0800927c

0800211c <LCD_DrawString>:

void LCD_DrawString(uint16_t usC, uint16_t usP, const char *pStr)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	603a      	str	r2, [r7, #0]
 8002126:	80fb      	strh	r3, [r7, #6]
 8002128:	460b      	mov	r3, r1
 800212a:	80bb      	strh	r3, [r7, #4]
	while (*pStr != '\0')
 800212c:	e01c      	b.n	8002168 <LCD_DrawString+0x4c>
	{
		if ((usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR) > LCD_DispWindow_COLUMN)
 800212e:	88fb      	ldrh	r3, [r7, #6]
 8002130:	2be8      	cmp	r3, #232	; 0xe8
 8002132:	d904      	bls.n	800213e <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8002134:	2300      	movs	r3, #0
 8002136:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 8002138:	88bb      	ldrh	r3, [r7, #4]
 800213a:	3310      	adds	r3, #16
 800213c:	80bb      	strh	r3, [r7, #4]
		}

		if ((usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR) > LCD_DispWindow_PAGE)
 800213e:	88bb      	ldrh	r3, [r7, #4]
 8002140:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8002144:	d903      	bls.n	800214e <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8002146:	2300      	movs	r3, #0
 8002148:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 800214a:	2300      	movs	r3, #0
 800214c:	80bb      	strh	r3, [r7, #4]
		}

		LCD_DrawChar(usC, usP, *pStr);
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	781a      	ldrb	r2, [r3, #0]
 8002152:	88b9      	ldrh	r1, [r7, #4]
 8002154:	88fb      	ldrh	r3, [r7, #6]
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff ff9a 	bl	8002090 <LCD_DrawChar>

		pStr++;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	3301      	adds	r3, #1
 8002160:	603b      	str	r3, [r7, #0]

		usC += WIDTH_EN_CHAR;
 8002162:	88fb      	ldrh	r3, [r7, #6]
 8002164:	3308      	adds	r3, #8
 8002166:	80fb      	strh	r3, [r7, #6]
	while (*pStr != '\0')
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1de      	bne.n	800212e <LCD_DrawString+0x12>
	}
}
 8002170:	bf00      	nop
 8002172:	bf00      	nop
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
	...

0800217c <LCD_DrawEllipse>:

// Task 3
volatile uint8_t ellipse[2 * 75 + 1][2 * 25 + 1];

void LCD_DrawEllipse(uint16_t usC, uint16_t usP, uint16_t SR, uint16_t LR, uint16_t usColor)
{
 800217c:	b590      	push	{r4, r7, lr}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	4604      	mov	r4, r0
 8002184:	4608      	mov	r0, r1
 8002186:	4611      	mov	r1, r2
 8002188:	461a      	mov	r2, r3
 800218a:	4623      	mov	r3, r4
 800218c:	80fb      	strh	r3, [r7, #6]
 800218e:	4603      	mov	r3, r0
 8002190:	80bb      	strh	r3, [r7, #4]
 8002192:	460b      	mov	r3, r1
 8002194:	807b      	strh	r3, [r7, #2]
 8002196:	4613      	mov	r3, r2
 8002198:	803b      	strh	r3, [r7, #0]
	memset(ellipse, 0, sizeof(ellipse));
 800219a:	f641 6215 	movw	r2, #7701	; 0x1e15
 800219e:	2100      	movs	r1, #0
 80021a0:	4818      	ldr	r0, [pc, #96]	; (8002204 <LCD_DrawEllipse+0x88>)
 80021a2:	f006 fb2b 	bl	80087fc <memset>
	uint8_t leftTopY = usC - SR;
 80021a6:	88fb      	ldrh	r3, [r7, #6]
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	887b      	ldrh	r3, [r7, #2]
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	73fb      	strb	r3, [r7, #15]
	uint8_t leftTopX = usP - LR;
 80021b2:	88bb      	ldrh	r3, [r7, #4]
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	883b      	ldrh	r3, [r7, #0]
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	73bb      	strb	r3, [r7, #14]
	LCD_OpenWindow(leftTopY, leftTopX, 2 * SR, 2 * LR);
 80021be:	7bfb      	ldrb	r3, [r7, #15]
 80021c0:	b298      	uxth	r0, r3
 80021c2:	7bbb      	ldrb	r3, [r7, #14]
 80021c4:	b299      	uxth	r1, r3
 80021c6:	887b      	ldrh	r3, [r7, #2]
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	883b      	ldrh	r3, [r7, #0]
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	f7ff fec3 	bl	8001f5c <LCD_OpenWindow>
	uint8_t usWidth = 2 * SR;
 80021d6:	887b      	ldrh	r3, [r7, #2]
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	737b      	strb	r3, [r7, #13]
	uint8_t usHeight = 2 * LR;
 80021de:	883b      	ldrh	r3, [r7, #0]
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	733b      	strb	r3, [r7, #12]
	LCD_FillColor(usWidth * usHeight, usColor);
 80021e6:	7b7b      	ldrb	r3, [r7, #13]
 80021e8:	7b3a      	ldrb	r2, [r7, #12]
 80021ea:	fb02 f303 	mul.w	r3, r2, r3
 80021ee:	461a      	mov	r2, r3
 80021f0:	8c3b      	ldrh	r3, [r7, #32]
 80021f2:	4619      	mov	r1, r3
 80021f4:	4610      	mov	r0, r2
 80021f6:	f7ff ff0a 	bl	800200e <LCD_FillColor>
}
 80021fa:	bf00      	nop
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd90      	pop	{r4, r7, pc}
 8002202:	bf00      	nop
 8002204:	200002b0 	.word	0x200002b0

08002208 <LCD_Cam_Gram>:
// This actually shows the image of the to the camera
void LCD_Cam_Gram()
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
	/* memory access control set */
	DEBUG_DELAY();
	LCD_Write_Cmd(0x36);
 800220c:	2036      	movs	r0, #54	; 0x36
 800220e:	f7ff fd6d 	bl	8001cec <LCD_Write_Cmd>
	LCD_Write_Data(0x68);
 8002212:	2068      	movs	r0, #104	; 0x68
 8002214:	f7ff fd78 	bl	8001d08 <LCD_Write_Data>
	DEBUG_DELAY();

	/* column address control set */
	LCD_Write_Cmd(CMD_Set_COLUMN);
 8002218:	202a      	movs	r0, #42	; 0x2a
 800221a:	f7ff fd67 	bl	8001cec <LCD_Write_Cmd>
	LCD_Write_Data(0x00);
 800221e:	2000      	movs	r0, #0
 8002220:	f7ff fd72 	bl	8001d08 <LCD_Write_Data>
	LCD_Write_Data(0x00);
 8002224:	2000      	movs	r0, #0
 8002226:	f7ff fd6f 	bl	8001d08 <LCD_Write_Data>
	LCD_Write_Data(0x01);
 800222a:	2001      	movs	r0, #1
 800222c:	f7ff fd6c 	bl	8001d08 <LCD_Write_Data>
	LCD_Write_Data(0x3F);
 8002230:	203f      	movs	r0, #63	; 0x3f
 8002232:	f7ff fd69 	bl	8001d08 <LCD_Write_Data>

	/* page address control set */
	DEBUG_DELAY();
	LCD_Write_Cmd(CMD_Set_PAGE);
 8002236:	202b      	movs	r0, #43	; 0x2b
 8002238:	f7ff fd58 	bl	8001cec <LCD_Write_Cmd>
	LCD_Write_Data(0x00);
 800223c:	2000      	movs	r0, #0
 800223e:	f7ff fd63 	bl	8001d08 <LCD_Write_Data>
	LCD_Write_Data(0x00);
 8002242:	2000      	movs	r0, #0
 8002244:	f7ff fd60 	bl	8001d08 <LCD_Write_Data>
	LCD_Write_Data(0x00);
 8002248:	2000      	movs	r0, #0
 800224a:	f7ff fd5d 	bl	8001d08 <LCD_Write_Data>
	LCD_Write_Data(0xEF);
 800224e:	20ef      	movs	r0, #239	; 0xef
 8002250:	f7ff fd5a 	bl	8001d08 <LCD_Write_Data>

	LCD_Write_Cmd(0x2C);
 8002254:	202c      	movs	r0, #44	; 0x2c
 8002256:	f7ff fd49 	bl	8001cec <LCD_Write_Cmd>
}
 800225a:	bf00      	nop
 800225c:	bd80      	pop	{r7, pc}
	...

08002260 <drawCube>:

uint16_t cube_x[18] = {3, 10, 17, 31, 38, 45, 59, 66, 73, 87, 94, 101, 115, 122, 129, 143, 150, 157};
uint16_t cube_y[3] = {10, 17, 24};

void drawCube(char *face)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b088      	sub	sp, #32
 8002264:	af02      	add	r7, sp, #8
 8002266:	6078      	str	r0, [r7, #4]
	for (size_t i = 0; i < 6; i++)
 8002268:	2300      	movs	r3, #0
 800226a:	617b      	str	r3, [r7, #20]
 800226c:	e07e      	b.n	800236c <drawCube+0x10c>
		for (size_t j = 0; j < 3; j++)
 800226e:	2300      	movs	r3, #0
 8002270:	613b      	str	r3, [r7, #16]
 8002272:	e075      	b.n	8002360 <drawCube+0x100>
			for (size_t k = 0; k < 3; k++)
 8002274:	2300      	movs	r3, #0
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	e06c      	b.n	8002354 <drawCube+0xf4>
			{
				uint16_t color = BLACK;
 800227a:	2300      	movs	r3, #0
 800227c:	817b      	strh	r3, [r7, #10]
				switch (face[i * 9 + j * 3 + 2 - k])
 800227e:	697a      	ldr	r2, [r7, #20]
 8002280:	4613      	mov	r3, r2
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	1899      	adds	r1, r3, r2
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	4613      	mov	r3, r2
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	4413      	add	r3, r2
 800228e:	18ca      	adds	r2, r1, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	3302      	adds	r3, #2
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	4413      	add	r3, r2
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	3b42      	subs	r3, #66	; 0x42
 800229e:	2b13      	cmp	r3, #19
 80022a0:	d841      	bhi.n	8002326 <drawCube+0xc6>
 80022a2:	a201      	add	r2, pc, #4	; (adr r2, 80022a8 <drawCube+0x48>)
 80022a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022a8:	08002301 	.word	0x08002301
 80022ac:	08002327 	.word	0x08002327
 80022b0:	0800231f 	.word	0x0800231f
 80022b4:	08002327 	.word	0x08002327
 80022b8:	080022f9 	.word	0x080022f9
 80022bc:	08002327 	.word	0x08002327
 80022c0:	08002327 	.word	0x08002327
 80022c4:	08002327 	.word	0x08002327
 80022c8:	08002327 	.word	0x08002327
 80022cc:	08002327 	.word	0x08002327
 80022d0:	08002307 	.word	0x08002307
 80022d4:	08002327 	.word	0x08002327
 80022d8:	08002327 	.word	0x08002327
 80022dc:	08002327 	.word	0x08002327
 80022e0:	08002327 	.word	0x08002327
 80022e4:	08002327 	.word	0x08002327
 80022e8:	0800230f 	.word	0x0800230f
 80022ec:	08002327 	.word	0x08002327
 80022f0:	08002327 	.word	0x08002327
 80022f4:	08002317 	.word	0x08002317
				{
				case 'F':
					color = GREEN;
 80022f8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80022fc:	817b      	strh	r3, [r7, #10]
					break;
 80022fe:	e013      	b.n	8002328 <drawCube+0xc8>
				case 'B':
					color = BLUE;
 8002300:	231f      	movs	r3, #31
 8002302:	817b      	strh	r3, [r7, #10]
					break;
 8002304:	e010      	b.n	8002328 <drawCube+0xc8>
				case 'L':
					color = RED;
 8002306:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800230a:	817b      	strh	r3, [r7, #10]
					break;
 800230c:	e00c      	b.n	8002328 <drawCube+0xc8>
				case 'R':
					color = ORANGE;
 800230e:	f64f 33a0 	movw	r3, #64416	; 0xfba0
 8002312:	817b      	strh	r3, [r7, #10]
					break;
 8002314:	e008      	b.n	8002328 <drawCube+0xc8>
				case 'U':
					color = YELLOW;
 8002316:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800231a:	817b      	strh	r3, [r7, #10]
					break;
 800231c:	e004      	b.n	8002328 <drawCube+0xc8>
				case 'D':
					color = WHITE;
 800231e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002322:	817b      	strh	r3, [r7, #10]
					break;
 8002324:	e000      	b.n	8002328 <drawCube+0xc8>
				default:
					break;
 8002326:	bf00      	nop
				}
				LCD_DrawEllipse(cube_x[i * 3 + j], cube_y[k], 2, 2, color);
 8002328:	697a      	ldr	r2, [r7, #20]
 800232a:	4613      	mov	r3, r2
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	441a      	add	r2, r3
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	4413      	add	r3, r2
 8002334:	4a12      	ldr	r2, [pc, #72]	; (8002380 <drawCube+0x120>)
 8002336:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 800233a:	4a12      	ldr	r2, [pc, #72]	; (8002384 <drawCube+0x124>)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002342:	897b      	ldrh	r3, [r7, #10]
 8002344:	9300      	str	r3, [sp, #0]
 8002346:	2302      	movs	r3, #2
 8002348:	2202      	movs	r2, #2
 800234a:	f7ff ff17 	bl	800217c <LCD_DrawEllipse>
			for (size_t k = 0; k < 3; k++)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	3301      	adds	r3, #1
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2b02      	cmp	r3, #2
 8002358:	d98f      	bls.n	800227a <drawCube+0x1a>
		for (size_t j = 0; j < 3; j++)
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	3301      	adds	r3, #1
 800235e:	613b      	str	r3, [r7, #16]
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	2b02      	cmp	r3, #2
 8002364:	d986      	bls.n	8002274 <drawCube+0x14>
	for (size_t i = 0; i < 6; i++)
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	3301      	adds	r3, #1
 800236a:	617b      	str	r3, [r7, #20]
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	2b05      	cmp	r3, #5
 8002370:	f67f af7d 	bls.w	800226e <drawCube+0xe>
			}
}
 8002374:	bf00      	nop
 8002376:	bf00      	nop
 8002378:	3718      	adds	r7, #24
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	2000011c 	.word	0x2000011c
 8002384:	20000140 	.word	0x20000140

08002388 <LCD_GramScan>:

void LCD_GramScan(uint8_t ucOption)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	4603      	mov	r3, r0
 8002390:	71fb      	strb	r3, [r7, #7]
	switch (ucOption)
 8002392:	79fb      	ldrb	r3, [r7, #7]
 8002394:	3b01      	subs	r3, #1
 8002396:	2b03      	cmp	r3, #3
 8002398:	f200 80a0 	bhi.w	80024dc <LCD_GramScan+0x154>
 800239c:	a201      	add	r2, pc, #4	; (adr r2, 80023a4 <LCD_GramScan+0x1c>)
 800239e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023a2:	bf00      	nop
 80023a4:	080023b5 	.word	0x080023b5
 80023a8:	080023ff 	.word	0x080023ff
 80023ac:	08002449 	.word	0x08002449
 80023b0:	08002493 	.word	0x08002493

		//		____ x(240)
		//	 |
		//	 |	y(320)

		LCD_Write_Cmd(0x36);
 80023b4:	2036      	movs	r0, #54	; 0x36
 80023b6:	f7ff fc99 	bl	8001cec <LCD_Write_Cmd>
		LCD_Write_Data(0xC8);
 80023ba:	20c8      	movs	r0, #200	; 0xc8
 80023bc:	f7ff fca4 	bl	8001d08 <LCD_Write_Data>
		LCD_Write_Cmd(0x2A);
 80023c0:	202a      	movs	r0, #42	; 0x2a
 80023c2:	f7ff fc93 	bl	8001cec <LCD_Write_Cmd>
		LCD_Write_Data(0x00); /* x start */
 80023c6:	2000      	movs	r0, #0
 80023c8:	f7ff fc9e 	bl	8001d08 <LCD_Write_Data>
		LCD_Write_Data(0x00);
 80023cc:	2000      	movs	r0, #0
 80023ce:	f7ff fc9b 	bl	8001d08 <LCD_Write_Data>
		LCD_Write_Data(0x00); /* x end */
 80023d2:	2000      	movs	r0, #0
 80023d4:	f7ff fc98 	bl	8001d08 <LCD_Write_Data>
		LCD_Write_Data(0xEF);
 80023d8:	20ef      	movs	r0, #239	; 0xef
 80023da:	f7ff fc95 	bl	8001d08 <LCD_Write_Data>

		LCD_Write_Cmd(0x2B);
 80023de:	202b      	movs	r0, #43	; 0x2b
 80023e0:	f7ff fc84 	bl	8001cec <LCD_Write_Cmd>
		LCD_Write_Data(0x00); /* y start */
 80023e4:	2000      	movs	r0, #0
 80023e6:	f7ff fc8f 	bl	8001d08 <LCD_Write_Data>
		LCD_Write_Data(0x00);
 80023ea:	2000      	movs	r0, #0
 80023ec:	f7ff fc8c 	bl	8001d08 <LCD_Write_Data>
		LCD_Write_Data(0x01); /* y end */
 80023f0:	2001      	movs	r0, #1
 80023f2:	f7ff fc89 	bl	8001d08 <LCD_Write_Data>
		LCD_Write_Data(0x3F);
 80023f6:	203f      	movs	r0, #63	; 0x3f
 80023f8:	f7ff fc86 	bl	8001d08 <LCD_Write_Data>

		break;
 80023fc:	e06e      	b.n	80024dc <LCD_GramScan+0x154>

		//		|x(320)
		//		|
		//		|___ y(240)

		LCD_Write_Cmd(0x36);
 80023fe:	2036      	movs	r0, #54	; 0x36
 8002400:	f7ff fc74 	bl	8001cec <LCD_Write_Cmd>
		LCD_Write_Data(0x68);
 8002404:	2068      	movs	r0, #104	; 0x68
 8002406:	f7ff fc7f 	bl	8001d08 <LCD_Write_Data>
		LCD_Write_Cmd(0x2A);
 800240a:	202a      	movs	r0, #42	; 0x2a
 800240c:	f7ff fc6e 	bl	8001cec <LCD_Write_Cmd>
		LCD_Write_Data(0x00);
 8002410:	2000      	movs	r0, #0
 8002412:	f7ff fc79 	bl	8001d08 <LCD_Write_Data>
		LCD_Write_Data(0x00);
 8002416:	2000      	movs	r0, #0
 8002418:	f7ff fc76 	bl	8001d08 <LCD_Write_Data>
		LCD_Write_Data(0x01);
 800241c:	2001      	movs	r0, #1
 800241e:	f7ff fc73 	bl	8001d08 <LCD_Write_Data>
		LCD_Write_Data(0x3F);
 8002422:	203f      	movs	r0, #63	; 0x3f
 8002424:	f7ff fc70 	bl	8001d08 <LCD_Write_Data>

		LCD_Write_Cmd(0x2B);
 8002428:	202b      	movs	r0, #43	; 0x2b
 800242a:	f7ff fc5f 	bl	8001cec <LCD_Write_Cmd>
		LCD_Write_Data(0x00);
 800242e:	2000      	movs	r0, #0
 8002430:	f7ff fc6a 	bl	8001d08 <LCD_Write_Data>
		LCD_Write_Data(0x00);
 8002434:	2000      	movs	r0, #0
 8002436:	f7ff fc67 	bl	8001d08 <LCD_Write_Data>
		LCD_Write_Data(0x00);
 800243a:	2000      	movs	r0, #0
 800243c:	f7ff fc64 	bl	8001d08 <LCD_Write_Data>
		LCD_Write_Data(0xEF);
 8002440:	20ef      	movs	r0, #239	; 0xef
 8002442:	f7ff fc61 	bl	8001d08 <LCD_Write_Data>

		break;
 8002446:	e049      	b.n	80024dc <LCD_GramScan+0x154>

		//		           |x(320)
		//		           |
		//		y(240) ____|

		LCD_Write_Cmd(0x36);
 8002448:	2036      	movs	r0, #54	; 0x36
 800244a:	f7ff fc4f 	bl	8001cec <LCD_Write_Cmd>
		LCD_Write_Data(0x28);
 800244e:	2028      	movs	r0, #40	; 0x28
 8002450:	f7ff fc5a 	bl	8001d08 <LCD_Write_Data>
		LCD_Write_Cmd(0x2A);
 8002454:	202a      	movs	r0, #42	; 0x2a
 8002456:	f7ff fc49 	bl	8001cec <LCD_Write_Cmd>
		LCD_Write_Data(0x00);
 800245a:	2000      	movs	r0, #0
 800245c:	f7ff fc54 	bl	8001d08 <LCD_Write_Data>
		LCD_Write_Data(0x00);
 8002460:	2000      	movs	r0, #0
 8002462:	f7ff fc51 	bl	8001d08 <LCD_Write_Data>
		LCD_Write_Data(0x01);
 8002466:	2001      	movs	r0, #1
 8002468:	f7ff fc4e 	bl	8001d08 <LCD_Write_Data>
		LCD_Write_Data(0x3F);
 800246c:	203f      	movs	r0, #63	; 0x3f
 800246e:	f7ff fc4b 	bl	8001d08 <LCD_Write_Data>

		LCD_Write_Cmd(0x2B);
 8002472:	202b      	movs	r0, #43	; 0x2b
 8002474:	f7ff fc3a 	bl	8001cec <LCD_Write_Cmd>
		LCD_Write_Data(0x00);
 8002478:	2000      	movs	r0, #0
 800247a:	f7ff fc45 	bl	8001d08 <LCD_Write_Data>
		LCD_Write_Data(0x00);
 800247e:	2000      	movs	r0, #0
 8002480:	f7ff fc42 	bl	8001d08 <LCD_Write_Data>
		LCD_Write_Data(0x00);
 8002484:	2000      	movs	r0, #0
 8002486:	f7ff fc3f 	bl	8001d08 <LCD_Write_Data>
		LCD_Write_Data(0xEF);
 800248a:	20ef      	movs	r0, #239	; 0xef
 800248c:	f7ff fc3c 	bl	8001d08 <LCD_Write_Data>

		break;
 8002490:	e024      	b.n	80024dc <LCD_GramScan+0x154>

		//		|y(320)
		//		|
		//		|___ x(240)

		LCD_Write_Cmd(0x36);
 8002492:	2036      	movs	r0, #54	; 0x36
 8002494:	f7ff fc2a 	bl	8001cec <LCD_Write_Cmd>
		LCD_Write_Data(0x48);
 8002498:	2048      	movs	r0, #72	; 0x48
 800249a:	f7ff fc35 	bl	8001d08 <LCD_Write_Data>
		LCD_Write_Cmd(0x2A);
 800249e:	202a      	movs	r0, #42	; 0x2a
 80024a0:	f7ff fc24 	bl	8001cec <LCD_Write_Cmd>
		LCD_Write_Data(0x00);
 80024a4:	2000      	movs	r0, #0
 80024a6:	f7ff fc2f 	bl	8001d08 <LCD_Write_Data>
		LCD_Write_Data(0x00);
 80024aa:	2000      	movs	r0, #0
 80024ac:	f7ff fc2c 	bl	8001d08 <LCD_Write_Data>
		LCD_Write_Data(0x00);
 80024b0:	2000      	movs	r0, #0
 80024b2:	f7ff fc29 	bl	8001d08 <LCD_Write_Data>
		LCD_Write_Data(0xEF);
 80024b6:	20ef      	movs	r0, #239	; 0xef
 80024b8:	f7ff fc26 	bl	8001d08 <LCD_Write_Data>

		LCD_Write_Cmd(0x2B);
 80024bc:	202b      	movs	r0, #43	; 0x2b
 80024be:	f7ff fc15 	bl	8001cec <LCD_Write_Cmd>
		LCD_Write_Data(0x00);
 80024c2:	2000      	movs	r0, #0
 80024c4:	f7ff fc20 	bl	8001d08 <LCD_Write_Data>
		LCD_Write_Data(0x00);
 80024c8:	2000      	movs	r0, #0
 80024ca:	f7ff fc1d 	bl	8001d08 <LCD_Write_Data>
		LCD_Write_Data(0x01);
 80024ce:	2001      	movs	r0, #1
 80024d0:	f7ff fc1a 	bl	8001d08 <LCD_Write_Data>
		LCD_Write_Data(0x3F);
 80024d4:	203f      	movs	r0, #63	; 0x3f
 80024d6:	f7ff fc17 	bl	8001d08 <LCD_Write_Data>

		break;
 80024da:	bf00      	nop
	}

	/* write gram start */
	LCD_Write_Cmd(0x2C);
 80024dc:	202c      	movs	r0, #44	; 0x2c
 80024de:	f7ff fc05 	bl	8001cec <LCD_Write_Cmd>
}
 80024e2:	bf00      	nop
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop

080024ec <K>:
extern void rotateInSpdMode(uint8_t ID, uint8_t dir, uint16_t speed);

volatile int rotate_flag = 0;
volatile unsigned char cube[6][9] = {0};
void K()
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af02      	add	r7, sp, #8
    // HAL_Delay(800);
    // rotateInPosMode(3, 0, 90, 1);
    // rotateInPosMode(1, 1, 90, 0);
    ++rotate_flag;
 80024f2:	4b09      	ldr	r3, [pc, #36]	; (8002518 <K+0x2c>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	3301      	adds	r3, #1
 80024f8:	4a07      	ldr	r2, [pc, #28]	; (8002518 <K+0x2c>)
 80024fa:	6013      	str	r3, [r2, #0]
    rotate2InPosMode(1, 3, 1, 0, 90, 1);
 80024fc:	2301      	movs	r3, #1
 80024fe:	9301      	str	r3, [sp, #4]
 8002500:	235a      	movs	r3, #90	; 0x5a
 8002502:	9300      	str	r3, [sp, #0]
 8002504:	2300      	movs	r3, #0
 8002506:	2201      	movs	r2, #1
 8002508:	2103      	movs	r1, #3
 800250a:	2001      	movs	r0, #1
 800250c:	f000 ff9c 	bl	8003448 <rotate2InPosMode>
    // HAL_Delay(500);
}
 8002510:	bf00      	nop
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	200020c8 	.word	0x200020c8

0800251c <K3>:

void K3()
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af02      	add	r7, sp, #8
    // HAL_Delay(800);
    // rotateInPosMode(3, 0, 90, 1);
    // rotateInPosMode(1, 1, 90, 0);
    rotate_flag += 3;
 8002522:	4b09      	ldr	r3, [pc, #36]	; (8002548 <K3+0x2c>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	3303      	adds	r3, #3
 8002528:	4a07      	ldr	r2, [pc, #28]	; (8002548 <K3+0x2c>)
 800252a:	6013      	str	r3, [r2, #0]
    rotate2InPosMode(1, 3, 1, 0, 270, 1);
 800252c:	2301      	movs	r3, #1
 800252e:	9301      	str	r3, [sp, #4]
 8002530:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8002534:	9300      	str	r3, [sp, #0]
 8002536:	2300      	movs	r3, #0
 8002538:	2201      	movs	r2, #1
 800253a:	2103      	movs	r1, #3
 800253c:	2001      	movs	r0, #1
 800253e:	f000 ff83 	bl	8003448 <rotate2InPosMode>
//     HAL_Delay(300);
}
 8002542:	bf00      	nop
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	200020c8 	.word	0x200020c8

0800254c <C>:

void C()

{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
    rotateInPosMode(2, 1, 114, 1);
 8002550:	2301      	movs	r3, #1
 8002552:	2272      	movs	r2, #114	; 0x72
 8002554:	2101      	movs	r1, #1
 8002556:	2002      	movs	r0, #2
 8002558:	f000 fec6 	bl	80032e8 <rotateInPosMode>
    // HAL_Delay(50);
    rotateInPosMode(2, 0, 24, 1);
 800255c:	2301      	movs	r3, #1
 800255e:	2218      	movs	r2, #24
 8002560:	2100      	movs	r1, #0
 8002562:	2002      	movs	r0, #2
 8002564:	f000 fec0 	bl	80032e8 <rotateInPosMode>
}
 8002568:	bf00      	nop
 800256a:	bd80      	pop	{r7, pc}

0800256c <C1>:

void C1()

{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
    rotateInPosMode(2, 0, 121, 1);
 8002570:	2301      	movs	r3, #1
 8002572:	2279      	movs	r2, #121	; 0x79
 8002574:	2100      	movs	r1, #0
 8002576:	2002      	movs	r0, #2
 8002578:	f000 feb6 	bl	80032e8 <rotateInPosMode>
    // HAL_Delay(50);
    rotateInPosMode(2, 1, 31, 1);
 800257c:	2301      	movs	r3, #1
 800257e:	221f      	movs	r2, #31
 8002580:	2101      	movs	r1, #1
 8002582:	2002      	movs	r0, #2
 8002584:	f000 feb0 	bl	80032e8 <rotateInPosMode>
}
 8002588:	bf00      	nop
 800258a:	bd80      	pop	{r7, pc}

0800258c <C2>:

void C2()

{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
    rotateInPosMode(2, 0, 211, 1);
 8002590:	2301      	movs	r3, #1
 8002592:	22d3      	movs	r2, #211	; 0xd3
 8002594:	2100      	movs	r1, #0
 8002596:	2002      	movs	r0, #2
 8002598:	f000 fea6 	bl	80032e8 <rotateInPosMode>
    // HAL_Delay(50);
    rotateInPosMode(2, 1, 31, 1);
 800259c:	2301      	movs	r3, #1
 800259e:	221f      	movs	r2, #31
 80025a0:	2101      	movs	r1, #1
 80025a2:	2002      	movs	r0, #2
 80025a4:	f000 fea0 	bl	80032e8 <rotateInPosMode>
}
 80025a8:	bf00      	nop
 80025aa:	bd80      	pop	{r7, pc}

080025ac <b>:

void b()
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
    while (rotate_flag % 4 != 0)
 80025b0:	e001      	b.n	80025b6 <b+0xa>
        K();
 80025b2:	f7ff ff9b 	bl	80024ec <K>
    while (rotate_flag % 4 != 0)
 80025b6:	4b07      	ldr	r3, [pc, #28]	; (80025d4 <b+0x28>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0303 	and.w	r3, r3, #3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1f7      	bne.n	80025b2 <b+0x6>
    HAL_Delay(500);
 80025c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80025c6:	f002 ffa9 	bl	800551c <HAL_Delay>
    C();
 80025ca:	f7ff ffbf 	bl	800254c <C>
}
 80025ce:	bf00      	nop
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	200020c8 	.word	0x200020c8

080025d8 <b1>:

void b1()
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
    while (rotate_flag % 4 != 0)
 80025dc:	e001      	b.n	80025e2 <b1+0xa>
        K();
 80025de:	f7ff ff85 	bl	80024ec <K>
    while (rotate_flag % 4 != 0)
 80025e2:	4b07      	ldr	r3, [pc, #28]	; (8002600 <b1+0x28>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0303 	and.w	r3, r3, #3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1f7      	bne.n	80025de <b1+0x6>
    HAL_Delay(500);
 80025ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80025f2:	f002 ff93 	bl	800551c <HAL_Delay>
    C1();
 80025f6:	f7ff ffb9 	bl	800256c <C1>
}
 80025fa:	bf00      	nop
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	200020c8 	.word	0x200020c8

08002604 <b2>:

void b2()
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
    while (rotate_flag % 4 != 0)
 8002608:	e001      	b.n	800260e <b2+0xa>
        K();
 800260a:	f7ff ff6f 	bl	80024ec <K>
    while (rotate_flag % 4 != 0)
 800260e:	4b07      	ldr	r3, [pc, #28]	; (800262c <b2+0x28>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0303 	and.w	r3, r3, #3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1f7      	bne.n	800260a <b2+0x6>
    HAL_Delay(500);
 800261a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800261e:	f002 ff7d 	bl	800551c <HAL_Delay>
    C2();
 8002622:	f7ff ffb3 	bl	800258c <C2>
}
 8002626:	bf00      	nop
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	200020c8 	.word	0x200020c8

08002630 <u>:

void u()
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
    while (rotate_flag % 4 != 1)
 8002634:	e001      	b.n	800263a <u+0xa>
        K();
 8002636:	f7ff ff59 	bl	80024ec <K>
    while (rotate_flag % 4 != 1)
 800263a:	4b09      	ldr	r3, [pc, #36]	; (8002660 <u+0x30>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	425a      	negs	r2, r3
 8002640:	f003 0303 	and.w	r3, r3, #3
 8002644:	f002 0203 	and.w	r2, r2, #3
 8002648:	bf58      	it	pl
 800264a:	4253      	negpl	r3, r2
 800264c:	2b01      	cmp	r3, #1
 800264e:	d1f2      	bne.n	8002636 <u+0x6>
    HAL_Delay(500);
 8002650:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002654:	f002 ff62 	bl	800551c <HAL_Delay>
    C();
 8002658:	f7ff ff78 	bl	800254c <C>
}
 800265c:	bf00      	nop
 800265e:	bd80      	pop	{r7, pc}
 8002660:	200020c8 	.word	0x200020c8

08002664 <u1>:

void u1()
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
    while (rotate_flag % 4 != 1)
 8002668:	e001      	b.n	800266e <u1+0xa>
        K();
 800266a:	f7ff ff3f 	bl	80024ec <K>
    while (rotate_flag % 4 != 1)
 800266e:	4b09      	ldr	r3, [pc, #36]	; (8002694 <u1+0x30>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	425a      	negs	r2, r3
 8002674:	f003 0303 	and.w	r3, r3, #3
 8002678:	f002 0203 	and.w	r2, r2, #3
 800267c:	bf58      	it	pl
 800267e:	4253      	negpl	r3, r2
 8002680:	2b01      	cmp	r3, #1
 8002682:	d1f2      	bne.n	800266a <u1+0x6>
    HAL_Delay(500);
 8002684:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002688:	f002 ff48 	bl	800551c <HAL_Delay>
    C1();
 800268c:	f7ff ff6e 	bl	800256c <C1>
}
 8002690:	bf00      	nop
 8002692:	bd80      	pop	{r7, pc}
 8002694:	200020c8 	.word	0x200020c8

08002698 <u2>:

void u2()
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
    while (rotate_flag % 4 != 1)
 800269c:	e001      	b.n	80026a2 <u2+0xa>
        K();
 800269e:	f7ff ff25 	bl	80024ec <K>
    while (rotate_flag % 4 != 1)
 80026a2:	4b09      	ldr	r3, [pc, #36]	; (80026c8 <u2+0x30>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	425a      	negs	r2, r3
 80026a8:	f003 0303 	and.w	r3, r3, #3
 80026ac:	f002 0203 	and.w	r2, r2, #3
 80026b0:	bf58      	it	pl
 80026b2:	4253      	negpl	r3, r2
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d1f2      	bne.n	800269e <u2+0x6>
    HAL_Delay(500);
 80026b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80026bc:	f002 ff2e 	bl	800551c <HAL_Delay>
    C2();
 80026c0:	f7ff ff64 	bl	800258c <C2>
}
 80026c4:	bf00      	nop
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	200020c8 	.word	0x200020c8

080026cc <f>:

void f()
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
    while (rotate_flag % 4 != 2)
 80026d0:	e001      	b.n	80026d6 <f+0xa>
        K();
 80026d2:	f7ff ff0b 	bl	80024ec <K>
    while (rotate_flag % 4 != 2)
 80026d6:	4b09      	ldr	r3, [pc, #36]	; (80026fc <f+0x30>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	425a      	negs	r2, r3
 80026dc:	f003 0303 	and.w	r3, r3, #3
 80026e0:	f002 0203 	and.w	r2, r2, #3
 80026e4:	bf58      	it	pl
 80026e6:	4253      	negpl	r3, r2
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d1f2      	bne.n	80026d2 <f+0x6>
    HAL_Delay(500);
 80026ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80026f0:	f002 ff14 	bl	800551c <HAL_Delay>
    C();
 80026f4:	f7ff ff2a 	bl	800254c <C>
}
 80026f8:	bf00      	nop
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	200020c8 	.word	0x200020c8

08002700 <f1>:

void f1()
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
    while (rotate_flag % 4 != 2)
 8002704:	e001      	b.n	800270a <f1+0xa>
        K();
 8002706:	f7ff fef1 	bl	80024ec <K>
    while (rotate_flag % 4 != 2)
 800270a:	4b09      	ldr	r3, [pc, #36]	; (8002730 <f1+0x30>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	425a      	negs	r2, r3
 8002710:	f003 0303 	and.w	r3, r3, #3
 8002714:	f002 0203 	and.w	r2, r2, #3
 8002718:	bf58      	it	pl
 800271a:	4253      	negpl	r3, r2
 800271c:	2b02      	cmp	r3, #2
 800271e:	d1f2      	bne.n	8002706 <f1+0x6>
    HAL_Delay(500);
 8002720:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002724:	f002 fefa 	bl	800551c <HAL_Delay>
    C1();
 8002728:	f7ff ff20 	bl	800256c <C1>
}
 800272c:	bf00      	nop
 800272e:	bd80      	pop	{r7, pc}
 8002730:	200020c8 	.word	0x200020c8

08002734 <f2>:

void f2()
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
    while (rotate_flag % 4 != 2)
 8002738:	e001      	b.n	800273e <f2+0xa>
        K();
 800273a:	f7ff fed7 	bl	80024ec <K>
    while (rotate_flag % 4 != 2)
 800273e:	4b09      	ldr	r3, [pc, #36]	; (8002764 <f2+0x30>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	425a      	negs	r2, r3
 8002744:	f003 0303 	and.w	r3, r3, #3
 8002748:	f002 0203 	and.w	r2, r2, #3
 800274c:	bf58      	it	pl
 800274e:	4253      	negpl	r3, r2
 8002750:	2b02      	cmp	r3, #2
 8002752:	d1f2      	bne.n	800273a <f2+0x6>
    HAL_Delay(500);
 8002754:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002758:	f002 fee0 	bl	800551c <HAL_Delay>
    C2();
 800275c:	f7ff ff16 	bl	800258c <C2>
}
 8002760:	bf00      	nop
 8002762:	bd80      	pop	{r7, pc}
 8002764:	200020c8 	.word	0x200020c8

08002768 <d>:

void d()
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
    while (rotate_flag % 4 != 3)
 800276c:	e001      	b.n	8002772 <d+0xa>
        K();
 800276e:	f7ff febd 	bl	80024ec <K>
    while (rotate_flag % 4 != 3)
 8002772:	4b09      	ldr	r3, [pc, #36]	; (8002798 <d+0x30>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	425a      	negs	r2, r3
 8002778:	f003 0303 	and.w	r3, r3, #3
 800277c:	f002 0203 	and.w	r2, r2, #3
 8002780:	bf58      	it	pl
 8002782:	4253      	negpl	r3, r2
 8002784:	2b03      	cmp	r3, #3
 8002786:	d1f2      	bne.n	800276e <d+0x6>
    HAL_Delay(500);
 8002788:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800278c:	f002 fec6 	bl	800551c <HAL_Delay>
    C();
 8002790:	f7ff fedc 	bl	800254c <C>
}
 8002794:	bf00      	nop
 8002796:	bd80      	pop	{r7, pc}
 8002798:	200020c8 	.word	0x200020c8

0800279c <d1>:

void d1()
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
    while (rotate_flag % 4 != 3)
 80027a0:	e001      	b.n	80027a6 <d1+0xa>
        K();
 80027a2:	f7ff fea3 	bl	80024ec <K>
    while (rotate_flag % 4 != 3)
 80027a6:	4b09      	ldr	r3, [pc, #36]	; (80027cc <d1+0x30>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	425a      	negs	r2, r3
 80027ac:	f003 0303 	and.w	r3, r3, #3
 80027b0:	f002 0203 	and.w	r2, r2, #3
 80027b4:	bf58      	it	pl
 80027b6:	4253      	negpl	r3, r2
 80027b8:	2b03      	cmp	r3, #3
 80027ba:	d1f2      	bne.n	80027a2 <d1+0x6>
    HAL_Delay(500);
 80027bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80027c0:	f002 feac 	bl	800551c <HAL_Delay>
    C1();
 80027c4:	f7ff fed2 	bl	800256c <C1>
}
 80027c8:	bf00      	nop
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	200020c8 	.word	0x200020c8

080027d0 <d2>:

void d2()
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
    while (rotate_flag % 4 != 3)
 80027d4:	e001      	b.n	80027da <d2+0xa>
        K();
 80027d6:	f7ff fe89 	bl	80024ec <K>
    while (rotate_flag % 4 != 3)
 80027da:	4b09      	ldr	r3, [pc, #36]	; (8002800 <d2+0x30>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	425a      	negs	r2, r3
 80027e0:	f003 0303 	and.w	r3, r3, #3
 80027e4:	f002 0203 	and.w	r2, r2, #3
 80027e8:	bf58      	it	pl
 80027ea:	4253      	negpl	r3, r2
 80027ec:	2b03      	cmp	r3, #3
 80027ee:	d1f2      	bne.n	80027d6 <d2+0x6>
    HAL_Delay(500);
 80027f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80027f4:	f002 fe92 	bl	800551c <HAL_Delay>
    C2();
 80027f8:	f7ff fec8 	bl	800258c <C2>
}
 80027fc:	bf00      	nop
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	200020c8 	.word	0x200020c8

08002804 <r>:

void r() { rotateInPosMode(1, 0, 270, 1); }
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
 8002808:	2301      	movs	r3, #1
 800280a:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800280e:	2100      	movs	r1, #0
 8002810:	2001      	movs	r0, #1
 8002812:	f000 fd69 	bl	80032e8 <rotateInPosMode>
 8002816:	bf00      	nop
 8002818:	bd80      	pop	{r7, pc}

0800281a <r2>:
void r2() { rotateInPosMode(1, 0, 180, 1); }
 800281a:	b580      	push	{r7, lr}
 800281c:	af00      	add	r7, sp, #0
 800281e:	2301      	movs	r3, #1
 8002820:	22b4      	movs	r2, #180	; 0xb4
 8002822:	2100      	movs	r1, #0
 8002824:	2001      	movs	r0, #1
 8002826:	f000 fd5f 	bl	80032e8 <rotateInPosMode>
 800282a:	bf00      	nop
 800282c:	bd80      	pop	{r7, pc}

0800282e <r1>:
void r1() { rotateInPosMode(1, 0, 90, 1); }
 800282e:	b580      	push	{r7, lr}
 8002830:	af00      	add	r7, sp, #0
 8002832:	2301      	movs	r3, #1
 8002834:	225a      	movs	r2, #90	; 0x5a
 8002836:	2100      	movs	r1, #0
 8002838:	2001      	movs	r0, #1
 800283a:	f000 fd55 	bl	80032e8 <rotateInPosMode>
 800283e:	bf00      	nop
 8002840:	bd80      	pop	{r7, pc}

08002842 <l>:

void l() { rotateInPosMode(3, 1, 90, 1); }
 8002842:	b580      	push	{r7, lr}
 8002844:	af00      	add	r7, sp, #0
 8002846:	2301      	movs	r3, #1
 8002848:	225a      	movs	r2, #90	; 0x5a
 800284a:	2101      	movs	r1, #1
 800284c:	2003      	movs	r0, #3
 800284e:	f000 fd4b 	bl	80032e8 <rotateInPosMode>
 8002852:	bf00      	nop
 8002854:	bd80      	pop	{r7, pc}

08002856 <l2>:
void l2() { rotateInPosMode(3, 1, 180, 1); }
 8002856:	b580      	push	{r7, lr}
 8002858:	af00      	add	r7, sp, #0
 800285a:	2301      	movs	r3, #1
 800285c:	22b4      	movs	r2, #180	; 0xb4
 800285e:	2101      	movs	r1, #1
 8002860:	2003      	movs	r0, #3
 8002862:	f000 fd41 	bl	80032e8 <rotateInPosMode>
 8002866:	bf00      	nop
 8002868:	bd80      	pop	{r7, pc}

0800286a <l1>:
void l1() { rotateInPosMode(3, 1, 270, 1); }
 800286a:	b580      	push	{r7, lr}
 800286c:	af00      	add	r7, sp, #0
 800286e:	2301      	movs	r3, #1
 8002870:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8002874:	2101      	movs	r1, #1
 8002876:	2003      	movs	r0, #3
 8002878:	f000 fd36 	bl	80032e8 <rotateInPosMode>
 800287c:	bf00      	nop
 800287e:	bd80      	pop	{r7, pc}

08002880 <stripToDMABuffer>:
  uint8_t b;
};
const uint8_t HIGH_0 = 22;
const uint8_t HIGH_1 = 45;
void stripToDMABuffer(struct color_t *ledStrip, uint32_t *DMADataBuf, uint32_t numLed)
{
 8002880:	b480      	push	{r7}
 8002882:	b089      	sub	sp, #36	; 0x24
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
  for (uint32_t j = 0; j < numLed; j++)
 800288c:	2300      	movs	r3, #0
 800288e:	61fb      	str	r3, [r7, #28]
 8002890:	e0a7      	b.n	80029e2 <stripToDMABuffer+0x162>
  {
    for (uint32_t i = 0; i < 8; i++)
 8002892:	2300      	movs	r3, #0
 8002894:	61bb      	str	r3, [r7, #24]
 8002896:	e030      	b.n	80028fa <stripToDMABuffer+0x7a>
    {
      if (ledStrip[j].g & (0x80 >> i))
 8002898:	69fa      	ldr	r2, [r7, #28]
 800289a:	4613      	mov	r3, r2
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	4413      	add	r3, r2
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	4413      	add	r3, r2
 80028a4:	785b      	ldrb	r3, [r3, #1]
 80028a6:	4619      	mov	r1, r3
 80028a8:	2280      	movs	r2, #128	; 0x80
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	fa42 f303 	asr.w	r3, r2, r3
 80028b0:	400b      	ands	r3, r1
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00f      	beq.n	80028d6 <stripToDMABuffer+0x56>
        DMADataBuf[RESET_SIZE + j * 24 + i] = HIGH_1;
 80028b6:	212d      	movs	r1, #45	; 0x2d
 80028b8:	69fa      	ldr	r2, [r7, #28]
 80028ba:	4613      	mov	r3, r2
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	4413      	add	r3, r2
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	461a      	mov	r2, r3
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	4413      	add	r3, r2
 80028c8:	3350      	adds	r3, #80	; 0x50
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	68ba      	ldr	r2, [r7, #8]
 80028ce:	4413      	add	r3, r2
 80028d0:	460a      	mov	r2, r1
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	e00e      	b.n	80028f4 <stripToDMABuffer+0x74>
      else
        DMADataBuf[RESET_SIZE + j * 24 + i] = HIGH_0;
 80028d6:	2116      	movs	r1, #22
 80028d8:	69fa      	ldr	r2, [r7, #28]
 80028da:	4613      	mov	r3, r2
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	4413      	add	r3, r2
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	461a      	mov	r2, r3
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	4413      	add	r3, r2
 80028e8:	3350      	adds	r3, #80	; 0x50
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	68ba      	ldr	r2, [r7, #8]
 80028ee:	4413      	add	r3, r2
 80028f0:	460a      	mov	r2, r1
 80028f2:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < 8; i++)
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	3301      	adds	r3, #1
 80028f8:	61bb      	str	r3, [r7, #24]
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	2b07      	cmp	r3, #7
 80028fe:	d9cb      	bls.n	8002898 <stripToDMABuffer+0x18>
    }
    for (uint32_t i = 0; i < 8; i++)
 8002900:	2300      	movs	r3, #0
 8002902:	617b      	str	r3, [r7, #20]
 8002904:	e030      	b.n	8002968 <stripToDMABuffer+0xe8>
    {
      if (ledStrip[j].r & (0x80 >> i))
 8002906:	69fa      	ldr	r2, [r7, #28]
 8002908:	4613      	mov	r3, r2
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	4413      	add	r3, r2
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	4413      	add	r3, r2
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	4619      	mov	r1, r3
 8002916:	2280      	movs	r2, #128	; 0x80
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	fa42 f303 	asr.w	r3, r2, r3
 800291e:	400b      	ands	r3, r1
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00f      	beq.n	8002944 <stripToDMABuffer+0xc4>
        DMADataBuf[RESET_SIZE + j * 24 + i + 8] = HIGH_1;
 8002924:	212d      	movs	r1, #45	; 0x2d
 8002926:	69fa      	ldr	r2, [r7, #28]
 8002928:	4613      	mov	r3, r2
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	4413      	add	r3, r2
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	461a      	mov	r2, r3
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	4413      	add	r3, r2
 8002936:	3358      	adds	r3, #88	; 0x58
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	68ba      	ldr	r2, [r7, #8]
 800293c:	4413      	add	r3, r2
 800293e:	460a      	mov	r2, r1
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	e00e      	b.n	8002962 <stripToDMABuffer+0xe2>
      else
        DMADataBuf[RESET_SIZE + j * 24 + i + 8] = HIGH_0;
 8002944:	2116      	movs	r1, #22
 8002946:	69fa      	ldr	r2, [r7, #28]
 8002948:	4613      	mov	r3, r2
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	4413      	add	r3, r2
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	461a      	mov	r2, r3
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	4413      	add	r3, r2
 8002956:	3358      	adds	r3, #88	; 0x58
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	68ba      	ldr	r2, [r7, #8]
 800295c:	4413      	add	r3, r2
 800295e:	460a      	mov	r2, r1
 8002960:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < 8; i++)
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	3301      	adds	r3, #1
 8002966:	617b      	str	r3, [r7, #20]
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	2b07      	cmp	r3, #7
 800296c:	d9cb      	bls.n	8002906 <stripToDMABuffer+0x86>
    }
    for (uint32_t i = 0; i < 8; i++)
 800296e:	2300      	movs	r3, #0
 8002970:	613b      	str	r3, [r7, #16]
 8002972:	e030      	b.n	80029d6 <stripToDMABuffer+0x156>
    {
      if (ledStrip[j].b & (0x80 >> i))
 8002974:	69fa      	ldr	r2, [r7, #28]
 8002976:	4613      	mov	r3, r2
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	4413      	add	r3, r2
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	4413      	add	r3, r2
 8002980:	789b      	ldrb	r3, [r3, #2]
 8002982:	4619      	mov	r1, r3
 8002984:	2280      	movs	r2, #128	; 0x80
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	fa42 f303 	asr.w	r3, r2, r3
 800298c:	400b      	ands	r3, r1
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00f      	beq.n	80029b2 <stripToDMABuffer+0x132>
        DMADataBuf[RESET_SIZE + j * 24 + i + 16] = HIGH_1;
 8002992:	212d      	movs	r1, #45	; 0x2d
 8002994:	69fa      	ldr	r2, [r7, #28]
 8002996:	4613      	mov	r3, r2
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	4413      	add	r3, r2
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	461a      	mov	r2, r3
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	4413      	add	r3, r2
 80029a4:	3360      	adds	r3, #96	; 0x60
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	68ba      	ldr	r2, [r7, #8]
 80029aa:	4413      	add	r3, r2
 80029ac:	460a      	mov	r2, r1
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	e00e      	b.n	80029d0 <stripToDMABuffer+0x150>
      else
        DMADataBuf[RESET_SIZE + j * 24 + i + 16] = HIGH_0;
 80029b2:	2116      	movs	r1, #22
 80029b4:	69fa      	ldr	r2, [r7, #28]
 80029b6:	4613      	mov	r3, r2
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	4413      	add	r3, r2
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	461a      	mov	r2, r3
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	4413      	add	r3, r2
 80029c4:	3360      	adds	r3, #96	; 0x60
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	68ba      	ldr	r2, [r7, #8]
 80029ca:	4413      	add	r3, r2
 80029cc:	460a      	mov	r2, r1
 80029ce:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < 8; i++)
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	3301      	adds	r3, #1
 80029d4:	613b      	str	r3, [r7, #16]
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	2b07      	cmp	r3, #7
 80029da:	d9cb      	bls.n	8002974 <stripToDMABuffer+0xf4>
  for (uint32_t j = 0; j < numLed; j++)
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	3301      	adds	r3, #1
 80029e0:	61fb      	str	r3, [r7, #28]
 80029e2:	69fa      	ldr	r2, [r7, #28]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	f4ff af53 	bcc.w	8002892 <stripToDMABuffer+0x12>
    }
  }
}
 80029ec:	bf00      	nop
 80029ee:	bf00      	nop
 80029f0:	3724      	adds	r7, #36	; 0x24
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr

080029f8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80029f8:	b590      	push	{r4, r7, lr}
 80029fa:	b0ed      	sub	sp, #436	; 0x1b4
 80029fc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029fe:	f002 fd2b 	bl	8005458 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a02:	f000 fc27 	bl	8003254 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a06:	f7fe ffed 	bl	80019e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8002a0a:	f7fe ff1b 	bl	8001844 <MX_DMA_Init>
  MX_FSMC_Init();
 8002a0e:	f7fe ff37 	bl	8001880 <MX_FSMC_Init>
  MX_USART1_UART_Init();
 8002a12:	f002 f86f 	bl	8004af4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8002a16:	f002 f897 	bl	8004b48 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8002a1a:	f001 ff41 	bl	80048a0 <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  motor_flag = 7;
 8002a1e:	4b67      	ldr	r3, [pc, #412]	; (8002bbc <main+0x1c4>)
 8002a20:	2207      	movs	r2, #7
 8002a22:	701a      	strb	r2, [r3, #0]

  HAL_UART_Receive_IT(&huart1, (uint8_t *)&RxBuffer, 3);
 8002a24:	2203      	movs	r2, #3
 8002a26:	4966      	ldr	r1, [pc, #408]	; (8002bc0 <main+0x1c8>)
 8002a28:	4866      	ldr	r0, [pc, #408]	; (8002bc4 <main+0x1cc>)
 8002a2a:	f005 f996 	bl	8007d5a <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart3, (uint8_t *)&rx_buffer, 1);
 8002a2e:	2201      	movs	r2, #1
 8002a30:	4965      	ldr	r1, [pc, #404]	; (8002bc8 <main+0x1d0>)
 8002a32:	4866      	ldr	r0, [pc, #408]	; (8002bcc <main+0x1d4>)
 8002a34:	f005 f991 	bl	8007d5a <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_4, DMADataBuf, FRAME_SIZE);
 8002a38:	f44f 6391 	mov.w	r3, #1160	; 0x488
 8002a3c:	4a64      	ldr	r2, [pc, #400]	; (8002bd0 <main+0x1d8>)
 8002a3e:	210c      	movs	r1, #12
 8002a40:	4864      	ldr	r0, [pc, #400]	; (8002bd4 <main+0x1dc>)
 8002a42:	f004 f9cb 	bl	8006ddc <HAL_TIM_PWM_Start_DMA>
  for (size_t i = 0; i < LED_NUM + 10; i++)
 8002a46:	2300      	movs	r3, #0
 8002a48:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002a4c:	e010      	b.n	8002a70 <main+0x78>
    LEDStrip[i] = orange;
 8002a4e:	4962      	ldr	r1, [pc, #392]	; (8002bd8 <main+0x1e0>)
 8002a50:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002a54:	4613      	mov	r3, r2
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	4413      	add	r3, r2
 8002a5a:	440b      	add	r3, r1
 8002a5c:	4a5f      	ldr	r2, [pc, #380]	; (8002bdc <main+0x1e4>)
 8002a5e:	8811      	ldrh	r1, [r2, #0]
 8002a60:	7892      	ldrb	r2, [r2, #2]
 8002a62:	8019      	strh	r1, [r3, #0]
 8002a64:	709a      	strb	r2, [r3, #2]
  for (size_t i = 0; i < LED_NUM + 10; i++)
 8002a66:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002a70:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a74:	2b27      	cmp	r3, #39	; 0x27
 8002a76:	d9ea      	bls.n	8002a4e <main+0x56>
  stripToDMABuffer(LEDStrip, DMADataBuf, 30);
 8002a78:	221e      	movs	r2, #30
 8002a7a:	4955      	ldr	r1, [pc, #340]	; (8002bd0 <main+0x1d8>)
 8002a7c:	4856      	ldr	r0, [pc, #344]	; (8002bd8 <main+0x1e0>)
 8002a7e:	f7ff feff 	bl	8002880 <stripToDMABuffer>

  LCD_INIT();
 8002a82:	f7ff f8e8 	bl	8001c56 <LCD_INIT>
  cube_t cube;
  memset(cube.face, 0, 54);
 8002a86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a8a:	2236      	movs	r2, #54	; 0x36
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f005 feb4 	bl	80087fc <memset>
  cube.face[4] = 'U';
 8002a94:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002a98:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002a9c:	2255      	movs	r2, #85	; 0x55
 8002a9e:	711a      	strb	r2, [r3, #4]
  cube.face[13] = 'R';
 8002aa0:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002aa4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002aa8:	2252      	movs	r2, #82	; 0x52
 8002aaa:	735a      	strb	r2, [r3, #13]
  cube.face[22] = 'F';
 8002aac:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002ab0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002ab4:	2246      	movs	r2, #70	; 0x46
 8002ab6:	759a      	strb	r2, [r3, #22]
  cube.face[31] = 'D';
 8002ab8:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002abc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002ac0:	2244      	movs	r2, #68	; 0x44
 8002ac2:	77da      	strb	r2, [r3, #31]
  cube.face[40] = 'L';
 8002ac4:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002ac8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002acc:	224c      	movs	r2, #76	; 0x4c
 8002ace:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  cube.face[49] = 'B';
 8002ad2:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002ad6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002ada:	2242      	movs	r2, #66	; 0x42
 8002adc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  LCD_Clear(50, 80, 140, 70, RED);
 8002ae0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	2346      	movs	r3, #70	; 0x46
 8002ae8:	228c      	movs	r2, #140	; 0x8c
 8002aea:	2150      	movs	r1, #80	; 0x50
 8002aec:	2032      	movs	r0, #50	; 0x32
 8002aee:	f7ff faac 	bl	800204a <LCD_Clear>
  LCD_DrawString(75, 100, "PROGRAM START");
 8002af2:	4a3b      	ldr	r2, [pc, #236]	; (8002be0 <main+0x1e8>)
 8002af4:	2164      	movs	r1, #100	; 0x64
 8002af6:	204b      	movs	r0, #75	; 0x4b
 8002af8:	f7ff fb10 	bl	800211c <LCD_DrawString>
  drawCube(cube.face);
 8002afc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7ff fbad 	bl	8002260 <drawCube>

  HAL_Delay(2000);
 8002b06:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002b0a:	f002 fd07 	bl	800551c <HAL_Delay>
  //  C2();
  while (Ov7725_Init() != SUCCESS)
 8002b0e:	bf00      	nop
 8002b10:	f7fe fafa 	bl	8001108 <Ov7725_Init>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d1fa      	bne.n	8002b10 <main+0x118>
    ;
  while (!XPT2046_Touch_Calibrate())
 8002b1a:	bf00      	nop
 8002b1c:	f002 fb36 	bl	800518c <XPT2046_Touch_Calibrate>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0fa      	beq.n	8002b1c <main+0x124>
    ;
  LCD_GramScan(1);
 8002b26:	2001      	movs	r0, #1
 8002b28:	f7ff fc2e 	bl	8002388 <LCD_GramScan>
  Ov7725_vsync = 0;
 8002b2c:	4b2d      	ldr	r3, [pc, #180]	; (8002be4 <main+0x1ec>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	701a      	strb	r2, [r3, #0]
  uint8_t cnt = 0;
 8002b32:	2300      	movs	r3, #0
 8002b34:	f887 31a3 	strb.w	r3, [r7, #419]	; 0x1a3
  uint8_t startCam = 0;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	f887 31a2 	strb.w	r3, [r7, #418]	; 0x1a2
  while (1 && bt_flags != 4)
 8002b3e:	e365      	b.n	800320c <main+0x814>
  {
    /* USER CODE END WHILE */

    // /* USER CODE BEGIN 3 */
    ucXPT2046_TouchFlag = 0;
 8002b40:	4b29      	ldr	r3, [pc, #164]	; (8002be8 <main+0x1f0>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	701a      	strb	r2, [r3, #0]
    if (bt_flags == 2)
 8002b46:	4b29      	ldr	r3, [pc, #164]	; (8002bec <main+0x1f4>)
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d102      	bne.n	8002b56 <main+0x15e>
      startCam = 1;
 8002b50:	2301      	movs	r3, #1
 8002b52:	f887 31a2 	strb.w	r3, [r7, #418]	; 0x1a2
    if (startCam)
 8002b56:	f897 31a2 	ldrb.w	r3, [r7, #418]	; 0x1a2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f000 8356 	beq.w	800320c <main+0x814>
    {
      if (Ov7725_vsync == 2 && cnt < 12)
 8002b60:	4b20      	ldr	r3, [pc, #128]	; (8002be4 <main+0x1ec>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	f040 822c 	bne.w	8002fc4 <main+0x5cc>
 8002b6c:	f897 31a3 	ldrb.w	r3, [r7, #419]	; 0x1a3
 8002b70:	2b0b      	cmp	r3, #11
 8002b72:	f200 8227 	bhi.w	8002fc4 <main+0x5cc>
      {
        FIFO_PREPARE;
 8002b76:	4b1e      	ldr	r3, [pc, #120]	; (8002bf0 <main+0x1f8>)
 8002b78:	2204      	movs	r2, #4
 8002b7a:	615a      	str	r2, [r3, #20]
 8002b7c:	4b1d      	ldr	r3, [pc, #116]	; (8002bf4 <main+0x1fc>)
 8002b7e:	2220      	movs	r2, #32
 8002b80:	615a      	str	r2, [r3, #20]
 8002b82:	4b1c      	ldr	r3, [pc, #112]	; (8002bf4 <main+0x1fc>)
 8002b84:	2220      	movs	r2, #32
 8002b86:	611a      	str	r2, [r3, #16]
 8002b88:	4b19      	ldr	r3, [pc, #100]	; (8002bf0 <main+0x1f8>)
 8002b8a:	2204      	movs	r2, #4
 8002b8c:	611a      	str	r2, [r3, #16]
 8002b8e:	4b19      	ldr	r3, [pc, #100]	; (8002bf4 <main+0x1fc>)
 8002b90:	2220      	movs	r2, #32
 8002b92:	615a      	str	r2, [r3, #20]
 8002b94:	4b17      	ldr	r3, [pc, #92]	; (8002bf4 <main+0x1fc>)
 8002b96:	2220      	movs	r2, #32
 8002b98:	611a      	str	r2, [r3, #16]
        // LCD_Rst();
        uint16_t temp_colors[9];
        uint16_t squareColors[9];
        //	uint16_t x, y;
        uint16_t Camera_Data;
        memset(squareColors, 0, sizeof(squareColors));
 8002b9a:	463b      	mov	r3, r7
 8002b9c:	2212      	movs	r2, #18
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f005 fe2b 	bl	80087fc <memset>
        LCD_Cam_Gram();
 8002ba6:	f7ff fb2f 	bl	8002208 <LCD_Cam_Gram>
        for (int i = 0; i < 240; i++)
 8002baa:	2300      	movs	r3, #0
 8002bac:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002bb0:	e0de      	b.n	8002d70 <main+0x378>
        {
          for (int j = 0; j < 320; j++)
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8002bb8:	e0cf      	b.n	8002d5a <main+0x362>
 8002bba:	bf00      	nop
 8002bbc:	20003368 	.word	0x20003368
 8002bc0:	2000336c 	.word	0x2000336c
 8002bc4:	200033fc 	.word	0x200033fc
 8002bc8:	200020cd 	.word	0x200020cd
 8002bcc:	2000343c 	.word	0x2000343c
 8002bd0:	200020d0 	.word	0x200020d0
 8002bd4:	20003374 	.word	0x20003374
 8002bd8:	200032f0 	.word	0x200032f0
 8002bdc:	20000148 	.word	0x20000148
 8002be0:	08009210 	.word	0x08009210
 8002be4:	200020cc 	.word	0x200020cc
 8002be8:	2000347c 	.word	0x2000347c
 8002bec:	200033f8 	.word	0x200033f8
 8002bf0:	40010800 	.word	0x40010800
 8002bf4:	40011000 	.word	0x40011000
          {
            READ_FIFO_PIXEL(Camera_Data);
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	f8a7 3192 	strh.w	r3, [r7, #402]	; 0x192
 8002bfe:	4bc0      	ldr	r3, [pc, #768]	; (8002f00 <main+0x508>)
 8002c00:	2220      	movs	r2, #32
 8002c02:	615a      	str	r2, [r3, #20]
 8002c04:	4bbf      	ldr	r3, [pc, #764]	; (8002f04 <main+0x50c>)
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c0e:	f8a7 3192 	strh.w	r3, [r7, #402]	; 0x192
 8002c12:	4bbb      	ldr	r3, [pc, #748]	; (8002f00 <main+0x508>)
 8002c14:	2220      	movs	r2, #32
 8002c16:	611a      	str	r2, [r3, #16]
 8002c18:	4bb9      	ldr	r3, [pc, #740]	; (8002f00 <main+0x508>)
 8002c1a:	2220      	movs	r2, #32
 8002c1c:	615a      	str	r2, [r3, #20]
 8002c1e:	4bb9      	ldr	r3, [pc, #740]	; (8002f04 <main+0x50c>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	0a1b      	lsrs	r3, r3, #8
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	f8b7 3192 	ldrh.w	r3, [r7, #402]	; 0x192
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	f8a7 3192 	strh.w	r3, [r7, #402]	; 0x192
 8002c32:	4bb3      	ldr	r3, [pc, #716]	; (8002f00 <main+0x508>)
 8002c34:	2220      	movs	r2, #32
 8002c36:	611a      	str	r2, [r3, #16]
            LCD_Write_Data(Camera_Data);
 8002c38:	f8b7 3192 	ldrh.w	r3, [r7, #402]	; 0x192
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff f863 	bl	8001d08 <LCD_Write_Data>
            // bottom row
            if (j == 110 && i == 60)
 8002c42:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8002c46:	2b6e      	cmp	r3, #110	; 0x6e
 8002c48:	d10a      	bne.n	8002c60 <main+0x268>
 8002c4a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8002c4e:	2b3c      	cmp	r3, #60	; 0x3c
 8002c50:	d106      	bne.n	8002c60 <main+0x268>
              squareColors[0] = Camera_Data;
 8002c52:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002c56:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002c5a:	f8b7 2192 	ldrh.w	r2, [r7, #402]	; 0x192
 8002c5e:	801a      	strh	r2, [r3, #0]

            if (j == 110 && i == 120)
 8002c60:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8002c64:	2b6e      	cmp	r3, #110	; 0x6e
 8002c66:	d10a      	bne.n	8002c7e <main+0x286>
 8002c68:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8002c6c:	2b78      	cmp	r3, #120	; 0x78
 8002c6e:	d106      	bne.n	8002c7e <main+0x286>
              squareColors[3] = Camera_Data;
 8002c70:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002c74:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002c78:	f8b7 2192 	ldrh.w	r2, [r7, #402]	; 0x192
 8002c7c:	80da      	strh	r2, [r3, #6]

            if (j == 110 && i == 170)
 8002c7e:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8002c82:	2b6e      	cmp	r3, #110	; 0x6e
 8002c84:	d10a      	bne.n	8002c9c <main+0x2a4>
 8002c86:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8002c8a:	2baa      	cmp	r3, #170	; 0xaa
 8002c8c:	d106      	bne.n	8002c9c <main+0x2a4>
              squareColors[6] = Camera_Data;
 8002c8e:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002c92:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002c96:	f8b7 2192 	ldrh.w	r2, [r7, #402]	; 0x192
 8002c9a:	819a      	strh	r2, [r3, #12]

            // // middle row
            if (j == 160 && i == 60)
 8002c9c:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8002ca0:	2ba0      	cmp	r3, #160	; 0xa0
 8002ca2:	d10a      	bne.n	8002cba <main+0x2c2>
 8002ca4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8002ca8:	2b3c      	cmp	r3, #60	; 0x3c
 8002caa:	d106      	bne.n	8002cba <main+0x2c2>
              squareColors[1] = Camera_Data;
 8002cac:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002cb0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002cb4:	f8b7 2192 	ldrh.w	r2, [r7, #402]	; 0x192
 8002cb8:	805a      	strh	r2, [r3, #2]

            if (j == 160 && i == 120)
 8002cba:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8002cbe:	2ba0      	cmp	r3, #160	; 0xa0
 8002cc0:	d10a      	bne.n	8002cd8 <main+0x2e0>
 8002cc2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8002cc6:	2b78      	cmp	r3, #120	; 0x78
 8002cc8:	d106      	bne.n	8002cd8 <main+0x2e0>
              squareColors[4] = Camera_Data;
 8002cca:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002cce:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002cd2:	f8b7 2192 	ldrh.w	r2, [r7, #402]	; 0x192
 8002cd6:	811a      	strh	r2, [r3, #8]

            if (j == 160 && i == 170)
 8002cd8:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8002cdc:	2ba0      	cmp	r3, #160	; 0xa0
 8002cde:	d10a      	bne.n	8002cf6 <main+0x2fe>
 8002ce0:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8002ce4:	2baa      	cmp	r3, #170	; 0xaa
 8002ce6:	d106      	bne.n	8002cf6 <main+0x2fe>
              squareColors[7] = Camera_Data;
 8002ce8:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002cec:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002cf0:	f8b7 2192 	ldrh.w	r2, [r7, #402]	; 0x192
 8002cf4:	81da      	strh	r2, [r3, #14]

            // top row

            if (j == 210 && i == 60)
 8002cf6:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8002cfa:	2bd2      	cmp	r3, #210	; 0xd2
 8002cfc:	d10a      	bne.n	8002d14 <main+0x31c>
 8002cfe:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8002d02:	2b3c      	cmp	r3, #60	; 0x3c
 8002d04:	d106      	bne.n	8002d14 <main+0x31c>
              squareColors[2] = Camera_Data;
 8002d06:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002d0a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002d0e:	f8b7 2192 	ldrh.w	r2, [r7, #402]	; 0x192
 8002d12:	809a      	strh	r2, [r3, #4]

            if (j == 210 && i == 120)
 8002d14:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8002d18:	2bd2      	cmp	r3, #210	; 0xd2
 8002d1a:	d10a      	bne.n	8002d32 <main+0x33a>
 8002d1c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8002d20:	2b78      	cmp	r3, #120	; 0x78
 8002d22:	d106      	bne.n	8002d32 <main+0x33a>
              squareColors[5] = Camera_Data;
 8002d24:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002d28:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002d2c:	f8b7 2192 	ldrh.w	r2, [r7, #402]	; 0x192
 8002d30:	815a      	strh	r2, [r3, #10]

            if (j == 210 && i == 170)
 8002d32:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8002d36:	2bd2      	cmp	r3, #210	; 0xd2
 8002d38:	d10a      	bne.n	8002d50 <main+0x358>
 8002d3a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8002d3e:	2baa      	cmp	r3, #170	; 0xaa
 8002d40:	d106      	bne.n	8002d50 <main+0x358>
              squareColors[8] = Camera_Data;
 8002d42:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002d46:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002d4a:	f8b7 2192 	ldrh.w	r2, [r7, #402]	; 0x192
 8002d4e:	821a      	strh	r2, [r3, #16]
          for (int j = 0; j < 320; j++)
 8002d50:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8002d54:	3301      	adds	r3, #1
 8002d56:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8002d5a:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8002d5e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002d62:	f6ff af49 	blt.w	8002bf8 <main+0x200>
        for (int i = 0; i < 240; i++)
 8002d66:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002d70:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8002d74:	2bef      	cmp	r3, #239	; 0xef
 8002d76:	f77f af1c 	ble.w	8002bb2 <main+0x1ba>
          }
        }
        uint8_t confirm_flag = 0;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197

        // j , i
        KNearest_match(squareColors, temp_colors, cnt, cube.face, confirm_flag);
 8002d80:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002d84:	f897 21a3 	ldrb.w	r2, [r7, #419]	; 0x1a3
 8002d88:	f107 0114 	add.w	r1, r7, #20
 8002d8c:	4638      	mov	r0, r7
 8002d8e:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8002d92:	9300      	str	r3, [sp, #0]
 8002d94:	4623      	mov	r3, r4
 8002d96:	f7fe fc8d 	bl	80016b4 <KNearest_match>

        LCD_DrawEllipse(110, 60, 10, 10, temp_colors[0]);  // 0 bottom left
 8002d9a:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002d9e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002da2:	881b      	ldrh	r3, [r3, #0]
 8002da4:	9300      	str	r3, [sp, #0]
 8002da6:	230a      	movs	r3, #10
 8002da8:	220a      	movs	r2, #10
 8002daa:	213c      	movs	r1, #60	; 0x3c
 8002dac:	206e      	movs	r0, #110	; 0x6e
 8002dae:	f7ff f9e5 	bl	800217c <LCD_DrawEllipse>
        LCD_DrawEllipse(110, 120, 10, 10, temp_colors[3]); // 1 bottom mid
 8002db2:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002db6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002dba:	88db      	ldrh	r3, [r3, #6]
 8002dbc:	9300      	str	r3, [sp, #0]
 8002dbe:	230a      	movs	r3, #10
 8002dc0:	220a      	movs	r2, #10
 8002dc2:	2178      	movs	r1, #120	; 0x78
 8002dc4:	206e      	movs	r0, #110	; 0x6e
 8002dc6:	f7ff f9d9 	bl	800217c <LCD_DrawEllipse>
        LCD_DrawEllipse(110, 170, 10, 10, temp_colors[6]); // 2 bottom right
 8002dca:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002dce:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002dd2:	899b      	ldrh	r3, [r3, #12]
 8002dd4:	9300      	str	r3, [sp, #0]
 8002dd6:	230a      	movs	r3, #10
 8002dd8:	220a      	movs	r2, #10
 8002dda:	21aa      	movs	r1, #170	; 0xaa
 8002ddc:	206e      	movs	r0, #110	; 0x6e
 8002dde:	f7ff f9cd 	bl	800217c <LCD_DrawEllipse>

        LCD_DrawEllipse(160, 60, 10, 10, temp_colors[1]);  // 3 mid left
 8002de2:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002de6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002dea:	885b      	ldrh	r3, [r3, #2]
 8002dec:	9300      	str	r3, [sp, #0]
 8002dee:	230a      	movs	r3, #10
 8002df0:	220a      	movs	r2, #10
 8002df2:	213c      	movs	r1, #60	; 0x3c
 8002df4:	20a0      	movs	r0, #160	; 0xa0
 8002df6:	f7ff f9c1 	bl	800217c <LCD_DrawEllipse>
        LCD_DrawEllipse(160, 120, 10, 10, temp_colors[4]); // 4 center
 8002dfa:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002dfe:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002e02:	891b      	ldrh	r3, [r3, #8]
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	230a      	movs	r3, #10
 8002e08:	220a      	movs	r2, #10
 8002e0a:	2178      	movs	r1, #120	; 0x78
 8002e0c:	20a0      	movs	r0, #160	; 0xa0
 8002e0e:	f7ff f9b5 	bl	800217c <LCD_DrawEllipse>
        LCD_DrawEllipse(160, 170, 10, 10, temp_colors[7]); // 5 mid right
 8002e12:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002e16:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002e1a:	89db      	ldrh	r3, [r3, #14]
 8002e1c:	9300      	str	r3, [sp, #0]
 8002e1e:	230a      	movs	r3, #10
 8002e20:	220a      	movs	r2, #10
 8002e22:	21aa      	movs	r1, #170	; 0xaa
 8002e24:	20a0      	movs	r0, #160	; 0xa0
 8002e26:	f7ff f9a9 	bl	800217c <LCD_DrawEllipse>

        LCD_DrawEllipse(210, 60, 10, 10, temp_colors[2]);  // 6 top left
 8002e2a:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002e2e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002e32:	889b      	ldrh	r3, [r3, #4]
 8002e34:	9300      	str	r3, [sp, #0]
 8002e36:	230a      	movs	r3, #10
 8002e38:	220a      	movs	r2, #10
 8002e3a:	213c      	movs	r1, #60	; 0x3c
 8002e3c:	20d2      	movs	r0, #210	; 0xd2
 8002e3e:	f7ff f99d 	bl	800217c <LCD_DrawEllipse>
        LCD_DrawEllipse(210, 120, 10, 10, temp_colors[5]); // 7 top mid
 8002e42:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002e46:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002e4a:	895b      	ldrh	r3, [r3, #10]
 8002e4c:	9300      	str	r3, [sp, #0]
 8002e4e:	230a      	movs	r3, #10
 8002e50:	220a      	movs	r2, #10
 8002e52:	2178      	movs	r1, #120	; 0x78
 8002e54:	20d2      	movs	r0, #210	; 0xd2
 8002e56:	f7ff f991 	bl	800217c <LCD_DrawEllipse>
        LCD_DrawEllipse(210, 170, 10, 10, temp_colors[8]); // 8 top right
 8002e5a:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002e5e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002e62:	8a1b      	ldrh	r3, [r3, #16]
 8002e64:	9300      	str	r3, [sp, #0]
 8002e66:	230a      	movs	r3, #10
 8002e68:	220a      	movs	r2, #10
 8002e6a:	21aa      	movs	r1, #170	; 0xaa
 8002e6c:	20d2      	movs	r0, #210	; 0xd2
 8002e6e:	f7ff f985 	bl	800217c <LCD_DrawEllipse>
        HAL_Delay(1500);
 8002e72:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002e76:	f002 fb51 	bl	800551c <HAL_Delay>
        if (ucXPT2046_TouchFlag == 1)
 8002e7a:	4b23      	ldr	r3, [pc, #140]	; (8002f08 <main+0x510>)
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d112      	bne.n	8002eaa <main+0x4b2>
        {
          bt_flags = 1;
 8002e84:	4b21      	ldr	r3, [pc, #132]	; (8002f0c <main+0x514>)
 8002e86:	2201      	movs	r2, #1
 8002e88:	701a      	strb	r2, [r3, #0]
          ucXPT2046_TouchFlag = 0;
 8002e8a:	4b1f      	ldr	r3, [pc, #124]	; (8002f08 <main+0x510>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	701a      	strb	r2, [r3, #0]
          HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8002e90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e94:	481e      	ldr	r0, [pc, #120]	; (8002f10 <main+0x518>)
 8002e96:	f003 faaa 	bl	80063ee <HAL_GPIO_TogglePin>
          HAL_Delay(100);
 8002e9a:	2064      	movs	r0, #100	; 0x64
 8002e9c:	f002 fb3e 	bl	800551c <HAL_Delay>
          HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8002ea0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ea4:	481a      	ldr	r0, [pc, #104]	; (8002f10 <main+0x518>)
 8002ea6:	f003 faa2 	bl	80063ee <HAL_GPIO_TogglePin>
        }
        if (bt_flags == 1)
 8002eaa:	4b18      	ldr	r3, [pc, #96]	; (8002f0c <main+0x514>)
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d102      	bne.n	8002eba <main+0x4c2>
          confirm_flag = 1;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
        KNearest_match(squareColors, temp_colors, cnt, cube.face, confirm_flag);
 8002eba:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002ebe:	f897 21a3 	ldrb.w	r2, [r7, #419]	; 0x1a3
 8002ec2:	f107 0114 	add.w	r1, r7, #20
 8002ec6:	4638      	mov	r0, r7
 8002ec8:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	4623      	mov	r3, r4
 8002ed0:	f7fe fbf0 	bl	80016b4 <KNearest_match>

        if (confirm_flag == 1)
 8002ed4:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d16f      	bne.n	8002fbc <main+0x5c4>
        {

          bt_flags = 5;
 8002edc:	4b0b      	ldr	r3, [pc, #44]	; (8002f0c <main+0x514>)
 8002ede:	2205      	movs	r2, #5
 8002ee0:	701a      	strb	r2, [r3, #0]
          drawCube(cube.face);
 8002ee2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7ff f9ba 	bl	8002260 <drawCube>
          cnt++;
 8002eec:	f897 31a3 	ldrb.w	r3, [r7, #419]	; 0x1a3
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	f887 31a3 	strb.w	r3, [r7, #419]	; 0x1a3
          switch (cnt)
 8002ef6:	f897 31a3 	ldrb.w	r3, [r7, #419]	; 0x1a3
 8002efa:	3b01      	subs	r3, #1
 8002efc:	e00a      	b.n	8002f14 <main+0x51c>
 8002efe:	bf00      	nop
 8002f00:	40011000 	.word	0x40011000
 8002f04:	40010c00 	.word	0x40010c00
 8002f08:	2000347c 	.word	0x2000347c
 8002f0c:	200033f8 	.word	0x200033f8
 8002f10:	40010800 	.word	0x40010800
 8002f14:	2b0b      	cmp	r3, #11
 8002f16:	d84d      	bhi.n	8002fb4 <main+0x5bc>
 8002f18:	a201      	add	r2, pc, #4	; (adr r2, 8002f20 <main+0x528>)
 8002f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f1e:	bf00      	nop
 8002f20:	08002f51 	.word	0x08002f51
 8002f24:	08002f51 	.word	0x08002f51
 8002f28:	08002f51 	.word	0x08002f51
 8002f2c:	08002f57 	.word	0x08002f57
 8002f30:	08002f65 	.word	0x08002f65
 8002f34:	08002f65 	.word	0x08002f65
 8002f38:	08002f65 	.word	0x08002f65
 8002f3c:	08002f7b 	.word	0x08002f7b
 8002f40:	08002f91 	.word	0x08002f91
 8002f44:	08002f91 	.word	0x08002f91
 8002f48:	08002f91 	.word	0x08002f91
 8002f4c:	08002fa7 	.word	0x08002fa7
          {
          case 1:
          case 2:
          case 3:
            K();
 8002f50:	f7ff facc 	bl	80024ec <K>
            break;
 8002f54:	e02e      	b.n	8002fb4 <main+0x5bc>
          case 4:
            K();
 8002f56:	f7ff fac9 	bl	80024ec <K>
            C();
 8002f5a:	f7ff faf7 	bl	800254c <C>
            K3();
 8002f5e:	f7ff fadd 	bl	800251c <K3>
            break;
 8002f62:	e027      	b.n	8002fb4 <main+0x5bc>
          case 5:
          case 6:
          case 7:
            K();
 8002f64:	f7ff fac2 	bl	80024ec <K>
            C1();
 8002f68:	f7ff fb00 	bl	800256c <C1>
            K();
 8002f6c:	f7ff fabe 	bl	80024ec <K>
            C();
 8002f70:	f7ff faec 	bl	800254c <C>
            K3();
 8002f74:	f7ff fad2 	bl	800251c <K3>
            break;
 8002f78:	e01c      	b.n	8002fb4 <main+0x5bc>
          case 8:
            K();
 8002f7a:	f7ff fab7 	bl	80024ec <K>
            C1();
 8002f7e:	f7ff faf5 	bl	800256c <C1>
            K();
 8002f82:	f7ff fab3 	bl	80024ec <K>
            C1();
 8002f86:	f7ff faf1 	bl	800256c <C1>
            K3();
 8002f8a:	f7ff fac7 	bl	800251c <K3>
            break;
 8002f8e:	e011      	b.n	8002fb4 <main+0x5bc>
          case 9:
          case 10:
          case 11:
            K();
 8002f90:	f7ff faac 	bl	80024ec <K>
            C();
 8002f94:	f7ff fada 	bl	800254c <C>
            K();
 8002f98:	f7ff faa8 	bl	80024ec <K>
            C1();
 8002f9c:	f7ff fae6 	bl	800256c <C1>
            K3();
 8002fa0:	f7ff fabc 	bl	800251c <K3>
            break;
 8002fa4:	e006      	b.n	8002fb4 <main+0x5bc>
          case 12:
            K();
 8002fa6:	f7ff faa1 	bl	80024ec <K>
            C();
 8002faa:	f7ff facf 	bl	800254c <C>
            K();
 8002fae:	f7ff fa9d 	bl	80024ec <K>
            break;
 8002fb2:	bf00      	nop
          }
          HAL_Delay(1000);
 8002fb4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002fb8:	f002 fab0 	bl	800551c <HAL_Delay>
        }
        Ov7725_vsync = 0;
 8002fbc:	4b99      	ldr	r3, [pc, #612]	; (8003224 <main+0x82c>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	701a      	strb	r2, [r3, #0]
      {
 8002fc2:	e123      	b.n	800320c <main+0x814>
      }
      else if (cnt == 12)
 8002fc4:	f897 31a3 	ldrb.w	r3, [r7, #419]	; 0x1a3
 8002fc8:	2b0c      	cmp	r3, #12
 8002fca:	d121      	bne.n	8003010 <main+0x618>
      {
        LCD_Clear(0, 0, 320, 320, CYAN);
 8002fcc:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002fd0:	9300      	str	r3, [sp, #0]
 8002fd2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002fd6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002fda:	2100      	movs	r1, #0
 8002fdc:	2000      	movs	r0, #0
 8002fde:	f7ff f834 	bl	800204a <LCD_Clear>
        LCD_DrawString(80, 100, "DETECTION DONE");
 8002fe2:	4a91      	ldr	r2, [pc, #580]	; (8003228 <main+0x830>)
 8002fe4:	2164      	movs	r1, #100	; 0x64
 8002fe6:	2050      	movs	r0, #80	; 0x50
 8002fe8:	f7ff f898 	bl	800211c <LCD_DrawString>
        HAL_UART_Transmit(&huart3, (uint8_t *)cube.face, 54, 100);
 8002fec:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002ff0:	2364      	movs	r3, #100	; 0x64
 8002ff2:	2236      	movs	r2, #54	; 0x36
 8002ff4:	488d      	ldr	r0, [pc, #564]	; (800322c <main+0x834>)
 8002ff6:	f004 fdd3 	bl	8007ba0 <HAL_UART_Transmit>
        drawCube(cube.face);
 8002ffa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7ff f92e 	bl	8002260 <drawCube>
        cnt++;
 8003004:	f897 31a3 	ldrb.w	r3, [r7, #419]	; 0x1a3
 8003008:	3301      	adds	r3, #1
 800300a:	f887 31a3 	strb.w	r3, [r7, #419]	; 0x1a3
 800300e:	e0fd      	b.n	800320c <main+0x814>
      }
      else if (cnt > 12)
 8003010:	f897 31a3 	ldrb.w	r3, [r7, #419]	; 0x1a3
 8003014:	2b0c      	cmp	r3, #12
 8003016:	f240 80f9 	bls.w	800320c <main+0x814>
      {
        if (bt_flags == 3)
 800301a:	4b85      	ldr	r3, [pc, #532]	; (8003230 <main+0x838>)
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2b03      	cmp	r3, #3
 8003022:	f040 80f3 	bne.w	800320c <main+0x814>
        {
          // char line_buffer[] = "BBBFULRUBUURFRRRDFDFLUFDLRUUUFFDRLDLRRFLLBBLFDLUBBDDBD";
          // memcpy(cube.face, line_buffer, 54);
          LCD_Clear(0, 0, 320, 320, RED);
 8003026:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800302a:	9300      	str	r3, [sp, #0]
 800302c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003030:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003034:	2100      	movs	r1, #0
 8003036:	2000      	movs	r0, #0
 8003038:	f7ff f807 	bl	800204a <LCD_Clear>
          LCD_DrawString(80, 100, "SOLVE BEGIN!");
 800303c:	4a7d      	ldr	r2, [pc, #500]	; (8003234 <main+0x83c>)
 800303e:	2164      	movs	r1, #100	; 0x64
 8003040:	2050      	movs	r0, #80	; 0x50
 8003042:	f7ff f86b 	bl	800211c <LCD_DrawString>
          // drawCube(cube.face);
          HAL_Delay(50);
 8003046:	2032      	movs	r0, #50	; 0x32
 8003048:	f002 fa68 	bl	800551c <HAL_Delay>
          HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 800304c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003050:	4879      	ldr	r0, [pc, #484]	; (8003238 <main+0x840>)
 8003052:	f003 f9cc 	bl	80063ee <HAL_GPIO_TogglePin>
          HAL_Delay(100);
 8003056:	2064      	movs	r0, #100	; 0x64
 8003058:	f002 fa60 	bl	800551c <HAL_Delay>
          HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 800305c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003060:	4875      	ldr	r0, [pc, #468]	; (8003238 <main+0x840>)
 8003062:	f003 f9c4 	bl	80063ee <HAL_GPIO_TogglePin>
          solve_Naive(&cube);
 8003066:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800306a:	4618      	mov	r0, r3
 800306c:	f001 f952 	bl	8004314 <solve_Naive>
          LCD_DrawString(80, 150, "finish calculation!");
 8003070:	4a72      	ldr	r2, [pc, #456]	; (800323c <main+0x844>)
 8003072:	2196      	movs	r1, #150	; 0x96
 8003074:	2050      	movs	r0, #80	; 0x50
 8003076:	f7ff f851 	bl	800211c <LCD_DrawString>
          uint8_t color_cnt = 0;
 800307a:	2300      	movs	r3, #0
 800307c:	f887 3196 	strb.w	r3, [r7, #406]	; 0x196
          for (uint16_t i = 0; i < cube.routeLen; i++)
 8003080:	2300      	movs	r3, #0
 8003082:	f8a7 3194 	strh.w	r3, [r7, #404]	; 0x194
 8003086:	e0a3      	b.n	80031d0 <main+0x7d8>
          {
            float temp = cube.routeLen / 15.0f;
 8003088:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800308c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003090:	f893 3162 	ldrb.w	r3, [r3, #354]	; 0x162
 8003094:	4618      	mov	r0, r3
 8003096:	f7fd fdf7 	bl	8000c88 <__aeabi_i2f>
 800309a:	4603      	mov	r3, r0
 800309c:	4968      	ldr	r1, [pc, #416]	; (8003240 <main+0x848>)
 800309e:	4618      	mov	r0, r3
 80030a0:	f7fd fefa 	bl	8000e98 <__aeabi_fdiv>
 80030a4:	4603      	mov	r3, r0
 80030a6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
            if (i % (int)temp == 0)
 80030aa:	f8b7 4194 	ldrh.w	r4, [r7, #404]	; 0x194
 80030ae:	f8d7 018c 	ldr.w	r0, [r7, #396]	; 0x18c
 80030b2:	f7fe f803 	bl	80010bc <__aeabi_f2iz>
 80030b6:	4603      	mov	r3, r0
 80030b8:	fb94 f2f3 	sdiv	r2, r4, r3
 80030bc:	fb02 f303 	mul.w	r3, r2, r3
 80030c0:	1ae3      	subs	r3, r4, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d115      	bne.n	80030f2 <main+0x6fa>
            {
              LEDStrip[color_cnt] = blue;
 80030c6:	f897 2196 	ldrb.w	r2, [r7, #406]	; 0x196
 80030ca:	495e      	ldr	r1, [pc, #376]	; (8003244 <main+0x84c>)
 80030cc:	4613      	mov	r3, r2
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	4413      	add	r3, r2
 80030d2:	440b      	add	r3, r1
 80030d4:	4a5c      	ldr	r2, [pc, #368]	; (8003248 <main+0x850>)
 80030d6:	8811      	ldrh	r1, [r2, #0]
 80030d8:	7892      	ldrb	r2, [r2, #2]
 80030da:	8019      	strh	r1, [r3, #0]
 80030dc:	709a      	strb	r2, [r3, #2]
                stripToDMABuffer(LEDStrip, DMADataBuf, 30);
 80030de:	221e      	movs	r2, #30
 80030e0:	495a      	ldr	r1, [pc, #360]	; (800324c <main+0x854>)
 80030e2:	4858      	ldr	r0, [pc, #352]	; (8003244 <main+0x84c>)
 80030e4:	f7ff fbcc 	bl	8002880 <stripToDMABuffer>
              color_cnt++;
 80030e8:	f897 3196 	ldrb.w	r3, [r7, #406]	; 0x196
 80030ec:	3301      	adds	r3, #1
 80030ee:	f887 3196 	strb.w	r3, [r7, #406]	; 0x196
            }

            switch (cube.route[i])
 80030f2:	f8b7 3194 	ldrh.w	r3, [r7, #404]	; 0x194
 80030f6:	f507 72d4 	add.w	r2, r7, #424	; 0x1a8
 80030fa:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80030fe:	4413      	add	r3, r2
 8003100:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003104:	2b11      	cmp	r3, #17
 8003106:	d85d      	bhi.n	80031c4 <main+0x7cc>
 8003108:	a201      	add	r2, pc, #4	; (adr r2, 8003110 <main+0x718>)
 800310a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800310e:	bf00      	nop
 8003110:	08003159 	.word	0x08003159
 8003114:	0800315f 	.word	0x0800315f
 8003118:	08003165 	.word	0x08003165
 800311c:	0800316b 	.word	0x0800316b
 8003120:	08003171 	.word	0x08003171
 8003124:	08003177 	.word	0x08003177
 8003128:	0800317d 	.word	0x0800317d
 800312c:	08003183 	.word	0x08003183
 8003130:	08003189 	.word	0x08003189
 8003134:	0800318f 	.word	0x0800318f
 8003138:	08003195 	.word	0x08003195
 800313c:	0800319b 	.word	0x0800319b
 8003140:	080031a1 	.word	0x080031a1
 8003144:	080031a7 	.word	0x080031a7
 8003148:	080031ad 	.word	0x080031ad
 800314c:	080031b3 	.word	0x080031b3
 8003150:	080031b9 	.word	0x080031b9
 8003154:	080031bf 	.word	0x080031bf
            {
            case 0:
              l();
 8003158:	f7ff fb73 	bl	8002842 <l>
              break;
 800315c:	e033      	b.n	80031c6 <main+0x7ce>
            case 1:
              l1();
 800315e:	f7ff fb84 	bl	800286a <l1>
              break;
 8003162:	e030      	b.n	80031c6 <main+0x7ce>
            case 2:
              l2();
 8003164:	f7ff fb77 	bl	8002856 <l2>
              break;
 8003168:	e02d      	b.n	80031c6 <main+0x7ce>
            case 3:
              r();
 800316a:	f7ff fb4b 	bl	8002804 <r>
              break;
 800316e:	e02a      	b.n	80031c6 <main+0x7ce>
            case 4:
              r1();
 8003170:	f7ff fb5d 	bl	800282e <r1>
              break;
 8003174:	e027      	b.n	80031c6 <main+0x7ce>
            case 5:
              r2();
 8003176:	f7ff fb50 	bl	800281a <r2>
              break;
 800317a:	e024      	b.n	80031c6 <main+0x7ce>
            case 6:
              u();
 800317c:	f7ff fa58 	bl	8002630 <u>
              break;
 8003180:	e021      	b.n	80031c6 <main+0x7ce>
            case 7:
              u1();
 8003182:	f7ff fa6f 	bl	8002664 <u1>
              break;
 8003186:	e01e      	b.n	80031c6 <main+0x7ce>
            case 8:
              u2();
 8003188:	f7ff fa86 	bl	8002698 <u2>
              break;
 800318c:	e01b      	b.n	80031c6 <main+0x7ce>
            case 9:
              d();
 800318e:	f7ff faeb 	bl	8002768 <d>
              break;
 8003192:	e018      	b.n	80031c6 <main+0x7ce>
            case 10:
              d1();
 8003194:	f7ff fb02 	bl	800279c <d1>
              break;
 8003198:	e015      	b.n	80031c6 <main+0x7ce>
            case 11:
              d2();
 800319a:	f7ff fb19 	bl	80027d0 <d2>
              break;
 800319e:	e012      	b.n	80031c6 <main+0x7ce>
            case 12:
              f();
 80031a0:	f7ff fa94 	bl	80026cc <f>
              break;
 80031a4:	e00f      	b.n	80031c6 <main+0x7ce>
            case 13:
              f1();
 80031a6:	f7ff faab 	bl	8002700 <f1>
              break;
 80031aa:	e00c      	b.n	80031c6 <main+0x7ce>
            case 14:
              f2();
 80031ac:	f7ff fac2 	bl	8002734 <f2>
              break;
 80031b0:	e009      	b.n	80031c6 <main+0x7ce>
            case 15:
              b();
 80031b2:	f7ff f9fb 	bl	80025ac <b>
              break;
 80031b6:	e006      	b.n	80031c6 <main+0x7ce>
            case 16:
              b1();
 80031b8:	f7ff fa0e 	bl	80025d8 <b1>
              break;
 80031bc:	e003      	b.n	80031c6 <main+0x7ce>
            case 17:
              b2();
 80031be:	f7ff fa21 	bl	8002604 <b2>
              break;
 80031c2:	e000      	b.n	80031c6 <main+0x7ce>
            default:
              break;
 80031c4:	bf00      	nop
          for (uint16_t i = 0; i < cube.routeLen; i++)
 80031c6:	f8b7 3194 	ldrh.w	r3, [r7, #404]	; 0x194
 80031ca:	3301      	adds	r3, #1
 80031cc:	f8a7 3194 	strh.w	r3, [r7, #404]	; 0x194
 80031d0:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80031d4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80031d8:	f893 3162 	ldrb.w	r3, [r3, #354]	; 0x162
 80031dc:	b29b      	uxth	r3, r3
 80031de:	f8b7 2194 	ldrh.w	r2, [r7, #404]	; 0x194
 80031e2:	429a      	cmp	r2, r3
 80031e4:	f4ff af50 	bcc.w	8003088 <main+0x690>
            }
          }
          LCD_Clear(0, 0, 320, 320, GREEN);
 80031e8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80031ec:	9300      	str	r3, [sp, #0]
 80031ee:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80031f2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80031f6:	2100      	movs	r1, #0
 80031f8:	2000      	movs	r0, #0
 80031fa:	f7fe ff26 	bl	800204a <LCD_Clear>
          LCD_DrawString(80, 100, "SOLVE DONE!");
 80031fe:	4a14      	ldr	r2, [pc, #80]	; (8003250 <main+0x858>)
 8003200:	2164      	movs	r1, #100	; 0x64
 8003202:	2050      	movs	r0, #80	; 0x50
 8003204:	f7fe ff8a 	bl	800211c <LCD_DrawString>
          return 0;
 8003208:	2300      	movs	r3, #0
 800320a:	e006      	b.n	800321a <main+0x822>
  while (1 && bt_flags != 4)
 800320c:	4b08      	ldr	r3, [pc, #32]	; (8003230 <main+0x838>)
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b04      	cmp	r3, #4
 8003214:	f47f ac94 	bne.w	8002b40 <main+0x148>
 8003218:	2300      	movs	r3, #0
        }
      }
    }
  }
  /* USER CODE END 3 */
}
 800321a:	4618      	mov	r0, r3
 800321c:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8003220:	46bd      	mov	sp, r7
 8003222:	bd90      	pop	{r4, r7, pc}
 8003224:	200020cc 	.word	0x200020cc
 8003228:	08009220 	.word	0x08009220
 800322c:	2000343c 	.word	0x2000343c
 8003230:	200033f8 	.word	0x200033f8
 8003234:	08009230 	.word	0x08009230
 8003238:	40010800 	.word	0x40010800
 800323c:	08009240 	.word	0x08009240
 8003240:	41700000 	.word	0x41700000
 8003244:	200032f0 	.word	0x200032f0
 8003248:	2000014c 	.word	0x2000014c
 800324c:	200020d0 	.word	0x200020d0
 8003250:	08009254 	.word	0x08009254

08003254 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b090      	sub	sp, #64	; 0x40
 8003258:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800325a:	f107 0318 	add.w	r3, r7, #24
 800325e:	2228      	movs	r2, #40	; 0x28
 8003260:	2100      	movs	r1, #0
 8003262:	4618      	mov	r0, r3
 8003264:	f005 faca 	bl	80087fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003268:	1d3b      	adds	r3, r7, #4
 800326a:	2200      	movs	r2, #0
 800326c:	601a      	str	r2, [r3, #0]
 800326e:	605a      	str	r2, [r3, #4]
 8003270:	609a      	str	r2, [r3, #8]
 8003272:	60da      	str	r2, [r3, #12]
 8003274:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003276:	2301      	movs	r3, #1
 8003278:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800327a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800327e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003280:	2300      	movs	r3, #0
 8003282:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003284:	2301      	movs	r3, #1
 8003286:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003288:	2302      	movs	r3, #2
 800328a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800328c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003290:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003292:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003296:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003298:	f107 0318 	add.w	r3, r7, #24
 800329c:	4618      	mov	r0, r3
 800329e:	f003 f8d9 	bl	8006454 <HAL_RCC_OscConfig>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d001      	beq.n	80032ac <SystemClock_Config+0x58>
  {
    Error_Handler();
 80032a8:	f000 f819 	bl	80032de <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80032ac:	230f      	movs	r3, #15
 80032ae:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80032b0:	2302      	movs	r3, #2
 80032b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80032b4:	2300      	movs	r3, #0
 80032b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80032b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80032be:	2300      	movs	r3, #0
 80032c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80032c2:	1d3b      	adds	r3, r7, #4
 80032c4:	2102      	movs	r1, #2
 80032c6:	4618      	mov	r0, r3
 80032c8:	f003 fb28 	bl	800691c <HAL_RCC_ClockConfig>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d001      	beq.n	80032d6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80032d2:	f000 f804 	bl	80032de <Error_Handler>
  }
}
 80032d6:	bf00      	nop
 80032d8:	3740      	adds	r7, #64	; 0x40
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}

080032de <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80032de:	b480      	push	{r7}
 80032e0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80032e2:	b672      	cpsid	i
}
 80032e4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80032e6:	e7fe      	b.n	80032e6 <Error_Handler+0x8>

080032e8 <rotateInPosMode>:
#define WAIT_UNTIL(EXPRESS)                                                                        \
    for (uint32_t startTick = HAL_GetTick(); (EXPRESS) && (HAL_GetTick() - startTick <= TIMEOUT);) \
        HAL_UART_Receive_IT(&huart1, (uint8_t *)&RxBuffer, RXBUFFERSIZE);

void rotateInPosMode(uint8_t ID, uint8_t dir, uint16_t angle, uint8_t wait_flag)
{
 80032e8:	b590      	push	{r4, r7, lr}
 80032ea:	b08b      	sub	sp, #44	; 0x2c
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	4604      	mov	r4, r0
 80032f0:	4608      	mov	r0, r1
 80032f2:	4611      	mov	r1, r2
 80032f4:	461a      	mov	r2, r3
 80032f6:	4623      	mov	r3, r4
 80032f8:	71fb      	strb	r3, [r7, #7]
 80032fa:	4603      	mov	r3, r0
 80032fc:	71bb      	strb	r3, [r7, #6]
 80032fe:	460b      	mov	r3, r1
 8003300:	80bb      	strh	r3, [r7, #4]
 8003302:	4613      	mov	r3, r2
 8003304:	70fb      	strb	r3, [r7, #3]
    uint32_t steps = angle / STEP_DGREE * M_STEP;
 8003306:	88bb      	ldrh	r3, [r7, #4]
 8003308:	4618      	mov	r0, r3
 800330a:	f7fd f8df 	bl	80004cc <__aeabi_i2d>
 800330e:	a348      	add	r3, pc, #288	; (adr r3, 8003430 <rotateInPosMode+0x148>)
 8003310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003314:	f7fd fa6e 	bl	80007f4 <__aeabi_ddiv>
 8003318:	4602      	mov	r2, r0
 800331a:	460b      	mov	r3, r1
 800331c:	4610      	mov	r0, r2
 800331e:	4619      	mov	r1, r3
 8003320:	f04f 0200 	mov.w	r2, #0
 8003324:	4b44      	ldr	r3, [pc, #272]	; (8003438 <rotateInPosMode+0x150>)
 8003326:	f7fd f93b 	bl	80005a0 <__aeabi_dmul>
 800332a:	4602      	mov	r2, r0
 800332c:	460b      	mov	r3, r1
 800332e:	4610      	mov	r0, r2
 8003330:	4619      	mov	r1, r3
 8003332:	f7fd fbcf 	bl	8000ad4 <__aeabi_d2uiz>
 8003336:	4603      	mov	r3, r0
 8003338:	627b      	str	r3, [r7, #36]	; 0x24
 800333a:	79fb      	ldrb	r3, [r7, #7]
    uint8_t TxBuffer[9];
    memcpy(TxBuffer, &ID, 1);
 800333c:	733b      	strb	r3, [r7, #12]
    TxBuffer[1] = POS_REG;
 800333e:	23fd      	movs	r3, #253	; 0xfd
 8003340:	737b      	strb	r3, [r7, #13]
    uint16_t speed = (SPEED | (uint8_t)dir << 15);
 8003342:	79bb      	ldrb	r3, [r7, #6]
 8003344:	03db      	lsls	r3, r3, #15
 8003346:	b21b      	sxth	r3, r3
 8003348:	f043 033c 	orr.w	r3, r3, #60	; 0x3c
 800334c:	b21b      	sxth	r3, r3
 800334e:	847b      	strh	r3, [r7, #34]	; 0x22
    TxBuffer[2] = (uint8_t)(speed >> 8);
 8003350:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003352:	0a1b      	lsrs	r3, r3, #8
 8003354:	b29b      	uxth	r3, r3
 8003356:	b2db      	uxtb	r3, r3
 8003358:	73bb      	strb	r3, [r7, #14]
    TxBuffer[3] = (uint8_t)(speed & 0x00FF);
 800335a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800335c:	b2db      	uxtb	r3, r3
 800335e:	73fb      	strb	r3, [r7, #15]
    TxBuffer[4] = (uint8_t)ACCELERATION;
 8003360:	23f8      	movs	r3, #248	; 0xf8
 8003362:	743b      	strb	r3, [r7, #16]
    TxBuffer[5] = (uint8_t)(steps >> 16);
 8003364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003366:	0c1b      	lsrs	r3, r3, #16
 8003368:	b2db      	uxtb	r3, r3
 800336a:	747b      	strb	r3, [r7, #17]
    TxBuffer[6] = (uint8_t)(steps >> 8);
 800336c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336e:	0a1b      	lsrs	r3, r3, #8
 8003370:	b2db      	uxtb	r3, r3
 8003372:	74bb      	strb	r3, [r7, #18]
    TxBuffer[7] = (uint8_t)(steps & 0x00FF);
 8003374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003376:	b2db      	uxtb	r3, r3
 8003378:	74fb      	strb	r3, [r7, #19]
    TxBuffer[8] = CHECK_BIT;
 800337a:	236b      	movs	r3, #107	; 0x6b
 800337c:	753b      	strb	r3, [r7, #20]
    HAL_Delay(1);
 800337e:	2001      	movs	r0, #1
 8003380:	f002 f8cc 	bl	800551c <HAL_Delay>
    WAIT_UNTIL(!(motor_flag & (0x01 << (ID - 1))))
 8003384:	f002 f8c0 	bl	8005508 <HAL_GetTick>
 8003388:	61f8      	str	r0, [r7, #28]
 800338a:	e004      	b.n	8003396 <rotateInPosMode+0xae>
 800338c:	2203      	movs	r2, #3
 800338e:	492b      	ldr	r1, [pc, #172]	; (800343c <rotateInPosMode+0x154>)
 8003390:	482b      	ldr	r0, [pc, #172]	; (8003440 <rotateInPosMode+0x158>)
 8003392:	f004 fce2 	bl	8007d5a <HAL_UART_Receive_IT>
 8003396:	4b2b      	ldr	r3, [pc, #172]	; (8003444 <rotateInPosMode+0x15c>)
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	b2db      	uxtb	r3, r3
 800339c:	461a      	mov	r2, r3
 800339e:	79fb      	ldrb	r3, [r7, #7]
 80033a0:	3b01      	subs	r3, #1
 80033a2:	fa42 f303 	asr.w	r3, r2, r3
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d108      	bne.n	80033c0 <rotateInPosMode+0xd8>
 80033ae:	f002 f8ab 	bl	8005508 <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80033bc:	4293      	cmp	r3, r2
 80033be:	d9e5      	bls.n	800338c <rotateInPosMode+0xa4>
    WAIT_UNTIL(wait_flag && motor_flag != 7)
 80033c0:	f002 f8a2 	bl	8005508 <HAL_GetTick>
 80033c4:	61b8      	str	r0, [r7, #24]
 80033c6:	e004      	b.n	80033d2 <rotateInPosMode+0xea>
 80033c8:	2203      	movs	r2, #3
 80033ca:	491c      	ldr	r1, [pc, #112]	; (800343c <rotateInPosMode+0x154>)
 80033cc:	481c      	ldr	r0, [pc, #112]	; (8003440 <rotateInPosMode+0x158>)
 80033ce:	f004 fcc4 	bl	8007d5a <HAL_UART_Receive_IT>
 80033d2:	78fb      	ldrb	r3, [r7, #3]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d00d      	beq.n	80033f4 <rotateInPosMode+0x10c>
 80033d8:	4b1a      	ldr	r3, [pc, #104]	; (8003444 <rotateInPosMode+0x15c>)
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b07      	cmp	r3, #7
 80033e0:	d008      	beq.n	80033f4 <rotateInPosMode+0x10c>
 80033e2:	f002 f891 	bl	8005508 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d9e9      	bls.n	80033c8 <rotateInPosMode+0xe0>
    HAL_UART_Transmit(&huart1, (uint8_t *)&TxBuffer, 9, 0xFFFF);
 80033f4:	f107 010c 	add.w	r1, r7, #12
 80033f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033fc:	2209      	movs	r2, #9
 80033fe:	4810      	ldr	r0, [pc, #64]	; (8003440 <rotateInPosMode+0x158>)
 8003400:	f004 fbce 	bl	8007ba0 <HAL_UART_Transmit>
    motor_flag &= ~(0x01 << (ID - 1));
 8003404:	79fb      	ldrb	r3, [r7, #7]
 8003406:	3b01      	subs	r3, #1
 8003408:	2201      	movs	r2, #1
 800340a:	fa02 f303 	lsl.w	r3, r2, r3
 800340e:	b25b      	sxtb	r3, r3
 8003410:	43db      	mvns	r3, r3
 8003412:	b25a      	sxtb	r2, r3
 8003414:	4b0b      	ldr	r3, [pc, #44]	; (8003444 <rotateInPosMode+0x15c>)
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	b2db      	uxtb	r3, r3
 800341a:	b25b      	sxtb	r3, r3
 800341c:	4013      	ands	r3, r2
 800341e:	b25b      	sxtb	r3, r3
 8003420:	b2da      	uxtb	r2, r3
 8003422:	4b08      	ldr	r3, [pc, #32]	; (8003444 <rotateInPosMode+0x15c>)
 8003424:	701a      	strb	r2, [r3, #0]
}
 8003426:	bf00      	nop
 8003428:	372c      	adds	r7, #44	; 0x2c
 800342a:	46bd      	mov	sp, r7
 800342c:	bd90      	pop	{r4, r7, pc}
 800342e:	bf00      	nop
 8003430:	cccccccd 	.word	0xcccccccd
 8003434:	3ffccccc 	.word	0x3ffccccc
 8003438:	40300000 	.word	0x40300000
 800343c:	2000336c 	.word	0x2000336c
 8003440:	200033fc 	.word	0x200033fc
 8003444:	20003368 	.word	0x20003368

08003448 <rotate2InPosMode>:

void rotate2InPosMode(uint8_t ID1, uint8_t ID2, uint8_t dir1, uint8_t dir2, uint16_t angle, uint8_t wait_flag)
{
 8003448:	b590      	push	{r4, r7, lr}
 800344a:	b091      	sub	sp, #68	; 0x44
 800344c:	af00      	add	r7, sp, #0
 800344e:	4604      	mov	r4, r0
 8003450:	4608      	mov	r0, r1
 8003452:	4611      	mov	r1, r2
 8003454:	461a      	mov	r2, r3
 8003456:	4623      	mov	r3, r4
 8003458:	71fb      	strb	r3, [r7, #7]
 800345a:	4603      	mov	r3, r0
 800345c:	71bb      	strb	r3, [r7, #6]
 800345e:	460b      	mov	r3, r1
 8003460:	717b      	strb	r3, [r7, #5]
 8003462:	4613      	mov	r3, r2
 8003464:	713b      	strb	r3, [r7, #4]
    uint32_t steps = angle / STEP_DGREE * M_STEP;
 8003466:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800346a:	4618      	mov	r0, r3
 800346c:	f7fd f82e 	bl	80004cc <__aeabi_i2d>
 8003470:	a3ad      	add	r3, pc, #692	; (adr r3, 8003728 <rotate2InPosMode+0x2e0>)
 8003472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003476:	f7fd f9bd 	bl	80007f4 <__aeabi_ddiv>
 800347a:	4602      	mov	r2, r0
 800347c:	460b      	mov	r3, r1
 800347e:	4610      	mov	r0, r2
 8003480:	4619      	mov	r1, r3
 8003482:	f04f 0200 	mov.w	r2, #0
 8003486:	4baa      	ldr	r3, [pc, #680]	; (8003730 <rotate2InPosMode+0x2e8>)
 8003488:	f7fd f88a 	bl	80005a0 <__aeabi_dmul>
 800348c:	4602      	mov	r2, r0
 800348e:	460b      	mov	r3, r1
 8003490:	4610      	mov	r0, r2
 8003492:	4619      	mov	r1, r3
 8003494:	f7fd fb1e 	bl	8000ad4 <__aeabi_d2uiz>
 8003498:	4603      	mov	r3, r0
 800349a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800349c:	79fb      	ldrb	r3, [r7, #7]
    uint8_t TxBuffer1[9];
    memcpy(TxBuffer1, &ID1, 1);
 800349e:	763b      	strb	r3, [r7, #24]
    TxBuffer1[1] = POS_REG;
 80034a0:	23fd      	movs	r3, #253	; 0xfd
 80034a2:	767b      	strb	r3, [r7, #25]
    uint16_t speed = (SPEED | (uint8_t)dir1 << 15);
 80034a4:	797b      	ldrb	r3, [r7, #5]
 80034a6:	03db      	lsls	r3, r3, #15
 80034a8:	b21b      	sxth	r3, r3
 80034aa:	f043 033c 	orr.w	r3, r3, #60	; 0x3c
 80034ae:	b21b      	sxth	r3, r3
 80034b0:	877b      	strh	r3, [r7, #58]	; 0x3a
    TxBuffer1[2] = (uint8_t)(speed >> 8);
 80034b2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80034b4:	0a1b      	lsrs	r3, r3, #8
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	76bb      	strb	r3, [r7, #26]
    TxBuffer1[3] = (uint8_t)(speed & 0x00FF);
 80034bc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	76fb      	strb	r3, [r7, #27]
    TxBuffer1[4] = (uint8_t)ACCELERATION;
 80034c2:	23f8      	movs	r3, #248	; 0xf8
 80034c4:	773b      	strb	r3, [r7, #28]
    TxBuffer1[5] = (uint8_t)(steps >> 16);
 80034c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034c8:	0c1b      	lsrs	r3, r3, #16
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	777b      	strb	r3, [r7, #29]
    TxBuffer1[6] = (uint8_t)(steps >> 8);
 80034ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034d0:	0a1b      	lsrs	r3, r3, #8
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	77bb      	strb	r3, [r7, #30]
    TxBuffer1[7] = (uint8_t)(steps & 0x00FF);
 80034d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	77fb      	strb	r3, [r7, #31]
    TxBuffer1[8] = CHECK_BIT;
 80034dc:	236b      	movs	r3, #107	; 0x6b
 80034de:	f887 3020 	strb.w	r3, [r7, #32]
 80034e2:	79bb      	ldrb	r3, [r7, #6]

    uint8_t TxBuffer2[9];
    memcpy(TxBuffer2, &ID2, 1);
 80034e4:	733b      	strb	r3, [r7, #12]
    TxBuffer2[1] = POS_REG;
 80034e6:	23fd      	movs	r3, #253	; 0xfd
 80034e8:	737b      	strb	r3, [r7, #13]
    speed = (SPEED | (uint8_t)dir2 << 15);
 80034ea:	793b      	ldrb	r3, [r7, #4]
 80034ec:	03db      	lsls	r3, r3, #15
 80034ee:	b21b      	sxth	r3, r3
 80034f0:	f043 033c 	orr.w	r3, r3, #60	; 0x3c
 80034f4:	b21b      	sxth	r3, r3
 80034f6:	877b      	strh	r3, [r7, #58]	; 0x3a
    TxBuffer2[2] = (uint8_t)(speed >> 8);
 80034f8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80034fa:	0a1b      	lsrs	r3, r3, #8
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	73bb      	strb	r3, [r7, #14]
    TxBuffer2[3] = (uint8_t)(speed & 0x00FF);
 8003502:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003504:	b2db      	uxtb	r3, r3
 8003506:	73fb      	strb	r3, [r7, #15]
    TxBuffer2[4] = (uint8_t)ACCELERATION;
 8003508:	23f8      	movs	r3, #248	; 0xf8
 800350a:	743b      	strb	r3, [r7, #16]
    TxBuffer2[5] = (uint8_t)(steps >> 16);
 800350c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800350e:	0c1b      	lsrs	r3, r3, #16
 8003510:	b2db      	uxtb	r3, r3
 8003512:	747b      	strb	r3, [r7, #17]
    TxBuffer2[6] = (uint8_t)(steps >> 8);
 8003514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003516:	0a1b      	lsrs	r3, r3, #8
 8003518:	b2db      	uxtb	r3, r3
 800351a:	74bb      	strb	r3, [r7, #18]
    TxBuffer2[7] = (uint8_t)(steps & 0x00FF);
 800351c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800351e:	b2db      	uxtb	r3, r3
 8003520:	74fb      	strb	r3, [r7, #19]
    TxBuffer2[8] = CHECK_BIT;
 8003522:	236b      	movs	r3, #107	; 0x6b
 8003524:	753b      	strb	r3, [r7, #20]
    // while (!(motor_flag & (0x01 << (ID2 - 1))))
    //     ;
    // while (wait_flag && motor_flag != 7)
    //     ;

    WAIT_UNTIL(!(motor_flag & (0x01 << (ID1 - 1))))
 8003526:	f001 ffef 	bl	8005508 <HAL_GetTick>
 800352a:	6378      	str	r0, [r7, #52]	; 0x34
 800352c:	e004      	b.n	8003538 <rotate2InPosMode+0xf0>
 800352e:	2203      	movs	r2, #3
 8003530:	4980      	ldr	r1, [pc, #512]	; (8003734 <rotate2InPosMode+0x2ec>)
 8003532:	4881      	ldr	r0, [pc, #516]	; (8003738 <rotate2InPosMode+0x2f0>)
 8003534:	f004 fc11 	bl	8007d5a <HAL_UART_Receive_IT>
 8003538:	4b80      	ldr	r3, [pc, #512]	; (800373c <rotate2InPosMode+0x2f4>)
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	b2db      	uxtb	r3, r3
 800353e:	461a      	mov	r2, r3
 8003540:	79fb      	ldrb	r3, [r7, #7]
 8003542:	3b01      	subs	r3, #1
 8003544:	fa42 f303 	asr.w	r3, r2, r3
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	2b00      	cmp	r3, #0
 800354e:	d108      	bne.n	8003562 <rotate2InPosMode+0x11a>
 8003550:	f001 ffda 	bl	8005508 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800355e:	4293      	cmp	r3, r2
 8003560:	d9e5      	bls.n	800352e <rotate2InPosMode+0xe6>
    motor_flag |= 0x01 << (ID1 - 1);
 8003562:	79fb      	ldrb	r3, [r7, #7]
 8003564:	3b01      	subs	r3, #1
 8003566:	2201      	movs	r2, #1
 8003568:	fa02 f303 	lsl.w	r3, r2, r3
 800356c:	b25a      	sxtb	r2, r3
 800356e:	4b73      	ldr	r3, [pc, #460]	; (800373c <rotate2InPosMode+0x2f4>)
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	b2db      	uxtb	r3, r3
 8003574:	b25b      	sxtb	r3, r3
 8003576:	4313      	orrs	r3, r2
 8003578:	b25b      	sxtb	r3, r3
 800357a:	b2da      	uxtb	r2, r3
 800357c:	4b6f      	ldr	r3, [pc, #444]	; (800373c <rotate2InPosMode+0x2f4>)
 800357e:	701a      	strb	r2, [r3, #0]
    WAIT_UNTIL(!(motor_flag & (0x01 << (ID2 - 1))))
 8003580:	f001 ffc2 	bl	8005508 <HAL_GetTick>
 8003584:	6338      	str	r0, [r7, #48]	; 0x30
 8003586:	e004      	b.n	8003592 <rotate2InPosMode+0x14a>
 8003588:	2203      	movs	r2, #3
 800358a:	496a      	ldr	r1, [pc, #424]	; (8003734 <rotate2InPosMode+0x2ec>)
 800358c:	486a      	ldr	r0, [pc, #424]	; (8003738 <rotate2InPosMode+0x2f0>)
 800358e:	f004 fbe4 	bl	8007d5a <HAL_UART_Receive_IT>
 8003592:	4b6a      	ldr	r3, [pc, #424]	; (800373c <rotate2InPosMode+0x2f4>)
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	b2db      	uxtb	r3, r3
 8003598:	461a      	mov	r2, r3
 800359a:	79bb      	ldrb	r3, [r7, #6]
 800359c:	3b01      	subs	r3, #1
 800359e:	fa42 f303 	asr.w	r3, r2, r3
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d108      	bne.n	80035bc <rotate2InPosMode+0x174>
 80035aa:	f001 ffad 	bl	8005508 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d9e5      	bls.n	8003588 <rotate2InPosMode+0x140>
    motor_flag |= 0x01 << (ID2 - 1);
 80035bc:	79bb      	ldrb	r3, [r7, #6]
 80035be:	3b01      	subs	r3, #1
 80035c0:	2201      	movs	r2, #1
 80035c2:	fa02 f303 	lsl.w	r3, r2, r3
 80035c6:	b25a      	sxtb	r2, r3
 80035c8:	4b5c      	ldr	r3, [pc, #368]	; (800373c <rotate2InPosMode+0x2f4>)
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	b25b      	sxtb	r3, r3
 80035d0:	4313      	orrs	r3, r2
 80035d2:	b25b      	sxtb	r3, r3
 80035d4:	b2da      	uxtb	r2, r3
 80035d6:	4b59      	ldr	r3, [pc, #356]	; (800373c <rotate2InPosMode+0x2f4>)
 80035d8:	701a      	strb	r2, [r3, #0]
    WAIT_UNTIL(wait_flag && motor_flag != 7)
 80035da:	f001 ff95 	bl	8005508 <HAL_GetTick>
 80035de:	62f8      	str	r0, [r7, #44]	; 0x2c
 80035e0:	e004      	b.n	80035ec <rotate2InPosMode+0x1a4>
 80035e2:	2203      	movs	r2, #3
 80035e4:	4953      	ldr	r1, [pc, #332]	; (8003734 <rotate2InPosMode+0x2ec>)
 80035e6:	4854      	ldr	r0, [pc, #336]	; (8003738 <rotate2InPosMode+0x2f0>)
 80035e8:	f004 fbb7 	bl	8007d5a <HAL_UART_Receive_IT>
 80035ec:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d00d      	beq.n	8003610 <rotate2InPosMode+0x1c8>
 80035f4:	4b51      	ldr	r3, [pc, #324]	; (800373c <rotate2InPosMode+0x2f4>)
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b07      	cmp	r3, #7
 80035fc:	d008      	beq.n	8003610 <rotate2InPosMode+0x1c8>
 80035fe:	f001 ff83 	bl	8005508 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800360c:	4293      	cmp	r3, r2
 800360e:	d9e8      	bls.n	80035e2 <rotate2InPosMode+0x19a>
  __ASM volatile ("cpsid i" : : : "memory");
 8003610:	b672      	cpsid	i
}
 8003612:	bf00      	nop

    __disable_irq();
    motor_flag &= ~(0x01 << (ID1 - 1));
 8003614:	79fb      	ldrb	r3, [r7, #7]
 8003616:	3b01      	subs	r3, #1
 8003618:	2201      	movs	r2, #1
 800361a:	fa02 f303 	lsl.w	r3, r2, r3
 800361e:	b25b      	sxtb	r3, r3
 8003620:	43db      	mvns	r3, r3
 8003622:	b25a      	sxtb	r2, r3
 8003624:	4b45      	ldr	r3, [pc, #276]	; (800373c <rotate2InPosMode+0x2f4>)
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	b2db      	uxtb	r3, r3
 800362a:	b25b      	sxtb	r3, r3
 800362c:	4013      	ands	r3, r2
 800362e:	b25b      	sxtb	r3, r3
 8003630:	b2da      	uxtb	r2, r3
 8003632:	4b42      	ldr	r3, [pc, #264]	; (800373c <rotate2InPosMode+0x2f4>)
 8003634:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit_IT(&huart1, (uint8_t *)&TxBuffer1, 9);
 8003636:	f107 0318 	add.w	r3, r7, #24
 800363a:	2209      	movs	r2, #9
 800363c:	4619      	mov	r1, r3
 800363e:	483e      	ldr	r0, [pc, #248]	; (8003738 <rotate2InPosMode+0x2f0>)
 8003640:	f004 fb47 	bl	8007cd2 <HAL_UART_Transmit_IT>
  __ASM volatile ("cpsie i" : : : "memory");
 8003644:	b662      	cpsie	i
}
 8003646:	bf00      	nop
    __enable_irq();
    while (huart1.gState != HAL_UART_STATE_READY)
 8003648:	bf00      	nop
 800364a:	4b3b      	ldr	r3, [pc, #236]	; (8003738 <rotate2InPosMode+0x2f0>)
 800364c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b20      	cmp	r3, #32
 8003654:	d1f9      	bne.n	800364a <rotate2InPosMode+0x202>
        ;
    HAL_Delay(1);
 8003656:	2001      	movs	r0, #1
 8003658:	f001 ff60 	bl	800551c <HAL_Delay>
  __ASM volatile ("cpsid i" : : : "memory");
 800365c:	b672      	cpsid	i
}
 800365e:	bf00      	nop
    __disable_irq();
    motor_flag &= ~(0x01 << (ID2 - 1));
 8003660:	79bb      	ldrb	r3, [r7, #6]
 8003662:	3b01      	subs	r3, #1
 8003664:	2201      	movs	r2, #1
 8003666:	fa02 f303 	lsl.w	r3, r2, r3
 800366a:	b25b      	sxtb	r3, r3
 800366c:	43db      	mvns	r3, r3
 800366e:	b25a      	sxtb	r2, r3
 8003670:	4b32      	ldr	r3, [pc, #200]	; (800373c <rotate2InPosMode+0x2f4>)
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	b2db      	uxtb	r3, r3
 8003676:	b25b      	sxtb	r3, r3
 8003678:	4013      	ands	r3, r2
 800367a:	b25b      	sxtb	r3, r3
 800367c:	b2da      	uxtb	r2, r3
 800367e:	4b2f      	ldr	r3, [pc, #188]	; (800373c <rotate2InPosMode+0x2f4>)
 8003680:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit_IT(&huart1, (uint8_t *)&TxBuffer2, 9);
 8003682:	f107 030c 	add.w	r3, r7, #12
 8003686:	2209      	movs	r2, #9
 8003688:	4619      	mov	r1, r3
 800368a:	482b      	ldr	r0, [pc, #172]	; (8003738 <rotate2InPosMode+0x2f0>)
 800368c:	f004 fb21 	bl	8007cd2 <HAL_UART_Transmit_IT>
  __ASM volatile ("cpsie i" : : : "memory");
 8003690:	b662      	cpsie	i
}
 8003692:	bf00      	nop
    __enable_irq();
    while (huart1.gState != HAL_UART_STATE_READY)
 8003694:	bf00      	nop
 8003696:	4b28      	ldr	r3, [pc, #160]	; (8003738 <rotate2InPosMode+0x2f0>)
 8003698:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b20      	cmp	r3, #32
 80036a0:	d1f9      	bne.n	8003696 <rotate2InPosMode+0x24e>
        ;

    WAIT_UNTIL(!(motor_flag & (0x01 << (ID1 - 1))))
 80036a2:	f001 ff31 	bl	8005508 <HAL_GetTick>
 80036a6:	62b8      	str	r0, [r7, #40]	; 0x28
 80036a8:	e004      	b.n	80036b4 <rotate2InPosMode+0x26c>
 80036aa:	2203      	movs	r2, #3
 80036ac:	4921      	ldr	r1, [pc, #132]	; (8003734 <rotate2InPosMode+0x2ec>)
 80036ae:	4822      	ldr	r0, [pc, #136]	; (8003738 <rotate2InPosMode+0x2f0>)
 80036b0:	f004 fb53 	bl	8007d5a <HAL_UART_Receive_IT>
 80036b4:	4b21      	ldr	r3, [pc, #132]	; (800373c <rotate2InPosMode+0x2f4>)
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	461a      	mov	r2, r3
 80036bc:	79fb      	ldrb	r3, [r7, #7]
 80036be:	3b01      	subs	r3, #1
 80036c0:	fa42 f303 	asr.w	r3, r2, r3
 80036c4:	f003 0301 	and.w	r3, r3, #1
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d108      	bne.n	80036de <rotate2InPosMode+0x296>
 80036cc:	f001 ff1c 	bl	8005508 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80036da:	4293      	cmp	r3, r2
 80036dc:	d9e5      	bls.n	80036aa <rotate2InPosMode+0x262>
    WAIT_UNTIL(!(motor_flag & (0x01 << (ID2 - 1))))
 80036de:	f001 ff13 	bl	8005508 <HAL_GetTick>
 80036e2:	6278      	str	r0, [r7, #36]	; 0x24
 80036e4:	e004      	b.n	80036f0 <rotate2InPosMode+0x2a8>
 80036e6:	2203      	movs	r2, #3
 80036e8:	4912      	ldr	r1, [pc, #72]	; (8003734 <rotate2InPosMode+0x2ec>)
 80036ea:	4813      	ldr	r0, [pc, #76]	; (8003738 <rotate2InPosMode+0x2f0>)
 80036ec:	f004 fb35 	bl	8007d5a <HAL_UART_Receive_IT>
 80036f0:	4b12      	ldr	r3, [pc, #72]	; (800373c <rotate2InPosMode+0x2f4>)
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	461a      	mov	r2, r3
 80036f8:	79bb      	ldrb	r3, [r7, #6]
 80036fa:	3b01      	subs	r3, #1
 80036fc:	fa42 f303 	asr.w	r3, r2, r3
 8003700:	f003 0301 	and.w	r3, r3, #1
 8003704:	2b00      	cmp	r3, #0
 8003706:	d108      	bne.n	800371a <rotate2InPosMode+0x2d2>
 8003708:	f001 fefe 	bl	8005508 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003716:	4293      	cmp	r3, r2
 8003718:	d9e5      	bls.n	80036e6 <rotate2InPosMode+0x29e>
}
 800371a:	bf00      	nop
 800371c:	3744      	adds	r7, #68	; 0x44
 800371e:	46bd      	mov	sp, r7
 8003720:	bd90      	pop	{r4, r7, pc}
 8003722:	bf00      	nop
 8003724:	f3af 8000 	nop.w
 8003728:	cccccccd 	.word	0xcccccccd
 800372c:	3ffccccc 	.word	0x3ffccccc
 8003730:	40300000 	.word	0x40300000
 8003734:	2000336c 	.word	0x2000336c
 8003738:	200033fc 	.word	0x200033fc
 800373c:	20003368 	.word	0x20003368

08003740 <rotateCube>:
    {F2, B2},
    {L, L},
    {B, B}};

void rotateCube(cube_t *c, uint8_t move)
{
 8003740:	b4f0      	push	{r4, r5, r6, r7}
 8003742:	b098      	sub	sp, #96	; 0x60
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	460b      	mov	r3, r1
 800374a:	70fb      	strb	r3, [r7, #3]
    char temp[54];
    memcpy(temp, c->face, 54);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	461c      	mov	r4, r3
 8003750:	f107 0620 	add.w	r6, r7, #32
 8003754:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 8003758:	4635      	mov	r5, r6
 800375a:	4623      	mov	r3, r4
 800375c:	6818      	ldr	r0, [r3, #0]
 800375e:	6859      	ldr	r1, [r3, #4]
 8003760:	689a      	ldr	r2, [r3, #8]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003766:	3410      	adds	r4, #16
 8003768:	3610      	adds	r6, #16
 800376a:	4564      	cmp	r4, ip
 800376c:	d1f4      	bne.n	8003758 <rotateCube+0x18>
 800376e:	4633      	mov	r3, r6
 8003770:	4622      	mov	r2, r4
 8003772:	6810      	ldr	r0, [r2, #0]
 8003774:	6018      	str	r0, [r3, #0]
 8003776:	8892      	ldrh	r2, [r2, #4]
 8003778:	809a      	strh	r2, [r3, #4]
    for (int i = 0; i < 54; i++)
 800377a:	2300      	movs	r3, #0
 800377c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800377e:	e014      	b.n	80037aa <rotateCube+0x6a>
        c->face[i] = temp[transMat[move][i]];
 8003780:	78fb      	ldrb	r3, [r7, #3]
 8003782:	4a27      	ldr	r2, [pc, #156]	; (8003820 <rotateCube+0xe0>)
 8003784:	2136      	movs	r1, #54	; 0x36
 8003786:	fb01 f303 	mul.w	r3, r1, r3
 800378a:	441a      	add	r2, r3
 800378c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800378e:	4413      	add	r3, r2
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	3360      	adds	r3, #96	; 0x60
 8003794:	443b      	add	r3, r7
 8003796:	f813 1c40 	ldrb.w	r1, [r3, #-64]
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800379e:	4413      	add	r3, r2
 80037a0:	460a      	mov	r2, r1
 80037a2:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 54; i++)
 80037a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037a6:	3301      	adds	r3, #1
 80037a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037ac:	2b35      	cmp	r3, #53	; 0x35
 80037ae:	dde7      	ble.n	8003780 <rotateCube+0x40>
    if (move == T)
 80037b0:	78fb      	ldrb	r3, [r7, #3]
 80037b2:	2b12      	cmp	r3, #18
 80037b4:	d11e      	bne.n	80037f4 <rotateCube+0xb4>
    {
        uint8_t route_temp[18];
        memcpy(route_temp, route_mask, 18);
 80037b6:	4b1b      	ldr	r3, [pc, #108]	; (8003824 <rotateCube+0xe4>)
 80037b8:	f107 040c 	add.w	r4, r7, #12
 80037bc:	461d      	mov	r5, r3
 80037be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037c2:	682b      	ldr	r3, [r5, #0]
 80037c4:	8023      	strh	r3, [r4, #0]
        for (int i = 0; i < 18; i++)
 80037c6:	2300      	movs	r3, #0
 80037c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80037ca:	e00f      	b.n	80037ec <rotateCube+0xac>
            route_mask[i] = route_temp[route_trans[i]];
 80037cc:	4a16      	ldr	r2, [pc, #88]	; (8003828 <rotateCube+0xe8>)
 80037ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037d0:	4413      	add	r3, r2
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	3360      	adds	r3, #96	; 0x60
 80037d6:	443b      	add	r3, r7
 80037d8:	f813 1c54 	ldrb.w	r1, [r3, #-84]
 80037dc:	4a11      	ldr	r2, [pc, #68]	; (8003824 <rotateCube+0xe4>)
 80037de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037e0:	4413      	add	r3, r2
 80037e2:	460a      	mov	r2, r1
 80037e4:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < 18; i++)
 80037e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037e8:	3301      	adds	r3, #1
 80037ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80037ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037ee:	2b11      	cmp	r3, #17
 80037f0:	ddec      	ble.n	80037cc <rotateCube+0x8c>
    }
    else
        c->route[c->routeLen++] = route_mask[move];
}
 80037f2:	e00f      	b.n	8003814 <rotateCube+0xd4>
        c->route[c->routeLen++] = route_mask[move];
 80037f4:	78fa      	ldrb	r2, [r7, #3]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f893 3162 	ldrb.w	r3, [r3, #354]	; 0x162
 80037fc:	1c59      	adds	r1, r3, #1
 80037fe:	b2c8      	uxtb	r0, r1
 8003800:	6879      	ldr	r1, [r7, #4]
 8003802:	f881 0162 	strb.w	r0, [r1, #354]	; 0x162
 8003806:	4619      	mov	r1, r3
 8003808:	4b06      	ldr	r3, [pc, #24]	; (8003824 <rotateCube+0xe4>)
 800380a:	5c9a      	ldrb	r2, [r3, r2]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	440b      	add	r3, r1
 8003810:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
}
 8003814:	bf00      	nop
 8003816:	3760      	adds	r7, #96	; 0x60
 8003818:	46bd      	mov	sp, r7
 800381a:	bcf0      	pop	{r4, r5, r6, r7}
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	0800986c 	.word	0x0800986c
 8003824:	20000150 	.word	0x20000150
 8003828:	20000164 	.word	0x20000164

0800382c <formular11>:
void formular11(cube_t *c)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b088      	sub	sp, #32
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
    uint8_t n = 0;
 8003834:	2300      	movs	r3, #0
 8003836:	77fb      	strb	r3, [r7, #31]
    for (size_t i = 1; i < 6; i++)
 8003838:	2301      	movs	r3, #1
 800383a:	61bb      	str	r3, [r7, #24]
 800383c:	e038      	b.n	80038b0 <formular11+0x84>
    {
        n = 0;
 800383e:	2300      	movs	r3, #0
 8003840:	77fb      	strb	r3, [r7, #31]
        for (size_t j = 3; j < 6; j += 2)
 8003842:	2303      	movs	r3, #3
 8003844:	617b      	str	r3, [r7, #20]
 8003846:	e02d      	b.n	80038a4 <formular11+0x78>
        {
            if (c->face[i * 9 + j] == 'D')
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	4613      	mov	r3, r2
 800384c:	00db      	lsls	r3, r3, #3
 800384e:	441a      	add	r2, r3
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	4413      	add	r3, r2
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	5cd3      	ldrb	r3, [r2, r3]
 8003858:	2b44      	cmp	r3, #68	; 0x44
 800385a:	d11d      	bne.n	8003898 <formular11+0x6c>
            {
                while (c->face[face_index1[i - 1][n]] == 'D')
 800385c:	e003      	b.n	8003866 <formular11+0x3a>
                    rotateCube(c, U);
 800385e:	2106      	movs	r1, #6
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f7ff ff6d 	bl	8003740 <rotateCube>
                while (c->face[face_index1[i - 1][n]] == 'D')
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	1e5a      	subs	r2, r3, #1
 800386a:	7ffb      	ldrb	r3, [r7, #31]
 800386c:	4934      	ldr	r1, [pc, #208]	; (8003940 <formular11+0x114>)
 800386e:	0052      	lsls	r2, r2, #1
 8003870:	440a      	add	r2, r1
 8003872:	4413      	add	r3, r2
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	461a      	mov	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	5c9b      	ldrb	r3, [r3, r2]
 800387c:	2b44      	cmp	r3, #68	; 0x44
 800387e:	d0ee      	beq.n	800385e <formular11+0x32>
                rotateCube(c, rotate_index1[i - 1][n]);
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	1e5a      	subs	r2, r3, #1
 8003884:	7ffb      	ldrb	r3, [r7, #31]
 8003886:	492f      	ldr	r1, [pc, #188]	; (8003944 <formular11+0x118>)
 8003888:	0052      	lsls	r2, r2, #1
 800388a:	440a      	add	r2, r1
 800388c:	4413      	add	r3, r2
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	4619      	mov	r1, r3
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f7ff ff54 	bl	8003740 <rotateCube>
            }
            n++;
 8003898:	7ffb      	ldrb	r3, [r7, #31]
 800389a:	3301      	adds	r3, #1
 800389c:	77fb      	strb	r3, [r7, #31]
        for (size_t j = 3; j < 6; j += 2)
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	3302      	adds	r3, #2
 80038a2:	617b      	str	r3, [r7, #20]
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	2b05      	cmp	r3, #5
 80038a8:	d9ce      	bls.n	8003848 <formular11+0x1c>
    for (size_t i = 1; i < 6; i++)
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	3301      	adds	r3, #1
 80038ae:	61bb      	str	r3, [r7, #24]
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	2b05      	cmp	r3, #5
 80038b4:	d9c3      	bls.n	800383e <formular11+0x12>
        }
    }
    for (size_t i = 1; i < 6; i++)
 80038b6:	2301      	movs	r3, #1
 80038b8:	613b      	str	r3, [r7, #16]
 80038ba:	e038      	b.n	800392e <formular11+0x102>
    {
        n = 0;
 80038bc:	2300      	movs	r3, #0
 80038be:	77fb      	strb	r3, [r7, #31]
        for (size_t j = 1; j < 8; j += 6)
 80038c0:	2301      	movs	r3, #1
 80038c2:	60fb      	str	r3, [r7, #12]
 80038c4:	e02d      	b.n	8003922 <formular11+0xf6>
        {
            if (c->face[i * 9 + j] == 'D')
 80038c6:	693a      	ldr	r2, [r7, #16]
 80038c8:	4613      	mov	r3, r2
 80038ca:	00db      	lsls	r3, r3, #3
 80038cc:	441a      	add	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	4413      	add	r3, r2
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	5cd3      	ldrb	r3, [r2, r3]
 80038d6:	2b44      	cmp	r3, #68	; 0x44
 80038d8:	d11d      	bne.n	8003916 <formular11+0xea>
            {
                while (c->face[face_index2[i - 1][n]] == 'D')
 80038da:	e003      	b.n	80038e4 <formular11+0xb8>
                    rotateCube(c, U);
 80038dc:	2106      	movs	r1, #6
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f7ff ff2e 	bl	8003740 <rotateCube>
                while (c->face[face_index2[i - 1][n]] == 'D')
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	1e5a      	subs	r2, r3, #1
 80038e8:	7ffb      	ldrb	r3, [r7, #31]
 80038ea:	4917      	ldr	r1, [pc, #92]	; (8003948 <formular11+0x11c>)
 80038ec:	0052      	lsls	r2, r2, #1
 80038ee:	440a      	add	r2, r1
 80038f0:	4413      	add	r3, r2
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	461a      	mov	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	5c9b      	ldrb	r3, [r3, r2]
 80038fa:	2b44      	cmp	r3, #68	; 0x44
 80038fc:	d0ee      	beq.n	80038dc <formular11+0xb0>
                rotateCube(c, rotate_index2[i - 1][n]);
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	1e5a      	subs	r2, r3, #1
 8003902:	7ffb      	ldrb	r3, [r7, #31]
 8003904:	4911      	ldr	r1, [pc, #68]	; (800394c <formular11+0x120>)
 8003906:	0052      	lsls	r2, r2, #1
 8003908:	440a      	add	r2, r1
 800390a:	4413      	add	r3, r2
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	4619      	mov	r1, r3
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f7ff ff15 	bl	8003740 <rotateCube>
            }
            n++;
 8003916:	7ffb      	ldrb	r3, [r7, #31]
 8003918:	3301      	adds	r3, #1
 800391a:	77fb      	strb	r3, [r7, #31]
        for (size_t j = 1; j < 8; j += 6)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	3306      	adds	r3, #6
 8003920:	60fb      	str	r3, [r7, #12]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2b07      	cmp	r3, #7
 8003926:	d9ce      	bls.n	80038c6 <formular11+0x9a>
    for (size_t i = 1; i < 6; i++)
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	3301      	adds	r3, #1
 800392c:	613b      	str	r3, [r7, #16]
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	2b05      	cmp	r3, #5
 8003932:	d9c3      	bls.n	80038bc <formular11+0x90>
        }
    }
}
 8003934:	bf00      	nop
 8003936:	bf00      	nop
 8003938:	3720      	adds	r7, #32
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	20000178 	.word	0x20000178
 8003944:	20000184 	.word	0x20000184
 8003948:	20000190 	.word	0x20000190
 800394c:	2000019c 	.word	0x2000019c

08003950 <formular12>:
void formular12(cube_t *c)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
    while (c->face[19] != c->face[22] || c->face[7] != 'D')
 8003958:	e003      	b.n	8003962 <formular12+0x12>
        rotateCube(c, U);
 800395a:	2106      	movs	r1, #6
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f7ff feef 	bl	8003740 <rotateCube>
    while (c->face[19] != c->face[22] || c->face[7] != 'D')
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	7cda      	ldrb	r2, [r3, #19]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	7d9b      	ldrb	r3, [r3, #22]
 800396a:	429a      	cmp	r2, r3
 800396c:	d1f5      	bne.n	800395a <formular12+0xa>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	79db      	ldrb	r3, [r3, #7]
 8003972:	2b44      	cmp	r3, #68	; 0x44
 8003974:	d1f1      	bne.n	800395a <formular12+0xa>
    rotateCube(c, F2);
 8003976:	210e      	movs	r1, #14
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f7ff fee1 	bl	8003740 <rotateCube>
    while (c->face[46] != c->face[49] || c->face[1] != 'D')
 800397e:	e003      	b.n	8003988 <formular12+0x38>
        rotateCube(c, U);
 8003980:	2106      	movs	r1, #6
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7ff fedc 	bl	8003740 <rotateCube>
    while (c->face[46] != c->face[49] || c->face[1] != 'D')
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003994:	429a      	cmp	r2, r3
 8003996:	d1f3      	bne.n	8003980 <formular12+0x30>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	785b      	ldrb	r3, [r3, #1]
 800399c:	2b44      	cmp	r3, #68	; 0x44
 800399e:	d1ef      	bne.n	8003980 <formular12+0x30>
    rotateCube(c, B2);
 80039a0:	2111      	movs	r1, #17
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f7ff fecc 	bl	8003740 <rotateCube>
    while (c->face[37] != c->face[40] || c->face[3] != 'D')
 80039a8:	e003      	b.n	80039b2 <formular12+0x62>
        rotateCube(c, U);
 80039aa:	2106      	movs	r1, #6
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f7ff fec7 	bl	8003740 <rotateCube>
    while (c->face[37] != c->face[40] || c->face[3] != 'D')
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039be:	429a      	cmp	r2, r3
 80039c0:	d1f3      	bne.n	80039aa <formular12+0x5a>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	78db      	ldrb	r3, [r3, #3]
 80039c6:	2b44      	cmp	r3, #68	; 0x44
 80039c8:	d1ef      	bne.n	80039aa <formular12+0x5a>
    rotateCube(c, L2);
 80039ca:	2102      	movs	r1, #2
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f7ff feb7 	bl	8003740 <rotateCube>
    while (c->face[10] != c->face[13] || c->face[5] != 'D')
 80039d2:	e003      	b.n	80039dc <formular12+0x8c>
        rotateCube(c, U);
 80039d4:	2106      	movs	r1, #6
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f7ff feb2 	bl	8003740 <rotateCube>
    while (c->face[10] != c->face[13] || c->face[5] != 'D')
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	7a9a      	ldrb	r2, [r3, #10]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	7b5b      	ldrb	r3, [r3, #13]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d1f5      	bne.n	80039d4 <formular12+0x84>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	795b      	ldrb	r3, [r3, #5]
 80039ec:	2b44      	cmp	r3, #68	; 0x44
 80039ee:	d1f1      	bne.n	80039d4 <formular12+0x84>
    rotateCube(c, R2);
 80039f0:	2105      	movs	r1, #5
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f7ff fea4 	bl	8003740 <rotateCube>
}
 80039f8:	bf00      	nop
 80039fa:	3708      	adds	r7, #8
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <formular13>:
void formular13(cube_t *c)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
    rotateCube(c, R);
 8003a08:	2103      	movs	r1, #3
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f7ff fe98 	bl	8003740 <rotateCube>
    rotateCube(c, U);
 8003a10:	2106      	movs	r1, #6
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7ff fe94 	bl	8003740 <rotateCube>
    rotateCube(c, R3);
 8003a18:	2104      	movs	r1, #4
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7ff fe90 	bl	8003740 <rotateCube>
}
 8003a20:	bf00      	nop
 8003a22:	3708      	adds	r7, #8
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <formular14>:
void formular14(cube_t *c)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
    rotateCube(c, F3);
 8003a30:	210d      	movs	r1, #13
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f7ff fe84 	bl	8003740 <rotateCube>
    rotateCube(c, U3);
 8003a38:	2107      	movs	r1, #7
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f7ff fe80 	bl	8003740 <rotateCube>
    rotateCube(c, F);
 8003a40:	210c      	movs	r1, #12
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f7ff fe7c 	bl	8003740 <rotateCube>
}
 8003a48:	bf00      	nop
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <formular15>:

void formular15(cube_t *c)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
    if (c->face[29] == c->face[31] && c->face[22] == c->face[26] && c->face[15] == c->face[13])
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	7f5a      	ldrb	r2, [r3, #29]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	7fdb      	ldrb	r3, [r3, #31]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d10b      	bne.n	8003a7c <formular15+0x2c>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	7d9a      	ldrb	r2, [r3, #22]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	7e9b      	ldrb	r3, [r3, #26]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d105      	bne.n	8003a7c <formular15+0x2c>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	7bda      	ldrb	r2, [r3, #15]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	7b5b      	ldrb	r3, [r3, #13]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d064      	beq.n	8003b46 <formular15+0xf6>
        return;
    size_t i = 0;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	60fb      	str	r3, [r7, #12]
    for (; i < 4;)
 8003a80:	e055      	b.n	8003b2e <formular15+0xde>
    {
        if (c->face[8] == c->face[13] && c->face[22] == c->face[20] && c->face[9] == c->face[31])
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	7a1a      	ldrb	r2, [r3, #8]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	7b5b      	ldrb	r3, [r3, #13]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d10f      	bne.n	8003aae <formular15+0x5e>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	7d9a      	ldrb	r2, [r3, #22]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	7d1b      	ldrb	r3, [r3, #20]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d109      	bne.n	8003aae <formular15+0x5e>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	7a5a      	ldrb	r2, [r3, #9]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	7fdb      	ldrb	r3, [r3, #31]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d103      	bne.n	8003aae <formular15+0x5e>
        {
            formular13(c);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f7ff ffaa 	bl	8003a00 <formular13>
            return;
 8003aac:	e04c      	b.n	8003b48 <formular15+0xf8>
        }
        else if (c->face[8] == c->face[31] && c->face[13] == c->face[20] && c->face[9] == c->face[22])
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	7a1a      	ldrb	r2, [r3, #8]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	7fdb      	ldrb	r3, [r3, #31]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d119      	bne.n	8003aee <formular15+0x9e>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	7b5a      	ldrb	r2, [r3, #13]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	7d1b      	ldrb	r3, [r3, #20]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d113      	bne.n	8003aee <formular15+0x9e>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	7a5a      	ldrb	r2, [r3, #9]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	7d9b      	ldrb	r3, [r3, #22]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d10d      	bne.n	8003aee <formular15+0x9e>
        {
            formular13(c);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f7ff ff94 	bl	8003a00 <formular13>
            formular13(c);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f7ff ff91 	bl	8003a00 <formular13>
            rotateCube(c, U3);
 8003ade:	2107      	movs	r1, #7
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f7ff fe2d 	bl	8003740 <rotateCube>
            formular13(c);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f7ff ff8a 	bl	8003a00 <formular13>
            return;
 8003aec:	e02c      	b.n	8003b48 <formular15+0xf8>
        }
        else if (c->face[8] == c->face[22] && c->face[20] == c->face[31] && c->face[9] == c->face[13])
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	7a1a      	ldrb	r2, [r3, #8]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	7d9b      	ldrb	r3, [r3, #22]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d10f      	bne.n	8003b1a <formular15+0xca>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	7d1a      	ldrb	r2, [r3, #20]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	7fdb      	ldrb	r3, [r3, #31]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d109      	bne.n	8003b1a <formular15+0xca>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	7a5a      	ldrb	r2, [r3, #9]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	7b5b      	ldrb	r3, [r3, #13]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d103      	bne.n	8003b1a <formular15+0xca>
        {
            formular14(c);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f7ff ff88 	bl	8003a28 <formular14>
            return;
 8003b18:	e016      	b.n	8003b48 <formular15+0xf8>
        }
        else
        {
            if (++i == 4)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	60fb      	str	r3, [r7, #12]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2b04      	cmp	r3, #4
 8003b24:	d007      	beq.n	8003b36 <formular15+0xe6>
                break;
            rotateCube(c, U);
 8003b26:	2106      	movs	r1, #6
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f7ff fe09 	bl	8003740 <rotateCube>
    for (; i < 4;)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2b03      	cmp	r3, #3
 8003b32:	d9a6      	bls.n	8003a82 <formular15+0x32>
 8003b34:	e000      	b.n	8003b38 <formular15+0xe8>
                break;
 8003b36:	bf00      	nop
        }
    }
    if (i == 4)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2b04      	cmp	r3, #4
 8003b3c:	d104      	bne.n	8003b48 <formular15+0xf8>
        formular13(c);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f7ff ff5e 	bl	8003a00 <formular13>
 8003b44:	e000      	b.n	8003b48 <formular15+0xf8>
        return;
 8003b46:	bf00      	nop
}
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <formular21>:
void formular21(cube_t *c)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b082      	sub	sp, #8
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
    rotateCube(c, U3);
 8003b56:	2107      	movs	r1, #7
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f7ff fdf1 	bl	8003740 <rotateCube>
    rotateCube(c, F3);
 8003b5e:	210d      	movs	r1, #13
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f7ff fded 	bl	8003740 <rotateCube>
    rotateCube(c, U);
 8003b66:	2106      	movs	r1, #6
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f7ff fde9 	bl	8003740 <rotateCube>
    rotateCube(c, F);
 8003b6e:	210c      	movs	r1, #12
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f7ff fde5 	bl	8003740 <rotateCube>
    rotateCube(c, U);
 8003b76:	2106      	movs	r1, #6
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f7ff fde1 	bl	8003740 <rotateCube>
    rotateCube(c, R);
 8003b7e:	2103      	movs	r1, #3
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f7ff fddd 	bl	8003740 <rotateCube>
    rotateCube(c, U3);
 8003b86:	2107      	movs	r1, #7
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f7ff fdd9 	bl	8003740 <rotateCube>
    rotateCube(c, R3);
 8003b8e:	2104      	movs	r1, #4
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f7ff fdd5 	bl	8003740 <rotateCube>
}
 8003b96:	bf00      	nop
 8003b98:	3708      	adds	r7, #8
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <formular22>:
void formular22(cube_t *c)
{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b082      	sub	sp, #8
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
    rotateCube(c, U);
 8003ba6:	2106      	movs	r1, #6
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f7ff fdc9 	bl	8003740 <rotateCube>
    rotateCube(c, R);
 8003bae:	2103      	movs	r1, #3
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f7ff fdc5 	bl	8003740 <rotateCube>
    rotateCube(c, U3);
 8003bb6:	2107      	movs	r1, #7
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f7ff fdc1 	bl	8003740 <rotateCube>
    rotateCube(c, R3);
 8003bbe:	2104      	movs	r1, #4
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f7ff fdbd 	bl	8003740 <rotateCube>
    rotateCube(c, U3);
 8003bc6:	2107      	movs	r1, #7
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f7ff fdb9 	bl	8003740 <rotateCube>
    rotateCube(c, F3);
 8003bce:	210d      	movs	r1, #13
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f7ff fdb5 	bl	8003740 <rotateCube>
    rotateCube(c, U);
 8003bd6:	2106      	movs	r1, #6
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f7ff fdb1 	bl	8003740 <rotateCube>
    rotateCube(c, F);
 8003bde:	210c      	movs	r1, #12
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f7ff fdad 	bl	8003740 <rotateCube>
}
 8003be6:	bf00      	nop
 8003be8:	3708      	adds	r7, #8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}

08003bee <formular23>:
void formular23(cube_t *c)
{
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b084      	sub	sp, #16
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
    if (c->face[23] == c->face[22] && c->face[12] == c->face[13])
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	7dda      	ldrb	r2, [r3, #23]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	7d9b      	ldrb	r3, [r3, #22]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d105      	bne.n	8003c0e <formular23+0x20>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	7b1a      	ldrb	r2, [r3, #12]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	7b5b      	ldrb	r3, [r3, #13]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d038      	beq.n	8003c80 <formular23+0x92>
        return;
    size_t i = 0;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	60fb      	str	r3, [r7, #12]
    for (; i < 4;)
 8003c12:	e029      	b.n	8003c68 <formular23+0x7a>
    {
        if (c->face[19] == c->face[22] && c->face[7] == c->face[13])
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	7cda      	ldrb	r2, [r3, #19]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	7d9b      	ldrb	r3, [r3, #22]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d109      	bne.n	8003c34 <formular23+0x46>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	79da      	ldrb	r2, [r3, #7]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	7b5b      	ldrb	r3, [r3, #13]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d103      	bne.n	8003c34 <formular23+0x46>
        {
            formular22(c);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f7ff ffb6 	bl	8003b9e <formular22>
            break;
 8003c32:	e01e      	b.n	8003c72 <formular23+0x84>
        }
        else if (c->face[5] == c->face[22] && c->face[10] == c->face[13])
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	795a      	ldrb	r2, [r3, #5]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	7d9b      	ldrb	r3, [r3, #22]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d109      	bne.n	8003c54 <formular23+0x66>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	7a9a      	ldrb	r2, [r3, #10]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	7b5b      	ldrb	r3, [r3, #13]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d103      	bne.n	8003c54 <formular23+0x66>
        {
            formular21(c);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f7ff ff7e 	bl	8003b4e <formular21>
            break;
 8003c52:	e00e      	b.n	8003c72 <formular23+0x84>
        }
        else
        {
            if (++i == 4)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	3301      	adds	r3, #1
 8003c58:	60fb      	str	r3, [r7, #12]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2b04      	cmp	r3, #4
 8003c5e:	d007      	beq.n	8003c70 <formular23+0x82>
                break;
            rotateCube(c, U);
 8003c60:	2106      	movs	r1, #6
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f7ff fd6c 	bl	8003740 <rotateCube>
    for (; i < 4;)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2b03      	cmp	r3, #3
 8003c6c:	d9d2      	bls.n	8003c14 <formular23+0x26>
 8003c6e:	e000      	b.n	8003c72 <formular23+0x84>
                break;
 8003c70:	bf00      	nop
        }
    }
    if (i == 4)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2b04      	cmp	r3, #4
 8003c76:	d104      	bne.n	8003c82 <formular23+0x94>
        formular21(c);
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f7ff ff68 	bl	8003b4e <formular21>
 8003c7e:	e000      	b.n	8003c82 <formular23+0x94>
        return;
 8003c80:	bf00      	nop
}
 8003c82:	3710      	adds	r7, #16
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <formular31>:
void formular31(cube_t *c)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
    rotateCube(c, F);
 8003c90:	210c      	movs	r1, #12
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f7ff fd54 	bl	8003740 <rotateCube>
    rotateCube(c, R);
 8003c98:	2103      	movs	r1, #3
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f7ff fd50 	bl	8003740 <rotateCube>
    rotateCube(c, U);
 8003ca0:	2106      	movs	r1, #6
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f7ff fd4c 	bl	8003740 <rotateCube>
    rotateCube(c, R3);
 8003ca8:	2104      	movs	r1, #4
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f7ff fd48 	bl	8003740 <rotateCube>
    rotateCube(c, U3);
 8003cb0:	2107      	movs	r1, #7
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f7ff fd44 	bl	8003740 <rotateCube>
    rotateCube(c, F3);
 8003cb8:	210d      	movs	r1, #13
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7ff fd40 	bl	8003740 <rotateCube>
}
 8003cc0:	bf00      	nop
 8003cc2:	3708      	adds	r7, #8
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <formular32>:
void formular32(cube_t *c)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
    if (c->face[1] == c->face[4] && c->face[7] == c->face[4])
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	785a      	ldrb	r2, [r3, #1]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	791b      	ldrb	r3, [r3, #4]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d109      	bne.n	8003cf0 <formular32+0x28>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	79da      	ldrb	r2, [r3, #7]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	791b      	ldrb	r3, [r3, #4]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d103      	bne.n	8003cf0 <formular32+0x28>
        rotateCube(c, U);
 8003ce8:	2106      	movs	r1, #6
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f7ff fd28 	bl	8003740 <rotateCube>
    if (c->face[3] == c->face[4] && c->face[5] == c->face[4])
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	78da      	ldrb	r2, [r3, #3]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	791b      	ldrb	r3, [r3, #4]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d10d      	bne.n	8003d18 <formular32+0x50>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	795a      	ldrb	r2, [r3, #5]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	791b      	ldrb	r3, [r3, #4]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d107      	bne.n	8003d18 <formular32+0x50>
    {
        formular31(c);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f7ff ffbd 	bl	8003c88 <formular31>
        return;
 8003d0e:	e029      	b.n	8003d64 <formular32+0x9c>
    }
    while (c->face[19] != c->face[4] || c->face[10] != c->face[4])
        rotateCube(c, U);
 8003d10:	2106      	movs	r1, #6
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f7ff fd14 	bl	8003740 <rotateCube>
    while (c->face[19] != c->face[4] || c->face[10] != c->face[4])
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	7cda      	ldrb	r2, [r3, #19]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	791b      	ldrb	r3, [r3, #4]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d1f5      	bne.n	8003d10 <formular32+0x48>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	7a9a      	ldrb	r2, [r3, #10]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	791b      	ldrb	r3, [r3, #4]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d1ef      	bne.n	8003d10 <formular32+0x48>
    if (c->face[3] == c->face[4] && c->face[1] == c->face[4])
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	78da      	ldrb	r2, [r3, #3]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	791b      	ldrb	r3, [r3, #4]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d109      	bne.n	8003d50 <formular32+0x88>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	785a      	ldrb	r2, [r3, #1]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	791b      	ldrb	r3, [r3, #4]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d103      	bne.n	8003d50 <formular32+0x88>
        formular31(c);
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f7ff ff9d 	bl	8003c88 <formular31>
 8003d4e:	e009      	b.n	8003d64 <formular32+0x9c>
    else
    {
        formular31(c);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f7ff ff99 	bl	8003c88 <formular31>
        rotateCube(c, U);
 8003d56:	2106      	movs	r1, #6
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f7ff fcf1 	bl	8003740 <rotateCube>
        formular31(c);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f7ff ff92 	bl	8003c88 <formular31>
    }
}
 8003d64:	3708      	adds	r7, #8
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <formular41>:
void formular41(cube_t *c)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b082      	sub	sp, #8
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
    rotateCube(c, R3);
 8003d72:	2104      	movs	r1, #4
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f7ff fce3 	bl	8003740 <rotateCube>
    rotateCube(c, U2);
 8003d7a:	2108      	movs	r1, #8
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f7ff fcdf 	bl	8003740 <rotateCube>
    rotateCube(c, R);
 8003d82:	2103      	movs	r1, #3
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f7ff fcdb 	bl	8003740 <rotateCube>
    rotateCube(c, U);
 8003d8a:	2106      	movs	r1, #6
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f7ff fcd7 	bl	8003740 <rotateCube>
    rotateCube(c, R3);
 8003d92:	2104      	movs	r1, #4
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f7ff fcd3 	bl	8003740 <rotateCube>
    rotateCube(c, U);
 8003d9a:	2106      	movs	r1, #6
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f7ff fccf 	bl	8003740 <rotateCube>
    rotateCube(c, R);
 8003da2:	2103      	movs	r1, #3
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f7ff fccb 	bl	8003740 <rotateCube>
}
 8003daa:	bf00      	nop
 8003dac:	3708      	adds	r7, #8
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <formular42>:
void formular42(cube_t *c)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b082      	sub	sp, #8
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
    rotateCube(c, U3);
 8003dba:	2107      	movs	r1, #7
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f7ff fcbf 	bl	8003740 <rotateCube>
    rotateCube(c, R);
 8003dc2:	2103      	movs	r1, #3
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f7ff fcbb 	bl	8003740 <rotateCube>
    rotateCube(c, U2);
 8003dca:	2108      	movs	r1, #8
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f7ff fcb7 	bl	8003740 <rotateCube>
    rotateCube(c, R3);
 8003dd2:	2104      	movs	r1, #4
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f7ff fcb3 	bl	8003740 <rotateCube>
    rotateCube(c, U3);
 8003dda:	2107      	movs	r1, #7
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f7ff fcaf 	bl	8003740 <rotateCube>
    rotateCube(c, R);
 8003de2:	2103      	movs	r1, #3
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f7ff fcab 	bl	8003740 <rotateCube>
    rotateCube(c, U3);
 8003dea:	2107      	movs	r1, #7
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f7ff fca7 	bl	8003740 <rotateCube>
    rotateCube(c, R3);
 8003df2:	2104      	movs	r1, #4
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f7ff fca3 	bl	8003740 <rotateCube>
}
 8003dfa:	bf00      	nop
 8003dfc:	3708      	adds	r7, #8
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <formular43>:
void formular43(cube_t *c)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b086      	sub	sp, #24
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
    uint8_t cnt = 0;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	75fb      	strb	r3, [r7, #23]
    for (size_t i = 0; i < 9; i++)
 8003e0e:	2300      	movs	r3, #0
 8003e10:	613b      	str	r3, [r7, #16]
 8003e12:	e00d      	b.n	8003e30 <formular43+0x2e>
    {
        if (c->face[i] == c->face[4])
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	4413      	add	r3, r2
 8003e1a:	781a      	ldrb	r2, [r3, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	791b      	ldrb	r3, [r3, #4]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d102      	bne.n	8003e2a <formular43+0x28>
            cnt++;
 8003e24:	7dfb      	ldrb	r3, [r7, #23]
 8003e26:	3301      	adds	r3, #1
 8003e28:	75fb      	strb	r3, [r7, #23]
    for (size_t i = 0; i < 9; i++)
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	613b      	str	r3, [r7, #16]
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	2b08      	cmp	r3, #8
 8003e34:	d9ee      	bls.n	8003e14 <formular43+0x12>
    }
    if (cnt == 6)
 8003e36:	7dfb      	ldrb	r3, [r7, #23]
 8003e38:	2b06      	cmp	r3, #6
 8003e3a:	d142      	bne.n	8003ec2 <formular43+0xc0>
    {
        while (1)
        {
            uint8_t case1 = c->face[47] == c->face[4] && c->face[38] == c->face[4] && c->face[11] == c->face[4];
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	791b      	ldrb	r3, [r3, #4]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d10e      	bne.n	8003e68 <formular43+0x66>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	791b      	ldrb	r3, [r3, #4]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d107      	bne.n	8003e68 <formular43+0x66>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	7ada      	ldrb	r2, [r3, #11]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	791b      	ldrb	r3, [r3, #4]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d101      	bne.n	8003e68 <formular43+0x66>
 8003e64:	2301      	movs	r3, #1
 8003e66:	e000      	b.n	8003e6a <formular43+0x68>
 8003e68:	2300      	movs	r3, #0
 8003e6a:	72bb      	strb	r3, [r7, #10]
            uint8_t case2 = c->face[45] == c->face[4] && c->face[36] == c->face[4] && c->face[18] == c->face[4];
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	791b      	ldrb	r3, [r3, #4]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d10e      	bne.n	8003e98 <formular43+0x96>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	791b      	ldrb	r3, [r3, #4]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d107      	bne.n	8003e98 <formular43+0x96>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	7c9a      	ldrb	r2, [r3, #18]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	791b      	ldrb	r3, [r3, #4]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d101      	bne.n	8003e98 <formular43+0x96>
 8003e94:	2301      	movs	r3, #1
 8003e96:	e000      	b.n	8003e9a <formular43+0x98>
 8003e98:	2300      	movs	r3, #0
 8003e9a:	727b      	strb	r3, [r7, #9]
            if (case1)
 8003e9c:	7abb      	ldrb	r3, [r7, #10]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d003      	beq.n	8003eaa <formular43+0xa8>
            {
                formular41(c);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f7ff ff61 	bl	8003d6a <formular41>
                return;
 8003ea8:	e0c2      	b.n	8004030 <formular43+0x22e>
            }
            else if (case2)
 8003eaa:	7a7b      	ldrb	r3, [r7, #9]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d003      	beq.n	8003eb8 <formular43+0xb6>
            {
                formular42(c);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f7ff ff7e 	bl	8003db2 <formular42>
                return;
 8003eb6:	e0bb      	b.n	8004030 <formular43+0x22e>
            }
            else
                rotateCube(c, U);
 8003eb8:	2106      	movs	r1, #6
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f7ff fc40 	bl	8003740 <rotateCube>
        {
 8003ec0:	e7bc      	b.n	8003e3c <formular43+0x3a>
        }
    }
    else if (cnt == 5)
 8003ec2:	7dfb      	ldrb	r3, [r7, #23]
 8003ec4:	2b05      	cmp	r3, #5
 8003ec6:	d157      	bne.n	8003f78 <formular43+0x176>
    {
        while (1)
        {
            uint8_t case3 = c->face[11] == c->face[4] && c->face[36] == c->face[4] && c->face[18] == c->face[4] && c->face[20] == c->face[4];
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	7ada      	ldrb	r2, [r3, #11]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	791b      	ldrb	r3, [r3, #4]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d114      	bne.n	8003efe <formular43+0xfc>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	791b      	ldrb	r3, [r3, #4]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d10d      	bne.n	8003efe <formular43+0xfc>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	7c9a      	ldrb	r2, [r3, #18]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	791b      	ldrb	r3, [r3, #4]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d107      	bne.n	8003efe <formular43+0xfc>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	7d1a      	ldrb	r2, [r3, #20]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	791b      	ldrb	r3, [r3, #4]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d101      	bne.n	8003efe <formular43+0xfc>
 8003efa:	2301      	movs	r3, #1
 8003efc:	e000      	b.n	8003f00 <formular43+0xfe>
 8003efe:	2300      	movs	r3, #0
 8003f00:	733b      	strb	r3, [r7, #12]
            uint8_t case4 = c->face[45] == c->face[4] && c->face[47] == c->face[4] && c->face[18] == c->face[4] && c->face[20] == c->face[4];
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	791b      	ldrb	r3, [r3, #4]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d114      	bne.n	8003f3a <formular43+0x138>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	791b      	ldrb	r3, [r3, #4]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d10d      	bne.n	8003f3a <formular43+0x138>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	7c9a      	ldrb	r2, [r3, #18]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	791b      	ldrb	r3, [r3, #4]
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d107      	bne.n	8003f3a <formular43+0x138>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	7d1a      	ldrb	r2, [r3, #20]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	791b      	ldrb	r3, [r3, #4]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d101      	bne.n	8003f3a <formular43+0x138>
 8003f36:	2301      	movs	r3, #1
 8003f38:	e000      	b.n	8003f3c <formular43+0x13a>
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	72fb      	strb	r3, [r7, #11]
            if (case3)
 8003f3e:	7b3b      	ldrb	r3, [r7, #12]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00a      	beq.n	8003f5a <formular43+0x158>
            {
                formular41(c);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f7ff ff10 	bl	8003d6a <formular41>
                rotateCube(c, U3);
 8003f4a:	2107      	movs	r1, #7
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f7ff fbf7 	bl	8003740 <rotateCube>
                formular41(c);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f7ff ff09 	bl	8003d6a <formular41>
                break;
 8003f58:	e06a      	b.n	8004030 <formular43+0x22e>
            }
            else if (case4)
 8003f5a:	7afb      	ldrb	r3, [r7, #11]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d006      	beq.n	8003f6e <formular43+0x16c>
            {
                formular41(c);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f7ff ff02 	bl	8003d6a <formular41>
                formular41(c);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f7ff feff 	bl	8003d6a <formular41>
                break;
 8003f6c:	e060      	b.n	8004030 <formular43+0x22e>
            }
            else
                rotateCube(c, U);
 8003f6e:	2106      	movs	r1, #6
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f7ff fbe5 	bl	8003740 <rotateCube>
        {
 8003f76:	e7a7      	b.n	8003ec8 <formular43+0xc6>
        }
    }
    else if (cnt == 7)
 8003f78:	7dfb      	ldrb	r3, [r7, #23]
 8003f7a:	2b07      	cmp	r3, #7
 8003f7c:	d158      	bne.n	8004030 <formular43+0x22e>
    {
        while (1)
        {
            uint8_t case5 = c->face[18] == c->face[4] && c->face[20] == c->face[4];
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	7c9a      	ldrb	r2, [r3, #18]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	791b      	ldrb	r3, [r3, #4]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d107      	bne.n	8003f9a <formular43+0x198>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	7d1a      	ldrb	r2, [r3, #20]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	791b      	ldrb	r3, [r3, #4]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d101      	bne.n	8003f9a <formular43+0x198>
 8003f96:	2301      	movs	r3, #1
 8003f98:	e000      	b.n	8003f9c <formular43+0x19a>
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	73fb      	strb	r3, [r7, #15]
            uint8_t case6 = c->face[45] == c->face[4] && c->face[20] == c->face[4];
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	791b      	ldrb	r3, [r3, #4]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d107      	bne.n	8003fbc <formular43+0x1ba>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	7d1a      	ldrb	r2, [r3, #20]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	791b      	ldrb	r3, [r3, #4]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d101      	bne.n	8003fbc <formular43+0x1ba>
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e000      	b.n	8003fbe <formular43+0x1bc>
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	73bb      	strb	r3, [r7, #14]
            uint8_t case7 = c->face[47] == c->face[4] && c->face[9] == c->face[4];
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	791b      	ldrb	r3, [r3, #4]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d107      	bne.n	8003fde <formular43+0x1dc>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	7a5a      	ldrb	r2, [r3, #9]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	791b      	ldrb	r3, [r3, #4]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d101      	bne.n	8003fde <formular43+0x1dc>
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e000      	b.n	8003fe0 <formular43+0x1de>
 8003fde:	2300      	movs	r3, #0
 8003fe0:	737b      	strb	r3, [r7, #13]
            if (case5)
 8003fe2:	7bfb      	ldrb	r3, [r7, #15]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00a      	beq.n	8003ffe <formular43+0x1fc>
            {
                formular42(c);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f7ff fee2 	bl	8003db2 <formular42>
                rotateCube(c, U2);
 8003fee:	2108      	movs	r1, #8
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f7ff fba5 	bl	8003740 <rotateCube>
                formular41(c);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f7ff feb7 	bl	8003d6a <formular41>
                return;
 8003ffc:	e018      	b.n	8004030 <formular43+0x22e>
            }
            else if (case6)
 8003ffe:	7bbb      	ldrb	r3, [r7, #14]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d006      	beq.n	8004012 <formular43+0x210>
            {
                formular42(c);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f7ff fed4 	bl	8003db2 <formular42>
                formular41(c);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f7ff fead 	bl	8003d6a <formular41>
                return;
 8004010:	e00e      	b.n	8004030 <formular43+0x22e>
            }
            else if (case7)
 8004012:	7b7b      	ldrb	r3, [r7, #13]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d006      	beq.n	8004026 <formular43+0x224>
            {
                formular41(c);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f7ff fea6 	bl	8003d6a <formular41>
                formular42(c);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f7ff fec7 	bl	8003db2 <formular42>
                return;
 8004024:	e004      	b.n	8004030 <formular43+0x22e>
            }
            else
            {
                rotateCube(c, U);
 8004026:	2106      	movs	r1, #6
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f7ff fb89 	bl	8003740 <rotateCube>
        {
 800402e:	e7a6      	b.n	8003f7e <formular43+0x17c>
            }
        }
    } // printf("case1 = %d, case2 = %d, case3 = %d, case4 = %d, case5 = %d, case6 = %d, case7 = %d\n", case1, case2, case3, case4, case5, case6, case7);
}
 8004030:	3718      	adds	r7, #24
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <formular51>:
void formular51(cube_t *c)
{
 8004036:	b580      	push	{r7, lr}
 8004038:	b082      	sub	sp, #8
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
    rotateCube(c, R);
 800403e:	2103      	movs	r1, #3
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f7ff fb7d 	bl	8003740 <rotateCube>
    rotateCube(c, B3);
 8004046:	2110      	movs	r1, #16
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f7ff fb79 	bl	8003740 <rotateCube>
    rotateCube(c, R);
 800404e:	2103      	movs	r1, #3
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f7ff fb75 	bl	8003740 <rotateCube>
    rotateCube(c, F2);
 8004056:	210e      	movs	r1, #14
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f7ff fb71 	bl	8003740 <rotateCube>
    rotateCube(c, R3);
 800405e:	2104      	movs	r1, #4
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f7ff fb6d 	bl	8003740 <rotateCube>
    rotateCube(c, B);
 8004066:	210f      	movs	r1, #15
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f7ff fb69 	bl	8003740 <rotateCube>
    rotateCube(c, R);
 800406e:	2103      	movs	r1, #3
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f7ff fb65 	bl	8003740 <rotateCube>
    rotateCube(c, F2);
 8004076:	210e      	movs	r1, #14
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f7ff fb61 	bl	8003740 <rotateCube>
    rotateCube(c, R2);
 800407e:	2105      	movs	r1, #5
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f7ff fb5d 	bl	8003740 <rotateCube>
}
 8004086:	bf00      	nop
 8004088:	3708      	adds	r7, #8
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
	...

08004090 <formular52>:
void formular52(cube_t *c)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b086      	sub	sp, #24
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
    printf("formular52\n");
 8004098:	4834      	ldr	r0, [pc, #208]	; (800416c <formular52+0xdc>)
 800409a:	f004 fc25 	bl	80088e8 <puts>
    if (c->face[18] == c->face[20] && c->face[9] == c->face[11] && c->face[36] == c->face[38])
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	7c9a      	ldrb	r2, [r3, #18]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	7d1b      	ldrb	r3, [r3, #20]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d119      	bne.n	80040de <formular52+0x4e>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	7a5a      	ldrb	r2, [r3, #9]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	7adb      	ldrb	r3, [r3, #11]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d113      	bne.n	80040de <formular52+0x4e>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d10b      	bne.n	80040de <formular52+0x4e>
    {
        while (c->face[18] != c->face[22])
 80040c6:	e003      	b.n	80040d0 <formular52+0x40>
            rotateCube(c, U);
 80040c8:	2106      	movs	r1, #6
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f7ff fb38 	bl	8003740 <rotateCube>
        while (c->face[18] != c->face[22])
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	7c9a      	ldrb	r2, [r3, #18]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	7d9b      	ldrb	r3, [r3, #22]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d1f5      	bne.n	80040c8 <formular52+0x38>
        return;
 80040dc:	e042      	b.n	8004164 <formular52+0xd4>
    }
    uint8_t routeCnt = 0;
 80040de:	2300      	movs	r3, #0
 80040e0:	75fb      	strb	r3, [r7, #23]
    for (size_t i = 0; i < 4; i++)
 80040e2:	2300      	movs	r3, #0
 80040e4:	613b      	str	r3, [r7, #16]
 80040e6:	e00f      	b.n	8004108 <formular52+0x78>
    {
        if (c->face[18] != c->face[20])
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	7c9a      	ldrb	r2, [r3, #18]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	7d1b      	ldrb	r3, [r3, #20]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d00d      	beq.n	8004110 <formular52+0x80>
        {
            rotateCube(c, U);
 80040f4:	2106      	movs	r1, #6
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f7ff fb22 	bl	8003740 <rotateCube>
            routeCnt++;
 80040fc:	7dfb      	ldrb	r3, [r7, #23]
 80040fe:	3301      	adds	r3, #1
 8004100:	75fb      	strb	r3, [r7, #23]
    for (size_t i = 0; i < 4; i++)
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	3301      	adds	r3, #1
 8004106:	613b      	str	r3, [r7, #16]
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	2b03      	cmp	r3, #3
 800410c:	d9ec      	bls.n	80040e8 <formular52+0x58>
 800410e:	e000      	b.n	8004112 <formular52+0x82>
        }
        else
            break;
 8004110:	bf00      	nop
    }
    formular51(c);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f7ff ff8f 	bl	8004036 <formular51>
    if (routeCnt == 4)
 8004118:	7dfb      	ldrb	r3, [r7, #23]
 800411a:	2b04      	cmp	r3, #4
 800411c:	d11c      	bne.n	8004158 <formular52+0xc8>
    {
        for (size_t i = 0; i < 3; i++)
 800411e:	2300      	movs	r3, #0
 8004120:	60fb      	str	r3, [r7, #12]
 8004122:	e00c      	b.n	800413e <formular52+0xae>
        {
            if (c->face[18] != c->face[20])
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	7c9a      	ldrb	r2, [r3, #18]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	7d1b      	ldrb	r3, [r3, #20]
 800412c:	429a      	cmp	r2, r3
 800412e:	d00a      	beq.n	8004146 <formular52+0xb6>
                rotateCube(c, U);
 8004130:	2106      	movs	r1, #6
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f7ff fb04 	bl	8003740 <rotateCube>
        for (size_t i = 0; i < 3; i++)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	3301      	adds	r3, #1
 800413c:	60fb      	str	r3, [r7, #12]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2b02      	cmp	r3, #2
 8004142:	d9ef      	bls.n	8004124 <formular52+0x94>
 8004144:	e000      	b.n	8004148 <formular52+0xb8>
            else
                break;
 8004146:	bf00      	nop
        }
        formular51(c);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f7ff ff74 	bl	8004036 <formular51>
    }
    while (c->face[18] != c->face[22])
 800414e:	e003      	b.n	8004158 <formular52+0xc8>
        rotateCube(c, U);
 8004150:	2106      	movs	r1, #6
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f7ff faf4 	bl	8003740 <rotateCube>
    while (c->face[18] != c->face[22])
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	7c9a      	ldrb	r2, [r3, #18]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	7d9b      	ldrb	r3, [r3, #22]
 8004160:	429a      	cmp	r2, r3
 8004162:	d1f5      	bne.n	8004150 <formular52+0xc0>
}
 8004164:	3718      	adds	r7, #24
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	08009260 	.word	0x08009260

08004170 <formular61>:
void formular61(cube_t *c)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
    rotateCube(c, R);
 8004178:	2103      	movs	r1, #3
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f7ff fae0 	bl	8003740 <rotateCube>
    rotateCube(c, U3);
 8004180:	2107      	movs	r1, #7
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f7ff fadc 	bl	8003740 <rotateCube>
    rotateCube(c, R);
 8004188:	2103      	movs	r1, #3
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f7ff fad8 	bl	8003740 <rotateCube>
    rotateCube(c, U);
 8004190:	2106      	movs	r1, #6
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f7ff fad4 	bl	8003740 <rotateCube>
    rotateCube(c, R);
 8004198:	2103      	movs	r1, #3
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f7ff fad0 	bl	8003740 <rotateCube>
    rotateCube(c, U);
 80041a0:	2106      	movs	r1, #6
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f7ff facc 	bl	8003740 <rotateCube>
    rotateCube(c, R);
 80041a8:	2103      	movs	r1, #3
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f7ff fac8 	bl	8003740 <rotateCube>
    rotateCube(c, U3);
 80041b0:	2107      	movs	r1, #7
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f7ff fac4 	bl	8003740 <rotateCube>
    rotateCube(c, R3);
 80041b8:	2104      	movs	r1, #4
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f7ff fac0 	bl	8003740 <rotateCube>
    rotateCube(c, U3);
 80041c0:	2107      	movs	r1, #7
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7ff fabc 	bl	8003740 <rotateCube>
    rotateCube(c, R2);
 80041c8:	2105      	movs	r1, #5
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f7ff fab8 	bl	8003740 <rotateCube>
}
 80041d0:	bf00      	nop
 80041d2:	3708      	adds	r7, #8
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <formular62>:
void formular62(cube_t *c)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
    while (1)
    {
        if (c->face[19] == c->face[22] && c->face[37] == c->face[40])
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	7cda      	ldrb	r2, [r3, #19]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	7d9b      	ldrb	r3, [r3, #22]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d108      	bne.n	80041fe <formular62+0x26>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041f8:	429a      	cmp	r2, r3
 80041fa:	f000 8086 	beq.w	800430a <formular62+0x132>
        {
            break;
        }
        if (c->face[19] == c->face[13] && c->face[10] == c->face[40] && c->face[37] == c->face[22])
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	7cda      	ldrb	r2, [r3, #19]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	7b5b      	ldrb	r3, [r3, #13]
 8004206:	429a      	cmp	r2, r3
 8004208:	d111      	bne.n	800422e <formular62+0x56>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	7a9a      	ldrb	r2, [r3, #10]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004214:	429a      	cmp	r2, r3
 8004216:	d10a      	bne.n	800422e <formular62+0x56>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	7d9b      	ldrb	r3, [r3, #22]
 8004222:	429a      	cmp	r2, r3
 8004224:	d103      	bne.n	800422e <formular62+0x56>
        {
            formular61(c);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f7ff ffa2 	bl	8004170 <formular61>
            break;
 800422c:	e06e      	b.n	800430c <formular62+0x134>
        }
        else if (c->face[37] == c->face[13] && c->face[19] == c->face[40] && c->face[10] == c->face[22])
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	7b5b      	ldrb	r3, [r3, #13]
 8004238:	429a      	cmp	r2, r3
 800423a:	d113      	bne.n	8004264 <formular62+0x8c>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	7cda      	ldrb	r2, [r3, #19]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004246:	429a      	cmp	r2, r3
 8004248:	d10c      	bne.n	8004264 <formular62+0x8c>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	7a9a      	ldrb	r2, [r3, #10]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	7d9b      	ldrb	r3, [r3, #22]
 8004252:	429a      	cmp	r2, r3
 8004254:	d106      	bne.n	8004264 <formular62+0x8c>
        {
            formular61(c);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f7ff ff8a 	bl	8004170 <formular61>
            formular61(c);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f7ff ff87 	bl	8004170 <formular61>
            break;
 8004262:	e053      	b.n	800430c <formular62+0x134>
        }
        else if (c->face[19] == c->face[49] && c->face[46] == c->face[22] && c->face[37] == c->face[13] && c->face[10] == c->face[40])
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	7cda      	ldrb	r2, [r3, #19]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800426e:	429a      	cmp	r2, r3
 8004270:	d11f      	bne.n	80042b2 <formular62+0xda>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	7d9b      	ldrb	r3, [r3, #22]
 800427c:	429a      	cmp	r2, r3
 800427e:	d118      	bne.n	80042b2 <formular62+0xda>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	7b5b      	ldrb	r3, [r3, #13]
 800428a:	429a      	cmp	r2, r3
 800428c:	d111      	bne.n	80042b2 <formular62+0xda>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	7a9a      	ldrb	r2, [r3, #10]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004298:	429a      	cmp	r2, r3
 800429a:	d10a      	bne.n	80042b2 <formular62+0xda>
        {
            formular61(c);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f7ff ff67 	bl	8004170 <formular61>
            rotateCube(c, U);
 80042a2:	2106      	movs	r1, #6
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f7ff fa4b 	bl	8003740 <rotateCube>
            formular61(c);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f7ff ff60 	bl	8004170 <formular61>
            break;
 80042b0:	e02c      	b.n	800430c <formular62+0x134>
        }
        else if (c->face[19] == c->face[13] && c->face[10] == c->face[22] && c->face[37] == c->face[49] && c->face[46] == c->face[40])
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	7cda      	ldrb	r2, [r3, #19]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	7b5b      	ldrb	r3, [r3, #13]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d120      	bne.n	8004300 <formular62+0x128>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	7a9a      	ldrb	r2, [r3, #10]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	7d9b      	ldrb	r3, [r3, #22]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d11a      	bne.n	8004300 <formular62+0x128>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d112      	bne.n	8004300 <formular62+0x128>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d10a      	bne.n	8004300 <formular62+0x128>
        {
            formular61(c);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f7ff ff40 	bl	8004170 <formular61>
            rotateCube(c, U3);
 80042f0:	2107      	movs	r1, #7
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f7ff fa24 	bl	8003740 <rotateCube>
            formular61(c);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f7ff ff39 	bl	8004170 <formular61>
            break;
 80042fe:	e005      	b.n	800430c <formular62+0x134>
        }
        else
            rotateCube(c, T);
 8004300:	2112      	movs	r1, #18
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7ff fa1c 	bl	8003740 <rotateCube>
        if (c->face[19] == c->face[22] && c->face[37] == c->face[40])
 8004308:	e76a      	b.n	80041e0 <formular62+0x8>
            break;
 800430a:	bf00      	nop
    }
}
 800430c:	bf00      	nop
 800430e:	3708      	adds	r7, #8
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <solve_Naive>:
void solve_Naive(cube_t *c)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
    // 1. get the botton face cross
    if (!(c->face[28] == 'D' && c->face[30] == 'D' && c->face[32] == 'D' && c->face[34] == 'D' && c->face[25] == c->face[22] && c->face[16] == c->face[13] && c->face[52] == c->face[49] && c->face[40] == c->face[43]))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	7f1b      	ldrb	r3, [r3, #28]
 8004320:	2b44      	cmp	r3, #68	; 0x44
 8004322:	d12d      	bne.n	8004380 <solve_Naive+0x6c>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	7f9b      	ldrb	r3, [r3, #30]
 8004328:	2b44      	cmp	r3, #68	; 0x44
 800432a:	d129      	bne.n	8004380 <solve_Naive+0x6c>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004332:	2b44      	cmp	r3, #68	; 0x44
 8004334:	d124      	bne.n	8004380 <solve_Naive+0x6c>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800433c:	2b44      	cmp	r3, #68	; 0x44
 800433e:	d11f      	bne.n	8004380 <solve_Naive+0x6c>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	7e5a      	ldrb	r2, [r3, #25]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	7d9b      	ldrb	r3, [r3, #22]
 8004348:	429a      	cmp	r2, r3
 800434a:	d119      	bne.n	8004380 <solve_Naive+0x6c>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	7c1a      	ldrb	r2, [r3, #16]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	7b5b      	ldrb	r3, [r3, #13]
 8004354:	429a      	cmp	r2, r3
 8004356:	d113      	bne.n	8004380 <solve_Naive+0x6c>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004364:	429a      	cmp	r2, r3
 8004366:	d10b      	bne.n	8004380 <solve_Naive+0x6c>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004374:	429a      	cmp	r2, r3
 8004376:	d01e      	beq.n	80043b6 <solve_Naive+0xa2>
    {
        while (c->face[1] != 'D' || c->face[3] != 'D' || c->face[5] != 'D' || c->face[7] != 'D')
 8004378:	e002      	b.n	8004380 <solve_Naive+0x6c>
            formular11(c);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f7ff fa56 	bl	800382c <formular11>
        while (c->face[1] != 'D' || c->face[3] != 'D' || c->face[5] != 'D' || c->face[7] != 'D')
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	785b      	ldrb	r3, [r3, #1]
 8004384:	2b44      	cmp	r3, #68	; 0x44
 8004386:	d1f8      	bne.n	800437a <solve_Naive+0x66>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	78db      	ldrb	r3, [r3, #3]
 800438c:	2b44      	cmp	r3, #68	; 0x44
 800438e:	d1f4      	bne.n	800437a <solve_Naive+0x66>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	795b      	ldrb	r3, [r3, #5]
 8004394:	2b44      	cmp	r3, #68	; 0x44
 8004396:	d1f0      	bne.n	800437a <solve_Naive+0x66>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	79db      	ldrb	r3, [r3, #7]
 800439c:	2b44      	cmp	r3, #68	; 0x44
 800439e:	d1ec      	bne.n	800437a <solve_Naive+0x66>
        formular12(c);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f7ff fad5 	bl	8003950 <formular12>
    } // 2. get the botton corner
    while (c->face[26] != c->face[22] || c->face[17] != c->face[13] || c->face[53] != c->face[49] || c->face[40] != c->face[44] ||
 80043a6:	e006      	b.n	80043b6 <solve_Naive+0xa2>
           c->face[24] != c->face[22] || c->face[15] != c->face[13] || c->face[51] != c->face[49] || c->face[40] != c->face[42])
    {
        formular15(c);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f7ff fb51 	bl	8003a50 <formular15>
        rotateCube(c, T);
 80043ae:	2112      	movs	r1, #18
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f7ff f9c5 	bl	8003740 <rotateCube>
    while (c->face[26] != c->face[22] || c->face[17] != c->face[13] || c->face[53] != c->face[49] || c->face[40] != c->face[44] ||
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	7e9a      	ldrb	r2, [r3, #26]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	7d9b      	ldrb	r3, [r3, #22]
 80043be:	429a      	cmp	r2, r3
 80043c0:	d1f2      	bne.n	80043a8 <solve_Naive+0x94>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	7c5a      	ldrb	r2, [r3, #17]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	7b5b      	ldrb	r3, [r3, #13]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d1ec      	bne.n	80043a8 <solve_Naive+0x94>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80043da:	429a      	cmp	r2, r3
 80043dc:	d1e4      	bne.n	80043a8 <solve_Naive+0x94>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d1dc      	bne.n	80043a8 <solve_Naive+0x94>
           c->face[24] != c->face[22] || c->face[15] != c->face[13] || c->face[51] != c->face[49] || c->face[40] != c->face[42])
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	7e1a      	ldrb	r2, [r3, #24]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	7d9b      	ldrb	r3, [r3, #22]
    while (c->face[26] != c->face[22] || c->face[17] != c->face[13] || c->face[53] != c->face[49] || c->face[40] != c->face[44] ||
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d1d6      	bne.n	80043a8 <solve_Naive+0x94>
           c->face[24] != c->face[22] || c->face[15] != c->face[13] || c->face[51] != c->face[49] || c->face[40] != c->face[42])
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	7bda      	ldrb	r2, [r3, #15]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	7b5b      	ldrb	r3, [r3, #13]
 8004402:	429a      	cmp	r2, r3
 8004404:	d1d0      	bne.n	80043a8 <solve_Naive+0x94>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004412:	429a      	cmp	r2, r3
 8004414:	d1c8      	bne.n	80043a8 <solve_Naive+0x94>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004422:	429a      	cmp	r2, r3
 8004424:	d1c0      	bne.n	80043a8 <solve_Naive+0x94>
    }
    while (c->face[23] != c->face[22] || c->face[14] != c->face[13] || c->face[50] != c->face[49] || c->face[40] != c->face[39] ||
 8004426:	e006      	b.n	8004436 <solve_Naive+0x122>
           c->face[21] != c->face[22] || c->face[12] != c->face[13] || c->face[48] != c->face[49] || c->face[40] != c->face[41])
    {
        formular23(c);
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f7ff fbe0 	bl	8003bee <formular23>
        rotateCube(c, T);
 800442e:	2112      	movs	r1, #18
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f7ff f985 	bl	8003740 <rotateCube>
    while (c->face[23] != c->face[22] || c->face[14] != c->face[13] || c->face[50] != c->face[49] || c->face[40] != c->face[39] ||
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	7dda      	ldrb	r2, [r3, #23]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	7d9b      	ldrb	r3, [r3, #22]
 800443e:	429a      	cmp	r2, r3
 8004440:	d1f2      	bne.n	8004428 <solve_Naive+0x114>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	7b9a      	ldrb	r2, [r3, #14]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	7b5b      	ldrb	r3, [r3, #13]
 800444a:	429a      	cmp	r2, r3
 800444c:	d1ec      	bne.n	8004428 <solve_Naive+0x114>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800445a:	429a      	cmp	r2, r3
 800445c:	d1e4      	bne.n	8004428 <solve_Naive+0x114>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800446a:	429a      	cmp	r2, r3
 800446c:	d1dc      	bne.n	8004428 <solve_Naive+0x114>
           c->face[21] != c->face[22] || c->face[12] != c->face[13] || c->face[48] != c->face[49] || c->face[40] != c->face[41])
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	7d5a      	ldrb	r2, [r3, #21]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	7d9b      	ldrb	r3, [r3, #22]
    while (c->face[23] != c->face[22] || c->face[14] != c->face[13] || c->face[50] != c->face[49] || c->face[40] != c->face[39] ||
 8004476:	429a      	cmp	r2, r3
 8004478:	d1d6      	bne.n	8004428 <solve_Naive+0x114>
           c->face[21] != c->face[22] || c->face[12] != c->face[13] || c->face[48] != c->face[49] || c->face[40] != c->face[41])
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	7b1a      	ldrb	r2, [r3, #12]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	7b5b      	ldrb	r3, [r3, #13]
 8004482:	429a      	cmp	r2, r3
 8004484:	d1d0      	bne.n	8004428 <solve_Naive+0x114>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004492:	429a      	cmp	r2, r3
 8004494:	d1c8      	bne.n	8004428 <solve_Naive+0x114>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d1c0      	bne.n	8004428 <solve_Naive+0x114>
    }
    while (c->face[1] != c->face[4] || c->face[3] != c->face[4] || c->face[5] != c->face[4] || c->face[7] != c->face[4])
 80044a6:	e002      	b.n	80044ae <solve_Naive+0x19a>
    {
        formular32(c);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f7ff fc0d 	bl	8003cc8 <formular32>
    while (c->face[1] != c->face[4] || c->face[3] != c->face[4] || c->face[5] != c->face[4] || c->face[7] != c->face[4])
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	785a      	ldrb	r2, [r3, #1]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	791b      	ldrb	r3, [r3, #4]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d1f6      	bne.n	80044a8 <solve_Naive+0x194>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	78da      	ldrb	r2, [r3, #3]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	791b      	ldrb	r3, [r3, #4]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d1f0      	bne.n	80044a8 <solve_Naive+0x194>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	795a      	ldrb	r2, [r3, #5]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	791b      	ldrb	r3, [r3, #4]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d1ea      	bne.n	80044a8 <solve_Naive+0x194>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	79da      	ldrb	r2, [r3, #7]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	791b      	ldrb	r3, [r3, #4]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d1e4      	bne.n	80044a8 <solve_Naive+0x194>
    }
    formular43(c);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f7ff fc8f 	bl	8003e02 <formular43>
    formular52(c);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f7ff fdd3 	bl	8004090 <formular52>
    formular62(c);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f7ff fe74 	bl	80041d8 <formular62>
    while (c->face[9] != c->face[13])
 80044f0:	e003      	b.n	80044fa <solve_Naive+0x1e6>
    {
        rotateCube(c, U);
 80044f2:	2106      	movs	r1, #6
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f7ff f923 	bl	8003740 <rotateCube>
    while (c->face[9] != c->face[13])
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	7a5a      	ldrb	r2, [r3, #9]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	7b5b      	ldrb	r3, [r3, #13]
 8004502:	429a      	cmp	r2, r3
 8004504:	d1f5      	bne.n	80044f2 <solve_Naive+0x1de>
    }
}
 8004506:	bf00      	nop
 8004508:	bf00      	nop
 800450a:	3708      	adds	r7, #8
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004510:	b480      	push	{r7}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004516:	4b15      	ldr	r3, [pc, #84]	; (800456c <HAL_MspInit+0x5c>)
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	4a14      	ldr	r2, [pc, #80]	; (800456c <HAL_MspInit+0x5c>)
 800451c:	f043 0301 	orr.w	r3, r3, #1
 8004520:	6193      	str	r3, [r2, #24]
 8004522:	4b12      	ldr	r3, [pc, #72]	; (800456c <HAL_MspInit+0x5c>)
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	60bb      	str	r3, [r7, #8]
 800452c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800452e:	4b0f      	ldr	r3, [pc, #60]	; (800456c <HAL_MspInit+0x5c>)
 8004530:	69db      	ldr	r3, [r3, #28]
 8004532:	4a0e      	ldr	r2, [pc, #56]	; (800456c <HAL_MspInit+0x5c>)
 8004534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004538:	61d3      	str	r3, [r2, #28]
 800453a:	4b0c      	ldr	r3, [pc, #48]	; (800456c <HAL_MspInit+0x5c>)
 800453c:	69db      	ldr	r3, [r3, #28]
 800453e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004542:	607b      	str	r3, [r7, #4]
 8004544:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004546:	4b0a      	ldr	r3, [pc, #40]	; (8004570 <HAL_MspInit+0x60>)
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	60fb      	str	r3, [r7, #12]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004552:	60fb      	str	r3, [r7, #12]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800455a:	60fb      	str	r3, [r7, #12]
 800455c:	4a04      	ldr	r2, [pc, #16]	; (8004570 <HAL_MspInit+0x60>)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004562:	bf00      	nop
 8004564:	3714      	adds	r7, #20
 8004566:	46bd      	mov	sp, r7
 8004568:	bc80      	pop	{r7}
 800456a:	4770      	bx	lr
 800456c:	40021000 	.word	0x40021000
 8004570:	40010000 	.word	0x40010000

08004574 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004574:	b480      	push	{r7}
 8004576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004578:	e7fe      	b.n	8004578 <NMI_Handler+0x4>

0800457a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800457a:	b480      	push	{r7}
 800457c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800457e:	e7fe      	b.n	800457e <HardFault_Handler+0x4>

08004580 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004580:	b480      	push	{r7}
 8004582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004584:	e7fe      	b.n	8004584 <MemManage_Handler+0x4>

08004586 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004586:	b480      	push	{r7}
 8004588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800458a:	e7fe      	b.n	800458a <BusFault_Handler+0x4>

0800458c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800458c:	b480      	push	{r7}
 800458e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004590:	e7fe      	b.n	8004590 <UsageFault_Handler+0x4>

08004592 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004592:	b480      	push	{r7}
 8004594:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004596:	bf00      	nop
 8004598:	46bd      	mov	sp, r7
 800459a:	bc80      	pop	{r7}
 800459c:	4770      	bx	lr

0800459e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800459e:	b480      	push	{r7}
 80045a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80045a2:	bf00      	nop
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bc80      	pop	{r7}
 80045a8:	4770      	bx	lr

080045aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80045aa:	b480      	push	{r7}
 80045ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80045ae:	bf00      	nop
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bc80      	pop	{r7}
 80045b4:	4770      	bx	lr

080045b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80045ba:	f000 ff93 	bl	80054e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80045be:	bf00      	nop
 80045c0:	bd80      	pop	{r7, pc}
	...

080045c4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_0) != RESET)
 80045c8:	4b09      	ldr	r3, [pc, #36]	; (80045f0 <EXTI0_IRQHandler+0x2c>)
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	f003 0301 	and.w	r3, r3, #1
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d008      	beq.n	80045e6 <EXTI0_IRQHandler+0x22>
  {
    bt_flags = 2;
 80045d4:	4b07      	ldr	r3, [pc, #28]	; (80045f4 <EXTI0_IRQHandler+0x30>)
 80045d6:	2202      	movs	r2, #2
 80045d8:	701a      	strb	r2, [r3, #0]
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 80045da:	4b05      	ldr	r3, [pc, #20]	; (80045f0 <EXTI0_IRQHandler+0x2c>)
 80045dc:	2201      	movs	r2, #1
 80045de:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_PIN_0);
 80045e0:	2001      	movs	r0, #1
 80045e2:	f001 ff2d 	bl	8006440 <HAL_GPIO_EXTI_Callback>
  }
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80045e6:	2001      	movs	r0, #1
 80045e8:	f001 ff12 	bl	8006410 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80045ec:	bf00      	nop
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	40010400 	.word	0x40010400
 80045f4:	200033f8 	.word	0x200033f8

080045f8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_3) != RESET)
 80045fc:	4b17      	ldr	r3, [pc, #92]	; (800465c <EXTI3_IRQHandler+0x64>)
 80045fe:	695b      	ldr	r3, [r3, #20]
 8004600:	f003 0308 	and.w	r3, r3, #8
 8004604:	2b00      	cmp	r3, #0
 8004606:	d023      	beq.n	8004650 <EXTI3_IRQHandler+0x58>
  {
    if (Ov7725_vsync == 0)
 8004608:	4b15      	ldr	r3, [pc, #84]	; (8004660 <EXTI3_IRQHandler+0x68>)
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d10f      	bne.n	8004630 <EXTI3_IRQHandler+0x38>
    {
      FIFO_WRST_L();
 8004610:	4b14      	ldr	r3, [pc, #80]	; (8004664 <EXTI3_IRQHandler+0x6c>)
 8004612:	2210      	movs	r2, #16
 8004614:	615a      	str	r2, [r3, #20]
      FIFO_WE_H();
 8004616:	4b14      	ldr	r3, [pc, #80]	; (8004668 <EXTI3_IRQHandler+0x70>)
 8004618:	2208      	movs	r2, #8
 800461a:	611a      	str	r2, [r3, #16]

      Ov7725_vsync = 1;
 800461c:	4b10      	ldr	r3, [pc, #64]	; (8004660 <EXTI3_IRQHandler+0x68>)
 800461e:	2201      	movs	r2, #1
 8004620:	701a      	strb	r2, [r3, #0]
      FIFO_WE_H();
 8004622:	4b11      	ldr	r3, [pc, #68]	; (8004668 <EXTI3_IRQHandler+0x70>)
 8004624:	2208      	movs	r2, #8
 8004626:	611a      	str	r2, [r3, #16]
      FIFO_WRST_H();
 8004628:	4b0e      	ldr	r3, [pc, #56]	; (8004664 <EXTI3_IRQHandler+0x6c>)
 800462a:	2210      	movs	r2, #16
 800462c:	611a      	str	r2, [r3, #16]
 800462e:	e009      	b.n	8004644 <EXTI3_IRQHandler+0x4c>
    }
    else if (Ov7725_vsync == 1)
 8004630:	4b0b      	ldr	r3, [pc, #44]	; (8004660 <EXTI3_IRQHandler+0x68>)
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	2b01      	cmp	r3, #1
 8004636:	d105      	bne.n	8004644 <EXTI3_IRQHandler+0x4c>
    {
      FIFO_WE_L();
 8004638:	4b0b      	ldr	r3, [pc, #44]	; (8004668 <EXTI3_IRQHandler+0x70>)
 800463a:	2208      	movs	r2, #8
 800463c:	615a      	str	r2, [r3, #20]
      Ov7725_vsync = 2;
 800463e:	4b08      	ldr	r3, [pc, #32]	; (8004660 <EXTI3_IRQHandler+0x68>)
 8004640:	2202      	movs	r2, #2
 8004642:	701a      	strb	r2, [r3, #0]
    }

    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_3);
 8004644:	4b05      	ldr	r3, [pc, #20]	; (800465c <EXTI3_IRQHandler+0x64>)
 8004646:	2208      	movs	r2, #8
 8004648:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_PIN_3);
 800464a:	2008      	movs	r0, #8
 800464c:	f001 fef8 	bl	8006440 <HAL_GPIO_EXTI_Callback>
  }
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8004650:	2008      	movs	r0, #8
 8004652:	f001 fedd 	bl	8006410 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8004656:	bf00      	nop
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	40010400 	.word	0x40010400
 8004660:	200020cc 	.word	0x200020cc
 8004664:	40011000 	.word	0x40011000
 8004668:	40011400 	.word	0x40011400

0800466c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
 8004670:	4b09      	ldr	r3, [pc, #36]	; (8004698 <EXTI4_IRQHandler+0x2c>)
 8004672:	695b      	ldr	r3, [r3, #20]
 8004674:	f003 0310 	and.w	r3, r3, #16
 8004678:	2b00      	cmp	r3, #0
 800467a:	d008      	beq.n	800468e <EXTI4_IRQHandler+0x22>
  {
    ucXPT2046_TouchFlag = 1;
 800467c:	4b07      	ldr	r3, [pc, #28]	; (800469c <EXTI4_IRQHandler+0x30>)
 800467e:	2201      	movs	r2, #1
 8004680:	701a      	strb	r2, [r3, #0]

    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 8004682:	4b05      	ldr	r3, [pc, #20]	; (8004698 <EXTI4_IRQHandler+0x2c>)
 8004684:	2210      	movs	r2, #16
 8004686:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_PIN_4);
 8004688:	2010      	movs	r0, #16
 800468a:	f001 fed9 	bl	8006440 <HAL_GPIO_EXTI_Callback>
  }
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800468e:	2010      	movs	r0, #16
 8004690:	f001 febe 	bl	8006410 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004694:	bf00      	nop
 8004696:	bd80      	pop	{r7, pc}
 8004698:	40010400 	.word	0x40010400
 800469c:	2000347c 	.word	0x2000347c

080046a0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch4_trig_com);
 80046a4:	4802      	ldr	r0, [pc, #8]	; (80046b0 <DMA1_Channel4_IRQHandler+0x10>)
 80046a6:	f001 fa71 	bl	8005b8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80046aa:	bf00      	nop
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	200033b4 	.word	0x200033b4

080046b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  extern void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart);
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80046ba:	481f      	ldr	r0, [pc, #124]	; (8004738 <USART1_IRQHandler+0x84>)
 80046bc:	f003 fbde 	bl	8007e7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  if (__HAL_UART_GET_FLAG(&huart1, UART_IT_IDLE) && huart1.RxXferCount != 0U)
 80046c0:	4b1d      	ldr	r3, [pc, #116]	; (8004738 <USART1_IRQHandler+0x84>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	4b1d      	ldr	r3, [pc, #116]	; (800473c <USART1_IRQHandler+0x88>)
 80046c8:	4013      	ands	r3, r2
 80046ca:	4a1c      	ldr	r2, [pc, #112]	; (800473c <USART1_IRQHandler+0x88>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d123      	bne.n	8004718 <USART1_IRQHandler+0x64>
 80046d0:	4b19      	ldr	r3, [pc, #100]	; (8004738 <USART1_IRQHandler+0x84>)
 80046d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d01e      	beq.n	8004718 <USART1_IRQHandler+0x64>
  {
    HAL_UART_RxCpltCallback(&huart1);
 80046da:	4817      	ldr	r0, [pc, #92]	; (8004738 <USART1_IRQHandler+0x84>)
 80046dc:	f000 fb0a 	bl	8004cf4 <HAL_UART_RxCpltCallback>
    /* Disable the IRDA Data Register not empty Interrupt */
    __HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE);
 80046e0:	4b15      	ldr	r3, [pc, #84]	; (8004738 <USART1_IRQHandler+0x84>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68da      	ldr	r2, [r3, #12]
 80046e6:	4b14      	ldr	r3, [pc, #80]	; (8004738 <USART1_IRQHandler+0x84>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f022 0220 	bic.w	r2, r2, #32
 80046ee:	60da      	str	r2, [r3, #12]

    /* Disable the UART Parity Error Interrupt */
    __HAL_UART_DISABLE_IT(&huart1, UART_IT_PE);
 80046f0:	4b11      	ldr	r3, [pc, #68]	; (8004738 <USART1_IRQHandler+0x84>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68da      	ldr	r2, [r3, #12]
 80046f6:	4b10      	ldr	r3, [pc, #64]	; (8004738 <USART1_IRQHandler+0x84>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046fe:	60da      	str	r2, [r3, #12]
    /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_DISABLE_IT(&huart1, UART_IT_ERR);
 8004700:	4b0d      	ldr	r3, [pc, #52]	; (8004738 <USART1_IRQHandler+0x84>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	695a      	ldr	r2, [r3, #20]
 8004706:	4b0c      	ldr	r3, [pc, #48]	; (8004738 <USART1_IRQHandler+0x84>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f022 0201 	bic.w	r2, r2, #1
 800470e:	615a      	str	r2, [r3, #20]

    /* Rx process is completed, restore huart->RxState to Ready */
    huart1.RxState = HAL_UART_STATE_READY;
 8004710:	4b09      	ldr	r3, [pc, #36]	; (8004738 <USART1_IRQHandler+0x84>)
 8004712:	2220      	movs	r2, #32
 8004714:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  }
  __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 8004718:	2300      	movs	r3, #0
 800471a:	607b      	str	r3, [r7, #4]
 800471c:	4b06      	ldr	r3, [pc, #24]	; (8004738 <USART1_IRQHandler+0x84>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	607b      	str	r3, [r7, #4]
 8004724:	4b04      	ldr	r3, [pc, #16]	; (8004738 <USART1_IRQHandler+0x84>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	607b      	str	r3, [r7, #4]
 800472c:	687b      	ldr	r3, [r7, #4]

  /* USER CODE END USART1_IRQn 1 */
}
 800472e:	bf00      	nop
 8004730:	3708      	adds	r7, #8
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	200033fc 	.word	0x200033fc
 800473c:	10000010 	.word	0x10000010

08004740 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004744:	4802      	ldr	r0, [pc, #8]	; (8004750 <USART3_IRQHandler+0x10>)
 8004746:	f003 fb99 	bl	8007e7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800474a:	bf00      	nop
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	2000343c 	.word	0x2000343c

08004754 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b086      	sub	sp, #24
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004760:	2300      	movs	r3, #0
 8004762:	617b      	str	r3, [r7, #20]
 8004764:	e00a      	b.n	800477c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004766:	f3af 8000 	nop.w
 800476a:	4601      	mov	r1, r0
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	1c5a      	adds	r2, r3, #1
 8004770:	60ba      	str	r2, [r7, #8]
 8004772:	b2ca      	uxtb	r2, r1
 8004774:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	3301      	adds	r3, #1
 800477a:	617b      	str	r3, [r7, #20]
 800477c:	697a      	ldr	r2, [r7, #20]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	429a      	cmp	r2, r3
 8004782:	dbf0      	blt.n	8004766 <_read+0x12>
	}

return len;
 8004784:	687b      	ldr	r3, [r7, #4]
}
 8004786:	4618      	mov	r0, r3
 8004788:	3718      	adds	r7, #24
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800478e:	b580      	push	{r7, lr}
 8004790:	b086      	sub	sp, #24
 8004792:	af00      	add	r7, sp, #0
 8004794:	60f8      	str	r0, [r7, #12]
 8004796:	60b9      	str	r1, [r7, #8]
 8004798:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800479a:	2300      	movs	r3, #0
 800479c:	617b      	str	r3, [r7, #20]
 800479e:	e009      	b.n	80047b4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	1c5a      	adds	r2, r3, #1
 80047a4:	60ba      	str	r2, [r7, #8]
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	4618      	mov	r0, r3
 80047aa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	3301      	adds	r3, #1
 80047b2:	617b      	str	r3, [r7, #20]
 80047b4:	697a      	ldr	r2, [r7, #20]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	dbf1      	blt.n	80047a0 <_write+0x12>
	}
	return len;
 80047bc:	687b      	ldr	r3, [r7, #4]
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3718      	adds	r7, #24
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <_close>:

int _close(int file)
{
 80047c6:	b480      	push	{r7}
 80047c8:	b083      	sub	sp, #12
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
	return -1;
 80047ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	370c      	adds	r7, #12
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bc80      	pop	{r7}
 80047da:	4770      	bx	lr

080047dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80047ec:	605a      	str	r2, [r3, #4]
	return 0;
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bc80      	pop	{r7}
 80047f8:	4770      	bx	lr

080047fa <_isatty>:

int _isatty(int file)
{
 80047fa:	b480      	push	{r7}
 80047fc:	b083      	sub	sp, #12
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
	return 1;
 8004802:	2301      	movs	r3, #1
}
 8004804:	4618      	mov	r0, r3
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	bc80      	pop	{r7}
 800480c:	4770      	bx	lr

0800480e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800480e:	b480      	push	{r7}
 8004810:	b085      	sub	sp, #20
 8004812:	af00      	add	r7, sp, #0
 8004814:	60f8      	str	r0, [r7, #12]
 8004816:	60b9      	str	r1, [r7, #8]
 8004818:	607a      	str	r2, [r7, #4]
	return 0;
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	3714      	adds	r7, #20
 8004820:	46bd      	mov	sp, r7
 8004822:	bc80      	pop	{r7}
 8004824:	4770      	bx	lr
	...

08004828 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b086      	sub	sp, #24
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004830:	4a14      	ldr	r2, [pc, #80]	; (8004884 <_sbrk+0x5c>)
 8004832:	4b15      	ldr	r3, [pc, #84]	; (8004888 <_sbrk+0x60>)
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800483c:	4b13      	ldr	r3, [pc, #76]	; (800488c <_sbrk+0x64>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d102      	bne.n	800484a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004844:	4b11      	ldr	r3, [pc, #68]	; (800488c <_sbrk+0x64>)
 8004846:	4a12      	ldr	r2, [pc, #72]	; (8004890 <_sbrk+0x68>)
 8004848:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800484a:	4b10      	ldr	r3, [pc, #64]	; (800488c <_sbrk+0x64>)
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4413      	add	r3, r2
 8004852:	693a      	ldr	r2, [r7, #16]
 8004854:	429a      	cmp	r2, r3
 8004856:	d207      	bcs.n	8004868 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004858:	f003 ffa6 	bl	80087a8 <__errno>
 800485c:	4603      	mov	r3, r0
 800485e:	220c      	movs	r2, #12
 8004860:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004862:	f04f 33ff 	mov.w	r3, #4294967295
 8004866:	e009      	b.n	800487c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004868:	4b08      	ldr	r3, [pc, #32]	; (800488c <_sbrk+0x64>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800486e:	4b07      	ldr	r3, [pc, #28]	; (800488c <_sbrk+0x64>)
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4413      	add	r3, r2
 8004876:	4a05      	ldr	r2, [pc, #20]	; (800488c <_sbrk+0x64>)
 8004878:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800487a:	68fb      	ldr	r3, [r7, #12]
}
 800487c:	4618      	mov	r0, r3
 800487e:	3718      	adds	r7, #24
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	20010000 	.word	0x20010000
 8004888:	00000400 	.word	0x00000400
 800488c:	20003370 	.word	0x20003370
 8004890:	20003498 	.word	0x20003498

08004894 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004894:	b480      	push	{r7}
 8004896:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004898:	bf00      	nop
 800489a:	46bd      	mov	sp, r7
 800489c:	bc80      	pop	{r7}
 800489e:	4770      	bx	lr

080048a0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
DMA_HandleTypeDef hdma_tim1_ch4_trig_com;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b094      	sub	sp, #80	; 0x50
 80048a4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80048a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80048aa:	2200      	movs	r2, #0
 80048ac:	601a      	str	r2, [r3, #0]
 80048ae:	605a      	str	r2, [r3, #4]
 80048b0:	609a      	str	r2, [r3, #8]
 80048b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048b4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80048b8:	2200      	movs	r2, #0
 80048ba:	601a      	str	r2, [r3, #0]
 80048bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80048be:	f107 031c 	add.w	r3, r7, #28
 80048c2:	2200      	movs	r2, #0
 80048c4:	601a      	str	r2, [r3, #0]
 80048c6:	605a      	str	r2, [r3, #4]
 80048c8:	609a      	str	r2, [r3, #8]
 80048ca:	60da      	str	r2, [r3, #12]
 80048cc:	611a      	str	r2, [r3, #16]
 80048ce:	615a      	str	r2, [r3, #20]
 80048d0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80048d2:	463b      	mov	r3, r7
 80048d4:	2200      	movs	r2, #0
 80048d6:	601a      	str	r2, [r3, #0]
 80048d8:	605a      	str	r2, [r3, #4]
 80048da:	609a      	str	r2, [r3, #8]
 80048dc:	60da      	str	r2, [r3, #12]
 80048de:	611a      	str	r2, [r3, #16]
 80048e0:	615a      	str	r2, [r3, #20]
 80048e2:	619a      	str	r2, [r3, #24]

  htim1.Instance = TIM1;
 80048e4:	4b3c      	ldr	r3, [pc, #240]	; (80049d8 <MX_TIM1_Init+0x138>)
 80048e6:	4a3d      	ldr	r2, [pc, #244]	; (80049dc <MX_TIM1_Init+0x13c>)
 80048e8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80048ea:	4b3b      	ldr	r3, [pc, #236]	; (80049d8 <MX_TIM1_Init+0x138>)
 80048ec:	2200      	movs	r2, #0
 80048ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048f0:	4b39      	ldr	r3, [pc, #228]	; (80049d8 <MX_TIM1_Init+0x138>)
 80048f2:	2200      	movs	r2, #0
 80048f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 76;
 80048f6:	4b38      	ldr	r3, [pc, #224]	; (80049d8 <MX_TIM1_Init+0x138>)
 80048f8:	224c      	movs	r2, #76	; 0x4c
 80048fa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048fc:	4b36      	ldr	r3, [pc, #216]	; (80049d8 <MX_TIM1_Init+0x138>)
 80048fe:	2200      	movs	r2, #0
 8004900:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004902:	4b35      	ldr	r3, [pc, #212]	; (80049d8 <MX_TIM1_Init+0x138>)
 8004904:	2200      	movs	r2, #0
 8004906:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004908:	4b33      	ldr	r3, [pc, #204]	; (80049d8 <MX_TIM1_Init+0x138>)
 800490a:	2200      	movs	r2, #0
 800490c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800490e:	4832      	ldr	r0, [pc, #200]	; (80049d8 <MX_TIM1_Init+0x138>)
 8004910:	f002 fa04 	bl	8006d1c <HAL_TIM_Base_Init>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d001      	beq.n	800491e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800491a:	f7fe fce0 	bl	80032de <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800491e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004922:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004924:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004928:	4619      	mov	r1, r3
 800492a:	482b      	ldr	r0, [pc, #172]	; (80049d8 <MX_TIM1_Init+0x138>)
 800492c:	f002 fbfe 	bl	800712c <HAL_TIM_ConfigClockSource>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d001      	beq.n	800493a <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8004936:	f7fe fcd2 	bl	80032de <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800493a:	4827      	ldr	r0, [pc, #156]	; (80049d8 <MX_TIM1_Init+0x138>)
 800493c:	f002 fa19 	bl	8006d72 <HAL_TIM_PWM_Init>
 8004940:	4603      	mov	r3, r0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d001      	beq.n	800494a <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8004946:	f7fe fcca 	bl	80032de <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800494a:	2300      	movs	r3, #0
 800494c:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800494e:	2300      	movs	r3, #0
 8004950:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004952:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004956:	4619      	mov	r1, r3
 8004958:	481f      	ldr	r0, [pc, #124]	; (80049d8 <MX_TIM1_Init+0x138>)
 800495a:	f003 f890 	bl	8007a7e <HAL_TIMEx_MasterConfigSynchronization>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d001      	beq.n	8004968 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8004964:	f7fe fcbb 	bl	80032de <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004968:	2360      	movs	r3, #96	; 0x60
 800496a:	61fb      	str	r3, [r7, #28]
  sConfigOC.Pulse = 0;
 800496c:	2300      	movs	r3, #0
 800496e:	623b      	str	r3, [r7, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004970:	2300      	movs	r3, #0
 8004972:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8004974:	2304      	movs	r3, #4
 8004976:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004978:	2300      	movs	r3, #0
 800497a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800497c:	2300      	movs	r3, #0
 800497e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004980:	f107 031c 	add.w	r3, r7, #28
 8004984:	220c      	movs	r2, #12
 8004986:	4619      	mov	r1, r3
 8004988:	4813      	ldr	r0, [pc, #76]	; (80049d8 <MX_TIM1_Init+0x138>)
 800498a:	f002 fb09 	bl	8006fa0 <HAL_TIM_PWM_ConfigChannel>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d001      	beq.n	8004998 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8004994:	f7fe fca3 	bl	80032de <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004998:	2300      	movs	r3, #0
 800499a:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800499c:	2300      	movs	r3, #0
 800499e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80049a0:	2300      	movs	r3, #0
 80049a2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80049a4:	2300      	movs	r3, #0
 80049a6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80049a8:	2300      	movs	r3, #0
 80049aa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80049ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80049b0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80049b2:	2300      	movs	r3, #0
 80049b4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80049b6:	463b      	mov	r3, r7
 80049b8:	4619      	mov	r1, r3
 80049ba:	4807      	ldr	r0, [pc, #28]	; (80049d8 <MX_TIM1_Init+0x138>)
 80049bc:	f003 f807 	bl	80079ce <HAL_TIMEx_ConfigBreakDeadTime>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d001      	beq.n	80049ca <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80049c6:	f7fe fc8a 	bl	80032de <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 80049ca:	4803      	ldr	r0, [pc, #12]	; (80049d8 <MX_TIM1_Init+0x138>)
 80049cc:	f000 f85e 	bl	8004a8c <HAL_TIM_MspPostInit>

}
 80049d0:	bf00      	nop
 80049d2:	3750      	adds	r7, #80	; 0x50
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	20003374 	.word	0x20003374
 80049dc:	40012c00 	.word	0x40012c00

080049e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a23      	ldr	r2, [pc, #140]	; (8004a7c <HAL_TIM_Base_MspInit+0x9c>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d13f      	bne.n	8004a72 <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80049f2:	4b23      	ldr	r3, [pc, #140]	; (8004a80 <HAL_TIM_Base_MspInit+0xa0>)
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	4a22      	ldr	r2, [pc, #136]	; (8004a80 <HAL_TIM_Base_MspInit+0xa0>)
 80049f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80049fc:	6193      	str	r3, [r2, #24]
 80049fe:	4b20      	ldr	r3, [pc, #128]	; (8004a80 <HAL_TIM_Base_MspInit+0xa0>)
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a06:	60fb      	str	r3, [r7, #12]
 8004a08:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH4_TRIG_COM Init */
    hdma_tim1_ch4_trig_com.Instance = DMA1_Channel4;
 8004a0a:	4b1e      	ldr	r3, [pc, #120]	; (8004a84 <HAL_TIM_Base_MspInit+0xa4>)
 8004a0c:	4a1e      	ldr	r2, [pc, #120]	; (8004a88 <HAL_TIM_Base_MspInit+0xa8>)
 8004a0e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch4_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004a10:	4b1c      	ldr	r3, [pc, #112]	; (8004a84 <HAL_TIM_Base_MspInit+0xa4>)
 8004a12:	2210      	movs	r2, #16
 8004a14:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a16:	4b1b      	ldr	r3, [pc, #108]	; (8004a84 <HAL_TIM_Base_MspInit+0xa4>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 8004a1c:	4b19      	ldr	r3, [pc, #100]	; (8004a84 <HAL_TIM_Base_MspInit+0xa4>)
 8004a1e:	2280      	movs	r2, #128	; 0x80
 8004a20:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004a22:	4b18      	ldr	r3, [pc, #96]	; (8004a84 <HAL_TIM_Base_MspInit+0xa4>)
 8004a24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a28:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004a2a:	4b16      	ldr	r3, [pc, #88]	; (8004a84 <HAL_TIM_Base_MspInit+0xa4>)
 8004a2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a30:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch4_trig_com.Init.Mode = DMA_CIRCULAR;
 8004a32:	4b14      	ldr	r3, [pc, #80]	; (8004a84 <HAL_TIM_Base_MspInit+0xa4>)
 8004a34:	2220      	movs	r2, #32
 8004a36:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch4_trig_com.Init.Priority = DMA_PRIORITY_LOW;
 8004a38:	4b12      	ldr	r3, [pc, #72]	; (8004a84 <HAL_TIM_Base_MspInit+0xa4>)
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch4_trig_com) != HAL_OK)
 8004a3e:	4811      	ldr	r0, [pc, #68]	; (8004a84 <HAL_TIM_Base_MspInit+0xa4>)
 8004a40:	f000 fe9a 	bl	8005778 <HAL_DMA_Init>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d001      	beq.n	8004a4e <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8004a4a:	f7fe fc48 	bl	80032de <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim1_ch4_trig_com);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a0c      	ldr	r2, [pc, #48]	; (8004a84 <HAL_TIM_Base_MspInit+0xa4>)
 8004a52:	631a      	str	r2, [r3, #48]	; 0x30
 8004a54:	4a0b      	ldr	r2, [pc, #44]	; (8004a84 <HAL_TIM_Base_MspInit+0xa4>)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim1_ch4_trig_com);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a09      	ldr	r2, [pc, #36]	; (8004a84 <HAL_TIM_Base_MspInit+0xa4>)
 8004a5e:	639a      	str	r2, [r3, #56]	; 0x38
 8004a60:	4a08      	ldr	r2, [pc, #32]	; (8004a84 <HAL_TIM_Base_MspInit+0xa4>)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim1_ch4_trig_com);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a06      	ldr	r2, [pc, #24]	; (8004a84 <HAL_TIM_Base_MspInit+0xa4>)
 8004a6a:	635a      	str	r2, [r3, #52]	; 0x34
 8004a6c:	4a05      	ldr	r2, [pc, #20]	; (8004a84 <HAL_TIM_Base_MspInit+0xa4>)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8004a72:	bf00      	nop
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	40012c00 	.word	0x40012c00
 8004a80:	40021000 	.word	0x40021000
 8004a84:	200033b4 	.word	0x200033b4
 8004a88:	40020044 	.word	0x40020044

08004a8c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b088      	sub	sp, #32
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a94:	f107 0310 	add.w	r3, r7, #16
 8004a98:	2200      	movs	r2, #0
 8004a9a:	601a      	str	r2, [r3, #0]
 8004a9c:	605a      	str	r2, [r3, #4]
 8004a9e:	609a      	str	r2, [r3, #8]
 8004aa0:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a10      	ldr	r2, [pc, #64]	; (8004ae8 <HAL_TIM_MspPostInit+0x5c>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d118      	bne.n	8004ade <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004aac:	4b0f      	ldr	r3, [pc, #60]	; (8004aec <HAL_TIM_MspPostInit+0x60>)
 8004aae:	699b      	ldr	r3, [r3, #24]
 8004ab0:	4a0e      	ldr	r2, [pc, #56]	; (8004aec <HAL_TIM_MspPostInit+0x60>)
 8004ab2:	f043 0304 	orr.w	r3, r3, #4
 8004ab6:	6193      	str	r3, [r2, #24]
 8004ab8:	4b0c      	ldr	r3, [pc, #48]	; (8004aec <HAL_TIM_MspPostInit+0x60>)
 8004aba:	699b      	ldr	r3, [r3, #24]
 8004abc:	f003 0304 	and.w	r3, r3, #4
 8004ac0:	60fb      	str	r3, [r7, #12]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004ac4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004ac8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aca:	2302      	movs	r3, #2
 8004acc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ad2:	f107 0310 	add.w	r3, r7, #16
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	4805      	ldr	r0, [pc, #20]	; (8004af0 <HAL_TIM_MspPostInit+0x64>)
 8004ada:	f001 fac1 	bl	8006060 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004ade:	bf00      	nop
 8004ae0:	3720      	adds	r7, #32
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	40012c00 	.word	0x40012c00
 8004aec:	40021000 	.word	0x40021000
 8004af0:	40010800 	.word	0x40010800

08004af4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8004af8:	4b11      	ldr	r3, [pc, #68]	; (8004b40 <MX_USART1_UART_Init+0x4c>)
 8004afa:	4a12      	ldr	r2, [pc, #72]	; (8004b44 <MX_USART1_UART_Init+0x50>)
 8004afc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004afe:	4b10      	ldr	r3, [pc, #64]	; (8004b40 <MX_USART1_UART_Init+0x4c>)
 8004b00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004b04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004b06:	4b0e      	ldr	r3, [pc, #56]	; (8004b40 <MX_USART1_UART_Init+0x4c>)
 8004b08:	2200      	movs	r2, #0
 8004b0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004b0c:	4b0c      	ldr	r3, [pc, #48]	; (8004b40 <MX_USART1_UART_Init+0x4c>)
 8004b0e:	2200      	movs	r2, #0
 8004b10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004b12:	4b0b      	ldr	r3, [pc, #44]	; (8004b40 <MX_USART1_UART_Init+0x4c>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004b18:	4b09      	ldr	r3, [pc, #36]	; (8004b40 <MX_USART1_UART_Init+0x4c>)
 8004b1a:	220c      	movs	r2, #12
 8004b1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b1e:	4b08      	ldr	r3, [pc, #32]	; (8004b40 <MX_USART1_UART_Init+0x4c>)
 8004b20:	2200      	movs	r2, #0
 8004b22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004b24:	4b06      	ldr	r3, [pc, #24]	; (8004b40 <MX_USART1_UART_Init+0x4c>)
 8004b26:	2200      	movs	r2, #0
 8004b28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004b2a:	4805      	ldr	r0, [pc, #20]	; (8004b40 <MX_USART1_UART_Init+0x4c>)
 8004b2c:	f002 ffeb 	bl	8007b06 <HAL_UART_Init>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d001      	beq.n	8004b3a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004b36:	f7fe fbd2 	bl	80032de <Error_Handler>
  }

}
 8004b3a:	bf00      	nop
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	200033fc 	.word	0x200033fc
 8004b44:	40013800 	.word	0x40013800

08004b48 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8004b4c:	4b11      	ldr	r3, [pc, #68]	; (8004b94 <MX_USART3_UART_Init+0x4c>)
 8004b4e:	4a12      	ldr	r2, [pc, #72]	; (8004b98 <MX_USART3_UART_Init+0x50>)
 8004b50:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8004b52:	4b10      	ldr	r3, [pc, #64]	; (8004b94 <MX_USART3_UART_Init+0x4c>)
 8004b54:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004b58:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004b5a:	4b0e      	ldr	r3, [pc, #56]	; (8004b94 <MX_USART3_UART_Init+0x4c>)
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004b60:	4b0c      	ldr	r3, [pc, #48]	; (8004b94 <MX_USART3_UART_Init+0x4c>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004b66:	4b0b      	ldr	r3, [pc, #44]	; (8004b94 <MX_USART3_UART_Init+0x4c>)
 8004b68:	2200      	movs	r2, #0
 8004b6a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004b6c:	4b09      	ldr	r3, [pc, #36]	; (8004b94 <MX_USART3_UART_Init+0x4c>)
 8004b6e:	220c      	movs	r2, #12
 8004b70:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b72:	4b08      	ldr	r3, [pc, #32]	; (8004b94 <MX_USART3_UART_Init+0x4c>)
 8004b74:	2200      	movs	r2, #0
 8004b76:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004b78:	4b06      	ldr	r3, [pc, #24]	; (8004b94 <MX_USART3_UART_Init+0x4c>)
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004b7e:	4805      	ldr	r0, [pc, #20]	; (8004b94 <MX_USART3_UART_Init+0x4c>)
 8004b80:	f002 ffc1 	bl	8007b06 <HAL_UART_Init>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d001      	beq.n	8004b8e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004b8a:	f7fe fba8 	bl	80032de <Error_Handler>
  }

}
 8004b8e:	bf00      	nop
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	2000343c 	.word	0x2000343c
 8004b98:	40004800 	.word	0x40004800

08004b9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b08c      	sub	sp, #48	; 0x30
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ba4:	f107 031c 	add.w	r3, r7, #28
 8004ba8:	2200      	movs	r2, #0
 8004baa:	601a      	str	r2, [r3, #0]
 8004bac:	605a      	str	r2, [r3, #4]
 8004bae:	609a      	str	r2, [r3, #8]
 8004bb0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a49      	ldr	r2, [pc, #292]	; (8004cdc <HAL_UART_MspInit+0x140>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d13a      	bne.n	8004c32 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004bbc:	4b48      	ldr	r3, [pc, #288]	; (8004ce0 <HAL_UART_MspInit+0x144>)
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	4a47      	ldr	r2, [pc, #284]	; (8004ce0 <HAL_UART_MspInit+0x144>)
 8004bc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bc6:	6193      	str	r3, [r2, #24]
 8004bc8:	4b45      	ldr	r3, [pc, #276]	; (8004ce0 <HAL_UART_MspInit+0x144>)
 8004bca:	699b      	ldr	r3, [r3, #24]
 8004bcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bd0:	61bb      	str	r3, [r7, #24]
 8004bd2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bd4:	4b42      	ldr	r3, [pc, #264]	; (8004ce0 <HAL_UART_MspInit+0x144>)
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	4a41      	ldr	r2, [pc, #260]	; (8004ce0 <HAL_UART_MspInit+0x144>)
 8004bda:	f043 0304 	orr.w	r3, r3, #4
 8004bde:	6193      	str	r3, [r2, #24]
 8004be0:	4b3f      	ldr	r3, [pc, #252]	; (8004ce0 <HAL_UART_MspInit+0x144>)
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	f003 0304 	and.w	r3, r3, #4
 8004be8:	617b      	str	r3, [r7, #20]
 8004bea:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004bec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004bf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bf2:	2302      	movs	r3, #2
 8004bf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bfa:	f107 031c 	add.w	r3, r7, #28
 8004bfe:	4619      	mov	r1, r3
 8004c00:	4838      	ldr	r0, [pc, #224]	; (8004ce4 <HAL_UART_MspInit+0x148>)
 8004c02:	f001 fa2d 	bl	8006060 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004c06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c10:	2300      	movs	r3, #0
 8004c12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c14:	f107 031c 	add.w	r3, r7, #28
 8004c18:	4619      	mov	r1, r3
 8004c1a:	4832      	ldr	r0, [pc, #200]	; (8004ce4 <HAL_UART_MspInit+0x148>)
 8004c1c:	f001 fa20 	bl	8006060 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004c20:	2200      	movs	r2, #0
 8004c22:	2100      	movs	r1, #0
 8004c24:	2025      	movs	r0, #37	; 0x25
 8004c26:	f000 fd70 	bl	800570a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004c2a:	2025      	movs	r0, #37	; 0x25
 8004c2c:	f000 fd89 	bl	8005742 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004c30:	e050      	b.n	8004cd4 <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART3)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a2c      	ldr	r2, [pc, #176]	; (8004ce8 <HAL_UART_MspInit+0x14c>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d14b      	bne.n	8004cd4 <HAL_UART_MspInit+0x138>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004c3c:	4b28      	ldr	r3, [pc, #160]	; (8004ce0 <HAL_UART_MspInit+0x144>)
 8004c3e:	69db      	ldr	r3, [r3, #28]
 8004c40:	4a27      	ldr	r2, [pc, #156]	; (8004ce0 <HAL_UART_MspInit+0x144>)
 8004c42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c46:	61d3      	str	r3, [r2, #28]
 8004c48:	4b25      	ldr	r3, [pc, #148]	; (8004ce0 <HAL_UART_MspInit+0x144>)
 8004c4a:	69db      	ldr	r3, [r3, #28]
 8004c4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c50:	613b      	str	r3, [r7, #16]
 8004c52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c54:	4b22      	ldr	r3, [pc, #136]	; (8004ce0 <HAL_UART_MspInit+0x144>)
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	4a21      	ldr	r2, [pc, #132]	; (8004ce0 <HAL_UART_MspInit+0x144>)
 8004c5a:	f043 0310 	orr.w	r3, r3, #16
 8004c5e:	6193      	str	r3, [r2, #24]
 8004c60:	4b1f      	ldr	r3, [pc, #124]	; (8004ce0 <HAL_UART_MspInit+0x144>)
 8004c62:	699b      	ldr	r3, [r3, #24]
 8004c64:	f003 0310 	and.w	r3, r3, #16
 8004c68:	60fb      	str	r3, [r7, #12]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004c6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c72:	2302      	movs	r3, #2
 8004c74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004c76:	2303      	movs	r3, #3
 8004c78:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c7a:	f107 031c 	add.w	r3, r7, #28
 8004c7e:	4619      	mov	r1, r3
 8004c80:	481a      	ldr	r0, [pc, #104]	; (8004cec <HAL_UART_MspInit+0x150>)
 8004c82:	f001 f9ed 	bl	8006060 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004c86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004c8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c90:	2300      	movs	r3, #0
 8004c92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c94:	f107 031c 	add.w	r3, r7, #28
 8004c98:	4619      	mov	r1, r3
 8004c9a:	4814      	ldr	r0, [pc, #80]	; (8004cec <HAL_UART_MspInit+0x150>)
 8004c9c:	f001 f9e0 	bl	8006060 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8004ca0:	4b13      	ldr	r3, [pc, #76]	; (8004cf0 <HAL_UART_MspInit+0x154>)
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004cac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8004cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb8:	f043 0310 	orr.w	r3, r3, #16
 8004cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cbe:	4a0c      	ldr	r2, [pc, #48]	; (8004cf0 <HAL_UART_MspInit+0x154>)
 8004cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc2:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	2100      	movs	r1, #0
 8004cc8:	2027      	movs	r0, #39	; 0x27
 8004cca:	f000 fd1e 	bl	800570a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004cce:	2027      	movs	r0, #39	; 0x27
 8004cd0:	f000 fd37 	bl	8005742 <HAL_NVIC_EnableIRQ>
}
 8004cd4:	bf00      	nop
 8004cd6:	3730      	adds	r7, #48	; 0x30
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	40013800 	.word	0x40013800
 8004ce0:	40021000 	.word	0x40021000
 8004ce4:	40010800 	.word	0x40010800
 8004ce8:	40004800 	.word	0x40004800
 8004cec:	40011000 	.word	0x40011000
 8004cf0:	40010000 	.word	0x40010000

08004cf4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
extern volatile uint8_t bt_flags;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  // UNUSED(huart);
  if (huart == &huart1)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a56      	ldr	r2, [pc, #344]	; (8004e58 <HAL_UART_RxCpltCallback+0x164>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d153      	bne.n	8004dac <HAL_UART_RxCpltCallback+0xb8>
  {
    if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE))
 8004d04:	4b54      	ldr	r3, [pc, #336]	; (8004e58 <HAL_UART_RxCpltCallback+0x164>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0310 	and.w	r3, r3, #16
 8004d0e:	2b10      	cmp	r3, #16
 8004d10:	d103      	bne.n	8004d1a <HAL_UART_RxCpltCallback+0x26>
    {
      HAL_UART_AbortReceive(&huart1);
 8004d12:	4851      	ldr	r0, [pc, #324]	; (8004e58 <HAL_UART_RxCpltCallback+0x164>)
 8004d14:	f003 f875 	bl	8007e02 <HAL_UART_AbortReceive>
 8004d18:	e02a      	b.n	8004d70 <HAL_UART_RxCpltCallback+0x7c>
    }
    else
    {
      if (RxBuffer[1] == 0x9f)
 8004d1a:	4b50      	ldr	r3, [pc, #320]	; (8004e5c <HAL_UART_RxCpltCallback+0x168>)
 8004d1c:	785b      	ldrb	r3, [r3, #1]
 8004d1e:	2b9f      	cmp	r3, #159	; 0x9f
 8004d20:	d110      	bne.n	8004d44 <HAL_UART_RxCpltCallback+0x50>
      {
        motor_flag |= 0x01 << (RxBuffer[0] - 1);
 8004d22:	4b4e      	ldr	r3, [pc, #312]	; (8004e5c <HAL_UART_RxCpltCallback+0x168>)
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	3b01      	subs	r3, #1
 8004d28:	2201      	movs	r2, #1
 8004d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2e:	b25a      	sxtb	r2, r3
 8004d30:	4b4b      	ldr	r3, [pc, #300]	; (8004e60 <HAL_UART_RxCpltCallback+0x16c>)
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	b25b      	sxtb	r3, r3
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	b25b      	sxtb	r3, r3
 8004d3c:	b2da      	uxtb	r2, r3
 8004d3e:	4b48      	ldr	r3, [pc, #288]	; (8004e60 <HAL_UART_RxCpltCallback+0x16c>)
 8004d40:	701a      	strb	r2, [r3, #0]
 8004d42:	e015      	b.n	8004d70 <HAL_UART_RxCpltCallback+0x7c>
      }
      else if (RxBuffer[1] == 0x02)
 8004d44:	4b45      	ldr	r3, [pc, #276]	; (8004e5c <HAL_UART_RxCpltCallback+0x168>)
 8004d46:	785b      	ldrb	r3, [r3, #1]
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d111      	bne.n	8004d70 <HAL_UART_RxCpltCallback+0x7c>
      {
        motor_flag &= ~(0x01 << (RxBuffer[0] - 1));
 8004d4c:	4b43      	ldr	r3, [pc, #268]	; (8004e5c <HAL_UART_RxCpltCallback+0x168>)
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	3b01      	subs	r3, #1
 8004d52:	2201      	movs	r2, #1
 8004d54:	fa02 f303 	lsl.w	r3, r2, r3
 8004d58:	b25b      	sxtb	r3, r3
 8004d5a:	43db      	mvns	r3, r3
 8004d5c:	b25a      	sxtb	r2, r3
 8004d5e:	4b40      	ldr	r3, [pc, #256]	; (8004e60 <HAL_UART_RxCpltCallback+0x16c>)
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	b25b      	sxtb	r3, r3
 8004d66:	4013      	ands	r3, r2
 8004d68:	b25b      	sxtb	r3, r3
 8004d6a:	b2da      	uxtb	r2, r3
 8004d6c:	4b3c      	ldr	r3, [pc, #240]	; (8004e60 <HAL_UART_RxCpltCallback+0x16c>)
 8004d6e:	701a      	strb	r2, [r3, #0]
      }
    }
    memset(RxBuffer, 0, 3);
 8004d70:	2203      	movs	r2, #3
 8004d72:	2100      	movs	r1, #0
 8004d74:	4839      	ldr	r0, [pc, #228]	; (8004e5c <HAL_UART_RxCpltCallback+0x168>)
 8004d76:	f003 fd41 	bl	80087fc <memset>

    while (HAL_UART_Receive_IT(&huart1, (uint8_t *)&RxBuffer, RXBUFFERSIZE) != HAL_OK)
 8004d7a:	e006      	b.n	8004d8a <HAL_UART_RxCpltCallback+0x96>
    {
      __HAL_UNLOCK(&huart1);
 8004d7c:	4b36      	ldr	r3, [pc, #216]	; (8004e58 <HAL_UART_RxCpltCallback+0x164>)
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      HAL_UART_AbortReceive(&huart1);
 8004d84:	4834      	ldr	r0, [pc, #208]	; (8004e58 <HAL_UART_RxCpltCallback+0x164>)
 8004d86:	f003 f83c 	bl	8007e02 <HAL_UART_AbortReceive>
    while (HAL_UART_Receive_IT(&huart1, (uint8_t *)&RxBuffer, RXBUFFERSIZE) != HAL_OK)
 8004d8a:	2203      	movs	r2, #3
 8004d8c:	4933      	ldr	r1, [pc, #204]	; (8004e5c <HAL_UART_RxCpltCallback+0x168>)
 8004d8e:	4832      	ldr	r0, [pc, #200]	; (8004e58 <HAL_UART_RxCpltCallback+0x164>)
 8004d90:	f002 ffe3 	bl	8007d5a <HAL_UART_Receive_IT>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1f0      	bne.n	8004d7c <HAL_UART_RxCpltCallback+0x88>
    }
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8004d9a:	4b2f      	ldr	r3, [pc, #188]	; (8004e58 <HAL_UART_RxCpltCallback+0x164>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	68da      	ldr	r2, [r3, #12]
 8004da0:	4b2d      	ldr	r3, [pc, #180]	; (8004e58 <HAL_UART_RxCpltCallback+0x164>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f042 0210 	orr.w	r2, r2, #16
 8004da8:	60da      	str	r2, [r3, #12]
      break;
    default:
      break;
    }
  }
}
 8004daa:	e050      	b.n	8004e4e <HAL_UART_RxCpltCallback+0x15a>
  else if (huart == &huart3)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a2d      	ldr	r2, [pc, #180]	; (8004e64 <HAL_UART_RxCpltCallback+0x170>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d149      	bne.n	8004e48 <HAL_UART_RxCpltCallback+0x154>
    while (HAL_UART_GetState(&huart3) == HAL_UART_STATE_BUSY_TX)
 8004db4:	bf00      	nop
 8004db6:	482b      	ldr	r0, [pc, #172]	; (8004e64 <HAL_UART_RxCpltCallback+0x170>)
 8004db8:	f003 f96c 	bl	8008094 <HAL_UART_GetState>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b21      	cmp	r3, #33	; 0x21
 8004dc0:	d0f9      	beq.n	8004db6 <HAL_UART_RxCpltCallback+0xc2>
    HAL_UART_Receive_IT(&huart3, (uint8_t *)&rx_buffer, 1);
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	4928      	ldr	r1, [pc, #160]	; (8004e68 <HAL_UART_RxCpltCallback+0x174>)
 8004dc6:	4827      	ldr	r0, [pc, #156]	; (8004e64 <HAL_UART_RxCpltCallback+0x170>)
 8004dc8:	f002 ffc7 	bl	8007d5a <HAL_UART_Receive_IT>
    switch (rx_buffer)
 8004dcc:	4b26      	ldr	r3, [pc, #152]	; (8004e68 <HAL_UART_RxCpltCallback+0x174>)
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	3b62      	subs	r3, #98	; 0x62
 8004dd4:	2b11      	cmp	r3, #17
 8004dd6:	d839      	bhi.n	8004e4c <HAL_UART_RxCpltCallback+0x158>
 8004dd8:	a201      	add	r2, pc, #4	; (adr r2, 8004de0 <HAL_UART_RxCpltCallback+0xec>)
 8004dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dde:	bf00      	nop
 8004de0:	08004e39 	.word	0x08004e39
 8004de4:	08004e29 	.word	0x08004e29
 8004de8:	08004e4d 	.word	0x08004e4d
 8004dec:	08004e41 	.word	0x08004e41
 8004df0:	08004e4d 	.word	0x08004e4d
 8004df4:	08004e4d 	.word	0x08004e4d
 8004df8:	08004e4d 	.word	0x08004e4d
 8004dfc:	08004e4d 	.word	0x08004e4d
 8004e00:	08004e4d 	.word	0x08004e4d
 8004e04:	08004e4d 	.word	0x08004e4d
 8004e08:	08004e4d 	.word	0x08004e4d
 8004e0c:	08004e4d 	.word	0x08004e4d
 8004e10:	08004e4d 	.word	0x08004e4d
 8004e14:	08004e4d 	.word	0x08004e4d
 8004e18:	08004e4d 	.word	0x08004e4d
 8004e1c:	08004e4d 	.word	0x08004e4d
 8004e20:	08004e4d 	.word	0x08004e4d
 8004e24:	08004e31 	.word	0x08004e31
      bt_flags = 1;
 8004e28:	4b10      	ldr	r3, [pc, #64]	; (8004e6c <HAL_UART_RxCpltCallback+0x178>)
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	701a      	strb	r2, [r3, #0]
      break;
 8004e2e:	e00e      	b.n	8004e4e <HAL_UART_RxCpltCallback+0x15a>
      bt_flags = 2;
 8004e30:	4b0e      	ldr	r3, [pc, #56]	; (8004e6c <HAL_UART_RxCpltCallback+0x178>)
 8004e32:	2202      	movs	r2, #2
 8004e34:	701a      	strb	r2, [r3, #0]
      break;
 8004e36:	e00a      	b.n	8004e4e <HAL_UART_RxCpltCallback+0x15a>
      bt_flags = 3;
 8004e38:	4b0c      	ldr	r3, [pc, #48]	; (8004e6c <HAL_UART_RxCpltCallback+0x178>)
 8004e3a:	2203      	movs	r2, #3
 8004e3c:	701a      	strb	r2, [r3, #0]
      break;
 8004e3e:	e006      	b.n	8004e4e <HAL_UART_RxCpltCallback+0x15a>
      bt_flags = 4;
 8004e40:	4b0a      	ldr	r3, [pc, #40]	; (8004e6c <HAL_UART_RxCpltCallback+0x178>)
 8004e42:	2204      	movs	r2, #4
 8004e44:	701a      	strb	r2, [r3, #0]
      break;
 8004e46:	e002      	b.n	8004e4e <HAL_UART_RxCpltCallback+0x15a>
  }
 8004e48:	bf00      	nop
 8004e4a:	e000      	b.n	8004e4e <HAL_UART_RxCpltCallback+0x15a>
      break;
 8004e4c:	bf00      	nop
}
 8004e4e:	bf00      	nop
 8004e50:	3708      	adds	r7, #8
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	200033fc 	.word	0x200033fc
 8004e5c:	2000336c 	.word	0x2000336c
 8004e60:	20003368 	.word	0x20003368
 8004e64:	2000343c 	.word	0x2000343c
 8004e68:	200020cd 	.word	0x200020cd
 8004e6c:	200033f8 	.word	0x200033f8

08004e70 <XPT2046_Calculate_CalibrationFactor>:
}

#endif

static uint8_t XPT2046_Calculate_CalibrationFactor(strType_XPT2046_Coordinate *pDisplayCoordinate, strType_XPT2046_Coordinate *pScreenSample, strType_XPT2046_Calibration *pCalibrationFactor)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b086      	sub	sp, #24
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	607a      	str	r2, [r7, #4]
	uint8_t ucRet = 1;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	75fb      	strb	r3, [r7, #23]

	pCalibrationFactor->Divider = ((pScreenSample[0].x - pScreenSample[2].x) * (pScreenSample[1].y - pScreenSample[2].y)) -
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	881b      	ldrh	r3, [r3, #0]
 8004e84:	461a      	mov	r2, r3
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	3308      	adds	r3, #8
 8004e8a:	881b      	ldrh	r3, [r3, #0]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	68ba      	ldr	r2, [r7, #8]
 8004e90:	3204      	adds	r2, #4
 8004e92:	8852      	ldrh	r2, [r2, #2]
 8004e94:	4611      	mov	r1, r2
 8004e96:	68ba      	ldr	r2, [r7, #8]
 8004e98:	3208      	adds	r2, #8
 8004e9a:	8852      	ldrh	r2, [r2, #2]
 8004e9c:	1a8a      	subs	r2, r1, r2
 8004e9e:	fb03 f202 	mul.w	r2, r3, r2
								  ((pScreenSample[1].x - pScreenSample[2].x) * (pScreenSample[0].y - pScreenSample[2].y));
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	3304      	adds	r3, #4
 8004ea6:	881b      	ldrh	r3, [r3, #0]
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	3308      	adds	r3, #8
 8004eae:	881b      	ldrh	r3, [r3, #0]
 8004eb0:	1acb      	subs	r3, r1, r3
 8004eb2:	68b9      	ldr	r1, [r7, #8]
 8004eb4:	8849      	ldrh	r1, [r1, #2]
 8004eb6:	4608      	mov	r0, r1
 8004eb8:	68b9      	ldr	r1, [r7, #8]
 8004eba:	3108      	adds	r1, #8
 8004ebc:	8849      	ldrh	r1, [r1, #2]
 8004ebe:	1a41      	subs	r1, r0, r1
 8004ec0:	fb01 f303 	mul.w	r3, r1, r3
	pCalibrationFactor->Divider = ((pScreenSample[0].x - pScreenSample[2].x) * (pScreenSample[1].y - pScreenSample[2].y)) -
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f7fb fb00 	bl	80004cc <__aeabi_i2d>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	460b      	mov	r3, r1
 8004ed0:	6879      	ldr	r1, [r7, #4]
 8004ed2:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	if (pCalibrationFactor->Divider == 0)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8004edc:	f04f 0200 	mov.w	r2, #0
 8004ee0:	f04f 0300 	mov.w	r3, #0
 8004ee4:	f7fb fdc4 	bl	8000a70 <__aeabi_dcmpeq>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d002      	beq.n	8004ef4 <XPT2046_Calculate_CalibrationFactor+0x84>
		ucRet = 0;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	75fb      	strb	r3, [r7, #23]
 8004ef2:	e145      	b.n	8005180 <XPT2046_Calculate_CalibrationFactor+0x310>

	else
	{

		pCalibrationFactor->An = ((pDisplayCoordinate[0].x - pDisplayCoordinate[2].x) * (pScreenSample[1].y - pScreenSample[2].y)) -
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	881b      	ldrh	r3, [r3, #0]
 8004ef8:	461a      	mov	r2, r3
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	3308      	adds	r3, #8
 8004efe:	881b      	ldrh	r3, [r3, #0]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	68ba      	ldr	r2, [r7, #8]
 8004f04:	3204      	adds	r2, #4
 8004f06:	8852      	ldrh	r2, [r2, #2]
 8004f08:	4611      	mov	r1, r2
 8004f0a:	68ba      	ldr	r2, [r7, #8]
 8004f0c:	3208      	adds	r2, #8
 8004f0e:	8852      	ldrh	r2, [r2, #2]
 8004f10:	1a8a      	subs	r2, r1, r2
 8004f12:	fb03 f202 	mul.w	r2, r3, r2
								 ((pDisplayCoordinate[1].x - pDisplayCoordinate[2].x) * (pScreenSample[0].y - pScreenSample[2].y));
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	3304      	adds	r3, #4
 8004f1a:	881b      	ldrh	r3, [r3, #0]
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	3308      	adds	r3, #8
 8004f22:	881b      	ldrh	r3, [r3, #0]
 8004f24:	1acb      	subs	r3, r1, r3
 8004f26:	68b9      	ldr	r1, [r7, #8]
 8004f28:	8849      	ldrh	r1, [r1, #2]
 8004f2a:	4608      	mov	r0, r1
 8004f2c:	68b9      	ldr	r1, [r7, #8]
 8004f2e:	3108      	adds	r1, #8
 8004f30:	8849      	ldrh	r1, [r1, #2]
 8004f32:	1a41      	subs	r1, r0, r1
 8004f34:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor->An = ((pDisplayCoordinate[0].x - pDisplayCoordinate[2].x) * (pScreenSample[1].y - pScreenSample[2].y)) -
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f7fb fac6 	bl	80004cc <__aeabi_i2d>
 8004f40:	4602      	mov	r2, r0
 8004f42:	460b      	mov	r3, r1
 8004f44:	6879      	ldr	r1, [r7, #4]
 8004f46:	e9c1 2300 	strd	r2, r3, [r1]

		pCalibrationFactor->Bn = ((pScreenSample[0].x - pScreenSample[2].x) * (pDisplayCoordinate[1].x - pDisplayCoordinate[2].x)) -
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	881b      	ldrh	r3, [r3, #0]
 8004f4e:	461a      	mov	r2, r3
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	3308      	adds	r3, #8
 8004f54:	881b      	ldrh	r3, [r3, #0]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	3204      	adds	r2, #4
 8004f5c:	8812      	ldrh	r2, [r2, #0]
 8004f5e:	4611      	mov	r1, r2
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	3208      	adds	r2, #8
 8004f64:	8812      	ldrh	r2, [r2, #0]
 8004f66:	1a8a      	subs	r2, r1, r2
 8004f68:	fb03 f202 	mul.w	r2, r3, r2
								 ((pDisplayCoordinate[0].x - pDisplayCoordinate[2].x) * (pScreenSample[1].x - pScreenSample[2].x));
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	881b      	ldrh	r3, [r3, #0]
 8004f70:	4619      	mov	r1, r3
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	3308      	adds	r3, #8
 8004f76:	881b      	ldrh	r3, [r3, #0]
 8004f78:	1acb      	subs	r3, r1, r3
 8004f7a:	68b9      	ldr	r1, [r7, #8]
 8004f7c:	3104      	adds	r1, #4
 8004f7e:	8809      	ldrh	r1, [r1, #0]
 8004f80:	4608      	mov	r0, r1
 8004f82:	68b9      	ldr	r1, [r7, #8]
 8004f84:	3108      	adds	r1, #8
 8004f86:	8809      	ldrh	r1, [r1, #0]
 8004f88:	1a41      	subs	r1, r0, r1
 8004f8a:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor->Bn = ((pScreenSample[0].x - pScreenSample[2].x) * (pDisplayCoordinate[1].x - pDisplayCoordinate[2].x)) -
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	4618      	mov	r0, r3
 8004f92:	f7fb fa9b 	bl	80004cc <__aeabi_i2d>
 8004f96:	4602      	mov	r2, r0
 8004f98:	460b      	mov	r3, r1
 8004f9a:	6879      	ldr	r1, [r7, #4]
 8004f9c:	e9c1 2302 	strd	r2, r3, [r1, #8]

		pCalibrationFactor->Cn = (pScreenSample[2].x * pDisplayCoordinate[1].x - pScreenSample[1].x * pDisplayCoordinate[2].x) * pScreenSample[0].y +
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	3308      	adds	r3, #8
 8004fa4:	881b      	ldrh	r3, [r3, #0]
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	3304      	adds	r3, #4
 8004fac:	881b      	ldrh	r3, [r3, #0]
 8004fae:	fb03 f202 	mul.w	r2, r3, r2
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	3304      	adds	r3, #4
 8004fb6:	881b      	ldrh	r3, [r3, #0]
 8004fb8:	4619      	mov	r1, r3
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	3308      	adds	r3, #8
 8004fbe:	881b      	ldrh	r3, [r3, #0]
 8004fc0:	fb01 f303 	mul.w	r3, r1, r3
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	8852      	ldrh	r2, [r2, #2]
 8004fca:	fb03 f202 	mul.w	r2, r3, r2
								 (pScreenSample[0].x * pDisplayCoordinate[2].x - pScreenSample[2].x * pDisplayCoordinate[0].x) * pScreenSample[1].y +
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	881b      	ldrh	r3, [r3, #0]
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	3308      	adds	r3, #8
 8004fd8:	881b      	ldrh	r3, [r3, #0]
 8004fda:	fb03 f101 	mul.w	r1, r3, r1
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	3308      	adds	r3, #8
 8004fe2:	881b      	ldrh	r3, [r3, #0]
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	881b      	ldrh	r3, [r3, #0]
 8004fea:	fb00 f303 	mul.w	r3, r0, r3
 8004fee:	1acb      	subs	r3, r1, r3
 8004ff0:	68b9      	ldr	r1, [r7, #8]
 8004ff2:	3104      	adds	r1, #4
 8004ff4:	8849      	ldrh	r1, [r1, #2]
 8004ff6:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor->Cn = (pScreenSample[2].x * pDisplayCoordinate[1].x - pScreenSample[1].x * pDisplayCoordinate[2].x) * pScreenSample[0].y +
 8004ffa:	441a      	add	r2, r3
								 (pScreenSample[1].x * pDisplayCoordinate[0].x - pScreenSample[0].x * pDisplayCoordinate[1].x) * pScreenSample[2].y;
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	3304      	adds	r3, #4
 8005000:	881b      	ldrh	r3, [r3, #0]
 8005002:	4619      	mov	r1, r3
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	881b      	ldrh	r3, [r3, #0]
 8005008:	fb03 f101 	mul.w	r1, r3, r1
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	881b      	ldrh	r3, [r3, #0]
 8005010:	4618      	mov	r0, r3
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	3304      	adds	r3, #4
 8005016:	881b      	ldrh	r3, [r3, #0]
 8005018:	fb00 f303 	mul.w	r3, r0, r3
 800501c:	1acb      	subs	r3, r1, r3
 800501e:	68b9      	ldr	r1, [r7, #8]
 8005020:	3108      	adds	r1, #8
 8005022:	8849      	ldrh	r1, [r1, #2]
 8005024:	fb01 f303 	mul.w	r3, r1, r3
								 (pScreenSample[0].x * pDisplayCoordinate[2].x - pScreenSample[2].x * pDisplayCoordinate[0].x) * pScreenSample[1].y +
 8005028:	4413      	add	r3, r2
		pCalibrationFactor->Cn = (pScreenSample[2].x * pDisplayCoordinate[1].x - pScreenSample[1].x * pDisplayCoordinate[2].x) * pScreenSample[0].y +
 800502a:	4618      	mov	r0, r3
 800502c:	f7fb fa4e 	bl	80004cc <__aeabi_i2d>
 8005030:	4602      	mov	r2, r0
 8005032:	460b      	mov	r3, r1
 8005034:	6879      	ldr	r1, [r7, #4]
 8005036:	e9c1 2304 	strd	r2, r3, [r1, #16]

		pCalibrationFactor->Dn = ((pDisplayCoordinate[0].y - pDisplayCoordinate[2].y) * (pScreenSample[1].y - pScreenSample[2].y)) -
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	885b      	ldrh	r3, [r3, #2]
 800503e:	461a      	mov	r2, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	3308      	adds	r3, #8
 8005044:	885b      	ldrh	r3, [r3, #2]
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	68ba      	ldr	r2, [r7, #8]
 800504a:	3204      	adds	r2, #4
 800504c:	8852      	ldrh	r2, [r2, #2]
 800504e:	4611      	mov	r1, r2
 8005050:	68ba      	ldr	r2, [r7, #8]
 8005052:	3208      	adds	r2, #8
 8005054:	8852      	ldrh	r2, [r2, #2]
 8005056:	1a8a      	subs	r2, r1, r2
 8005058:	fb03 f202 	mul.w	r2, r3, r2
								 ((pDisplayCoordinate[1].y - pDisplayCoordinate[2].y) * (pScreenSample[0].y - pScreenSample[2].y));
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	3304      	adds	r3, #4
 8005060:	885b      	ldrh	r3, [r3, #2]
 8005062:	4619      	mov	r1, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	3308      	adds	r3, #8
 8005068:	885b      	ldrh	r3, [r3, #2]
 800506a:	1acb      	subs	r3, r1, r3
 800506c:	68b9      	ldr	r1, [r7, #8]
 800506e:	8849      	ldrh	r1, [r1, #2]
 8005070:	4608      	mov	r0, r1
 8005072:	68b9      	ldr	r1, [r7, #8]
 8005074:	3108      	adds	r1, #8
 8005076:	8849      	ldrh	r1, [r1, #2]
 8005078:	1a41      	subs	r1, r0, r1
 800507a:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor->Dn = ((pDisplayCoordinate[0].y - pDisplayCoordinate[2].y) * (pScreenSample[1].y - pScreenSample[2].y)) -
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	4618      	mov	r0, r3
 8005082:	f7fb fa23 	bl	80004cc <__aeabi_i2d>
 8005086:	4602      	mov	r2, r0
 8005088:	460b      	mov	r3, r1
 800508a:	6879      	ldr	r1, [r7, #4]
 800508c:	e9c1 2306 	strd	r2, r3, [r1, #24]

		pCalibrationFactor->En = ((pScreenSample[0].x - pScreenSample[2].x) * (pDisplayCoordinate[1].y - pDisplayCoordinate[2].y)) -
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	881b      	ldrh	r3, [r3, #0]
 8005094:	461a      	mov	r2, r3
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	3308      	adds	r3, #8
 800509a:	881b      	ldrh	r3, [r3, #0]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	3204      	adds	r2, #4
 80050a2:	8852      	ldrh	r2, [r2, #2]
 80050a4:	4611      	mov	r1, r2
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	3208      	adds	r2, #8
 80050aa:	8852      	ldrh	r2, [r2, #2]
 80050ac:	1a8a      	subs	r2, r1, r2
 80050ae:	fb03 f202 	mul.w	r2, r3, r2
								 ((pDisplayCoordinate[0].y - pDisplayCoordinate[2].y) * (pScreenSample[1].x - pScreenSample[2].x));
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	885b      	ldrh	r3, [r3, #2]
 80050b6:	4619      	mov	r1, r3
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	3308      	adds	r3, #8
 80050bc:	885b      	ldrh	r3, [r3, #2]
 80050be:	1acb      	subs	r3, r1, r3
 80050c0:	68b9      	ldr	r1, [r7, #8]
 80050c2:	3104      	adds	r1, #4
 80050c4:	8809      	ldrh	r1, [r1, #0]
 80050c6:	4608      	mov	r0, r1
 80050c8:	68b9      	ldr	r1, [r7, #8]
 80050ca:	3108      	adds	r1, #8
 80050cc:	8809      	ldrh	r1, [r1, #0]
 80050ce:	1a41      	subs	r1, r0, r1
 80050d0:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor->En = ((pScreenSample[0].x - pScreenSample[2].x) * (pDisplayCoordinate[1].y - pDisplayCoordinate[2].y)) -
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7fb f9f8 	bl	80004cc <__aeabi_i2d>
 80050dc:	4602      	mov	r2, r0
 80050de:	460b      	mov	r3, r1
 80050e0:	6879      	ldr	r1, [r7, #4]
 80050e2:	e9c1 2308 	strd	r2, r3, [r1, #32]

		pCalibrationFactor->Fn = (pScreenSample[2].x * pDisplayCoordinate[1].y - pScreenSample[1].x * pDisplayCoordinate[2].y) * pScreenSample[0].y +
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	3308      	adds	r3, #8
 80050ea:	881b      	ldrh	r3, [r3, #0]
 80050ec:	461a      	mov	r2, r3
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	3304      	adds	r3, #4
 80050f2:	885b      	ldrh	r3, [r3, #2]
 80050f4:	fb03 f202 	mul.w	r2, r3, r2
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	3304      	adds	r3, #4
 80050fc:	881b      	ldrh	r3, [r3, #0]
 80050fe:	4619      	mov	r1, r3
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	3308      	adds	r3, #8
 8005104:	885b      	ldrh	r3, [r3, #2]
 8005106:	fb01 f303 	mul.w	r3, r1, r3
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	68ba      	ldr	r2, [r7, #8]
 800510e:	8852      	ldrh	r2, [r2, #2]
 8005110:	fb03 f202 	mul.w	r2, r3, r2
								 (pScreenSample[0].x * pDisplayCoordinate[2].y - pScreenSample[2].x * pDisplayCoordinate[0].y) * pScreenSample[1].y +
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	881b      	ldrh	r3, [r3, #0]
 8005118:	4619      	mov	r1, r3
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	3308      	adds	r3, #8
 800511e:	885b      	ldrh	r3, [r3, #2]
 8005120:	fb03 f101 	mul.w	r1, r3, r1
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	3308      	adds	r3, #8
 8005128:	881b      	ldrh	r3, [r3, #0]
 800512a:	4618      	mov	r0, r3
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	885b      	ldrh	r3, [r3, #2]
 8005130:	fb00 f303 	mul.w	r3, r0, r3
 8005134:	1acb      	subs	r3, r1, r3
 8005136:	68b9      	ldr	r1, [r7, #8]
 8005138:	3104      	adds	r1, #4
 800513a:	8849      	ldrh	r1, [r1, #2]
 800513c:	fb01 f303 	mul.w	r3, r1, r3
		pCalibrationFactor->Fn = (pScreenSample[2].x * pDisplayCoordinate[1].y - pScreenSample[1].x * pDisplayCoordinate[2].y) * pScreenSample[0].y +
 8005140:	441a      	add	r2, r3
								 (pScreenSample[1].x * pDisplayCoordinate[0].y - pScreenSample[0].x * pDisplayCoordinate[1].y) * pScreenSample[2].y;
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	3304      	adds	r3, #4
 8005146:	881b      	ldrh	r3, [r3, #0]
 8005148:	4619      	mov	r1, r3
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	885b      	ldrh	r3, [r3, #2]
 800514e:	fb03 f101 	mul.w	r1, r3, r1
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	881b      	ldrh	r3, [r3, #0]
 8005156:	4618      	mov	r0, r3
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	3304      	adds	r3, #4
 800515c:	885b      	ldrh	r3, [r3, #2]
 800515e:	fb00 f303 	mul.w	r3, r0, r3
 8005162:	1acb      	subs	r3, r1, r3
 8005164:	68b9      	ldr	r1, [r7, #8]
 8005166:	3108      	adds	r1, #8
 8005168:	8849      	ldrh	r1, [r1, #2]
 800516a:	fb01 f303 	mul.w	r3, r1, r3
								 (pScreenSample[0].x * pDisplayCoordinate[2].y - pScreenSample[2].x * pDisplayCoordinate[0].y) * pScreenSample[1].y +
 800516e:	4413      	add	r3, r2
		pCalibrationFactor->Fn = (pScreenSample[2].x * pDisplayCoordinate[1].y - pScreenSample[1].x * pDisplayCoordinate[2].y) * pScreenSample[0].y +
 8005170:	4618      	mov	r0, r3
 8005172:	f7fb f9ab 	bl	80004cc <__aeabi_i2d>
 8005176:	4602      	mov	r2, r0
 8005178:	460b      	mov	r3, r1
 800517a:	6879      	ldr	r1, [r7, #4]
 800517c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	}

	return ucRet;
 8005180:	7dfb      	ldrb	r3, [r7, #23]
}
 8005182:	4618      	mov	r0, r3
 8005184:	3718      	adds	r7, #24
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
	...

0800518c <XPT2046_Touch_Calibrate>:

uint8_t XPT2046_Touch_Calibrate(void)
{
 800518c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005190:	b09e      	sub	sp, #120	; 0x78
 8005192:	af00      	add	r7, sp, #0
	uint8_t i;

	char cStr[10];

	uint16_t usScreenWidth, usScreenHeigth;
	uint16_t usTest_x = 0, usTest_y = 0, usGap_x = 0, usGap_y = 0;
 8005194:	2300      	movs	r3, #0
 8005196:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 800519a:	2300      	movs	r3, #0
 800519c:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 80051a0:	2300      	movs	r3, #0
 80051a2:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 80051a6:	2300      	movs	r3, #0
 80051a8:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70

	char *pStr = 0;
 80051ac:	2300      	movs	r3, #0
 80051ae:	66fb      	str	r3, [r7, #108]	; 0x6c
	strType_XPT2046_Coordinate strCrossCoordinate[4], strScreenSample[4];

	strType_XPT2046_Calibration CalibrationFactor;

#if (macXPT2046_Coordinate_GramScan == 1) || (macXPT2046_Coordinate_GramScan == 4)
	usScreenWidth = LCD_Default_Max_Width;
 80051b0:	23f0      	movs	r3, #240	; 0xf0
 80051b2:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
	usScreenHeigth = LCD_Default_Max_Heigth;
 80051b6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80051ba:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
	usScreenWidth = LCD_Default_Max_Heigth;
	usScreenHeigth = LCD_Default_Max_Width;

#endif

	strCrossCoordinate[0].x = usScreenWidth >> 2;
 80051be:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80051c2:	089b      	lsrs	r3, r3, #2
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	strCrossCoordinate[0].y = usScreenHeigth >> 2;
 80051ca:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80051ce:	089b      	lsrs	r3, r3, #2
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

	strCrossCoordinate[1].x = strCrossCoordinate[0].x;
 80051d6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80051da:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	strCrossCoordinate[1].y = (usScreenHeigth * 3) >> 2;
 80051de:	f8b7 2068 	ldrh.w	r2, [r7, #104]	; 0x68
 80051e2:	4613      	mov	r3, r2
 80051e4:	005b      	lsls	r3, r3, #1
 80051e6:	4413      	add	r3, r2
 80051e8:	109b      	asrs	r3, r3, #2
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

	strCrossCoordinate[2].x = (usScreenWidth * 3) >> 2;
 80051f0:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 80051f4:	4613      	mov	r3, r2
 80051f6:	005b      	lsls	r3, r3, #1
 80051f8:	4413      	add	r3, r2
 80051fa:	109b      	asrs	r3, r3, #2
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	strCrossCoordinate[2].y = strCrossCoordinate[1].y;
 8005202:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005206:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

	strCrossCoordinate[3].x = strCrossCoordinate[2].x;
 800520a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800520e:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	strCrossCoordinate[3].y = strCrossCoordinate[0].y;
 8005212:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005216:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

	LCD_GramScan(1);
 800521a:	2001      	movs	r0, #1
 800521c:	f7fd f8b4 	bl	8002388 <LCD_GramScan>

	// 	while (!XPT2046_ReadAdc_Smooth_XY(&strScreenSample[i]))
	// 		;
	// }

	XPT2046_Calculate_CalibrationFactor(strCrossCoordinate, strScreenSample, &CalibrationFactor);
 8005220:	463a      	mov	r2, r7
 8005222:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8005226:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800522a:	4618      	mov	r0, r3
 800522c:	f7ff fe20 	bl	8004e70 <XPT2046_Calculate_CalibrationFactor>

	// if (CalibrationFactor.Divider == 0)
	// 	goto Failure;

	usTest_x = ((CalibrationFactor.An * strScreenSample[3].x) + (CalibrationFactor.Bn * strScreenSample[3].y) + CalibrationFactor.Cn) / CalibrationFactor.Divider;
 8005230:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005234:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005238:	4618      	mov	r0, r3
 800523a:	f7fb f947 	bl	80004cc <__aeabi_i2d>
 800523e:	4602      	mov	r2, r0
 8005240:	460b      	mov	r3, r1
 8005242:	4620      	mov	r0, r4
 8005244:	4629      	mov	r1, r5
 8005246:	f7fb f9ab 	bl	80005a0 <__aeabi_dmul>
 800524a:	4602      	mov	r2, r0
 800524c:	460b      	mov	r3, r1
 800524e:	4690      	mov	r8, r2
 8005250:	4699      	mov	r9, r3
 8005252:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005256:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800525a:	4618      	mov	r0, r3
 800525c:	f7fb f936 	bl	80004cc <__aeabi_i2d>
 8005260:	4602      	mov	r2, r0
 8005262:	460b      	mov	r3, r1
 8005264:	4620      	mov	r0, r4
 8005266:	4629      	mov	r1, r5
 8005268:	f7fb f99a 	bl	80005a0 <__aeabi_dmul>
 800526c:	4602      	mov	r2, r0
 800526e:	460b      	mov	r3, r1
 8005270:	4640      	mov	r0, r8
 8005272:	4649      	mov	r1, r9
 8005274:	f7fa ffde 	bl	8000234 <__adddf3>
 8005278:	4602      	mov	r2, r0
 800527a:	460b      	mov	r3, r1
 800527c:	4610      	mov	r0, r2
 800527e:	4619      	mov	r1, r3
 8005280:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005284:	f7fa ffd6 	bl	8000234 <__adddf3>
 8005288:	4602      	mov	r2, r0
 800528a:	460b      	mov	r3, r1
 800528c:	4610      	mov	r0, r2
 800528e:	4619      	mov	r1, r3
 8005290:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005294:	f7fb faae 	bl	80007f4 <__aeabi_ddiv>
 8005298:	4602      	mov	r2, r0
 800529a:	460b      	mov	r3, r1
 800529c:	4610      	mov	r0, r2
 800529e:	4619      	mov	r1, r3
 80052a0:	f7fb fc18 	bl	8000ad4 <__aeabi_d2uiz>
 80052a4:	4603      	mov	r3, r0
 80052a6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	usTest_y = ((CalibrationFactor.Dn * strScreenSample[3].x) + (CalibrationFactor.En * strScreenSample[3].y) + CalibrationFactor.Fn) / CalibrationFactor.Divider;
 80052aa:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80052ae:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7fb f90a 	bl	80004cc <__aeabi_i2d>
 80052b8:	4602      	mov	r2, r0
 80052ba:	460b      	mov	r3, r1
 80052bc:	4620      	mov	r0, r4
 80052be:	4629      	mov	r1, r5
 80052c0:	f7fb f96e 	bl	80005a0 <__aeabi_dmul>
 80052c4:	4602      	mov	r2, r0
 80052c6:	460b      	mov	r3, r1
 80052c8:	4690      	mov	r8, r2
 80052ca:	4699      	mov	r9, r3
 80052cc:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80052d0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80052d4:	4618      	mov	r0, r3
 80052d6:	f7fb f8f9 	bl	80004cc <__aeabi_i2d>
 80052da:	4602      	mov	r2, r0
 80052dc:	460b      	mov	r3, r1
 80052de:	4620      	mov	r0, r4
 80052e0:	4629      	mov	r1, r5
 80052e2:	f7fb f95d 	bl	80005a0 <__aeabi_dmul>
 80052e6:	4602      	mov	r2, r0
 80052e8:	460b      	mov	r3, r1
 80052ea:	4640      	mov	r0, r8
 80052ec:	4649      	mov	r1, r9
 80052ee:	f7fa ffa1 	bl	8000234 <__adddf3>
 80052f2:	4602      	mov	r2, r0
 80052f4:	460b      	mov	r3, r1
 80052f6:	4610      	mov	r0, r2
 80052f8:	4619      	mov	r1, r3
 80052fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80052fe:	f7fa ff99 	bl	8000234 <__adddf3>
 8005302:	4602      	mov	r2, r0
 8005304:	460b      	mov	r3, r1
 8005306:	4610      	mov	r0, r2
 8005308:	4619      	mov	r1, r3
 800530a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800530e:	f7fb fa71 	bl	80007f4 <__aeabi_ddiv>
 8005312:	4602      	mov	r2, r0
 8005314:	460b      	mov	r3, r1
 8005316:	4610      	mov	r0, r2
 8005318:	4619      	mov	r1, r3
 800531a:	f7fb fbdb 	bl	8000ad4 <__aeabi_d2uiz>
 800531e:	4603      	mov	r3, r0
 8005320:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74

	usGap_x = (usTest_x > strCrossCoordinate[3].x) ? (usTest_x - strCrossCoordinate[3].x) : (strCrossCoordinate[3].x - usTest_x);
 8005324:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8005328:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800532c:	429a      	cmp	r2, r3
 800532e:	d906      	bls.n	800533e <XPT2046_Touch_Calibrate+0x1b2>
 8005330:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8005334:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	b29b      	uxth	r3, r3
 800533c:	e005      	b.n	800534a <XPT2046_Touch_Calibrate+0x1be>
 800533e:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 8005342:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	b29b      	uxth	r3, r3
 800534a:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
	usGap_y = (usTest_y > strCrossCoordinate[3].y) ? (usTest_y - strCrossCoordinate[3].y) : (strCrossCoordinate[3].y - usTest_y);
 800534e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8005352:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8005356:	429a      	cmp	r2, r3
 8005358:	d906      	bls.n	8005368 <XPT2046_Touch_Calibrate+0x1dc>
 800535a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800535e:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	b29b      	uxth	r3, r3
 8005366:	e005      	b.n	8005374 <XPT2046_Touch_Calibrate+0x1e8>
 8005368:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 800536c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	b29b      	uxth	r3, r3
 8005374:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70

	// if ((usGap_x > 10) || (usGap_y > 10))
		// goto Failure;

	strXPT2046_TouchPara.dX_X = (CalibrationFactor.An * 1.0) / CalibrationFactor.Divider;
 8005378:	e9d7 0100 	ldrd	r0, r1, [r7]
 800537c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005380:	f7fb fa38 	bl	80007f4 <__aeabi_ddiv>
 8005384:	4602      	mov	r2, r0
 8005386:	460b      	mov	r3, r1
 8005388:	491f      	ldr	r1, [pc, #124]	; (8005408 <XPT2046_Touch_Calibrate+0x27c>)
 800538a:	e9c1 2300 	strd	r2, r3, [r1]
	strXPT2046_TouchPara.dX_Y = (CalibrationFactor.Bn * 1.0) / CalibrationFactor.Divider;
 800538e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005392:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005396:	f7fb fa2d 	bl	80007f4 <__aeabi_ddiv>
 800539a:	4602      	mov	r2, r0
 800539c:	460b      	mov	r3, r1
 800539e:	491a      	ldr	r1, [pc, #104]	; (8005408 <XPT2046_Touch_Calibrate+0x27c>)
 80053a0:	e9c1 2302 	strd	r2, r3, [r1, #8]
	strXPT2046_TouchPara.dX = (CalibrationFactor.Cn * 1.0) / CalibrationFactor.Divider;
 80053a4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80053a8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80053ac:	f7fb fa22 	bl	80007f4 <__aeabi_ddiv>
 80053b0:	4602      	mov	r2, r0
 80053b2:	460b      	mov	r3, r1
 80053b4:	4914      	ldr	r1, [pc, #80]	; (8005408 <XPT2046_Touch_Calibrate+0x27c>)
 80053b6:	e9c1 2304 	strd	r2, r3, [r1, #16]

	strXPT2046_TouchPara.dY_X = (CalibrationFactor.Dn * 1.0) / CalibrationFactor.Divider;
 80053ba:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80053be:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80053c2:	f7fb fa17 	bl	80007f4 <__aeabi_ddiv>
 80053c6:	4602      	mov	r2, r0
 80053c8:	460b      	mov	r3, r1
 80053ca:	490f      	ldr	r1, [pc, #60]	; (8005408 <XPT2046_Touch_Calibrate+0x27c>)
 80053cc:	e9c1 2306 	strd	r2, r3, [r1, #24]
	strXPT2046_TouchPara.dY_Y = (CalibrationFactor.En * 1.0) / CalibrationFactor.Divider;
 80053d0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80053d4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80053d8:	f7fb fa0c 	bl	80007f4 <__aeabi_ddiv>
 80053dc:	4602      	mov	r2, r0
 80053de:	460b      	mov	r3, r1
 80053e0:	4909      	ldr	r1, [pc, #36]	; (8005408 <XPT2046_Touch_Calibrate+0x27c>)
 80053e2:	e9c1 2308 	strd	r2, r3, [r1, #32]
	strXPT2046_TouchPara.dY = (CalibrationFactor.Fn * 1.0) / CalibrationFactor.Divider;
 80053e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80053ea:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80053ee:	f7fb fa01 	bl	80007f4 <__aeabi_ddiv>
 80053f2:	4602      	mov	r2, r0
 80053f4:	460b      	mov	r3, r1
 80053f6:	4904      	ldr	r1, [pc, #16]	; (8005408 <XPT2046_Touch_Calibrate+0x27c>)
 80053f8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	// pStr = "Calibrate Succed";
	// LCD_DrawString_Color((usScreenWidth - strlen(pStr) * WIDTH_EN_CHAR) >> 1, usScreenHeigth >> 1, pStr, BACKGROUND, RED);

	// XPT2046_DelayUS(200000);

	return 1;
 80053fc:	2301      	movs	r3, #1
	LCD_DrawString_Color((usScreenWidth - strlen(pStr) * WIDTH_EN_CHAR) >> 1, (usScreenHeigth >> 1) + HEIGHT_EN_CHAR, pStr, BACKGROUND, RED);

	XPT2046_DelayUS(1000000);

	return 0;
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3778      	adds	r7, #120	; 0x78
 8005402:	46bd      	mov	sp, r7
 8005404:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005408:	200001b0 	.word	0x200001b0

0800540c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800540c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800540e:	e003      	b.n	8005418 <LoopCopyDataInit>

08005410 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005410:	4b0b      	ldr	r3, [pc, #44]	; (8005440 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8005412:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005414:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8005416:	3104      	adds	r1, #4

08005418 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005418:	480a      	ldr	r0, [pc, #40]	; (8005444 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800541a:	4b0b      	ldr	r3, [pc, #44]	; (8005448 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800541c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800541e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005420:	d3f6      	bcc.n	8005410 <CopyDataInit>
  ldr r2, =_sbss
 8005422:	4a0a      	ldr	r2, [pc, #40]	; (800544c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8005424:	e002      	b.n	800542c <LoopFillZerobss>

08005426 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8005426:	2300      	movs	r3, #0
  str r3, [r2], #4
 8005428:	f842 3b04 	str.w	r3, [r2], #4

0800542c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800542c:	4b08      	ldr	r3, [pc, #32]	; (8005450 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800542e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005430:	d3f9      	bcc.n	8005426 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005432:	f7ff fa2f 	bl	8004894 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005436:	f003 f9bd 	bl	80087b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800543a:	f7fd fadd 	bl	80029f8 <main>
  bx lr
 800543e:	4770      	bx	lr
  ldr r3, =_sidata
 8005440:	08009cf4 	.word	0x08009cf4
  ldr r0, =_sdata
 8005444:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005448:	2000024c 	.word	0x2000024c
  ldr r2, =_sbss
 800544c:	2000024c 	.word	0x2000024c
  ldr r3, = _ebss
 8005450:	20003494 	.word	0x20003494

08005454 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005454:	e7fe      	b.n	8005454 <ADC1_2_IRQHandler>
	...

08005458 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800545c:	4b08      	ldr	r3, [pc, #32]	; (8005480 <HAL_Init+0x28>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a07      	ldr	r2, [pc, #28]	; (8005480 <HAL_Init+0x28>)
 8005462:	f043 0310 	orr.w	r3, r3, #16
 8005466:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005468:	2003      	movs	r0, #3
 800546a:	f000 f943 	bl	80056f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800546e:	2000      	movs	r0, #0
 8005470:	f000 f808 	bl	8005484 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005474:	f7ff f84c 	bl	8004510 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	40022000 	.word	0x40022000

08005484 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b082      	sub	sp, #8
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800548c:	4b12      	ldr	r3, [pc, #72]	; (80054d8 <HAL_InitTick+0x54>)
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	4b12      	ldr	r3, [pc, #72]	; (80054dc <HAL_InitTick+0x58>)
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	4619      	mov	r1, r3
 8005496:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800549a:	fbb3 f3f1 	udiv	r3, r3, r1
 800549e:	fbb2 f3f3 	udiv	r3, r2, r3
 80054a2:	4618      	mov	r0, r3
 80054a4:	f000 f95b 	bl	800575e <HAL_SYSTICK_Config>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d001      	beq.n	80054b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e00e      	b.n	80054d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2b0f      	cmp	r3, #15
 80054b6:	d80a      	bhi.n	80054ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80054b8:	2200      	movs	r2, #0
 80054ba:	6879      	ldr	r1, [r7, #4]
 80054bc:	f04f 30ff 	mov.w	r0, #4294967295
 80054c0:	f000 f923 	bl	800570a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80054c4:	4a06      	ldr	r2, [pc, #24]	; (80054e0 <HAL_InitTick+0x5c>)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80054ca:	2300      	movs	r3, #0
 80054cc:	e000      	b.n	80054d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3708      	adds	r7, #8
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	200001a8 	.word	0x200001a8
 80054dc:	200001e4 	.word	0x200001e4
 80054e0:	200001e0 	.word	0x200001e0

080054e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80054e4:	b480      	push	{r7}
 80054e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80054e8:	4b05      	ldr	r3, [pc, #20]	; (8005500 <HAL_IncTick+0x1c>)
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	461a      	mov	r2, r3
 80054ee:	4b05      	ldr	r3, [pc, #20]	; (8005504 <HAL_IncTick+0x20>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4413      	add	r3, r2
 80054f4:	4a03      	ldr	r2, [pc, #12]	; (8005504 <HAL_IncTick+0x20>)
 80054f6:	6013      	str	r3, [r2, #0]
}
 80054f8:	bf00      	nop
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bc80      	pop	{r7}
 80054fe:	4770      	bx	lr
 8005500:	200001e4 	.word	0x200001e4
 8005504:	20003480 	.word	0x20003480

08005508 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005508:	b480      	push	{r7}
 800550a:	af00      	add	r7, sp, #0
  return uwTick;
 800550c:	4b02      	ldr	r3, [pc, #8]	; (8005518 <HAL_GetTick+0x10>)
 800550e:	681b      	ldr	r3, [r3, #0]
}
 8005510:	4618      	mov	r0, r3
 8005512:	46bd      	mov	sp, r7
 8005514:	bc80      	pop	{r7}
 8005516:	4770      	bx	lr
 8005518:	20003480 	.word	0x20003480

0800551c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005524:	f7ff fff0 	bl	8005508 <HAL_GetTick>
 8005528:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005534:	d005      	beq.n	8005542 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005536:	4b0a      	ldr	r3, [pc, #40]	; (8005560 <HAL_Delay+0x44>)
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	461a      	mov	r2, r3
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	4413      	add	r3, r2
 8005540:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005542:	bf00      	nop
 8005544:	f7ff ffe0 	bl	8005508 <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	429a      	cmp	r2, r3
 8005552:	d8f7      	bhi.n	8005544 <HAL_Delay+0x28>
  {
  }
}
 8005554:	bf00      	nop
 8005556:	bf00      	nop
 8005558:	3710      	adds	r7, #16
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
 800555e:	bf00      	nop
 8005560:	200001e4 	.word	0x200001e4

08005564 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005564:	b480      	push	{r7}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f003 0307 	and.w	r3, r3, #7
 8005572:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005574:	4b0c      	ldr	r3, [pc, #48]	; (80055a8 <NVIC_SetPriorityGrouping+0x44>)
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800557a:	68ba      	ldr	r2, [r7, #8]
 800557c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005580:	4013      	ands	r3, r2
 8005582:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800558c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005594:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005596:	4a04      	ldr	r2, [pc, #16]	; (80055a8 <NVIC_SetPriorityGrouping+0x44>)
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	60d3      	str	r3, [r2, #12]
}
 800559c:	bf00      	nop
 800559e:	3714      	adds	r7, #20
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bc80      	pop	{r7}
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop
 80055a8:	e000ed00 	.word	0xe000ed00

080055ac <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80055ac:	b480      	push	{r7}
 80055ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80055b0:	4b04      	ldr	r3, [pc, #16]	; (80055c4 <NVIC_GetPriorityGrouping+0x18>)
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	0a1b      	lsrs	r3, r3, #8
 80055b6:	f003 0307 	and.w	r3, r3, #7
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	46bd      	mov	sp, r7
 80055be:	bc80      	pop	{r7}
 80055c0:	4770      	bx	lr
 80055c2:	bf00      	nop
 80055c4:	e000ed00 	.word	0xe000ed00

080055c8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	4603      	mov	r3, r0
 80055d0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80055d2:	79fb      	ldrb	r3, [r7, #7]
 80055d4:	f003 021f 	and.w	r2, r3, #31
 80055d8:	4906      	ldr	r1, [pc, #24]	; (80055f4 <NVIC_EnableIRQ+0x2c>)
 80055da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055de:	095b      	lsrs	r3, r3, #5
 80055e0:	2001      	movs	r0, #1
 80055e2:	fa00 f202 	lsl.w	r2, r0, r2
 80055e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80055ea:	bf00      	nop
 80055ec:	370c      	adds	r7, #12
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bc80      	pop	{r7}
 80055f2:	4770      	bx	lr
 80055f4:	e000e100 	.word	0xe000e100

080055f8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	4603      	mov	r3, r0
 8005600:	6039      	str	r1, [r7, #0]
 8005602:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8005604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005608:	2b00      	cmp	r3, #0
 800560a:	da0b      	bge.n	8005624 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	b2da      	uxtb	r2, r3
 8005610:	490c      	ldr	r1, [pc, #48]	; (8005644 <NVIC_SetPriority+0x4c>)
 8005612:	79fb      	ldrb	r3, [r7, #7]
 8005614:	f003 030f 	and.w	r3, r3, #15
 8005618:	3b04      	subs	r3, #4
 800561a:	0112      	lsls	r2, r2, #4
 800561c:	b2d2      	uxtb	r2, r2
 800561e:	440b      	add	r3, r1
 8005620:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005622:	e009      	b.n	8005638 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	b2da      	uxtb	r2, r3
 8005628:	4907      	ldr	r1, [pc, #28]	; (8005648 <NVIC_SetPriority+0x50>)
 800562a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800562e:	0112      	lsls	r2, r2, #4
 8005630:	b2d2      	uxtb	r2, r2
 8005632:	440b      	add	r3, r1
 8005634:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005638:	bf00      	nop
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	bc80      	pop	{r7}
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	e000ed00 	.word	0xe000ed00
 8005648:	e000e100 	.word	0xe000e100

0800564c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800564c:	b480      	push	{r7}
 800564e:	b089      	sub	sp, #36	; 0x24
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f003 0307 	and.w	r3, r3, #7
 800565e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	f1c3 0307 	rsb	r3, r3, #7
 8005666:	2b04      	cmp	r3, #4
 8005668:	bf28      	it	cs
 800566a:	2304      	movcs	r3, #4
 800566c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	3304      	adds	r3, #4
 8005672:	2b06      	cmp	r3, #6
 8005674:	d902      	bls.n	800567c <NVIC_EncodePriority+0x30>
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	3b03      	subs	r3, #3
 800567a:	e000      	b.n	800567e <NVIC_EncodePriority+0x32>
 800567c:	2300      	movs	r3, #0
 800567e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005680:	f04f 32ff 	mov.w	r2, #4294967295
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	fa02 f303 	lsl.w	r3, r2, r3
 800568a:	43da      	mvns	r2, r3
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	401a      	ands	r2, r3
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005694:	f04f 31ff 	mov.w	r1, #4294967295
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	fa01 f303 	lsl.w	r3, r1, r3
 800569e:	43d9      	mvns	r1, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056a4:	4313      	orrs	r3, r2
         );
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3724      	adds	r7, #36	; 0x24
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bc80      	pop	{r7}
 80056ae:	4770      	bx	lr

080056b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b082      	sub	sp, #8
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	3b01      	subs	r3, #1
 80056bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80056c0:	d301      	bcc.n	80056c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80056c2:	2301      	movs	r3, #1
 80056c4:	e00f      	b.n	80056e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80056c6:	4a0a      	ldr	r2, [pc, #40]	; (80056f0 <SysTick_Config+0x40>)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	3b01      	subs	r3, #1
 80056cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80056ce:	210f      	movs	r1, #15
 80056d0:	f04f 30ff 	mov.w	r0, #4294967295
 80056d4:	f7ff ff90 	bl	80055f8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80056d8:	4b05      	ldr	r3, [pc, #20]	; (80056f0 <SysTick_Config+0x40>)
 80056da:	2200      	movs	r2, #0
 80056dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80056de:	4b04      	ldr	r3, [pc, #16]	; (80056f0 <SysTick_Config+0x40>)
 80056e0:	2207      	movs	r2, #7
 80056e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3708      	adds	r7, #8
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	e000e010 	.word	0xe000e010

080056f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b082      	sub	sp, #8
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f7ff ff31 	bl	8005564 <NVIC_SetPriorityGrouping>
}
 8005702:	bf00      	nop
 8005704:	3708      	adds	r7, #8
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}

0800570a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800570a:	b580      	push	{r7, lr}
 800570c:	b086      	sub	sp, #24
 800570e:	af00      	add	r7, sp, #0
 8005710:	4603      	mov	r3, r0
 8005712:	60b9      	str	r1, [r7, #8]
 8005714:	607a      	str	r2, [r7, #4]
 8005716:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005718:	2300      	movs	r3, #0
 800571a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800571c:	f7ff ff46 	bl	80055ac <NVIC_GetPriorityGrouping>
 8005720:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	68b9      	ldr	r1, [r7, #8]
 8005726:	6978      	ldr	r0, [r7, #20]
 8005728:	f7ff ff90 	bl	800564c <NVIC_EncodePriority>
 800572c:	4602      	mov	r2, r0
 800572e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005732:	4611      	mov	r1, r2
 8005734:	4618      	mov	r0, r3
 8005736:	f7ff ff5f 	bl	80055f8 <NVIC_SetPriority>
}
 800573a:	bf00      	nop
 800573c:	3718      	adds	r7, #24
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}

08005742 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005742:	b580      	push	{r7, lr}
 8005744:	b082      	sub	sp, #8
 8005746:	af00      	add	r7, sp, #0
 8005748:	4603      	mov	r3, r0
 800574a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800574c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005750:	4618      	mov	r0, r3
 8005752:	f7ff ff39 	bl	80055c8 <NVIC_EnableIRQ>
}
 8005756:	bf00      	nop
 8005758:	3708      	adds	r7, #8
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800575e:	b580      	push	{r7, lr}
 8005760:	b082      	sub	sp, #8
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f7ff ffa2 	bl	80056b0 <SysTick_Config>
 800576c:	4603      	mov	r3, r0
}
 800576e:	4618      	mov	r0, r3
 8005770:	3708      	adds	r7, #8
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
	...

08005778 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005778:	b480      	push	{r7}
 800577a:	b085      	sub	sp, #20
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005780:	2300      	movs	r3, #0
 8005782:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d101      	bne.n	800578e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e059      	b.n	8005842 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (STM32F101xE) || defined (STM32F101xG) || defined (STM32F103xE) || defined (STM32F103xG) || defined (STM32F100xE) || defined (STM32F105xC) || defined (STM32F107xC)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	461a      	mov	r2, r3
 8005794:	4b2d      	ldr	r3, [pc, #180]	; (800584c <HAL_DMA_Init+0xd4>)
 8005796:	429a      	cmp	r2, r3
 8005798:	d80f      	bhi.n	80057ba <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	461a      	mov	r2, r3
 80057a0:	4b2b      	ldr	r3, [pc, #172]	; (8005850 <HAL_DMA_Init+0xd8>)
 80057a2:	4413      	add	r3, r2
 80057a4:	4a2b      	ldr	r2, [pc, #172]	; (8005854 <HAL_DMA_Init+0xdc>)
 80057a6:	fba2 2303 	umull	r2, r3, r2, r3
 80057aa:	091b      	lsrs	r3, r3, #4
 80057ac:	009a      	lsls	r2, r3, #2
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a28      	ldr	r2, [pc, #160]	; (8005858 <HAL_DMA_Init+0xe0>)
 80057b6:	63da      	str	r2, [r3, #60]	; 0x3c
 80057b8:	e00e      	b.n	80057d8 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	461a      	mov	r2, r3
 80057c0:	4b26      	ldr	r3, [pc, #152]	; (800585c <HAL_DMA_Init+0xe4>)
 80057c2:	4413      	add	r3, r2
 80057c4:	4a23      	ldr	r2, [pc, #140]	; (8005854 <HAL_DMA_Init+0xdc>)
 80057c6:	fba2 2303 	umull	r2, r3, r2, r3
 80057ca:	091b      	lsrs	r3, r3, #4
 80057cc:	009a      	lsls	r2, r3, #2
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a22      	ldr	r2, [pc, #136]	; (8005860 <HAL_DMA_Init+0xe8>)
 80057d6:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG || STM32F100xE || STM32F105xC || STM32F107xC */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2202      	movs	r2, #2
 80057dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80057ee:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80057f2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80057fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005808:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	695b      	ldr	r3, [r3, #20]
 800580e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005814:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	69db      	ldr	r3, [r3, #28]
 800581a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	4313      	orrs	r3, r2
 8005820:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3714      	adds	r7, #20
 8005846:	46bd      	mov	sp, r7
 8005848:	bc80      	pop	{r7}
 800584a:	4770      	bx	lr
 800584c:	40020407 	.word	0x40020407
 8005850:	bffdfff8 	.word	0xbffdfff8
 8005854:	cccccccd 	.word	0xcccccccd
 8005858:	40020000 	.word	0x40020000
 800585c:	bffdfbf8 	.word	0xbffdfbf8
 8005860:	40020400 	.word	0x40020400

08005864 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b086      	sub	sp, #24
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	607a      	str	r2, [r7, #4]
 8005870:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005872:	2300      	movs	r3, #0
 8005874:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f893 3020 	ldrb.w	r3, [r3, #32]
 800587c:	2b01      	cmp	r3, #1
 800587e:	d101      	bne.n	8005884 <HAL_DMA_Start_IT+0x20>
 8005880:	2302      	movs	r3, #2
 8005882:	e04a      	b.n	800591a <HAL_DMA_Start_IT+0xb6>
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005892:	2b01      	cmp	r3, #1
 8005894:	d13a      	bne.n	800590c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2202      	movs	r2, #2
 800589a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2200      	movs	r2, #0
 80058a2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f022 0201 	bic.w	r2, r2, #1
 80058b2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	68b9      	ldr	r1, [r7, #8]
 80058ba:	68f8      	ldr	r0, [r7, #12]
 80058bc:	f000 fba2 	bl	8006004 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d008      	beq.n	80058da <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f042 020e 	orr.w	r2, r2, #14
 80058d6:	601a      	str	r2, [r3, #0]
 80058d8:	e00f      	b.n	80058fa <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f022 0204 	bic.w	r2, r2, #4
 80058e8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f042 020a 	orr.w	r2, r2, #10
 80058f8:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f042 0201 	orr.w	r2, r2, #1
 8005908:	601a      	str	r2, [r3, #0]
 800590a:	e005      	b.n	8005918 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2200      	movs	r2, #0
 8005910:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8005914:	2302      	movs	r3, #2
 8005916:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8005918:	7dfb      	ldrb	r3, [r7, #23]
}
 800591a:	4618      	mov	r0, r3
 800591c:	3718      	adds	r7, #24
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}

08005922 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005922:	b480      	push	{r7}
 8005924:	b085      	sub	sp, #20
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800592a:	2300      	movs	r3, #0
 800592c:	73fb      	strb	r3, [r7, #15]

  /* Disable DMA IT */
  __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f022 020e 	bic.w	r2, r2, #14
 800593c:	601a      	str	r2, [r3, #0]
    
  /* Disable the channel */
  __HAL_DMA_DISABLE(hdma);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f022 0201 	bic.w	r2, r2, #1
 800594c:	601a      	str	r2, [r3, #0]
    
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005956:	2101      	movs	r1, #1
 8005958:	fa01 f202 	lsl.w	r2, r1, r2
 800595c:	605a      	str	r2, [r3, #4]

  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2201      	movs	r2, #1
 8005962:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800596e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005970:	4618      	mov	r0, r3
 8005972:	3714      	adds	r7, #20
 8005974:	46bd      	mov	sp, r7
 8005976:	bc80      	pop	{r7}
 8005978:	4770      	bx	lr
	...

0800597c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005984:	2300      	movs	r3, #0
 8005986:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800598e:	2b02      	cmp	r3, #2
 8005990:	d005      	beq.n	800599e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2204      	movs	r2, #4
 8005996:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	73fb      	strb	r3, [r7, #15]
 800599c:	e0d6      	b.n	8005b4c <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f022 020e 	bic.w	r2, r2, #14
 80059ac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f022 0201 	bic.w	r2, r2, #1
 80059bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	461a      	mov	r2, r3
 80059c4:	4b64      	ldr	r3, [pc, #400]	; (8005b58 <HAL_DMA_Abort_IT+0x1dc>)
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d958      	bls.n	8005a7c <HAL_DMA_Abort_IT+0x100>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a63      	ldr	r2, [pc, #396]	; (8005b5c <HAL_DMA_Abort_IT+0x1e0>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d04f      	beq.n	8005a74 <HAL_DMA_Abort_IT+0xf8>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a61      	ldr	r2, [pc, #388]	; (8005b60 <HAL_DMA_Abort_IT+0x1e4>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d048      	beq.n	8005a70 <HAL_DMA_Abort_IT+0xf4>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a60      	ldr	r2, [pc, #384]	; (8005b64 <HAL_DMA_Abort_IT+0x1e8>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d040      	beq.n	8005a6a <HAL_DMA_Abort_IT+0xee>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a5e      	ldr	r2, [pc, #376]	; (8005b68 <HAL_DMA_Abort_IT+0x1ec>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d038      	beq.n	8005a64 <HAL_DMA_Abort_IT+0xe8>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a5d      	ldr	r2, [pc, #372]	; (8005b6c <HAL_DMA_Abort_IT+0x1f0>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d030      	beq.n	8005a5e <HAL_DMA_Abort_IT+0xe2>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a5b      	ldr	r2, [pc, #364]	; (8005b70 <HAL_DMA_Abort_IT+0x1f4>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d028      	beq.n	8005a58 <HAL_DMA_Abort_IT+0xdc>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a53      	ldr	r2, [pc, #332]	; (8005b58 <HAL_DMA_Abort_IT+0x1dc>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d020      	beq.n	8005a52 <HAL_DMA_Abort_IT+0xd6>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a57      	ldr	r2, [pc, #348]	; (8005b74 <HAL_DMA_Abort_IT+0x1f8>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d019      	beq.n	8005a4e <HAL_DMA_Abort_IT+0xd2>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a56      	ldr	r2, [pc, #344]	; (8005b78 <HAL_DMA_Abort_IT+0x1fc>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d012      	beq.n	8005a4a <HAL_DMA_Abort_IT+0xce>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a54      	ldr	r2, [pc, #336]	; (8005b7c <HAL_DMA_Abort_IT+0x200>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d00a      	beq.n	8005a44 <HAL_DMA_Abort_IT+0xc8>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a53      	ldr	r2, [pc, #332]	; (8005b80 <HAL_DMA_Abort_IT+0x204>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d102      	bne.n	8005a3e <HAL_DMA_Abort_IT+0xc2>
 8005a38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a3c:	e01b      	b.n	8005a76 <HAL_DMA_Abort_IT+0xfa>
 8005a3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005a42:	e018      	b.n	8005a76 <HAL_DMA_Abort_IT+0xfa>
 8005a44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a48:	e015      	b.n	8005a76 <HAL_DMA_Abort_IT+0xfa>
 8005a4a:	2310      	movs	r3, #16
 8005a4c:	e013      	b.n	8005a76 <HAL_DMA_Abort_IT+0xfa>
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e011      	b.n	8005a76 <HAL_DMA_Abort_IT+0xfa>
 8005a52:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a56:	e00e      	b.n	8005a76 <HAL_DMA_Abort_IT+0xfa>
 8005a58:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005a5c:	e00b      	b.n	8005a76 <HAL_DMA_Abort_IT+0xfa>
 8005a5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005a62:	e008      	b.n	8005a76 <HAL_DMA_Abort_IT+0xfa>
 8005a64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a68:	e005      	b.n	8005a76 <HAL_DMA_Abort_IT+0xfa>
 8005a6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a6e:	e002      	b.n	8005a76 <HAL_DMA_Abort_IT+0xfa>
 8005a70:	2310      	movs	r3, #16
 8005a72:	e000      	b.n	8005a76 <HAL_DMA_Abort_IT+0xfa>
 8005a74:	2301      	movs	r3, #1
 8005a76:	4a43      	ldr	r2, [pc, #268]	; (8005b84 <HAL_DMA_Abort_IT+0x208>)
 8005a78:	6053      	str	r3, [r2, #4]
 8005a7a:	e057      	b.n	8005b2c <HAL_DMA_Abort_IT+0x1b0>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a36      	ldr	r2, [pc, #216]	; (8005b5c <HAL_DMA_Abort_IT+0x1e0>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d04f      	beq.n	8005b26 <HAL_DMA_Abort_IT+0x1aa>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a35      	ldr	r2, [pc, #212]	; (8005b60 <HAL_DMA_Abort_IT+0x1e4>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d048      	beq.n	8005b22 <HAL_DMA_Abort_IT+0x1a6>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a33      	ldr	r2, [pc, #204]	; (8005b64 <HAL_DMA_Abort_IT+0x1e8>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d040      	beq.n	8005b1c <HAL_DMA_Abort_IT+0x1a0>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a32      	ldr	r2, [pc, #200]	; (8005b68 <HAL_DMA_Abort_IT+0x1ec>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d038      	beq.n	8005b16 <HAL_DMA_Abort_IT+0x19a>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a30      	ldr	r2, [pc, #192]	; (8005b6c <HAL_DMA_Abort_IT+0x1f0>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d030      	beq.n	8005b10 <HAL_DMA_Abort_IT+0x194>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a2f      	ldr	r2, [pc, #188]	; (8005b70 <HAL_DMA_Abort_IT+0x1f4>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d028      	beq.n	8005b0a <HAL_DMA_Abort_IT+0x18e>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a26      	ldr	r2, [pc, #152]	; (8005b58 <HAL_DMA_Abort_IT+0x1dc>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d020      	beq.n	8005b04 <HAL_DMA_Abort_IT+0x188>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a2b      	ldr	r2, [pc, #172]	; (8005b74 <HAL_DMA_Abort_IT+0x1f8>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d019      	beq.n	8005b00 <HAL_DMA_Abort_IT+0x184>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a29      	ldr	r2, [pc, #164]	; (8005b78 <HAL_DMA_Abort_IT+0x1fc>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d012      	beq.n	8005afc <HAL_DMA_Abort_IT+0x180>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a28      	ldr	r2, [pc, #160]	; (8005b7c <HAL_DMA_Abort_IT+0x200>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d00a      	beq.n	8005af6 <HAL_DMA_Abort_IT+0x17a>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a26      	ldr	r2, [pc, #152]	; (8005b80 <HAL_DMA_Abort_IT+0x204>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d102      	bne.n	8005af0 <HAL_DMA_Abort_IT+0x174>
 8005aea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005aee:	e01b      	b.n	8005b28 <HAL_DMA_Abort_IT+0x1ac>
 8005af0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005af4:	e018      	b.n	8005b28 <HAL_DMA_Abort_IT+0x1ac>
 8005af6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005afa:	e015      	b.n	8005b28 <HAL_DMA_Abort_IT+0x1ac>
 8005afc:	2310      	movs	r3, #16
 8005afe:	e013      	b.n	8005b28 <HAL_DMA_Abort_IT+0x1ac>
 8005b00:	2301      	movs	r3, #1
 8005b02:	e011      	b.n	8005b28 <HAL_DMA_Abort_IT+0x1ac>
 8005b04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b08:	e00e      	b.n	8005b28 <HAL_DMA_Abort_IT+0x1ac>
 8005b0a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005b0e:	e00b      	b.n	8005b28 <HAL_DMA_Abort_IT+0x1ac>
 8005b10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005b14:	e008      	b.n	8005b28 <HAL_DMA_Abort_IT+0x1ac>
 8005b16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b1a:	e005      	b.n	8005b28 <HAL_DMA_Abort_IT+0x1ac>
 8005b1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b20:	e002      	b.n	8005b28 <HAL_DMA_Abort_IT+0x1ac>
 8005b22:	2310      	movs	r3, #16
 8005b24:	e000      	b.n	8005b28 <HAL_DMA_Abort_IT+0x1ac>
 8005b26:	2301      	movs	r3, #1
 8005b28:	4a17      	ldr	r2, [pc, #92]	; (8005b88 <HAL_DMA_Abort_IT+0x20c>)
 8005b2a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d003      	beq.n	8005b4c <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	4798      	blx	r3
    } 
  }
  return status;
 8005b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3710      	adds	r7, #16
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	40020080 	.word	0x40020080
 8005b5c:	40020008 	.word	0x40020008
 8005b60:	4002001c 	.word	0x4002001c
 8005b64:	40020030 	.word	0x40020030
 8005b68:	40020044 	.word	0x40020044
 8005b6c:	40020058 	.word	0x40020058
 8005b70:	4002006c 	.word	0x4002006c
 8005b74:	40020408 	.word	0x40020408
 8005b78:	4002041c 	.word	0x4002041c
 8005b7c:	40020430 	.word	0x40020430
 8005b80:	40020444 	.word	0x40020444
 8005b84:	40020400 	.word	0x40020400
 8005b88:	40020000 	.word	0x40020000

08005b8c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba8:	2204      	movs	r2, #4
 8005baa:	409a      	lsls	r2, r3
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	4013      	ands	r3, r2
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	f000 80f1 	beq.w	8005d98 <HAL_DMA_IRQHandler+0x20c>
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	f003 0304 	and.w	r3, r3, #4
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	f000 80eb 	beq.w	8005d98 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 0320 	and.w	r3, r3, #32
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d107      	bne.n	8005be0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f022 0204 	bic.w	r2, r2, #4
 8005bde:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	461a      	mov	r2, r3
 8005be6:	4b5f      	ldr	r3, [pc, #380]	; (8005d64 <HAL_DMA_IRQHandler+0x1d8>)
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d958      	bls.n	8005c9e <HAL_DMA_IRQHandler+0x112>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a5d      	ldr	r2, [pc, #372]	; (8005d68 <HAL_DMA_IRQHandler+0x1dc>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d04f      	beq.n	8005c96 <HAL_DMA_IRQHandler+0x10a>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a5c      	ldr	r2, [pc, #368]	; (8005d6c <HAL_DMA_IRQHandler+0x1e0>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d048      	beq.n	8005c92 <HAL_DMA_IRQHandler+0x106>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a5a      	ldr	r2, [pc, #360]	; (8005d70 <HAL_DMA_IRQHandler+0x1e4>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d040      	beq.n	8005c8c <HAL_DMA_IRQHandler+0x100>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a59      	ldr	r2, [pc, #356]	; (8005d74 <HAL_DMA_IRQHandler+0x1e8>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d038      	beq.n	8005c86 <HAL_DMA_IRQHandler+0xfa>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a57      	ldr	r2, [pc, #348]	; (8005d78 <HAL_DMA_IRQHandler+0x1ec>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d030      	beq.n	8005c80 <HAL_DMA_IRQHandler+0xf4>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a56      	ldr	r2, [pc, #344]	; (8005d7c <HAL_DMA_IRQHandler+0x1f0>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d028      	beq.n	8005c7a <HAL_DMA_IRQHandler+0xee>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a4d      	ldr	r2, [pc, #308]	; (8005d64 <HAL_DMA_IRQHandler+0x1d8>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d020      	beq.n	8005c74 <HAL_DMA_IRQHandler+0xe8>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a52      	ldr	r2, [pc, #328]	; (8005d80 <HAL_DMA_IRQHandler+0x1f4>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d019      	beq.n	8005c70 <HAL_DMA_IRQHandler+0xe4>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a50      	ldr	r2, [pc, #320]	; (8005d84 <HAL_DMA_IRQHandler+0x1f8>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d012      	beq.n	8005c6c <HAL_DMA_IRQHandler+0xe0>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a4f      	ldr	r2, [pc, #316]	; (8005d88 <HAL_DMA_IRQHandler+0x1fc>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d00a      	beq.n	8005c66 <HAL_DMA_IRQHandler+0xda>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a4d      	ldr	r2, [pc, #308]	; (8005d8c <HAL_DMA_IRQHandler+0x200>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d102      	bne.n	8005c60 <HAL_DMA_IRQHandler+0xd4>
 8005c5a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005c5e:	e01b      	b.n	8005c98 <HAL_DMA_IRQHandler+0x10c>
 8005c60:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005c64:	e018      	b.n	8005c98 <HAL_DMA_IRQHandler+0x10c>
 8005c66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c6a:	e015      	b.n	8005c98 <HAL_DMA_IRQHandler+0x10c>
 8005c6c:	2340      	movs	r3, #64	; 0x40
 8005c6e:	e013      	b.n	8005c98 <HAL_DMA_IRQHandler+0x10c>
 8005c70:	2304      	movs	r3, #4
 8005c72:	e011      	b.n	8005c98 <HAL_DMA_IRQHandler+0x10c>
 8005c74:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005c78:	e00e      	b.n	8005c98 <HAL_DMA_IRQHandler+0x10c>
 8005c7a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005c7e:	e00b      	b.n	8005c98 <HAL_DMA_IRQHandler+0x10c>
 8005c80:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005c84:	e008      	b.n	8005c98 <HAL_DMA_IRQHandler+0x10c>
 8005c86:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005c8a:	e005      	b.n	8005c98 <HAL_DMA_IRQHandler+0x10c>
 8005c8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c90:	e002      	b.n	8005c98 <HAL_DMA_IRQHandler+0x10c>
 8005c92:	2340      	movs	r3, #64	; 0x40
 8005c94:	e000      	b.n	8005c98 <HAL_DMA_IRQHandler+0x10c>
 8005c96:	2304      	movs	r3, #4
 8005c98:	4a3d      	ldr	r2, [pc, #244]	; (8005d90 <HAL_DMA_IRQHandler+0x204>)
 8005c9a:	6053      	str	r3, [r2, #4]
 8005c9c:	e057      	b.n	8005d4e <HAL_DMA_IRQHandler+0x1c2>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a31      	ldr	r2, [pc, #196]	; (8005d68 <HAL_DMA_IRQHandler+0x1dc>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d04f      	beq.n	8005d48 <HAL_DMA_IRQHandler+0x1bc>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a2f      	ldr	r2, [pc, #188]	; (8005d6c <HAL_DMA_IRQHandler+0x1e0>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d048      	beq.n	8005d44 <HAL_DMA_IRQHandler+0x1b8>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a2e      	ldr	r2, [pc, #184]	; (8005d70 <HAL_DMA_IRQHandler+0x1e4>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d040      	beq.n	8005d3e <HAL_DMA_IRQHandler+0x1b2>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a2c      	ldr	r2, [pc, #176]	; (8005d74 <HAL_DMA_IRQHandler+0x1e8>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d038      	beq.n	8005d38 <HAL_DMA_IRQHandler+0x1ac>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a2b      	ldr	r2, [pc, #172]	; (8005d78 <HAL_DMA_IRQHandler+0x1ec>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d030      	beq.n	8005d32 <HAL_DMA_IRQHandler+0x1a6>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a29      	ldr	r2, [pc, #164]	; (8005d7c <HAL_DMA_IRQHandler+0x1f0>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d028      	beq.n	8005d2c <HAL_DMA_IRQHandler+0x1a0>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a21      	ldr	r2, [pc, #132]	; (8005d64 <HAL_DMA_IRQHandler+0x1d8>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d020      	beq.n	8005d26 <HAL_DMA_IRQHandler+0x19a>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a25      	ldr	r2, [pc, #148]	; (8005d80 <HAL_DMA_IRQHandler+0x1f4>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d019      	beq.n	8005d22 <HAL_DMA_IRQHandler+0x196>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a24      	ldr	r2, [pc, #144]	; (8005d84 <HAL_DMA_IRQHandler+0x1f8>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d012      	beq.n	8005d1e <HAL_DMA_IRQHandler+0x192>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a22      	ldr	r2, [pc, #136]	; (8005d88 <HAL_DMA_IRQHandler+0x1fc>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d00a      	beq.n	8005d18 <HAL_DMA_IRQHandler+0x18c>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a21      	ldr	r2, [pc, #132]	; (8005d8c <HAL_DMA_IRQHandler+0x200>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d102      	bne.n	8005d12 <HAL_DMA_IRQHandler+0x186>
 8005d0c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005d10:	e01b      	b.n	8005d4a <HAL_DMA_IRQHandler+0x1be>
 8005d12:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005d16:	e018      	b.n	8005d4a <HAL_DMA_IRQHandler+0x1be>
 8005d18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d1c:	e015      	b.n	8005d4a <HAL_DMA_IRQHandler+0x1be>
 8005d1e:	2340      	movs	r3, #64	; 0x40
 8005d20:	e013      	b.n	8005d4a <HAL_DMA_IRQHandler+0x1be>
 8005d22:	2304      	movs	r3, #4
 8005d24:	e011      	b.n	8005d4a <HAL_DMA_IRQHandler+0x1be>
 8005d26:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005d2a:	e00e      	b.n	8005d4a <HAL_DMA_IRQHandler+0x1be>
 8005d2c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005d30:	e00b      	b.n	8005d4a <HAL_DMA_IRQHandler+0x1be>
 8005d32:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005d36:	e008      	b.n	8005d4a <HAL_DMA_IRQHandler+0x1be>
 8005d38:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005d3c:	e005      	b.n	8005d4a <HAL_DMA_IRQHandler+0x1be>
 8005d3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d42:	e002      	b.n	8005d4a <HAL_DMA_IRQHandler+0x1be>
 8005d44:	2340      	movs	r3, #64	; 0x40
 8005d46:	e000      	b.n	8005d4a <HAL_DMA_IRQHandler+0x1be>
 8005d48:	2304      	movs	r3, #4
 8005d4a:	4a12      	ldr	r2, [pc, #72]	; (8005d94 <HAL_DMA_IRQHandler+0x208>)
 8005d4c:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	f000 8136 	beq.w	8005fc4 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8005d60:	e130      	b.n	8005fc4 <HAL_DMA_IRQHandler+0x438>
 8005d62:	bf00      	nop
 8005d64:	40020080 	.word	0x40020080
 8005d68:	40020008 	.word	0x40020008
 8005d6c:	4002001c 	.word	0x4002001c
 8005d70:	40020030 	.word	0x40020030
 8005d74:	40020044 	.word	0x40020044
 8005d78:	40020058 	.word	0x40020058
 8005d7c:	4002006c 	.word	0x4002006c
 8005d80:	40020408 	.word	0x40020408
 8005d84:	4002041c 	.word	0x4002041c
 8005d88:	40020430 	.word	0x40020430
 8005d8c:	40020444 	.word	0x40020444
 8005d90:	40020400 	.word	0x40020400
 8005d94:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9c:	2202      	movs	r2, #2
 8005d9e:	409a      	lsls	r2, r3
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	4013      	ands	r3, r2
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	f000 80dd 	beq.w	8005f64 <HAL_DMA_IRQHandler+0x3d8>
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	f003 0302 	and.w	r3, r3, #2
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	f000 80d7 	beq.w	8005f64 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 0320 	and.w	r3, r3, #32
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d10b      	bne.n	8005ddc <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f022 020a 	bic.w	r2, r2, #10
 8005dd2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	461a      	mov	r2, r3
 8005de2:	4b7b      	ldr	r3, [pc, #492]	; (8005fd0 <HAL_DMA_IRQHandler+0x444>)
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d958      	bls.n	8005e9a <HAL_DMA_IRQHandler+0x30e>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a79      	ldr	r2, [pc, #484]	; (8005fd4 <HAL_DMA_IRQHandler+0x448>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d04f      	beq.n	8005e92 <HAL_DMA_IRQHandler+0x306>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a78      	ldr	r2, [pc, #480]	; (8005fd8 <HAL_DMA_IRQHandler+0x44c>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d048      	beq.n	8005e8e <HAL_DMA_IRQHandler+0x302>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a76      	ldr	r2, [pc, #472]	; (8005fdc <HAL_DMA_IRQHandler+0x450>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d040      	beq.n	8005e88 <HAL_DMA_IRQHandler+0x2fc>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a75      	ldr	r2, [pc, #468]	; (8005fe0 <HAL_DMA_IRQHandler+0x454>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d038      	beq.n	8005e82 <HAL_DMA_IRQHandler+0x2f6>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a73      	ldr	r2, [pc, #460]	; (8005fe4 <HAL_DMA_IRQHandler+0x458>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d030      	beq.n	8005e7c <HAL_DMA_IRQHandler+0x2f0>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a72      	ldr	r2, [pc, #456]	; (8005fe8 <HAL_DMA_IRQHandler+0x45c>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d028      	beq.n	8005e76 <HAL_DMA_IRQHandler+0x2ea>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a69      	ldr	r2, [pc, #420]	; (8005fd0 <HAL_DMA_IRQHandler+0x444>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d020      	beq.n	8005e70 <HAL_DMA_IRQHandler+0x2e4>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a6e      	ldr	r2, [pc, #440]	; (8005fec <HAL_DMA_IRQHandler+0x460>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d019      	beq.n	8005e6c <HAL_DMA_IRQHandler+0x2e0>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a6c      	ldr	r2, [pc, #432]	; (8005ff0 <HAL_DMA_IRQHandler+0x464>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d012      	beq.n	8005e68 <HAL_DMA_IRQHandler+0x2dc>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a6b      	ldr	r2, [pc, #428]	; (8005ff4 <HAL_DMA_IRQHandler+0x468>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d00a      	beq.n	8005e62 <HAL_DMA_IRQHandler+0x2d6>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a69      	ldr	r2, [pc, #420]	; (8005ff8 <HAL_DMA_IRQHandler+0x46c>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d102      	bne.n	8005e5c <HAL_DMA_IRQHandler+0x2d0>
 8005e56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005e5a:	e01b      	b.n	8005e94 <HAL_DMA_IRQHandler+0x308>
 8005e5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e60:	e018      	b.n	8005e94 <HAL_DMA_IRQHandler+0x308>
 8005e62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e66:	e015      	b.n	8005e94 <HAL_DMA_IRQHandler+0x308>
 8005e68:	2320      	movs	r3, #32
 8005e6a:	e013      	b.n	8005e94 <HAL_DMA_IRQHandler+0x308>
 8005e6c:	2302      	movs	r3, #2
 8005e6e:	e011      	b.n	8005e94 <HAL_DMA_IRQHandler+0x308>
 8005e70:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e74:	e00e      	b.n	8005e94 <HAL_DMA_IRQHandler+0x308>
 8005e76:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005e7a:	e00b      	b.n	8005e94 <HAL_DMA_IRQHandler+0x308>
 8005e7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e80:	e008      	b.n	8005e94 <HAL_DMA_IRQHandler+0x308>
 8005e82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005e86:	e005      	b.n	8005e94 <HAL_DMA_IRQHandler+0x308>
 8005e88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e8c:	e002      	b.n	8005e94 <HAL_DMA_IRQHandler+0x308>
 8005e8e:	2320      	movs	r3, #32
 8005e90:	e000      	b.n	8005e94 <HAL_DMA_IRQHandler+0x308>
 8005e92:	2302      	movs	r3, #2
 8005e94:	4a59      	ldr	r2, [pc, #356]	; (8005ffc <HAL_DMA_IRQHandler+0x470>)
 8005e96:	6053      	str	r3, [r2, #4]
 8005e98:	e057      	b.n	8005f4a <HAL_DMA_IRQHandler+0x3be>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a4d      	ldr	r2, [pc, #308]	; (8005fd4 <HAL_DMA_IRQHandler+0x448>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d04f      	beq.n	8005f44 <HAL_DMA_IRQHandler+0x3b8>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a4b      	ldr	r2, [pc, #300]	; (8005fd8 <HAL_DMA_IRQHandler+0x44c>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d048      	beq.n	8005f40 <HAL_DMA_IRQHandler+0x3b4>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a4a      	ldr	r2, [pc, #296]	; (8005fdc <HAL_DMA_IRQHandler+0x450>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d040      	beq.n	8005f3a <HAL_DMA_IRQHandler+0x3ae>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a48      	ldr	r2, [pc, #288]	; (8005fe0 <HAL_DMA_IRQHandler+0x454>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d038      	beq.n	8005f34 <HAL_DMA_IRQHandler+0x3a8>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a47      	ldr	r2, [pc, #284]	; (8005fe4 <HAL_DMA_IRQHandler+0x458>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d030      	beq.n	8005f2e <HAL_DMA_IRQHandler+0x3a2>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a45      	ldr	r2, [pc, #276]	; (8005fe8 <HAL_DMA_IRQHandler+0x45c>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d028      	beq.n	8005f28 <HAL_DMA_IRQHandler+0x39c>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a3d      	ldr	r2, [pc, #244]	; (8005fd0 <HAL_DMA_IRQHandler+0x444>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d020      	beq.n	8005f22 <HAL_DMA_IRQHandler+0x396>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a41      	ldr	r2, [pc, #260]	; (8005fec <HAL_DMA_IRQHandler+0x460>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d019      	beq.n	8005f1e <HAL_DMA_IRQHandler+0x392>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a40      	ldr	r2, [pc, #256]	; (8005ff0 <HAL_DMA_IRQHandler+0x464>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d012      	beq.n	8005f1a <HAL_DMA_IRQHandler+0x38e>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a3e      	ldr	r2, [pc, #248]	; (8005ff4 <HAL_DMA_IRQHandler+0x468>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d00a      	beq.n	8005f14 <HAL_DMA_IRQHandler+0x388>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a3d      	ldr	r2, [pc, #244]	; (8005ff8 <HAL_DMA_IRQHandler+0x46c>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d102      	bne.n	8005f0e <HAL_DMA_IRQHandler+0x382>
 8005f08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005f0c:	e01b      	b.n	8005f46 <HAL_DMA_IRQHandler+0x3ba>
 8005f0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f12:	e018      	b.n	8005f46 <HAL_DMA_IRQHandler+0x3ba>
 8005f14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f18:	e015      	b.n	8005f46 <HAL_DMA_IRQHandler+0x3ba>
 8005f1a:	2320      	movs	r3, #32
 8005f1c:	e013      	b.n	8005f46 <HAL_DMA_IRQHandler+0x3ba>
 8005f1e:	2302      	movs	r3, #2
 8005f20:	e011      	b.n	8005f46 <HAL_DMA_IRQHandler+0x3ba>
 8005f22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f26:	e00e      	b.n	8005f46 <HAL_DMA_IRQHandler+0x3ba>
 8005f28:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005f2c:	e00b      	b.n	8005f46 <HAL_DMA_IRQHandler+0x3ba>
 8005f2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f32:	e008      	b.n	8005f46 <HAL_DMA_IRQHandler+0x3ba>
 8005f34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005f38:	e005      	b.n	8005f46 <HAL_DMA_IRQHandler+0x3ba>
 8005f3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f3e:	e002      	b.n	8005f46 <HAL_DMA_IRQHandler+0x3ba>
 8005f40:	2320      	movs	r3, #32
 8005f42:	e000      	b.n	8005f46 <HAL_DMA_IRQHandler+0x3ba>
 8005f44:	2302      	movs	r3, #2
 8005f46:	4a2e      	ldr	r2, [pc, #184]	; (8006000 <HAL_DMA_IRQHandler+0x474>)
 8005f48:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d034      	beq.n	8005fc4 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005f62:	e02f      	b.n	8005fc4 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f68:	2208      	movs	r2, #8
 8005f6a:	409a      	lsls	r2, r3
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	4013      	ands	r3, r2
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d028      	beq.n	8005fc6 <HAL_DMA_IRQHandler+0x43a>
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	f003 0308 	and.w	r3, r3, #8
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d023      	beq.n	8005fc6 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f022 020e 	bic.w	r2, r2, #14
 8005f8c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f96:	2101      	movs	r1, #1
 8005f98:	fa01 f202 	lsl.w	r2, r1, r2
 8005f9c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d004      	beq.n	8005fc6 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	4798      	blx	r3
    }
  }
  return;
 8005fc4:	bf00      	nop
 8005fc6:	bf00      	nop
}
 8005fc8:	3710      	adds	r7, #16
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	40020080 	.word	0x40020080
 8005fd4:	40020008 	.word	0x40020008
 8005fd8:	4002001c 	.word	0x4002001c
 8005fdc:	40020030 	.word	0x40020030
 8005fe0:	40020044 	.word	0x40020044
 8005fe4:	40020058 	.word	0x40020058
 8005fe8:	4002006c 	.word	0x4002006c
 8005fec:	40020408 	.word	0x40020408
 8005ff0:	4002041c 	.word	0x4002041c
 8005ff4:	40020430 	.word	0x40020430
 8005ff8:	40020444 	.word	0x40020444
 8005ffc:	40020400 	.word	0x40020400
 8006000:	40020000 	.word	0x40020000

08006004 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	607a      	str	r2, [r7, #4]
 8006010:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800601a:	2101      	movs	r1, #1
 800601c:	fa01 f202 	lsl.w	r2, r1, r2
 8006020:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	683a      	ldr	r2, [r7, #0]
 8006028:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	2b10      	cmp	r3, #16
 8006030:	d108      	bne.n	8006044 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68ba      	ldr	r2, [r7, #8]
 8006040:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006042:	e007      	b.n	8006054 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68ba      	ldr	r2, [r7, #8]
 800604a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	60da      	str	r2, [r3, #12]
}
 8006054:	bf00      	nop
 8006056:	3714      	adds	r7, #20
 8006058:	46bd      	mov	sp, r7
 800605a:	bc80      	pop	{r7}
 800605c:	4770      	bx	lr
	...

08006060 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006060:	b480      	push	{r7}
 8006062:	b08b      	sub	sp, #44	; 0x2c
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800606a:	2300      	movs	r3, #0
 800606c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 800606e:	2300      	movs	r3, #0
 8006070:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8006072:	2300      	movs	r3, #0
 8006074:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8006076:	2300      	movs	r3, #0
 8006078:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 800607a:	2300      	movs	r3, #0
 800607c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800607e:	2300      	movs	r3, #0
 8006080:	627b      	str	r3, [r7, #36]	; 0x24
 8006082:	e179      	b.n	8006378 <HAL_GPIO_Init+0x318>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8006084:	2201      	movs	r2, #1
 8006086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006088:	fa02 f303 	lsl.w	r3, r2, r3
 800608c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	69fa      	ldr	r2, [r7, #28]
 8006094:	4013      	ands	r3, r2
 8006096:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006098:	69ba      	ldr	r2, [r7, #24]
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	429a      	cmp	r2, r3
 800609e:	f040 8168 	bne.w	8006372 <HAL_GPIO_Init+0x312>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	4a96      	ldr	r2, [pc, #600]	; (8006300 <HAL_GPIO_Init+0x2a0>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d05e      	beq.n	800616a <HAL_GPIO_Init+0x10a>
 80060ac:	4a94      	ldr	r2, [pc, #592]	; (8006300 <HAL_GPIO_Init+0x2a0>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d875      	bhi.n	800619e <HAL_GPIO_Init+0x13e>
 80060b2:	4a94      	ldr	r2, [pc, #592]	; (8006304 <HAL_GPIO_Init+0x2a4>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d058      	beq.n	800616a <HAL_GPIO_Init+0x10a>
 80060b8:	4a92      	ldr	r2, [pc, #584]	; (8006304 <HAL_GPIO_Init+0x2a4>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d86f      	bhi.n	800619e <HAL_GPIO_Init+0x13e>
 80060be:	4a92      	ldr	r2, [pc, #584]	; (8006308 <HAL_GPIO_Init+0x2a8>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d052      	beq.n	800616a <HAL_GPIO_Init+0x10a>
 80060c4:	4a90      	ldr	r2, [pc, #576]	; (8006308 <HAL_GPIO_Init+0x2a8>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d869      	bhi.n	800619e <HAL_GPIO_Init+0x13e>
 80060ca:	4a90      	ldr	r2, [pc, #576]	; (800630c <HAL_GPIO_Init+0x2ac>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d04c      	beq.n	800616a <HAL_GPIO_Init+0x10a>
 80060d0:	4a8e      	ldr	r2, [pc, #568]	; (800630c <HAL_GPIO_Init+0x2ac>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d863      	bhi.n	800619e <HAL_GPIO_Init+0x13e>
 80060d6:	4a8e      	ldr	r2, [pc, #568]	; (8006310 <HAL_GPIO_Init+0x2b0>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d046      	beq.n	800616a <HAL_GPIO_Init+0x10a>
 80060dc:	4a8c      	ldr	r2, [pc, #560]	; (8006310 <HAL_GPIO_Init+0x2b0>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d85d      	bhi.n	800619e <HAL_GPIO_Init+0x13e>
 80060e2:	2b12      	cmp	r3, #18
 80060e4:	d82a      	bhi.n	800613c <HAL_GPIO_Init+0xdc>
 80060e6:	2b12      	cmp	r3, #18
 80060e8:	d859      	bhi.n	800619e <HAL_GPIO_Init+0x13e>
 80060ea:	a201      	add	r2, pc, #4	; (adr r2, 80060f0 <HAL_GPIO_Init+0x90>)
 80060ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f0:	0800616b 	.word	0x0800616b
 80060f4:	08006145 	.word	0x08006145
 80060f8:	08006157 	.word	0x08006157
 80060fc:	08006199 	.word	0x08006199
 8006100:	0800619f 	.word	0x0800619f
 8006104:	0800619f 	.word	0x0800619f
 8006108:	0800619f 	.word	0x0800619f
 800610c:	0800619f 	.word	0x0800619f
 8006110:	0800619f 	.word	0x0800619f
 8006114:	0800619f 	.word	0x0800619f
 8006118:	0800619f 	.word	0x0800619f
 800611c:	0800619f 	.word	0x0800619f
 8006120:	0800619f 	.word	0x0800619f
 8006124:	0800619f 	.word	0x0800619f
 8006128:	0800619f 	.word	0x0800619f
 800612c:	0800619f 	.word	0x0800619f
 8006130:	0800619f 	.word	0x0800619f
 8006134:	0800614d 	.word	0x0800614d
 8006138:	08006161 	.word	0x08006161
 800613c:	4a75      	ldr	r2, [pc, #468]	; (8006314 <HAL_GPIO_Init+0x2b4>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d013      	beq.n	800616a <HAL_GPIO_Init+0x10a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006142:	e02c      	b.n	800619e <HAL_GPIO_Init+0x13e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	623b      	str	r3, [r7, #32]
          break;
 800614a:	e029      	b.n	80061a0 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	3304      	adds	r3, #4
 8006152:	623b      	str	r3, [r7, #32]
          break;
 8006154:	e024      	b.n	80061a0 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	3308      	adds	r3, #8
 800615c:	623b      	str	r3, [r7, #32]
          break;
 800615e:	e01f      	b.n	80061a0 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	330c      	adds	r3, #12
 8006166:	623b      	str	r3, [r7, #32]
          break;
 8006168:	e01a      	b.n	80061a0 <HAL_GPIO_Init+0x140>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d102      	bne.n	8006178 <HAL_GPIO_Init+0x118>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006172:	2304      	movs	r3, #4
 8006174:	623b      	str	r3, [r7, #32]
          break;
 8006176:	e013      	b.n	80061a0 <HAL_GPIO_Init+0x140>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	2b01      	cmp	r3, #1
 800617e:	d105      	bne.n	800618c <HAL_GPIO_Init+0x12c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006180:	2308      	movs	r3, #8
 8006182:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	69fa      	ldr	r2, [r7, #28]
 8006188:	611a      	str	r2, [r3, #16]
          break;
 800618a:	e009      	b.n	80061a0 <HAL_GPIO_Init+0x140>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800618c:	2308      	movs	r3, #8
 800618e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	69fa      	ldr	r2, [r7, #28]
 8006194:	615a      	str	r2, [r3, #20]
          break;
 8006196:	e003      	b.n	80061a0 <HAL_GPIO_Init+0x140>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006198:	2300      	movs	r3, #0
 800619a:	623b      	str	r3, [r7, #32]
          break;
 800619c:	e000      	b.n	80061a0 <HAL_GPIO_Init+0x140>
          break;
 800619e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80061a0:	69bb      	ldr	r3, [r7, #24]
 80061a2:	2bff      	cmp	r3, #255	; 0xff
 80061a4:	d801      	bhi.n	80061aa <HAL_GPIO_Init+0x14a>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	e001      	b.n	80061ae <HAL_GPIO_Init+0x14e>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	3304      	adds	r3, #4
 80061ae:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80061b0:	69bb      	ldr	r3, [r7, #24]
 80061b2:	2bff      	cmp	r3, #255	; 0xff
 80061b4:	d802      	bhi.n	80061bc <HAL_GPIO_Init+0x15c>
 80061b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	e002      	b.n	80061c2 <HAL_GPIO_Init+0x162>
 80061bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061be:	3b08      	subs	r3, #8
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	210f      	movs	r1, #15
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	fa01 f303 	lsl.w	r3, r1, r3
 80061d0:	43db      	mvns	r3, r3
 80061d2:	401a      	ands	r2, r3
 80061d4:	6a39      	ldr	r1, [r7, #32]
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	fa01 f303 	lsl.w	r3, r1, r3
 80061dc:	431a      	orrs	r2, r3
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	f000 80c1 	beq.w	8006372 <HAL_GPIO_Init+0x312>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80061f0:	4b49      	ldr	r3, [pc, #292]	; (8006318 <HAL_GPIO_Init+0x2b8>)
 80061f2:	699b      	ldr	r3, [r3, #24]
 80061f4:	4a48      	ldr	r2, [pc, #288]	; (8006318 <HAL_GPIO_Init+0x2b8>)
 80061f6:	f043 0301 	orr.w	r3, r3, #1
 80061fa:	6193      	str	r3, [r2, #24]
 80061fc:	4b46      	ldr	r3, [pc, #280]	; (8006318 <HAL_GPIO_Init+0x2b8>)
 80061fe:	699b      	ldr	r3, [r3, #24]
 8006200:	f003 0301 	and.w	r3, r3, #1
 8006204:	60bb      	str	r3, [r7, #8]
 8006206:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8006208:	4a44      	ldr	r2, [pc, #272]	; (800631c <HAL_GPIO_Init+0x2bc>)
 800620a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620c:	089b      	lsrs	r3, r3, #2
 800620e:	3302      	adds	r3, #2
 8006210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006214:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8006216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006218:	f003 0303 	and.w	r3, r3, #3
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	220f      	movs	r2, #15
 8006220:	fa02 f303 	lsl.w	r3, r2, r3
 8006224:	43db      	mvns	r3, r3
 8006226:	697a      	ldr	r2, [r7, #20]
 8006228:	4013      	ands	r3, r2
 800622a:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4a3c      	ldr	r2, [pc, #240]	; (8006320 <HAL_GPIO_Init+0x2c0>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d01f      	beq.n	8006274 <HAL_GPIO_Init+0x214>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a3b      	ldr	r2, [pc, #236]	; (8006324 <HAL_GPIO_Init+0x2c4>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d019      	beq.n	8006270 <HAL_GPIO_Init+0x210>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a3a      	ldr	r2, [pc, #232]	; (8006328 <HAL_GPIO_Init+0x2c8>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d013      	beq.n	800626c <HAL_GPIO_Init+0x20c>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a39      	ldr	r2, [pc, #228]	; (800632c <HAL_GPIO_Init+0x2cc>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d00d      	beq.n	8006268 <HAL_GPIO_Init+0x208>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a38      	ldr	r2, [pc, #224]	; (8006330 <HAL_GPIO_Init+0x2d0>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d007      	beq.n	8006264 <HAL_GPIO_Init+0x204>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a37      	ldr	r2, [pc, #220]	; (8006334 <HAL_GPIO_Init+0x2d4>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d101      	bne.n	8006260 <HAL_GPIO_Init+0x200>
 800625c:	2305      	movs	r3, #5
 800625e:	e00a      	b.n	8006276 <HAL_GPIO_Init+0x216>
 8006260:	2306      	movs	r3, #6
 8006262:	e008      	b.n	8006276 <HAL_GPIO_Init+0x216>
 8006264:	2304      	movs	r3, #4
 8006266:	e006      	b.n	8006276 <HAL_GPIO_Init+0x216>
 8006268:	2303      	movs	r3, #3
 800626a:	e004      	b.n	8006276 <HAL_GPIO_Init+0x216>
 800626c:	2302      	movs	r3, #2
 800626e:	e002      	b.n	8006276 <HAL_GPIO_Init+0x216>
 8006270:	2301      	movs	r3, #1
 8006272:	e000      	b.n	8006276 <HAL_GPIO_Init+0x216>
 8006274:	2300      	movs	r3, #0
 8006276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006278:	f002 0203 	and.w	r2, r2, #3
 800627c:	0092      	lsls	r2, r2, #2
 800627e:	4093      	lsls	r3, r2
 8006280:	697a      	ldr	r2, [r7, #20]
 8006282:	4313      	orrs	r3, r2
 8006284:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8006286:	4925      	ldr	r1, [pc, #148]	; (800631c <HAL_GPIO_Init+0x2bc>)
 8006288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628a:	089b      	lsrs	r3, r3, #2
 800628c:	3302      	adds	r3, #2
 800628e:	697a      	ldr	r2, [r7, #20]
 8006290:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800629c:	2b00      	cmp	r3, #0
 800629e:	d006      	beq.n	80062ae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80062a0:	4b25      	ldr	r3, [pc, #148]	; (8006338 <HAL_GPIO_Init+0x2d8>)
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	4924      	ldr	r1, [pc, #144]	; (8006338 <HAL_GPIO_Init+0x2d8>)
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	600b      	str	r3, [r1, #0]
 80062ac:	e006      	b.n	80062bc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80062ae:	4b22      	ldr	r3, [pc, #136]	; (8006338 <HAL_GPIO_Init+0x2d8>)
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	43db      	mvns	r3, r3
 80062b6:	4920      	ldr	r1, [pc, #128]	; (8006338 <HAL_GPIO_Init+0x2d8>)
 80062b8:	4013      	ands	r3, r2
 80062ba:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d006      	beq.n	80062d6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80062c8:	4b1b      	ldr	r3, [pc, #108]	; (8006338 <HAL_GPIO_Init+0x2d8>)
 80062ca:	685a      	ldr	r2, [r3, #4]
 80062cc:	491a      	ldr	r1, [pc, #104]	; (8006338 <HAL_GPIO_Init+0x2d8>)
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	604b      	str	r3, [r1, #4]
 80062d4:	e006      	b.n	80062e4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80062d6:	4b18      	ldr	r3, [pc, #96]	; (8006338 <HAL_GPIO_Init+0x2d8>)
 80062d8:	685a      	ldr	r2, [r3, #4]
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	43db      	mvns	r3, r3
 80062de:	4916      	ldr	r1, [pc, #88]	; (8006338 <HAL_GPIO_Init+0x2d8>)
 80062e0:	4013      	ands	r3, r2
 80062e2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d025      	beq.n	800633c <HAL_GPIO_Init+0x2dc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80062f0:	4b11      	ldr	r3, [pc, #68]	; (8006338 <HAL_GPIO_Init+0x2d8>)
 80062f2:	689a      	ldr	r2, [r3, #8]
 80062f4:	4910      	ldr	r1, [pc, #64]	; (8006338 <HAL_GPIO_Init+0x2d8>)
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	608b      	str	r3, [r1, #8]
 80062fc:	e025      	b.n	800634a <HAL_GPIO_Init+0x2ea>
 80062fe:	bf00      	nop
 8006300:	10320000 	.word	0x10320000
 8006304:	10310000 	.word	0x10310000
 8006308:	10220000 	.word	0x10220000
 800630c:	10210000 	.word	0x10210000
 8006310:	10120000 	.word	0x10120000
 8006314:	10110000 	.word	0x10110000
 8006318:	40021000 	.word	0x40021000
 800631c:	40010000 	.word	0x40010000
 8006320:	40010800 	.word	0x40010800
 8006324:	40010c00 	.word	0x40010c00
 8006328:	40011000 	.word	0x40011000
 800632c:	40011400 	.word	0x40011400
 8006330:	40011800 	.word	0x40011800
 8006334:	40011c00 	.word	0x40011c00
 8006338:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800633c:	4b13      	ldr	r3, [pc, #76]	; (800638c <HAL_GPIO_Init+0x32c>)
 800633e:	689a      	ldr	r2, [r3, #8]
 8006340:	69bb      	ldr	r3, [r7, #24]
 8006342:	43db      	mvns	r3, r3
 8006344:	4911      	ldr	r1, [pc, #68]	; (800638c <HAL_GPIO_Init+0x32c>)
 8006346:	4013      	ands	r3, r2
 8006348:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006352:	2b00      	cmp	r3, #0
 8006354:	d006      	beq.n	8006364 <HAL_GPIO_Init+0x304>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006356:	4b0d      	ldr	r3, [pc, #52]	; (800638c <HAL_GPIO_Init+0x32c>)
 8006358:	68da      	ldr	r2, [r3, #12]
 800635a:	490c      	ldr	r1, [pc, #48]	; (800638c <HAL_GPIO_Init+0x32c>)
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	4313      	orrs	r3, r2
 8006360:	60cb      	str	r3, [r1, #12]
 8006362:	e006      	b.n	8006372 <HAL_GPIO_Init+0x312>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006364:	4b09      	ldr	r3, [pc, #36]	; (800638c <HAL_GPIO_Init+0x32c>)
 8006366:	68da      	ldr	r2, [r3, #12]
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	43db      	mvns	r3, r3
 800636c:	4907      	ldr	r1, [pc, #28]	; (800638c <HAL_GPIO_Init+0x32c>)
 800636e:	4013      	ands	r3, r2
 8006370:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8006372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006374:	3301      	adds	r3, #1
 8006376:	627b      	str	r3, [r7, #36]	; 0x24
 8006378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637a:	2b0f      	cmp	r3, #15
 800637c:	f67f ae82 	bls.w	8006084 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8006380:	bf00      	nop
 8006382:	bf00      	nop
 8006384:	372c      	adds	r7, #44	; 0x2c
 8006386:	46bd      	mov	sp, r7
 8006388:	bc80      	pop	{r7}
 800638a:	4770      	bx	lr
 800638c:	40010400 	.word	0x40010400

08006390 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006390:	b480      	push	{r7}
 8006392:	b085      	sub	sp, #20
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	460b      	mov	r3, r1
 800639a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	689a      	ldr	r2, [r3, #8]
 80063a0:	887b      	ldrh	r3, [r7, #2]
 80063a2:	4013      	ands	r3, r2
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d002      	beq.n	80063ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80063a8:	2301      	movs	r3, #1
 80063aa:	73fb      	strb	r3, [r7, #15]
 80063ac:	e001      	b.n	80063b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80063ae:	2300      	movs	r3, #0
 80063b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80063b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3714      	adds	r7, #20
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bc80      	pop	{r7}
 80063bc:	4770      	bx	lr

080063be <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80063be:	b480      	push	{r7}
 80063c0:	b083      	sub	sp, #12
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
 80063c6:	460b      	mov	r3, r1
 80063c8:	807b      	strh	r3, [r7, #2]
 80063ca:	4613      	mov	r3, r2
 80063cc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80063ce:	787b      	ldrb	r3, [r7, #1]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d003      	beq.n	80063dc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80063d4:	887a      	ldrh	r2, [r7, #2]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80063da:	e003      	b.n	80063e4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80063dc:	887b      	ldrh	r3, [r7, #2]
 80063de:	041a      	lsls	r2, r3, #16
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	611a      	str	r2, [r3, #16]
}
 80063e4:	bf00      	nop
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bc80      	pop	{r7}
 80063ec:	4770      	bx	lr

080063ee <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80063ee:	b480      	push	{r7}
 80063f0:	b083      	sub	sp, #12
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
 80063f6:	460b      	mov	r3, r1
 80063f8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	68da      	ldr	r2, [r3, #12]
 80063fe:	887b      	ldrh	r3, [r7, #2]
 8006400:	405a      	eors	r2, r3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	60da      	str	r2, [r3, #12]
}
 8006406:	bf00      	nop
 8006408:	370c      	adds	r7, #12
 800640a:	46bd      	mov	sp, r7
 800640c:	bc80      	pop	{r7}
 800640e:	4770      	bx	lr

08006410 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b082      	sub	sp, #8
 8006414:	af00      	add	r7, sp, #0
 8006416:	4603      	mov	r3, r0
 8006418:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800641a:	4b08      	ldr	r3, [pc, #32]	; (800643c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800641c:	695a      	ldr	r2, [r3, #20]
 800641e:	88fb      	ldrh	r3, [r7, #6]
 8006420:	4013      	ands	r3, r2
 8006422:	2b00      	cmp	r3, #0
 8006424:	d006      	beq.n	8006434 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006426:	4a05      	ldr	r2, [pc, #20]	; (800643c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006428:	88fb      	ldrh	r3, [r7, #6]
 800642a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800642c:	88fb      	ldrh	r3, [r7, #6]
 800642e:	4618      	mov	r0, r3
 8006430:	f000 f806 	bl	8006440 <HAL_GPIO_EXTI_Callback>
  }
}
 8006434:	bf00      	nop
 8006436:	3708      	adds	r7, #8
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}
 800643c:	40010400 	.word	0x40010400

08006440 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	4603      	mov	r3, r0
 8006448:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800644a:	bf00      	nop
 800644c:	370c      	adds	r7, #12
 800644e:	46bd      	mov	sp, r7
 8006450:	bc80      	pop	{r7}
 8006452:	4770      	bx	lr

08006454 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b086      	sub	sp, #24
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 800645c:	2300      	movs	r3, #0
 800645e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 0301 	and.w	r3, r3, #1
 8006468:	2b00      	cmp	r3, #0
 800646a:	f000 8087 	beq.w	800657c <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800646e:	4b92      	ldr	r3, [pc, #584]	; (80066b8 <HAL_RCC_OscConfig+0x264>)
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	f003 030c 	and.w	r3, r3, #12
 8006476:	2b04      	cmp	r3, #4
 8006478:	d00c      	beq.n	8006494 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800647a:	4b8f      	ldr	r3, [pc, #572]	; (80066b8 <HAL_RCC_OscConfig+0x264>)
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	f003 030c 	and.w	r3, r3, #12
 8006482:	2b08      	cmp	r3, #8
 8006484:	d112      	bne.n	80064ac <HAL_RCC_OscConfig+0x58>
 8006486:	4b8c      	ldr	r3, [pc, #560]	; (80066b8 <HAL_RCC_OscConfig+0x264>)
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800648e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006492:	d10b      	bne.n	80064ac <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006494:	4b88      	ldr	r3, [pc, #544]	; (80066b8 <HAL_RCC_OscConfig+0x264>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800649c:	2b00      	cmp	r3, #0
 800649e:	d06c      	beq.n	800657a <HAL_RCC_OscConfig+0x126>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d168      	bne.n	800657a <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	e22d      	b.n	8006908 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064b4:	d106      	bne.n	80064c4 <HAL_RCC_OscConfig+0x70>
 80064b6:	4b80      	ldr	r3, [pc, #512]	; (80066b8 <HAL_RCC_OscConfig+0x264>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a7f      	ldr	r2, [pc, #508]	; (80066b8 <HAL_RCC_OscConfig+0x264>)
 80064bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064c0:	6013      	str	r3, [r2, #0]
 80064c2:	e02e      	b.n	8006522 <HAL_RCC_OscConfig+0xce>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d10c      	bne.n	80064e6 <HAL_RCC_OscConfig+0x92>
 80064cc:	4b7a      	ldr	r3, [pc, #488]	; (80066b8 <HAL_RCC_OscConfig+0x264>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a79      	ldr	r2, [pc, #484]	; (80066b8 <HAL_RCC_OscConfig+0x264>)
 80064d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064d6:	6013      	str	r3, [r2, #0]
 80064d8:	4b77      	ldr	r3, [pc, #476]	; (80066b8 <HAL_RCC_OscConfig+0x264>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a76      	ldr	r2, [pc, #472]	; (80066b8 <HAL_RCC_OscConfig+0x264>)
 80064de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064e2:	6013      	str	r3, [r2, #0]
 80064e4:	e01d      	b.n	8006522 <HAL_RCC_OscConfig+0xce>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064ee:	d10c      	bne.n	800650a <HAL_RCC_OscConfig+0xb6>
 80064f0:	4b71      	ldr	r3, [pc, #452]	; (80066b8 <HAL_RCC_OscConfig+0x264>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a70      	ldr	r2, [pc, #448]	; (80066b8 <HAL_RCC_OscConfig+0x264>)
 80064f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064fa:	6013      	str	r3, [r2, #0]
 80064fc:	4b6e      	ldr	r3, [pc, #440]	; (80066b8 <HAL_RCC_OscConfig+0x264>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a6d      	ldr	r2, [pc, #436]	; (80066b8 <HAL_RCC_OscConfig+0x264>)
 8006502:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006506:	6013      	str	r3, [r2, #0]
 8006508:	e00b      	b.n	8006522 <HAL_RCC_OscConfig+0xce>
 800650a:	4b6b      	ldr	r3, [pc, #428]	; (80066b8 <HAL_RCC_OscConfig+0x264>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a6a      	ldr	r2, [pc, #424]	; (80066b8 <HAL_RCC_OscConfig+0x264>)
 8006510:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006514:	6013      	str	r3, [r2, #0]
 8006516:	4b68      	ldr	r3, [pc, #416]	; (80066b8 <HAL_RCC_OscConfig+0x264>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a67      	ldr	r2, [pc, #412]	; (80066b8 <HAL_RCC_OscConfig+0x264>)
 800651c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006520:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d013      	beq.n	8006552 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800652a:	f7fe ffed 	bl	8005508 <HAL_GetTick>
 800652e:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006530:	e008      	b.n	8006544 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006532:	f7fe ffe9 	bl	8005508 <HAL_GetTick>
 8006536:	4602      	mov	r2, r0
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	1ad3      	subs	r3, r2, r3
 800653c:	2b64      	cmp	r3, #100	; 0x64
 800653e:	d901      	bls.n	8006544 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8006540:	2303      	movs	r3, #3
 8006542:	e1e1      	b.n	8006908 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006544:	4b5c      	ldr	r3, [pc, #368]	; (80066b8 <HAL_RCC_OscConfig+0x264>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800654c:	2b00      	cmp	r3, #0
 800654e:	d0f0      	beq.n	8006532 <HAL_RCC_OscConfig+0xde>
 8006550:	e014      	b.n	800657c <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006552:	f7fe ffd9 	bl	8005508 <HAL_GetTick>
 8006556:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006558:	e008      	b.n	800656c <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800655a:	f7fe ffd5 	bl	8005508 <HAL_GetTick>
 800655e:	4602      	mov	r2, r0
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	1ad3      	subs	r3, r2, r3
 8006564:	2b64      	cmp	r3, #100	; 0x64
 8006566:	d901      	bls.n	800656c <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8006568:	2303      	movs	r3, #3
 800656a:	e1cd      	b.n	8006908 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800656c:	4b52      	ldr	r3, [pc, #328]	; (80066b8 <HAL_RCC_OscConfig+0x264>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006574:	2b00      	cmp	r3, #0
 8006576:	d1f0      	bne.n	800655a <HAL_RCC_OscConfig+0x106>
 8006578:	e000      	b.n	800657c <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800657a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 0302 	and.w	r3, r3, #2
 8006584:	2b00      	cmp	r3, #0
 8006586:	d063      	beq.n	8006650 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006588:	4b4b      	ldr	r3, [pc, #300]	; (80066b8 <HAL_RCC_OscConfig+0x264>)
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	f003 030c 	and.w	r3, r3, #12
 8006590:	2b00      	cmp	r3, #0
 8006592:	d00b      	beq.n	80065ac <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006594:	4b48      	ldr	r3, [pc, #288]	; (80066b8 <HAL_RCC_OscConfig+0x264>)
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	f003 030c 	and.w	r3, r3, #12
 800659c:	2b08      	cmp	r3, #8
 800659e:	d11c      	bne.n	80065da <HAL_RCC_OscConfig+0x186>
 80065a0:	4b45      	ldr	r3, [pc, #276]	; (80066b8 <HAL_RCC_OscConfig+0x264>)
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d116      	bne.n	80065da <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065ac:	4b42      	ldr	r3, [pc, #264]	; (80066b8 <HAL_RCC_OscConfig+0x264>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 0302 	and.w	r3, r3, #2
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d005      	beq.n	80065c4 <HAL_RCC_OscConfig+0x170>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	691b      	ldr	r3, [r3, #16]
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d001      	beq.n	80065c4 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	e1a1      	b.n	8006908 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065c4:	4b3c      	ldr	r3, [pc, #240]	; (80066b8 <HAL_RCC_OscConfig+0x264>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	695b      	ldr	r3, [r3, #20]
 80065d0:	00db      	lsls	r3, r3, #3
 80065d2:	4939      	ldr	r1, [pc, #228]	; (80066b8 <HAL_RCC_OscConfig+0x264>)
 80065d4:	4313      	orrs	r3, r2
 80065d6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065d8:	e03a      	b.n	8006650 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d020      	beq.n	8006624 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80065e2:	4b36      	ldr	r3, [pc, #216]	; (80066bc <HAL_RCC_OscConfig+0x268>)
 80065e4:	2201      	movs	r2, #1
 80065e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065e8:	f7fe ff8e 	bl	8005508 <HAL_GetTick>
 80065ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065ee:	e008      	b.n	8006602 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80065f0:	f7fe ff8a 	bl	8005508 <HAL_GetTick>
 80065f4:	4602      	mov	r2, r0
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	1ad3      	subs	r3, r2, r3
 80065fa:	2b02      	cmp	r3, #2
 80065fc:	d901      	bls.n	8006602 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 80065fe:	2303      	movs	r3, #3
 8006600:	e182      	b.n	8006908 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006602:	4b2d      	ldr	r3, [pc, #180]	; (80066b8 <HAL_RCC_OscConfig+0x264>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 0302 	and.w	r3, r3, #2
 800660a:	2b00      	cmp	r3, #0
 800660c:	d0f0      	beq.n	80065f0 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800660e:	4b2a      	ldr	r3, [pc, #168]	; (80066b8 <HAL_RCC_OscConfig+0x264>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	695b      	ldr	r3, [r3, #20]
 800661a:	00db      	lsls	r3, r3, #3
 800661c:	4926      	ldr	r1, [pc, #152]	; (80066b8 <HAL_RCC_OscConfig+0x264>)
 800661e:	4313      	orrs	r3, r2
 8006620:	600b      	str	r3, [r1, #0]
 8006622:	e015      	b.n	8006650 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006624:	4b25      	ldr	r3, [pc, #148]	; (80066bc <HAL_RCC_OscConfig+0x268>)
 8006626:	2200      	movs	r2, #0
 8006628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800662a:	f7fe ff6d 	bl	8005508 <HAL_GetTick>
 800662e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006630:	e008      	b.n	8006644 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006632:	f7fe ff69 	bl	8005508 <HAL_GetTick>
 8006636:	4602      	mov	r2, r0
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	2b02      	cmp	r3, #2
 800663e:	d901      	bls.n	8006644 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8006640:	2303      	movs	r3, #3
 8006642:	e161      	b.n	8006908 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006644:	4b1c      	ldr	r3, [pc, #112]	; (80066b8 <HAL_RCC_OscConfig+0x264>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f003 0302 	and.w	r3, r3, #2
 800664c:	2b00      	cmp	r3, #0
 800664e:	d1f0      	bne.n	8006632 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 0308 	and.w	r3, r3, #8
 8006658:	2b00      	cmp	r3, #0
 800665a:	d039      	beq.n	80066d0 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	699b      	ldr	r3, [r3, #24]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d019      	beq.n	8006698 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006664:	4b16      	ldr	r3, [pc, #88]	; (80066c0 <HAL_RCC_OscConfig+0x26c>)
 8006666:	2201      	movs	r2, #1
 8006668:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800666a:	f7fe ff4d 	bl	8005508 <HAL_GetTick>
 800666e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006670:	e008      	b.n	8006684 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006672:	f7fe ff49 	bl	8005508 <HAL_GetTick>
 8006676:	4602      	mov	r2, r0
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	1ad3      	subs	r3, r2, r3
 800667c:	2b02      	cmp	r3, #2
 800667e:	d901      	bls.n	8006684 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8006680:	2303      	movs	r3, #3
 8006682:	e141      	b.n	8006908 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006684:	4b0c      	ldr	r3, [pc, #48]	; (80066b8 <HAL_RCC_OscConfig+0x264>)
 8006686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006688:	f003 0302 	and.w	r3, r3, #2
 800668c:	2b00      	cmp	r3, #0
 800668e:	d0f0      	beq.n	8006672 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8006690:	2001      	movs	r0, #1
 8006692:	f000 fadf 	bl	8006c54 <RCC_Delay>
 8006696:	e01b      	b.n	80066d0 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006698:	4b09      	ldr	r3, [pc, #36]	; (80066c0 <HAL_RCC_OscConfig+0x26c>)
 800669a:	2200      	movs	r2, #0
 800669c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800669e:	f7fe ff33 	bl	8005508 <HAL_GetTick>
 80066a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066a4:	e00e      	b.n	80066c4 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80066a6:	f7fe ff2f 	bl	8005508 <HAL_GetTick>
 80066aa:	4602      	mov	r2, r0
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	1ad3      	subs	r3, r2, r3
 80066b0:	2b02      	cmp	r3, #2
 80066b2:	d907      	bls.n	80066c4 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 80066b4:	2303      	movs	r3, #3
 80066b6:	e127      	b.n	8006908 <HAL_RCC_OscConfig+0x4b4>
 80066b8:	40021000 	.word	0x40021000
 80066bc:	42420000 	.word	0x42420000
 80066c0:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066c4:	4b92      	ldr	r3, [pc, #584]	; (8006910 <HAL_RCC_OscConfig+0x4bc>)
 80066c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c8:	f003 0302 	and.w	r3, r3, #2
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d1ea      	bne.n	80066a6 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 0304 	and.w	r3, r3, #4
 80066d8:	2b00      	cmp	r3, #0
 80066da:	f000 80a6 	beq.w	800682a <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066de:	2300      	movs	r3, #0
 80066e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066e2:	4b8b      	ldr	r3, [pc, #556]	; (8006910 <HAL_RCC_OscConfig+0x4bc>)
 80066e4:	69db      	ldr	r3, [r3, #28]
 80066e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d10d      	bne.n	800670a <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066ee:	4b88      	ldr	r3, [pc, #544]	; (8006910 <HAL_RCC_OscConfig+0x4bc>)
 80066f0:	69db      	ldr	r3, [r3, #28]
 80066f2:	4a87      	ldr	r2, [pc, #540]	; (8006910 <HAL_RCC_OscConfig+0x4bc>)
 80066f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066f8:	61d3      	str	r3, [r2, #28]
 80066fa:	4b85      	ldr	r3, [pc, #532]	; (8006910 <HAL_RCC_OscConfig+0x4bc>)
 80066fc:	69db      	ldr	r3, [r3, #28]
 80066fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006702:	60fb      	str	r3, [r7, #12]
 8006704:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006706:	2301      	movs	r3, #1
 8006708:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800670a:	4b82      	ldr	r3, [pc, #520]	; (8006914 <HAL_RCC_OscConfig+0x4c0>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006712:	2b00      	cmp	r3, #0
 8006714:	d118      	bne.n	8006748 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006716:	4b7f      	ldr	r3, [pc, #508]	; (8006914 <HAL_RCC_OscConfig+0x4c0>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a7e      	ldr	r2, [pc, #504]	; (8006914 <HAL_RCC_OscConfig+0x4c0>)
 800671c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006720:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006722:	f7fe fef1 	bl	8005508 <HAL_GetTick>
 8006726:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006728:	e008      	b.n	800673c <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800672a:	f7fe feed 	bl	8005508 <HAL_GetTick>
 800672e:	4602      	mov	r2, r0
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	1ad3      	subs	r3, r2, r3
 8006734:	2b64      	cmp	r3, #100	; 0x64
 8006736:	d901      	bls.n	800673c <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8006738:	2303      	movs	r3, #3
 800673a:	e0e5      	b.n	8006908 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800673c:	4b75      	ldr	r3, [pc, #468]	; (8006914 <HAL_RCC_OscConfig+0x4c0>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006744:	2b00      	cmp	r3, #0
 8006746:	d0f0      	beq.n	800672a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	2b01      	cmp	r3, #1
 800674e:	d106      	bne.n	800675e <HAL_RCC_OscConfig+0x30a>
 8006750:	4b6f      	ldr	r3, [pc, #444]	; (8006910 <HAL_RCC_OscConfig+0x4bc>)
 8006752:	6a1b      	ldr	r3, [r3, #32]
 8006754:	4a6e      	ldr	r2, [pc, #440]	; (8006910 <HAL_RCC_OscConfig+0x4bc>)
 8006756:	f043 0301 	orr.w	r3, r3, #1
 800675a:	6213      	str	r3, [r2, #32]
 800675c:	e02d      	b.n	80067ba <HAL_RCC_OscConfig+0x366>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	68db      	ldr	r3, [r3, #12]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d10c      	bne.n	8006780 <HAL_RCC_OscConfig+0x32c>
 8006766:	4b6a      	ldr	r3, [pc, #424]	; (8006910 <HAL_RCC_OscConfig+0x4bc>)
 8006768:	6a1b      	ldr	r3, [r3, #32]
 800676a:	4a69      	ldr	r2, [pc, #420]	; (8006910 <HAL_RCC_OscConfig+0x4bc>)
 800676c:	f023 0301 	bic.w	r3, r3, #1
 8006770:	6213      	str	r3, [r2, #32]
 8006772:	4b67      	ldr	r3, [pc, #412]	; (8006910 <HAL_RCC_OscConfig+0x4bc>)
 8006774:	6a1b      	ldr	r3, [r3, #32]
 8006776:	4a66      	ldr	r2, [pc, #408]	; (8006910 <HAL_RCC_OscConfig+0x4bc>)
 8006778:	f023 0304 	bic.w	r3, r3, #4
 800677c:	6213      	str	r3, [r2, #32]
 800677e:	e01c      	b.n	80067ba <HAL_RCC_OscConfig+0x366>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	2b05      	cmp	r3, #5
 8006786:	d10c      	bne.n	80067a2 <HAL_RCC_OscConfig+0x34e>
 8006788:	4b61      	ldr	r3, [pc, #388]	; (8006910 <HAL_RCC_OscConfig+0x4bc>)
 800678a:	6a1b      	ldr	r3, [r3, #32]
 800678c:	4a60      	ldr	r2, [pc, #384]	; (8006910 <HAL_RCC_OscConfig+0x4bc>)
 800678e:	f043 0304 	orr.w	r3, r3, #4
 8006792:	6213      	str	r3, [r2, #32]
 8006794:	4b5e      	ldr	r3, [pc, #376]	; (8006910 <HAL_RCC_OscConfig+0x4bc>)
 8006796:	6a1b      	ldr	r3, [r3, #32]
 8006798:	4a5d      	ldr	r2, [pc, #372]	; (8006910 <HAL_RCC_OscConfig+0x4bc>)
 800679a:	f043 0301 	orr.w	r3, r3, #1
 800679e:	6213      	str	r3, [r2, #32]
 80067a0:	e00b      	b.n	80067ba <HAL_RCC_OscConfig+0x366>
 80067a2:	4b5b      	ldr	r3, [pc, #364]	; (8006910 <HAL_RCC_OscConfig+0x4bc>)
 80067a4:	6a1b      	ldr	r3, [r3, #32]
 80067a6:	4a5a      	ldr	r2, [pc, #360]	; (8006910 <HAL_RCC_OscConfig+0x4bc>)
 80067a8:	f023 0301 	bic.w	r3, r3, #1
 80067ac:	6213      	str	r3, [r2, #32]
 80067ae:	4b58      	ldr	r3, [pc, #352]	; (8006910 <HAL_RCC_OscConfig+0x4bc>)
 80067b0:	6a1b      	ldr	r3, [r3, #32]
 80067b2:	4a57      	ldr	r2, [pc, #348]	; (8006910 <HAL_RCC_OscConfig+0x4bc>)
 80067b4:	f023 0304 	bic.w	r3, r3, #4
 80067b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	68db      	ldr	r3, [r3, #12]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d015      	beq.n	80067ee <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067c2:	f7fe fea1 	bl	8005508 <HAL_GetTick>
 80067c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067c8:	e00a      	b.n	80067e0 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067ca:	f7fe fe9d 	bl	8005508 <HAL_GetTick>
 80067ce:	4602      	mov	r2, r0
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	1ad3      	subs	r3, r2, r3
 80067d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80067d8:	4293      	cmp	r3, r2
 80067da:	d901      	bls.n	80067e0 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 80067dc:	2303      	movs	r3, #3
 80067de:	e093      	b.n	8006908 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067e0:	4b4b      	ldr	r3, [pc, #300]	; (8006910 <HAL_RCC_OscConfig+0x4bc>)
 80067e2:	6a1b      	ldr	r3, [r3, #32]
 80067e4:	f003 0302 	and.w	r3, r3, #2
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d0ee      	beq.n	80067ca <HAL_RCC_OscConfig+0x376>
 80067ec:	e014      	b.n	8006818 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067ee:	f7fe fe8b 	bl	8005508 <HAL_GetTick>
 80067f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067f4:	e00a      	b.n	800680c <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067f6:	f7fe fe87 	bl	8005508 <HAL_GetTick>
 80067fa:	4602      	mov	r2, r0
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	1ad3      	subs	r3, r2, r3
 8006800:	f241 3288 	movw	r2, #5000	; 0x1388
 8006804:	4293      	cmp	r3, r2
 8006806:	d901      	bls.n	800680c <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8006808:	2303      	movs	r3, #3
 800680a:	e07d      	b.n	8006908 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800680c:	4b40      	ldr	r3, [pc, #256]	; (8006910 <HAL_RCC_OscConfig+0x4bc>)
 800680e:	6a1b      	ldr	r3, [r3, #32]
 8006810:	f003 0302 	and.w	r3, r3, #2
 8006814:	2b00      	cmp	r3, #0
 8006816:	d1ee      	bne.n	80067f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006818:	7dfb      	ldrb	r3, [r7, #23]
 800681a:	2b01      	cmp	r3, #1
 800681c:	d105      	bne.n	800682a <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800681e:	4b3c      	ldr	r3, [pc, #240]	; (8006910 <HAL_RCC_OscConfig+0x4bc>)
 8006820:	69db      	ldr	r3, [r3, #28]
 8006822:	4a3b      	ldr	r2, [pc, #236]	; (8006910 <HAL_RCC_OscConfig+0x4bc>)
 8006824:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006828:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	69db      	ldr	r3, [r3, #28]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d069      	beq.n	8006906 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006832:	4b37      	ldr	r3, [pc, #220]	; (8006910 <HAL_RCC_OscConfig+0x4bc>)
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	f003 030c 	and.w	r3, r3, #12
 800683a:	2b08      	cmp	r3, #8
 800683c:	d061      	beq.n	8006902 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	69db      	ldr	r3, [r3, #28]
 8006842:	2b02      	cmp	r3, #2
 8006844:	d146      	bne.n	80068d4 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006846:	4b34      	ldr	r3, [pc, #208]	; (8006918 <HAL_RCC_OscConfig+0x4c4>)
 8006848:	2200      	movs	r2, #0
 800684a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800684c:	f7fe fe5c 	bl	8005508 <HAL_GetTick>
 8006850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006852:	e008      	b.n	8006866 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006854:	f7fe fe58 	bl	8005508 <HAL_GetTick>
 8006858:	4602      	mov	r2, r0
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	1ad3      	subs	r3, r2, r3
 800685e:	2b02      	cmp	r3, #2
 8006860:	d901      	bls.n	8006866 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8006862:	2303      	movs	r3, #3
 8006864:	e050      	b.n	8006908 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006866:	4b2a      	ldr	r3, [pc, #168]	; (8006910 <HAL_RCC_OscConfig+0x4bc>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800686e:	2b00      	cmp	r3, #0
 8006870:	d1f0      	bne.n	8006854 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a1b      	ldr	r3, [r3, #32]
 8006876:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800687a:	d108      	bne.n	800688e <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800687c:	4b24      	ldr	r3, [pc, #144]	; (8006910 <HAL_RCC_OscConfig+0x4bc>)
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	4921      	ldr	r1, [pc, #132]	; (8006910 <HAL_RCC_OscConfig+0x4bc>)
 800688a:	4313      	orrs	r3, r2
 800688c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800688e:	4b20      	ldr	r3, [pc, #128]	; (8006910 <HAL_RCC_OscConfig+0x4bc>)
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6a19      	ldr	r1, [r3, #32]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800689e:	430b      	orrs	r3, r1
 80068a0:	491b      	ldr	r1, [pc, #108]	; (8006910 <HAL_RCC_OscConfig+0x4bc>)
 80068a2:	4313      	orrs	r3, r2
 80068a4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80068a6:	4b1c      	ldr	r3, [pc, #112]	; (8006918 <HAL_RCC_OscConfig+0x4c4>)
 80068a8:	2201      	movs	r2, #1
 80068aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068ac:	f7fe fe2c 	bl	8005508 <HAL_GetTick>
 80068b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80068b2:	e008      	b.n	80068c6 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068b4:	f7fe fe28 	bl	8005508 <HAL_GetTick>
 80068b8:	4602      	mov	r2, r0
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	1ad3      	subs	r3, r2, r3
 80068be:	2b02      	cmp	r3, #2
 80068c0:	d901      	bls.n	80068c6 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 80068c2:	2303      	movs	r3, #3
 80068c4:	e020      	b.n	8006908 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80068c6:	4b12      	ldr	r3, [pc, #72]	; (8006910 <HAL_RCC_OscConfig+0x4bc>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d0f0      	beq.n	80068b4 <HAL_RCC_OscConfig+0x460>
 80068d2:	e018      	b.n	8006906 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068d4:	4b10      	ldr	r3, [pc, #64]	; (8006918 <HAL_RCC_OscConfig+0x4c4>)
 80068d6:	2200      	movs	r2, #0
 80068d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068da:	f7fe fe15 	bl	8005508 <HAL_GetTick>
 80068de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80068e0:	e008      	b.n	80068f4 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068e2:	f7fe fe11 	bl	8005508 <HAL_GetTick>
 80068e6:	4602      	mov	r2, r0
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	1ad3      	subs	r3, r2, r3
 80068ec:	2b02      	cmp	r3, #2
 80068ee:	d901      	bls.n	80068f4 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 80068f0:	2303      	movs	r3, #3
 80068f2:	e009      	b.n	8006908 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80068f4:	4b06      	ldr	r3, [pc, #24]	; (8006910 <HAL_RCC_OscConfig+0x4bc>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d1f0      	bne.n	80068e2 <HAL_RCC_OscConfig+0x48e>
 8006900:	e001      	b.n	8006906 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	e000      	b.n	8006908 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8006906:	2300      	movs	r3, #0
}
 8006908:	4618      	mov	r0, r3
 800690a:	3718      	adds	r7, #24
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}
 8006910:	40021000 	.word	0x40021000
 8006914:	40007000 	.word	0x40007000
 8006918:	42420060 	.word	0x42420060

0800691c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006926:	2300      	movs	r3, #0
 8006928:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800692a:	4b7e      	ldr	r3, [pc, #504]	; (8006b24 <HAL_RCC_ClockConfig+0x208>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f003 0307 	and.w	r3, r3, #7
 8006932:	683a      	ldr	r2, [r7, #0]
 8006934:	429a      	cmp	r2, r3
 8006936:	d910      	bls.n	800695a <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006938:	4b7a      	ldr	r3, [pc, #488]	; (8006b24 <HAL_RCC_ClockConfig+0x208>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f023 0207 	bic.w	r2, r3, #7
 8006940:	4978      	ldr	r1, [pc, #480]	; (8006b24 <HAL_RCC_ClockConfig+0x208>)
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	4313      	orrs	r3, r2
 8006946:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006948:	4b76      	ldr	r3, [pc, #472]	; (8006b24 <HAL_RCC_ClockConfig+0x208>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f003 0307 	and.w	r3, r3, #7
 8006950:	683a      	ldr	r2, [r7, #0]
 8006952:	429a      	cmp	r2, r3
 8006954:	d001      	beq.n	800695a <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	e0e0      	b.n	8006b1c <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f003 0302 	and.w	r3, r3, #2
 8006962:	2b00      	cmp	r3, #0
 8006964:	d020      	beq.n	80069a8 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 0304 	and.w	r3, r3, #4
 800696e:	2b00      	cmp	r3, #0
 8006970:	d005      	beq.n	800697e <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006972:	4b6d      	ldr	r3, [pc, #436]	; (8006b28 <HAL_RCC_ClockConfig+0x20c>)
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	4a6c      	ldr	r2, [pc, #432]	; (8006b28 <HAL_RCC_ClockConfig+0x20c>)
 8006978:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800697c:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 0308 	and.w	r3, r3, #8
 8006986:	2b00      	cmp	r3, #0
 8006988:	d005      	beq.n	8006996 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800698a:	4b67      	ldr	r3, [pc, #412]	; (8006b28 <HAL_RCC_ClockConfig+0x20c>)
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	4a66      	ldr	r2, [pc, #408]	; (8006b28 <HAL_RCC_ClockConfig+0x20c>)
 8006990:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006994:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006996:	4b64      	ldr	r3, [pc, #400]	; (8006b28 <HAL_RCC_ClockConfig+0x20c>)
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	4961      	ldr	r1, [pc, #388]	; (8006b28 <HAL_RCC_ClockConfig+0x20c>)
 80069a4:	4313      	orrs	r3, r2
 80069a6:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 0301 	and.w	r3, r3, #1
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d06a      	beq.n	8006a8a <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d107      	bne.n	80069cc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069bc:	4b5a      	ldr	r3, [pc, #360]	; (8006b28 <HAL_RCC_ClockConfig+0x20c>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d115      	bne.n	80069f4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	e0a7      	b.n	8006b1c <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	2b02      	cmp	r3, #2
 80069d2:	d107      	bne.n	80069e4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069d4:	4b54      	ldr	r3, [pc, #336]	; (8006b28 <HAL_RCC_ClockConfig+0x20c>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d109      	bne.n	80069f4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80069e0:	2301      	movs	r3, #1
 80069e2:	e09b      	b.n	8006b1c <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069e4:	4b50      	ldr	r3, [pc, #320]	; (8006b28 <HAL_RCC_ClockConfig+0x20c>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 0302 	and.w	r3, r3, #2
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d101      	bne.n	80069f4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	e093      	b.n	8006b1c <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80069f4:	4b4c      	ldr	r3, [pc, #304]	; (8006b28 <HAL_RCC_ClockConfig+0x20c>)
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	f023 0203 	bic.w	r2, r3, #3
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	4949      	ldr	r1, [pc, #292]	; (8006b28 <HAL_RCC_ClockConfig+0x20c>)
 8006a02:	4313      	orrs	r3, r2
 8006a04:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a06:	f7fe fd7f 	bl	8005508 <HAL_GetTick>
 8006a0a:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d112      	bne.n	8006a3a <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006a14:	e00a      	b.n	8006a2c <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a16:	f7fe fd77 	bl	8005508 <HAL_GetTick>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	1ad3      	subs	r3, r2, r3
 8006a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d901      	bls.n	8006a2c <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8006a28:	2303      	movs	r3, #3
 8006a2a:	e077      	b.n	8006b1c <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006a2c:	4b3e      	ldr	r3, [pc, #248]	; (8006b28 <HAL_RCC_ClockConfig+0x20c>)
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	f003 030c 	and.w	r3, r3, #12
 8006a34:	2b04      	cmp	r3, #4
 8006a36:	d1ee      	bne.n	8006a16 <HAL_RCC_ClockConfig+0xfa>
 8006a38:	e027      	b.n	8006a8a <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d11d      	bne.n	8006a7e <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006a42:	e00a      	b.n	8006a5a <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a44:	f7fe fd60 	bl	8005508 <HAL_GetTick>
 8006a48:	4602      	mov	r2, r0
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	1ad3      	subs	r3, r2, r3
 8006a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d901      	bls.n	8006a5a <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8006a56:	2303      	movs	r3, #3
 8006a58:	e060      	b.n	8006b1c <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006a5a:	4b33      	ldr	r3, [pc, #204]	; (8006b28 <HAL_RCC_ClockConfig+0x20c>)
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	f003 030c 	and.w	r3, r3, #12
 8006a62:	2b08      	cmp	r3, #8
 8006a64:	d1ee      	bne.n	8006a44 <HAL_RCC_ClockConfig+0x128>
 8006a66:	e010      	b.n	8006a8a <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a68:	f7fe fd4e 	bl	8005508 <HAL_GetTick>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	1ad3      	subs	r3, r2, r3
 8006a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d901      	bls.n	8006a7e <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	e04e      	b.n	8006b1c <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006a7e:	4b2a      	ldr	r3, [pc, #168]	; (8006b28 <HAL_RCC_ClockConfig+0x20c>)
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	f003 030c 	and.w	r3, r3, #12
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d1ee      	bne.n	8006a68 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8006a8a:	4b26      	ldr	r3, [pc, #152]	; (8006b24 <HAL_RCC_ClockConfig+0x208>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f003 0307 	and.w	r3, r3, #7
 8006a92:	683a      	ldr	r2, [r7, #0]
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d210      	bcs.n	8006aba <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a98:	4b22      	ldr	r3, [pc, #136]	; (8006b24 <HAL_RCC_ClockConfig+0x208>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f023 0207 	bic.w	r2, r3, #7
 8006aa0:	4920      	ldr	r1, [pc, #128]	; (8006b24 <HAL_RCC_ClockConfig+0x208>)
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006aa8:	4b1e      	ldr	r3, [pc, #120]	; (8006b24 <HAL_RCC_ClockConfig+0x208>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 0307 	and.w	r3, r3, #7
 8006ab0:	683a      	ldr	r2, [r7, #0]
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d001      	beq.n	8006aba <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e030      	b.n	8006b1c <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f003 0304 	and.w	r3, r3, #4
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d008      	beq.n	8006ad8 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ac6:	4b18      	ldr	r3, [pc, #96]	; (8006b28 <HAL_RCC_ClockConfig+0x20c>)
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	4915      	ldr	r1, [pc, #84]	; (8006b28 <HAL_RCC_ClockConfig+0x20c>)
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f003 0308 	and.w	r3, r3, #8
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d009      	beq.n	8006af8 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006ae4:	4b10      	ldr	r3, [pc, #64]	; (8006b28 <HAL_RCC_ClockConfig+0x20c>)
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	691b      	ldr	r3, [r3, #16]
 8006af0:	00db      	lsls	r3, r3, #3
 8006af2:	490d      	ldr	r1, [pc, #52]	; (8006b28 <HAL_RCC_ClockConfig+0x20c>)
 8006af4:	4313      	orrs	r3, r2
 8006af6:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006af8:	f000 f81c 	bl	8006b34 <HAL_RCC_GetSysClockFreq>
 8006afc:	4602      	mov	r2, r0
 8006afe:	4b0a      	ldr	r3, [pc, #40]	; (8006b28 <HAL_RCC_ClockConfig+0x20c>)
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	091b      	lsrs	r3, r3, #4
 8006b04:	f003 030f 	and.w	r3, r3, #15
 8006b08:	4908      	ldr	r1, [pc, #32]	; (8006b2c <HAL_RCC_ClockConfig+0x210>)
 8006b0a:	5ccb      	ldrb	r3, [r1, r3]
 8006b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b10:	4a07      	ldr	r2, [pc, #28]	; (8006b30 <HAL_RCC_ClockConfig+0x214>)
 8006b12:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006b14:	2000      	movs	r0, #0
 8006b16:	f7fe fcb5 	bl	8005484 <HAL_InitTick>
  
  return HAL_OK;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3710      	adds	r7, #16
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}
 8006b24:	40022000 	.word	0x40022000
 8006b28:	40021000 	.word	0x40021000
 8006b2c:	08009c70 	.word	0x08009c70
 8006b30:	200001a8 	.word	0x200001a8

08006b34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b34:	b490      	push	{r4, r7}
 8006b36:	b08a      	sub	sp, #40	; 0x28
 8006b38:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006b3a:	4b29      	ldr	r3, [pc, #164]	; (8006be0 <HAL_RCC_GetSysClockFreq+0xac>)
 8006b3c:	1d3c      	adds	r4, r7, #4
 8006b3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006b40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006b44:	f240 2301 	movw	r3, #513	; 0x201
 8006b48:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	61fb      	str	r3, [r7, #28]
 8006b4e:	2300      	movs	r3, #0
 8006b50:	61bb      	str	r3, [r7, #24]
 8006b52:	2300      	movs	r3, #0
 8006b54:	627b      	str	r3, [r7, #36]	; 0x24
 8006b56:	2300      	movs	r3, #0
 8006b58:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006b5e:	4b21      	ldr	r3, [pc, #132]	; (8006be4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	f003 030c 	and.w	r3, r3, #12
 8006b6a:	2b04      	cmp	r3, #4
 8006b6c:	d002      	beq.n	8006b74 <HAL_RCC_GetSysClockFreq+0x40>
 8006b6e:	2b08      	cmp	r3, #8
 8006b70:	d003      	beq.n	8006b7a <HAL_RCC_GetSysClockFreq+0x46>
 8006b72:	e02b      	b.n	8006bcc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006b74:	4b1c      	ldr	r3, [pc, #112]	; (8006be8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006b76:	623b      	str	r3, [r7, #32]
      break;
 8006b78:	e02b      	b.n	8006bd2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006b7a:	69fb      	ldr	r3, [r7, #28]
 8006b7c:	0c9b      	lsrs	r3, r3, #18
 8006b7e:	f003 030f 	and.w	r3, r3, #15
 8006b82:	3328      	adds	r3, #40	; 0x28
 8006b84:	443b      	add	r3, r7
 8006b86:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006b8a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d012      	beq.n	8006bbc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006b96:	4b13      	ldr	r3, [pc, #76]	; (8006be4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	0c5b      	lsrs	r3, r3, #17
 8006b9c:	f003 0301 	and.w	r3, r3, #1
 8006ba0:	3328      	adds	r3, #40	; 0x28
 8006ba2:	443b      	add	r3, r7
 8006ba4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006ba8:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	4a0e      	ldr	r2, [pc, #56]	; (8006be8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006bae:	fb03 f202 	mul.w	r2, r3, r2
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8006bba:	e004      	b.n	8006bc6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	4a0b      	ldr	r2, [pc, #44]	; (8006bec <HAL_RCC_GetSysClockFreq+0xb8>)
 8006bc0:	fb02 f303 	mul.w	r3, r2, r3
 8006bc4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc8:	623b      	str	r3, [r7, #32]
      break;
 8006bca:	e002      	b.n	8006bd2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006bcc:	4b06      	ldr	r3, [pc, #24]	; (8006be8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006bce:	623b      	str	r3, [r7, #32]
      break;
 8006bd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006bd2:	6a3b      	ldr	r3, [r7, #32]
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3728      	adds	r7, #40	; 0x28
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bc90      	pop	{r4, r7}
 8006bdc:	4770      	bx	lr
 8006bde:	bf00      	nop
 8006be0:	0800926c 	.word	0x0800926c
 8006be4:	40021000 	.word	0x40021000
 8006be8:	007a1200 	.word	0x007a1200
 8006bec:	003d0900 	.word	0x003d0900

08006bf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006bf4:	4b02      	ldr	r3, [pc, #8]	; (8006c00 <HAL_RCC_GetHCLKFreq+0x10>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bc80      	pop	{r7}
 8006bfe:	4770      	bx	lr
 8006c00:	200001a8 	.word	0x200001a8

08006c04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006c08:	f7ff fff2 	bl	8006bf0 <HAL_RCC_GetHCLKFreq>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	4b05      	ldr	r3, [pc, #20]	; (8006c24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	0a1b      	lsrs	r3, r3, #8
 8006c14:	f003 0307 	and.w	r3, r3, #7
 8006c18:	4903      	ldr	r1, [pc, #12]	; (8006c28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c1a:	5ccb      	ldrb	r3, [r1, r3]
 8006c1c:	fa22 f303 	lsr.w	r3, r2, r3
}    
 8006c20:	4618      	mov	r0, r3
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	40021000 	.word	0x40021000
 8006c28:	08009c80 	.word	0x08009c80

08006c2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006c30:	f7ff ffde 	bl	8006bf0 <HAL_RCC_GetHCLKFreq>
 8006c34:	4602      	mov	r2, r0
 8006c36:	4b05      	ldr	r3, [pc, #20]	; (8006c4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	0adb      	lsrs	r3, r3, #11
 8006c3c:	f003 0307 	and.w	r3, r3, #7
 8006c40:	4903      	ldr	r1, [pc, #12]	; (8006c50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c42:	5ccb      	ldrb	r3, [r1, r3]
 8006c44:	fa22 f303 	lsr.w	r3, r2, r3
} 
 8006c48:	4618      	mov	r0, r3
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	40021000 	.word	0x40021000
 8006c50:	08009c80 	.word	0x08009c80

08006c54 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b085      	sub	sp, #20
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006c5c:	4b0b      	ldr	r3, [pc, #44]	; (8006c8c <RCC_Delay+0x38>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a0b      	ldr	r2, [pc, #44]	; (8006c90 <RCC_Delay+0x3c>)
 8006c62:	fba2 2303 	umull	r2, r3, r2, r3
 8006c66:	0a5b      	lsrs	r3, r3, #9
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	fb02 f303 	mul.w	r3, r2, r3
 8006c6e:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8006c70:	bf00      	nop
}
 8006c72:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	1e5a      	subs	r2, r3, #1
 8006c78:	60fa      	str	r2, [r7, #12]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d1f8      	bne.n	8006c70 <RCC_Delay+0x1c>
}
 8006c7e:	bf00      	nop
 8006c80:	bf00      	nop
 8006c82:	3714      	adds	r7, #20
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bc80      	pop	{r7}
 8006c88:	4770      	bx	lr
 8006c8a:	bf00      	nop
 8006c8c:	200001a8 	.word	0x200001a8
 8006c90:	10624dd3 	.word	0x10624dd3

08006c94 <HAL_SRAM_Init>:
  * @param  Timing: Pointer to SRAM control timing structure 
  * @param  ExtTiming: Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing, FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b084      	sub	sp, #16
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d101      	bne.n	8006caa <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e034      	b.n	8006d14 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d106      	bne.n	8006cc4 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006cbe:	68f8      	ldr	r0, [r7, #12]
 8006cc0:	f7fa fe86 	bl	80019d0 <HAL_SRAM_MspInit>
  }
  
  /* Initialize SRAM control Interface */
  FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	3308      	adds	r3, #8
 8006ccc:	4619      	mov	r1, r3
 8006cce:	4610      	mov	r0, r2
 8006cd0:	f001 fc7e 	bl	80085d0 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6818      	ldr	r0, [r3, #0]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	461a      	mov	r2, r3
 8006cde:	68b9      	ldr	r1, [r7, #8]
 8006ce0:	f001 fcf6 	bl	80086d0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6858      	ldr	r0, [r3, #4]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	689a      	ldr	r2, [r3, #8]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf0:	6879      	ldr	r1, [r7, #4]
 8006cf2:	f001 fd21 	bl	8008738 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	68fa      	ldr	r2, [r7, #12]
 8006cfc:	6892      	ldr	r2, [r2, #8]
 8006cfe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	68fa      	ldr	r2, [r7, #12]
 8006d08:	6892      	ldr	r2, [r2, #8]
 8006d0a:	f041 0101 	orr.w	r1, r1, #1
 8006d0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8006d12:	2300      	movs	r3, #0
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3710      	adds	r7, #16
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <HAL_TIM_Base_Init>:
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b082      	sub	sp, #8
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d101      	bne.n	8006d2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e01d      	b.n	8006d6a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d106      	bne.n	8006d48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f7fd fe4c 	bl	80049e0 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2202      	movs	r2, #2
 8006d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	3304      	adds	r3, #4
 8006d58:	4619      	mov	r1, r3
 8006d5a:	4610      	mov	r0, r2
 8006d5c:	f000 fb2e 	bl	80073bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2201      	movs	r2, #1
 8006d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d68:	2300      	movs	r3, #0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3708      	adds	r7, #8
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}

08006d72 <HAL_TIM_PWM_Init>:
  *       Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b082      	sub	sp, #8
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d101      	bne.n	8006d84 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006d80:	2301      	movs	r3, #1
 8006d82:	e01d      	b.n	8006dc0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d8a:	b2db      	uxtb	r3, r3
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d106      	bne.n	8006d9e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 f815 	bl	8006dc8 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2202      	movs	r2, #2
 8006da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	3304      	adds	r3, #4
 8006dae:	4619      	mov	r1, r3
 8006db0:	4610      	mov	r0, r2
 8006db2:	f000 fb03 	bl	80073bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2201      	movs	r2, #1
 8006dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3708      	adds	r7, #8
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b083      	sub	sp, #12
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006dd0:	bf00      	nop
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bc80      	pop	{r7}
 8006dd8:	4770      	bx	lr
	...

08006ddc <HAL_TIM_PWM_Start_DMA>:
  * @param  pData : The source Buffer address.
  * @param  Length : The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	607a      	str	r2, [r7, #4]
 8006de8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if((htim->State == HAL_TIM_STATE_BUSY))
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	2b02      	cmp	r3, #2
 8006df4:	d101      	bne.n	8006dfa <HAL_TIM_PWM_Start_DMA+0x1e>
  {
     return HAL_BUSY;
 8006df6:	2302      	movs	r3, #2
 8006df8:	e0c6      	b.n	8006f88 <HAL_TIM_PWM_Start_DMA+0x1ac>
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d10b      	bne.n	8006e1e <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if(((uint32_t)pData == 0U) && (Length > 0U))
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d104      	bne.n	8006e16 <HAL_TIM_PWM_Start_DMA+0x3a>
 8006e0c:	887b      	ldrh	r3, [r7, #2]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d001      	beq.n	8006e16 <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	e0b8      	b.n	8006f88 <HAL_TIM_PWM_Start_DMA+0x1ac>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2202      	movs	r2, #2
 8006e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
  }
  switch (Channel)
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	2b0c      	cmp	r3, #12
 8006e22:	f200 8089 	bhi.w	8006f38 <HAL_TIM_PWM_Start_DMA+0x15c>
 8006e26:	a201      	add	r2, pc, #4	; (adr r2, 8006e2c <HAL_TIM_PWM_Start_DMA+0x50>)
 8006e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e2c:	08006e61 	.word	0x08006e61
 8006e30:	08006f39 	.word	0x08006f39
 8006e34:	08006f39 	.word	0x08006f39
 8006e38:	08006f39 	.word	0x08006f39
 8006e3c:	08006e97 	.word	0x08006e97
 8006e40:	08006f39 	.word	0x08006f39
 8006e44:	08006f39 	.word	0x08006f39
 8006e48:	08006f39 	.word	0x08006f39
 8006e4c:	08006ecd 	.word	0x08006ecd
 8006e50:	08006f39 	.word	0x08006f39
 8006e54:	08006f39 	.word	0x08006f39
 8006e58:	08006f39 	.word	0x08006f39
 8006e5c:	08006f03 	.word	0x08006f03
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e64:	4a4a      	ldr	r2, [pc, #296]	; (8006f90 <HAL_TIM_PWM_Start_DMA+0x1b4>)
 8006e66:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e6c:	4a49      	ldr	r2, [pc, #292]	; (8006f94 <HAL_TIM_PWM_Start_DMA+0x1b8>)
 8006e6e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006e74:	6879      	ldr	r1, [r7, #4]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	3334      	adds	r3, #52	; 0x34
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	887b      	ldrh	r3, [r7, #2]
 8006e80:	f7fe fcf0 	bl	8005864 <HAL_DMA_Start_IT>

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	68da      	ldr	r2, [r3, #12]
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e92:	60da      	str	r2, [r3, #12]
    }
    break;
 8006e94:	e051      	b.n	8006f3a <HAL_TIM_PWM_Start_DMA+0x15e>

    case TIM_CHANNEL_2:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e9a:	4a3d      	ldr	r2, [pc, #244]	; (8006f90 <HAL_TIM_PWM_Start_DMA+0x1b4>)
 8006e9c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea2:	4a3c      	ldr	r2, [pc, #240]	; (8006f94 <HAL_TIM_PWM_Start_DMA+0x1b8>)
 8006ea4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006eaa:	6879      	ldr	r1, [r7, #4]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	3338      	adds	r3, #56	; 0x38
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	887b      	ldrh	r3, [r7, #2]
 8006eb6:	f7fe fcd5 	bl	8005864 <HAL_DMA_Start_IT>

      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	68da      	ldr	r2, [r3, #12]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006ec8:	60da      	str	r2, [r3, #12]
    }
    break;
 8006eca:	e036      	b.n	8006f3a <HAL_TIM_PWM_Start_DMA+0x15e>

    case TIM_CHANNEL_3:
    {
      /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed0:	4a2f      	ldr	r2, [pc, #188]	; (8006f90 <HAL_TIM_PWM_Start_DMA+0x1b4>)
 8006ed2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed8:	4a2e      	ldr	r2, [pc, #184]	; (8006f94 <HAL_TIM_PWM_Start_DMA+0x1b8>)
 8006eda:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,Length);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006ee0:	6879      	ldr	r1, [r7, #4]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	333c      	adds	r3, #60	; 0x3c
 8006ee8:	461a      	mov	r2, r3
 8006eea:	887b      	ldrh	r3, [r7, #2]
 8006eec:	f7fe fcba 	bl	8005864 <HAL_DMA_Start_IT>

      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	68da      	ldr	r2, [r3, #12]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006efe:	60da      	str	r2, [r3, #12]
    }
    break;
 8006f00:	e01b      	b.n	8006f3a <HAL_TIM_PWM_Start_DMA+0x15e>

    case TIM_CHANNEL_4:
    {
     /* Set the DMA Period elapsed callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f06:	4a22      	ldr	r2, [pc, #136]	; (8006f90 <HAL_TIM_PWM_Start_DMA+0x1b4>)
 8006f08:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f0e:	4a21      	ldr	r2, [pc, #132]	; (8006f94 <HAL_TIM_PWM_Start_DMA+0x1b8>)
 8006f10:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006f16:	6879      	ldr	r1, [r7, #4]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	3340      	adds	r3, #64	; 0x40
 8006f1e:	461a      	mov	r2, r3
 8006f20:	887b      	ldrh	r3, [r7, #2]
 8006f22:	f7fe fc9f 	bl	8005864 <HAL_DMA_Start_IT>

      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	68da      	ldr	r2, [r3, #12]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006f34:	60da      	str	r2, [r3, #12]
    }
    break;
 8006f36:	e000      	b.n	8006f3a <HAL_TIM_PWM_Start_DMA+0x15e>

    default:
    break;
 8006f38:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	68b9      	ldr	r1, [r7, #8]
 8006f42:	4618      	mov	r0, r3
 8006f44:	f000 fd21 	bl	800798a <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a12      	ldr	r2, [pc, #72]	; (8006f98 <HAL_TIM_PWM_Start_DMA+0x1bc>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d004      	beq.n	8006f5c <HAL_TIM_PWM_Start_DMA+0x180>
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a11      	ldr	r2, [pc, #68]	; (8006f9c <HAL_TIM_PWM_Start_DMA+0x1c0>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d101      	bne.n	8006f60 <HAL_TIM_PWM_Start_DMA+0x184>
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e000      	b.n	8006f62 <HAL_TIM_PWM_Start_DMA+0x186>
 8006f60:	2300      	movs	r3, #0
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d007      	beq.n	8006f76 <HAL_TIM_PWM_Start_DMA+0x19a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f74:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f042 0201 	orr.w	r2, r2, #1
 8006f84:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006f86:	2300      	movs	r3, #0
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3710      	adds	r7, #16
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}
 8006f90:	0800734b 	.word	0x0800734b
 8006f94:	08007327 	.word	0x08007327
 8006f98:	40012c00 	.word	0x40012c00
 8006f9c:	40013400 	.word	0x40013400

08006fa0 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b084      	sub	sp, #16
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	60b9      	str	r1, [r7, #8]
 8006faa:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d101      	bne.n	8006fba <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006fb6:	2302      	movs	r3, #2
 8006fb8:	e0b4      	b.n	8007124 <HAL_TIM_PWM_ConfigChannel+0x184>
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2202      	movs	r2, #2
 8006fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2b0c      	cmp	r3, #12
 8006fce:	f200 809f 	bhi.w	8007110 <HAL_TIM_PWM_ConfigChannel+0x170>
 8006fd2:	a201      	add	r2, pc, #4	; (adr r2, 8006fd8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd8:	0800700d 	.word	0x0800700d
 8006fdc:	08007111 	.word	0x08007111
 8006fe0:	08007111 	.word	0x08007111
 8006fe4:	08007111 	.word	0x08007111
 8006fe8:	0800704d 	.word	0x0800704d
 8006fec:	08007111 	.word	0x08007111
 8006ff0:	08007111 	.word	0x08007111
 8006ff4:	08007111 	.word	0x08007111
 8006ff8:	0800708f 	.word	0x0800708f
 8006ffc:	08007111 	.word	0x08007111
 8007000:	08007111 	.word	0x08007111
 8007004:	08007111 	.word	0x08007111
 8007008:	080070cf 	.word	0x080070cf
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	68b9      	ldr	r1, [r7, #8]
 8007012:	4618      	mov	r0, r3
 8007014:	f000 fa50 	bl	80074b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	699a      	ldr	r2, [r3, #24]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f042 0208 	orr.w	r2, r2, #8
 8007026:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	699a      	ldr	r2, [r3, #24]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f022 0204 	bic.w	r2, r2, #4
 8007036:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	6999      	ldr	r1, [r3, #24]
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	691a      	ldr	r2, [r3, #16]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	430a      	orrs	r2, r1
 8007048:	619a      	str	r2, [r3, #24]
    }
    break;
 800704a:	e062      	b.n	8007112 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	68b9      	ldr	r1, [r7, #8]
 8007052:	4618      	mov	r0, r3
 8007054:	f000 faa6 	bl	80075a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	699a      	ldr	r2, [r3, #24]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007066:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	699a      	ldr	r2, [r3, #24]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007076:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	6999      	ldr	r1, [r3, #24]
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	691b      	ldr	r3, [r3, #16]
 8007082:	021a      	lsls	r2, r3, #8
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	430a      	orrs	r2, r1
 800708a:	619a      	str	r2, [r3, #24]
    }
    break;
 800708c:	e041      	b.n	8007112 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	68b9      	ldr	r1, [r7, #8]
 8007094:	4618      	mov	r0, r3
 8007096:	f000 faff 	bl	8007698 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	69da      	ldr	r2, [r3, #28]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f042 0208 	orr.w	r2, r2, #8
 80070a8:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	69da      	ldr	r2, [r3, #28]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f022 0204 	bic.w	r2, r2, #4
 80070b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	69d9      	ldr	r1, [r3, #28]
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	691a      	ldr	r2, [r3, #16]
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	430a      	orrs	r2, r1
 80070ca:	61da      	str	r2, [r3, #28]
    }
    break;
 80070cc:	e021      	b.n	8007112 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	68b9      	ldr	r1, [r7, #8]
 80070d4:	4618      	mov	r0, r3
 80070d6:	f000 fb59 	bl	800778c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	69da      	ldr	r2, [r3, #28]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070e8:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	69da      	ldr	r2, [r3, #28]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	69d9      	ldr	r1, [r3, #28]
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	691b      	ldr	r3, [r3, #16]
 8007104:	021a      	lsls	r2, r3, #8
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	430a      	orrs	r2, r1
 800710c:	61da      	str	r2, [r3, #28]
    }
    break;
 800710e:	e000      	b.n	8007112 <HAL_TIM_PWM_ConfigChannel+0x172>

    default:
    break;
 8007110:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2201      	movs	r2, #1
 8007116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2200      	movs	r2, #0
 800711e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007122:	2300      	movs	r3, #0
}
 8007124:	4618      	mov	r0, r3
 8007126:	3710      	adds	r7, #16
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b084      	sub	sp, #16
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8007136:	2300      	movs	r3, #0
 8007138:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007140:	2b01      	cmp	r3, #1
 8007142:	d101      	bne.n	8007148 <HAL_TIM_ConfigClockSource+0x1c>
 8007144:	2302      	movs	r3, #2
 8007146:	e0d8      	b.n	80072fa <HAL_TIM_ConfigClockSource+0x1ce>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2202      	movs	r2, #2
 8007154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007166:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800716e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	68fa      	ldr	r2, [r7, #12]
 8007176:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007180:	d052      	beq.n	8007228 <HAL_TIM_ConfigClockSource+0xfc>
 8007182:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007186:	f200 80ae 	bhi.w	80072e6 <HAL_TIM_ConfigClockSource+0x1ba>
 800718a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800718e:	d027      	beq.n	80071e0 <HAL_TIM_ConfigClockSource+0xb4>
 8007190:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007194:	f200 80a7 	bhi.w	80072e6 <HAL_TIM_ConfigClockSource+0x1ba>
 8007198:	2b70      	cmp	r3, #112	; 0x70
 800719a:	d02a      	beq.n	80071f2 <HAL_TIM_ConfigClockSource+0xc6>
 800719c:	2b70      	cmp	r3, #112	; 0x70
 800719e:	f200 80a2 	bhi.w	80072e6 <HAL_TIM_ConfigClockSource+0x1ba>
 80071a2:	2b60      	cmp	r3, #96	; 0x60
 80071a4:	d063      	beq.n	800726e <HAL_TIM_ConfigClockSource+0x142>
 80071a6:	2b60      	cmp	r3, #96	; 0x60
 80071a8:	f200 809d 	bhi.w	80072e6 <HAL_TIM_ConfigClockSource+0x1ba>
 80071ac:	2b50      	cmp	r3, #80	; 0x50
 80071ae:	d04e      	beq.n	800724e <HAL_TIM_ConfigClockSource+0x122>
 80071b0:	2b50      	cmp	r3, #80	; 0x50
 80071b2:	f200 8098 	bhi.w	80072e6 <HAL_TIM_ConfigClockSource+0x1ba>
 80071b6:	2b40      	cmp	r3, #64	; 0x40
 80071b8:	d069      	beq.n	800728e <HAL_TIM_ConfigClockSource+0x162>
 80071ba:	2b40      	cmp	r3, #64	; 0x40
 80071bc:	f200 8093 	bhi.w	80072e6 <HAL_TIM_ConfigClockSource+0x1ba>
 80071c0:	2b30      	cmp	r3, #48	; 0x30
 80071c2:	f000 8089 	beq.w	80072d8 <HAL_TIM_ConfigClockSource+0x1ac>
 80071c6:	2b30      	cmp	r3, #48	; 0x30
 80071c8:	f200 808d 	bhi.w	80072e6 <HAL_TIM_ConfigClockSource+0x1ba>
 80071cc:	2b20      	cmp	r3, #32
 80071ce:	d07c      	beq.n	80072ca <HAL_TIM_ConfigClockSource+0x19e>
 80071d0:	2b20      	cmp	r3, #32
 80071d2:	f200 8088 	bhi.w	80072e6 <HAL_TIM_ConfigClockSource+0x1ba>
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d069      	beq.n	80072ae <HAL_TIM_ConfigClockSource+0x182>
 80071da:	2b10      	cmp	r3, #16
 80071dc:	d06e      	beq.n	80072bc <HAL_TIM_ConfigClockSource+0x190>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 80071de:	e082      	b.n	80072e6 <HAL_TIM_ConfigClockSource+0x1ba>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	689a      	ldr	r2, [r3, #8]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f022 0207 	bic.w	r2, r2, #7
 80071ee:	609a      	str	r2, [r3, #8]
    break;
 80071f0:	e07a      	b.n	80072e8 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6818      	ldr	r0, [r3, #0]
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	6899      	ldr	r1, [r3, #8]
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	685a      	ldr	r2, [r3, #4]
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	68db      	ldr	r3, [r3, #12]
 8007202:	f000 fba1 	bl	8007948 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007214:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800721c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	68fa      	ldr	r2, [r7, #12]
 8007224:	609a      	str	r2, [r3, #8]
    break;
 8007226:	e05f      	b.n	80072e8 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6818      	ldr	r0, [r3, #0]
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	6899      	ldr	r1, [r3, #8]
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	685a      	ldr	r2, [r3, #4]
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	f000 fb86 	bl	8007948 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	689a      	ldr	r2, [r3, #8]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800724a:	609a      	str	r2, [r3, #8]
    break;
 800724c:	e04c      	b.n	80072e8 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6818      	ldr	r0, [r3, #0]
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	6859      	ldr	r1, [r3, #4]
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	68db      	ldr	r3, [r3, #12]
 800725a:	461a      	mov	r2, r3
 800725c:	f000 faf0 	bl	8007840 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	2150      	movs	r1, #80	; 0x50
 8007266:	4618      	mov	r0, r3
 8007268:	f000 fb4f 	bl	800790a <TIM_ITRx_SetConfig>
    break;
 800726c:	e03c      	b.n	80072e8 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6818      	ldr	r0, [r3, #0]
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	6859      	ldr	r1, [r3, #4]
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	461a      	mov	r2, r3
 800727c:	f000 fb12 	bl	80078a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	2160      	movs	r1, #96	; 0x60
 8007286:	4618      	mov	r0, r3
 8007288:	f000 fb3f 	bl	800790a <TIM_ITRx_SetConfig>
    break;
 800728c:	e02c      	b.n	80072e8 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6818      	ldr	r0, [r3, #0]
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	6859      	ldr	r1, [r3, #4]
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	461a      	mov	r2, r3
 800729c:	f000 fad0 	bl	8007840 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	2140      	movs	r1, #64	; 0x40
 80072a6:	4618      	mov	r0, r3
 80072a8:	f000 fb2f 	bl	800790a <TIM_ITRx_SetConfig>
    break;
 80072ac:	e01c      	b.n	80072e8 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	2100      	movs	r1, #0
 80072b4:	4618      	mov	r0, r3
 80072b6:	f000 fb28 	bl	800790a <TIM_ITRx_SetConfig>
    break;
 80072ba:	e015      	b.n	80072e8 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	2110      	movs	r1, #16
 80072c2:	4618      	mov	r0, r3
 80072c4:	f000 fb21 	bl	800790a <TIM_ITRx_SetConfig>
    break;
 80072c8:	e00e      	b.n	80072e8 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	2120      	movs	r1, #32
 80072d0:	4618      	mov	r0, r3
 80072d2:	f000 fb1a 	bl	800790a <TIM_ITRx_SetConfig>
    break;
 80072d6:	e007      	b.n	80072e8 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2130      	movs	r1, #48	; 0x30
 80072de:	4618      	mov	r0, r3
 80072e0:	f000 fb13 	bl	800790a <TIM_ITRx_SetConfig>
    break;
 80072e4:	e000      	b.n	80072e8 <HAL_TIM_ConfigClockSource+0x1bc>
    break;
 80072e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072f8:	2300      	movs	r3, #0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3710      	adds	r7, #16
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}

08007302 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007302:	b480      	push	{r7}
 8007304:	b083      	sub	sp, #12
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800730a:	bf00      	nop
 800730c:	370c      	adds	r7, #12
 800730e:	46bd      	mov	sp, r7
 8007310:	bc80      	pop	{r7}
 8007312:	4770      	bx	lr

08007314 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007314:	b480      	push	{r7}
 8007316:	b083      	sub	sp, #12
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800731c:	bf00      	nop
 800731e:	370c      	adds	r7, #12
 8007320:	46bd      	mov	sp, r7
 8007322:	bc80      	pop	{r7}
 8007324:	4770      	bx	lr

08007326 <TIM_DMAError>:
  * @brief  TIM DMA error callback 
  * @param  hdma : pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8007326:	b580      	push	{r7, lr}
 8007328:	b084      	sub	sp, #16
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007332:	60fb      	str	r3, [r7, #12]

  htim->State= HAL_TIM_STATE_READY;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2201      	movs	r2, #1
 8007338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  HAL_TIM_ErrorCallback(htim);
 800733c:	68f8      	ldr	r0, [r7, #12]
 800733e:	f7ff ffe9 	bl	8007314 <HAL_TIM_ErrorCallback>
}
 8007342:	bf00      	nop
 8007344:	3710      	adds	r7, #16
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}

0800734a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma : pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800734a:	b580      	push	{r7, lr}
 800734c:	b084      	sub	sp, #16
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007356:	60fb      	str	r3, [r7, #12]

  htim->State= HAL_TIM_STATE_READY;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2201      	movs	r2, #1
 800735c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	429a      	cmp	r2, r3
 8007368:	d103      	bne.n	8007372 <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2201      	movs	r2, #1
 800736e:	771a      	strb	r2, [r3, #28]
 8007370:	e019      	b.n	80073a6 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	429a      	cmp	r2, r3
 800737a:	d103      	bne.n	8007384 <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2202      	movs	r2, #2
 8007380:	771a      	strb	r2, [r3, #28]
 8007382:	e010      	b.n	80073a6 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	429a      	cmp	r2, r3
 800738c:	d103      	bne.n	8007396 <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2204      	movs	r2, #4
 8007392:	771a      	strb	r2, [r3, #28]
 8007394:	e007      	b.n	80073a6 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800739a:	687a      	ldr	r2, [r7, #4]
 800739c:	429a      	cmp	r2, r3
 800739e:	d102      	bne.n	80073a6 <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2208      	movs	r2, #8
 80073a4:	771a      	strb	r2, [r3, #28]
  }

  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073a6:	68f8      	ldr	r0, [r7, #12]
 80073a8:	f7ff ffab 	bl	8007302 <HAL_TIM_PWM_PulseFinishedCallback>

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2200      	movs	r2, #0
 80073b0:	771a      	strb	r2, [r3, #28]
}
 80073b2:	bf00      	nop
 80073b4:	3710      	adds	r7, #16
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
	...

080073bc <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80073bc:	b480      	push	{r7}
 80073be:	b085      	sub	sp, #20
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 80073c6:	2300      	movs	r3, #0
 80073c8:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	4a34      	ldr	r2, [pc, #208]	; (80074a4 <TIM_Base_SetConfig+0xe8>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d013      	beq.n	8007400 <TIM_Base_SetConfig+0x44>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4a33      	ldr	r2, [pc, #204]	; (80074a8 <TIM_Base_SetConfig+0xec>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d00f      	beq.n	8007400 <TIM_Base_SetConfig+0x44>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073e6:	d00b      	beq.n	8007400 <TIM_Base_SetConfig+0x44>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	4a30      	ldr	r2, [pc, #192]	; (80074ac <TIM_Base_SetConfig+0xf0>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d007      	beq.n	8007400 <TIM_Base_SetConfig+0x44>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	4a2f      	ldr	r2, [pc, #188]	; (80074b0 <TIM_Base_SetConfig+0xf4>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d003      	beq.n	8007400 <TIM_Base_SetConfig+0x44>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	4a2e      	ldr	r2, [pc, #184]	; (80074b4 <TIM_Base_SetConfig+0xf8>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d108      	bne.n	8007412 <TIM_Base_SetConfig+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007406:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	68fa      	ldr	r2, [r7, #12]
 800740e:	4313      	orrs	r3, r2
 8007410:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4a23      	ldr	r2, [pc, #140]	; (80074a4 <TIM_Base_SetConfig+0xe8>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d013      	beq.n	8007442 <TIM_Base_SetConfig+0x86>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a22      	ldr	r2, [pc, #136]	; (80074a8 <TIM_Base_SetConfig+0xec>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d00f      	beq.n	8007442 <TIM_Base_SetConfig+0x86>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007428:	d00b      	beq.n	8007442 <TIM_Base_SetConfig+0x86>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4a1f      	ldr	r2, [pc, #124]	; (80074ac <TIM_Base_SetConfig+0xf0>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d007      	beq.n	8007442 <TIM_Base_SetConfig+0x86>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4a1e      	ldr	r2, [pc, #120]	; (80074b0 <TIM_Base_SetConfig+0xf4>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d003      	beq.n	8007442 <TIM_Base_SetConfig+0x86>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	4a1d      	ldr	r2, [pc, #116]	; (80074b4 <TIM_Base_SetConfig+0xf8>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d108      	bne.n	8007454 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007448:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	68fa      	ldr	r2, [r7, #12]
 8007450:	4313      	orrs	r3, r2
 8007452:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800745a:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	695b      	ldr	r3, [r3, #20]
 8007460:	68fa      	ldr	r2, [r7, #12]
 8007462:	4313      	orrs	r3, r2
 8007464:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	68fa      	ldr	r2, [r7, #12]
 800746a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	689a      	ldr	r2, [r3, #8]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	681a      	ldr	r2, [r3, #0]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	4a09      	ldr	r2, [pc, #36]	; (80074a4 <TIM_Base_SetConfig+0xe8>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d003      	beq.n	800748c <TIM_Base_SetConfig+0xd0>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	4a08      	ldr	r2, [pc, #32]	; (80074a8 <TIM_Base_SetConfig+0xec>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d103      	bne.n	8007494 <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	691a      	ldr	r2, [r3, #16]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2201      	movs	r2, #1
 8007498:	615a      	str	r2, [r3, #20]
}
 800749a:	bf00      	nop
 800749c:	3714      	adds	r7, #20
 800749e:	46bd      	mov	sp, r7
 80074a0:	bc80      	pop	{r7}
 80074a2:	4770      	bx	lr
 80074a4:	40012c00 	.word	0x40012c00
 80074a8:	40013400 	.word	0x40013400
 80074ac:	40000400 	.word	0x40000400
 80074b0:	40000800 	.word	0x40000800
 80074b4:	40000c00 	.word	0x40000c00

080074b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b087      	sub	sp, #28
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80074c2:	2300      	movs	r3, #0
 80074c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80074c6:	2300      	movs	r3, #0
 80074c8:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80074ca:	2300      	movs	r3, #0
 80074cc:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6a1b      	ldr	r3, [r3, #32]
 80074d2:	f023 0201 	bic.w	r2, r3, #1
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6a1b      	ldr	r3, [r3, #32]
 80074de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	699b      	ldr	r3, [r3, #24]
 80074ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f023 0303 	bic.w	r3, r3, #3
 80074fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	68fa      	ldr	r2, [r7, #12]
 8007502:	4313      	orrs	r3, r2
 8007504:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	f023 0302 	bic.w	r3, r3, #2
 800750c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	697a      	ldr	r2, [r7, #20]
 8007514:	4313      	orrs	r3, r2
 8007516:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	4a20      	ldr	r2, [pc, #128]	; (800759c <TIM_OC1_SetConfig+0xe4>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d003      	beq.n	8007528 <TIM_OC1_SetConfig+0x70>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	4a1f      	ldr	r2, [pc, #124]	; (80075a0 <TIM_OC1_SetConfig+0xe8>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d10c      	bne.n	8007542 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	f023 0308 	bic.w	r3, r3, #8
 800752e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	68db      	ldr	r3, [r3, #12]
 8007534:	697a      	ldr	r2, [r7, #20]
 8007536:	4313      	orrs	r3, r2
 8007538:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	f023 0304 	bic.w	r3, r3, #4
 8007540:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	4a15      	ldr	r2, [pc, #84]	; (800759c <TIM_OC1_SetConfig+0xe4>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d003      	beq.n	8007552 <TIM_OC1_SetConfig+0x9a>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4a14      	ldr	r2, [pc, #80]	; (80075a0 <TIM_OC1_SetConfig+0xe8>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d111      	bne.n	8007576 <TIM_OC1_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007558:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007560:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	695b      	ldr	r3, [r3, #20]
 8007566:	693a      	ldr	r2, [r7, #16]
 8007568:	4313      	orrs	r3, r2
 800756a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	699b      	ldr	r3, [r3, #24]
 8007570:	693a      	ldr	r2, [r7, #16]
 8007572:	4313      	orrs	r3, r2
 8007574:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	693a      	ldr	r2, [r7, #16]
 800757a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	68fa      	ldr	r2, [r7, #12]
 8007580:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	685a      	ldr	r2, [r3, #4]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	697a      	ldr	r2, [r7, #20]
 800758e:	621a      	str	r2, [r3, #32]
}
 8007590:	bf00      	nop
 8007592:	371c      	adds	r7, #28
 8007594:	46bd      	mov	sp, r7
 8007596:	bc80      	pop	{r7}
 8007598:	4770      	bx	lr
 800759a:	bf00      	nop
 800759c:	40012c00 	.word	0x40012c00
 80075a0:	40013400 	.word	0x40013400

080075a4 <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b087      	sub	sp, #28
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80075ae:	2300      	movs	r3, #0
 80075b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80075b2:	2300      	movs	r3, #0
 80075b4:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80075b6:	2300      	movs	r3, #0
 80075b8:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6a1b      	ldr	r3, [r3, #32]
 80075be:	f023 0210 	bic.w	r2, r3, #16
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6a1b      	ldr	r3, [r3, #32]
 80075ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	699b      	ldr	r3, [r3, #24]
 80075d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	021b      	lsls	r3, r3, #8
 80075ee:	68fa      	ldr	r2, [r7, #12]
 80075f0:	4313      	orrs	r3, r2
 80075f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	f023 0320 	bic.w	r3, r3, #32
 80075fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	011b      	lsls	r3, r3, #4
 8007602:	697a      	ldr	r2, [r7, #20]
 8007604:	4313      	orrs	r3, r2
 8007606:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	4a21      	ldr	r2, [pc, #132]	; (8007690 <TIM_OC2_SetConfig+0xec>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d003      	beq.n	8007618 <TIM_OC2_SetConfig+0x74>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	4a20      	ldr	r2, [pc, #128]	; (8007694 <TIM_OC2_SetConfig+0xf0>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d10d      	bne.n	8007634 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800761e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	68db      	ldr	r3, [r3, #12]
 8007624:	011b      	lsls	r3, r3, #4
 8007626:	697a      	ldr	r2, [r7, #20]
 8007628:	4313      	orrs	r3, r2
 800762a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007632:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	4a16      	ldr	r2, [pc, #88]	; (8007690 <TIM_OC2_SetConfig+0xec>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d003      	beq.n	8007644 <TIM_OC2_SetConfig+0xa0>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	4a15      	ldr	r2, [pc, #84]	; (8007694 <TIM_OC2_SetConfig+0xf0>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d113      	bne.n	800766c <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800764a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007652:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	695b      	ldr	r3, [r3, #20]
 8007658:	009b      	lsls	r3, r3, #2
 800765a:	693a      	ldr	r2, [r7, #16]
 800765c:	4313      	orrs	r3, r2
 800765e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	699b      	ldr	r3, [r3, #24]
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	693a      	ldr	r2, [r7, #16]
 8007668:	4313      	orrs	r3, r2
 800766a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	693a      	ldr	r2, [r7, #16]
 8007670:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	68fa      	ldr	r2, [r7, #12]
 8007676:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	685a      	ldr	r2, [r3, #4]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	697a      	ldr	r2, [r7, #20]
 8007684:	621a      	str	r2, [r3, #32]
}
 8007686:	bf00      	nop
 8007688:	371c      	adds	r7, #28
 800768a:	46bd      	mov	sp, r7
 800768c:	bc80      	pop	{r7}
 800768e:	4770      	bx	lr
 8007690:	40012c00 	.word	0x40012c00
 8007694:	40013400 	.word	0x40013400

08007698 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007698:	b480      	push	{r7}
 800769a:	b087      	sub	sp, #28
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80076a2:	2300      	movs	r3, #0
 80076a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80076a6:	2300      	movs	r3, #0
 80076a8:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80076aa:	2300      	movs	r3, #0
 80076ac:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6a1b      	ldr	r3, [r3, #32]
 80076b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6a1b      	ldr	r3, [r3, #32]
 80076be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	69db      	ldr	r3, [r3, #28]
 80076ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f023 0303 	bic.w	r3, r3, #3
 80076da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	68fa      	ldr	r2, [r7, #12]
 80076e2:	4313      	orrs	r3, r2
 80076e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80076ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	021b      	lsls	r3, r3, #8
 80076f4:	697a      	ldr	r2, [r7, #20]
 80076f6:	4313      	orrs	r3, r2
 80076f8:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	4a21      	ldr	r2, [pc, #132]	; (8007784 <TIM_OC3_SetConfig+0xec>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d003      	beq.n	800770a <TIM_OC3_SetConfig+0x72>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	4a20      	ldr	r2, [pc, #128]	; (8007788 <TIM_OC3_SetConfig+0xf0>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d10d      	bne.n	8007726 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007710:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	68db      	ldr	r3, [r3, #12]
 8007716:	021b      	lsls	r3, r3, #8
 8007718:	697a      	ldr	r2, [r7, #20]
 800771a:	4313      	orrs	r3, r2
 800771c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007724:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	4a16      	ldr	r2, [pc, #88]	; (8007784 <TIM_OC3_SetConfig+0xec>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d003      	beq.n	8007736 <TIM_OC3_SetConfig+0x9e>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	4a15      	ldr	r2, [pc, #84]	; (8007788 <TIM_OC3_SetConfig+0xf0>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d113      	bne.n	800775e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800773c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007744:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	695b      	ldr	r3, [r3, #20]
 800774a:	011b      	lsls	r3, r3, #4
 800774c:	693a      	ldr	r2, [r7, #16]
 800774e:	4313      	orrs	r3, r2
 8007750:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	699b      	ldr	r3, [r3, #24]
 8007756:	011b      	lsls	r3, r3, #4
 8007758:	693a      	ldr	r2, [r7, #16]
 800775a:	4313      	orrs	r3, r2
 800775c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	693a      	ldr	r2, [r7, #16]
 8007762:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	68fa      	ldr	r2, [r7, #12]
 8007768:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	685a      	ldr	r2, [r3, #4]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	697a      	ldr	r2, [r7, #20]
 8007776:	621a      	str	r2, [r3, #32]
}
 8007778:	bf00      	nop
 800777a:	371c      	adds	r7, #28
 800777c:	46bd      	mov	sp, r7
 800777e:	bc80      	pop	{r7}
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop
 8007784:	40012c00 	.word	0x40012c00
 8007788:	40013400 	.word	0x40013400

0800778c <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800778c:	b480      	push	{r7}
 800778e:	b087      	sub	sp, #28
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8007796:	2300      	movs	r3, #0
 8007798:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800779a:	2300      	movs	r3, #0
 800779c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 800779e:	2300      	movs	r3, #0
 80077a0:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6a1b      	ldr	r3, [r3, #32]
 80077a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6a1b      	ldr	r3, [r3, #32]
 80077b2:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	69db      	ldr	r3, [r3, #28]
 80077be:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077c6:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077ce:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	021b      	lsls	r3, r3, #8
 80077d6:	693a      	ldr	r2, [r7, #16]
 80077d8:	4313      	orrs	r3, r2
 80077da:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80077e2:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	031b      	lsls	r3, r3, #12
 80077ea:	68fa      	ldr	r2, [r7, #12]
 80077ec:	4313      	orrs	r3, r2
 80077ee:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	4a11      	ldr	r2, [pc, #68]	; (8007838 <TIM_OC4_SetConfig+0xac>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d003      	beq.n	8007800 <TIM_OC4_SetConfig+0x74>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	4a10      	ldr	r2, [pc, #64]	; (800783c <TIM_OC4_SetConfig+0xb0>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d109      	bne.n	8007814 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007806:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	695b      	ldr	r3, [r3, #20]
 800780c:	019b      	lsls	r3, r3, #6
 800780e:	697a      	ldr	r2, [r7, #20]
 8007810:	4313      	orrs	r3, r2
 8007812:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	697a      	ldr	r2, [r7, #20]
 8007818:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	693a      	ldr	r2, [r7, #16]
 800781e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	685a      	ldr	r2, [r3, #4]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	68fa      	ldr	r2, [r7, #12]
 800782c:	621a      	str	r2, [r3, #32]
}
 800782e:	bf00      	nop
 8007830:	371c      	adds	r7, #28
 8007832:	46bd      	mov	sp, r7
 8007834:	bc80      	pop	{r7}
 8007836:	4770      	bx	lr
 8007838:	40012c00 	.word	0x40012c00
 800783c:	40013400 	.word	0x40013400

08007840 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007840:	b480      	push	{r7}
 8007842:	b087      	sub	sp, #28
 8007844:	af00      	add	r7, sp, #0
 8007846:	60f8      	str	r0, [r7, #12]
 8007848:	60b9      	str	r1, [r7, #8]
 800784a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 800784c:	2300      	movs	r3, #0
 800784e:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8007850:	2300      	movs	r3, #0
 8007852:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6a1b      	ldr	r3, [r3, #32]
 8007858:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	6a1b      	ldr	r3, [r3, #32]
 800785e:	f023 0201 	bic.w	r2, r3, #1
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	699b      	ldr	r3, [r3, #24]
 800786a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007872:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	011b      	lsls	r3, r3, #4
 8007878:	697a      	ldr	r2, [r7, #20]
 800787a:	4313      	orrs	r3, r2
 800787c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	f023 030a 	bic.w	r3, r3, #10
 8007884:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8007886:	693a      	ldr	r2, [r7, #16]
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	4313      	orrs	r3, r2
 800788c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	697a      	ldr	r2, [r7, #20]
 8007892:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	693a      	ldr	r2, [r7, #16]
 8007898:	621a      	str	r2, [r3, #32]
}
 800789a:	bf00      	nop
 800789c:	371c      	adds	r7, #28
 800789e:	46bd      	mov	sp, r7
 80078a0:	bc80      	pop	{r7}
 80078a2:	4770      	bx	lr

080078a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b087      	sub	sp, #28
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	60f8      	str	r0, [r7, #12]
 80078ac:	60b9      	str	r1, [r7, #8]
 80078ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 80078b0:	2300      	movs	r3, #0
 80078b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 80078b4:	2300      	movs	r3, #0
 80078b6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	6a1b      	ldr	r3, [r3, #32]
 80078bc:	f023 0210 	bic.w	r2, r3, #16
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	699b      	ldr	r3, [r3, #24]
 80078c8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	6a1b      	ldr	r3, [r3, #32]
 80078ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80078d6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	031b      	lsls	r3, r3, #12
 80078dc:	697a      	ldr	r2, [r7, #20]
 80078de:	4313      	orrs	r3, r2
 80078e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80078e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	011b      	lsls	r3, r3, #4
 80078ee:	693a      	ldr	r2, [r7, #16]
 80078f0:	4313      	orrs	r3, r2
 80078f2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	697a      	ldr	r2, [r7, #20]
 80078f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	693a      	ldr	r2, [r7, #16]
 80078fe:	621a      	str	r2, [r3, #32]
}
 8007900:	bf00      	nop
 8007902:	371c      	adds	r7, #28
 8007904:	46bd      	mov	sp, r7
 8007906:	bc80      	pop	{r7}
 8007908:	4770      	bx	lr

0800790a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 800790a:	b480      	push	{r7}
 800790c:	b085      	sub	sp, #20
 800790e:	af00      	add	r7, sp, #0
 8007910:	6078      	str	r0, [r7, #4]
 8007912:	460b      	mov	r3, r1
 8007914:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 8007916:	2300      	movs	r3, #0
 8007918:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007926:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8007928:	887b      	ldrh	r3, [r7, #2]
 800792a:	f043 0307 	orr.w	r3, r3, #7
 800792e:	b29b      	uxth	r3, r3
 8007930:	461a      	mov	r2, r3
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	4313      	orrs	r3, r2
 8007936:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	68fa      	ldr	r2, [r7, #12]
 800793c:	609a      	str	r2, [r3, #8]
}
 800793e:	bf00      	nop
 8007940:	3714      	adds	r7, #20
 8007942:	46bd      	mov	sp, r7
 8007944:	bc80      	pop	{r7}
 8007946:	4770      	bx	lr

08007948 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007948:	b480      	push	{r7}
 800794a:	b087      	sub	sp, #28
 800794c:	af00      	add	r7, sp, #0
 800794e:	60f8      	str	r0, [r7, #12]
 8007950:	60b9      	str	r1, [r7, #8]
 8007952:	607a      	str	r2, [r7, #4]
 8007954:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8007956:	2300      	movs	r3, #0
 8007958:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007966:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	021a      	lsls	r2, r3, #8
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	431a      	orrs	r2, r3
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	4313      	orrs	r3, r2
 8007974:	697a      	ldr	r2, [r7, #20]
 8007976:	4313      	orrs	r3, r2
 8007978:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	697a      	ldr	r2, [r7, #20]
 800797e:	609a      	str	r2, [r3, #8]
}
 8007980:	bf00      	nop
 8007982:	371c      	adds	r7, #28
 8007984:	46bd      	mov	sp, r7
 8007986:	bc80      	pop	{r7}
 8007988:	4770      	bx	lr

0800798a <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800798a:	b480      	push	{r7}
 800798c:	b087      	sub	sp, #28
 800798e:	af00      	add	r7, sp, #0
 8007990:	60f8      	str	r0, [r7, #12]
 8007992:	60b9      	str	r1, [r7, #8]
 8007994:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8007996:	2300      	movs	r3, #0
 8007998:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 800799a:	2201      	movs	r2, #1
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	fa02 f303 	lsl.w	r3, r2, r3
 80079a2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	6a1a      	ldr	r2, [r3, #32]
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	43db      	mvns	r3, r3
 80079ac:	401a      	ands	r2, r3
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	6a1a      	ldr	r2, [r3, #32]
 80079b6:	6879      	ldr	r1, [r7, #4]
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	fa01 f303 	lsl.w	r3, r1, r3
 80079be:	431a      	orrs	r2, r3
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	621a      	str	r2, [r3, #32]
}
 80079c4:	bf00      	nop
 80079c6:	371c      	adds	r7, #28
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bc80      	pop	{r7}
 80079cc:	4770      	bx	lr

080079ce <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80079ce:	b480      	push	{r7}
 80079d0:	b085      	sub	sp, #20
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6078      	str	r0, [r7, #4]
 80079d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0U;
 80079d8:	2300      	movs	r3, #0
 80079da:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d101      	bne.n	80079ea <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80079e6:	2302      	movs	r3, #2
 80079e8:	e044      	b.n	8007a74 <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2201      	movs	r2, #1
 80079ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	68db      	ldr	r3, [r3, #12]
 80079fc:	4313      	orrs	r3, r2
 80079fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4313      	orrs	r3, r2
 8007a28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	691b      	ldr	r3, [r3, #16]
 8007a34:	4313      	orrs	r3, r2
 8007a36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	695b      	ldr	r3, [r3, #20]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	699b      	ldr	r3, [r3, #24]
 8007a50:	4313      	orrs	r3, r2
 8007a52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	699b      	ldr	r3, [r3, #24]
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	68fa      	ldr	r2, [r7, #12]
 8007a68:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a72:	2300      	movs	r3, #0
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3714      	adds	r7, #20
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bc80      	pop	{r7}
 8007a7c:	4770      	bx	lr

08007a7e <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8007a7e:	b480      	push	{r7}
 8007a80:	b083      	sub	sp, #12
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
 8007a86:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d101      	bne.n	8007a96 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a92:	2302      	movs	r3, #2
 8007a94:	e032      	b.n	8007afc <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2201      	movs	r2, #1
 8007a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2202      	movs	r2, #2
 8007aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	685a      	ldr	r2, [r3, #4]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007ab4:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	6859      	ldr	r1, [r3, #4]
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	681a      	ldr	r2, [r3, #0]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	430a      	orrs	r2, r1
 8007ac6:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	689a      	ldr	r2, [r3, #8]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ad6:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	6899      	ldr	r1, [r3, #8]
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	685a      	ldr	r2, [r3, #4]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	430a      	orrs	r2, r1
 8007ae8:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2201      	movs	r2, #1
 8007aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2200      	movs	r2, #0
 8007af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007afa:	2300      	movs	r3, #0
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	370c      	adds	r7, #12
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bc80      	pop	{r7}
 8007b04:	4770      	bx	lr

08007b06 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b06:	b580      	push	{r7, lr}
 8007b08:	b082      	sub	sp, #8
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d101      	bne.n	8007b18 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b14:	2301      	movs	r3, #1
 8007b16:	e03f      	b.n	8007b98 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007b1e:	b2db      	uxtb	r3, r3
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d106      	bne.n	8007b32 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2200      	movs	r2, #0
 8007b28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f7fd f835 	bl	8004b9c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2224      	movs	r2, #36	; 0x24
 8007b36:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	68da      	ldr	r2, [r3, #12]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007b48:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 fc28 	bl	80083a0 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	691a      	ldr	r2, [r3, #16]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b5e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	695a      	ldr	r2, [r3, #20]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b6e:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	68da      	ldr	r2, [r3, #12]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b7e:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2200      	movs	r2, #0
 8007b84:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2220      	movs	r2, #32
 8007b8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2220      	movs	r2, #32
 8007b92:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8007b96:	2300      	movs	r3, #0
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3708      	adds	r7, #8
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b088      	sub	sp, #32
 8007ba4:	af02      	add	r7, sp, #8
 8007ba6:	60f8      	str	r0, [r7, #12]
 8007ba8:	60b9      	str	r1, [r7, #8]
 8007baa:	603b      	str	r3, [r7, #0]
 8007bac:	4613      	mov	r3, r2
 8007bae:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007bba:	b2db      	uxtb	r3, r3
 8007bbc:	2b20      	cmp	r3, #32
 8007bbe:	f040 8083 	bne.w	8007cc8 <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL) || (Size == 0U))
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d002      	beq.n	8007bce <HAL_UART_Transmit+0x2e>
 8007bc8:	88fb      	ldrh	r3, [r7, #6]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d101      	bne.n	8007bd2 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e07b      	b.n	8007cca <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d101      	bne.n	8007be0 <HAL_UART_Transmit+0x40>
 8007bdc:	2302      	movs	r3, #2
 8007bde:	e074      	b.n	8007cca <HAL_UART_Transmit+0x12a>
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2201      	movs	r2, #1
 8007be4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2200      	movs	r2, #0
 8007bec:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2221      	movs	r2, #33	; 0x21
 8007bf2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007bf6:	f7fd fc87 	bl	8005508 <HAL_GetTick>
 8007bfa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	88fa      	ldrh	r2, [r7, #6]
 8007c00:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	88fa      	ldrh	r2, [r7, #6]
 8007c06:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8007c08:	e042      	b.n	8007c90 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	3b01      	subs	r3, #1
 8007c12:	b29a      	uxth	r2, r3
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	689b      	ldr	r3, [r3, #8]
 8007c1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c20:	d122      	bne.n	8007c68 <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	9300      	str	r3, [sp, #0]
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	2180      	movs	r1, #128	; 0x80
 8007c2c:	68f8      	ldr	r0, [r7, #12]
 8007c2e:	f000 fa4e 	bl	80080ce <UART_WaitOnFlagUntilTimeout>
 8007c32:	4603      	mov	r3, r0
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d001      	beq.n	8007c3c <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8007c38:	2303      	movs	r3, #3
 8007c3a:	e046      	b.n	8007cca <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	881b      	ldrh	r3, [r3, #0]
 8007c44:	461a      	mov	r2, r3
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c4e:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	691b      	ldr	r3, [r3, #16]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d103      	bne.n	8007c60 <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	3302      	adds	r3, #2
 8007c5c:	60bb      	str	r3, [r7, #8]
 8007c5e:	e017      	b.n	8007c90 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData +=1U;
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	3301      	adds	r3, #1
 8007c64:	60bb      	str	r3, [r7, #8]
 8007c66:	e013      	b.n	8007c90 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	9300      	str	r3, [sp, #0]
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	2180      	movs	r1, #128	; 0x80
 8007c72:	68f8      	ldr	r0, [r7, #12]
 8007c74:	f000 fa2b 	bl	80080ce <UART_WaitOnFlagUntilTimeout>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d001      	beq.n	8007c82 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8007c7e:	2303      	movs	r3, #3
 8007c80:	e023      	b.n	8007cca <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	1c5a      	adds	r2, r3, #1
 8007c86:	60ba      	str	r2, [r7, #8]
 8007c88:	781a      	ldrb	r2, [r3, #0]
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007c94:	b29b      	uxth	r3, r3
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d1b7      	bne.n	8007c0a <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	9300      	str	r3, [sp, #0]
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	2140      	movs	r1, #64	; 0x40
 8007ca4:	68f8      	ldr	r0, [r7, #12]
 8007ca6:	f000 fa12 	bl	80080ce <UART_WaitOnFlagUntilTimeout>
 8007caa:	4603      	mov	r3, r0
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d001      	beq.n	8007cb4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007cb0:	2303      	movs	r3, #3
 8007cb2:	e00a      	b.n	8007cca <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2220      	movs	r2, #32
 8007cb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	e000      	b.n	8007cca <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8007cc8:	2302      	movs	r3, #2
  }
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3718      	adds	r7, #24
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}

08007cd2 <HAL_UART_Transmit_IT>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007cd2:	b480      	push	{r7}
 8007cd4:	b085      	sub	sp, #20
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	60f8      	str	r0, [r7, #12]
 8007cda:	60b9      	str	r1, [r7, #8]
 8007cdc:	4613      	mov	r3, r2
 8007cde:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007ce6:	b2db      	uxtb	r3, r3
 8007ce8:	2b20      	cmp	r3, #32
 8007cea:	d130      	bne.n	8007d4e <HAL_UART_Transmit_IT+0x7c>
  {
    if((pData == NULL) || (Size == 0U)) 
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d002      	beq.n	8007cf8 <HAL_UART_Transmit_IT+0x26>
 8007cf2:	88fb      	ldrh	r3, [r7, #6]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d101      	bne.n	8007cfc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	e029      	b.n	8007d50 <HAL_UART_Transmit_IT+0x7e>
    }
    /* Process Locked */
    __HAL_LOCK(huart);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d101      	bne.n	8007d0a <HAL_UART_Transmit_IT+0x38>
 8007d06:	2302      	movs	r3, #2
 8007d08:	e022      	b.n	8007d50 <HAL_UART_Transmit_IT+0x7e>
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	68ba      	ldr	r2, [r7, #8]
 8007d16:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	88fa      	ldrh	r2, [r7, #6]
 8007d1c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	88fa      	ldrh	r2, [r7, #6]
 8007d22:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2200      	movs	r2, #0
 8007d28:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2221      	movs	r2, #33	; 0x21
 8007d2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2200      	movs	r2, #0
 8007d36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	68da      	ldr	r2, [r3, #12]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007d48:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	e000      	b.n	8007d50 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8007d4e:	2302      	movs	r3, #2
  }
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3714      	adds	r7, #20
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bc80      	pop	{r7}
 8007d58:	4770      	bx	lr

08007d5a <HAL_UART_Receive_IT>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d5a:	b480      	push	{r7}
 8007d5c:	b085      	sub	sp, #20
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	60f8      	str	r0, [r7, #12]
 8007d62:	60b9      	str	r1, [r7, #8]
 8007d64:	4613      	mov	r3, r2
 8007d66:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007d6e:	b2db      	uxtb	r3, r3
 8007d70:	2b20      	cmp	r3, #32
 8007d72:	d140      	bne.n	8007df6 <HAL_UART_Receive_IT+0x9c>
  {
    if((pData == NULL) || (Size == 0U))
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d002      	beq.n	8007d80 <HAL_UART_Receive_IT+0x26>
 8007d7a:	88fb      	ldrh	r3, [r7, #6]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d101      	bne.n	8007d84 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007d80:	2301      	movs	r3, #1
 8007d82:	e039      	b.n	8007df8 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d101      	bne.n	8007d92 <HAL_UART_Receive_IT+0x38>
 8007d8e:	2302      	movs	r3, #2
 8007d90:	e032      	b.n	8007df8 <HAL_UART_Receive_IT+0x9e>
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2201      	movs	r2, #1
 8007d96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	68ba      	ldr	r2, [r7, #8]
 8007d9e:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	88fa      	ldrh	r2, [r7, #6]
 8007da4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	88fa      	ldrh	r2, [r7, #6]
 8007daa:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2200      	movs	r2, #0
 8007db0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2222      	movs	r2, #34	; 0x22
 8007db6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	68da      	ldr	r2, [r3, #12]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007dd0:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	695a      	ldr	r2, [r3, #20]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f042 0201 	orr.w	r2, r2, #1
 8007de0:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	68da      	ldr	r2, [r3, #12]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f042 0220 	orr.w	r2, r2, #32
 8007df0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8007df2:	2300      	movs	r3, #0
 8007df4:	e000      	b.n	8007df8 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8007df6:	2302      	movs	r3, #2
  }
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3714      	adds	r7, #20
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bc80      	pop	{r7}
 8007e00:	4770      	bx	lr

08007e02 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8007e02:	b580      	push	{r7, lr}
 8007e04:	b082      	sub	sp, #8
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	68da      	ldr	r2, [r3, #12]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007e18:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	695a      	ldr	r2, [r3, #20]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f022 0201 	bic.w	r2, r2, #1
 8007e28:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Rx request if enabled */
  if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	695b      	ldr	r3, [r3, #20]
 8007e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d014      	beq.n	8007e62 <HAL_UART_AbortReceive+0x60>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	695a      	ldr	r2, [r3, #20]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e46:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if(huart->hdmarx != NULL)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d008      	beq.n	8007e62 <HAL_UART_AbortReceive+0x60>
    {
      /* Set the UART DMA Abort callback to Null. 
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e54:	2200      	movs	r2, #0
 8007e56:	635a      	str	r2, [r3, #52]	; 0x34

      HAL_DMA_Abort(huart->hdmarx);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f7fd fd60 	bl	8005922 <HAL_DMA_Abort>
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2200      	movs	r2, #0
 8007e66:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2220      	movs	r2, #32
 8007e6c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007e70:	2300      	movs	r3, #0
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3708      	adds	r7, #8
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
	...

08007e7c <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b088      	sub	sp, #32
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	68db      	ldr	r3, [r3, #12]
 8007e92:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	695b      	ldr	r3, [r3, #20]
 8007e9a:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007ea4:	69fb      	ldr	r3, [r7, #28]
 8007ea6:	f003 030f 	and.w	r3, r3, #15
 8007eaa:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d10d      	bne.n	8007ece <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007eb2:	69fb      	ldr	r3, [r7, #28]
 8007eb4:	f003 0320 	and.w	r3, r3, #32
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d008      	beq.n	8007ece <HAL_UART_IRQHandler+0x52>
 8007ebc:	69bb      	ldr	r3, [r7, #24]
 8007ebe:	f003 0320 	and.w	r3, r3, #32
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d003      	beq.n	8007ece <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 f9e9 	bl	800829e <UART_Receive_IT>
      return;
 8007ecc:	e0cb      	b.n	8008066 <HAL_UART_IRQHandler+0x1ea>
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	f000 80ab 	beq.w	800802c <HAL_UART_IRQHandler+0x1b0>
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	f003 0301 	and.w	r3, r3, #1
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d105      	bne.n	8007eec <HAL_UART_IRQHandler+0x70>
 8007ee0:	69bb      	ldr	r3, [r7, #24]
 8007ee2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	f000 80a0 	beq.w	800802c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007eec:	69fb      	ldr	r3, [r7, #28]
 8007eee:	f003 0301 	and.w	r3, r3, #1
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d00a      	beq.n	8007f0c <HAL_UART_IRQHandler+0x90>
 8007ef6:	69bb      	ldr	r3, [r7, #24]
 8007ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d005      	beq.n	8007f0c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f04:	f043 0201 	orr.w	r2, r3, #1
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007f0c:	69fb      	ldr	r3, [r7, #28]
 8007f0e:	f003 0304 	and.w	r3, r3, #4
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d00a      	beq.n	8007f2c <HAL_UART_IRQHandler+0xb0>
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	f003 0301 	and.w	r3, r3, #1
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d005      	beq.n	8007f2c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f24:	f043 0202 	orr.w	r2, r3, #2
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007f2c:	69fb      	ldr	r3, [r7, #28]
 8007f2e:	f003 0302 	and.w	r3, r3, #2
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d00a      	beq.n	8007f4c <HAL_UART_IRQHandler+0xd0>
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	f003 0301 	and.w	r3, r3, #1
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d005      	beq.n	8007f4c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f44:	f043 0204 	orr.w	r2, r3, #4
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	f003 0308 	and.w	r3, r3, #8
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d00a      	beq.n	8007f6c <HAL_UART_IRQHandler+0xf0>
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	f003 0301 	and.w	r3, r3, #1
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d005      	beq.n	8007f6c <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f64:	f043 0208 	orr.w	r2, r3, #8
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d077      	beq.n	8008064 <HAL_UART_IRQHandler+0x1e8>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007f74:	69fb      	ldr	r3, [r7, #28]
 8007f76:	f003 0320 	and.w	r3, r3, #32
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d007      	beq.n	8007f8e <HAL_UART_IRQHandler+0x112>
 8007f7e:	69bb      	ldr	r3, [r7, #24]
 8007f80:	f003 0320 	and.w	r3, r3, #32
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d002      	beq.n	8007f8e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 f988 	bl	800829e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	695b      	ldr	r3, [r3, #20]
 8007f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	bf14      	ite	ne
 8007f9c:	2301      	movne	r3, #1
 8007f9e:	2300      	moveq	r3, #0
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fa8:	f003 0308 	and.w	r3, r3, #8
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d102      	bne.n	8007fb6 <HAL_UART_IRQHandler+0x13a>
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d031      	beq.n	800801a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 f8d3 	bl	8008162 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	695b      	ldr	r3, [r3, #20]
 8007fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d023      	beq.n	8008012 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	695a      	ldr	r2, [r3, #20]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fd8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d013      	beq.n	800800a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fe6:	4a21      	ldr	r2, [pc, #132]	; (800806c <HAL_UART_IRQHandler+0x1f0>)
 8007fe8:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f7fd fcc4 	bl	800597c <HAL_DMA_Abort_IT>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d016      	beq.n	8008028 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008004:	4610      	mov	r0, r2
 8008006:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008008:	e00e      	b.n	8008028 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 f839 	bl	8008082 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008010:	e00a      	b.n	8008028 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 f835 	bl	8008082 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008018:	e006      	b.n	8008028 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 f831 	bl	8008082 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2200      	movs	r2, #0
 8008024:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8008026:	e01d      	b.n	8008064 <HAL_UART_IRQHandler+0x1e8>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008028:	bf00      	nop
    return;
 800802a:	e01b      	b.n	8008064 <HAL_UART_IRQHandler+0x1e8>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800802c:	69fb      	ldr	r3, [r7, #28]
 800802e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008032:	2b00      	cmp	r3, #0
 8008034:	d008      	beq.n	8008048 <HAL_UART_IRQHandler+0x1cc>
 8008036:	69bb      	ldr	r3, [r7, #24]
 8008038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800803c:	2b00      	cmp	r3, #0
 800803e:	d003      	beq.n	8008048 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 f8bf 	bl	80081c4 <UART_Transmit_IT>
    return;
 8008046:	e00e      	b.n	8008066 <HAL_UART_IRQHandler+0x1ea>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008048:	69fb      	ldr	r3, [r7, #28]
 800804a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800804e:	2b00      	cmp	r3, #0
 8008050:	d009      	beq.n	8008066 <HAL_UART_IRQHandler+0x1ea>
 8008052:	69bb      	ldr	r3, [r7, #24]
 8008054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008058:	2b00      	cmp	r3, #0
 800805a:	d004      	beq.n	8008066 <HAL_UART_IRQHandler+0x1ea>
  {
    UART_EndTransmit_IT(huart);
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 f906 	bl	800826e <UART_EndTransmit_IT>
    return;
 8008062:	e000      	b.n	8008066 <HAL_UART_IRQHandler+0x1ea>
    return;
 8008064:	bf00      	nop
  }
}
 8008066:	3720      	adds	r7, #32
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}
 800806c:	0800819d 	.word	0x0800819d

08008070 <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 8008078:	bf00      	nop
 800807a:	370c      	adds	r7, #12
 800807c:	46bd      	mov	sp, r7
 800807e:	bc80      	pop	{r7}
 8008080:	4770      	bx	lr

08008082 <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008082:	b480      	push	{r7}
 8008084:	b083      	sub	sp, #12
 8008086:	af00      	add	r7, sp, #0
 8008088:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 800808a:	bf00      	nop
 800808c:	370c      	adds	r7, #12
 800808e:	46bd      	mov	sp, r7
 8008090:	bc80      	pop	{r7}
 8008092:	4770      	bx	lr

08008094 <HAL_UART_GetState>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8008094:	b480      	push	{r7}
 8008096:	b085      	sub	sp, #20
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  uint32_t temp1= 0x00U, temp2 = 0x00U;
 800809c:	2300      	movs	r3, #0
 800809e:	60fb      	str	r3, [r7, #12]
 80080a0:	2300      	movs	r3, #0
 80080a2:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80080aa:	b2db      	uxtb	r3, r3
 80080ac:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	60bb      	str	r3, [r7, #8]
  
  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	b2da      	uxtb	r2, r3
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	4313      	orrs	r3, r2
 80080c2:	b2db      	uxtb	r3, r3
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3714      	adds	r7, #20
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bc80      	pop	{r7}
 80080cc:	4770      	bx	lr

080080ce <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80080ce:	b580      	push	{r7, lr}
 80080d0:	b084      	sub	sp, #16
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	60f8      	str	r0, [r7, #12]
 80080d6:	60b9      	str	r1, [r7, #8]
 80080d8:	603b      	str	r3, [r7, #0]
 80080da:	4613      	mov	r3, r2
 80080dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80080de:	e02c      	b.n	800813a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80080e0:	69bb      	ldr	r3, [r7, #24]
 80080e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080e6:	d028      	beq.n	800813a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80080e8:	69bb      	ldr	r3, [r7, #24]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d007      	beq.n	80080fe <UART_WaitOnFlagUntilTimeout+0x30>
 80080ee:	f7fd fa0b 	bl	8005508 <HAL_GetTick>
 80080f2:	4602      	mov	r2, r0
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	1ad3      	subs	r3, r2, r3
 80080f8:	69ba      	ldr	r2, [r7, #24]
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d21d      	bcs.n	800813a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	68da      	ldr	r2, [r3, #12]
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800810c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	695a      	ldr	r2, [r3, #20]
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f022 0201 	bic.w	r2, r2, #1
 800811c:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2220      	movs	r2, #32
 8008122:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2220      	movs	r2, #32
 800812a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2200      	movs	r2, #0
 8008132:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8008136:	2303      	movs	r3, #3
 8008138:	e00f      	b.n	800815a <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	4013      	ands	r3, r2
 8008144:	68ba      	ldr	r2, [r7, #8]
 8008146:	429a      	cmp	r2, r3
 8008148:	bf0c      	ite	eq
 800814a:	2301      	moveq	r3, #1
 800814c:	2300      	movne	r3, #0
 800814e:	b2db      	uxtb	r3, r3
 8008150:	461a      	mov	r2, r3
 8008152:	79fb      	ldrb	r3, [r7, #7]
 8008154:	429a      	cmp	r2, r3
 8008156:	d0c3      	beq.n	80080e0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8008158:	2300      	movs	r3, #0
}
 800815a:	4618      	mov	r0, r3
 800815c:	3710      	adds	r7, #16
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}

08008162 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008162:	b480      	push	{r7}
 8008164:	b083      	sub	sp, #12
 8008166:	af00      	add	r7, sp, #0
 8008168:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	68da      	ldr	r2, [r3, #12]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008178:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	695a      	ldr	r2, [r3, #20]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f022 0201 	bic.w	r2, r2, #1
 8008188:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2220      	movs	r2, #32
 800818e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8008192:	bf00      	nop
 8008194:	370c      	adds	r7, #12
 8008196:	46bd      	mov	sp, r7
 8008198:	bc80      	pop	{r7}
 800819a:	4770      	bx	lr

0800819c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2200      	movs	r2, #0
 80081ae:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2200      	movs	r2, #0
 80081b4:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 80081b6:	68f8      	ldr	r0, [r7, #12]
 80081b8:	f7ff ff63 	bl	8008082 <HAL_UART_ErrorCallback>
}
 80081bc:	bf00      	nop
 80081be:	3710      	adds	r7, #16
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}

080081c4 <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b085      	sub	sp, #20
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	2b21      	cmp	r3, #33	; 0x21
 80081d6:	d144      	bne.n	8008262 <UART_Transmit_IT+0x9e>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081e0:	d11a      	bne.n	8008218 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6a1b      	ldr	r3, [r3, #32]
 80081e6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	881b      	ldrh	r3, [r3, #0]
 80081ec:	461a      	mov	r2, r3
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80081f6:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	691b      	ldr	r3, [r3, #16]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d105      	bne.n	800820c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6a1b      	ldr	r3, [r3, #32]
 8008204:	1c9a      	adds	r2, r3, #2
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	621a      	str	r2, [r3, #32]
 800820a:	e00e      	b.n	800822a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6a1b      	ldr	r3, [r3, #32]
 8008210:	1c5a      	adds	r2, r3, #1
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	621a      	str	r2, [r3, #32]
 8008216:	e008      	b.n	800822a <UART_Transmit_IT+0x66>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6a1b      	ldr	r3, [r3, #32]
 800821c:	1c59      	adds	r1, r3, #1
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	6211      	str	r1, [r2, #32]
 8008222:	781a      	ldrb	r2, [r3, #0]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800822e:	b29b      	uxth	r3, r3
 8008230:	3b01      	subs	r3, #1
 8008232:	b29b      	uxth	r3, r3
 8008234:	687a      	ldr	r2, [r7, #4]
 8008236:	4619      	mov	r1, r3
 8008238:	84d1      	strh	r1, [r2, #38]	; 0x26
 800823a:	2b00      	cmp	r3, #0
 800823c:	d10f      	bne.n	800825e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	68da      	ldr	r2, [r3, #12]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800824c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	68da      	ldr	r2, [r3, #12]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800825c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800825e:	2300      	movs	r3, #0
 8008260:	e000      	b.n	8008264 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008262:	2302      	movs	r3, #2
  }
}
 8008264:	4618      	mov	r0, r3
 8008266:	3714      	adds	r7, #20
 8008268:	46bd      	mov	sp, r7
 800826a:	bc80      	pop	{r7}
 800826c:	4770      	bx	lr

0800826e <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800826e:	b580      	push	{r7, lr}
 8008270:	b082      	sub	sp, #8
 8008272:	af00      	add	r7, sp, #0
 8008274:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	68da      	ldr	r2, [r3, #12]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008284:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2220      	movs	r2, #32
 800828a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f7ff feee 	bl	8008070 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 8008294:	2300      	movs	r3, #0
}
 8008296:	4618      	mov	r0, r3
 8008298:	3708      	adds	r7, #8
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}

0800829e <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800829e:	b580      	push	{r7, lr}
 80082a0:	b084      	sub	sp, #16
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80082ac:	b2db      	uxtb	r3, r3
 80082ae:	2b22      	cmp	r3, #34	; 0x22
 80082b0:	d171      	bne.n	8008396 <UART_Receive_IT+0xf8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	689b      	ldr	r3, [r3, #8]
 80082b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082ba:	d123      	bne.n	8008304 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082c0:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	691b      	ldr	r3, [r3, #16]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d10e      	bne.n	80082e8 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082d6:	b29a      	uxth	r2, r3
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082e0:	1c9a      	adds	r2, r3, #2
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	629a      	str	r2, [r3, #40]	; 0x28
 80082e6:	e029      	b.n	800833c <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	b29b      	uxth	r3, r3
 80082f0:	b2db      	uxtb	r3, r3
 80082f2:	b29a      	uxth	r2, r3
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082fc:	1c5a      	adds	r2, r3, #1
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	629a      	str	r2, [r3, #40]	; 0x28
 8008302:	e01b      	b.n	800833c <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	691b      	ldr	r3, [r3, #16]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d10a      	bne.n	8008322 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	6858      	ldr	r0, [r3, #4]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008316:	1c59      	adds	r1, r3, #1
 8008318:	687a      	ldr	r2, [r7, #4]
 800831a:	6291      	str	r1, [r2, #40]	; 0x28
 800831c:	b2c2      	uxtb	r2, r0
 800831e:	701a      	strb	r2, [r3, #0]
 8008320:	e00c      	b.n	800833c <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	b2da      	uxtb	r2, r3
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800832e:	1c58      	adds	r0, r3, #1
 8008330:	6879      	ldr	r1, [r7, #4]
 8008332:	6288      	str	r0, [r1, #40]	; 0x28
 8008334:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008338:	b2d2      	uxtb	r2, r2
 800833a:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008340:	b29b      	uxth	r3, r3
 8008342:	3b01      	subs	r3, #1
 8008344:	b29b      	uxth	r3, r3
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	4619      	mov	r1, r3
 800834a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800834c:	2b00      	cmp	r3, #0
 800834e:	d120      	bne.n	8008392 <UART_Receive_IT+0xf4>
    {
      /* Disable the IRDA Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	68da      	ldr	r2, [r3, #12]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f022 0220 	bic.w	r2, r2, #32
 800835e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	68da      	ldr	r2, [r3, #12]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800836e:	60da      	str	r2, [r3, #12]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	695a      	ldr	r2, [r3, #20]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f022 0201 	bic.w	r2, r2, #1
 800837e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2220      	movs	r2, #32
 8008384:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      HAL_UART_RxCpltCallback(huart);
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f7fc fcb3 	bl	8004cf4 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 800838e:	2300      	movs	r3, #0
 8008390:	e002      	b.n	8008398 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8008392:	2300      	movs	r3, #0
 8008394:	e000      	b.n	8008398 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8008396:	2302      	movs	r3, #2
  }
}
 8008398:	4618      	mov	r0, r3
 800839a:	3710      	adds	r7, #16
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80083a0:	b5b0      	push	{r4, r5, r7, lr}
 80083a2:	b084      	sub	sp, #16
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80083a8:	2300      	movs	r3, #0
 80083aa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	691b      	ldr	r3, [r3, #16]
 80083b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	68da      	ldr	r2, [r3, #12]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	430a      	orrs	r2, r1
 80083c0:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	689a      	ldr	r2, [r3, #8]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	691b      	ldr	r3, [r3, #16]
 80083ca:	431a      	orrs	r2, r3
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	695b      	ldr	r3, [r3, #20]
 80083d0:	4313      	orrs	r3, r2
 80083d2:	68fa      	ldr	r2, [r7, #12]
 80083d4:	4313      	orrs	r3, r2
 80083d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	68db      	ldr	r3, [r3, #12]
 80083de:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80083e2:	f023 030c 	bic.w	r3, r3, #12
 80083e6:	687a      	ldr	r2, [r7, #4]
 80083e8:	6812      	ldr	r2, [r2, #0]
 80083ea:	68f9      	ldr	r1, [r7, #12]
 80083ec:	430b      	orrs	r3, r1
 80083ee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	695b      	ldr	r3, [r3, #20]
 80083f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	699a      	ldr	r2, [r3, #24]
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	430a      	orrs	r2, r1
 8008404:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a6f      	ldr	r2, [pc, #444]	; (80085c8 <UART_SetConfig+0x228>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d16b      	bne.n	80084e8 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8008410:	f7fe fc0c 	bl	8006c2c <HAL_RCC_GetPCLK2Freq>
 8008414:	4602      	mov	r2, r0
 8008416:	4613      	mov	r3, r2
 8008418:	009b      	lsls	r3, r3, #2
 800841a:	4413      	add	r3, r2
 800841c:	009a      	lsls	r2, r3, #2
 800841e:	441a      	add	r2, r3
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	fbb2 f3f3 	udiv	r3, r2, r3
 800842a:	4a68      	ldr	r2, [pc, #416]	; (80085cc <UART_SetConfig+0x22c>)
 800842c:	fba2 2303 	umull	r2, r3, r2, r3
 8008430:	095b      	lsrs	r3, r3, #5
 8008432:	011c      	lsls	r4, r3, #4
 8008434:	f7fe fbfa 	bl	8006c2c <HAL_RCC_GetPCLK2Freq>
 8008438:	4602      	mov	r2, r0
 800843a:	4613      	mov	r3, r2
 800843c:	009b      	lsls	r3, r3, #2
 800843e:	4413      	add	r3, r2
 8008440:	009a      	lsls	r2, r3, #2
 8008442:	441a      	add	r2, r3
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	fbb2 f5f3 	udiv	r5, r2, r3
 800844e:	f7fe fbed 	bl	8006c2c <HAL_RCC_GetPCLK2Freq>
 8008452:	4602      	mov	r2, r0
 8008454:	4613      	mov	r3, r2
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	4413      	add	r3, r2
 800845a:	009a      	lsls	r2, r3, #2
 800845c:	441a      	add	r2, r3
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	009b      	lsls	r3, r3, #2
 8008464:	fbb2 f3f3 	udiv	r3, r2, r3
 8008468:	4a58      	ldr	r2, [pc, #352]	; (80085cc <UART_SetConfig+0x22c>)
 800846a:	fba2 2303 	umull	r2, r3, r2, r3
 800846e:	095b      	lsrs	r3, r3, #5
 8008470:	2264      	movs	r2, #100	; 0x64
 8008472:	fb02 f303 	mul.w	r3, r2, r3
 8008476:	1aeb      	subs	r3, r5, r3
 8008478:	011b      	lsls	r3, r3, #4
 800847a:	3332      	adds	r3, #50	; 0x32
 800847c:	4a53      	ldr	r2, [pc, #332]	; (80085cc <UART_SetConfig+0x22c>)
 800847e:	fba2 2303 	umull	r2, r3, r2, r3
 8008482:	095b      	lsrs	r3, r3, #5
 8008484:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008488:	441c      	add	r4, r3
 800848a:	f7fe fbcf 	bl	8006c2c <HAL_RCC_GetPCLK2Freq>
 800848e:	4602      	mov	r2, r0
 8008490:	4613      	mov	r3, r2
 8008492:	009b      	lsls	r3, r3, #2
 8008494:	4413      	add	r3, r2
 8008496:	009a      	lsls	r2, r3, #2
 8008498:	441a      	add	r2, r3
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	009b      	lsls	r3, r3, #2
 80084a0:	fbb2 f5f3 	udiv	r5, r2, r3
 80084a4:	f7fe fbc2 	bl	8006c2c <HAL_RCC_GetPCLK2Freq>
 80084a8:	4602      	mov	r2, r0
 80084aa:	4613      	mov	r3, r2
 80084ac:	009b      	lsls	r3, r3, #2
 80084ae:	4413      	add	r3, r2
 80084b0:	009a      	lsls	r2, r3, #2
 80084b2:	441a      	add	r2, r3
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	009b      	lsls	r3, r3, #2
 80084ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80084be:	4a43      	ldr	r2, [pc, #268]	; (80085cc <UART_SetConfig+0x22c>)
 80084c0:	fba2 2303 	umull	r2, r3, r2, r3
 80084c4:	095b      	lsrs	r3, r3, #5
 80084c6:	2264      	movs	r2, #100	; 0x64
 80084c8:	fb02 f303 	mul.w	r3, r2, r3
 80084cc:	1aeb      	subs	r3, r5, r3
 80084ce:	011b      	lsls	r3, r3, #4
 80084d0:	3332      	adds	r3, #50	; 0x32
 80084d2:	4a3e      	ldr	r2, [pc, #248]	; (80085cc <UART_SetConfig+0x22c>)
 80084d4:	fba2 2303 	umull	r2, r3, r2, r3
 80084d8:	095b      	lsrs	r3, r3, #5
 80084da:	f003 020f 	and.w	r2, r3, #15
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4422      	add	r2, r4
 80084e4:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80084e6:	e06a      	b.n	80085be <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80084e8:	f7fe fb8c 	bl	8006c04 <HAL_RCC_GetPCLK1Freq>
 80084ec:	4602      	mov	r2, r0
 80084ee:	4613      	mov	r3, r2
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	4413      	add	r3, r2
 80084f4:	009a      	lsls	r2, r3, #2
 80084f6:	441a      	add	r2, r3
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	009b      	lsls	r3, r3, #2
 80084fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008502:	4a32      	ldr	r2, [pc, #200]	; (80085cc <UART_SetConfig+0x22c>)
 8008504:	fba2 2303 	umull	r2, r3, r2, r3
 8008508:	095b      	lsrs	r3, r3, #5
 800850a:	011c      	lsls	r4, r3, #4
 800850c:	f7fe fb7a 	bl	8006c04 <HAL_RCC_GetPCLK1Freq>
 8008510:	4602      	mov	r2, r0
 8008512:	4613      	mov	r3, r2
 8008514:	009b      	lsls	r3, r3, #2
 8008516:	4413      	add	r3, r2
 8008518:	009a      	lsls	r2, r3, #2
 800851a:	441a      	add	r2, r3
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	009b      	lsls	r3, r3, #2
 8008522:	fbb2 f5f3 	udiv	r5, r2, r3
 8008526:	f7fe fb6d 	bl	8006c04 <HAL_RCC_GetPCLK1Freq>
 800852a:	4602      	mov	r2, r0
 800852c:	4613      	mov	r3, r2
 800852e:	009b      	lsls	r3, r3, #2
 8008530:	4413      	add	r3, r2
 8008532:	009a      	lsls	r2, r3, #2
 8008534:	441a      	add	r2, r3
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	009b      	lsls	r3, r3, #2
 800853c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008540:	4a22      	ldr	r2, [pc, #136]	; (80085cc <UART_SetConfig+0x22c>)
 8008542:	fba2 2303 	umull	r2, r3, r2, r3
 8008546:	095b      	lsrs	r3, r3, #5
 8008548:	2264      	movs	r2, #100	; 0x64
 800854a:	fb02 f303 	mul.w	r3, r2, r3
 800854e:	1aeb      	subs	r3, r5, r3
 8008550:	011b      	lsls	r3, r3, #4
 8008552:	3332      	adds	r3, #50	; 0x32
 8008554:	4a1d      	ldr	r2, [pc, #116]	; (80085cc <UART_SetConfig+0x22c>)
 8008556:	fba2 2303 	umull	r2, r3, r2, r3
 800855a:	095b      	lsrs	r3, r3, #5
 800855c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008560:	441c      	add	r4, r3
 8008562:	f7fe fb4f 	bl	8006c04 <HAL_RCC_GetPCLK1Freq>
 8008566:	4602      	mov	r2, r0
 8008568:	4613      	mov	r3, r2
 800856a:	009b      	lsls	r3, r3, #2
 800856c:	4413      	add	r3, r2
 800856e:	009a      	lsls	r2, r3, #2
 8008570:	441a      	add	r2, r3
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	009b      	lsls	r3, r3, #2
 8008578:	fbb2 f5f3 	udiv	r5, r2, r3
 800857c:	f7fe fb42 	bl	8006c04 <HAL_RCC_GetPCLK1Freq>
 8008580:	4602      	mov	r2, r0
 8008582:	4613      	mov	r3, r2
 8008584:	009b      	lsls	r3, r3, #2
 8008586:	4413      	add	r3, r2
 8008588:	009a      	lsls	r2, r3, #2
 800858a:	441a      	add	r2, r3
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	fbb2 f3f3 	udiv	r3, r2, r3
 8008596:	4a0d      	ldr	r2, [pc, #52]	; (80085cc <UART_SetConfig+0x22c>)
 8008598:	fba2 2303 	umull	r2, r3, r2, r3
 800859c:	095b      	lsrs	r3, r3, #5
 800859e:	2264      	movs	r2, #100	; 0x64
 80085a0:	fb02 f303 	mul.w	r3, r2, r3
 80085a4:	1aeb      	subs	r3, r5, r3
 80085a6:	011b      	lsls	r3, r3, #4
 80085a8:	3332      	adds	r3, #50	; 0x32
 80085aa:	4a08      	ldr	r2, [pc, #32]	; (80085cc <UART_SetConfig+0x22c>)
 80085ac:	fba2 2303 	umull	r2, r3, r2, r3
 80085b0:	095b      	lsrs	r3, r3, #5
 80085b2:	f003 020f 	and.w	r2, r3, #15
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4422      	add	r2, r4
 80085bc:	609a      	str	r2, [r3, #8]
}
 80085be:	bf00      	nop
 80085c0:	3710      	adds	r7, #16
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bdb0      	pop	{r4, r5, r7, pc}
 80085c6:	bf00      	nop
 80085c8:	40013800 	.word	0x40013800
 80085cc:	51eb851f 	.word	0x51eb851f

080085d0 <FSMC_NORSRAM_Init>:
  * @param  Device: Pointer to NORSRAM device instance
  * @param  Init: Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef *Init)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b083      	sub	sp, #12
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_EXTENDED_MODE(Init->ExtendedMode));
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	681a      	ldr	r2, [r3, #0]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085e4:	683a      	ldr	r2, [r7, #0]
 80085e6:	6812      	ldr	r2, [r2, #0]
 80085e8:	f023 0101 	bic.w	r1, r3, #1
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	689b      	ldr	r3, [r3, #8]
 80085f6:	2b08      	cmp	r3, #8
 80085f8:	d132      	bne.n	8008660 <FSMC_NORSRAM_Init+0x90>
  {
    MODIFY_REG(Device->BTCR[Init->NSBank], BCR_CLEAR_MASK, (uint32_t)(FSMC_NORSRAM_FLASH_ACCESS_ENABLE
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	681a      	ldr	r2, [r3, #0]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008604:	4b31      	ldr	r3, [pc, #196]	; (80086cc <FSMC_NORSRAM_Init+0xfc>)
 8008606:	4013      	ands	r3, r2
 8008608:	683a      	ldr	r2, [r7, #0]
 800860a:	6851      	ldr	r1, [r2, #4]
 800860c:	683a      	ldr	r2, [r7, #0]
 800860e:	6892      	ldr	r2, [r2, #8]
 8008610:	4311      	orrs	r1, r2
 8008612:	683a      	ldr	r2, [r7, #0]
 8008614:	68d2      	ldr	r2, [r2, #12]
 8008616:	4311      	orrs	r1, r2
 8008618:	683a      	ldr	r2, [r7, #0]
 800861a:	6912      	ldr	r2, [r2, #16]
 800861c:	4311      	orrs	r1, r2
 800861e:	683a      	ldr	r2, [r7, #0]
 8008620:	6952      	ldr	r2, [r2, #20]
 8008622:	4311      	orrs	r1, r2
 8008624:	683a      	ldr	r2, [r7, #0]
 8008626:	6992      	ldr	r2, [r2, #24]
 8008628:	4311      	orrs	r1, r2
 800862a:	683a      	ldr	r2, [r7, #0]
 800862c:	69d2      	ldr	r2, [r2, #28]
 800862e:	4311      	orrs	r1, r2
 8008630:	683a      	ldr	r2, [r7, #0]
 8008632:	6a12      	ldr	r2, [r2, #32]
 8008634:	4311      	orrs	r1, r2
 8008636:	683a      	ldr	r2, [r7, #0]
 8008638:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800863a:	4311      	orrs	r1, r2
 800863c:	683a      	ldr	r2, [r7, #0]
 800863e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8008640:	4311      	orrs	r1, r2
 8008642:	683a      	ldr	r2, [r7, #0]
 8008644:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008646:	4311      	orrs	r1, r2
 8008648:	683a      	ldr	r2, [r7, #0]
 800864a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800864c:	430a      	orrs	r2, r1
 800864e:	4313      	orrs	r3, r2
 8008650:	683a      	ldr	r2, [r7, #0]
 8008652:	6812      	ldr	r2, [r2, #0]
 8008654:	f043 0140 	orr.w	r1, r3, #64	; 0x40
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800865e:	e02f      	b.n	80086c0 <FSMC_NORSRAM_Init+0xf0>
                                                                     )
              );
  }
  else
  {
    MODIFY_REG(Device->BTCR[Init->NSBank], BCR_CLEAR_MASK, (uint32_t)(FSMC_NORSRAM_FLASH_ACCESS_DISABLE
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	681a      	ldr	r2, [r3, #0]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800866a:	4b18      	ldr	r3, [pc, #96]	; (80086cc <FSMC_NORSRAM_Init+0xfc>)
 800866c:	4013      	ands	r3, r2
 800866e:	683a      	ldr	r2, [r7, #0]
 8008670:	6851      	ldr	r1, [r2, #4]
 8008672:	683a      	ldr	r2, [r7, #0]
 8008674:	6892      	ldr	r2, [r2, #8]
 8008676:	4311      	orrs	r1, r2
 8008678:	683a      	ldr	r2, [r7, #0]
 800867a:	68d2      	ldr	r2, [r2, #12]
 800867c:	4311      	orrs	r1, r2
 800867e:	683a      	ldr	r2, [r7, #0]
 8008680:	6912      	ldr	r2, [r2, #16]
 8008682:	4311      	orrs	r1, r2
 8008684:	683a      	ldr	r2, [r7, #0]
 8008686:	6952      	ldr	r2, [r2, #20]
 8008688:	4311      	orrs	r1, r2
 800868a:	683a      	ldr	r2, [r7, #0]
 800868c:	6992      	ldr	r2, [r2, #24]
 800868e:	4311      	orrs	r1, r2
 8008690:	683a      	ldr	r2, [r7, #0]
 8008692:	69d2      	ldr	r2, [r2, #28]
 8008694:	4311      	orrs	r1, r2
 8008696:	683a      	ldr	r2, [r7, #0]
 8008698:	6a12      	ldr	r2, [r2, #32]
 800869a:	4311      	orrs	r1, r2
 800869c:	683a      	ldr	r2, [r7, #0]
 800869e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80086a0:	4311      	orrs	r1, r2
 80086a2:	683a      	ldr	r2, [r7, #0]
 80086a4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80086a6:	4311      	orrs	r1, r2
 80086a8:	683a      	ldr	r2, [r7, #0]
 80086aa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80086ac:	4311      	orrs	r1, r2
 80086ae:	683a      	ldr	r2, [r7, #0]
 80086b0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80086b2:	4311      	orrs	r1, r2
 80086b4:	683a      	ldr	r2, [r7, #0]
 80086b6:	6812      	ldr	r2, [r2, #0]
 80086b8:	4319      	orrs	r1, r3
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
               | Init->WriteBurst
                                                                     )
              );
  }

  return HAL_OK;
 80086c0:	2300      	movs	r3, #0
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	370c      	adds	r7, #12
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bc80      	pop	{r7}
 80086ca:	4770      	bx	lr
 80086cc:	fff70081 	.word	0xfff70081

080086d0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing: Pointer to NORSRAM Timing structure
  * @param  Bank: NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b085      	sub	sp, #20
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	60f8      	str	r0, [r7, #12]
 80086d8:	60b9      	str	r1, [r7, #8]
 80086da:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U],                                                        \
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	1c5a      	adds	r2, r3, #1
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086e6:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	681a      	ldr	r2, [r3, #0]
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	011b      	lsls	r3, r3, #4
 80086f4:	431a      	orrs	r2, r3
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	689b      	ldr	r3, [r3, #8]
 80086fa:	021b      	lsls	r3, r3, #8
 80086fc:	431a      	orrs	r2, r3
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	68db      	ldr	r3, [r3, #12]
 8008702:	041b      	lsls	r3, r3, #16
 8008704:	431a      	orrs	r2, r3
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	691b      	ldr	r3, [r3, #16]
 800870a:	3b01      	subs	r3, #1
 800870c:	051b      	lsls	r3, r3, #20
 800870e:	431a      	orrs	r2, r3
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	695b      	ldr	r3, [r3, #20]
 8008714:	3b02      	subs	r3, #2
 8008716:	061b      	lsls	r3, r3, #24
 8008718:	431a      	orrs	r2, r3
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	699b      	ldr	r3, [r3, #24]
 800871e:	4313      	orrs	r3, r2
 8008720:	687a      	ldr	r2, [r7, #4]
 8008722:	3201      	adds	r2, #1
 8008724:	4319      	orrs	r1, r3
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                        ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos)       | \
                        (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)        | \
                        (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)        | \
                        (Timing->AccessMode)));

  return HAL_OK;
 800872c:	2300      	movs	r3, #0
}
 800872e:	4618      	mov	r0, r3
 8008730:	3714      	adds	r7, #20
 8008732:	46bd      	mov	sp, r7
 8008734:	bc80      	pop	{r7}
 8008736:	4770      	bx	lr

08008738 <FSMC_NORSRAM_Extended_Timing_Init>:
  *            @arg FSMC_EXTENDED_MODE_DISABLE
  *            @arg FSMC_EXTENDED_MODE_ENABLE
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8008738:	b480      	push	{r7}
 800873a:	b085      	sub	sp, #20
 800873c:	af00      	add	r7, sp, #0
 800873e:	60f8      	str	r0, [r7, #12]
 8008740:	60b9      	str	r1, [r7, #8]
 8008742:	607a      	str	r2, [r7, #4]
 8008744:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800874c:	d11d      	bne.n	800878a <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(STM32F101xE) || defined(STM32F103xE) || defined(STM32F101xG) || defined(STM32F103xG)
    MODIFY_REG(Device->BWTR[Bank],                                                      \
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	687a      	ldr	r2, [r7, #4]
 8008752:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008756:	4b13      	ldr	r3, [pc, #76]	; (80087a4 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8008758:	4013      	ands	r3, r2
 800875a:	68ba      	ldr	r2, [r7, #8]
 800875c:	6811      	ldr	r1, [r2, #0]
 800875e:	68ba      	ldr	r2, [r7, #8]
 8008760:	6852      	ldr	r2, [r2, #4]
 8008762:	0112      	lsls	r2, r2, #4
 8008764:	4311      	orrs	r1, r2
 8008766:	68ba      	ldr	r2, [r7, #8]
 8008768:	6892      	ldr	r2, [r2, #8]
 800876a:	0212      	lsls	r2, r2, #8
 800876c:	4311      	orrs	r1, r2
 800876e:	68ba      	ldr	r2, [r7, #8]
 8008770:	6992      	ldr	r2, [r2, #24]
 8008772:	4311      	orrs	r1, r2
 8008774:	68ba      	ldr	r2, [r7, #8]
 8008776:	68d2      	ldr	r2, [r2, #12]
 8008778:	0412      	lsls	r2, r2, #16
 800877a:	430a      	orrs	r2, r1
 800877c:	ea43 0102 	orr.w	r1, r3, r2
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	687a      	ldr	r2, [r7, #4]
 8008784:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008788:	e005      	b.n	8008796 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                          (((Timing->DataLatency) - 2U)  << FSMC_BWTRx_DATLAT_Pos)));
#endif /* STM32F101xE || STM32F103xE || STM32F101xG || STM32F103xG */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	687a      	ldr	r2, [r7, #4]
 800878e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8008792:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8008796:	2300      	movs	r3, #0
}
 8008798:	4618      	mov	r0, r3
 800879a:	3714      	adds	r7, #20
 800879c:	46bd      	mov	sp, r7
 800879e:	bc80      	pop	{r7}
 80087a0:	4770      	bx	lr
 80087a2:	bf00      	nop
 80087a4:	cff00000 	.word	0xcff00000

080087a8 <__errno>:
 80087a8:	4b01      	ldr	r3, [pc, #4]	; (80087b0 <__errno+0x8>)
 80087aa:	6818      	ldr	r0, [r3, #0]
 80087ac:	4770      	bx	lr
 80087ae:	bf00      	nop
 80087b0:	200001e8 	.word	0x200001e8

080087b4 <__libc_init_array>:
 80087b4:	b570      	push	{r4, r5, r6, lr}
 80087b6:	2600      	movs	r6, #0
 80087b8:	4d0c      	ldr	r5, [pc, #48]	; (80087ec <__libc_init_array+0x38>)
 80087ba:	4c0d      	ldr	r4, [pc, #52]	; (80087f0 <__libc_init_array+0x3c>)
 80087bc:	1b64      	subs	r4, r4, r5
 80087be:	10a4      	asrs	r4, r4, #2
 80087c0:	42a6      	cmp	r6, r4
 80087c2:	d109      	bne.n	80087d8 <__libc_init_array+0x24>
 80087c4:	f000 fd18 	bl	80091f8 <_init>
 80087c8:	2600      	movs	r6, #0
 80087ca:	4d0a      	ldr	r5, [pc, #40]	; (80087f4 <__libc_init_array+0x40>)
 80087cc:	4c0a      	ldr	r4, [pc, #40]	; (80087f8 <__libc_init_array+0x44>)
 80087ce:	1b64      	subs	r4, r4, r5
 80087d0:	10a4      	asrs	r4, r4, #2
 80087d2:	42a6      	cmp	r6, r4
 80087d4:	d105      	bne.n	80087e2 <__libc_init_array+0x2e>
 80087d6:	bd70      	pop	{r4, r5, r6, pc}
 80087d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80087dc:	4798      	blx	r3
 80087de:	3601      	adds	r6, #1
 80087e0:	e7ee      	b.n	80087c0 <__libc_init_array+0xc>
 80087e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80087e6:	4798      	blx	r3
 80087e8:	3601      	adds	r6, #1
 80087ea:	e7f2      	b.n	80087d2 <__libc_init_array+0x1e>
 80087ec:	08009cec 	.word	0x08009cec
 80087f0:	08009cec 	.word	0x08009cec
 80087f4:	08009cec 	.word	0x08009cec
 80087f8:	08009cf0 	.word	0x08009cf0

080087fc <memset>:
 80087fc:	4603      	mov	r3, r0
 80087fe:	4402      	add	r2, r0
 8008800:	4293      	cmp	r3, r2
 8008802:	d100      	bne.n	8008806 <memset+0xa>
 8008804:	4770      	bx	lr
 8008806:	f803 1b01 	strb.w	r1, [r3], #1
 800880a:	e7f9      	b.n	8008800 <memset+0x4>

0800880c <_puts_r>:
 800880c:	b570      	push	{r4, r5, r6, lr}
 800880e:	460e      	mov	r6, r1
 8008810:	4605      	mov	r5, r0
 8008812:	b118      	cbz	r0, 800881c <_puts_r+0x10>
 8008814:	6983      	ldr	r3, [r0, #24]
 8008816:	b90b      	cbnz	r3, 800881c <_puts_r+0x10>
 8008818:	f000 fa44 	bl	8008ca4 <__sinit>
 800881c:	69ab      	ldr	r3, [r5, #24]
 800881e:	68ac      	ldr	r4, [r5, #8]
 8008820:	b913      	cbnz	r3, 8008828 <_puts_r+0x1c>
 8008822:	4628      	mov	r0, r5
 8008824:	f000 fa3e 	bl	8008ca4 <__sinit>
 8008828:	4b2c      	ldr	r3, [pc, #176]	; (80088dc <_puts_r+0xd0>)
 800882a:	429c      	cmp	r4, r3
 800882c:	d120      	bne.n	8008870 <_puts_r+0x64>
 800882e:	686c      	ldr	r4, [r5, #4]
 8008830:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008832:	07db      	lsls	r3, r3, #31
 8008834:	d405      	bmi.n	8008842 <_puts_r+0x36>
 8008836:	89a3      	ldrh	r3, [r4, #12]
 8008838:	0598      	lsls	r0, r3, #22
 800883a:	d402      	bmi.n	8008842 <_puts_r+0x36>
 800883c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800883e:	f000 facf 	bl	8008de0 <__retarget_lock_acquire_recursive>
 8008842:	89a3      	ldrh	r3, [r4, #12]
 8008844:	0719      	lsls	r1, r3, #28
 8008846:	d51d      	bpl.n	8008884 <_puts_r+0x78>
 8008848:	6923      	ldr	r3, [r4, #16]
 800884a:	b1db      	cbz	r3, 8008884 <_puts_r+0x78>
 800884c:	3e01      	subs	r6, #1
 800884e:	68a3      	ldr	r3, [r4, #8]
 8008850:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008854:	3b01      	subs	r3, #1
 8008856:	60a3      	str	r3, [r4, #8]
 8008858:	bb39      	cbnz	r1, 80088aa <_puts_r+0x9e>
 800885a:	2b00      	cmp	r3, #0
 800885c:	da38      	bge.n	80088d0 <_puts_r+0xc4>
 800885e:	4622      	mov	r2, r4
 8008860:	210a      	movs	r1, #10
 8008862:	4628      	mov	r0, r5
 8008864:	f000 f848 	bl	80088f8 <__swbuf_r>
 8008868:	3001      	adds	r0, #1
 800886a:	d011      	beq.n	8008890 <_puts_r+0x84>
 800886c:	250a      	movs	r5, #10
 800886e:	e011      	b.n	8008894 <_puts_r+0x88>
 8008870:	4b1b      	ldr	r3, [pc, #108]	; (80088e0 <_puts_r+0xd4>)
 8008872:	429c      	cmp	r4, r3
 8008874:	d101      	bne.n	800887a <_puts_r+0x6e>
 8008876:	68ac      	ldr	r4, [r5, #8]
 8008878:	e7da      	b.n	8008830 <_puts_r+0x24>
 800887a:	4b1a      	ldr	r3, [pc, #104]	; (80088e4 <_puts_r+0xd8>)
 800887c:	429c      	cmp	r4, r3
 800887e:	bf08      	it	eq
 8008880:	68ec      	ldreq	r4, [r5, #12]
 8008882:	e7d5      	b.n	8008830 <_puts_r+0x24>
 8008884:	4621      	mov	r1, r4
 8008886:	4628      	mov	r0, r5
 8008888:	f000 f888 	bl	800899c <__swsetup_r>
 800888c:	2800      	cmp	r0, #0
 800888e:	d0dd      	beq.n	800884c <_puts_r+0x40>
 8008890:	f04f 35ff 	mov.w	r5, #4294967295
 8008894:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008896:	07da      	lsls	r2, r3, #31
 8008898:	d405      	bmi.n	80088a6 <_puts_r+0x9a>
 800889a:	89a3      	ldrh	r3, [r4, #12]
 800889c:	059b      	lsls	r3, r3, #22
 800889e:	d402      	bmi.n	80088a6 <_puts_r+0x9a>
 80088a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088a2:	f000 fa9e 	bl	8008de2 <__retarget_lock_release_recursive>
 80088a6:	4628      	mov	r0, r5
 80088a8:	bd70      	pop	{r4, r5, r6, pc}
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	da04      	bge.n	80088b8 <_puts_r+0xac>
 80088ae:	69a2      	ldr	r2, [r4, #24]
 80088b0:	429a      	cmp	r2, r3
 80088b2:	dc06      	bgt.n	80088c2 <_puts_r+0xb6>
 80088b4:	290a      	cmp	r1, #10
 80088b6:	d004      	beq.n	80088c2 <_puts_r+0xb6>
 80088b8:	6823      	ldr	r3, [r4, #0]
 80088ba:	1c5a      	adds	r2, r3, #1
 80088bc:	6022      	str	r2, [r4, #0]
 80088be:	7019      	strb	r1, [r3, #0]
 80088c0:	e7c5      	b.n	800884e <_puts_r+0x42>
 80088c2:	4622      	mov	r2, r4
 80088c4:	4628      	mov	r0, r5
 80088c6:	f000 f817 	bl	80088f8 <__swbuf_r>
 80088ca:	3001      	adds	r0, #1
 80088cc:	d1bf      	bne.n	800884e <_puts_r+0x42>
 80088ce:	e7df      	b.n	8008890 <_puts_r+0x84>
 80088d0:	250a      	movs	r5, #10
 80088d2:	6823      	ldr	r3, [r4, #0]
 80088d4:	1c5a      	adds	r2, r3, #1
 80088d6:	6022      	str	r2, [r4, #0]
 80088d8:	701d      	strb	r5, [r3, #0]
 80088da:	e7db      	b.n	8008894 <_puts_r+0x88>
 80088dc:	08009cac 	.word	0x08009cac
 80088e0:	08009ccc 	.word	0x08009ccc
 80088e4:	08009c8c 	.word	0x08009c8c

080088e8 <puts>:
 80088e8:	4b02      	ldr	r3, [pc, #8]	; (80088f4 <puts+0xc>)
 80088ea:	4601      	mov	r1, r0
 80088ec:	6818      	ldr	r0, [r3, #0]
 80088ee:	f7ff bf8d 	b.w	800880c <_puts_r>
 80088f2:	bf00      	nop
 80088f4:	200001e8 	.word	0x200001e8

080088f8 <__swbuf_r>:
 80088f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088fa:	460e      	mov	r6, r1
 80088fc:	4614      	mov	r4, r2
 80088fe:	4605      	mov	r5, r0
 8008900:	b118      	cbz	r0, 800890a <__swbuf_r+0x12>
 8008902:	6983      	ldr	r3, [r0, #24]
 8008904:	b90b      	cbnz	r3, 800890a <__swbuf_r+0x12>
 8008906:	f000 f9cd 	bl	8008ca4 <__sinit>
 800890a:	4b21      	ldr	r3, [pc, #132]	; (8008990 <__swbuf_r+0x98>)
 800890c:	429c      	cmp	r4, r3
 800890e:	d12b      	bne.n	8008968 <__swbuf_r+0x70>
 8008910:	686c      	ldr	r4, [r5, #4]
 8008912:	69a3      	ldr	r3, [r4, #24]
 8008914:	60a3      	str	r3, [r4, #8]
 8008916:	89a3      	ldrh	r3, [r4, #12]
 8008918:	071a      	lsls	r2, r3, #28
 800891a:	d52f      	bpl.n	800897c <__swbuf_r+0x84>
 800891c:	6923      	ldr	r3, [r4, #16]
 800891e:	b36b      	cbz	r3, 800897c <__swbuf_r+0x84>
 8008920:	6923      	ldr	r3, [r4, #16]
 8008922:	6820      	ldr	r0, [r4, #0]
 8008924:	b2f6      	uxtb	r6, r6
 8008926:	1ac0      	subs	r0, r0, r3
 8008928:	6963      	ldr	r3, [r4, #20]
 800892a:	4637      	mov	r7, r6
 800892c:	4283      	cmp	r3, r0
 800892e:	dc04      	bgt.n	800893a <__swbuf_r+0x42>
 8008930:	4621      	mov	r1, r4
 8008932:	4628      	mov	r0, r5
 8008934:	f000 f922 	bl	8008b7c <_fflush_r>
 8008938:	bb30      	cbnz	r0, 8008988 <__swbuf_r+0x90>
 800893a:	68a3      	ldr	r3, [r4, #8]
 800893c:	3001      	adds	r0, #1
 800893e:	3b01      	subs	r3, #1
 8008940:	60a3      	str	r3, [r4, #8]
 8008942:	6823      	ldr	r3, [r4, #0]
 8008944:	1c5a      	adds	r2, r3, #1
 8008946:	6022      	str	r2, [r4, #0]
 8008948:	701e      	strb	r6, [r3, #0]
 800894a:	6963      	ldr	r3, [r4, #20]
 800894c:	4283      	cmp	r3, r0
 800894e:	d004      	beq.n	800895a <__swbuf_r+0x62>
 8008950:	89a3      	ldrh	r3, [r4, #12]
 8008952:	07db      	lsls	r3, r3, #31
 8008954:	d506      	bpl.n	8008964 <__swbuf_r+0x6c>
 8008956:	2e0a      	cmp	r6, #10
 8008958:	d104      	bne.n	8008964 <__swbuf_r+0x6c>
 800895a:	4621      	mov	r1, r4
 800895c:	4628      	mov	r0, r5
 800895e:	f000 f90d 	bl	8008b7c <_fflush_r>
 8008962:	b988      	cbnz	r0, 8008988 <__swbuf_r+0x90>
 8008964:	4638      	mov	r0, r7
 8008966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008968:	4b0a      	ldr	r3, [pc, #40]	; (8008994 <__swbuf_r+0x9c>)
 800896a:	429c      	cmp	r4, r3
 800896c:	d101      	bne.n	8008972 <__swbuf_r+0x7a>
 800896e:	68ac      	ldr	r4, [r5, #8]
 8008970:	e7cf      	b.n	8008912 <__swbuf_r+0x1a>
 8008972:	4b09      	ldr	r3, [pc, #36]	; (8008998 <__swbuf_r+0xa0>)
 8008974:	429c      	cmp	r4, r3
 8008976:	bf08      	it	eq
 8008978:	68ec      	ldreq	r4, [r5, #12]
 800897a:	e7ca      	b.n	8008912 <__swbuf_r+0x1a>
 800897c:	4621      	mov	r1, r4
 800897e:	4628      	mov	r0, r5
 8008980:	f000 f80c 	bl	800899c <__swsetup_r>
 8008984:	2800      	cmp	r0, #0
 8008986:	d0cb      	beq.n	8008920 <__swbuf_r+0x28>
 8008988:	f04f 37ff 	mov.w	r7, #4294967295
 800898c:	e7ea      	b.n	8008964 <__swbuf_r+0x6c>
 800898e:	bf00      	nop
 8008990:	08009cac 	.word	0x08009cac
 8008994:	08009ccc 	.word	0x08009ccc
 8008998:	08009c8c 	.word	0x08009c8c

0800899c <__swsetup_r>:
 800899c:	4b32      	ldr	r3, [pc, #200]	; (8008a68 <__swsetup_r+0xcc>)
 800899e:	b570      	push	{r4, r5, r6, lr}
 80089a0:	681d      	ldr	r5, [r3, #0]
 80089a2:	4606      	mov	r6, r0
 80089a4:	460c      	mov	r4, r1
 80089a6:	b125      	cbz	r5, 80089b2 <__swsetup_r+0x16>
 80089a8:	69ab      	ldr	r3, [r5, #24]
 80089aa:	b913      	cbnz	r3, 80089b2 <__swsetup_r+0x16>
 80089ac:	4628      	mov	r0, r5
 80089ae:	f000 f979 	bl	8008ca4 <__sinit>
 80089b2:	4b2e      	ldr	r3, [pc, #184]	; (8008a6c <__swsetup_r+0xd0>)
 80089b4:	429c      	cmp	r4, r3
 80089b6:	d10f      	bne.n	80089d8 <__swsetup_r+0x3c>
 80089b8:	686c      	ldr	r4, [r5, #4]
 80089ba:	89a3      	ldrh	r3, [r4, #12]
 80089bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80089c0:	0719      	lsls	r1, r3, #28
 80089c2:	d42c      	bmi.n	8008a1e <__swsetup_r+0x82>
 80089c4:	06dd      	lsls	r5, r3, #27
 80089c6:	d411      	bmi.n	80089ec <__swsetup_r+0x50>
 80089c8:	2309      	movs	r3, #9
 80089ca:	6033      	str	r3, [r6, #0]
 80089cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80089d0:	f04f 30ff 	mov.w	r0, #4294967295
 80089d4:	81a3      	strh	r3, [r4, #12]
 80089d6:	e03e      	b.n	8008a56 <__swsetup_r+0xba>
 80089d8:	4b25      	ldr	r3, [pc, #148]	; (8008a70 <__swsetup_r+0xd4>)
 80089da:	429c      	cmp	r4, r3
 80089dc:	d101      	bne.n	80089e2 <__swsetup_r+0x46>
 80089de:	68ac      	ldr	r4, [r5, #8]
 80089e0:	e7eb      	b.n	80089ba <__swsetup_r+0x1e>
 80089e2:	4b24      	ldr	r3, [pc, #144]	; (8008a74 <__swsetup_r+0xd8>)
 80089e4:	429c      	cmp	r4, r3
 80089e6:	bf08      	it	eq
 80089e8:	68ec      	ldreq	r4, [r5, #12]
 80089ea:	e7e6      	b.n	80089ba <__swsetup_r+0x1e>
 80089ec:	0758      	lsls	r0, r3, #29
 80089ee:	d512      	bpl.n	8008a16 <__swsetup_r+0x7a>
 80089f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80089f2:	b141      	cbz	r1, 8008a06 <__swsetup_r+0x6a>
 80089f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80089f8:	4299      	cmp	r1, r3
 80089fa:	d002      	beq.n	8008a02 <__swsetup_r+0x66>
 80089fc:	4630      	mov	r0, r6
 80089fe:	f000 fa57 	bl	8008eb0 <_free_r>
 8008a02:	2300      	movs	r3, #0
 8008a04:	6363      	str	r3, [r4, #52]	; 0x34
 8008a06:	89a3      	ldrh	r3, [r4, #12]
 8008a08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008a0c:	81a3      	strh	r3, [r4, #12]
 8008a0e:	2300      	movs	r3, #0
 8008a10:	6063      	str	r3, [r4, #4]
 8008a12:	6923      	ldr	r3, [r4, #16]
 8008a14:	6023      	str	r3, [r4, #0]
 8008a16:	89a3      	ldrh	r3, [r4, #12]
 8008a18:	f043 0308 	orr.w	r3, r3, #8
 8008a1c:	81a3      	strh	r3, [r4, #12]
 8008a1e:	6923      	ldr	r3, [r4, #16]
 8008a20:	b94b      	cbnz	r3, 8008a36 <__swsetup_r+0x9a>
 8008a22:	89a3      	ldrh	r3, [r4, #12]
 8008a24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008a28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a2c:	d003      	beq.n	8008a36 <__swsetup_r+0x9a>
 8008a2e:	4621      	mov	r1, r4
 8008a30:	4630      	mov	r0, r6
 8008a32:	f000 f9fd 	bl	8008e30 <__smakebuf_r>
 8008a36:	89a0      	ldrh	r0, [r4, #12]
 8008a38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a3c:	f010 0301 	ands.w	r3, r0, #1
 8008a40:	d00a      	beq.n	8008a58 <__swsetup_r+0xbc>
 8008a42:	2300      	movs	r3, #0
 8008a44:	60a3      	str	r3, [r4, #8]
 8008a46:	6963      	ldr	r3, [r4, #20]
 8008a48:	425b      	negs	r3, r3
 8008a4a:	61a3      	str	r3, [r4, #24]
 8008a4c:	6923      	ldr	r3, [r4, #16]
 8008a4e:	b943      	cbnz	r3, 8008a62 <__swsetup_r+0xc6>
 8008a50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008a54:	d1ba      	bne.n	80089cc <__swsetup_r+0x30>
 8008a56:	bd70      	pop	{r4, r5, r6, pc}
 8008a58:	0781      	lsls	r1, r0, #30
 8008a5a:	bf58      	it	pl
 8008a5c:	6963      	ldrpl	r3, [r4, #20]
 8008a5e:	60a3      	str	r3, [r4, #8]
 8008a60:	e7f4      	b.n	8008a4c <__swsetup_r+0xb0>
 8008a62:	2000      	movs	r0, #0
 8008a64:	e7f7      	b.n	8008a56 <__swsetup_r+0xba>
 8008a66:	bf00      	nop
 8008a68:	200001e8 	.word	0x200001e8
 8008a6c:	08009cac 	.word	0x08009cac
 8008a70:	08009ccc 	.word	0x08009ccc
 8008a74:	08009c8c 	.word	0x08009c8c

08008a78 <__sflush_r>:
 8008a78:	898a      	ldrh	r2, [r1, #12]
 8008a7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a7c:	4605      	mov	r5, r0
 8008a7e:	0710      	lsls	r0, r2, #28
 8008a80:	460c      	mov	r4, r1
 8008a82:	d457      	bmi.n	8008b34 <__sflush_r+0xbc>
 8008a84:	684b      	ldr	r3, [r1, #4]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	dc04      	bgt.n	8008a94 <__sflush_r+0x1c>
 8008a8a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	dc01      	bgt.n	8008a94 <__sflush_r+0x1c>
 8008a90:	2000      	movs	r0, #0
 8008a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a96:	2e00      	cmp	r6, #0
 8008a98:	d0fa      	beq.n	8008a90 <__sflush_r+0x18>
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008aa0:	682f      	ldr	r7, [r5, #0]
 8008aa2:	602b      	str	r3, [r5, #0]
 8008aa4:	d032      	beq.n	8008b0c <__sflush_r+0x94>
 8008aa6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008aa8:	89a3      	ldrh	r3, [r4, #12]
 8008aaa:	075a      	lsls	r2, r3, #29
 8008aac:	d505      	bpl.n	8008aba <__sflush_r+0x42>
 8008aae:	6863      	ldr	r3, [r4, #4]
 8008ab0:	1ac0      	subs	r0, r0, r3
 8008ab2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ab4:	b10b      	cbz	r3, 8008aba <__sflush_r+0x42>
 8008ab6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ab8:	1ac0      	subs	r0, r0, r3
 8008aba:	2300      	movs	r3, #0
 8008abc:	4602      	mov	r2, r0
 8008abe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ac0:	4628      	mov	r0, r5
 8008ac2:	6a21      	ldr	r1, [r4, #32]
 8008ac4:	47b0      	blx	r6
 8008ac6:	1c43      	adds	r3, r0, #1
 8008ac8:	89a3      	ldrh	r3, [r4, #12]
 8008aca:	d106      	bne.n	8008ada <__sflush_r+0x62>
 8008acc:	6829      	ldr	r1, [r5, #0]
 8008ace:	291d      	cmp	r1, #29
 8008ad0:	d82c      	bhi.n	8008b2c <__sflush_r+0xb4>
 8008ad2:	4a29      	ldr	r2, [pc, #164]	; (8008b78 <__sflush_r+0x100>)
 8008ad4:	40ca      	lsrs	r2, r1
 8008ad6:	07d6      	lsls	r6, r2, #31
 8008ad8:	d528      	bpl.n	8008b2c <__sflush_r+0xb4>
 8008ada:	2200      	movs	r2, #0
 8008adc:	6062      	str	r2, [r4, #4]
 8008ade:	6922      	ldr	r2, [r4, #16]
 8008ae0:	04d9      	lsls	r1, r3, #19
 8008ae2:	6022      	str	r2, [r4, #0]
 8008ae4:	d504      	bpl.n	8008af0 <__sflush_r+0x78>
 8008ae6:	1c42      	adds	r2, r0, #1
 8008ae8:	d101      	bne.n	8008aee <__sflush_r+0x76>
 8008aea:	682b      	ldr	r3, [r5, #0]
 8008aec:	b903      	cbnz	r3, 8008af0 <__sflush_r+0x78>
 8008aee:	6560      	str	r0, [r4, #84]	; 0x54
 8008af0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008af2:	602f      	str	r7, [r5, #0]
 8008af4:	2900      	cmp	r1, #0
 8008af6:	d0cb      	beq.n	8008a90 <__sflush_r+0x18>
 8008af8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008afc:	4299      	cmp	r1, r3
 8008afe:	d002      	beq.n	8008b06 <__sflush_r+0x8e>
 8008b00:	4628      	mov	r0, r5
 8008b02:	f000 f9d5 	bl	8008eb0 <_free_r>
 8008b06:	2000      	movs	r0, #0
 8008b08:	6360      	str	r0, [r4, #52]	; 0x34
 8008b0a:	e7c2      	b.n	8008a92 <__sflush_r+0x1a>
 8008b0c:	6a21      	ldr	r1, [r4, #32]
 8008b0e:	2301      	movs	r3, #1
 8008b10:	4628      	mov	r0, r5
 8008b12:	47b0      	blx	r6
 8008b14:	1c41      	adds	r1, r0, #1
 8008b16:	d1c7      	bne.n	8008aa8 <__sflush_r+0x30>
 8008b18:	682b      	ldr	r3, [r5, #0]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d0c4      	beq.n	8008aa8 <__sflush_r+0x30>
 8008b1e:	2b1d      	cmp	r3, #29
 8008b20:	d001      	beq.n	8008b26 <__sflush_r+0xae>
 8008b22:	2b16      	cmp	r3, #22
 8008b24:	d101      	bne.n	8008b2a <__sflush_r+0xb2>
 8008b26:	602f      	str	r7, [r5, #0]
 8008b28:	e7b2      	b.n	8008a90 <__sflush_r+0x18>
 8008b2a:	89a3      	ldrh	r3, [r4, #12]
 8008b2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b30:	81a3      	strh	r3, [r4, #12]
 8008b32:	e7ae      	b.n	8008a92 <__sflush_r+0x1a>
 8008b34:	690f      	ldr	r7, [r1, #16]
 8008b36:	2f00      	cmp	r7, #0
 8008b38:	d0aa      	beq.n	8008a90 <__sflush_r+0x18>
 8008b3a:	0793      	lsls	r3, r2, #30
 8008b3c:	bf18      	it	ne
 8008b3e:	2300      	movne	r3, #0
 8008b40:	680e      	ldr	r6, [r1, #0]
 8008b42:	bf08      	it	eq
 8008b44:	694b      	ldreq	r3, [r1, #20]
 8008b46:	1bf6      	subs	r6, r6, r7
 8008b48:	600f      	str	r7, [r1, #0]
 8008b4a:	608b      	str	r3, [r1, #8]
 8008b4c:	2e00      	cmp	r6, #0
 8008b4e:	dd9f      	ble.n	8008a90 <__sflush_r+0x18>
 8008b50:	4633      	mov	r3, r6
 8008b52:	463a      	mov	r2, r7
 8008b54:	4628      	mov	r0, r5
 8008b56:	6a21      	ldr	r1, [r4, #32]
 8008b58:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008b5c:	47e0      	blx	ip
 8008b5e:	2800      	cmp	r0, #0
 8008b60:	dc06      	bgt.n	8008b70 <__sflush_r+0xf8>
 8008b62:	89a3      	ldrh	r3, [r4, #12]
 8008b64:	f04f 30ff 	mov.w	r0, #4294967295
 8008b68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b6c:	81a3      	strh	r3, [r4, #12]
 8008b6e:	e790      	b.n	8008a92 <__sflush_r+0x1a>
 8008b70:	4407      	add	r7, r0
 8008b72:	1a36      	subs	r6, r6, r0
 8008b74:	e7ea      	b.n	8008b4c <__sflush_r+0xd4>
 8008b76:	bf00      	nop
 8008b78:	20400001 	.word	0x20400001

08008b7c <_fflush_r>:
 8008b7c:	b538      	push	{r3, r4, r5, lr}
 8008b7e:	690b      	ldr	r3, [r1, #16]
 8008b80:	4605      	mov	r5, r0
 8008b82:	460c      	mov	r4, r1
 8008b84:	b913      	cbnz	r3, 8008b8c <_fflush_r+0x10>
 8008b86:	2500      	movs	r5, #0
 8008b88:	4628      	mov	r0, r5
 8008b8a:	bd38      	pop	{r3, r4, r5, pc}
 8008b8c:	b118      	cbz	r0, 8008b96 <_fflush_r+0x1a>
 8008b8e:	6983      	ldr	r3, [r0, #24]
 8008b90:	b90b      	cbnz	r3, 8008b96 <_fflush_r+0x1a>
 8008b92:	f000 f887 	bl	8008ca4 <__sinit>
 8008b96:	4b14      	ldr	r3, [pc, #80]	; (8008be8 <_fflush_r+0x6c>)
 8008b98:	429c      	cmp	r4, r3
 8008b9a:	d11b      	bne.n	8008bd4 <_fflush_r+0x58>
 8008b9c:	686c      	ldr	r4, [r5, #4]
 8008b9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d0ef      	beq.n	8008b86 <_fflush_r+0xa>
 8008ba6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008ba8:	07d0      	lsls	r0, r2, #31
 8008baa:	d404      	bmi.n	8008bb6 <_fflush_r+0x3a>
 8008bac:	0599      	lsls	r1, r3, #22
 8008bae:	d402      	bmi.n	8008bb6 <_fflush_r+0x3a>
 8008bb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bb2:	f000 f915 	bl	8008de0 <__retarget_lock_acquire_recursive>
 8008bb6:	4628      	mov	r0, r5
 8008bb8:	4621      	mov	r1, r4
 8008bba:	f7ff ff5d 	bl	8008a78 <__sflush_r>
 8008bbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008bc0:	4605      	mov	r5, r0
 8008bc2:	07da      	lsls	r2, r3, #31
 8008bc4:	d4e0      	bmi.n	8008b88 <_fflush_r+0xc>
 8008bc6:	89a3      	ldrh	r3, [r4, #12]
 8008bc8:	059b      	lsls	r3, r3, #22
 8008bca:	d4dd      	bmi.n	8008b88 <_fflush_r+0xc>
 8008bcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bce:	f000 f908 	bl	8008de2 <__retarget_lock_release_recursive>
 8008bd2:	e7d9      	b.n	8008b88 <_fflush_r+0xc>
 8008bd4:	4b05      	ldr	r3, [pc, #20]	; (8008bec <_fflush_r+0x70>)
 8008bd6:	429c      	cmp	r4, r3
 8008bd8:	d101      	bne.n	8008bde <_fflush_r+0x62>
 8008bda:	68ac      	ldr	r4, [r5, #8]
 8008bdc:	e7df      	b.n	8008b9e <_fflush_r+0x22>
 8008bde:	4b04      	ldr	r3, [pc, #16]	; (8008bf0 <_fflush_r+0x74>)
 8008be0:	429c      	cmp	r4, r3
 8008be2:	bf08      	it	eq
 8008be4:	68ec      	ldreq	r4, [r5, #12]
 8008be6:	e7da      	b.n	8008b9e <_fflush_r+0x22>
 8008be8:	08009cac 	.word	0x08009cac
 8008bec:	08009ccc 	.word	0x08009ccc
 8008bf0:	08009c8c 	.word	0x08009c8c

08008bf4 <std>:
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	b510      	push	{r4, lr}
 8008bf8:	4604      	mov	r4, r0
 8008bfa:	e9c0 3300 	strd	r3, r3, [r0]
 8008bfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c02:	6083      	str	r3, [r0, #8]
 8008c04:	8181      	strh	r1, [r0, #12]
 8008c06:	6643      	str	r3, [r0, #100]	; 0x64
 8008c08:	81c2      	strh	r2, [r0, #14]
 8008c0a:	6183      	str	r3, [r0, #24]
 8008c0c:	4619      	mov	r1, r3
 8008c0e:	2208      	movs	r2, #8
 8008c10:	305c      	adds	r0, #92	; 0x5c
 8008c12:	f7ff fdf3 	bl	80087fc <memset>
 8008c16:	4b05      	ldr	r3, [pc, #20]	; (8008c2c <std+0x38>)
 8008c18:	6224      	str	r4, [r4, #32]
 8008c1a:	6263      	str	r3, [r4, #36]	; 0x24
 8008c1c:	4b04      	ldr	r3, [pc, #16]	; (8008c30 <std+0x3c>)
 8008c1e:	62a3      	str	r3, [r4, #40]	; 0x28
 8008c20:	4b04      	ldr	r3, [pc, #16]	; (8008c34 <std+0x40>)
 8008c22:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008c24:	4b04      	ldr	r3, [pc, #16]	; (8008c38 <std+0x44>)
 8008c26:	6323      	str	r3, [r4, #48]	; 0x30
 8008c28:	bd10      	pop	{r4, pc}
 8008c2a:	bf00      	nop
 8008c2c:	08009089 	.word	0x08009089
 8008c30:	080090ab 	.word	0x080090ab
 8008c34:	080090e3 	.word	0x080090e3
 8008c38:	08009107 	.word	0x08009107

08008c3c <_cleanup_r>:
 8008c3c:	4901      	ldr	r1, [pc, #4]	; (8008c44 <_cleanup_r+0x8>)
 8008c3e:	f000 b8af 	b.w	8008da0 <_fwalk_reent>
 8008c42:	bf00      	nop
 8008c44:	08008b7d 	.word	0x08008b7d

08008c48 <__sfmoreglue>:
 8008c48:	2268      	movs	r2, #104	; 0x68
 8008c4a:	b570      	push	{r4, r5, r6, lr}
 8008c4c:	1e4d      	subs	r5, r1, #1
 8008c4e:	4355      	muls	r5, r2
 8008c50:	460e      	mov	r6, r1
 8008c52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008c56:	f000 f993 	bl	8008f80 <_malloc_r>
 8008c5a:	4604      	mov	r4, r0
 8008c5c:	b140      	cbz	r0, 8008c70 <__sfmoreglue+0x28>
 8008c5e:	2100      	movs	r1, #0
 8008c60:	e9c0 1600 	strd	r1, r6, [r0]
 8008c64:	300c      	adds	r0, #12
 8008c66:	60a0      	str	r0, [r4, #8]
 8008c68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008c6c:	f7ff fdc6 	bl	80087fc <memset>
 8008c70:	4620      	mov	r0, r4
 8008c72:	bd70      	pop	{r4, r5, r6, pc}

08008c74 <__sfp_lock_acquire>:
 8008c74:	4801      	ldr	r0, [pc, #4]	; (8008c7c <__sfp_lock_acquire+0x8>)
 8008c76:	f000 b8b3 	b.w	8008de0 <__retarget_lock_acquire_recursive>
 8008c7a:	bf00      	nop
 8008c7c:	20003485 	.word	0x20003485

08008c80 <__sfp_lock_release>:
 8008c80:	4801      	ldr	r0, [pc, #4]	; (8008c88 <__sfp_lock_release+0x8>)
 8008c82:	f000 b8ae 	b.w	8008de2 <__retarget_lock_release_recursive>
 8008c86:	bf00      	nop
 8008c88:	20003485 	.word	0x20003485

08008c8c <__sinit_lock_acquire>:
 8008c8c:	4801      	ldr	r0, [pc, #4]	; (8008c94 <__sinit_lock_acquire+0x8>)
 8008c8e:	f000 b8a7 	b.w	8008de0 <__retarget_lock_acquire_recursive>
 8008c92:	bf00      	nop
 8008c94:	20003486 	.word	0x20003486

08008c98 <__sinit_lock_release>:
 8008c98:	4801      	ldr	r0, [pc, #4]	; (8008ca0 <__sinit_lock_release+0x8>)
 8008c9a:	f000 b8a2 	b.w	8008de2 <__retarget_lock_release_recursive>
 8008c9e:	bf00      	nop
 8008ca0:	20003486 	.word	0x20003486

08008ca4 <__sinit>:
 8008ca4:	b510      	push	{r4, lr}
 8008ca6:	4604      	mov	r4, r0
 8008ca8:	f7ff fff0 	bl	8008c8c <__sinit_lock_acquire>
 8008cac:	69a3      	ldr	r3, [r4, #24]
 8008cae:	b11b      	cbz	r3, 8008cb8 <__sinit+0x14>
 8008cb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cb4:	f7ff bff0 	b.w	8008c98 <__sinit_lock_release>
 8008cb8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008cbc:	6523      	str	r3, [r4, #80]	; 0x50
 8008cbe:	4b13      	ldr	r3, [pc, #76]	; (8008d0c <__sinit+0x68>)
 8008cc0:	4a13      	ldr	r2, [pc, #76]	; (8008d10 <__sinit+0x6c>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	62a2      	str	r2, [r4, #40]	; 0x28
 8008cc6:	42a3      	cmp	r3, r4
 8008cc8:	bf08      	it	eq
 8008cca:	2301      	moveq	r3, #1
 8008ccc:	4620      	mov	r0, r4
 8008cce:	bf08      	it	eq
 8008cd0:	61a3      	streq	r3, [r4, #24]
 8008cd2:	f000 f81f 	bl	8008d14 <__sfp>
 8008cd6:	6060      	str	r0, [r4, #4]
 8008cd8:	4620      	mov	r0, r4
 8008cda:	f000 f81b 	bl	8008d14 <__sfp>
 8008cde:	60a0      	str	r0, [r4, #8]
 8008ce0:	4620      	mov	r0, r4
 8008ce2:	f000 f817 	bl	8008d14 <__sfp>
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	2104      	movs	r1, #4
 8008cea:	60e0      	str	r0, [r4, #12]
 8008cec:	6860      	ldr	r0, [r4, #4]
 8008cee:	f7ff ff81 	bl	8008bf4 <std>
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	2109      	movs	r1, #9
 8008cf6:	68a0      	ldr	r0, [r4, #8]
 8008cf8:	f7ff ff7c 	bl	8008bf4 <std>
 8008cfc:	2202      	movs	r2, #2
 8008cfe:	2112      	movs	r1, #18
 8008d00:	68e0      	ldr	r0, [r4, #12]
 8008d02:	f7ff ff77 	bl	8008bf4 <std>
 8008d06:	2301      	movs	r3, #1
 8008d08:	61a3      	str	r3, [r4, #24]
 8008d0a:	e7d1      	b.n	8008cb0 <__sinit+0xc>
 8008d0c:	08009c88 	.word	0x08009c88
 8008d10:	08008c3d 	.word	0x08008c3d

08008d14 <__sfp>:
 8008d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d16:	4607      	mov	r7, r0
 8008d18:	f7ff ffac 	bl	8008c74 <__sfp_lock_acquire>
 8008d1c:	4b1e      	ldr	r3, [pc, #120]	; (8008d98 <__sfp+0x84>)
 8008d1e:	681e      	ldr	r6, [r3, #0]
 8008d20:	69b3      	ldr	r3, [r6, #24]
 8008d22:	b913      	cbnz	r3, 8008d2a <__sfp+0x16>
 8008d24:	4630      	mov	r0, r6
 8008d26:	f7ff ffbd 	bl	8008ca4 <__sinit>
 8008d2a:	3648      	adds	r6, #72	; 0x48
 8008d2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008d30:	3b01      	subs	r3, #1
 8008d32:	d503      	bpl.n	8008d3c <__sfp+0x28>
 8008d34:	6833      	ldr	r3, [r6, #0]
 8008d36:	b30b      	cbz	r3, 8008d7c <__sfp+0x68>
 8008d38:	6836      	ldr	r6, [r6, #0]
 8008d3a:	e7f7      	b.n	8008d2c <__sfp+0x18>
 8008d3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008d40:	b9d5      	cbnz	r5, 8008d78 <__sfp+0x64>
 8008d42:	4b16      	ldr	r3, [pc, #88]	; (8008d9c <__sfp+0x88>)
 8008d44:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008d48:	60e3      	str	r3, [r4, #12]
 8008d4a:	6665      	str	r5, [r4, #100]	; 0x64
 8008d4c:	f000 f847 	bl	8008dde <__retarget_lock_init_recursive>
 8008d50:	f7ff ff96 	bl	8008c80 <__sfp_lock_release>
 8008d54:	2208      	movs	r2, #8
 8008d56:	4629      	mov	r1, r5
 8008d58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008d5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008d60:	6025      	str	r5, [r4, #0]
 8008d62:	61a5      	str	r5, [r4, #24]
 8008d64:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008d68:	f7ff fd48 	bl	80087fc <memset>
 8008d6c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008d70:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008d74:	4620      	mov	r0, r4
 8008d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d78:	3468      	adds	r4, #104	; 0x68
 8008d7a:	e7d9      	b.n	8008d30 <__sfp+0x1c>
 8008d7c:	2104      	movs	r1, #4
 8008d7e:	4638      	mov	r0, r7
 8008d80:	f7ff ff62 	bl	8008c48 <__sfmoreglue>
 8008d84:	4604      	mov	r4, r0
 8008d86:	6030      	str	r0, [r6, #0]
 8008d88:	2800      	cmp	r0, #0
 8008d8a:	d1d5      	bne.n	8008d38 <__sfp+0x24>
 8008d8c:	f7ff ff78 	bl	8008c80 <__sfp_lock_release>
 8008d90:	230c      	movs	r3, #12
 8008d92:	603b      	str	r3, [r7, #0]
 8008d94:	e7ee      	b.n	8008d74 <__sfp+0x60>
 8008d96:	bf00      	nop
 8008d98:	08009c88 	.word	0x08009c88
 8008d9c:	ffff0001 	.word	0xffff0001

08008da0 <_fwalk_reent>:
 8008da0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008da4:	4606      	mov	r6, r0
 8008da6:	4688      	mov	r8, r1
 8008da8:	2700      	movs	r7, #0
 8008daa:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008dae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008db2:	f1b9 0901 	subs.w	r9, r9, #1
 8008db6:	d505      	bpl.n	8008dc4 <_fwalk_reent+0x24>
 8008db8:	6824      	ldr	r4, [r4, #0]
 8008dba:	2c00      	cmp	r4, #0
 8008dbc:	d1f7      	bne.n	8008dae <_fwalk_reent+0xe>
 8008dbe:	4638      	mov	r0, r7
 8008dc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dc4:	89ab      	ldrh	r3, [r5, #12]
 8008dc6:	2b01      	cmp	r3, #1
 8008dc8:	d907      	bls.n	8008dda <_fwalk_reent+0x3a>
 8008dca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008dce:	3301      	adds	r3, #1
 8008dd0:	d003      	beq.n	8008dda <_fwalk_reent+0x3a>
 8008dd2:	4629      	mov	r1, r5
 8008dd4:	4630      	mov	r0, r6
 8008dd6:	47c0      	blx	r8
 8008dd8:	4307      	orrs	r7, r0
 8008dda:	3568      	adds	r5, #104	; 0x68
 8008ddc:	e7e9      	b.n	8008db2 <_fwalk_reent+0x12>

08008dde <__retarget_lock_init_recursive>:
 8008dde:	4770      	bx	lr

08008de0 <__retarget_lock_acquire_recursive>:
 8008de0:	4770      	bx	lr

08008de2 <__retarget_lock_release_recursive>:
 8008de2:	4770      	bx	lr

08008de4 <__swhatbuf_r>:
 8008de4:	b570      	push	{r4, r5, r6, lr}
 8008de6:	460e      	mov	r6, r1
 8008de8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dec:	4614      	mov	r4, r2
 8008dee:	2900      	cmp	r1, #0
 8008df0:	461d      	mov	r5, r3
 8008df2:	b096      	sub	sp, #88	; 0x58
 8008df4:	da08      	bge.n	8008e08 <__swhatbuf_r+0x24>
 8008df6:	2200      	movs	r2, #0
 8008df8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008dfc:	602a      	str	r2, [r5, #0]
 8008dfe:	061a      	lsls	r2, r3, #24
 8008e00:	d410      	bmi.n	8008e24 <__swhatbuf_r+0x40>
 8008e02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e06:	e00e      	b.n	8008e26 <__swhatbuf_r+0x42>
 8008e08:	466a      	mov	r2, sp
 8008e0a:	f000 f9a3 	bl	8009154 <_fstat_r>
 8008e0e:	2800      	cmp	r0, #0
 8008e10:	dbf1      	blt.n	8008df6 <__swhatbuf_r+0x12>
 8008e12:	9a01      	ldr	r2, [sp, #4]
 8008e14:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008e18:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008e1c:	425a      	negs	r2, r3
 8008e1e:	415a      	adcs	r2, r3
 8008e20:	602a      	str	r2, [r5, #0]
 8008e22:	e7ee      	b.n	8008e02 <__swhatbuf_r+0x1e>
 8008e24:	2340      	movs	r3, #64	; 0x40
 8008e26:	2000      	movs	r0, #0
 8008e28:	6023      	str	r3, [r4, #0]
 8008e2a:	b016      	add	sp, #88	; 0x58
 8008e2c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008e30 <__smakebuf_r>:
 8008e30:	898b      	ldrh	r3, [r1, #12]
 8008e32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008e34:	079d      	lsls	r5, r3, #30
 8008e36:	4606      	mov	r6, r0
 8008e38:	460c      	mov	r4, r1
 8008e3a:	d507      	bpl.n	8008e4c <__smakebuf_r+0x1c>
 8008e3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008e40:	6023      	str	r3, [r4, #0]
 8008e42:	6123      	str	r3, [r4, #16]
 8008e44:	2301      	movs	r3, #1
 8008e46:	6163      	str	r3, [r4, #20]
 8008e48:	b002      	add	sp, #8
 8008e4a:	bd70      	pop	{r4, r5, r6, pc}
 8008e4c:	466a      	mov	r2, sp
 8008e4e:	ab01      	add	r3, sp, #4
 8008e50:	f7ff ffc8 	bl	8008de4 <__swhatbuf_r>
 8008e54:	9900      	ldr	r1, [sp, #0]
 8008e56:	4605      	mov	r5, r0
 8008e58:	4630      	mov	r0, r6
 8008e5a:	f000 f891 	bl	8008f80 <_malloc_r>
 8008e5e:	b948      	cbnz	r0, 8008e74 <__smakebuf_r+0x44>
 8008e60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e64:	059a      	lsls	r2, r3, #22
 8008e66:	d4ef      	bmi.n	8008e48 <__smakebuf_r+0x18>
 8008e68:	f023 0303 	bic.w	r3, r3, #3
 8008e6c:	f043 0302 	orr.w	r3, r3, #2
 8008e70:	81a3      	strh	r3, [r4, #12]
 8008e72:	e7e3      	b.n	8008e3c <__smakebuf_r+0xc>
 8008e74:	4b0d      	ldr	r3, [pc, #52]	; (8008eac <__smakebuf_r+0x7c>)
 8008e76:	62b3      	str	r3, [r6, #40]	; 0x28
 8008e78:	89a3      	ldrh	r3, [r4, #12]
 8008e7a:	6020      	str	r0, [r4, #0]
 8008e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e80:	81a3      	strh	r3, [r4, #12]
 8008e82:	9b00      	ldr	r3, [sp, #0]
 8008e84:	6120      	str	r0, [r4, #16]
 8008e86:	6163      	str	r3, [r4, #20]
 8008e88:	9b01      	ldr	r3, [sp, #4]
 8008e8a:	b15b      	cbz	r3, 8008ea4 <__smakebuf_r+0x74>
 8008e8c:	4630      	mov	r0, r6
 8008e8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e92:	f000 f971 	bl	8009178 <_isatty_r>
 8008e96:	b128      	cbz	r0, 8008ea4 <__smakebuf_r+0x74>
 8008e98:	89a3      	ldrh	r3, [r4, #12]
 8008e9a:	f023 0303 	bic.w	r3, r3, #3
 8008e9e:	f043 0301 	orr.w	r3, r3, #1
 8008ea2:	81a3      	strh	r3, [r4, #12]
 8008ea4:	89a0      	ldrh	r0, [r4, #12]
 8008ea6:	4305      	orrs	r5, r0
 8008ea8:	81a5      	strh	r5, [r4, #12]
 8008eaa:	e7cd      	b.n	8008e48 <__smakebuf_r+0x18>
 8008eac:	08008c3d 	.word	0x08008c3d

08008eb0 <_free_r>:
 8008eb0:	b538      	push	{r3, r4, r5, lr}
 8008eb2:	4605      	mov	r5, r0
 8008eb4:	2900      	cmp	r1, #0
 8008eb6:	d040      	beq.n	8008f3a <_free_r+0x8a>
 8008eb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ebc:	1f0c      	subs	r4, r1, #4
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	bfb8      	it	lt
 8008ec2:	18e4      	addlt	r4, r4, r3
 8008ec4:	f000 f97a 	bl	80091bc <__malloc_lock>
 8008ec8:	4a1c      	ldr	r2, [pc, #112]	; (8008f3c <_free_r+0x8c>)
 8008eca:	6813      	ldr	r3, [r2, #0]
 8008ecc:	b933      	cbnz	r3, 8008edc <_free_r+0x2c>
 8008ece:	6063      	str	r3, [r4, #4]
 8008ed0:	6014      	str	r4, [r2, #0]
 8008ed2:	4628      	mov	r0, r5
 8008ed4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ed8:	f000 b976 	b.w	80091c8 <__malloc_unlock>
 8008edc:	42a3      	cmp	r3, r4
 8008ede:	d908      	bls.n	8008ef2 <_free_r+0x42>
 8008ee0:	6820      	ldr	r0, [r4, #0]
 8008ee2:	1821      	adds	r1, r4, r0
 8008ee4:	428b      	cmp	r3, r1
 8008ee6:	bf01      	itttt	eq
 8008ee8:	6819      	ldreq	r1, [r3, #0]
 8008eea:	685b      	ldreq	r3, [r3, #4]
 8008eec:	1809      	addeq	r1, r1, r0
 8008eee:	6021      	streq	r1, [r4, #0]
 8008ef0:	e7ed      	b.n	8008ece <_free_r+0x1e>
 8008ef2:	461a      	mov	r2, r3
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	b10b      	cbz	r3, 8008efc <_free_r+0x4c>
 8008ef8:	42a3      	cmp	r3, r4
 8008efa:	d9fa      	bls.n	8008ef2 <_free_r+0x42>
 8008efc:	6811      	ldr	r1, [r2, #0]
 8008efe:	1850      	adds	r0, r2, r1
 8008f00:	42a0      	cmp	r0, r4
 8008f02:	d10b      	bne.n	8008f1c <_free_r+0x6c>
 8008f04:	6820      	ldr	r0, [r4, #0]
 8008f06:	4401      	add	r1, r0
 8008f08:	1850      	adds	r0, r2, r1
 8008f0a:	4283      	cmp	r3, r0
 8008f0c:	6011      	str	r1, [r2, #0]
 8008f0e:	d1e0      	bne.n	8008ed2 <_free_r+0x22>
 8008f10:	6818      	ldr	r0, [r3, #0]
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	4401      	add	r1, r0
 8008f16:	6011      	str	r1, [r2, #0]
 8008f18:	6053      	str	r3, [r2, #4]
 8008f1a:	e7da      	b.n	8008ed2 <_free_r+0x22>
 8008f1c:	d902      	bls.n	8008f24 <_free_r+0x74>
 8008f1e:	230c      	movs	r3, #12
 8008f20:	602b      	str	r3, [r5, #0]
 8008f22:	e7d6      	b.n	8008ed2 <_free_r+0x22>
 8008f24:	6820      	ldr	r0, [r4, #0]
 8008f26:	1821      	adds	r1, r4, r0
 8008f28:	428b      	cmp	r3, r1
 8008f2a:	bf01      	itttt	eq
 8008f2c:	6819      	ldreq	r1, [r3, #0]
 8008f2e:	685b      	ldreq	r3, [r3, #4]
 8008f30:	1809      	addeq	r1, r1, r0
 8008f32:	6021      	streq	r1, [r4, #0]
 8008f34:	6063      	str	r3, [r4, #4]
 8008f36:	6054      	str	r4, [r2, #4]
 8008f38:	e7cb      	b.n	8008ed2 <_free_r+0x22>
 8008f3a:	bd38      	pop	{r3, r4, r5, pc}
 8008f3c:	20003488 	.word	0x20003488

08008f40 <sbrk_aligned>:
 8008f40:	b570      	push	{r4, r5, r6, lr}
 8008f42:	4e0e      	ldr	r6, [pc, #56]	; (8008f7c <sbrk_aligned+0x3c>)
 8008f44:	460c      	mov	r4, r1
 8008f46:	6831      	ldr	r1, [r6, #0]
 8008f48:	4605      	mov	r5, r0
 8008f4a:	b911      	cbnz	r1, 8008f52 <sbrk_aligned+0x12>
 8008f4c:	f000 f88c 	bl	8009068 <_sbrk_r>
 8008f50:	6030      	str	r0, [r6, #0]
 8008f52:	4621      	mov	r1, r4
 8008f54:	4628      	mov	r0, r5
 8008f56:	f000 f887 	bl	8009068 <_sbrk_r>
 8008f5a:	1c43      	adds	r3, r0, #1
 8008f5c:	d00a      	beq.n	8008f74 <sbrk_aligned+0x34>
 8008f5e:	1cc4      	adds	r4, r0, #3
 8008f60:	f024 0403 	bic.w	r4, r4, #3
 8008f64:	42a0      	cmp	r0, r4
 8008f66:	d007      	beq.n	8008f78 <sbrk_aligned+0x38>
 8008f68:	1a21      	subs	r1, r4, r0
 8008f6a:	4628      	mov	r0, r5
 8008f6c:	f000 f87c 	bl	8009068 <_sbrk_r>
 8008f70:	3001      	adds	r0, #1
 8008f72:	d101      	bne.n	8008f78 <sbrk_aligned+0x38>
 8008f74:	f04f 34ff 	mov.w	r4, #4294967295
 8008f78:	4620      	mov	r0, r4
 8008f7a:	bd70      	pop	{r4, r5, r6, pc}
 8008f7c:	2000348c 	.word	0x2000348c

08008f80 <_malloc_r>:
 8008f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f84:	1ccd      	adds	r5, r1, #3
 8008f86:	f025 0503 	bic.w	r5, r5, #3
 8008f8a:	3508      	adds	r5, #8
 8008f8c:	2d0c      	cmp	r5, #12
 8008f8e:	bf38      	it	cc
 8008f90:	250c      	movcc	r5, #12
 8008f92:	2d00      	cmp	r5, #0
 8008f94:	4607      	mov	r7, r0
 8008f96:	db01      	blt.n	8008f9c <_malloc_r+0x1c>
 8008f98:	42a9      	cmp	r1, r5
 8008f9a:	d905      	bls.n	8008fa8 <_malloc_r+0x28>
 8008f9c:	230c      	movs	r3, #12
 8008f9e:	2600      	movs	r6, #0
 8008fa0:	603b      	str	r3, [r7, #0]
 8008fa2:	4630      	mov	r0, r6
 8008fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fa8:	4e2e      	ldr	r6, [pc, #184]	; (8009064 <_malloc_r+0xe4>)
 8008faa:	f000 f907 	bl	80091bc <__malloc_lock>
 8008fae:	6833      	ldr	r3, [r6, #0]
 8008fb0:	461c      	mov	r4, r3
 8008fb2:	bb34      	cbnz	r4, 8009002 <_malloc_r+0x82>
 8008fb4:	4629      	mov	r1, r5
 8008fb6:	4638      	mov	r0, r7
 8008fb8:	f7ff ffc2 	bl	8008f40 <sbrk_aligned>
 8008fbc:	1c43      	adds	r3, r0, #1
 8008fbe:	4604      	mov	r4, r0
 8008fc0:	d14d      	bne.n	800905e <_malloc_r+0xde>
 8008fc2:	6834      	ldr	r4, [r6, #0]
 8008fc4:	4626      	mov	r6, r4
 8008fc6:	2e00      	cmp	r6, #0
 8008fc8:	d140      	bne.n	800904c <_malloc_r+0xcc>
 8008fca:	6823      	ldr	r3, [r4, #0]
 8008fcc:	4631      	mov	r1, r6
 8008fce:	4638      	mov	r0, r7
 8008fd0:	eb04 0803 	add.w	r8, r4, r3
 8008fd4:	f000 f848 	bl	8009068 <_sbrk_r>
 8008fd8:	4580      	cmp	r8, r0
 8008fda:	d13a      	bne.n	8009052 <_malloc_r+0xd2>
 8008fdc:	6821      	ldr	r1, [r4, #0]
 8008fde:	3503      	adds	r5, #3
 8008fe0:	1a6d      	subs	r5, r5, r1
 8008fe2:	f025 0503 	bic.w	r5, r5, #3
 8008fe6:	3508      	adds	r5, #8
 8008fe8:	2d0c      	cmp	r5, #12
 8008fea:	bf38      	it	cc
 8008fec:	250c      	movcc	r5, #12
 8008fee:	4638      	mov	r0, r7
 8008ff0:	4629      	mov	r1, r5
 8008ff2:	f7ff ffa5 	bl	8008f40 <sbrk_aligned>
 8008ff6:	3001      	adds	r0, #1
 8008ff8:	d02b      	beq.n	8009052 <_malloc_r+0xd2>
 8008ffa:	6823      	ldr	r3, [r4, #0]
 8008ffc:	442b      	add	r3, r5
 8008ffe:	6023      	str	r3, [r4, #0]
 8009000:	e00e      	b.n	8009020 <_malloc_r+0xa0>
 8009002:	6822      	ldr	r2, [r4, #0]
 8009004:	1b52      	subs	r2, r2, r5
 8009006:	d41e      	bmi.n	8009046 <_malloc_r+0xc6>
 8009008:	2a0b      	cmp	r2, #11
 800900a:	d916      	bls.n	800903a <_malloc_r+0xba>
 800900c:	1961      	adds	r1, r4, r5
 800900e:	42a3      	cmp	r3, r4
 8009010:	6025      	str	r5, [r4, #0]
 8009012:	bf18      	it	ne
 8009014:	6059      	strne	r1, [r3, #4]
 8009016:	6863      	ldr	r3, [r4, #4]
 8009018:	bf08      	it	eq
 800901a:	6031      	streq	r1, [r6, #0]
 800901c:	5162      	str	r2, [r4, r5]
 800901e:	604b      	str	r3, [r1, #4]
 8009020:	4638      	mov	r0, r7
 8009022:	f104 060b 	add.w	r6, r4, #11
 8009026:	f000 f8cf 	bl	80091c8 <__malloc_unlock>
 800902a:	f026 0607 	bic.w	r6, r6, #7
 800902e:	1d23      	adds	r3, r4, #4
 8009030:	1af2      	subs	r2, r6, r3
 8009032:	d0b6      	beq.n	8008fa2 <_malloc_r+0x22>
 8009034:	1b9b      	subs	r3, r3, r6
 8009036:	50a3      	str	r3, [r4, r2]
 8009038:	e7b3      	b.n	8008fa2 <_malloc_r+0x22>
 800903a:	6862      	ldr	r2, [r4, #4]
 800903c:	42a3      	cmp	r3, r4
 800903e:	bf0c      	ite	eq
 8009040:	6032      	streq	r2, [r6, #0]
 8009042:	605a      	strne	r2, [r3, #4]
 8009044:	e7ec      	b.n	8009020 <_malloc_r+0xa0>
 8009046:	4623      	mov	r3, r4
 8009048:	6864      	ldr	r4, [r4, #4]
 800904a:	e7b2      	b.n	8008fb2 <_malloc_r+0x32>
 800904c:	4634      	mov	r4, r6
 800904e:	6876      	ldr	r6, [r6, #4]
 8009050:	e7b9      	b.n	8008fc6 <_malloc_r+0x46>
 8009052:	230c      	movs	r3, #12
 8009054:	4638      	mov	r0, r7
 8009056:	603b      	str	r3, [r7, #0]
 8009058:	f000 f8b6 	bl	80091c8 <__malloc_unlock>
 800905c:	e7a1      	b.n	8008fa2 <_malloc_r+0x22>
 800905e:	6025      	str	r5, [r4, #0]
 8009060:	e7de      	b.n	8009020 <_malloc_r+0xa0>
 8009062:	bf00      	nop
 8009064:	20003488 	.word	0x20003488

08009068 <_sbrk_r>:
 8009068:	b538      	push	{r3, r4, r5, lr}
 800906a:	2300      	movs	r3, #0
 800906c:	4d05      	ldr	r5, [pc, #20]	; (8009084 <_sbrk_r+0x1c>)
 800906e:	4604      	mov	r4, r0
 8009070:	4608      	mov	r0, r1
 8009072:	602b      	str	r3, [r5, #0]
 8009074:	f7fb fbd8 	bl	8004828 <_sbrk>
 8009078:	1c43      	adds	r3, r0, #1
 800907a:	d102      	bne.n	8009082 <_sbrk_r+0x1a>
 800907c:	682b      	ldr	r3, [r5, #0]
 800907e:	b103      	cbz	r3, 8009082 <_sbrk_r+0x1a>
 8009080:	6023      	str	r3, [r4, #0]
 8009082:	bd38      	pop	{r3, r4, r5, pc}
 8009084:	20003490 	.word	0x20003490

08009088 <__sread>:
 8009088:	b510      	push	{r4, lr}
 800908a:	460c      	mov	r4, r1
 800908c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009090:	f000 f8a0 	bl	80091d4 <_read_r>
 8009094:	2800      	cmp	r0, #0
 8009096:	bfab      	itete	ge
 8009098:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800909a:	89a3      	ldrhlt	r3, [r4, #12]
 800909c:	181b      	addge	r3, r3, r0
 800909e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80090a2:	bfac      	ite	ge
 80090a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80090a6:	81a3      	strhlt	r3, [r4, #12]
 80090a8:	bd10      	pop	{r4, pc}

080090aa <__swrite>:
 80090aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090ae:	461f      	mov	r7, r3
 80090b0:	898b      	ldrh	r3, [r1, #12]
 80090b2:	4605      	mov	r5, r0
 80090b4:	05db      	lsls	r3, r3, #23
 80090b6:	460c      	mov	r4, r1
 80090b8:	4616      	mov	r6, r2
 80090ba:	d505      	bpl.n	80090c8 <__swrite+0x1e>
 80090bc:	2302      	movs	r3, #2
 80090be:	2200      	movs	r2, #0
 80090c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090c4:	f000 f868 	bl	8009198 <_lseek_r>
 80090c8:	89a3      	ldrh	r3, [r4, #12]
 80090ca:	4632      	mov	r2, r6
 80090cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80090d0:	81a3      	strh	r3, [r4, #12]
 80090d2:	4628      	mov	r0, r5
 80090d4:	463b      	mov	r3, r7
 80090d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090de:	f000 b817 	b.w	8009110 <_write_r>

080090e2 <__sseek>:
 80090e2:	b510      	push	{r4, lr}
 80090e4:	460c      	mov	r4, r1
 80090e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090ea:	f000 f855 	bl	8009198 <_lseek_r>
 80090ee:	1c43      	adds	r3, r0, #1
 80090f0:	89a3      	ldrh	r3, [r4, #12]
 80090f2:	bf15      	itete	ne
 80090f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80090f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80090fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80090fe:	81a3      	strheq	r3, [r4, #12]
 8009100:	bf18      	it	ne
 8009102:	81a3      	strhne	r3, [r4, #12]
 8009104:	bd10      	pop	{r4, pc}

08009106 <__sclose>:
 8009106:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800910a:	f000 b813 	b.w	8009134 <_close_r>
	...

08009110 <_write_r>:
 8009110:	b538      	push	{r3, r4, r5, lr}
 8009112:	4604      	mov	r4, r0
 8009114:	4608      	mov	r0, r1
 8009116:	4611      	mov	r1, r2
 8009118:	2200      	movs	r2, #0
 800911a:	4d05      	ldr	r5, [pc, #20]	; (8009130 <_write_r+0x20>)
 800911c:	602a      	str	r2, [r5, #0]
 800911e:	461a      	mov	r2, r3
 8009120:	f7fb fb35 	bl	800478e <_write>
 8009124:	1c43      	adds	r3, r0, #1
 8009126:	d102      	bne.n	800912e <_write_r+0x1e>
 8009128:	682b      	ldr	r3, [r5, #0]
 800912a:	b103      	cbz	r3, 800912e <_write_r+0x1e>
 800912c:	6023      	str	r3, [r4, #0]
 800912e:	bd38      	pop	{r3, r4, r5, pc}
 8009130:	20003490 	.word	0x20003490

08009134 <_close_r>:
 8009134:	b538      	push	{r3, r4, r5, lr}
 8009136:	2300      	movs	r3, #0
 8009138:	4d05      	ldr	r5, [pc, #20]	; (8009150 <_close_r+0x1c>)
 800913a:	4604      	mov	r4, r0
 800913c:	4608      	mov	r0, r1
 800913e:	602b      	str	r3, [r5, #0]
 8009140:	f7fb fb41 	bl	80047c6 <_close>
 8009144:	1c43      	adds	r3, r0, #1
 8009146:	d102      	bne.n	800914e <_close_r+0x1a>
 8009148:	682b      	ldr	r3, [r5, #0]
 800914a:	b103      	cbz	r3, 800914e <_close_r+0x1a>
 800914c:	6023      	str	r3, [r4, #0]
 800914e:	bd38      	pop	{r3, r4, r5, pc}
 8009150:	20003490 	.word	0x20003490

08009154 <_fstat_r>:
 8009154:	b538      	push	{r3, r4, r5, lr}
 8009156:	2300      	movs	r3, #0
 8009158:	4d06      	ldr	r5, [pc, #24]	; (8009174 <_fstat_r+0x20>)
 800915a:	4604      	mov	r4, r0
 800915c:	4608      	mov	r0, r1
 800915e:	4611      	mov	r1, r2
 8009160:	602b      	str	r3, [r5, #0]
 8009162:	f7fb fb3b 	bl	80047dc <_fstat>
 8009166:	1c43      	adds	r3, r0, #1
 8009168:	d102      	bne.n	8009170 <_fstat_r+0x1c>
 800916a:	682b      	ldr	r3, [r5, #0]
 800916c:	b103      	cbz	r3, 8009170 <_fstat_r+0x1c>
 800916e:	6023      	str	r3, [r4, #0]
 8009170:	bd38      	pop	{r3, r4, r5, pc}
 8009172:	bf00      	nop
 8009174:	20003490 	.word	0x20003490

08009178 <_isatty_r>:
 8009178:	b538      	push	{r3, r4, r5, lr}
 800917a:	2300      	movs	r3, #0
 800917c:	4d05      	ldr	r5, [pc, #20]	; (8009194 <_isatty_r+0x1c>)
 800917e:	4604      	mov	r4, r0
 8009180:	4608      	mov	r0, r1
 8009182:	602b      	str	r3, [r5, #0]
 8009184:	f7fb fb39 	bl	80047fa <_isatty>
 8009188:	1c43      	adds	r3, r0, #1
 800918a:	d102      	bne.n	8009192 <_isatty_r+0x1a>
 800918c:	682b      	ldr	r3, [r5, #0]
 800918e:	b103      	cbz	r3, 8009192 <_isatty_r+0x1a>
 8009190:	6023      	str	r3, [r4, #0]
 8009192:	bd38      	pop	{r3, r4, r5, pc}
 8009194:	20003490 	.word	0x20003490

08009198 <_lseek_r>:
 8009198:	b538      	push	{r3, r4, r5, lr}
 800919a:	4604      	mov	r4, r0
 800919c:	4608      	mov	r0, r1
 800919e:	4611      	mov	r1, r2
 80091a0:	2200      	movs	r2, #0
 80091a2:	4d05      	ldr	r5, [pc, #20]	; (80091b8 <_lseek_r+0x20>)
 80091a4:	602a      	str	r2, [r5, #0]
 80091a6:	461a      	mov	r2, r3
 80091a8:	f7fb fb31 	bl	800480e <_lseek>
 80091ac:	1c43      	adds	r3, r0, #1
 80091ae:	d102      	bne.n	80091b6 <_lseek_r+0x1e>
 80091b0:	682b      	ldr	r3, [r5, #0]
 80091b2:	b103      	cbz	r3, 80091b6 <_lseek_r+0x1e>
 80091b4:	6023      	str	r3, [r4, #0]
 80091b6:	bd38      	pop	{r3, r4, r5, pc}
 80091b8:	20003490 	.word	0x20003490

080091bc <__malloc_lock>:
 80091bc:	4801      	ldr	r0, [pc, #4]	; (80091c4 <__malloc_lock+0x8>)
 80091be:	f7ff be0f 	b.w	8008de0 <__retarget_lock_acquire_recursive>
 80091c2:	bf00      	nop
 80091c4:	20003484 	.word	0x20003484

080091c8 <__malloc_unlock>:
 80091c8:	4801      	ldr	r0, [pc, #4]	; (80091d0 <__malloc_unlock+0x8>)
 80091ca:	f7ff be0a 	b.w	8008de2 <__retarget_lock_release_recursive>
 80091ce:	bf00      	nop
 80091d0:	20003484 	.word	0x20003484

080091d4 <_read_r>:
 80091d4:	b538      	push	{r3, r4, r5, lr}
 80091d6:	4604      	mov	r4, r0
 80091d8:	4608      	mov	r0, r1
 80091da:	4611      	mov	r1, r2
 80091dc:	2200      	movs	r2, #0
 80091de:	4d05      	ldr	r5, [pc, #20]	; (80091f4 <_read_r+0x20>)
 80091e0:	602a      	str	r2, [r5, #0]
 80091e2:	461a      	mov	r2, r3
 80091e4:	f7fb fab6 	bl	8004754 <_read>
 80091e8:	1c43      	adds	r3, r0, #1
 80091ea:	d102      	bne.n	80091f2 <_read_r+0x1e>
 80091ec:	682b      	ldr	r3, [r5, #0]
 80091ee:	b103      	cbz	r3, 80091f2 <_read_r+0x1e>
 80091f0:	6023      	str	r3, [r4, #0]
 80091f2:	bd38      	pop	{r3, r4, r5, pc}
 80091f4:	20003490 	.word	0x20003490

080091f8 <_init>:
 80091f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091fa:	bf00      	nop
 80091fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091fe:	bc08      	pop	{r3}
 8009200:	469e      	mov	lr, r3
 8009202:	4770      	bx	lr

08009204 <_fini>:
 8009204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009206:	bf00      	nop
 8009208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800920a:	bc08      	pop	{r3}
 800920c:	469e      	mov	lr, r3
 800920e:	4770      	bx	lr
