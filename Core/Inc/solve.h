/**
 * @file solve.h
 * @author HUANG Haolun (mihawkhhuang@gmail.com)
 * @brief
 * @version 0.1
 * @date 2022-11-04
 *
 * @copyright Copyright (c) 2022
 *
 */
//                           --------------------------
//                           | U1(0)   U2(1)   U3(2)  |
//                           |                        |
//                           | U4(3)   U5(4)   U6(5)  |
//                           |                        |
//                           | U7(6)   U8(7)   U9(8)  |
//  ------------------------------------------------------------------------------------------------------
//  | L1(36)  L2(37)  L3(38) | F1(18)  F2(19)  F3(20) | R1(9)   R2(10)  R3(11) |  B1(45)  B2(46)  B3(47) |
//  |                        |                        |                        |                         |
//  | L4(39)  L5(40)  L6(41) | F4(21)  F5(22)  F6(23) | R4(12)  R5(13)  R6(14) | B4(48)  B5(49)  B6(50)  |
//  |                        |                        |                        |                         |
//  | L7(42)  L8(43)  L9(44) | F7(24)  F8(25)  F9(26) | R7(15)  R8(16)  R9(17) |  B7(51)  B8(52)  B9(53) |
//  ------------------------------------------------------------------------------------------------------
//                           | D1(27)  D2(28)  D3(29) |
//                           |                        |
//                           | D4(30)  D5(31)  D6(32) |
//                           |                        |
//                           | D7(33)  D8(34)  D9(35) |
//                           --------------------------
#pragma once
#include "stm32f1xx_hal.h"
typedef struct cube_struct
{
    char face[54];
    uint8_t route[300];
    uint8_t routeLen;
} cube_t;

static const uint8_t transMat[19][54] = {
    // L  0
    {53, 1, 2, 50, 4, 5, 47, 7, 8,
     9, 10, 11, 12, 13, 14, 15, 16, 17,
     0, 19, 20, 3, 22, 23, 6, 25, 26,
     18, 28, 29, 21, 31, 32, 24, 34, 35,
     42, 39, 36, 43, 40, 37, 44, 41, 38,
     45, 46, 33, 48, 49, 30, 51, 52, 27},
    // L' 1
    {18, 1, 2, 21, 4, 5, 24, 7, 8,
     9, 10, 11, 12, 13, 14, 15, 16, 17,
     27, 19, 20, 30, 22, 23, 33, 25, 26,
     53, 28, 29, 50, 31, 32, 47, 34, 35,
     38, 41, 44, 37, 40, 43, 36, 39, 42,
     45, 46, 6, 48, 49, 3, 51, 52, 0},
    // L2 2                                                                                                                                                           // L'  1                                                                                                                                                                          // L' 1
    {27, 1, 2, 30, 4, 5, 33, 7, 8,
     9, 10, 11, 12, 13, 14, 15, 16, 17,
     53, 19, 20, 50, 22, 23, 47, 25, 26,
     0, 28, 29, 3, 31, 32, 6, 34, 35,
     44, 43, 42, 41, 40, 39, 38, 37, 36,
     45, 46, 24, 48, 49, 21, 51, 52, 18},
    // R  3
    {0, 1, 20, 3, 4, 23, 6, 7, 26,
     15, 12, 9, 16, 13, 10, 17, 14, 11,
     18, 19, 29, 21, 22, 32, 24, 25, 35,
     27, 28, 51, 30, 31, 48, 33, 34, 45,
     36, 37, 38, 39, 40, 41, 42, 43, 44,
     8, 46, 47, 5, 49, 50, 2, 52, 53},
    // R' 4
    {0, 1, 51, 3, 4, 48, 6, 7, 45,
     11, 14, 17, 10, 13, 16, 9, 12, 15,
     18, 19, 2, 21, 22, 5, 24, 25, 8,
     27, 28, 20, 30, 31, 23, 33, 34, 26,
     36, 37, 38, 39, 40, 41, 42, 43, 44,
     35, 46, 47, 32, 49, 50, 29, 52, 53},
    // R2 5
    {0, 1, 29, 3, 4, 32, 6, 7, 35,
     17, 16, 15, 14, 13, 12, 11, 10, 9,
     18, 19, 51, 21, 22, 48, 24, 25, 45,
     27, 28, 2, 30, 31, 5, 33, 34, 8,
     36, 37, 38, 39, 40, 41, 42, 43, 44,
     26, 46, 47, 23, 49, 50, 20, 52, 53},
    // U  6
    {6, 3, 0, 7, 4, 1, 8, 5, 2,
     45, 46, 47, 12, 13, 14, 15, 16, 17,
     9, 10, 11, 21, 22, 23, 24, 25, 26,
     27, 28, 29, 30, 31, 32, 33, 34, 35,
     18, 19, 20, 39, 40, 41, 42, 43, 44,
     36, 37, 38, 48, 49, 50, 51, 52, 53},
    // U' 7
    {2, 5, 8, 1, 4, 7, 0, 3, 6,
     18, 19, 20, 12, 13, 14, 15, 16, 17,
     36, 37, 38, 21, 22, 23, 24, 25, 26,
     27, 28, 29, 30, 31, 32, 33, 34, 35,
     45, 46, 47, 39, 40, 41, 42, 43, 44,
     9, 10, 11, 48, 49, 50, 51, 52, 53},
    // U2 8
    {8, 7, 6, 5, 4, 3, 2, 1, 0,
     36, 37, 38, 12, 13, 14, 15, 16, 17,
     45, 46, 47, 21, 22, 23, 24, 25, 26,
     27, 28, 29, 30, 31, 32, 33, 34, 35,
     9, 10, 11, 39, 40, 41, 42, 43, 44,
     18, 19, 20, 48, 49, 50, 51, 52, 53},
    // D  9
    {0, 1, 2, 3, 4, 5, 6, 7, 8,
     9, 10, 11, 12, 13, 14, 24, 25, 26,
     18, 19, 20, 21, 22, 23, 42, 43, 44,
     33, 30, 27, 34, 31, 28, 35, 32, 29,
     36, 37, 38, 39, 40, 41, 51, 52, 53,
     45, 46, 47, 48, 49, 50, 15, 16, 17},
    // D' 10
    {0, 1, 2, 3, 4, 5, 6, 7, 8,
     9, 10, 11, 12, 13, 14, 51, 52, 53,
     18, 19, 20, 21, 22, 23, 15, 16, 17,
     29, 32, 35, 28, 31, 34, 27, 30, 33,
     36, 37, 38, 39, 40, 41, 24, 25, 36,
     45, 46, 47, 48, 49, 50, 42, 43, 44},
    // D2 11
    {0, 1, 2, 3, 4, 5, 6, 7, 8,
     9, 10, 11, 12, 13, 14, 42, 43, 44,
     18, 19, 20, 21, 22, 23, 53, 52, 51,
     35, 43, 33, 32, 31, 30, 29, 28, 27,
     36, 37, 38, 39, 40, 41, 51, 52, 53,
     45, 46, 47, 48, 49, 50, 42, 43, 44},
    // F  12
    {0, 1, 2, 3, 4, 5, 44, 41, 38,
     6, 10, 11, 7, 13, 14, 8, 16, 17,
     24, 21, 18, 25, 22, 19, 26, 23, 20,
     15, 12, 9, 30, 31, 32, 33, 34, 35,
     36, 37, 27, 39, 40, 28, 42, 43, 29,
     45, 46, 47, 48, 49, 50, 51, 52, 53},
    // F' 13
    {0, 1, 2, 3, 4, 5, 9, 12, 15,
     29, 10, 11, 28, 13, 14, 27, 16, 17,
     20, 23, 26, 19, 22, 25, 18, 21, 24,
     38, 41, 44, 30, 31, 32, 33, 34, 35,
     36, 37, 8, 39, 40, 7, 42, 43, 6,
     45, 46, 47, 48, 49, 50, 51, 52, 53},
    // F2 14
    {0, 1, 2, 3, 4, 5, 29, 28, 27,
     44, 10, 11, 41, 13, 14, 38, 16, 17,
     26, 25, 24, 23, 22, 21, 20, 19, 18,
     8, 7, 6, 30, 31, 32, 33, 34, 35,
     36, 37, 15, 39, 40, 12, 42, 43, 9,
     45, 46, 47, 48, 49, 50, 51, 52, 53},
    // B  15
    {11, 14, 17, 3, 4, 5, 6, 7, 8,
     9, 10, 35, 12, 13, 34, 15, 16, 33,
     18, 19, 20, 21, 22, 23, 24, 25, 26,
     27, 28, 29, 30, 31, 32, 36, 39, 42,
     2, 37, 38, 1, 40, 41, 0, 43, 44,
     51, 48, 45, 52, 49, 46, 53, 50, 47},
    // B' 16
    {42, 39, 36, 3, 4, 5, 6, 7, 8,
     9, 10, 0, 12, 13, 1, 15, 16, 2,
     18, 19, 20, 21, 22, 23, 24, 25, 26,
     27, 28, 29, 30, 31, 32, 17, 14, 11,
     33, 37, 38, 34, 40, 41, 35, 43, 44,
     47, 50, 53, 46, 49, 52, 45, 48, 51},
    // B2 17
    {35, 34, 33, 3, 4, 5, 6, 7, 8,
     9, 10, 42, 12, 13, 39, 15, 16, 36,
     18, 19, 20, 21, 22, 23, 24, 25, 26,
     27, 28, 29, 30, 31, 32, 2, 1, 0,
     17, 37, 38, 14, 40, 41, 11, 43, 44,
     53, 52, 51, 50, 49, 48, 47, 46, 45},
    // T
    {6, 3, 0, 7, 4, 1, 8, 5, 2,
     45, 46, 47, 48, 49, 50, 51, 52, 53,
     9, 10, 11, 12, 13, 14, 15, 16, 17,
     29, 32, 35, 28, 31, 34, 27, 30, 33,
     18, 19, 20, 21, 22, 23, 24, 25, 26,
     36, 37, 38, 39, 40, 41, 42, 43, 44}};

typedef enum route_enum
{
    L,
    L3,
    L2,
    R,
    R3,
    R2,
    U,
    U3,
    U2,
    D,
    D3,
    D2,
    F,
    F3,
    F2,
    B,
    B3,
    B2,
    T
} route_t;



void solve_Naive(cube_t *c);